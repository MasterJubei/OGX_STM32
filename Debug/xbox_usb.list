
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013758  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012cc  08013928  08013928  00023928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bf4  08014bf4  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  08014bf4  08014bf4  00024bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bfc  08014bfc  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014bfc  08014bfc  00024bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c04  08014c04  00024c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08014c08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bd4  20000184  08014d8c  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d58  08014d8c  00035d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061ed1  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008dd4  00000000  00000000  00092085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028f0  00000000  00000000  0009ae60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002728  00000000  00000000  0009d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1a0  00000000  00000000  0009fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003170b  00000000  00000000  000cd018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8814  00000000  00000000  000fe723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f6f37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2cc  00000000  00000000  001f6f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000184 	.word	0x20000184
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013910 	.word	0x08013910

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000188 	.word	0x20000188
 800020c:	08013910 	.word	0x08013910

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f006 fad6 	bl	8006d7a <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f006 fb56 	bl	8006e9e <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08013b98 	.word	0x08013b98

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08013ce8 	.word	0x08013ce8

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08013ba8 	.word	0x08013ba8

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f002 f917 	bl	8002b0c <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001a0 	.word	0x200001a0
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f002 fab5 	bl	8002e64 <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f002 faa9 	bl	8002e64 <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f002 f8e6 	bl	8002b0c <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001b4 	.word	0x200001b4
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f011 f972 	bl	8011cd4 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08013cdc 	.word	0x08013cdc

08000a00 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f81c 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d105      	bne.n	8000a38 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f80a 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a36:	e004      	b.n	8000a42 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f804 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
 8000a56:	4613      	mov	r3, r2
 8000a58:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	78ba      	ldrb	r2, [r7, #2]
 8000a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70bb      	strb	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78ba      	ldrb	r2, [r7, #2]
 8000aa4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	787a      	ldrb	r2, [r7, #1]
 8000aac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	141b      	asrs	r3, r3, #16
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	121b      	asrs	r3, r3, #8
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffcd 	bl	8000a7e <_ZN9PS4Parser6setLedEhhh>
        };
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	f00f ff00 	bl	8010908 <_ZN5BTHIDC1EP3BTDbPKc>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3378      	adds	r3, #120	; 0x78
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff65 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3378      	adds	r3, #120	; 0x78
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 f8d6 	bl	8011cd4 <_ZN9PS4Parser5ResetEv>
        };
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08013ca0 	.word	0x08013ca0
 8000b38:	08013cd0 	.word	0x08013cd0

08000b3c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3378      	adds	r3, #120	; 0x78
 8000b66:	7af9      	ldrb	r1, [r7, #11]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f010 ffed 	bl	8011b4a <_ZN9PS4Parser5ParseEhPh>
        };
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3378      	adds	r3, #120	; 0x78
 8000b84:	4618      	mov	r0, r3
 8000b86:	f011 f8a5 	bl	8011cd4 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f855 	bl	8000c3a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3378      	adds	r3, #120	; 0x78
 8000b9c:	21ff      	movs	r1, #255	; 0xff
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff90 	bl	8000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3378      	adds	r3, #120	; 0x78
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f011 f88b 	bl	8011cd4 <_ZN9PS4Parser5ResetEv>
        };
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b096      	sub	sp, #88	; 0x58
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	224f      	movs	r2, #79	; 0x4f
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f012 fe3b 	bl	8013854 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bde:	2352      	movs	r3, #82	; 0x52
 8000be0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000be2:	2311      	movs	r3, #17
 8000be4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	224f      	movs	r2, #79	; 0x4f
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f81a 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c34:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c38:	e7c5      	b.n	8000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c3a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c42:	2343      	movs	r3, #67	; 0x43
 8000c44:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c46:	2302      	movs	r3, #2
 8000c48:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f804 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6898      	ldr	r0, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8999      	ldrh	r1, [r3, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	7d9b      	ldrb	r3, [r3, #22]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	7dd2      	ldrb	r2, [r2, #23]
 8000c7e:	79fc      	ldrb	r4, [r7, #7]
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f00e feda 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f001 fdf0 	bl	800287c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f8e4 	bl	8000e68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 fa42 	bl	8001128 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ca4:	f000 fa12 	bl	80010cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000ca8:	f000 f9d4 	bl	8001054 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000cac:	f00c f816 	bl	800ccdc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000cb0:	f000 f972 	bl	8000f98 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000cb4:	f000 f99a 	bl	8000fec <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000cb8:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <main+0x14c>)
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <main+0x150>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2358      	movs	r3, #88	; 0x58
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f012 fdb8 	bl	8013838 <memcpy>
  UART_Handle = huart2;
 8000cc8:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <main+0x154>)
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <main+0x158>)
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2344      	movs	r3, #68	; 0x44
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f012 fdb0 	bl	8013838 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000cd8:	4845      	ldr	r0, [pc, #276]	; (8000df0 <main+0x15c>)
 8000cda:	f005 fdad 	bl	8006838 <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cde:	4945      	ldr	r1, [pc, #276]	; (8000df4 <main+0x160>)
 8000ce0:	4845      	ldr	r0, [pc, #276]	; (8000df8 <main+0x164>)
 8000ce2:	f7ff fc5b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000ce6:	f003 ffcf 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <main+0x168>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <main+0x16c>)
 8000cf6:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <main+0x16c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <main+0x164>)
 8000d02:	f7ff fc8b 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000d06:	493f      	ldr	r1, [pc, #252]	; (8000e04 <main+0x170>)
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <main+0x164>)
 8000d0a:	f7ff fc55 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d0e:	493e      	ldr	r1, [pc, #248]	; (8000e08 <main+0x174>)
 8000d10:	4839      	ldr	r0, [pc, #228]	; (8000df8 <main+0x164>)
 8000d12:	f7ff fc51 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <main+0x15c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <main+0x178>)
 8000d20:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d26:	f001 fdeb 	bl	8002900 <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <main+0x15c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <main+0x178>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <main+0x178>)
 8000d3c:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000d3e:	4934      	ldr	r1, [pc, #208]	; (8000e10 <main+0x17c>)
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <main+0x164>)
 8000d42:	f7ff fc39 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val/10);
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <main+0x178>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <main+0x180>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	220a      	movs	r2, #10
 8000d56:	4619      	mov	r1, r3
 8000d58:	4827      	ldr	r0, [pc, #156]	; (8000df8 <main+0x164>)
 8000d5a:	f7ff fc5f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d5e:	492e      	ldr	r1, [pc, #184]	; (8000e18 <main+0x184>)
 8000d60:	4825      	ldr	r0, [pc, #148]	; (8000df8 <main+0x164>)
 8000d62:	f7ff fc29 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <main+0x188>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4822      	ldr	r0, [pc, #136]	; (8000df8 <main+0x164>)
 8000d70:	f7ff fc54 	bl	800061c <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f009 fa5e 	bl	800a234 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d78:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <main+0x18c>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4829      	ldr	r0, [pc, #164]	; (8000e24 <main+0x190>)
 8000d7e:	f009 faa3 	bl	800a2c8 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <main+0x194>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <main+0x198>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4828      	ldr	r0, [pc, #160]	; (8000e30 <main+0x19c>)
 8000d8e:	f009 fa9b 	bl	800a2c8 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <main+0x1a0>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <main+0x1a4>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4827      	ldr	r0, [pc, #156]	; (8000e3c <main+0x1a8>)
 8000d9e:	f009 fa93 	bl	800a2c8 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <main+0x1ac>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <main+0x1b0>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <main+0x1b4>)
 8000dae:	f009 fa8b 	bl	800a2c8 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <main+0x1b8>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <main+0x1bc>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <main+0x1c0>)
 8000dbe:	f009 fa83 	bl	800a2c8 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <main+0x1c4>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <main+0x1c8>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4824      	ldr	r0, [pc, #144]	; (8000e60 <main+0x1cc>)
 8000dce:	f009 fa7b 	bl	800a2c8 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <main+0x1d0>)
 8000dd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dd8:	f009 fa50 	bl	800a27c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x148>
 8000dde:	bf00      	nop
 8000de0:	20000320 	.word	0x20000320
 8000de4:	20000224 	.word	0x20000224
 8000de8:	20000378 	.word	0x20000378
 8000dec:	2000027c 	.word	0x2000027c
 8000df0:	200002c0 	.word	0x200002c0
 8000df4:	08013970 	.word	0x08013970
 8000df8:	200003bc 	.word	0x200003bc
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	20000674 	.word	0x20000674
 8000e04:	08013988 	.word	0x08013988
 8000e08:	0801398c 	.word	0x0801398c
 8000e0c:	20000678 	.word	0x20000678
 8000e10:	08013994 	.word	0x08013994
 8000e14:	cccccccd 	.word	0xcccccccd
 8000e18:	080139a8 	.word	0x080139a8
 8000e1c:	2000067c 	.word	0x2000067c
 8000e20:	08013bc0 	.word	0x08013bc0
 8000e24:	080013e1 	.word	0x080013e1
 8000e28:	20000308 	.word	0x20000308
 8000e2c:	08013be4 	.word	0x08013be4
 8000e30:	08001a5d 	.word	0x08001a5d
 8000e34:	2000030c 	.word	0x2000030c
 8000e38:	08013c08 	.word	0x08013c08
 8000e3c:	08001aad 	.word	0x08001aad
 8000e40:	20000310 	.word	0x20000310
 8000e44:	08013c2c 	.word	0x08013c2c
 8000e48:	08001b05 	.word	0x08001b05
 8000e4c:	20000314 	.word	0x20000314
 8000e50:	08013c50 	.word	0x08013c50
 8000e54:	08001ba1 	.word	0x08001ba1
 8000e58:	20000318 	.word	0x20000318
 8000e5c:	08013c74 	.word	0x08013c74
 8000e60:	080012b5 	.word	0x080012b5
 8000e64:	2000031c 	.word	0x2000031c

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ac      	sub	sp, #176	; 0xb0
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e72:	2234      	movs	r2, #52	; 0x34
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f012 fcec 	bl	8013854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	225c      	movs	r2, #92	; 0x5c
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 fcdd 	bl	8013854 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <SystemClock_Config+0x128>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef2:	23a8      	movs	r3, #168	; 0xa8
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efe:	2307      	movs	r3, #7
 8000f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fbfc 	bl	800570c <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f24:	f000 ff6c 	bl	8001e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fdb8 	bl	8004abc <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f5c:	f000 ff50 	bl	8001e00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f66:	2300      	movs	r3, #0
 8000f68:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fef0 	bl	8004d54 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000f84:	f000 ff3c 	bl	8001e00 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	37b0      	adds	r7, #176	; 0xb0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_ZL13MX_TIM14_Initv+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fa4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fa8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fb6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc6:	f005 fbe7 	bl	8006798 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 8000fda:	f000 ff11 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002c0 	.word	0x200002c0
 8000fe8:	40002000 	.word	0x40002000

08000fec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <_ZL12MX_I2C1_Initv+0x60>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <_ZL12MX_I2C1_Initv+0x64>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800102a:	f001 ff35 	bl	8002e98 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800103e:	f000 fedf 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001d0 	.word	0x200001d0
 800104c:	40005400 	.word	0x40005400
 8001050:	00061a80 	.word	0x00061a80

08001054 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <_ZL12MX_SPI1_Initv+0x74>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001088:	2218      	movs	r2, #24
 800108a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a6:	f004 fdcf 	bl	8005c48 <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80010ba:	f000 fea1 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000224 	.word	0x20000224
 80010c8:	40013000 	.word	0x40013000

080010cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_ZL19MX_USART2_UART_Initv+0x58>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001104:	f005 fdec 	bl	8006ce0 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf14      	ite	ne
 800110e:	2301      	movne	r3, #1
 8001110:	2300      	moveq	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001118:	f000 fe72 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000027c 	.word	0x2000027c
 8001124:	40004400 	.word	0x40004400

08001128 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a27      	ldr	r2, [pc, #156]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <_ZL12MX_GPIO_Initv+0xf8>)
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <_ZL12MX_GPIO_Initv+0xfc>)
 80011c4:	f001 fca2 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <_ZL12MX_GPIO_Initv+0x100>)
 80011de:	f001 fc95 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e2:	2310      	movs	r3, #16
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 80011f6:	f001 fc89 	bl	8002b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 8001210:	f001 fc7c 	bl	8002b0c <HAL_GPIO_Init>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	10210000 	.word	0x10210000
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
/*Updates the display_no
* We could also just call display funcitons directly here, but since we have extra processing speed
* Let's play with freeRTOS */
  if(display_no == 0) { /* This is the status screen, show if controller or not connected */
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <_Z23ProcessKeyCodeInContexth+0x2e>
    if(keyCode == BACK_BTN)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d103      	bne.n	8001250 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e01e      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == FORWARD_BTN)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d11b      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e017      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d113      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    if(keyCode == BACK_BTN)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d103      	bne.n	8001274 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e00c      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == FORWARD_BTN)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d103      	bne.n	8001282 <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == SELECT_BTN) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d102      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7;  /* Only get to the pair status screen from here */
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800128a:	2207      	movs	r2, #7
 800128c:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_Z23ProcessKeyCodeInContexth+0x7c>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <_Z23ProcessKeyCodeInContexth+0x80>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000680 	.word	0x20000680
 80012ac:	20000684 	.word	0x20000684
 80012b0:	20000683 	.word	0x20000683

080012b4 <_Z17StartGetLatenciesPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for(;;)
  {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
	  if(timer_val_getBT >= 7) {
 80012bc:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <_Z17StartGetLatenciesPv+0x100>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d90a      	bls.n	80012da <_Z17StartGetLatenciesPv+0x26>
		  Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 80012c4:	493c      	ldr	r1, [pc, #240]	; (80013b8 <_Z17StartGetLatenciesPv+0x104>)
 80012c6:	483d      	ldr	r0, [pc, #244]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 80012c8:	f7ff f976 	bl	80005b8 <_ZN5Print5printEPKc>
		  Serial.print(timer_val_getBT);
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <_Z17StartGetLatenciesPv+0x100>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	220a      	movs	r2, #10
 80012d2:	4619      	mov	r1, r3
 80012d4:	4839      	ldr	r0, [pc, #228]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 80012d6:	f7ff f9a1 	bl	800061c <_ZN5Print5printEii>
	  }
	  if(timer_val_getUSB >= 4) {
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <_Z17StartGetLatenciesPv+0x10c>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d90a      	bls.n	80012f8 <_Z17StartGetLatenciesPv+0x44>
		  Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 80012e2:	4938      	ldr	r1, [pc, #224]	; (80013c4 <_Z17StartGetLatenciesPv+0x110>)
 80012e4:	4835      	ldr	r0, [pc, #212]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 80012e6:	f7ff f967 	bl	80005b8 <_ZN5Print5printEPKc>
		  Serial.print(timer_val_getUSB);
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <_Z17StartGetLatenciesPv+0x10c>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	220a      	movs	r2, #10
 80012f0:	4619      	mov	r1, r3
 80012f2:	4832      	ldr	r0, [pc, #200]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 80012f4:	f7ff f992 	bl	800061c <_ZN5Print5printEii>

	  Serial.print(" ");
	  Serial.print(timer_val_LCD);
#endif
#endif
	Serial.print("\r\nRumble Data: ");
 80012f8:	4933      	ldr	r1, [pc, #204]	; (80013c8 <_Z17StartGetLatenciesPv+0x114>)
 80012fa:	4830      	ldr	r0, [pc, #192]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 80012fc:	f7ff f95c 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[0]);
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <_Z17StartGetLatenciesPv+0x118>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	220a      	movs	r2, #10
 8001306:	4619      	mov	r1, r3
 8001308:	482c      	ldr	r0, [pc, #176]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 800130a:	f7ff f975 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 800130e:	4930      	ldr	r1, [pc, #192]	; (80013d0 <_Z17StartGetLatenciesPv+0x11c>)
 8001310:	482a      	ldr	r0, [pc, #168]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001312:	f7ff f951 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[1]);
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <_Z17StartGetLatenciesPv+0x118>)
 8001318:	785b      	ldrb	r3, [r3, #1]
 800131a:	220a      	movs	r2, #10
 800131c:	4619      	mov	r1, r3
 800131e:	4827      	ldr	r0, [pc, #156]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001320:	f7ff f96a 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 8001324:	492a      	ldr	r1, [pc, #168]	; (80013d0 <_Z17StartGetLatenciesPv+0x11c>)
 8001326:	4825      	ldr	r0, [pc, #148]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001328:	f7ff f946 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[2]);
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <_Z17StartGetLatenciesPv+0x118>)
 800132e:	789b      	ldrb	r3, [r3, #2]
 8001330:	220a      	movs	r2, #10
 8001332:	4619      	mov	r1, r3
 8001334:	4821      	ldr	r0, [pc, #132]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001336:	f7ff f95f 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 800133a:	4925      	ldr	r1, [pc, #148]	; (80013d0 <_Z17StartGetLatenciesPv+0x11c>)
 800133c:	481f      	ldr	r0, [pc, #124]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 800133e:	f7ff f93b 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[3]);
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <_Z17StartGetLatenciesPv+0x118>)
 8001344:	78db      	ldrb	r3, [r3, #3]
 8001346:	220a      	movs	r2, #10
 8001348:	4619      	mov	r1, r3
 800134a:	481c      	ldr	r0, [pc, #112]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 800134c:	f7ff f954 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 8001350:	491f      	ldr	r1, [pc, #124]	; (80013d0 <_Z17StartGetLatenciesPv+0x11c>)
 8001352:	481a      	ldr	r0, [pc, #104]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001354:	f7ff f930 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[4]);
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <_Z17StartGetLatenciesPv+0x118>)
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	220a      	movs	r2, #10
 800135e:	4619      	mov	r1, r3
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001362:	f7ff f949 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 8001366:	491a      	ldr	r1, [pc, #104]	; (80013d0 <_Z17StartGetLatenciesPv+0x11c>)
 8001368:	4814      	ldr	r0, [pc, #80]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 800136a:	f7ff f925 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rx_buf[5]);
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <_Z17StartGetLatenciesPv+0x118>)
 8001370:	795b      	ldrb	r3, [r3, #5]
 8001372:	220a      	movs	r2, #10
 8001374:	4619      	mov	r1, r3
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001378:	f7ff f93e 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print("   ");
 800137c:	4915      	ldr	r1, [pc, #84]	; (80013d4 <_Z17StartGetLatenciesPv+0x120>)
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001380:	f7ff f91a 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(dataout_ran);
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <_Z17StartGetLatenciesPv+0x124>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	220a      	movs	r2, #10
 800138a:	4619      	mov	r1, r3
 800138c:	480b      	ldr	r0, [pc, #44]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 800138e:	f7ff f933 	bl	80005f8 <_ZN5Print5printEhi>
	Serial.print(" ");
 8001392:	490f      	ldr	r1, [pc, #60]	; (80013d0 <_Z17StartGetLatenciesPv+0x11c>)
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 8001396:	f7ff f90f 	bl	80005b8 <_ZN5Print5printEPKc>
	Serial.print(rumble_brequest_sent);
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <_Z17StartGetLatenciesPv+0x128>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	220a      	movs	r2, #10
 80013a0:	4619      	mov	r1, r3
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <_Z17StartGetLatenciesPv+0x108>)
 80013a4:	f7ff f928 	bl	80005f8 <_ZN5Print5printEhi>
	osDelay(1000);
 80013a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ac:	f009 f81e 	bl	800a3ec <osDelay>
	  if(timer_val_getBT >= 7) {
 80013b0:	e784      	b.n	80012bc <_Z17StartGetLatenciesPv+0x8>
 80013b2:	bf00      	nop
 80013b4:	20000686 	.word	0x20000686
 80013b8:	080139ac 	.word	0x080139ac
 80013bc:	200003bc 	.word	0x200003bc
 80013c0:	20000688 	.word	0x20000688
 80013c4:	080139e0 	.word	0x080139e0
 80013c8:	08013a14 	.word	0x08013a14
 80013cc:	200001c8 	.word	0x200001c8
 80013d0:	08013a24 	.word	0x08013a24
 80013d4:	08013a28 	.word	0x08013a28
 80013d8:	20000ab9 	.word	0x20000ab9
 80013dc:	20000abb 	.word	0x20000abb

080013e0 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80013e8:	48b5      	ldr	r0, [pc, #724]	; (80016c0 <_Z10StartGetBTPv+0x2e0>)
 80013ea:	f000 fd17 	bl	8001e1c <_ZN8MAX3421eI3P102P9E4InitEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	bf0c      	ite	eq
 80013f6:	2301      	moveq	r3, #1
 80013f8:	2300      	movne	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 8001400:	49b0      	ldr	r1, [pc, #704]	; (80016c4 <_Z10StartGetBTPv+0x2e4>)
 8001402:	48b1      	ldr	r0, [pc, #708]	; (80016c8 <_Z10StartGetBTPv+0x2e8>)
 8001404:	f7ff f8ca 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8001408:	e7fe      	b.n	8001408 <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 800140a:	49b0      	ldr	r1, [pc, #704]	; (80016cc <_Z10StartGetBTPv+0x2ec>)
 800140c:	48ae      	ldr	r0, [pc, #696]	; (80016c8 <_Z10StartGetBTPv+0x2e8>)
 800140e:	f7ff f8c5 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 8001412:	4baf      	ldr	r3, [pc, #700]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001414:	2200      	movs	r2, #0
 8001416:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 8001418:	4bad      	ldr	r3, [pc, #692]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 800141a:	2200      	movs	r2, #0
 800141c:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 800141e:	4bac      	ldr	r3, [pc, #688]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001420:	2200      	movs	r2, #0
 8001422:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 8001424:	4baa      	ldr	r3, [pc, #680]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001426:	2200      	movs	r2, #0
 8001428:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 800142a:	4ba9      	ldr	r3, [pc, #676]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001430:	4ba7      	ldr	r3, [pc, #668]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001432:	2200      	movs	r2, #0
 8001434:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 8001436:	4aa6      	ldr	r2, [pc, #664]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001438:	7993      	ldrb	r3, [r2, #6]
 800143a:	f36f 0300 	bfc	r3, #0, #1
 800143e:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001440:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 8001446:	4ba3      	ldr	r3, [pc, #652]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001448:	2214      	movs	r2, #20
 800144a:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 800144c:	4ba1      	ldr	r3, [pc, #644]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800144e:	2200      	movs	r2, #0
 8001450:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001452:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001454:	2200      	movs	r2, #0
 8001456:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001458:	4b9e      	ldr	r3, [pc, #632]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800145a:	2200      	movs	r2, #0
 800145c:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 800145e:	4b9d      	ldr	r3, [pc, #628]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001460:	2200      	movs	r2, #0
 8001462:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001464:	4b9b      	ldr	r3, [pc, #620]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001466:	2200      	movs	r2, #0
 8001468:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800146a:	4b9a      	ldr	r3, [pc, #616]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800146c:	2200      	movs	r2, #0
 800146e:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001470:	4b98      	ldr	r3, [pc, #608]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001472:	2200      	movs	r2, #0
 8001474:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 8001476:	4b97      	ldr	r3, [pc, #604]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001478:	2200      	movs	r2, #0
 800147a:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 800147c:	4b95      	ldr	r3, [pc, #596]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800147e:	2200      	movs	r2, #0
 8001480:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001482:	4b94      	ldr	r3, [pc, #592]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001484:	2200      	movs	r2, #0
 8001486:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001488:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800148a:	2200      	movs	r2, #0
 800148c:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 800148e:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001490:	2200      	movs	r2, #0
 8001492:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001494:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001496:	2200      	movs	r2, #0
 8001498:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
	  	timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 800149a:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <_Z10StartGetBTPv+0x2f8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <_Z10StartGetBTPv+0x2fc>)
 80014a4:	801a      	strh	r2, [r3, #0]
#endif
		Usb.Task();
 80014a6:	4886      	ldr	r0, [pc, #536]	; (80016c0 <_Z10StartGetBTPv+0x2e0>)
 80014a8:	f011 f952 	bl	8012750 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 80014ac:	488c      	ldr	r0, [pc, #560]	; (80016e0 <_Z10StartGetBTPv+0x300>)
 80014ae:	f7ff fb45 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8293 	beq.w	80019e0 <_Z10StartGetBTPv+0x600>
			ps4_connected = 1;
 80014ba:	4b8a      	ldr	r3, [pc, #552]	; (80016e4 <_Z10StartGetBTPv+0x304>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80014c0:	2100      	movs	r1, #0
 80014c2:	4889      	ldr	r0, [pc, #548]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80014c4:	f010 fb31 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b87      	ldr	r3, [pc, #540]	; (80016ec <_Z10StartGetBTPv+0x30c>)
 80014ce:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 80014d0:	2101      	movs	r1, #1
 80014d2:	4885      	ldr	r0, [pc, #532]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80014d4:	f010 fb29 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b84      	ldr	r3, [pc, #528]	; (80016f0 <_Z10StartGetBTPv+0x310>)
 80014de:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 80014e0:	2102      	movs	r1, #2
 80014e2:	4881      	ldr	r0, [pc, #516]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80014e4:	f010 fb21 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <_Z10StartGetBTPv+0x314>)
 80014ee:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 80014f0:	2103      	movs	r1, #3
 80014f2:	487d      	ldr	r0, [pc, #500]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80014f4:	f010 fb19 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <_Z10StartGetBTPv+0x318>)
 80014fe:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
			gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001500:	2100      	movs	r1, #0
 8001502:	4879      	ldr	r0, [pc, #484]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 8001504:	f010 fb11 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001508:	4603      	mov	r3, r0
 800150a:	3b80      	subs	r3, #128	; 0x80
 800150c:	b2db      	uxtb	r3, r3
 800150e:	b25a      	sxtb	r2, r3
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001512:	709a      	strb	r2, [r3, #2]
			gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001514:	2101      	movs	r1, #1
 8001516:	4874      	ldr	r0, [pc, #464]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 8001518:	f010 fb07 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800151c:	4603      	mov	r3, r0
 800151e:	3b80      	subs	r3, #128	; 0x80
 8001520:	b2db      	uxtb	r3, r3
 8001522:	b25a      	sxtb	r2, r3
 8001524:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001526:	70da      	strb	r2, [r3, #3]
			xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001528:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 800152a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001534:	819a      	strh	r2, [r3, #12]
			xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001538:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001542:	81da      	strh	r2, [r3, #14]
			/* The Y axis by default is inverted on the Xbox */
			xboxHID.leftStickY = -xboxHID.leftStickY-128;
 8001544:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001546:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800154a:	b29a      	uxth	r2, r3
 800154c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 8001558:	81da      	strh	r2, [r3, #14]

			gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 800155a:	2102      	movs	r1, #2
 800155c:	4862      	ldr	r0, [pc, #392]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 800155e:	f010 fae4 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001562:	4603      	mov	r3, r0
 8001564:	3b80      	subs	r3, #128	; 0x80
 8001566:	b2db      	uxtb	r3, r3
 8001568:	b25a      	sxtb	r2, r3
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 800156c:	711a      	strb	r2, [r3, #4]
			gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 800156e:	2103      	movs	r1, #3
 8001570:	485d      	ldr	r0, [pc, #372]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 8001572:	f010 fada 	bl	8011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001576:	4603      	mov	r3, r0
 8001578:	3b80      	subs	r3, #128	; 0x80
 800157a:	b2db      	uxtb	r3, r3
 800157c:	b25a      	sxtb	r2, r3
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001580:	715a      	strb	r2, [r3, #5]
			xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001582:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001584:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800158e:	821a      	strh	r2, [r3, #16]
			xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001590:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001592:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800159c:	825a      	strh	r2, [r3, #18]

			/* The Y axis by default is inverted on the Xbox */
			xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 800159e:	4b4d      	ldr	r3, [pc, #308]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80015a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80015b2:	825a      	strh	r2, [r3, #18]
#endif

			xboxHID.L = PS4.getAnalogButton(L2);
 80015b4:	2108      	movs	r1, #8
 80015b6:	484c      	ldr	r0, [pc, #304]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80015b8:	f010 fa9e 	bl	8011af8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80015c2:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 80015c4:	2109      	movs	r1, #9
 80015c6:	4848      	ldr	r0, [pc, #288]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80015c8:	f010 fa96 	bl	8011af8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80015d2:	72da      	strb	r2, [r3, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 80015d4:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80015d6:	7a9b      	ldrb	r3, [r3, #10]
 80015d8:	3b80      	subs	r3, #128	; 0x80
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b25a      	sxtb	r2, r3
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 80015e0:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80015e4:	7adb      	ldrb	r3, [r3, #11]
 80015e6:	3b80      	subs	r3, #128	; 0x80
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 80015ee:	705a      	strb	r2, [r3, #1]

			if (PS4.getButtonClick(PS)) {
 80015f0:	2110      	movs	r1, #16
 80015f2:	483d      	ldr	r0, [pc, #244]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80015f4:	f010 fa40 	bl	8011a78 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <_Z10StartGetBTPv+0x230>
				PS4.disconnect();
 80015fe:	4838      	ldr	r0, [pc, #224]	; (80016e0 <_Z10StartGetBTPv+0x300>)
 8001600:	f00f f9f3 	bl	80109ea <_ZN5BTHID10disconnectEv>
				display_run_once = 0;
 8001604:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <_Z10StartGetBTPv+0x31c>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
				rumble_once = 0;
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <_Z10StartGetBTPv+0x320>)
 800160c:	2200      	movs	r2, #0
 800160e:	701a      	strb	r2, [r3, #0]
        
			}
			if (PS4.getButtonPress(TRIANGLE)) {
 8001610:	210c      	movs	r1, #12
 8001612:	4835      	ldr	r0, [pc, #212]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 8001614:	f010 fa08 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <_Z10StartGetBTPv+0x250>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 800161e:	4a2c      	ldr	r2, [pc, #176]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001620:	79d3      	ldrb	r3, [r2, #7]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	71da      	strb	r2, [r3, #7]
 800162e:	e007      	b.n	8001640 <_Z10StartGetBTPv+0x260>
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001632:	79d3      	ldrb	r3, [r2, #7]
 8001634:	f36f 0300 	bfc	r3, #0, #1
 8001638:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800163c:	2200      	movs	r2, #0
 800163e:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 8001640:	210d      	movs	r1, #13
 8001642:	4829      	ldr	r0, [pc, #164]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 8001644:	f010 f9f0 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <_Z10StartGetBTPv+0x280>
				gameHID.ps4ButtonsTag.button_circle = 1;
 800164e:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001650:	7993      	ldrb	r3, [r2, #6]
 8001652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001656:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	715a      	strb	r2, [r3, #5]
 800165e:	e007      	b.n	8001670 <_Z10StartGetBTPv+0x290>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001662:	7993      	ldrb	r3, [r2, #6]
 8001664:	f36f 13c7 	bfc	r3, #7, #1
 8001668:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800166c:	2200      	movs	r2, #0
 800166e:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 8001670:	210e      	movs	r1, #14
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 8001674:	f010 f9d8 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <_Z10StartGetBTPv+0x2b0>
				gameHID.ps4ButtonsTag.button_cross = 1;
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001680:	7993      	ldrb	r3, [r2, #6]
 8001682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001686:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	711a      	strb	r2, [r3, #4]
 800168e:	e007      	b.n	80016a0 <_Z10StartGetBTPv+0x2c0>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001690:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 8001692:	7993      	ldrb	r3, [r2, #6]
 8001694:	f36f 1386 	bfc	r3, #6, #1
 8001698:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 800169c:	2200      	movs	r2, #0
 800169e:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 80016a0:	210f      	movs	r1, #15
 80016a2:	4811      	ldr	r0, [pc, #68]	; (80016e8 <_Z10StartGetBTPv+0x308>)
 80016a4:	f010 f9c0 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d02a      	beq.n	8001704 <_Z10StartGetBTPv+0x324>
				gameHID.ps4ButtonsTag.button_square = 1;
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <_Z10StartGetBTPv+0x2f0>)
 80016b0:	79d3      	ldrb	r3, [r2, #7]
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <_Z10StartGetBTPv+0x2f4>)
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	719a      	strb	r2, [r3, #6]
 80016be:	e029      	b.n	8001714 <_Z10StartGetBTPv+0x334>
 80016c0:	200003d0 	.word	0x200003d0
 80016c4:	08013a2c 	.word	0x08013a2c
 80016c8:	200003bc 	.word	0x200003bc
 80016cc:	08013a40 	.word	0x08013a40
 80016d0:	2000068c 	.word	0x2000068c
 80016d4:	20000694 	.word	0x20000694
 80016d8:	200002c0 	.word	0x200002c0
 80016dc:	20000686 	.word	0x20000686
 80016e0:	200005a4 	.word	0x200005a4
 80016e4:	2000066e 	.word	0x2000066e
 80016e8:	2000061c 	.word	0x2000061c
 80016ec:	2000066f 	.word	0x2000066f
 80016f0:	20000670 	.word	0x20000670
 80016f4:	20000671 	.word	0x20000671
 80016f8:	20000672 	.word	0x20000672
 80016fc:	20000684 	.word	0x20000684
 8001700:	2000066d 	.word	0x2000066d
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 8001704:	4aae      	ldr	r2, [pc, #696]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001706:	79d3      	ldrb	r3, [r2, #7]
 8001708:	f36f 0341 	bfc	r3, #1, #1
 800170c:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 800170e:	4bad      	ldr	r3, [pc, #692]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001710:	2200      	movs	r2, #0
 8001712:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 8001714:	2100      	movs	r1, #0
 8001716:	48ac      	ldr	r0, [pc, #688]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001718:	f010 f986 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00c      	beq.n	800173c <_Z10StartGetBTPv+0x35c>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001722:	4aa7      	ldr	r2, [pc, #668]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001724:	79d3      	ldrb	r3, [r2, #7]
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 800172c:	4ba5      	ldr	r3, [pc, #660]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4ba3      	ldr	r3, [pc, #652]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001738:	709a      	strb	r2, [r3, #2]
 800173a:	e00b      	b.n	8001754 <_Z10StartGetBTPv+0x374>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 800173c:	4aa0      	ldr	r2, [pc, #640]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 800173e:	79d3      	ldrb	r3, [r2, #7]
 8001740:	f36f 0382 	bfc	r3, #2, #1
 8001744:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001746:	4b9f      	ldr	r3, [pc, #636]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001748:	789b      	ldrb	r3, [r3, #2]
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b9c      	ldr	r3, [pc, #624]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001752:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 8001754:	2101      	movs	r1, #1
 8001756:	489c      	ldr	r0, [pc, #624]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001758:	f010 f966 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00c      	beq.n	800177c <_Z10StartGetBTPv+0x39c>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001762:	4a97      	ldr	r2, [pc, #604]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001764:	79d3      	ldrb	r3, [r2, #7]
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 800176c:	4b95      	ldr	r3, [pc, #596]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800176e:	789b      	ldrb	r3, [r3, #2]
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b93      	ldr	r3, [pc, #588]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001778:	709a      	strb	r2, [r3, #2]
 800177a:	e00b      	b.n	8001794 <_Z10StartGetBTPv+0x3b4>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 800177c:	4a90      	ldr	r2, [pc, #576]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 800177e:	79d3      	ldrb	r3, [r2, #7]
 8001780:	f36f 03c3 	bfc	r3, #3, #1
 8001784:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001786:	4b8f      	ldr	r3, [pc, #572]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001788:	789b      	ldrb	r3, [r3, #2]
 800178a:	f023 0308 	bic.w	r3, r3, #8
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b8c      	ldr	r3, [pc, #560]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001792:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 8001794:	2102      	movs	r1, #2
 8001796:	488c      	ldr	r0, [pc, #560]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001798:	f010 f946 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <_Z10StartGetBTPv+0x3dc>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 80017a2:	4a87      	ldr	r2, [pc, #540]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80017a4:	79d3      	ldrb	r3, [r2, #7]
 80017a6:	f043 0320 	orr.w	r3, r3, #32
 80017aa:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 80017ac:	4b85      	ldr	r3, [pc, #532]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80017ae:	789b      	ldrb	r3, [r3, #2]
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b83      	ldr	r3, [pc, #524]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80017b8:	709a      	strb	r2, [r3, #2]
 80017ba:	e00b      	b.n	80017d4 <_Z10StartGetBTPv+0x3f4>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 80017bc:	4a80      	ldr	r2, [pc, #512]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80017be:	79d3      	ldrb	r3, [r2, #7]
 80017c0:	f36f 1345 	bfc	r3, #5, #1
 80017c4:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80017c6:	4b7f      	ldr	r3, [pc, #508]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80017c8:	789b      	ldrb	r3, [r3, #2]
 80017ca:	f023 0302 	bic.w	r3, r3, #2
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80017d2:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 80017d4:	2103      	movs	r1, #3
 80017d6:	487c      	ldr	r0, [pc, #496]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 80017d8:	f010 f926 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <_Z10StartGetBTPv+0x41c>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80017e2:	4a77      	ldr	r2, [pc, #476]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80017e4:	79d3      	ldrb	r3, [r2, #7]
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 80017ec:	4b75      	ldr	r3, [pc, #468]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80017ee:	789b      	ldrb	r3, [r3, #2]
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80017f8:	709a      	strb	r2, [r3, #2]
 80017fa:	e00b      	b.n	8001814 <_Z10StartGetBTPv+0x434>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80017fc:	4a70      	ldr	r2, [pc, #448]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80017fe:	79d3      	ldrb	r3, [r2, #7]
 8001800:	f36f 1304 	bfc	r3, #4, #1
 8001804:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 8001806:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001808:	789b      	ldrb	r3, [r3, #2]
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001812:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 8001814:	210a      	movs	r1, #10
 8001816:	486c      	ldr	r0, [pc, #432]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001818:	f010 f906 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <_Z10StartGetBTPv+0x454>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001822:	4a67      	ldr	r2, [pc, #412]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001824:	7993      	ldrb	r3, [r2, #6]
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 800182c:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800182e:	22ff      	movs	r2, #255	; 0xff
 8001830:	725a      	strb	r2, [r3, #9]
 8001832:	e007      	b.n	8001844 <_Z10StartGetBTPv+0x464>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8001834:	4a62      	ldr	r2, [pc, #392]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001836:	7993      	ldrb	r3, [r2, #6]
 8001838:	f36f 1345 	bfc	r3, #5, #1
 800183c:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 800183e:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001840:	2200      	movs	r2, #0
 8001842:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(L3)) {
 8001844:	2106      	movs	r1, #6
 8001846:	4860      	ldr	r0, [pc, #384]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001848:	f010 f8ee 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00c      	beq.n	800186c <_Z10StartGetBTPv+0x48c>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001852:	4a5b      	ldr	r2, [pc, #364]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001854:	79d3      	ldrb	r3, [r2, #7]
 8001856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800185a:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800185e:	789b      	ldrb	r3, [r3, #2]
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001868:	709a      	strb	r2, [r3, #2]
 800186a:	e00b      	b.n	8001884 <_Z10StartGetBTPv+0x4a4>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 800186c:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 800186e:	79d3      	ldrb	r3, [r2, #7]
 8001870:	f36f 1386 	bfc	r3, #6, #1
 8001874:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001878:	789b      	ldrb	r3, [r3, #2]
 800187a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001882:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 8001884:	210b      	movs	r1, #11
 8001886:	4850      	ldr	r0, [pc, #320]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001888:	f010 f8ce 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <_Z10StartGetBTPv+0x4c4>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001892:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001894:	7993      	ldrb	r3, [r2, #6]
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800189e:	22ff      	movs	r2, #255	; 0xff
 80018a0:	721a      	strb	r2, [r3, #8]
 80018a2:	e007      	b.n	80018b4 <_Z10StartGetBTPv+0x4d4>
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80018a4:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80018a6:	7993      	ldrb	r3, [r2, #6]
 80018a8:	f36f 1304 	bfc	r3, #4, #1
 80018ac:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 80018ae:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(R3)) {
 80018b4:	2107      	movs	r1, #7
 80018b6:	4844      	ldr	r0, [pc, #272]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 80018b8:	f010 f8b6 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00c      	beq.n	80018dc <_Z10StartGetBTPv+0x4fc>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80018c2:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80018c4:	79d3      	ldrb	r3, [r2, #7]
 80018c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ca:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80018ce:	789b      	ldrb	r3, [r3, #2]
 80018d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80018d8:	709a      	strb	r2, [r3, #2]
 80018da:	e00b      	b.n	80018f4 <_Z10StartGetBTPv+0x514>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80018dc:	4a38      	ldr	r2, [pc, #224]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 80018de:	79d3      	ldrb	r3, [r2, #7]
 80018e0:	f36f 13c7 	bfc	r3, #7, #1
 80018e4:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80018e8:	789b      	ldrb	r3, [r3, #2]
 80018ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 80018f2:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 80018f4:	2104      	movs	r1, #4
 80018f6:	4834      	ldr	r0, [pc, #208]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 80018f8:	f010 f896 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00c      	beq.n	800191c <_Z10StartGetBTPv+0x53c>
				gameHID.ps4ButtonsTag.button_share = 1;
 8001902:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001904:	7993      	ldrb	r3, [r2, #6]
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001918:	709a      	strb	r2, [r3, #2]
 800191a:	e00b      	b.n	8001934 <_Z10StartGetBTPv+0x554>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 800191e:	7993      	ldrb	r3, [r2, #6]
 8001920:	f36f 03c3 	bfc	r3, #3, #1
 8001924:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001928:	789b      	ldrb	r3, [r3, #2]
 800192a:	f023 0320 	bic.w	r3, r3, #32
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001932:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 8001934:	2105      	movs	r1, #5
 8001936:	4824      	ldr	r0, [pc, #144]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 8001938:	f010 f876 	bl	8011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00c      	beq.n	800195c <_Z10StartGetBTPv+0x57c>
				gameHID.ps4ButtonsTag.button_start = 1;
 8001942:	4a1f      	ldr	r2, [pc, #124]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 8001944:	7993      	ldrb	r3, [r2, #6]
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001958:	709a      	strb	r2, [r3, #2]
 800195a:	e00b      	b.n	8001974 <_Z10StartGetBTPv+0x594>
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <_Z10StartGetBTPv+0x5e0>)
 800195e:	7993      	ldrb	r3, [r2, #6]
 8001960:	f36f 0382 	bfc	r3, #2, #1
 8001964:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	f023 0310 	bic.w	r3, r3, #16
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <_Z10StartGetBTPv+0x5e4>)
 8001972:	709a      	strb	r2, [r3, #2]
			}

			new_rumble_val_L = rx_buf[3];
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_Z10StartGetBTPv+0x5ec>)
 8001976:	78da      	ldrb	r2, [r3, #3]
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_Z10StartGetBTPv+0x5f0>)
 800197a:	701a      	strb	r2, [r3, #0]
			new_rumble_val_R = rx_buf[5];
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_Z10StartGetBTPv+0x5ec>)
 800197e:	795a      	ldrb	r2, [r3, #5]
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <_Z10StartGetBTPv+0x5f4>)
 8001982:	701a      	strb	r2, [r3, #0]

			if(new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <_Z10StartGetBTPv+0x5f0>)
 8001986:	781a      	ldrb	r2, [r3, #0]
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_Z10StartGetBTPv+0x5f8>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d105      	bne.n	800199c <_Z10StartGetBTPv+0x5bc>
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_Z10StartGetBTPv+0x5f4>)
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_Z10StartGetBTPv+0x5fc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d043      	beq.n	8001a24 <_Z10StartGetBTPv+0x644>
				PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <_Z10StartGetBTPv+0x5f0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <_Z10StartGetBTPv+0x5f4>)
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4808      	ldr	r0, [pc, #32]	; (80019c8 <_Z10StartGetBTPv+0x5e8>)
 80019a8:	f7ff f84f 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
				old_rumble_val_L = new_rumble_val_L;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_Z10StartGetBTPv+0x5f0>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <_Z10StartGetBTPv+0x5f8>)
 80019b2:	701a      	strb	r2, [r3, #0]
				old_rumble_val_R = new_rumble_val_R;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_Z10StartGetBTPv+0x5f4>)
 80019b6:	781a      	ldrb	r2, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_Z10StartGetBTPv+0x5fc>)
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e032      	b.n	8001a24 <_Z10StartGetBTPv+0x644>
 80019be:	bf00      	nop
 80019c0:	2000068c 	.word	0x2000068c
 80019c4:	20000694 	.word	0x20000694
 80019c8:	2000061c 	.word	0x2000061c
 80019cc:	200001c8 	.word	0x200001c8
 80019d0:	200006aa 	.word	0x200006aa
 80019d4:	200006ab 	.word	0x200006ab
 80019d8:	200006a8 	.word	0x200006a8
 80019dc:	200006a9 	.word	0x200006a9
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80019e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e4:	4816      	ldr	r0, [pc, #88]	; (8001a40 <_Z10StartGetBTPv+0x660>)
 80019e6:	f001 fa25 	bl	8002e34 <HAL_GPIO_ReadPin>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d011      	beq.n	8001a1e <_Z10StartGetBTPv+0x63e>
			if (!buttonPressed) {
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <_Z10StartGetBTPv+0x664>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <_Z10StartGetBTPv+0x636>
				Serial.print(F("\r\nButton Pressed"));
 8001a08:	490f      	ldr	r1, [pc, #60]	; (8001a48 <_Z10StartGetBTPv+0x668>)
 8001a0a:	4810      	ldr	r0, [pc, #64]	; (8001a4c <_Z10StartGetBTPv+0x66c>)
 8001a0c:	f7fe fdc6 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 8001a10:	480f      	ldr	r0, [pc, #60]	; (8001a50 <_Z10StartGetBTPv+0x670>)
 8001a12:	f7fe ffb0 	bl	8000976 <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <_Z10StartGetBTPv+0x664>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e002      	b.n	8001a24 <_Z10StartGetBTPv+0x644>
		} else
			buttonPressed = false;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <_Z10StartGetBTPv+0x664>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
#if rtos_delay_view
		timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <_Z10StartGetBTPv+0x674>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <_Z10StartGetBTPv+0x678>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_Z10StartGetBTPv+0x678>)
 8001a36:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f008 fcd7 	bl	800a3ec <osDelay>
	  	timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001a3e:	e52c      	b.n	800149a <_Z10StartGetBTPv+0xba>
 8001a40:	40020800 	.word	0x40020800
 8001a44:	2000066c 	.word	0x2000066c
 8001a48:	08013a60 	.word	0x08013a60
 8001a4c:	200003bc 	.word	0x200003bc
 8001a50:	200005a4 	.word	0x200005a4
 8001a54:	200002c0 	.word	0x200002c0
 8001a58:	20000686 	.word	0x20000686

08001a5c <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8001a64:	f00b f93a 	bl	800ccdc <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
	timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <_Z12StartSendUSBPv+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_Z12StartSendUSBPv+0x44>)
 8001a72:	801a      	strh	r2, [r3, #0]
#endif
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001a74:	2214      	movs	r2, #20
 8001a76:	490b      	ldr	r1, [pc, #44]	; (8001aa4 <_Z12StartSendUSBPv+0x48>)
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <_Z12StartSendUSBPv+0x4c>)
 8001a7a:	f007 f9ab 	bl	8008dd4 <USBD_HID_SendReport>
#if rtos_delay_view
	timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_Z12StartSendUSBPv+0x40>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <_Z12StartSendUSBPv+0x44>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <_Z12StartSendUSBPv+0x44>)
 8001a90:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f008 fcaa 	bl	800a3ec <osDelay>
	timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001a98:	e7e6      	b.n	8001a68 <_Z12StartSendUSBPv+0xc>
 8001a9a:	bf00      	nop
 8001a9c:	200002c0 	.word	0x200002c0
 8001aa0:	20000688 	.word	0x20000688
 8001aa4:	20000694 	.word	0x20000694
 8001aa8:	2000547c 	.word	0x2000547c

08001aac <_Z19StartControllerJoinPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for(;;)
  {
	if(PS4.connected() && !rumble_once) {
 8001ab4:	4810      	ldr	r0, [pc, #64]	; (8001af8 <_Z19StartControllerJoinPv+0x4c>)
 8001ab6:	f7ff f841 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <_Z19StartControllerJoinPv+0x20>
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <_Z19StartControllerJoinPv+0x50>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <_Z19StartControllerJoinPv+0x20>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <_Z19StartControllerJoinPv+0x22>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <_Z19StartControllerJoinPv+0x42>
	  PS4.setRumbleOn(RumbleLow);
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <_Z19StartControllerJoinPv+0x54>)
 8001ad6:	f7fe ffa0 	bl	8000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
	  osDelay(500);
 8001ada:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ade:	f008 fc85 	bl	800a3ec <osDelay>
	  PS4.setRumbleOff();
 8001ae2:	4807      	ldr	r0, [pc, #28]	; (8001b00 <_Z19StartControllerJoinPv+0x54>)
 8001ae4:	f7fe ff8c 	bl	8000a00 <_ZN9PS4Parser12setRumbleOffEv>
	  rumble_once = 1;
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <_Z19StartControllerJoinPv+0x50>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
	}
	osDelay(300);
 8001aee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001af2:	f008 fc7b 	bl	800a3ec <osDelay>
	if(PS4.connected() && !rumble_once) {
 8001af6:	e7dd      	b.n	8001ab4 <_Z19StartControllerJoinPv+0x8>
 8001af8:	200005a4 	.word	0x200005a4
 8001afc:	2000066d 	.word	0x2000066d
 8001b00:	2000061c 	.word	0x2000061c

08001b04 <_Z16StartButtonPressPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for(;;)
  {
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b10:	481e      	ldr	r0, [pc, #120]	; (8001b8c <_Z16StartButtonPressPv+0x88>)
 8001b12:	f001 f98f 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b20:	481b      	ldr	r0, [pc, #108]	; (8001b90 <_Z16StartButtonPressPv+0x8c>)
 8001b22:	f001 f987 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	005b      	lsls	r3, r3, #1
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4323      	orrs	r3, r4
 8001b2e:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8001b30:	2110      	movs	r1, #16
 8001b32:	4817      	ldr	r0, [pc, #92]	; (8001b90 <_Z16StartButtonPressPv+0x8c>)
 8001b34:	f001 f97e 	bl	8002e34 <HAL_GPIO_ReadPin>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001b3c:	4323      	orrs	r3, r4
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	b2da      	uxtb	r2, r3
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <_Z16StartButtonPressPv+0x90>)
 8001b44:	701a      	strb	r2, [r3, #0]

  if (BUTTON_PRESSED) {
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_Z16StartButtonPressPv+0x90>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b07      	cmp	r3, #7
 8001b4c:	d014      	beq.n	8001b78 <_Z16StartButtonPressPv+0x74>
	  if(buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <_Z16StartButtonPressPv+0x94>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d10c      	bne.n	8001b70 <_Z16StartButtonPressPv+0x6c>
		  if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_Z16StartButtonPressPv+0x98>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d112      	bne.n	8001b84 <_Z16StartButtonPressPv+0x80>
			  buttonProcessed = 1;
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <_Z16StartButtonPressPv+0x98>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			  ProcessKeyCodeInContext(keyCode);
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <_Z16StartButtonPressPv+0x90>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb61 	bl	8001230 <_Z23ProcessKeyCodeInContexth>
 8001b6e:	e009      	b.n	8001b84 <_Z16StartButtonPressPv+0x80>
		  }
	  } else {
		  buttonDebounced = true;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <_Z16StartButtonPressPv+0x94>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e005      	b.n	8001b84 <_Z16StartButtonPressPv+0x80>
	  }
  } else {
	  buttonDebounced = false;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_Z16StartButtonPressPv+0x94>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
	  buttonProcessed = false;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_Z16StartButtonPressPv+0x98>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001b84:	2064      	movs	r0, #100	; 0x64
 8001b86:	f008 fc31 	bl	800a3ec <osDelay>
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b8a:	e7bf      	b.n	8001b0c <_Z16StartButtonPressPv+0x8>
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000681 	.word	0x20000681
 8001b9c:	20000682 	.word	0x20000682

08001ba0 <_Z14StartUpdateLCDPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */

  ssd1306_Fill(Black_);
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f000 fcf5 	bl	8002598 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001bae:	f000 fd17 	bl	80025e0 <ssd1306_UpdateScreen>
  for(;;)
  {
#if rtos_delay_view
	  	timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <_Z14StartUpdateLCDPv+0x208>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <_Z14StartUpdateLCDPv+0x20c>)
 8001bbc:	801a      	strh	r2, [r3, #0]
#endif
	if(display_run_once == 0) {
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <_Z14StartUpdateLCDPv+0x210>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80e1 	bne.w	8001d8a <_Z14StartUpdateLCDPv+0x1ea>
		ssd1306_Fill(Black_);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 fce5 	bl	8002598 <ssd1306_Fill>
		ssd1306_UpdateScreen();
 8001bce:	f000 fd07 	bl	80025e0 <ssd1306_UpdateScreen>
		switch(display_no)
 8001bd2:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <_Z14StartUpdateLCDPv+0x214>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b07      	cmp	r3, #7
 8001bd8:	f000 80a0 	beq.w	8001d1c <_Z14StartUpdateLCDPv+0x17c>
 8001bdc:	2b07      	cmp	r3, #7
 8001bde:	f300 80d4 	bgt.w	8001d8a <_Z14StartUpdateLCDPv+0x1ea>
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <_Z14StartUpdateLCDPv+0x4e>
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	f000 8082 	beq.w	8001cf0 <_Z14StartUpdateLCDPv+0x150>
 8001bec:	e0cd      	b.n	8001d8a <_Z14StartUpdateLCDPv+0x1ea>
		{
			case 0 :
			{
				uint8_t alternate_print = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
				if(!PS4.connected()) {
 8001bf2:	4871      	ldr	r0, [pc, #452]	; (8001db8 <_Z14StartUpdateLCDPv+0x218>)
 8001bf4:	f7fe ffa2 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f083 0301 	eor.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d017      	beq.n	8001c34 <_Z14StartUpdateLCDPv+0x94>
				  ssd1306_SetCursor((128-11*3)/2,0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	202f      	movs	r0, #47	; 0x2f
 8001c08:	f000 fe20 	bl	800284c <ssd1306_SetCursor>
				  ssd1306_WriteString("Not", Font_11x18, White_);
 8001c0c:	4a6b      	ldr	r2, [pc, #428]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001c0e:	2301      	movs	r3, #1
 8001c10:	ca06      	ldmia	r2, {r1, r2}
 8001c12:	486b      	ldr	r0, [pc, #428]	; (8001dc0 <_Z14StartUpdateLCDPv+0x220>)
 8001c14:	f000 fdf4 	bl	8002800 <ssd1306_WriteString>
				  display_force_update = 0;
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
				  ssd1306_SetCursor((128-11*9)/2, 26);
 8001c1e:	211a      	movs	r1, #26
 8001c20:	200e      	movs	r0, #14
 8001c22:	f000 fe13 	bl	800284c <ssd1306_SetCursor>
				  ssd1306_WriteString("Connected", Font_11x18, White_);
 8001c26:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001c28:	2301      	movs	r3, #1
 8001c2a:	ca06      	ldmia	r2, {r1, r2}
 8001c2c:	4866      	ldr	r0, [pc, #408]	; (8001dc8 <_Z14StartUpdateLCDPv+0x228>)
 8001c2e:	f000 fde7 	bl	8002800 <ssd1306_WriteString>
 8001c32:	e017      	b.n	8001c64 <_Z14StartUpdateLCDPv+0xc4>
				} else if (PS4.connected()) {
 8001c34:	4860      	ldr	r0, [pc, #384]	; (8001db8 <_Z14StartUpdateLCDPv+0x218>)
 8001c36:	f7fe ff81 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d011      	beq.n	8001c64 <_Z14StartUpdateLCDPv+0xc4>
				  ssd1306_SetCursor((128-11*9)/2, 26);
 8001c40:	211a      	movs	r1, #26
 8001c42:	200e      	movs	r0, #14
 8001c44:	f000 fe02 	bl	800284c <ssd1306_SetCursor>
				  ssd1306_WriteString("Connected", Font_11x18, White_);
 8001c48:	4a5c      	ldr	r2, [pc, #368]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	ca06      	ldmia	r2, {r1, r2}
 8001c4e:	485e      	ldr	r0, [pc, #376]	; (8001dc8 <_Z14StartUpdateLCDPv+0x228>)
 8001c50:	f000 fdd6 	bl	8002800 <ssd1306_WriteString>
				  alternate_print = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]
				  display_run_once = 1;
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <_Z14StartUpdateLCDPv+0x210>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
				  display_force_update = 0;
 8001c5e:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
				}
				ssd1306_UpdateScreen();
 8001c64:	f000 fcbc 	bl	80025e0 <ssd1306_UpdateScreen>

				while(!PS4.connected() && display_force_update == 0) {
 8001c68:	4853      	ldr	r0, [pc, #332]	; (8001db8 <_Z14StartUpdateLCDPv+0x218>)
 8001c6a:	f7fe ff67 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <_Z14StartUpdateLCDPv+0xe6>
 8001c7a:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <_Z14StartUpdateLCDPv+0xe6>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <_Z14StartUpdateLCDPv+0xe8>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <_Z14StartUpdateLCDPv+0xf4>
					osDelay(100);
 8001c8c:	2064      	movs	r0, #100	; 0x64
 8001c8e:	f008 fbad 	bl	800a3ec <osDelay>
				while(!PS4.connected() && display_force_update == 0) {
 8001c92:	e7e9      	b.n	8001c68 <_Z14StartUpdateLCDPv+0xc8>
				}
				/* If the user presses a Button, interrupt and show next screen */
				if(display_force_update == 1) {
 8001c94:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <_Z14StartUpdateLCDPv+0x10a>
					display_force_update = 0;
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
					display_run_once = 0;
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <_Z14StartUpdateLCDPv+0x210>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
					break;
 8001ca8:	e06f      	b.n	8001d8a <_Z14StartUpdateLCDPv+0x1ea>
				}
				/*When the controller is finally paired update current screen
				 * Only runs if the first PS4.connected() above does not run*/
				if(PS4.connected() && alternate_print) {
 8001caa:	4843      	ldr	r0, [pc, #268]	; (8001db8 <_Z14StartUpdateLCDPv+0x218>)
 8001cac:	f7fe ff46 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d004      	beq.n	8001cc0 <_Z14StartUpdateLCDPv+0x120>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <_Z14StartUpdateLCDPv+0x120>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <_Z14StartUpdateLCDPv+0x122>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d060      	beq.n	8001d88 <_Z14StartUpdateLCDPv+0x1e8>
				    ssd1306_Fill(Black_);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 fc66 	bl	8002598 <ssd1306_Fill>
				    ssd1306_UpdateScreen();
 8001ccc:	f000 fc88 	bl	80025e0 <ssd1306_UpdateScreen>
//				    ssd1306_SetCursor(25,0);
//				    ssd1306_WriteString("Status:", Font_11x18, White_);
					ssd1306_SetCursor((128-11*10)/2, 26);
 8001cd0:	211a      	movs	r1, #26
 8001cd2:	2009      	movs	r0, #9
 8001cd4:	f000 fdba 	bl	800284c <ssd1306_SetCursor>
					ssd1306_WriteString("Connected!", Font_11x18, White_);
 8001cd8:	4a38      	ldr	r2, [pc, #224]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001cda:	2301      	movs	r3, #1
 8001cdc:	ca06      	ldmia	r2, {r1, r2}
 8001cde:	483b      	ldr	r0, [pc, #236]	; (8001dcc <_Z14StartUpdateLCDPv+0x22c>)
 8001ce0:	f000 fd8e 	bl	8002800 <ssd1306_WriteString>
				    ssd1306_UpdateScreen();
 8001ce4:	f000 fc7c 	bl	80025e0 <ssd1306_UpdateScreen>
				    display_run_once = 1;
 8001ce8:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <_Z14StartUpdateLCDPv+0x210>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001cee:	e04b      	b.n	8001d88 <_Z14StartUpdateLCDPv+0x1e8>
			}

			case 1 :
				display_run_once = 1;
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <_Z14StartUpdateLCDPv+0x210>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
				display_force_update = 0;
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black_);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 fc4b 	bl	8002598 <ssd1306_Fill>
				ssd1306_SetCursor((128-11*5)/2,0);
 8001d02:	2100      	movs	r1, #0
 8001d04:	2024      	movs	r0, #36	; 0x24
 8001d06:	f000 fda1 	bl	800284c <ssd1306_SetCursor>
				ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001d0a:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	ca06      	ldmia	r2, {r1, r2}
 8001d10:	482f      	ldr	r0, [pc, #188]	; (8001dd0 <_Z14StartUpdateLCDPv+0x230>)
 8001d12:	f000 fd75 	bl	8002800 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001d16:	f000 fc63 	bl	80025e0 <ssd1306_UpdateScreen>
				break;
 8001d1a:	e036      	b.n	8001d8a <_Z14StartUpdateLCDPv+0x1ea>

			case 7 :
				display_run_once = 1;
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <_Z14StartUpdateLCDPv+0x210>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
				display_force_update = 0;
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <_Z14StartUpdateLCDPv+0x224>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
				ssd1306_Fill(Black_);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f000 fc35 	bl	8002598 <ssd1306_Fill>
				ssd1306_UpdateScreen();
 8001d2e:	f000 fc57 	bl	80025e0 <ssd1306_UpdateScreen>
				ssd1306_SetCursor((128-11*10)/2,0);
 8001d32:	2100      	movs	r1, #0
 8001d34:	2009      	movs	r0, #9
 8001d36:	f000 fd89 	bl	800284c <ssd1306_SetCursor>
				ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001d3a:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	ca06      	ldmia	r2, {r1, r2}
 8001d40:	4824      	ldr	r0, [pc, #144]	; (8001dd4 <_Z14StartUpdateLCDPv+0x234>)
 8001d42:	f000 fd5d 	bl	8002800 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001d46:	f000 fc4b 	bl	80025e0 <ssd1306_UpdateScreen>
				PS4.pair();
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <_Z14StartUpdateLCDPv+0x218>)
 8001d4c:	f7fe fe13 	bl	8000976 <_ZN5BTHID4pairEv>
				while(PS4.connected() == 0) {
 8001d50:	4819      	ldr	r0, [pc, #100]	; (8001db8 <_Z14StartUpdateLCDPv+0x218>)
 8001d52:	f7fe fef3 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <_Z14StartUpdateLCDPv+0x1ce>
				  osDelay(100);
 8001d66:	2064      	movs	r0, #100	; 0x64
 8001d68:	f008 fb40 	bl	800a3ec <osDelay>
				while(PS4.connected() == 0) {
 8001d6c:	e7f0      	b.n	8001d50 <_Z14StartUpdateLCDPv+0x1b0>
				}
				ssd1306_SetCursor((128-11*10)/2,26);
 8001d6e:	211a      	movs	r1, #26
 8001d70:	2009      	movs	r0, #9
 8001d72:	f000 fd6b 	bl	800284c <ssd1306_SetCursor>
				ssd1306_WriteString("Paired!", Font_11x18, White_);
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <_Z14StartUpdateLCDPv+0x21c>)
 8001d78:	2301      	movs	r3, #1
 8001d7a:	ca06      	ldmia	r2, {r1, r2}
 8001d7c:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <_Z14StartUpdateLCDPv+0x238>)
 8001d7e:	f000 fd3f 	bl	8002800 <ssd1306_WriteString>
				ssd1306_UpdateScreen();
 8001d82:	f000 fc2d 	bl	80025e0 <ssd1306_UpdateScreen>
				break;
 8001d86:	e000      	b.n	8001d8a <_Z14StartUpdateLCDPv+0x1ea>
				break;
 8001d88:	bf00      	nop
		}
	}
#if rtos_delay_view
		timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <_Z14StartUpdateLCDPv+0x208>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <_Z14StartUpdateLCDPv+0x20c>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <_Z14StartUpdateLCDPv+0x20c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8001d9e:	2064      	movs	r0, #100	; 0x64
 8001da0:	f008 fb24 	bl	800a3ec <osDelay>
  }
 8001da4:	e705      	b.n	8001bb2 <_Z14StartUpdateLCDPv+0x12>
 8001da6:	bf00      	nop
 8001da8:	200002c0 	.word	0x200002c0
 8001dac:	2000068a 	.word	0x2000068a
 8001db0:	20000684 	.word	0x20000684
 8001db4:	20000680 	.word	0x20000680
 8001db8:	200005a4 	.word	0x200005a4
 8001dbc:	20000008 	.word	0x20000008
 8001dc0:	08013a74 	.word	0x08013a74
 8001dc4:	20000683 	.word	0x20000683
 8001dc8:	08013a78 	.word	0x08013a78
 8001dcc:	08013a84 	.word	0x08013a84
 8001dd0:	08013a90 	.word	0x08013a90
 8001dd4:	08013a98 	.word	0x08013a98
 8001dd8:	08013aa4 	.word	0x08013aa4

08001ddc <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dee:	f000 fd67 	bl	80028c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40001c00 	.word	0x40001c00

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <Error_Handler+0x14>)
 8001e06:	4804      	ldr	r0, [pc, #16]	; (8001e18 <Error_Handler+0x18>)
 8001e08:	f7fe fbd6 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <Error_Handler+0x10>
 8001e12:	bf00      	nop
 8001e14:	08013aac 	.word	0x08013aac
 8001e18:	200003bc 	.word	0x200003bc

08001e1c <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001e24:	f7fe fd7a 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001e28:	f7fe fd60 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 8001e2c:	f000 f845 	bl	8001eba <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001e30:	f7fe fd46 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001e34:	2218      	movs	r2, #24
 8001e36:	2188      	movs	r1, #136	; 0x88
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f845 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f864 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5resetEv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	e02b      	b.n	8001eb2 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001e5a:	22c1      	movs	r2, #193	; 0xc1
 8001e5c:	21d8      	movs	r1, #216	; 0xd8
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f832 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001e64:	2260      	movs	r2, #96	; 0x60
 8001e66:	21d0      	movs	r1, #208	; 0xd0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f82d 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001e6e:	2204      	movs	r2, #4
 8001e70:	21e8      	movs	r1, #232	; 0xe8
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f828 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001e78:	21e8      	movs	r1, #232	; 0xe8
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f876 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d000      	beq.n	8001e96 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001e94:	e7f0      	b.n	8001e78 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f88a 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	21c8      	movs	r1, #200	; 0xc8
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f811 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f80c 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
        }
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001ed8:	f7fe fd14 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f043 0302 	orr.w	r3, r3, #2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001ee6:	78bb      	ldrb	r3, [r7, #2]
 8001ee8:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001eea:	f107 010c 	add.w	r1, r7, #12
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001ef6:	f003 ff30 	bl	8005d5a <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001efa:	f7fe fcf7 	bl	80008ec <_ZN3P103SetEv>
        return;
 8001efe:	bf00      	nop
};
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000320 	.word	0x20000320

08001f0c <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001f18:	2220      	movs	r2, #32
 8001f1a:	2178      	movs	r1, #120	; 0x78
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffd3 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffce 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	81fb      	strh	r3, [r7, #14]
 8001f32:	89fb      	ldrh	r3, [r7, #14]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00f      	beq.n	8001f62 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001f42:	2168      	movs	r1, #104	; 0x68
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f811 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d100      	bne.n	8001f60 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001f5e:	e7e5      	b.n	8001f2c <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001f60:	bf00      	nop
        return ( i);
 8001f62:	89fb      	ldrh	r3, [r7, #14]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001f78:	f7fe fcc4 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001f7c:	1cf9      	adds	r1, r7, #3
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	2201      	movs	r2, #1
 8001f84:	4809      	ldr	r0, [pc, #36]	; (8001fac <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001f86:	f003 fee8 	bl	8005d5a <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001f8e:	f107 010f 	add.w	r1, r7, #15
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	2201      	movs	r2, #1
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001f9a:	f004 f81a 	bl	8005fd2 <HAL_SPI_Receive>
        SPI_SS::Set();
 8001f9e:	f7fe fca5 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000320 	.word	0x20000320

08001fb0 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001fb8:	21f8      	movs	r1, #248	; 0xf8
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffd6 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fca:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2bc0      	cmp	r3, #192	; 0xc0
 8001fd0:	d04a      	beq.n	8002068 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8001fd2:	2bc0      	cmp	r3, #192	; 0xc0
 8001fd4:	dc55      	bgt.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001fd6:	2b80      	cmp	r3, #128	; 0x80
 8001fd8:	d006      	beq.n	8001fe8 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 8001fda:	2b80      	cmp	r3, #128	; 0x80
 8001fdc:	dc51      	bgt.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d046      	beq.n	8002070 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d020      	beq.n	8002028 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8001fe6:	e04c      	b.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001fe8:	21d8      	movs	r1, #216	; 0xd8
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffbe 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002004:	22c9      	movs	r2, #201	; 0xc9
 8002006:	21d8      	movs	r1, #216	; 0xd8
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff5d 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800200e:	4b1f      	ldr	r3, [pc, #124]	; (800208c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002010:	2202      	movs	r2, #2
 8002012:	701a      	strb	r2, [r3, #0]
                        break;
 8002014:	e035      	b.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002016:	22cb      	movs	r2, #203	; 0xcb
 8002018:	21d8      	movs	r1, #216	; 0xd8
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff54 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002022:	2203      	movs	r2, #3
 8002024:	701a      	strb	r2, [r3, #0]
                        break;
 8002026:	e02c      	b.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8002028:	21d8      	movs	r1, #216	; 0xd8
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff9e 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002044:	22cb      	movs	r2, #203	; 0xcb
 8002046:	21d8      	movs	r1, #216	; 0xd8
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff ff3d 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002050:	2203      	movs	r2, #3
 8002052:	701a      	strb	r2, [r3, #0]
                        break;
 8002054:	e015      	b.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002056:	22c9      	movs	r2, #201	; 0xc9
 8002058:	21d8      	movs	r1, #216	; 0xd8
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff34 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
                        break;
 8002066:	e00c      	b.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
                        break;
 800206e:	e008      	b.n	8002082 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8002070:	22d1      	movs	r2, #209	; 0xd1
 8002072:	21d8      	movs	r1, #216	; 0xd8
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff27 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
                        break;
 8002080:	bf00      	nop
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200006ac 	.word	0x200006ac

08002090 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d115      	bne.n	80020cc <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d110      	bne.n	80020cc <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80020aa:	490a      	ldr	r1, [pc, #40]	; (80020d4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80020ae:	f7fe fbf1 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020b4:	f00f feac 	bl	8011e10 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80020b8:	4908      	ldr	r1, [pc, #32]	; (80020dc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020ba:	4809      	ldr	r0, [pc, #36]	; (80020e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80020bc:	f00b fcac 	bl	800da18 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	4906      	ldr	r1, [pc, #24]	; (80020e0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80020c6:	4808      	ldr	r0, [pc, #32]	; (80020e8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80020c8:	f7fe fd10 	bl	8000aec <_ZN5PS4BTC1EP3BTDbPKc>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000027c 	.word	0x2000027c
 80020d8:	200003bc 	.word	0x200003bc
 80020dc:	200003d0 	.word	0x200003d0
 80020e0:	2000048c 	.word	0x2000048c
 80020e4:	08013ac4 	.word	0x08013ac4
 80020e8:	200005a4 	.word	0x200005a4

080020ec <_GLOBAL__sub_I_rx_buf>:
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020f4:	2001      	movs	r0, #1
 80020f6:	f7ff ffcb 	bl	8002090 <_Z41__static_initialization_and_destruction_0ii>
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_MspInit+0x54>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a11      	ldr	r2, [pc, #68]	; (8002150 <HAL_MspInit+0x54>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_MspInit+0x54>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_MspInit+0x54>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <HAL_MspInit+0x54>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_MspInit+0x54>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	210f      	movs	r1, #15
 800213e:	f06f 0001 	mvn.w	r0, #1
 8002142:	f000 fcb9 	bl	8002ab8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_I2C_MspInit+0x84>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d12c      	bne.n	80021d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_I2C_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_I2C_MspInit+0x88>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_I2C_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002198:	2312      	movs	r3, #18
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800219c:	2301      	movs	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021a4:	2304      	movs	r3, #4
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	480c      	ldr	r0, [pc, #48]	; (80021e0 <HAL_I2C_MspInit+0x8c>)
 80021b0:	f000 fcac 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_I2C_MspInit+0x88>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_I2C_MspInit+0x88>)
 80021be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c2:	6413      	str	r3, [r2, #64]	; 0x40
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_I2C_MspInit+0x88>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40005400 	.word	0x40005400
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020400 	.word	0x40020400

080021e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_SPI_MspInit+0x84>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d12b      	bne.n	800225e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_SPI_MspInit+0x88>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_SPI_MspInit+0x88>)
 8002210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_SPI_MspInit+0x88>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_SPI_MspInit+0x88>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <HAL_SPI_MspInit+0x88>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_SPI_MspInit+0x88>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800223e:	23e0      	movs	r3, #224	; 0xe0
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224a:	2303      	movs	r3, #3
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224e:	2305      	movs	r3, #5
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_SPI_MspInit+0x8c>)
 800225a:	f000 fc57 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40013000 	.word	0x40013000
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_TIM_Base_MspInit+0x48>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d115      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_TIM_Base_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_Base_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2105      	movs	r1, #5
 80022a6:	202d      	movs	r0, #45	; 0x2d
 80022a8:	f000 fc06 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80022ac:	202d      	movs	r0, #45	; 0x2d
 80022ae:	f000 fc1f 	bl	8002af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40002000 	.word	0x40002000
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_UART_MspInit+0x84>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d12b      	bne.n	800233e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_UART_MspInit+0x88>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_UART_MspInit+0x88>)
 80022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_UART_MspInit+0x88>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_UART_MspInit+0x88>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_UART_MspInit+0x88>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_UART_MspInit+0x88>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800231e:	230c      	movs	r3, #12
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232e:	2307      	movs	r3, #7
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4805      	ldr	r0, [pc, #20]	; (8002350 <HAL_UART_MspInit+0x8c>)
 800233a:	f000 fbe7 	bl	8002b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3728      	adds	r7, #40	; 0x28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40004400 	.word	0x40004400
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000

08002354 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	202c      	movs	r0, #44	; 0x2c
 800236a:	f000 fba5 	bl	8002ab8 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800236e:	202c      	movs	r0, #44	; 0x2c
 8002370:	f000 fbbe 	bl	8002af0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_InitTick+0xa4>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a1e      	ldr	r2, [pc, #120]	; (80023f8 <HAL_InitTick+0xa4>)
 800237e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_InitTick+0xa4>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002390:	f107 0210 	add.w	r2, r7, #16
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fca8 	bl	8004cf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80023a0:	f002 fc7e 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	4a13      	ldr	r2, [pc, #76]	; (80023fc <HAL_InitTick+0xa8>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9b      	lsrs	r3, r3, #18
 80023b4:	3b01      	subs	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_InitTick+0xac>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_InitTick+0xb0>)
 80023bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_InitTick+0xac>)
 80023c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023c4:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80023c6:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <HAL_InitTick+0xac>)
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <HAL_InitTick+0xac>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_InitTick+0xac>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 80023d8:	4809      	ldr	r0, [pc, #36]	; (8002400 <HAL_InitTick+0xac>)
 80023da:	f004 f9dd 	bl	8006798 <HAL_TIM_Base_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 80023e4:	4806      	ldr	r0, [pc, #24]	; (8002400 <HAL_InitTick+0xac>)
 80023e6:	f004 fa27 	bl	8006838 <HAL_TIM_Base_Start_IT>
 80023ea:	4603      	mov	r3, r0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3730      	adds	r7, #48	; 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	200053f0 	.word	0x200053f0
 8002404:	40001c00 	.word	0x40001c00

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800243a:	f004 fa6d 	bl	8006918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200053f0 	.word	0x200053f0

08002448 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800244e:	f004 fa63 	bl	8006918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002c0 	.word	0x200002c0

0800245c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <OTG_FS_IRQHandler+0x10>)
 8002462:	f001 facb 	bl	80039fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000594c 	.word	0x2000594c

08002470 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	return 1;
 8002474:	2301      	movs	r3, #1
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_kill>:

int _kill(int pid, int sig)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800248a:	f011 f9ab 	bl	80137e4 <__errno>
 800248e:	4603      	mov	r3, r0
 8002490:	2216      	movs	r2, #22
 8002492:	601a      	str	r2, [r3, #0]
	return -1;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_exit>:

void _exit (int status)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ffe7 	bl	8002480 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024b2:	e7fe      	b.n	80024b2 <_exit+0x12>

080024b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <SystemInit+0x28>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <SystemInit+0x28>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SystemInit+0x28>)
 80024ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ce:	609a      	str	r2, [r3, #8]
#endif
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024e6:	e003      	b.n	80024f0 <LoopCopyDataInit>

080024e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024ee:	3104      	adds	r1, #4

080024f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024f8:	d3f6      	bcc.n	80024e8 <CopyDataInit>
  ldr  r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024fc:	e002      	b.n	8002504 <LoopFillZerobss>

080024fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002500:	f842 3b04 	str.w	r3, [r2], #4

08002504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002508:	d3f9      	bcc.n	80024fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800250a:	f7ff ffd3 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f011 f96f 	bl	80137f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7fe fbbf 	bl	8000c94 <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800251c:	08014c08 	.word	0x08014c08
  ldr  r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002524:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 8002528:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 800252c:	20005d58 	.word	0x20005d58

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af04      	add	r7, sp, #16
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	9302      	str	r3, [sp, #8]
 8002544:	2301      	movs	r3, #1
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2301      	movs	r3, #1
 800254e:	2200      	movs	r2, #0
 8002550:	2178      	movs	r1, #120	; 0x78
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <ssd1306_WriteCommand+0x2c>)
 8002554:	f000 fde4 	bl	8003120 <HAL_I2C_Mem_Write>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200001d0 	.word	0x200001d0

08002564 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af04      	add	r7, sp, #16
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	f04f 32ff 	mov.w	r2, #4294967295
 8002576:	9202      	str	r2, [sp, #8]
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2301      	movs	r3, #1
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	2178      	movs	r1, #120	; 0x78
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <ssd1306_WriteData+0x30>)
 8002586:	f000 fdcb 	bl	8003120 <HAL_I2C_Mem_Write>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200001d0 	.word	0x200001d0

08002598 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e00d      	b.n	80025c4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <ssd1306_Fill+0x1a>
 80025ae:	2100      	movs	r1, #0
 80025b0:	e000      	b.n	80025b4 <ssd1306_Fill+0x1c>
 80025b2:	21ff      	movs	r1, #255	; 0xff
 80025b4:	4a09      	ldr	r2, [pc, #36]	; (80025dc <ssd1306_Fill+0x44>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	460a      	mov	r2, r1
 80025bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3301      	adds	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d3ed      	bcc.n	80025a8 <ssd1306_Fill+0x10>
    }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200006b0 	.word	0x200006b0

080025e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	e016      	b.n	800261a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	3b50      	subs	r3, #80	; 0x50
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff ff9e 	bl	8002534 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7ff ff9b 	bl	8002534 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80025fe:	2010      	movs	r0, #16
 8002600:	f7ff ff98 	bl	8002534 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	01db      	lsls	r3, r3, #7
 8002608:	4a08      	ldr	r2, [pc, #32]	; (800262c <ssd1306_UpdateScreen+0x4c>)
 800260a:	4413      	add	r3, r2
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ffa8 	bl	8002564 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	3301      	adds	r3, #1
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b07      	cmp	r3, #7
 800261e:	d9e5      	bls.n	80025ec <ssd1306_UpdateScreen+0xc>
    }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200006b0 	.word	0x200006b0

08002630 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	460b      	mov	r3, r1
 800263c:	71bb      	strb	r3, [r7, #6]
 800263e:	4613      	mov	r3, r2
 8002640:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db48      	blt.n	80026dc <ssd1306_DrawPixel+0xac>
 800264a:	79bb      	ldrb	r3, [r7, #6]
 800264c:	2b3f      	cmp	r3, #63	; 0x3f
 800264e:	d845      	bhi.n	80026dc <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <ssd1306_DrawPixel+0xb8>)
 8002652:	791b      	ldrb	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002658:	797b      	ldrb	r3, [r7, #5]
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 8002666:	797b      	ldrb	r3, [r7, #5]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d11a      	bne.n	80026a2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800266c:	79fa      	ldrb	r2, [r7, #7]
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	b2d8      	uxtb	r0, r3
 8002674:	4603      	mov	r3, r0
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	4413      	add	r3, r2
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <ssd1306_DrawPixel+0xbc>)
 800267c:	5cd3      	ldrb	r3, [r2, r3]
 800267e:	b25a      	sxtb	r2, r3
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	b25b      	sxtb	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b259      	sxtb	r1, r3
 8002692:	79fa      	ldrb	r2, [r7, #7]
 8002694:	4603      	mov	r3, r0
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	4413      	add	r3, r2
 800269a:	b2c9      	uxtb	r1, r1
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <ssd1306_DrawPixel+0xbc>)
 800269e:	54d1      	strb	r1, [r2, r3]
 80026a0:	e01d      	b.n	80026de <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026a2:	79fa      	ldrb	r2, [r7, #7]
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	08db      	lsrs	r3, r3, #3
 80026a8:	b2d8      	uxtb	r0, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	01db      	lsls	r3, r3, #7
 80026ae:	4413      	add	r3, r2
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <ssd1306_DrawPixel+0xbc>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	b25a      	sxtb	r2, r3
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4013      	ands	r3, r2
 80026ca:	b259      	sxtb	r1, r3
 80026cc:	79fa      	ldrb	r2, [r7, #7]
 80026ce:	4603      	mov	r3, r0
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	4413      	add	r3, r2
 80026d4:	b2c9      	uxtb	r1, r1
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <ssd1306_DrawPixel+0xbc>)
 80026d8:	54d1      	strb	r1, [r2, r3]
 80026da:	e000      	b.n	80026de <ssd1306_DrawPixel+0xae>
        return;
 80026dc:	bf00      	nop
    }
}
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	20000ab0 	.word	0x20000ab0
 80026ec:	200006b0 	.word	0x200006b0

080026f0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4604      	mov	r4, r0
 80026f8:	1d38      	adds	r0, r7, #4
 80026fa:	e880 0006 	stmia.w	r0, {r1, r2}
 80026fe:	461a      	mov	r2, r3
 8002700:	4623      	mov	r3, r4
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	4613      	mov	r3, r2
 8002706:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b1f      	cmp	r3, #31
 800270c:	d902      	bls.n	8002714 <ssd1306_WriteChar+0x24>
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b7e      	cmp	r3, #126	; 0x7e
 8002712:	d901      	bls.n	8002718 <ssd1306_WriteChar+0x28>
        return 0;
 8002714:	2300      	movs	r3, #0
 8002716:	e06d      	b.n	80027f4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002718:	4b38      	ldr	r3, [pc, #224]	; (80027fc <ssd1306_WriteChar+0x10c>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	793b      	ldrb	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	2b80      	cmp	r3, #128	; 0x80
 8002724:	dc06      	bgt.n	8002734 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002726:	4b35      	ldr	r3, [pc, #212]	; (80027fc <ssd1306_WriteChar+0x10c>)
 8002728:	885b      	ldrh	r3, [r3, #2]
 800272a:	461a      	mov	r2, r3
 800272c:	797b      	ldrb	r3, [r7, #5]
 800272e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	dd01      	ble.n	8002738 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002734:	2300      	movs	r3, #0
 8002736:	e05d      	b.n	80027f4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e04c      	b.n	80027d8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	3b20      	subs	r3, #32
 8002744:	7979      	ldrb	r1, [r7, #5]
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4619      	mov	r1, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	440b      	add	r3, r1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
 800275c:	e034      	b.n	80027c8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d012      	beq.n	8002794 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <ssd1306_WriteChar+0x10c>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4413      	add	r3, r2
 800277a:	b2d8      	uxtb	r0, r3
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <ssd1306_WriteChar+0x10c>)
 800277e:	885b      	ldrh	r3, [r3, #2]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4413      	add	r3, r2
 8002788:	b2db      	uxtb	r3, r3
 800278a:	7bba      	ldrb	r2, [r7, #14]
 800278c:	4619      	mov	r1, r3
 800278e:	f7ff ff4f 	bl	8002630 <ssd1306_DrawPixel>
 8002792:	e016      	b.n	80027c2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <ssd1306_WriteChar+0x10c>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4413      	add	r3, r2
 80027a0:	b2d8      	uxtb	r0, r3
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <ssd1306_WriteChar+0x10c>)
 80027a4:	885b      	ldrh	r3, [r3, #2]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	b2d9      	uxtb	r1, r3
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	f7ff ff37 	bl	8002630 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	3301      	adds	r3, #1
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	793b      	ldrb	r3, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d3c5      	bcc.n	800275e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	797b      	ldrb	r3, [r7, #5]
 80027da:	461a      	mov	r2, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	4293      	cmp	r3, r2
 80027e0:	d3ad      	bcc.n	800273e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <ssd1306_WriteChar+0x10c>)
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	793b      	ldrb	r3, [r7, #4]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	4b03      	ldr	r3, [pc, #12]	; (80027fc <ssd1306_WriteChar+0x10c>)
 80027f0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3724      	adds	r7, #36	; 0x24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}
 80027fc:	20000ab0 	.word	0x20000ab0

08002800 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	1d38      	adds	r0, r7, #4
 800280a:	e880 0006 	stmia.w	r0, {r1, r2}
 800280e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002810:	e012      	b.n	8002838 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	7818      	ldrb	r0, [r3, #0]
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	1d3a      	adds	r2, r7, #4
 800281a:	ca06      	ldmia	r2, {r1, r2}
 800281c:	f7ff ff68 	bl	80026f0 <ssd1306_WriteChar>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d002      	beq.n	8002832 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	e008      	b.n	8002844 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3301      	adds	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e8      	bne.n	8002812 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	781b      	ldrb	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	460a      	mov	r2, r1
 8002856:	71fb      	strb	r3, [r7, #7]
 8002858:	4613      	mov	r3, r2
 800285a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	b29a      	uxth	r2, r3
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <ssd1306_SetCursor+0x2c>)
 8002862:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002864:	79bb      	ldrb	r3, [r7, #6]
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <ssd1306_SetCursor+0x2c>)
 800286a:	805a      	strh	r2, [r3, #2]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	20000ab0 	.word	0x20000ab0

0800287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_Init+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <HAL_Init+0x40>)
 8002886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800288a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_Init+0x40>)
 8002892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <HAL_Init+0x40>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f000 f8fc 	bl	8002aa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7ff fd52 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b0:	f7ff fc24 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x24>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_IncTick+0x24>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000014 	.word	0x20000014
 80028e4:	20005438 	.word	0x20005438

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20005438 	.word	0x20005438

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_Delay+0x44>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002926:	bf00      	nop
 8002928:	f7ff ffde 	bl	80028e8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000014 	.word	0x20000014

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff4c 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
 8002ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aca:	f7ff ff61 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002ace:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7ff ffb1 	bl	8002a3c <NVIC_EncodePriority>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff ff80 	bl	80029e8 <__NVIC_SetPriority>
}
 8002ae8:	bf00      	nop
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff54 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e165      	b.n	8002df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b28:	2201      	movs	r2, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8154 	bne.w	8002dee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d005      	beq.n	8002b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 0201 	and.w	r2, r3, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d017      	beq.n	8002bfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d123      	bne.n	8002c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	08da      	lsrs	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3208      	adds	r2, #8
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0203 	and.w	r2, r3, #3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80ae 	beq.w	8002dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	4a5c      	ldr	r2, [pc, #368]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ca2:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_GPIO_Init+0x300>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cae:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	; (8002e14 <HAL_GPIO_Init+0x308>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d025      	beq.n	8002d26 <HAL_GPIO_Init+0x21a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_GPIO_Init+0x30c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <HAL_GPIO_Init+0x216>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_GPIO_Init+0x310>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d019      	beq.n	8002d1e <HAL_GPIO_Init+0x212>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_GPIO_Init+0x314>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_GPIO_Init+0x20e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_GPIO_Init+0x318>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00d      	beq.n	8002d16 <HAL_GPIO_Init+0x20a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_GPIO_Init+0x31c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <HAL_GPIO_Init+0x206>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a49      	ldr	r2, [pc, #292]	; (8002e2c <HAL_GPIO_Init+0x320>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_GPIO_Init+0x202>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00c      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d0e:	2307      	movs	r3, #7
 8002d10:	e00a      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d12:	2305      	movs	r3, #5
 8002d14:	e008      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d16:	2304      	movs	r3, #4
 8002d18:	e006      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e004      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x21c>
 8002d26:	2300      	movs	r3, #0
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f002 0203 	and.w	r2, r2, #3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4093      	lsls	r3, r2
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d38:	4935      	ldr	r1, [pc, #212]	; (8002e10 <HAL_GPIO_Init+0x304>)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d46:	4b3a      	ldr	r3, [pc, #232]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d6a:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de8:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_GPIO_Init+0x324>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	f67f ae96 	bls.w	8002b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40021400 	.word	0x40021400
 8002e2c:	40021800 	.word	0x40021800
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
 8002e70:	4613      	mov	r3, r2
 8002e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e74:	787b      	ldrb	r3, [r7, #1]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e7a:	887a      	ldrh	r2, [r7, #2]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e80:	e003      	b.n	8002e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	619a      	str	r2, [r3, #24]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e12b      	b.n	8003102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff f948 	bl	8002154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002efc:	f001 fed0 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8002f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4a81      	ldr	r2, [pc, #516]	; (800310c <HAL_I2C_Init+0x274>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d807      	bhi.n	8002f1c <HAL_I2C_Init+0x84>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a80      	ldr	r2, [pc, #512]	; (8003110 <HAL_I2C_Init+0x278>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e006      	b.n	8002f2a <HAL_I2C_Init+0x92>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a7d      	ldr	r2, [pc, #500]	; (8003114 <HAL_I2C_Init+0x27c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e0e7      	b.n	8003102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a78      	ldr	r2, [pc, #480]	; (8003118 <HAL_I2C_Init+0x280>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0c9b      	lsrs	r3, r3, #18
 8002f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a6a      	ldr	r2, [pc, #424]	; (800310c <HAL_I2C_Init+0x274>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d802      	bhi.n	8002f6c <HAL_I2C_Init+0xd4>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e009      	b.n	8002f80 <HAL_I2C_Init+0xe8>
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	4a69      	ldr	r2, [pc, #420]	; (800311c <HAL_I2C_Init+0x284>)
 8002f78:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7c:	099b      	lsrs	r3, r3, #6
 8002f7e:	3301      	adds	r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	495c      	ldr	r1, [pc, #368]	; (800310c <HAL_I2C_Init+0x274>)
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	d819      	bhi.n	8002fd4 <HAL_I2C_Init+0x13c>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e59      	subs	r1, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_I2C_Init+0x138>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1e59      	subs	r1, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fce:	e051      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	e04f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d111      	bne.n	8003000 <HAL_I2C_Init+0x168>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1e58      	subs	r0, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e012      	b.n	8003026 <HAL_I2C_Init+0x18e>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e58      	subs	r0, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	0099      	lsls	r1, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	fbb0 f3f3 	udiv	r3, r0, r3
 8003016:	3301      	adds	r3, #1
 8003018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf0c      	ite	eq
 8003020:	2301      	moveq	r3, #1
 8003022:	2300      	movne	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x196>
 800302a:	2301      	movs	r3, #1
 800302c:	e022      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_I2C_Init+0x1bc>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e58      	subs	r0, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	440b      	add	r3, r1
 8003044:	fbb0 f3f3 	udiv	r3, r0, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003052:	e00f      	b.n	8003074 <HAL_I2C_Init+0x1dc>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	0099      	lsls	r1, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	fbb0 f3f3 	udiv	r3, r0, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6809      	ldr	r1, [r1, #0]
 8003078:	4313      	orrs	r3, r2
 800307a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6911      	ldr	r1, [r2, #16]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	000186a0 	.word	0x000186a0
 8003110:	001e847f 	.word	0x001e847f
 8003114:	003d08ff 	.word	0x003d08ff
 8003118:	431bde83 	.word	0x431bde83
 800311c:	10624dd3 	.word	0x10624dd3

08003120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	4608      	mov	r0, r1
 800312a:	4611      	mov	r1, r2
 800312c:	461a      	mov	r2, r3
 800312e:	4603      	mov	r3, r0
 8003130:	817b      	strh	r3, [r7, #10]
 8003132:	460b      	mov	r3, r1
 8003134:	813b      	strh	r3, [r7, #8]
 8003136:	4613      	mov	r3, r2
 8003138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800313a:	f7ff fbd5 	bl	80028e8 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b20      	cmp	r3, #32
 800314a:	f040 80d9 	bne.w	8003300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	2319      	movs	r3, #25
 8003154:	2201      	movs	r2, #1
 8003156:	496d      	ldr	r1, [pc, #436]	; (800330c <HAL_I2C_Mem_Write+0x1ec>)
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f971 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	e0cc      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_I2C_Mem_Write+0x56>
 8003172:	2302      	movs	r3, #2
 8003174:	e0c5      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	d007      	beq.n	800319c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2221      	movs	r2, #33	; 0x21
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a3a      	ldr	r2, [r7, #32]
 80031c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <HAL_I2C_Mem_Write+0x1f0>)
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031de:	88f8      	ldrh	r0, [r7, #6]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	4603      	mov	r3, r0
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f890 	bl	8003314 <I2C_RequestMemoryWrite>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d052      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e081      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f9f2 	bl	80035ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b04      	cmp	r3, #4
 8003214:	d107      	bne.n	8003226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b04      	cmp	r3, #4
 8003266:	d11b      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x180>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1aa      	bne.n	80031fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f9de 	bl	800366e <I2C_WaitOnBTFFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d107      	bne.n	80032d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e016      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	00100002 	.word	0x00100002
 8003310:	ffff0000 	.word	0xffff0000

08003314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2200      	movs	r2, #0
 8003346:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f878 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d103      	bne.n	800336e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e05f      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003372:	897b      	ldrh	r3, [r7, #10]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	492d      	ldr	r1, [pc, #180]	; (800343c <I2C_RequestMemoryWrite+0x128>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f8b0 	bl	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e04c      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	6a39      	ldr	r1, [r7, #32]
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f91a 	bl	80035ec <I2C_WaitOnTXEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d107      	bne.n	80033d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02b      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033e0:	893b      	ldrh	r3, [r7, #8]
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]
 80033ea:	e021      	b.n	8003430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80033ec:	893b      	ldrh	r3, [r7, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f8f4 	bl	80035ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e005      	b.n	8003432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003426:	893b      	ldrh	r3, [r7, #8]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	00010002 	.word	0x00010002

08003440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003450:	e025      	b.n	800349e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d021      	beq.n	800349e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7ff fa45 	bl	80028e8 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d116      	bne.n	800349e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e023      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10d      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf0c      	ite	eq
 80034ba:	2301      	moveq	r3, #1
 80034bc:	2300      	movne	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	e00c      	b.n	80034de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d0b6      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fc:	e051      	b.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d123      	bne.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f043 0204 	orr.w	r2, r3, #4
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e046      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d021      	beq.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7ff f9c3 	bl	80028e8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e020      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10c      	bne.n	80035c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4013      	ands	r3, r2
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf14      	ite	ne
 80035be:	2301      	movne	r3, #1
 80035c0:	2300      	moveq	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e00b      	b.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	43da      	mvns	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4013      	ands	r3, r2
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d18d      	bne.n	80034fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035f8:	e02d      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f878 	bl	80036f0 <I2C_IsAcknowledgeFailed>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e02d      	b.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d021      	beq.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7ff f969 	bl	80028e8 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d116      	bne.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f043 0220 	orr.w	r2, r3, #32
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b80      	cmp	r3, #128	; 0x80
 8003662:	d1ca      	bne.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800367a:	e02d      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f837 	bl	80036f0 <I2C_IsAcknowledgeFailed>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e02d      	b.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d021      	beq.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003694:	f7ff f928 	bl	80028e8 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d302      	bcc.n	80036aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e007      	b.n	80036e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d1ca      	bne.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d11b      	bne.n	8003740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800374e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003750:	b08f      	sub	sp, #60	; 0x3c
 8003752:	af0a      	add	r7, sp, #40	; 0x28
 8003754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e116      	b.n	800398e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f009 fbee 	bl	800cf5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2203      	movs	r2, #3
 8003784:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 ff47 	bl	8007632 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	687e      	ldr	r6, [r7, #4]
 80037ac:	466d      	mov	r5, sp
 80037ae:	f106 0410 	add.w	r4, r6, #16
 80037b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037be:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c2:	1d33      	adds	r3, r6, #4
 80037c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	f003 fe1e 	bl	8007408 <USB_CoreInit>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0d7      	b.n	800398e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 ff35 	bl	8007654 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e04a      	b.n	8003886 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	333d      	adds	r3, #61	; 0x3d
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	333c      	adds	r3, #60	; 0x3c
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	b298      	uxth	r0, r3
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3342      	adds	r3, #66	; 0x42
 800382c:	4602      	mov	r2, r0
 800382e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	333f      	adds	r3, #63	; 0x3f
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3344      	adds	r3, #68	; 0x44
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3348      	adds	r3, #72	; 0x48
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386c:	7bfa      	ldrb	r2, [r7, #15]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	3350      	adds	r3, #80	; 0x50
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	3301      	adds	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	7bfa      	ldrb	r2, [r7, #15]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d3af      	bcc.n	80037f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e044      	b.n	8003920 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	3301      	adds	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d3b5      	bcc.n	8003896 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	687e      	ldr	r6, [r7, #4]
 8003932:	466d      	mov	r5, sp
 8003934:	f106 0410 	add.w	r4, r6, #16
 8003938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003944:	e885 0003 	stmia.w	r5, {r0, r1}
 8003948:	1d33      	adds	r3, r6, #4
 800394a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800394c:	6838      	ldr	r0, [r7, #0]
 800394e:	f003 feab 	bl	80076a8 <USB_DevInit>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e014      	b.n	800398e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2b01      	cmp	r3, #1
 800397a:	d102      	bne.n	8003982 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 f879 	bl	8004a74 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f004 fee6 	bl	8008758 <USB_DevDisconnect>

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003996 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_PCD_Start+0x1c>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e020      	b.n	80039f4 <HAL_PCD_Start+0x5e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d109      	bne.n	80039d6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d005      	beq.n	80039d6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fe18 	bl	8007610 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fe96 	bl	8008716 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b08d      	sub	sp, #52	; 0x34
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 ff54 	bl	80088c0 <USB_GetMode>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f040 83ca 	bne.w	80041b4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 feb8 	bl	800879a <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 83c0 	beq.w	80041b2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f004 feaf 	bl	800879a <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d107      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f002 0202 	and.w	r2, r2, #2
 8003a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f004 fe9d 	bl	800879a <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d161      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0210 	bic.w	r2, r2, #16
 8003a78:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 020f 	and.w	r2, r3, #15
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	0c5b      	lsrs	r3, r3, #17
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d124      	bne.n	8003af0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d035      	beq.n	8003b1e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003abc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6a38      	ldr	r0, [r7, #32]
 8003ac6:	f004 fd03 	bl	80084d0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad6:	441a      	add	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae8:	441a      	add	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	619a      	str	r2, [r3, #24]
 8003aee:	e016      	b.n	8003b1e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	0c5b      	lsrs	r3, r3, #17
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	d110      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b02:	2208      	movs	r2, #8
 8003b04:	4619      	mov	r1, r3
 8003b06:	6a38      	ldr	r0, [r7, #32]
 8003b08:	f004 fce2 	bl	80084d0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b18:	441a      	add	r2, r3
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0210 	orr.w	r2, r2, #16
 8003b2c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fe31 	bl	800879a <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b42:	d16e      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 fe37 	bl	80087c0 <USB_ReadDevAllOutEpInterrupt>
 8003b52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b54:	e062      	b.n	8003c1c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d057      	beq.n	8003c10 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	4611      	mov	r1, r2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 fe5c 	bl	8008828 <USB_ReadDevOutEPInterrupt>
 8003b70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fdc5 	bl	8004720 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00c      	beq.n	8003bba <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	461a      	mov	r2, r3
 8003bae:	2308      	movs	r3, #8
 8003bb0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 febf 	bl	8004938 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	2320      	movs	r3, #32
 8003bf0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c0e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	3301      	adds	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d199      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fdb7 	bl	800879a <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c36:	f040 80c0 	bne.w	8003dba <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f004 fdd8 	bl	80087f4 <USB_ReadDevAllInEpInterrupt>
 8003c44:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c4a:	e0b2      	b.n	8003db2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80a7 	beq.w	8003da6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 fdfe 	bl	8008864 <USB_ReadDevInEPInterrupt>
 8003c68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d057      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69f9      	ldr	r1, [r7, #28]
 8003c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c94:	4013      	ands	r3, r2
 8003c96:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d132      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3348      	adds	r3, #72	; 0x48
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4403      	add	r3, r0
 8003cd2:	3344      	adds	r3, #68	; 0x44
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4419      	add	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4403      	add	r3, r0
 8003ce6:	3348      	adds	r3, #72	; 0x48
 8003ce8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d113      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x31c>
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3350      	adds	r3, #80	; 0x50
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d10:	461a      	mov	r2, r3
 8003d12:	2101      	movs	r1, #1
 8003d14:	f004 fe06 	bl	8008924 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f009 f99d 	bl	800d05e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d56:	461a      	mov	r2, r3
 8003d58:	2310      	movs	r3, #16
 8003d5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	461a      	mov	r2, r3
 8003d74:	2340      	movs	r3, #64	; 0x40
 8003d76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2302      	movs	r3, #2
 8003d92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fc30 	bl	8004606 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	3301      	adds	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f47f af49 	bne.w	8003c4c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 fceb 	bl	800879a <USB_ReadInterrupts>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dce:	d122      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d108      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003df6:	2100      	movs	r1, #0
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f009 fb6d 	bl	800d4d8 <HAL_PCDEx_LPM_Callback>
 8003dfe:	e002      	b.n	8003e06 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f009 f9a3 	bl	800d14c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 fcbd 	bl	800879a <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2a:	d112      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f009 f95f 	bl	800d100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e50:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 fc9f 	bl	800879a <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e66:	d121      	bne.n	8003eac <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003e76:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d111      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	f003 020f 	and.w	r2, r3, #15
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f009 fb1a 	bl	800d4d8 <HAL_PCDEx_LPM_Callback>
 8003ea4:	e002      	b.n	8003eac <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f009 f92a 	bl	800d100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 fc72 	bl	800879a <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	f040 80c7 	bne.w	8004052 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed2:	f023 0301 	bic.w	r3, r3, #1
 8003ed6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2110      	movs	r1, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f003 fd40 	bl	8007964 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee8:	e056      	b.n	8003f98 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003efc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f1c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f50:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f82:	0151      	lsls	r1, r2, #5
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	440a      	add	r2, r1
 8003f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f90:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	3301      	adds	r3, #1
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3a3      	bcc.n	8003eea <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fce:	f043 030b 	orr.w	r3, r3, #11
 8003fd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe4:	f043 030b 	orr.w	r3, r3, #11
 8003fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fea:	e015      	b.n	8004018 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ffe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004002:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f043 030b 	orr.w	r3, r3, #11
 8004016:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800402a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800403c:	461a      	mov	r2, r3
 800403e:	f004 fc71 	bl	8008924 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 fb9f 	bl	800879a <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004066:	d124      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f004 fc35 	bl	80088dc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f003 fcd5 	bl	8007a26 <USB_GetDevSpeed>
 800407c:	4603      	mov	r3, r0
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681c      	ldr	r4, [r3, #0]
 8004088:	f000 fdfe 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 800408c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4620      	mov	r0, r4
 8004098:	f003 fa18 	bl	80074cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f009 f806 	bl	800d0ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 fb6f 	bl	800879a <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d10a      	bne.n	80040dc <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f008 ffe3 	bl	800d092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f002 0208 	and.w	r2, r2, #8
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f004 fb5a 	bl	800879a <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f0:	d10f      	bne.n	8004112 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f009 f845 	bl	800d18c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f004 fb3f 	bl	800879a <USB_ReadInterrupts>
 800411c:	4603      	mov	r3, r0
 800411e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004126:	d10f      	bne.n	8004148 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f009 f818 	bl	800d168 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f004 fb24 	bl	800879a <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d10a      	bne.n	8004174 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f009 f826 	bl	800d1b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f004 fb0e 	bl	800879a <USB_ReadInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d115      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f009 f816 	bl	800d1cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e000      	b.n	80041b4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80041b2:	bf00      	nop
    }
  }
}
 80041b4:	3734      	adds	r7, #52	; 0x34
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}

080041ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_PCD_SetAddress+0x1a>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e013      	b.n	80041fc <HAL_PCD_SetAddress+0x42>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 fa6c 	bl	80086ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4603      	mov	r3, r0
 8004214:	70fb      	strb	r3, [r7, #3]
 8004216:	460b      	mov	r3, r1
 8004218:	803b      	strh	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004226:	2b00      	cmp	r3, #0
 8004228:	da0f      	bge.n	800424a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422a:	78fb      	ldrb	r3, [r7, #3]
 800422c:	f003 020f 	and.w	r2, r3, #15
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	3338      	adds	r3, #56	; 0x38
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	705a      	strb	r2, [r3, #1]
 8004248:	e00f      	b.n	800426a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004276:	883a      	ldrh	r2, [r7, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	78ba      	ldrb	r2, [r7, #2]
 8004280:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004294:	78bb      	ldrb	r3, [r7, #2]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d102      	bne.n	80042a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_PCD_EP_Open+0xaa>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e00e      	b.n	80042cc <HAL_PCD_EP_Open+0xc8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 fbd7 	bl	8007a70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80042ca:	7afb      	ldrb	r3, [r7, #11]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da0f      	bge.n	8004308 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3338      	adds	r3, #56	; 0x38
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	3304      	adds	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2201      	movs	r2, #1
 8004304:	705a      	strb	r2, [r3, #1]
 8004306:	e00f      	b.n	8004328 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 020f 	and.w	r2, r3, #15
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_PCD_EP_Close+0x6e>
 800433e:	2302      	movs	r3, #2
 8004340:	e00e      	b.n	8004360 <HAL_PCD_EP_Close+0x8c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	4618      	mov	r0, r3
 8004352:	f003 fc15 	bl	8007b80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2200      	movs	r2, #0
 80043a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	461a      	mov	r2, r3
 80043da:	6979      	ldr	r1, [r7, #20]
 80043dc:	f003 fef0 	bl	80081c0 <USB_EP0StartXfer>
 80043e0:	e008      	b.n	80043f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	6979      	ldr	r1, [r7, #20]
 80043f0:	f003 fca2 	bl	8007d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	460b      	mov	r3, r1
 800440c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3338      	adds	r3, #56	; 0x38
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2201      	movs	r2, #1
 800443c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	b2da      	uxtb	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d102      	bne.n	8004458 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004458:	7afb      	ldrb	r3, [r7, #11]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	6979      	ldr	r1, [r7, #20]
 8004470:	f003 fea6 	bl	80081c0 <USB_EP0StartXfer>
 8004474:	e008      	b.n	8004488 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	6979      	ldr	r1, [r7, #20]
 8004484:	f003 fc58 	bl	8007d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	f003 020f 	and.w	r2, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d901      	bls.n	80044b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e050      	b.n	8004552 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da0f      	bge.n	80044d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	3338      	adds	r3, #56	; 0x38
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	3304      	adds	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	705a      	strb	r2, [r3, #1]
 80044d6:	e00d      	b.n	80044f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_PCD_EP_SetStall+0x82>
 8004510:	2302      	movs	r3, #2
 8004512:	e01e      	b.n	8004552 <HAL_PCD_EP_SetStall+0xc0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	4618      	mov	r0, r3
 8004524:	f003 fffd 	bl	8008522 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	b2d9      	uxtb	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004542:	461a      	mov	r2, r3
 8004544:	f004 f9ee 	bl	8008924 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d901      	bls.n	8004578 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e042      	b.n	80045fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	da0f      	bge.n	80045a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	3338      	adds	r3, #56	; 0x38
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	4413      	add	r3, r2
 8004594:	3304      	adds	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	705a      	strb	r2, [r3, #1]
 800459e:	e00f      	b.n	80045c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_PCD_EP_ClrStall+0x86>
 80045dc:	2302      	movs	r3, #2
 80045de:	e00e      	b.n	80045fe <HAL_PCD_EP_ClrStall+0xa4>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f004 f805 	bl	80085fe <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b08a      	sub	sp, #40	; 0x28
 800460a:	af02      	add	r7, sp, #8
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	3338      	adds	r3, #56	; 0x38
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	3304      	adds	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	429a      	cmp	r2, r3
 8004638:	d901      	bls.n	800463e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06c      	b.n	8004718 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	429a      	cmp	r2, r3
 8004652:	d902      	bls.n	800465a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3303      	adds	r3, #3
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004662:	e02b      	b.n	80046bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	429a      	cmp	r2, r3
 8004678:	d902      	bls.n	8004680 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3303      	adds	r3, #3
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	68d9      	ldr	r1, [r3, #12]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004698:	b2db      	uxtb	r3, r3
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4603      	mov	r3, r0
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f003 fee1 	bl	8008466 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	441a      	add	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d809      	bhi.n	80046e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046da:	429a      	cmp	r2, r3
 80046dc:	d203      	bcs.n	80046e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1be      	bne.n	8004664 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d811      	bhi.n	8004716 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f003 030f 	and.w	r3, r3, #15
 80046f8:	2201      	movs	r2, #1
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	43db      	mvns	r3, r3
 800470c:	6939      	ldr	r1, [r7, #16]
 800470e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004712:	4013      	ands	r3, r2
 8004714:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	3304      	adds	r3, #4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b01      	cmp	r3, #1
 8004754:	f040 80a0 	bne.w	8004898 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d015      	beq.n	800478e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a72      	ldr	r2, [pc, #456]	; (8004930 <PCD_EP_OutXfrComplete_int+0x210>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f240 80dd 	bls.w	8004926 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80d7 	beq.w	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004784:	461a      	mov	r2, r3
 8004786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	e0cb      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	2320      	movs	r3, #32
 80047a8:	6093      	str	r3, [r2, #8]
 80047aa:	e0bc      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f040 80b7 	bne.w	8004926 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <PCD_EP_OutXfrComplete_int+0x210>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d90f      	bls.n	80047e0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	461a      	mov	r2, r3
 80047d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047dc:	6093      	str	r3, [r2, #8]
 80047de:	e0a2      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047f2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	0159      	lsls	r1, r3, #5
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	440b      	add	r3, r1
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004806:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4403      	add	r3, r0
 8004816:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800481a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800482e:	6819      	ldr	r1, [r3, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4403      	add	r3, r0
 800483e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4419      	add	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4403      	add	r3, r0
 8004854:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004858:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d114      	bne.n	800488a <PCD_EP_OutXfrComplete_int+0x16a>
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004882:	461a      	mov	r2, r3
 8004884:	2101      	movs	r1, #1
 8004886:	f004 f84d 	bl	8008924 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f008 fbc9 	bl	800d028 <HAL_PCD_DataOutStageCallback>
 8004896:	e046      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a26      	ldr	r2, [pc, #152]	; (8004934 <PCD_EP_OutXfrComplete_int+0x214>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d124      	bne.n	80048ea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048bc:	6093      	str	r3, [r2, #8]
 80048be:	e032      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	2320      	movs	r3, #32
 80048da:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f008 fba0 	bl	800d028 <HAL_PCD_DataOutStageCallback>
 80048e8:	e01d      	b.n	8004926 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d114      	bne.n	800491a <PCD_EP_OutXfrComplete_int+0x1fa>
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d108      	bne.n	800491a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004912:	461a      	mov	r2, r3
 8004914:	2100      	movs	r1, #0
 8004916:	f004 f805 	bl	8008924 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f008 fb81 	bl	800d028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	4f54300a 	.word	0x4f54300a
 8004934:	4f54310a 	.word	0x4f54310a

08004938 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	333c      	adds	r3, #60	; 0x3c
 8004950:	3304      	adds	r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d90e      	bls.n	800498c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004984:	461a      	mov	r2, r3
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f008 fb39 	bl	800d004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d90c      	bls.n	80049b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d108      	bne.n	80049b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049ac:	461a      	mov	r2, r3
 80049ae:	2101      	movs	r1, #1
 80049b0:	f003 ffb8 	bl	8008924 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	4f54300a 	.word	0x4f54300a

080049c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
 80049d0:	4613      	mov	r3, r2
 80049d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d107      	bne.n	80049f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049e2:	883b      	ldrh	r3, [r7, #0]
 80049e4:	0419      	lsls	r1, r3, #16
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28
 80049f0:	e028      	b.n	8004a44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4413      	add	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e00d      	b.n	8004a22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3340      	adds	r3, #64	; 0x40
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3ec      	bcc.n	8004a06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a2c:	883b      	ldrh	r3, [r7, #0]
 8004a2e:	0418      	lsls	r0, r3, #16
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	4302      	orrs	r2, r0
 8004a3c:	3340      	adds	r3, #64	; 0x40
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	f043 0303 	orr.w	r3, r3, #3
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0cc      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b68      	ldr	r3, [pc, #416]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d90c      	bls.n	8004af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b65      	ldr	r3, [pc, #404]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b63      	ldr	r3, [pc, #396]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0b8      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d020      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b10:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a58      	ldr	r2, [pc, #352]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b28:	4b53      	ldr	r3, [pc, #332]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a52      	ldr	r2, [pc, #328]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b34:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	494d      	ldr	r1, [pc, #308]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d044      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d119      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e07f      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d003      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7a:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06f      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e067      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b9a:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f023 0203 	bic.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	4934      	ldr	r1, [pc, #208]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bac:	f7fd fe9c 	bl	80028e8 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fd fe98 	bl	80028e8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e04f      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 020c 	and.w	r2, r3, #12
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d1eb      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b25      	ldr	r3, [pc, #148]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d20c      	bcs.n	8004c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e032      	b.n	8004c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c10:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4916      	ldr	r1, [pc, #88]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	490e      	ldr	r1, [pc, #56]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c42:	f000 fbb1 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8004c46:	4602      	mov	r2, r0
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	490a      	ldr	r1, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	5ccb      	ldrb	r3, [r1, r3]
 8004c56:	fa22 f303 	lsr.w	r3, r2, r3
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_ClockConfig+0x1c8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd fb76 	bl	8002354 <HAL_InitTick>

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023c00 	.word	0x40023c00
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	08013d00 	.word	0x08013d00
 8004c80:	20000004 	.word	0x20000004
 8004c84:	20000010 	.word	0x20000010

08004c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000004 	.word	0x20000004

08004ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca4:	f7ff fff0 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	0a9b      	lsrs	r3, r3, #10
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	4903      	ldr	r1, [pc, #12]	; (8004cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb6:	5ccb      	ldrb	r3, [r1, r3]
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	08013d10 	.word	0x08013d10

08004cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ccc:	f7ff ffdc 	bl	8004c88 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0b5b      	lsrs	r3, r3, #13
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	08013d10 	.word	0x08013d10

08004cf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	220f      	movs	r2, #15
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCC_GetClockConfig+0x5c>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <HAL_RCC_GetClockConfig+0x5c>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <HAL_RCC_GetClockConfig+0x5c>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_GetClockConfig+0x5c>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	08db      	lsrs	r3, r3, #3
 8004d2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <HAL_RCC_GetClockConfig+0x60>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40023c00 	.word	0x40023c00

08004d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004d8c:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d92:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	496c      	ldr	r1, [pc, #432]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004daa:	2301      	movs	r3, #1
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004dba:	4b64      	ldr	r3, [pc, #400]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc8:	4960      	ldr	r1, [pc, #384]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d017      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004de8:	4b58      	ldr	r3, [pc, #352]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4955      	ldr	r1, [pc, #340]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e06:	d101      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004e14:	2301      	movs	r3, #1
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d017      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e24:	4b49      	ldr	r3, [pc, #292]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	4946      	ldr	r1, [pc, #280]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e42:	d101      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004e44:	2301      	movs	r3, #1
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004e50:	2301      	movs	r3, #1
 8004e52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 808a 	beq.w	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6413      	str	r3, [r2, #64]	; 0x40
 8004e72:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e7e:	4b34      	ldr	r3, [pc, #208]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a33      	ldr	r2, [pc, #204]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e8a:	f7fd fd2d 	bl	80028e8 <HAL_GetTick>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e92:	f7fd fd29 	bl	80028e8 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e278      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea4:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb0:	4b26      	ldr	r3, [pc, #152]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02f      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d028      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ece:	4b1f      	ldr	r3, [pc, #124]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ed8:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ede:	4b1d      	ldr	r3, [pc, #116]	; (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eea:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d114      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ef6:	f7fd fcf7 	bl	80028e8 <HAL_GetTick>
 8004efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fd fcf3 	bl	80028e8 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e240      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ee      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f2c:	d114      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004f2e:	4b07      	ldr	r3, [pc, #28]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f42:	4902      	ldr	r1, [pc, #8]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]
 8004f48:	e00c      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40007000 	.word	0x40007000
 8004f54:	42470e40 	.word	0x42470e40
 8004f58:	4b4a      	ldr	r3, [pc, #296]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a49      	ldr	r2, [pc, #292]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f62:	6093      	str	r3, [r2, #8]
 8004f64:	4b47      	ldr	r3, [pc, #284]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	4944      	ldr	r1, [pc, #272]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004f88:	4b3f      	ldr	r3, [pc, #252]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004f8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004f98:	4b3a      	ldr	r3, [pc, #232]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	4937      	ldr	r1, [pc, #220]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fba:	4b32      	ldr	r3, [pc, #200]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	492e      	ldr	r1, [pc, #184]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fdc:	4b29      	ldr	r3, [pc, #164]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	4926      	ldr	r1, [pc, #152]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffa:	d101      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800500c:	4b1d      	ldr	r3, [pc, #116]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	491a      	ldr	r1, [pc, #104]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502a:	2b00      	cmp	r3, #0
 800502c:	d011      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800502e:	4b15      	ldr	r3, [pc, #84]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005034:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	4911      	ldr	r1, [pc, #68]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800504c:	d101      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800504e:	2301      	movs	r3, #1
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	2b01      	cmp	r3, #1
 8005056:	d005      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005060:	f040 80ff 	bne.w	8005262 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506a:	f7fd fc3d 	bl	80028e8 <HAL_GetTick>
 800506e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005070:	e00e      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005072:	f7fd fc39 	bl	80028e8 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d907      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e188      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005084:	40023800 	.word	0x40023800
 8005088:	424711e0 	.word	0x424711e0
 800508c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005090:	4b7e      	ldr	r3, [pc, #504]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1ea      	bne.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d028      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d124      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80050c4:	4b71      	ldr	r3, [pc, #452]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	3301      	adds	r3, #1
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050d6:	4b6d      	ldr	r3, [pc, #436]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050dc:	0e1b      	lsrs	r3, r3, #24
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	431a      	orrs	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	3b01      	subs	r3, #1
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	431a      	orrs	r2, r3
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	071b      	lsls	r3, r3, #28
 8005106:	4961      	ldr	r1, [pc, #388]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0304 	and.w	r3, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800512c:	2b00      	cmp	r3, #0
 800512e:	d035      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005138:	d130      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800513a:	4b54      	ldr	r3, [pc, #336]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800513c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	3301      	adds	r3, #1
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800514c:	4b4f      	ldr	r3, [pc, #316]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800514e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005152:	0f1b      	lsrs	r3, r3, #28
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	019b      	lsls	r3, r3, #6
 8005164:	431a      	orrs	r2, r3
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	3b01      	subs	r3, #1
 800516c:	041b      	lsls	r3, r3, #16
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	061b      	lsls	r3, r3, #24
 8005176:	431a      	orrs	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	071b      	lsls	r3, r3, #28
 800517c:	4943      	ldr	r1, [pc, #268]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005184:	4b41      	ldr	r3, [pc, #260]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800518a:	f023 021f 	bic.w	r2, r3, #31
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	493d      	ldr	r1, [pc, #244]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d029      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b0:	d124      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	3301      	adds	r3, #1
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051c4:	4b31      	ldr	r3, [pc, #196]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ca:	0f1b      	lsrs	r3, r3, #28
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	019b      	lsls	r3, r3, #6
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	3b01      	subs	r3, #1
 80051e6:	041b      	lsls	r3, r3, #16
 80051e8:	431a      	orrs	r2, r3
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	431a      	orrs	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	4925      	ldr	r1, [pc, #148]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005204:	2b00      	cmp	r3, #0
 8005206:	d016      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	3b01      	subs	r3, #1
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	071b      	lsls	r3, r3, #28
 800522e:	4917      	ldr	r1, [pc, #92]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800523c:	f7fd fb54 	bl	80028e8 <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005244:	f7fd fb50 	bl	80028e8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e09f      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005256:	4b0d      	ldr	r3, [pc, #52]	; (800528c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	2b01      	cmp	r3, #1
 8005266:	f040 8095 	bne.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005270:	f7fd fb3a 	bl	80028e8 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005276:	e00f      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005278:	f7fd fb36 	bl	80028e8 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d908      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e085      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800528a:	bf00      	nop
 800528c:	40023800 	.word	0x40023800
 8005290:	42470068 	.word	0x42470068
 8005294:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005298:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a4:	d0e8      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x566>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d02b      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d127      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80052ce:	4b34      	ldr	r3, [pc, #208]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	3301      	adds	r3, #1
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699a      	ldr	r2, [r3, #24]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	431a      	orrs	r2, r3
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	3b01      	subs	r3, #1
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	4928      	ldr	r1, [pc, #160]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005304:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	3b01      	subs	r3, #1
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	4922      	ldr	r1, [pc, #136]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01d      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005332:	d118      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005334:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	0e1b      	lsrs	r3, r3, #24
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	019b      	lsls	r3, r3, #6
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	061b      	lsls	r3, r3, #24
 800535e:	4910      	ldr	r1, [pc, #64]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005368:	2201      	movs	r2, #1
 800536a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800536c:	f7fd fabc 	bl	80028e8 <HAL_GetTick>
 8005370:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005372:	e008      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005374:	f7fd fab8 	bl	80028e8 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e007      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800538e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005392:	d1ef      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3730      	adds	r7, #48	; 0x30
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	42470070 	.word	0x42470070

080053a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ac:	b088      	sub	sp, #32
 80053ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c4:	4bce      	ldr	r3, [pc, #824]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	f200 818d 	bhi.w	80056ec <HAL_RCC_GetSysClockFreq+0x344>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_RCC_GetSysClockFreq+0x30>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	0800540d 	.word	0x0800540d
 80053dc:	080056ed 	.word	0x080056ed
 80053e0:	080056ed 	.word	0x080056ed
 80053e4:	080056ed 	.word	0x080056ed
 80053e8:	08005413 	.word	0x08005413
 80053ec:	080056ed 	.word	0x080056ed
 80053f0:	080056ed 	.word	0x080056ed
 80053f4:	080056ed 	.word	0x080056ed
 80053f8:	08005419 	.word	0x08005419
 80053fc:	080056ed 	.word	0x080056ed
 8005400:	080056ed 	.word	0x080056ed
 8005404:	080056ed 	.word	0x080056ed
 8005408:	0800558d 	.word	0x0800558d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800540c:	4bbd      	ldr	r3, [pc, #756]	; (8005704 <HAL_RCC_GetSysClockFreq+0x35c>)
 800540e:	61bb      	str	r3, [r7, #24]
       break;
 8005410:	e16f      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005412:	4bbd      	ldr	r3, [pc, #756]	; (8005708 <HAL_RCC_GetSysClockFreq+0x360>)
 8005414:	61bb      	str	r3, [r7, #24]
      break;
 8005416:	e16c      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005418:	4bb9      	ldr	r3, [pc, #740]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005420:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005422:	4bb7      	ldr	r3, [pc, #732]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d053      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800542e:	4bb4      	ldr	r3, [pc, #720]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	099b      	lsrs	r3, r3, #6
 8005434:	461a      	mov	r2, r3
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800543e:	f04f 0100 	mov.w	r1, #0
 8005442:	ea02 0400 	and.w	r4, r2, r0
 8005446:	603c      	str	r4, [r7, #0]
 8005448:	400b      	ands	r3, r1
 800544a:	607b      	str	r3, [r7, #4]
 800544c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005450:	4620      	mov	r0, r4
 8005452:	4629      	mov	r1, r5
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	014b      	lsls	r3, r1, #5
 800545e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005462:	0142      	lsls	r2, r0, #5
 8005464:	4610      	mov	r0, r2
 8005466:	4619      	mov	r1, r3
 8005468:	4623      	mov	r3, r4
 800546a:	1ac0      	subs	r0, r0, r3
 800546c:	462b      	mov	r3, r5
 800546e:	eb61 0103 	sbc.w	r1, r1, r3
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	018b      	lsls	r3, r1, #6
 800547c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005480:	0182      	lsls	r2, r0, #6
 8005482:	1a12      	subs	r2, r2, r0
 8005484:	eb63 0301 	sbc.w	r3, r3, r1
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	00d9      	lsls	r1, r3, #3
 8005492:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005496:	00d0      	lsls	r0, r2, #3
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4621      	mov	r1, r4
 800549e:	1852      	adds	r2, r2, r1
 80054a0:	4629      	mov	r1, r5
 80054a2:	eb43 0101 	adc.w	r1, r3, r1
 80054a6:	460b      	mov	r3, r1
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	0259      	lsls	r1, r3, #9
 80054b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80054b6:	0250      	lsls	r0, r2, #9
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	f7fa feaa 	bl	8000220 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e04c      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d6:	4b8a      	ldr	r3, [pc, #552]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	099b      	lsrs	r3, r3, #6
 80054dc:	461a      	mov	r2, r3
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	ea02 0a00 	and.w	sl, r2, r0
 80054ee:	ea03 0b01 	and.w	fp, r3, r1
 80054f2:	4650      	mov	r0, sl
 80054f4:	4659      	mov	r1, fp
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	014b      	lsls	r3, r1, #5
 8005500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005504:	0142      	lsls	r2, r0, #5
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	ebb0 000a 	subs.w	r0, r0, sl
 800550e:	eb61 010b 	sbc.w	r1, r1, fp
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	018b      	lsls	r3, r1, #6
 800551c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005520:	0182      	lsls	r2, r0, #6
 8005522:	1a12      	subs	r2, r2, r0
 8005524:	eb63 0301 	sbc.w	r3, r3, r1
 8005528:	f04f 0000 	mov.w	r0, #0
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	00d9      	lsls	r1, r3, #3
 8005532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005536:	00d0      	lsls	r0, r2, #3
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	eb12 020a 	adds.w	r2, r2, sl
 8005540:	eb43 030b 	adc.w	r3, r3, fp
 8005544:	f04f 0000 	mov.w	r0, #0
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	0299      	lsls	r1, r3, #10
 800554e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005552:	0290      	lsls	r0, r2, #10
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4610      	mov	r0, r2
 800555a:	4619      	mov	r1, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	461a      	mov	r2, r3
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	f7fa fe5c 	bl	8000220 <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005570:	4b63      	ldr	r3, [pc, #396]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	3301      	adds	r3, #1
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	61bb      	str	r3, [r7, #24]
      break;
 800558a:	e0b2      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b5c      	ldr	r3, [pc, #368]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005594:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b5a      	ldr	r3, [pc, #360]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04d      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b57      	ldr	r3, [pc, #348]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	461a      	mov	r2, r3
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	ea02 0800 	and.w	r8, r2, r0
 80055ba:	ea03 0901 	and.w	r9, r3, r1
 80055be:	4640      	mov	r0, r8
 80055c0:	4649      	mov	r1, r9
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	014b      	lsls	r3, r1, #5
 80055cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055d0:	0142      	lsls	r2, r0, #5
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	ebb0 0008 	subs.w	r0, r0, r8
 80055da:	eb61 0109 	sbc.w	r1, r1, r9
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	018b      	lsls	r3, r1, #6
 80055e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055ec:	0182      	lsls	r2, r0, #6
 80055ee:	1a12      	subs	r2, r2, r0
 80055f0:	eb63 0301 	sbc.w	r3, r3, r1
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	00d9      	lsls	r1, r3, #3
 80055fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005602:	00d0      	lsls	r0, r2, #3
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	eb12 0208 	adds.w	r2, r2, r8
 800560c:	eb43 0309 	adc.w	r3, r3, r9
 8005610:	f04f 0000 	mov.w	r0, #0
 8005614:	f04f 0100 	mov.w	r1, #0
 8005618:	0259      	lsls	r1, r3, #9
 800561a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800561e:	0250      	lsls	r0, r2, #9
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	461a      	mov	r2, r3
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	f7fa fdf6 	bl	8000220 <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4613      	mov	r3, r2
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	e04a      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563e:	4b30      	ldr	r3, [pc, #192]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	461a      	mov	r2, r3
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800564e:	f04f 0100 	mov.w	r1, #0
 8005652:	ea02 0400 	and.w	r4, r2, r0
 8005656:	ea03 0501 	and.w	r5, r3, r1
 800565a:	4620      	mov	r0, r4
 800565c:	4629      	mov	r1, r5
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	014b      	lsls	r3, r1, #5
 8005668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800566c:	0142      	lsls	r2, r0, #5
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	1b00      	subs	r0, r0, r4
 8005674:	eb61 0105 	sbc.w	r1, r1, r5
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	018b      	lsls	r3, r1, #6
 8005682:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005686:	0182      	lsls	r2, r0, #6
 8005688:	1a12      	subs	r2, r2, r0
 800568a:	eb63 0301 	sbc.w	r3, r3, r1
 800568e:	f04f 0000 	mov.w	r0, #0
 8005692:	f04f 0100 	mov.w	r1, #0
 8005696:	00d9      	lsls	r1, r3, #3
 8005698:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800569c:	00d0      	lsls	r0, r2, #3
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	1912      	adds	r2, r2, r4
 80056a4:	eb45 0303 	adc.w	r3, r5, r3
 80056a8:	f04f 0000 	mov.w	r0, #0
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	0299      	lsls	r1, r3, #10
 80056b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056b6:	0290      	lsls	r0, r2, #10
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	f7fa fdaa 	bl	8000220 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4613      	mov	r3, r2
 80056d2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80056d4:	4b0a      	ldr	r3, [pc, #40]	; (8005700 <HAL_RCC_GetSysClockFreq+0x358>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	0f1b      	lsrs	r3, r3, #28
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	61bb      	str	r3, [r7, #24]
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCC_GetSysClockFreq+0x35c>)
 80056ee:	61bb      	str	r3, [r7, #24]
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	69bb      	ldr	r3, [r7, #24]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
 8005704:	00f42400 	.word	0x00f42400
 8005708:	007a1200 	.word	0x007a1200

0800570c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e28d      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8083 	beq.w	8005832 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800572c:	4b94      	ldr	r3, [pc, #592]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	2b04      	cmp	r3, #4
 8005736:	d019      	beq.n	800576c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005738:	4b91      	ldr	r3, [pc, #580]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005740:	2b08      	cmp	r3, #8
 8005742:	d106      	bne.n	8005752 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005744:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005750:	d00c      	beq.n	800576c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005752:	4b8b      	ldr	r3, [pc, #556]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d112      	bne.n	8005784 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575e:	4b88      	ldr	r3, [pc, #544]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800576a:	d10b      	bne.n	8005784 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576c:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05b      	beq.n	8005830 <HAL_RCC_OscConfig+0x124>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d157      	bne.n	8005830 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e25a      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d106      	bne.n	800579c <HAL_RCC_OscConfig+0x90>
 800578e:	4b7c      	ldr	r3, [pc, #496]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a7b      	ldr	r2, [pc, #492]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e01d      	b.n	80057d8 <HAL_RCC_OscConfig+0xcc>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCC_OscConfig+0xb4>
 80057a6:	4b76      	ldr	r3, [pc, #472]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a75      	ldr	r2, [pc, #468]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	4b73      	ldr	r3, [pc, #460]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a72      	ldr	r2, [pc, #456]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e00b      	b.n	80057d8 <HAL_RCC_OscConfig+0xcc>
 80057c0:	4b6f      	ldr	r3, [pc, #444]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a6e      	ldr	r2, [pc, #440]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b6c      	ldr	r3, [pc, #432]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a6b      	ldr	r2, [pc, #428]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fd f882 	bl	80028e8 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fd f87e 	bl	80028e8 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	; 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e21f      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b61      	ldr	r3, [pc, #388]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0xdc>
 8005806:	e014      	b.n	8005832 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fd f86e 	bl	80028e8 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd f86a 	bl	80028e8 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e20b      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	4b57      	ldr	r3, [pc, #348]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x104>
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d06f      	beq.n	800591e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800583e:	4b50      	ldr	r3, [pc, #320]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b00      	cmp	r3, #0
 8005848:	d017      	beq.n	800587a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800584a:	4b4d      	ldr	r3, [pc, #308]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005852:	2b08      	cmp	r3, #8
 8005854:	d105      	bne.n	8005862 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005856:	4b4a      	ldr	r3, [pc, #296]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005862:	4b47      	ldr	r3, [pc, #284]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d11c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800586e:	4b44      	ldr	r3, [pc, #272]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d116      	bne.n	80058a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	4b41      	ldr	r3, [pc, #260]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_RCC_OscConfig+0x186>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e1d3      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005892:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4937      	ldr	r1, [pc, #220]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	e03a      	b.n	800591e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b0:	4b34      	ldr	r3, [pc, #208]	; (8005984 <HAL_RCC_OscConfig+0x278>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fd f817 	bl	80028e8 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058be:	f7fd f813 	bl	80028e8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e1b4      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d0:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058dc:	4b28      	ldr	r3, [pc, #160]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4925      	ldr	r1, [pc, #148]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f2:	4b24      	ldr	r3, [pc, #144]	; (8005984 <HAL_RCC_OscConfig+0x278>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc fff6 	bl	80028e8 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005900:	f7fc fff2 	bl	80028e8 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e193      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005912:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d036      	beq.n	8005998 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005932:	4b15      	ldr	r3, [pc, #84]	; (8005988 <HAL_RCC_OscConfig+0x27c>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fc ffd6 	bl	80028e8 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005940:	f7fc ffd2 	bl	80028e8 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e173      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_RCC_OscConfig+0x274>)
 8005954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x234>
 800595e:	e01b      	b.n	8005998 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_RCC_OscConfig+0x27c>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005966:	f7fc ffbf 	bl	80028e8 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800596c:	e00e      	b.n	800598c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800596e:	f7fc ffbb 	bl	80028e8 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d907      	bls.n	800598c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e15c      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
 8005980:	40023800 	.word	0x40023800
 8005984:	42470000 	.word	0x42470000
 8005988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598c:	4b8a      	ldr	r3, [pc, #552]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 800598e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ea      	bne.n	800596e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8097 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059aa:	4b83      	ldr	r3, [pc, #524]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	4b7f      	ldr	r3, [pc, #508]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	4a7e      	ldr	r2, [pc, #504]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 80059c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c4:	6413      	str	r3, [r2, #64]	; 0x40
 80059c6:	4b7c      	ldr	r3, [pc, #496]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b79      	ldr	r3, [pc, #484]	; (8005bbc <HAL_RCC_OscConfig+0x4b0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d118      	bne.n	8005a14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e2:	4b76      	ldr	r3, [pc, #472]	; (8005bbc <HAL_RCC_OscConfig+0x4b0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a75      	ldr	r2, [pc, #468]	; (8005bbc <HAL_RCC_OscConfig+0x4b0>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ee:	f7fc ff7b 	bl	80028e8 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fc ff77 	bl	80028e8 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e118      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	4b6c      	ldr	r3, [pc, #432]	; (8005bbc <HAL_RCC_OscConfig+0x4b0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <HAL_RCC_OscConfig+0x31e>
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	4a65      	ldr	r2, [pc, #404]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6713      	str	r3, [r2, #112]	; 0x70
 8005a28:	e01c      	b.n	8005a64 <HAL_RCC_OscConfig+0x358>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCC_OscConfig+0x340>
 8005a32:	4b61      	ldr	r3, [pc, #388]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	4a60      	ldr	r2, [pc, #384]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3e:	4b5e      	ldr	r3, [pc, #376]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a5d      	ldr	r2, [pc, #372]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4a:	e00b      	b.n	8005a64 <HAL_RCC_OscConfig+0x358>
 8005a4c:	4b5a      	ldr	r3, [pc, #360]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a50:	4a59      	ldr	r2, [pc, #356]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	6713      	str	r3, [r2, #112]	; 0x70
 8005a58:	4b57      	ldr	r3, [pc, #348]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	4a56      	ldr	r2, [pc, #344]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a5e:	f023 0304 	bic.w	r3, r3, #4
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d015      	beq.n	8005a98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc ff3c 	bl	80028e8 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a74:	f7fc ff38 	bl	80028e8 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e0d7      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8a:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ee      	beq.n	8005a74 <HAL_RCC_OscConfig+0x368>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fc ff26 	bl	80028e8 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aa0:	f7fc ff22 	bl	80028e8 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e0c1      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab6:	4b40      	ldr	r3, [pc, #256]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ee      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac8:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005acc:	4a3a      	ldr	r2, [pc, #232]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80ad 	beq.w	8005c38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ade:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d060      	beq.n	8005bac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d145      	bne.n	8005b7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b33      	ldr	r3, [pc, #204]	; (8005bc0 <HAL_RCC_OscConfig+0x4b4>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fc fef6 	bl	80028e8 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fef2 	bl	80028e8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e093      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	3b01      	subs	r3, #1
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	071b      	lsls	r3, r3, #28
 8005b4a:	491b      	ldr	r1, [pc, #108]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <HAL_RCC_OscConfig+0x4b4>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fc fec7 	bl	80028e8 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5e:	f7fc fec3 	bl	80028e8 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e064      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0f0      	beq.n	8005b5e <HAL_RCC_OscConfig+0x452>
 8005b7c:	e05c      	b.n	8005c38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7e:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <HAL_RCC_OscConfig+0x4b4>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fc feb0 	bl	80028e8 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fc feac 	bl	80028e8 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e04d      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <HAL_RCC_OscConfig+0x4ac>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x480>
 8005baa:	e045      	b.n	8005c38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e040      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	40007000 	.word	0x40007000
 8005bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bc4:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <HAL_RCC_OscConfig+0x538>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d030      	beq.n	8005c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d129      	bne.n	8005c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d122      	bne.n	8005c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d119      	bne.n	8005c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d10f      	bne.n	8005c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800

08005c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e07b      	b.n	8005d52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c6a:	d009      	beq.n	8005c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	61da      	str	r2, [r3, #28]
 8005c72:	e005      	b.n	8005c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc faa2 	bl	80021e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	ea42 0103 	orr.w	r1, r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0104 	and.w	r1, r3, #4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	f003 0210 	and.w	r2, r3, #16
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b088      	sub	sp, #32
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_SPI_Transmit+0x22>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e126      	b.n	8005fca <HAL_SPI_Transmit+0x270>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d84:	f7fc fdb0 	bl	80028e8 <HAL_GetTick>
 8005d88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d002      	beq.n	8005da0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d9e:	e10b      	b.n	8005fb8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_SPI_Transmit+0x52>
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005db0:	e102      	b.n	8005fb8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2203      	movs	r2, #3
 8005db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df8:	d10f      	bne.n	8005e1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d007      	beq.n	8005e38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d14b      	bne.n	8005eda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SPI_Transmit+0xf6>
 8005e4a:	8afb      	ldrh	r3, [r7, #22]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d13e      	bne.n	8005ece <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	1c9a      	adds	r2, r3, #2
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e74:	e02b      	b.n	8005ece <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d112      	bne.n	8005eaa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	1c9a      	adds	r2, r3, #2
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ea8:	e011      	b.n	8005ece <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eaa:	f7fc fd1d 	bl	80028e8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d803      	bhi.n	8005ec2 <HAL_SPI_Transmit+0x168>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_Transmit+0x16e>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ecc:	e074      	b.n	8005fb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1ce      	bne.n	8005e76 <HAL_SPI_Transmit+0x11c>
 8005ed8:	e04c      	b.n	8005f74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_SPI_Transmit+0x18e>
 8005ee2:	8afb      	ldrh	r3, [r7, #22]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d140      	bne.n	8005f6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f0e:	e02c      	b.n	8005f6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d113      	bne.n	8005f46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f44:	e011      	b.n	8005f6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f46:	f7fc fccf 	bl	80028e8 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d803      	bhi.n	8005f5e <HAL_SPI_Transmit+0x204>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5c:	d102      	bne.n	8005f64 <HAL_SPI_Transmit+0x20a>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f68:	e026      	b.n	8005fb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1cd      	bne.n	8005f10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fbcb 	bl	8006714 <SPI_EndRxTxTransaction>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e000      	b.n	8005fb8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005fb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3720      	adds	r7, #32
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b088      	sub	sp, #32
 8005fd6:	af02      	add	r7, sp, #8
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fee:	d112      	bne.n	8006016 <HAL_SPI_Receive+0x44>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10e      	bne.n	8006016 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2204      	movs	r2, #4
 8005ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f8f1 	bl	80061f4 <HAL_SPI_TransmitReceive>
 8006012:	4603      	mov	r3, r0
 8006014:	e0ea      	b.n	80061ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_SPI_Receive+0x52>
 8006020:	2302      	movs	r3, #2
 8006022:	e0e3      	b.n	80061ec <HAL_SPI_Receive+0x21a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800602c:	f7fc fc5c 	bl	80028e8 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	d002      	beq.n	8006044 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800603e:	2302      	movs	r3, #2
 8006040:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006042:	e0ca      	b.n	80061da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_Receive+0x7e>
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006054:	e0c1      	b.n	80061da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2204      	movs	r2, #4
 800605a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	88fa      	ldrh	r2, [r7, #6]
 8006074:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609c:	d10f      	bne.n	80060be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b40      	cmp	r3, #64	; 0x40
 80060ca:	d007      	beq.n	80060dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d162      	bne.n	80061aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060e4:	e02e      	b.n	8006144 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d115      	bne.n	8006120 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f103 020c 	add.w	r2, r3, #12
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800611e:	e011      	b.n	8006144 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006120:	f7fc fbe2 	bl	80028e8 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d803      	bhi.n	8006138 <HAL_SPI_Receive+0x166>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d102      	bne.n	800613e <HAL_SPI_Receive+0x16c>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006142:	e04a      	b.n	80061da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1cb      	bne.n	80060e6 <HAL_SPI_Receive+0x114>
 800614e:	e031      	b.n	80061b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b01      	cmp	r3, #1
 800615c:	d113      	bne.n	8006186 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	b292      	uxth	r2, r2
 800616a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	1c9a      	adds	r2, r3, #2
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006184:	e011      	b.n	80061aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006186:	f7fc fbaf 	bl	80028e8 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d803      	bhi.n	800619e <HAL_SPI_Receive+0x1cc>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619c:	d102      	bne.n	80061a4 <HAL_SPI_Receive+0x1d2>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d102      	bne.n	80061aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061a8:	e017      	b.n	80061da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1cd      	bne.n	8006150 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fa45 	bl	8006648 <SPI_EndRxTransaction>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
 80061d6:	e000      	b.n	80061da <HAL_SPI_Receive+0x208>
  }

error :
 80061d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	; 0x30
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006202:	2301      	movs	r3, #1
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_SPI_TransmitReceive+0x26>
 8006216:	2302      	movs	r3, #2
 8006218:	e18a      	b.n	8006530 <HAL_SPI_TransmitReceive+0x33c>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006222:	f7fc fb61 	bl	80028e8 <HAL_GetTick>
 8006226:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800623c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006240:	2b01      	cmp	r3, #1
 8006242:	d00f      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x70>
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624a:	d107      	bne.n	800625c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <HAL_SPI_TransmitReceive+0x68>
 8006254:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006258:	2b04      	cmp	r3, #4
 800625a:	d003      	beq.n	8006264 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800625c:	2302      	movs	r3, #2
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006262:	e15b      	b.n	800651c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_SPI_TransmitReceive+0x82>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <HAL_SPI_TransmitReceive+0x82>
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800627c:	e14e      	b.n	800651c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b04      	cmp	r3, #4
 8006288:	d003      	beq.n	8006292 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2205      	movs	r2, #5
 800628e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	887a      	ldrh	r2, [r7, #2]
 80062a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	887a      	ldrh	r2, [r7, #2]
 80062ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d007      	beq.n	80062e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ee:	d178      	bne.n	80063e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_SPI_TransmitReceive+0x10a>
 80062f8:	8b7b      	ldrh	r3, [r7, #26]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d166      	bne.n	80063cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	881a      	ldrh	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	1c9a      	adds	r2, r3, #2
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006322:	e053      	b.n	80063cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d11b      	bne.n	800636a <HAL_SPI_TransmitReceive+0x176>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006336:	b29b      	uxth	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d016      	beq.n	800636a <HAL_SPI_TransmitReceive+0x176>
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d113      	bne.n	800636a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b01      	cmp	r3, #1
 8006376:	d119      	bne.n	80063ac <HAL_SPI_TransmitReceive+0x1b8>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d014      	beq.n	80063ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	b292      	uxth	r2, r2
 800638e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063a8:	2301      	movs	r3, #1
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063ac:	f7fc fa9c 	bl	80028e8 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d807      	bhi.n	80063cc <HAL_SPI_TransmitReceive+0x1d8>
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d003      	beq.n	80063cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ca:	e0a7      	b.n	800651c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1a6      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x130>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1a1      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x130>
 80063e0:	e07c      	b.n	80064dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x1fc>
 80063ea:	8b7b      	ldrh	r3, [r7, #26]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d16b      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	7812      	ldrb	r2, [r2, #0]
 80063fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b01      	subs	r3, #1
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006416:	e057      	b.n	80064c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b02      	cmp	r3, #2
 8006424:	d11c      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x26c>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	d017      	beq.n	8006460 <HAL_SPI_TransmitReceive+0x26c>
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d114      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d119      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x2ae>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d014      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006494:	b29b      	uxth	r3, r3
 8006496:	3b01      	subs	r3, #1
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800649e:	2301      	movs	r3, #1
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064a2:	f7fc fa21 	bl	80028e8 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d803      	bhi.n	80064ba <HAL_SPI_TransmitReceive+0x2c6>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b8:	d102      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x2cc>
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064c6:	e029      	b.n	800651c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1a2      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x224>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d19d      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f917 	bl	8006714 <SPI_EndRxTxTransaction>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064f8:	e010      	b.n	800651c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	e000      	b.n	800651c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800651a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800652c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006530:	4618      	mov	r0, r3
 8006532:	3730      	adds	r7, #48	; 0x30
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006548:	f7fc f9ce 	bl	80028e8 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	4413      	add	r3, r2
 8006556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006558:	f7fc f9c6 	bl	80028e8 <HAL_GetTick>
 800655c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800655e:	4b39      	ldr	r3, [pc, #228]	; (8006644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	0d1b      	lsrs	r3, r3, #20
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800656e:	e054      	b.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d050      	beq.n	800661a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006578:	f7fc f9b6 	bl	80028e8 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d902      	bls.n	800658e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d13d      	bne.n	800660a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800659c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a6:	d111      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	d004      	beq.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ba:	d107      	bne.n	80065cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d4:	d10f      	bne.n	80065f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e017      	b.n	800663a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3b01      	subs	r3, #1
 8006618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	429a      	cmp	r2, r3
 8006628:	bf0c      	ite	eq
 800662a:	2301      	moveq	r3, #1
 800662c:	2300      	movne	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	79fb      	ldrb	r3, [r7, #7]
 8006634:	429a      	cmp	r2, r3
 8006636:	d19b      	bne.n	8006570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000004 	.word	0x20000004

08006648 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800665c:	d111      	bne.n	8006682 <SPI_EndRxTransaction+0x3a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006666:	d004      	beq.n	8006672 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006670:	d107      	bne.n	8006682 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006680:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800668a:	d12a      	bne.n	80066e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006694:	d012      	beq.n	80066bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff ff49 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d02d      	beq.n	8006708 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e026      	b.n	800670a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2200      	movs	r2, #0
 80066c4:	2101      	movs	r1, #1
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff ff36 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01a      	beq.n	8006708 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	f043 0220 	orr.w	r2, r3, #32
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e013      	b.n	800670a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	2101      	movs	r1, #1
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ff23 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e000      	b.n	800670a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006720:	4b1b      	ldr	r3, [pc, #108]	; (8006790 <SPI_EndRxTxTransaction+0x7c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <SPI_EndRxTxTransaction+0x80>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	0d5b      	lsrs	r3, r3, #21
 800672c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006730:	fb02 f303 	mul.w	r3, r2, r3
 8006734:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800673e:	d112      	bne.n	8006766 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff fef4 	bl	8006538 <SPI_WaitFlagStateUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f043 0220 	orr.w	r2, r3, #32
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e00f      	b.n	8006786 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	3b01      	subs	r3, #1
 8006770:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677c:	2b80      	cmp	r3, #128	; 0x80
 800677e:	d0f2      	beq.n	8006766 <SPI_EndRxTxTransaction+0x52>
 8006780:	e000      	b.n	8006784 <SPI_EndRxTxTransaction+0x70>
        break;
 8006782:	bf00      	nop
  }

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20000004 	.word	0x20000004
 8006794:	165e9f81 	.word	0x165e9f81

08006798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e041      	b.n	800682e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fb fd58 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f000 f9ce 	bl	8006b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	d001      	beq.n	8006850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e04e      	b.n	80068ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a23      	ldr	r2, [pc, #140]	; (80068fc <HAL_TIM_Base_Start_IT+0xc4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d022      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687a:	d01d      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1f      	ldr	r2, [pc, #124]	; (8006900 <HAL_TIM_Base_Start_IT+0xc8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d018      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <HAL_TIM_Base_Start_IT+0xcc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1c      	ldr	r2, [pc, #112]	; (8006908 <HAL_TIM_Base_Start_IT+0xd0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00e      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1b      	ldr	r2, [pc, #108]	; (800690c <HAL_TIM_Base_Start_IT+0xd4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d009      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a19      	ldr	r2, [pc, #100]	; (8006910 <HAL_TIM_Base_Start_IT+0xd8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d004      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0x80>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <HAL_TIM_Base_Start_IT+0xdc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d111      	bne.n	80068dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b06      	cmp	r3, #6
 80068c8:	d010      	beq.n	80068ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068da:	e007      	b.n	80068ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40010000 	.word	0x40010000
 8006900:	40000400 	.word	0x40000400
 8006904:	40000800 	.word	0x40000800
 8006908:	40000c00 	.word	0x40000c00
 800690c:	40010400 	.word	0x40010400
 8006910:	40014000 	.word	0x40014000
 8006914:	40001800 	.word	0x40001800

08006918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d122      	bne.n	8006974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b02      	cmp	r3, #2
 800693a:	d11b      	bne.n	8006974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0202 	mvn.w	r2, #2
 8006944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8ee 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 8006960:	e005      	b.n	800696e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f8e0 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f8f1 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d122      	bne.n	80069c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b04      	cmp	r3, #4
 800698e:	d11b      	bne.n	80069c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0204 	mvn.w	r2, #4
 8006998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f8c4 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 80069b4:	e005      	b.n	80069c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8b6 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f8c7 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d122      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d11b      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0208 	mvn.w	r2, #8
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2204      	movs	r2, #4
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f89a 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f88c 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f89d 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b10      	cmp	r3, #16
 8006a36:	d11b      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0210 	mvn.w	r2, #16
 8006a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2208      	movs	r2, #8
 8006a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f870 	bl	8006b3c <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f862 	bl	8006b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f873 	bl	8006b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10e      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d107      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0201 	mvn.w	r2, #1
 8006a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fb f9a0 	bl	8001ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b80      	cmp	r3, #128	; 0x80
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab4:	2b80      	cmp	r3, #128	; 0x80
 8006ab6:	d107      	bne.n	8006ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f902 	bl	8006ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d10e      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d107      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f838 	bl	8006b64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0220 	mvn.w	r2, #32
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f8cc 	bl	8006cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a40      	ldr	r2, [pc, #256]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b96:	d00f      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	; (8006c90 <TIM_Base_SetConfig+0x118>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3c      	ldr	r2, [pc, #240]	; (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3b      	ldr	r2, [pc, #236]	; (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a3a      	ldr	r2, [pc, #232]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a2f      	ldr	r2, [pc, #188]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d02b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d027      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2c      	ldr	r2, [pc, #176]	; (8006c90 <TIM_Base_SetConfig+0x118>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d023      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2b      	ldr	r2, [pc, #172]	; (8006c94 <TIM_Base_SetConfig+0x11c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2a      	ldr	r2, [pc, #168]	; (8006c98 <TIM_Base_SetConfig+0x120>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a29      	ldr	r2, [pc, #164]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d017      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a28      	ldr	r2, [pc, #160]	; (8006ca0 <TIM_Base_SetConfig+0x128>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a27      	ldr	r2, [pc, #156]	; (8006ca4 <TIM_Base_SetConfig+0x12c>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d00f      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <TIM_Base_SetConfig+0x130>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d00b      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a25      	ldr	r2, [pc, #148]	; (8006cac <TIM_Base_SetConfig+0x134>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d007      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a24      	ldr	r2, [pc, #144]	; (8006cb0 <TIM_Base_SetConfig+0x138>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d003      	beq.n	8006c2a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a23      	ldr	r2, [pc, #140]	; (8006cb4 <TIM_Base_SetConfig+0x13c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <TIM_Base_SetConfig+0x114>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <TIM_Base_SetConfig+0x124>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d103      	bne.n	8006c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	615a      	str	r2, [r3, #20]
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40010400 	.word	0x40010400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800
 8006cac:	40001800 	.word	0x40001800
 8006cb0:	40001c00 	.word	0x40001c00
 8006cb4:	40002000 	.word	0x40002000

08006cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e03f      	b.n	8006d72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fb fadc 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2224      	movs	r2, #36	; 0x24
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9a7 	bl	8007078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b08a      	sub	sp, #40	; 0x28
 8006d7e:	af02      	add	r7, sp, #8
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d17c      	bne.n	8006e94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_UART_Transmit+0x2c>
 8006da0:	88fb      	ldrh	r3, [r7, #6]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e075      	b.n	8006e96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_UART_Transmit+0x3e>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e06e      	b.n	8006e96 <HAL_UART_Transmit+0x11c>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2221      	movs	r2, #33	; 0x21
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dce:	f7fb fd8b 	bl	80028e8 <HAL_GetTick>
 8006dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	88fa      	ldrh	r2, [r7, #6]
 8006dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de8:	d108      	bne.n	8006dfc <HAL_UART_Transmit+0x82>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e003      	b.n	8006e04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e0c:	e02a      	b.n	8006e64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f8e2 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e036      	b.n	8006e96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	3302      	adds	r3, #2
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	e007      	b.n	8006e56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	3301      	adds	r3, #1
 8006e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1cf      	bne.n	8006e0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2200      	movs	r2, #0
 8006e76:	2140      	movs	r1, #64	; 0x40
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f8b2 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e006      	b.n	8006e96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e94:	2302      	movs	r3, #2
  }
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b08a      	sub	sp, #40	; 0x28
 8006ea2:	af02      	add	r7, sp, #8
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	603b      	str	r3, [r7, #0]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	f040 808c 	bne.w	8006fd8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_UART_Receive+0x2e>
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e084      	b.n	8006fda <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Receive+0x40>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e07d      	b.n	8006fda <HAL_UART_Receive+0x13c>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2222      	movs	r2, #34	; 0x22
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006efa:	f7fb fcf5 	bl	80028e8 <HAL_GetTick>
 8006efe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	88fa      	ldrh	r2, [r7, #6]
 8006f0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f14:	d108      	bne.n	8006f28 <HAL_UART_Receive+0x8a>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e003      	b.n	8006f30 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f38:	e043      	b.n	8006fc2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2120      	movs	r1, #32
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f84c 	bl	8006fe2 <UART_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e042      	b.n	8006fda <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10c      	bne.n	8006f74 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	3302      	adds	r3, #2
 8006f70:	61bb      	str	r3, [r7, #24]
 8006f72:	e01f      	b.n	8006fb4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7c:	d007      	beq.n	8006f8e <HAL_UART_Receive+0xf0>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <HAL_UART_Receive+0xfe>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e008      	b.n	8006fae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1b6      	bne.n	8006f3a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	e02c      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d028      	beq.n	800704e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <UART_WaitOnFlagUntilTimeout+0x30>
 8007002:	f7fb fc71 	bl	80028e8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	429a      	cmp	r2, r3
 8007010:	d21d      	bcs.n	800704e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007020:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695a      	ldr	r2, [r3, #20]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e00f      	b.n	800706e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4013      	ands	r3, r2
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	429a      	cmp	r2, r3
 800705c:	bf0c      	ite	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	2300      	movne	r3, #0
 8007062:	b2db      	uxtb	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	429a      	cmp	r2, r3
 800706a:	d0c3      	beq.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707c:	b09f      	sub	sp, #124	; 0x7c
 800707e:	af00      	add	r7, sp, #0
 8007080:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	68d9      	ldr	r1, [r3, #12]
 8007090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	ea40 0301 	orr.w	r3, r0, r1
 8007098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80070b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070bc:	f021 010c 	bic.w	r1, r1, #12
 80070c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070c6:	430b      	orrs	r3, r1
 80070c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	6999      	ldr	r1, [r3, #24]
 80070d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	ea40 0301 	orr.w	r3, r0, r1
 80070e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4bc5      	ldr	r3, [pc, #788]	; (80073fc <UART_SetConfig+0x384>)
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d004      	beq.n	80070f6 <UART_SetConfig+0x7e>
 80070ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	4bc3      	ldr	r3, [pc, #780]	; (8007400 <UART_SetConfig+0x388>)
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d103      	bne.n	80070fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070f6:	f7fd fde7 	bl	8004cc8 <HAL_RCC_GetPCLK2Freq>
 80070fa:	6778      	str	r0, [r7, #116]	; 0x74
 80070fc:	e002      	b.n	8007104 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070fe:	f7fd fdcf 	bl	8004ca0 <HAL_RCC_GetPCLK1Freq>
 8007102:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710c:	f040 80b6 	bne.w	800727c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007112:	461c      	mov	r4, r3
 8007114:	f04f 0500 	mov.w	r5, #0
 8007118:	4622      	mov	r2, r4
 800711a:	462b      	mov	r3, r5
 800711c:	1891      	adds	r1, r2, r2
 800711e:	6439      	str	r1, [r7, #64]	; 0x40
 8007120:	415b      	adcs	r3, r3
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007128:	1912      	adds	r2, r2, r4
 800712a:	eb45 0303 	adc.w	r3, r5, r3
 800712e:	f04f 0000 	mov.w	r0, #0
 8007132:	f04f 0100 	mov.w	r1, #0
 8007136:	00d9      	lsls	r1, r3, #3
 8007138:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800713c:	00d0      	lsls	r0, r2, #3
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	1911      	adds	r1, r2, r4
 8007144:	6639      	str	r1, [r7, #96]	; 0x60
 8007146:	416b      	adcs	r3, r5
 8007148:	667b      	str	r3, [r7, #100]	; 0x64
 800714a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	461a      	mov	r2, r3
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	1891      	adds	r1, r2, r2
 8007156:	63b9      	str	r1, [r7, #56]	; 0x38
 8007158:	415b      	adcs	r3, r3
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800715c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007160:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007164:	f7f9 f85c 	bl	8000220 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4ba5      	ldr	r3, [pc, #660]	; (8007404 <UART_SetConfig+0x38c>)
 800716e:	fba3 2302 	umull	r2, r3, r3, r2
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	011e      	lsls	r6, r3, #4
 8007176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007178:	461c      	mov	r4, r3
 800717a:	f04f 0500 	mov.w	r5, #0
 800717e:	4622      	mov	r2, r4
 8007180:	462b      	mov	r3, r5
 8007182:	1891      	adds	r1, r2, r2
 8007184:	6339      	str	r1, [r7, #48]	; 0x30
 8007186:	415b      	adcs	r3, r3
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800718e:	1912      	adds	r2, r2, r4
 8007190:	eb45 0303 	adc.w	r3, r5, r3
 8007194:	f04f 0000 	mov.w	r0, #0
 8007198:	f04f 0100 	mov.w	r1, #0
 800719c:	00d9      	lsls	r1, r3, #3
 800719e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071a2:	00d0      	lsls	r0, r2, #3
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	1911      	adds	r1, r2, r4
 80071aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80071ac:	416b      	adcs	r3, r5
 80071ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	461a      	mov	r2, r3
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	1891      	adds	r1, r2, r2
 80071bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80071be:	415b      	adcs	r3, r3
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80071ca:	f7f9 f829 	bl	8000220 <__aeabi_uldivmod>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4b8c      	ldr	r3, [pc, #560]	; (8007404 <UART_SetConfig+0x38c>)
 80071d4:	fba3 1302 	umull	r1, r3, r3, r2
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	2164      	movs	r1, #100	; 0x64
 80071dc:	fb01 f303 	mul.w	r3, r1, r3
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	3332      	adds	r3, #50	; 0x32
 80071e6:	4a87      	ldr	r2, [pc, #540]	; (8007404 <UART_SetConfig+0x38c>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071f4:	441e      	add	r6, r3
 80071f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071f8:	4618      	mov	r0, r3
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	1894      	adds	r4, r2, r2
 8007204:	623c      	str	r4, [r7, #32]
 8007206:	415b      	adcs	r3, r3
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800720e:	1812      	adds	r2, r2, r0
 8007210:	eb41 0303 	adc.w	r3, r1, r3
 8007214:	f04f 0400 	mov.w	r4, #0
 8007218:	f04f 0500 	mov.w	r5, #0
 800721c:	00dd      	lsls	r5, r3, #3
 800721e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007222:	00d4      	lsls	r4, r2, #3
 8007224:	4622      	mov	r2, r4
 8007226:	462b      	mov	r3, r5
 8007228:	1814      	adds	r4, r2, r0
 800722a:	653c      	str	r4, [r7, #80]	; 0x50
 800722c:	414b      	adcs	r3, r1
 800722e:	657b      	str	r3, [r7, #84]	; 0x54
 8007230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	461a      	mov	r2, r3
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	1891      	adds	r1, r2, r2
 800723c:	61b9      	str	r1, [r7, #24]
 800723e:	415b      	adcs	r3, r3
 8007240:	61fb      	str	r3, [r7, #28]
 8007242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007246:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800724a:	f7f8 ffe9 	bl	8000220 <__aeabi_uldivmod>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4b6c      	ldr	r3, [pc, #432]	; (8007404 <UART_SetConfig+0x38c>)
 8007254:	fba3 1302 	umull	r1, r3, r3, r2
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	2164      	movs	r1, #100	; 0x64
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	3332      	adds	r3, #50	; 0x32
 8007266:	4a67      	ldr	r2, [pc, #412]	; (8007404 <UART_SetConfig+0x38c>)
 8007268:	fba2 2303 	umull	r2, r3, r2, r3
 800726c:	095b      	lsrs	r3, r3, #5
 800726e:	f003 0207 	and.w	r2, r3, #7
 8007272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4432      	add	r2, r6
 8007278:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800727a:	e0b9      	b.n	80073f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800727c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727e:	461c      	mov	r4, r3
 8007280:	f04f 0500 	mov.w	r5, #0
 8007284:	4622      	mov	r2, r4
 8007286:	462b      	mov	r3, r5
 8007288:	1891      	adds	r1, r2, r2
 800728a:	6139      	str	r1, [r7, #16]
 800728c:	415b      	adcs	r3, r3
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007294:	1912      	adds	r2, r2, r4
 8007296:	eb45 0303 	adc.w	r3, r5, r3
 800729a:	f04f 0000 	mov.w	r0, #0
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	00d9      	lsls	r1, r3, #3
 80072a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072a8:	00d0      	lsls	r0, r2, #3
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	eb12 0804 	adds.w	r8, r2, r4
 80072b2:	eb43 0905 	adc.w	r9, r3, r5
 80072b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f04f 0100 	mov.w	r1, #0
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	008b      	lsls	r3, r1, #2
 80072ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072ce:	0082      	lsls	r2, r0, #2
 80072d0:	4640      	mov	r0, r8
 80072d2:	4649      	mov	r1, r9
 80072d4:	f7f8 ffa4 	bl	8000220 <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4b49      	ldr	r3, [pc, #292]	; (8007404 <UART_SetConfig+0x38c>)
 80072de:	fba3 2302 	umull	r2, r3, r3, r2
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	011e      	lsls	r6, r3, #4
 80072e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e8:	4618      	mov	r0, r3
 80072ea:	f04f 0100 	mov.w	r1, #0
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	1894      	adds	r4, r2, r2
 80072f4:	60bc      	str	r4, [r7, #8]
 80072f6:	415b      	adcs	r3, r3
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fe:	1812      	adds	r2, r2, r0
 8007300:	eb41 0303 	adc.w	r3, r1, r3
 8007304:	f04f 0400 	mov.w	r4, #0
 8007308:	f04f 0500 	mov.w	r5, #0
 800730c:	00dd      	lsls	r5, r3, #3
 800730e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007312:	00d4      	lsls	r4, r2, #3
 8007314:	4622      	mov	r2, r4
 8007316:	462b      	mov	r3, r5
 8007318:	1814      	adds	r4, r2, r0
 800731a:	64bc      	str	r4, [r7, #72]	; 0x48
 800731c:	414b      	adcs	r3, r1
 800731e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4618      	mov	r0, r3
 8007326:	f04f 0100 	mov.w	r1, #0
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	008b      	lsls	r3, r1, #2
 8007334:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007338:	0082      	lsls	r2, r0, #2
 800733a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800733e:	f7f8 ff6f 	bl	8000220 <__aeabi_uldivmod>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <UART_SetConfig+0x38c>)
 8007348:	fba3 1302 	umull	r1, r3, r3, r2
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	2164      	movs	r1, #100	; 0x64
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	3332      	adds	r3, #50	; 0x32
 800735a:	4a2a      	ldr	r2, [pc, #168]	; (8007404 <UART_SetConfig+0x38c>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007366:	441e      	add	r6, r3
 8007368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800736a:	4618      	mov	r0, r3
 800736c:	f04f 0100 	mov.w	r1, #0
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	1894      	adds	r4, r2, r2
 8007376:	603c      	str	r4, [r7, #0]
 8007378:	415b      	adcs	r3, r3
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007380:	1812      	adds	r2, r2, r0
 8007382:	eb41 0303 	adc.w	r3, r1, r3
 8007386:	f04f 0400 	mov.w	r4, #0
 800738a:	f04f 0500 	mov.w	r5, #0
 800738e:	00dd      	lsls	r5, r3, #3
 8007390:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007394:	00d4      	lsls	r4, r2, #3
 8007396:	4622      	mov	r2, r4
 8007398:	462b      	mov	r3, r5
 800739a:	eb12 0a00 	adds.w	sl, r2, r0
 800739e:	eb43 0b01 	adc.w	fp, r3, r1
 80073a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f04f 0100 	mov.w	r1, #0
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	008b      	lsls	r3, r1, #2
 80073b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073ba:	0082      	lsls	r2, r0, #2
 80073bc:	4650      	mov	r0, sl
 80073be:	4659      	mov	r1, fp
 80073c0:	f7f8 ff2e 	bl	8000220 <__aeabi_uldivmod>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <UART_SetConfig+0x38c>)
 80073ca:	fba3 1302 	umull	r1, r3, r3, r2
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	2164      	movs	r1, #100	; 0x64
 80073d2:	fb01 f303 	mul.w	r3, r1, r3
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	3332      	adds	r3, #50	; 0x32
 80073dc:	4a09      	ldr	r2, [pc, #36]	; (8007404 <UART_SetConfig+0x38c>)
 80073de:	fba2 2303 	umull	r2, r3, r2, r3
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	f003 020f 	and.w	r2, r3, #15
 80073e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4432      	add	r2, r6
 80073ee:	609a      	str	r2, [r3, #8]
}
 80073f0:	bf00      	nop
 80073f2:	377c      	adds	r7, #124	; 0x7c
 80073f4:	46bd      	mov	sp, r7
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	bf00      	nop
 80073fc:	40011000 	.word	0x40011000
 8007400:	40011400 	.word	0x40011400
 8007404:	51eb851f 	.word	0x51eb851f

08007408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007408:	b084      	sub	sp, #16
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	f107 001c 	add.w	r0, r7, #28
 8007416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	2b01      	cmp	r3, #1
 800741e:	d122      	bne.n	8007466 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800744a:	2b01      	cmp	r3, #1
 800744c:	d105      	bne.n	800745a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 fac0 	bl	80089e0 <USB_CoreReset>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e01a      	b.n	800749c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fab4 	bl	80089e0 <USB_CoreReset>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800747c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800747e:	2b00      	cmp	r3, #0
 8007480:	d106      	bne.n	8007490 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
 800748e:	e005      	b.n	800749c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10b      	bne.n	80074ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f043 0206 	orr.w	r2, r3, #6
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074c6:	b004      	add	sp, #16
 80074c8:	4770      	bx	lr
	...

080074cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d165      	bne.n	80075ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4a41      	ldr	r2, [pc, #260]	; (80075e8 <USB_SetTurnaroundTime+0x11c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d906      	bls.n	80074f6 <USB_SetTurnaroundTime+0x2a>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4a40      	ldr	r2, [pc, #256]	; (80075ec <USB_SetTurnaroundTime+0x120>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d202      	bcs.n	80074f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074f0:	230f      	movs	r3, #15
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e062      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <USB_SetTurnaroundTime+0x120>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d306      	bcc.n	800750c <USB_SetTurnaroundTime+0x40>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a3b      	ldr	r2, [pc, #236]	; (80075f0 <USB_SetTurnaroundTime+0x124>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d202      	bcs.n	800750c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007506:	230e      	movs	r3, #14
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	e057      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <USB_SetTurnaroundTime+0x124>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d306      	bcc.n	8007522 <USB_SetTurnaroundTime+0x56>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <USB_SetTurnaroundTime+0x128>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d202      	bcs.n	8007522 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800751c:	230d      	movs	r3, #13
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	e04c      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4a33      	ldr	r2, [pc, #204]	; (80075f4 <USB_SetTurnaroundTime+0x128>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d306      	bcc.n	8007538 <USB_SetTurnaroundTime+0x6c>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4a32      	ldr	r2, [pc, #200]	; (80075f8 <USB_SetTurnaroundTime+0x12c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d802      	bhi.n	8007538 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007532:	230c      	movs	r3, #12
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	e041      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	4a2f      	ldr	r2, [pc, #188]	; (80075f8 <USB_SetTurnaroundTime+0x12c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d906      	bls.n	800754e <USB_SetTurnaroundTime+0x82>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4a2e      	ldr	r2, [pc, #184]	; (80075fc <USB_SetTurnaroundTime+0x130>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d802      	bhi.n	800754e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007548:	230b      	movs	r3, #11
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e036      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	4a2a      	ldr	r2, [pc, #168]	; (80075fc <USB_SetTurnaroundTime+0x130>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d906      	bls.n	8007564 <USB_SetTurnaroundTime+0x98>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4a29      	ldr	r2, [pc, #164]	; (8007600 <USB_SetTurnaroundTime+0x134>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d802      	bhi.n	8007564 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800755e:	230a      	movs	r3, #10
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e02b      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4a26      	ldr	r2, [pc, #152]	; (8007600 <USB_SetTurnaroundTime+0x134>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d906      	bls.n	800757a <USB_SetTurnaroundTime+0xae>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	4a25      	ldr	r2, [pc, #148]	; (8007604 <USB_SetTurnaroundTime+0x138>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d202      	bcs.n	800757a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007574:	2309      	movs	r3, #9
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e020      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	4a21      	ldr	r2, [pc, #132]	; (8007604 <USB_SetTurnaroundTime+0x138>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d306      	bcc.n	8007590 <USB_SetTurnaroundTime+0xc4>
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <USB_SetTurnaroundTime+0x13c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d802      	bhi.n	8007590 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800758a:	2308      	movs	r3, #8
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e015      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <USB_SetTurnaroundTime+0x13c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d906      	bls.n	80075a6 <USB_SetTurnaroundTime+0xda>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a1c      	ldr	r2, [pc, #112]	; (800760c <USB_SetTurnaroundTime+0x140>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d202      	bcs.n	80075a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075a0:	2307      	movs	r3, #7
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e00a      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075a6:	2306      	movs	r3, #6
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e007      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075b2:	2309      	movs	r3, #9
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	e001      	b.n	80075bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075b8:	2309      	movs	r3, #9
 80075ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	00d8acbf 	.word	0x00d8acbf
 80075ec:	00e4e1c0 	.word	0x00e4e1c0
 80075f0:	00f42400 	.word	0x00f42400
 80075f4:	01067380 	.word	0x01067380
 80075f8:	011a499f 	.word	0x011a499f
 80075fc:	01312cff 	.word	0x01312cff
 8007600:	014ca43f 	.word	0x014ca43f
 8007604:	016e3600 	.word	0x016e3600
 8007608:	01a6ab1f 	.word	0x01a6ab1f
 800760c:	01e84800 	.word	0x01e84800

08007610 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f043 0201 	orr.w	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f023 0201 	bic.w	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d106      	bne.n	8007680 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60da      	str	r2, [r3, #12]
 800767e:	e00b      	b.n	8007698 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007680:	78fb      	ldrb	r3, [r7, #3]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	e001      	b.n	8007698 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e003      	b.n	80076a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007698:	2032      	movs	r0, #50	; 0x32
 800769a:	f7fb f931 	bl	8002900 <HAL_Delay>

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076a8:	b084      	sub	sp, #16
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b086      	sub	sp, #24
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e009      	b.n	80076dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3340      	adds	r3, #64	; 0x40
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	2200      	movs	r2, #0
 80076d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	3301      	adds	r3, #1
 80076da:	613b      	str	r3, [r7, #16]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	2b0e      	cmp	r3, #14
 80076e0:	d9f2      	bls.n	80076c8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d11c      	bne.n	8007722 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076f6:	f043 0302 	orr.w	r3, r3, #2
 80076fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	e005      	b.n	800772e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007734:	461a      	mov	r2, r3
 8007736:	2300      	movs	r3, #0
 8007738:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007740:	4619      	mov	r1, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	461a      	mov	r2, r3
 800774a:	680b      	ldr	r3, [r1, #0]
 800774c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10c      	bne.n	800776e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f949 	bl	80079f4 <USB_SetDevSpeed>
 8007762:	e008      	b.n	8007776 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007764:	2101      	movs	r1, #1
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f944 	bl	80079f4 <USB_SetDevSpeed>
 800776c:	e003      	b.n	8007776 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800776e:	2103      	movs	r1, #3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f93f 	bl	80079f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007776:	2110      	movs	r1, #16
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f8f3 	bl	8007964 <USB_FlushTxFifo>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f911 	bl	80079b0 <USB_FlushRxFifo>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779e:	461a      	mov	r2, r3
 80077a0:	2300      	movs	r3, #0
 80077a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	461a      	mov	r2, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	461a      	mov	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e043      	b.n	800784a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d8:	d118      	bne.n	800780c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	461a      	mov	r2, r3
 80077ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	e013      	b.n	800781e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	461a      	mov	r2, r3
 8007804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e008      	b.n	800781e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	461a      	mov	r2, r3
 800781a:	2300      	movs	r3, #0
 800781c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782a:	461a      	mov	r2, r3
 800782c:	2300      	movs	r3, #0
 800782e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783c:	461a      	mov	r2, r3
 800783e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007842:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	3301      	adds	r3, #1
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d3b7      	bcc.n	80077c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	e043      	b.n	80078e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800786a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786e:	d118      	bne.n	80078a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007882:	461a      	mov	r2, r3
 8007884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e013      	b.n	80078b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	461a      	mov	r2, r3
 800789a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e008      	b.n	80078b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	461a      	mov	r2, r3
 80078d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3301      	adds	r3, #1
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d3b7      	bcc.n	8007858 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007908:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f043 0210 	orr.w	r2, r3, #16
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <USB_DevInit+0x2b8>)
 8007922:	4313      	orrs	r3, r2
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f043 0208 	orr.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800793a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d107      	bne.n	8007950 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007948:	f043 0304 	orr.w	r3, r3, #4
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800795c:	b004      	add	sp, #16
 800795e:	4770      	bx	lr
 8007960:	803c3800 	.word	0x803c3800

08007964 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	019b      	lsls	r3, r3, #6
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <USB_FlushTxFifo+0x48>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d901      	bls.n	8007990 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e006      	b.n	800799e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b20      	cmp	r3, #32
 800799a:	d0f0      	beq.n	800797e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	00030d40 	.word	0x00030d40

080079b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2210      	movs	r2, #16
 80079c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <USB_FlushRxFifo+0x40>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d901      	bls.n	80079d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e006      	b.n	80079e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d0f0      	beq.n	80079c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	00030d40 	.word	0x00030d40

080079f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a14:	4313      	orrs	r3, r2
 8007a16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b087      	sub	sp, #28
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 0306 	and.w	r3, r3, #6
 8007a3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d102      	bne.n	8007a4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]
 8007a4a:	e00a      	b.n	8007a62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d002      	beq.n	8007a58 <USB_GetDevSpeed+0x32>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b06      	cmp	r3, #6
 8007a56:	d102      	bne.n	8007a5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	75fb      	strb	r3, [r7, #23]
 8007a5c:	e001      	b.n	8007a62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a5e:	230f      	movs	r3, #15
 8007a60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d13a      	bne.n	8007b02 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 030f 	and.w	r3, r3, #15
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	68f9      	ldr	r1, [r7, #12]
 8007aa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d155      	bne.n	8007b70 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	78db      	ldrb	r3, [r3, #3]
 8007ade:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ae0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	059b      	lsls	r3, r3, #22
 8007ae6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	e036      	b.n	8007b70 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b08:	69da      	ldr	r2, [r3, #28]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	2101      	movs	r1, #1
 8007b14:	fa01 f303 	lsl.w	r3, r1, r3
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b20:	4313      	orrs	r3, r2
 8007b22:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d11a      	bne.n	8007b70 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b56:	430b      	orrs	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d161      	bne.n	8007c60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb2:	d11f      	bne.n	8007bf4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	0151      	lsls	r1, r2, #5
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	440a      	add	r2, r1
 8007bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	f003 030f 	and.w	r3, r3, #15
 8007c04:	2101      	movs	r1, #1
 8007c06:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	43db      	mvns	r3, r3
 8007c0e:	68f9      	ldr	r1, [r7, #12]
 8007c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c14:	4013      	ands	r3, r2
 8007c16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	2101      	movs	r1, #1
 8007c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	43db      	mvns	r3, r3
 8007c32:	68f9      	ldr	r1, [r7, #12]
 8007c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c38:	4013      	ands	r3, r2
 8007c3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	0159      	lsls	r1, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	440b      	add	r3, r1
 8007c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c56:	4619      	mov	r1, r3
 8007c58:	4b35      	ldr	r3, [pc, #212]	; (8007d30 <USB_DeactivateEndpoint+0x1b0>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	600b      	str	r3, [r1, #0]
 8007c5e:	e060      	b.n	8007d22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c76:	d11f      	bne.n	8007cb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	2101      	movs	r1, #1
 8007cca:	fa01 f303 	lsl.w	r3, r1, r3
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd8:	4013      	ands	r3, r2
 8007cda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	2101      	movs	r1, #1
 8007cee:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf2:	041b      	lsls	r3, r3, #16
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	0159      	lsls	r1, r3, #5
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	440b      	add	r3, r1
 8007d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <USB_DeactivateEndpoint+0x1b4>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	ec337800 	.word	0xec337800
 8007d34:	eff37800 	.word	0xeff37800

08007d38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	f040 815c 	bne.w	8008012 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d132      	bne.n	8007dc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	69fa      	ldr	r2, [r7, #28]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	0151      	lsls	r1, r2, #5
 8007d98:	69fa      	ldr	r2, [r7, #28]
 8007d9a:	440a      	add	r2, r1
 8007d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc0:	0cdb      	lsrs	r3, r3, #19
 8007dc2:	04db      	lsls	r3, r3, #19
 8007dc4:	6113      	str	r3, [r2, #16]
 8007dc6:	e074      	b.n	8007eb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de2:	0cdb      	lsrs	r3, r3, #19
 8007de4:	04db      	lsls	r3, r3, #19
 8007de6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	6959      	ldr	r1, [r3, #20]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	440b      	add	r3, r1
 8007e24:	1e59      	subs	r1, r3, #1
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e2e:	04d9      	lsls	r1, r3, #19
 8007e30:	4b9d      	ldr	r3, [pc, #628]	; (80080a8 <USB_EPStartXfer+0x370>)
 8007e32:	400b      	ands	r3, r1
 8007e34:	69b9      	ldr	r1, [r7, #24]
 8007e36:	0148      	lsls	r0, r1, #5
 8007e38:	69f9      	ldr	r1, [r7, #28]
 8007e3a:	4401      	add	r1, r0
 8007e3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e40:	4313      	orrs	r3, r2
 8007e42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	691a      	ldr	r2, [r3, #16]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e5a:	69b9      	ldr	r1, [r7, #24]
 8007e5c:	0148      	lsls	r0, r1, #5
 8007e5e:	69f9      	ldr	r1, [r7, #28]
 8007e60:	4401      	add	r1, r0
 8007e62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e66:	4313      	orrs	r3, r2
 8007e68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	78db      	ldrb	r3, [r3, #3]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d11f      	bne.n	8007eb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	0151      	lsls	r1, r2, #5
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	440a      	add	r2, r1
 8007e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007e90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	0151      	lsls	r1, r2, #5
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	440a      	add	r2, r1
 8007ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d14b      	bne.n	8007f50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d009      	beq.n	8007ed4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	78db      	ldrb	r3, [r3, #3]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d128      	bne.n	8007f2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d110      	bne.n	8007f0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	e00f      	b.n	8007f2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e12f      	b.n	80081b0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	78db      	ldrb	r3, [r3, #3]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d015      	beq.n	8007fa4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8117 	beq.w	80081b0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	f003 030f 	and.w	r3, r3, #15
 8007f92:	2101      	movs	r1, #1
 8007f94:	fa01 f303 	lsl.w	r3, r1, r3
 8007f98:	69f9      	ldr	r1, [r7, #28]
 8007f9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	634b      	str	r3, [r1, #52]	; 0x34
 8007fa2:	e105      	b.n	80081b0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d110      	bne.n	8007fd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	0151      	lsls	r1, r2, #5
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	440a      	add	r2, r1
 8007fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e00f      	b.n	8007ff6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ff4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	68d9      	ldr	r1, [r3, #12]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	781a      	ldrb	r2, [r3, #0]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	b298      	uxth	r0, r3
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4603      	mov	r3, r0
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fa2b 	bl	8008466 <USB_WritePacket>
 8008010:	e0ce      	b.n	80081b0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	69fa      	ldr	r2, [r7, #28]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	0cdb      	lsrs	r3, r3, #19
 800802e:	04db      	lsls	r3, r3, #19
 8008030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008050:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008054:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d126      	bne.n	80080ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806a:	691a      	ldr	r2, [r3, #16]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008074:	69b9      	ldr	r1, [r7, #24]
 8008076:	0148      	lsls	r0, r1, #5
 8008078:	69f9      	ldr	r1, [r7, #28]
 800807a:	4401      	add	r1, r0
 800807c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008080:	4313      	orrs	r3, r2
 8008082:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800809e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080a2:	6113      	str	r3, [r2, #16]
 80080a4:	e036      	b.n	8008114 <USB_EPStartXfer+0x3dc>
 80080a6:	bf00      	nop
 80080a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	4413      	add	r3, r2
 80080b6:	1e5a      	subs	r2, r3, #1
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	8afb      	ldrh	r3, [r7, #22]
 80080d2:	04d9      	lsls	r1, r3, #19
 80080d4:	4b39      	ldr	r3, [pc, #228]	; (80081bc <USB_EPStartXfer+0x484>)
 80080d6:	400b      	ands	r3, r1
 80080d8:	69b9      	ldr	r1, [r7, #24]
 80080da:	0148      	lsls	r0, r1, #5
 80080dc:	69f9      	ldr	r1, [r7, #28]
 80080de:	4401      	add	r1, r0
 80080e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080e4:	4313      	orrs	r3, r2
 80080e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	8af9      	ldrh	r1, [r7, #22]
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008104:	69b9      	ldr	r1, [r7, #24]
 8008106:	0148      	lsls	r0, r1, #5
 8008108:	69f9      	ldr	r1, [r7, #28]
 800810a:	4401      	add	r1, r0
 800810c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008110:	4313      	orrs	r3, r2
 8008112:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d10d      	bne.n	8008136 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d009      	beq.n	8008136 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	68d9      	ldr	r1, [r3, #12]
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008132:	460a      	mov	r2, r1
 8008134:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	78db      	ldrb	r3, [r3, #3]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d128      	bne.n	8008190 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	2b00      	cmp	r3, #0
 800814c:	d110      	bne.n	8008170 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008168:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	e00f      	b.n	8008190 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	0151      	lsls	r1, r2, #5
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	440a      	add	r2, r1
 8008186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800818a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800818e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	69fa      	ldr	r2, [r7, #28]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	1ff80000 	.word	0x1ff80000

080081c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	f040 80cd 	bne.w	800837c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d132      	bne.n	8008250 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	015a      	lsls	r2, r3, #5
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	4413      	add	r3, r2
 80081f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	0151      	lsls	r1, r2, #5
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	440a      	add	r2, r1
 8008200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008204:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008208:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800820c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800822c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008248:	0cdb      	lsrs	r3, r3, #19
 800824a:	04db      	lsls	r3, r3, #19
 800824c:	6113      	str	r3, [r2, #16]
 800824e:	e04e      	b.n	80082ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826a:	0cdb      	lsrs	r3, r3, #19
 800826c:	04db      	lsls	r3, r3, #19
 800826e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	440a      	add	r2, r1
 8008286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800828e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008292:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	695a      	ldr	r2, [r3, #20]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	429a      	cmp	r2, r3
 800829e:	d903      	bls.n	80082a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	015a      	lsls	r2, r3, #5
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	4413      	add	r3, r2
 80082d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082de:	6939      	ldr	r1, [r7, #16]
 80082e0:	0148      	lsls	r0, r1, #5
 80082e2:	6979      	ldr	r1, [r7, #20]
 80082e4:	4401      	add	r1, r0
 80082e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80082ea:	4313      	orrs	r3, r2
 80082ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d11e      	bne.n	8008332 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d009      	beq.n	8008310 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	461a      	mov	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	440a      	add	r2, r1
 8008326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800832a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	e092      	b.n	8008458 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	440a      	add	r2, r1
 8008348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800834c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008350:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d07e      	beq.n	8008458 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	2101      	movs	r1, #1
 800836c:	fa01 f303 	lsl.w	r3, r1, r3
 8008370:	6979      	ldr	r1, [r7, #20]
 8008372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008376:	4313      	orrs	r3, r2
 8008378:	634b      	str	r3, [r1, #52]	; 0x34
 800837a:	e06d      	b.n	8008458 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008396:	0cdb      	lsrs	r3, r3, #19
 8008398:	04db      	lsls	r3, r3, #19
 800839a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083be:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	689a      	ldr	r2, [r3, #8]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083fc:	691a      	ldr	r2, [r3, #16]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008406:	6939      	ldr	r1, [r7, #16]
 8008408:	0148      	lsls	r0, r1, #5
 800840a:	6979      	ldr	r1, [r7, #20]
 800840c:	4401      	add	r1, r0
 800840e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008412:	4313      	orrs	r3, r2
 8008414:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d10d      	bne.n	8008438 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	68d9      	ldr	r1, [r3, #12]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	460a      	mov	r2, r1
 8008436:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008466:	b480      	push	{r7}
 8008468:	b089      	sub	sp, #36	; 0x24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	4611      	mov	r1, r2
 8008472:	461a      	mov	r2, r3
 8008474:	460b      	mov	r3, r1
 8008476:	71fb      	strb	r3, [r7, #7]
 8008478:	4613      	mov	r3, r2
 800847a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008484:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11a      	bne.n	80084c2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800848c:	88bb      	ldrh	r3, [r7, #4]
 800848e:	3303      	adds	r3, #3
 8008490:	089b      	lsrs	r3, r3, #2
 8008492:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e00f      	b.n	80084ba <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	031a      	lsls	r2, r3, #12
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a6:	461a      	mov	r2, r3
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6013      	str	r3, [r2, #0]
      pSrc++;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	3304      	adds	r3, #4
 80084b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d3eb      	bcc.n	800849a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3724      	adds	r7, #36	; 0x24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	; 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	3303      	adds	r3, #3
 80084ea:	089b      	lsrs	r3, r3, #2
 80084ec:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80084ee:	2300      	movs	r3, #0
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e00b      	b.n	800850c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	3304      	adds	r3, #4
 8008504:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3301      	adds	r3, #1
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	429a      	cmp	r2, r3
 8008512:	d3ef      	bcc.n	80084f4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008514:	69fb      	ldr	r3, [r7, #28]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3724      	adds	r7, #36	; 0x24
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d12c      	bne.n	8008598 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	db12      	blt.n	8008576 <USB_EPSetStall+0x54>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00f      	beq.n	8008576 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008570:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008574:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	440a      	add	r2, r1
 800858c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	e02b      	b.n	80085f0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	db12      	blt.n	80085d0 <USB_EPSetStall+0xae>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00f      	beq.n	80085d0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085ce:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d128      	bne.n	800866c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4413      	add	r3, r2
 8008622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	440a      	add	r2, r1
 8008630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	78db      	ldrb	r3, [r3, #3]
 800863e:	2b03      	cmp	r3, #3
 8008640:	d003      	beq.n	800864a <USB_EPClearStall+0x4c>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	78db      	ldrb	r3, [r3, #3]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d138      	bne.n	80086bc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	0151      	lsls	r1, r2, #5
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	440a      	add	r2, r1
 8008660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	e027      	b.n	80086bc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	0151      	lsls	r1, r2, #5
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	440a      	add	r2, r1
 8008682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800868a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	78db      	ldrb	r3, [r3, #3]
 8008690:	2b03      	cmp	r3, #3
 8008692:	d003      	beq.n	800869c <USB_EPClearStall+0x9e>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	78db      	ldrb	r3, [r3, #3]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d10f      	bne.n	80086bc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ba:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	460b      	mov	r3, r1
 80086d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086ec:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80086fe:	68f9      	ldr	r1, [r7, #12]
 8008700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008704:	4313      	orrs	r3, r2
 8008706:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008730:	f023 0303 	bic.w	r3, r3, #3
 8008734:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008744:	f023 0302 	bic.w	r3, r3, #2
 8008748:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008786:	f043 0302 	orr.w	r3, r3, #2
 800878a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4013      	ands	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087b2:	68fb      	ldr	r3, [r7, #12]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	4013      	ands	r3, r2
 80087e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	0c1b      	lsrs	r3, r3, #16
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	4013      	ands	r3, r2
 8008816:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	b29b      	uxth	r3, r3
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	4013      	ands	r3, r2
 8008854:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008856:	68bb      	ldr	r3, [r7, #8]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008886:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	fa22 f303 	lsr.w	r3, r2, r3
 8008894:	01db      	lsls	r3, r3, #7
 8008896:	b2db      	uxtb	r3, r3
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4013      	ands	r3, r2
 80088b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088b2:	68bb      	ldr	r3, [r7, #8]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f003 0301 	and.w	r3, r3, #1
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80088fa:	f023 0307 	bic.w	r3, r3, #7
 80088fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008912:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
	...

08008924 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	460b      	mov	r3, r1
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	333c      	adds	r3, #60	; 0x3c
 800893a:	3304      	adds	r3, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	4a26      	ldr	r2, [pc, #152]	; (80089dc <USB_EP0_OutStart+0xb8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d90a      	bls.n	800895e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008958:	d101      	bne.n	800895e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	e037      	b.n	80089ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008964:	461a      	mov	r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008978:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800897c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800898c:	f043 0318 	orr.w	r3, r3, #24
 8008990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80089a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089a6:	7afb      	ldrb	r3, [r7, #11]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d10f      	bne.n	80089cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80089ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	371c      	adds	r7, #28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	4f54300a 	.word	0x4f54300a

080089e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4a13      	ldr	r2, [pc, #76]	; (8008a44 <USB_CoreReset+0x64>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d901      	bls.n	80089fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e01b      	b.n	8008a36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	daf2      	bge.n	80089ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f043 0201 	orr.w	r2, r3, #1
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <USB_CoreReset+0x64>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e006      	b.n	8008a36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d0f0      	beq.n	8008a16 <USB_CoreReset+0x36>

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	00030d40 	.word	0x00030d40

08008a48 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */

static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008a54:	2010      	movs	r0, #16
 8008a56:	f004 fd8d 	bl	800d574 <USBD_static_malloc>
 8008a5a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d105      	bne.n	8008a6e <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e033      	b.n	8008ad6 <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7c1b      	ldrb	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2207      	movs	r2, #7
 8008a82:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2207      	movs	r2, #7
 8008a88:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8008a8c:	e006      	b.n	8008a9c <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2204      	movs	r2, #4
 8008a92:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2204      	movs	r2, #4
 8008a98:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	2181      	movs	r1, #129	; 0x81
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f004 fc07 	bl	800d2b6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8008aae:	2306      	movs	r3, #6
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	2102      	movs	r1, #2
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f004 fbfe 	bl	800d2b6 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8008ac2:	2306      	movs	r3, #6
 8008ac4:	4a06      	ldr	r2, [pc, #24]	; (8008ae0 <USBD_HID_Init+0x98>)
 8008ac6:	2102      	movs	r1, #2
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f004 fce3 	bl	800d494 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200001c8 	.word	0x200001c8

08008ae4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008af0:	2181      	movs	r1, #129	; 0x81
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f004 fc05 	bl	800d302 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8008b04:	2102      	movs	r1, #2
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f004 fbfb 	bl	800d302 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f004 fd2f 	bl	800d590 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b54:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8008b64:	4b95      	ldr	r3, [pc, #596]	; (8008dbc <USBD_HID_Setup+0x278>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e122      	b.n	8008db4 <USBD_HID_Setup+0x270>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	f000 80cd 	beq.w	8008d16 <USBD_HID_Setup+0x1d2>
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	f200 8110 	bhi.w	8008da2 <USBD_HID_Setup+0x25e>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d045      	beq.n	8008c12 <USBD_HID_Setup+0xce>
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	f040 810b 	bne.w	8008da2 <USBD_HID_Setup+0x25e>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	3b02      	subs	r3, #2
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	d835      	bhi.n	8008c02 <USBD_HID_Setup+0xbe>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <USBD_HID_Setup+0x58>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bf3 	.word	0x08008bf3
 8008ba0:	08008bd3 	.word	0x08008bd3
 8008ba4:	08008c03 	.word	0x08008c03
 8008ba8:	08008c03 	.word	0x08008c03
 8008bac:	08008c03 	.word	0x08008c03
 8008bb0:	08008c03 	.word	0x08008c03
 8008bb4:	08008c03 	.word	0x08008c03
 8008bb8:	08008c03 	.word	0x08008c03
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008bc5 	.word	0x08008bc5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	885b      	ldrh	r3, [r3, #2]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	461a      	mov	r2, r3
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	601a      	str	r2, [r3, #0]
          break;
 8008bd0:	e01e      	b.n	8008c10 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 fa84 	bl	800a0e6 <USBD_CtlSendData>
          break;
 8008bde:	e017      	b.n	8008c10 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	885b      	ldrh	r3, [r3, #2]
 8008be4:	0a1b      	lsrs	r3, r3, #8
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	605a      	str	r2, [r3, #4]
          break;
 8008bf0:	e00e      	b.n	8008c10 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f001 fa73 	bl	800a0e6 <USBD_CtlSendData>
          break;
 8008c00:	e006      	b.n	8008c10 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 f9fd 	bl	800a004 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	77fb      	strb	r3, [r7, #31]
          break;
 8008c0e:	bf00      	nop
      }
      break;
 8008c10:	e0cf      	b.n	8008db2 <USBD_HID_Setup+0x26e>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	785b      	ldrb	r3, [r3, #1]
 8008c16:	2b0b      	cmp	r3, #11
 8008c18:	d874      	bhi.n	8008d04 <USBD_HID_Setup+0x1c0>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <USBD_HID_Setup+0xdc>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c51 	.word	0x08008c51
 8008c24:	08008d13 	.word	0x08008d13
 8008c28:	08008d05 	.word	0x08008d05
 8008c2c:	08008d05 	.word	0x08008d05
 8008c30:	08008d05 	.word	0x08008d05
 8008c34:	08008d05 	.word	0x08008d05
 8008c38:	08008c7b 	.word	0x08008c7b
 8008c3c:	08008d05 	.word	0x08008d05
 8008c40:	08008d05 	.word	0x08008d05
 8008c44:	08008d05 	.word	0x08008d05
 8008c48:	08008cb3 	.word	0x08008cb3
 8008c4c:	08008cdd 	.word	0x08008cdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d107      	bne.n	8008c6c <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c5c:	f107 030e 	add.w	r3, r7, #14
 8008c60:	2202      	movs	r2, #2
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fa3e 	bl	800a0e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c6a:	e053      	b.n	8008d14 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 f9c8 	bl	800a004 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	77fb      	strb	r3, [r7, #31]
          break;
 8008c78:	e04c      	b.n	8008d14 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	885b      	ldrh	r3, [r3, #2]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	2b21      	cmp	r3, #33	; 0x21
 8008c84:	d10e      	bne.n	8008ca4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8008c86:	4b4e      	ldr	r3, [pc, #312]	; (8008dc0 <USBD_HID_Setup+0x27c>)
 8008c88:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b12      	cmp	r3, #18
 8008c90:	bf28      	it	cs
 8008c92:	2312      	movcs	r3, #18
 8008c94:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008c96:	8afb      	ldrh	r3, [r7, #22]
 8008c98:	461a      	mov	r2, r3
 8008c9a:	6939      	ldr	r1, [r7, #16]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 fa22 	bl	800a0e6 <USBD_CtlSendData>
          break;
 8008ca2:	e037      	b.n	8008d14 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 f9ac 	bl	800a004 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cac:	2303      	movs	r3, #3
 8008cae:	77fb      	strb	r3, [r7, #31]
            break;
 8008cb0:	e030      	b.n	8008d14 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d107      	bne.n	8008cce <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fa0d 	bl	800a0e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ccc:	e022      	b.n	8008d14 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f997 	bl	800a004 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	77fb      	strb	r3, [r7, #31]
          break;
 8008cda:	e01b      	b.n	8008d14 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d106      	bne.n	8008cf6 <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	885b      	ldrh	r3, [r3, #2]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cf4:	e00e      	b.n	8008d14 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f983 	bl	800a004 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	77fb      	strb	r3, [r7, #31]
          break;
 8008d02:	e007      	b.n	8008d14 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f97c 	bl	800a004 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	77fb      	strb	r3, [r7, #31]
          break;
 8008d10:	e000      	b.n	8008d14 <USBD_HID_Setup+0x1d0>
          break;
 8008d12:	bf00      	nop
      }
      break;
 8008d14:	e04d      	b.n	8008db2 <USBD_HID_Setup+0x26e>
    /*This is for the og xbox, this is the custom vendor request */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8008d16:	4b2b      	ldr	r3, [pc, #172]	; (8008dc4 <USBD_HID_Setup+0x280>)
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <USBD_HID_Setup+0x280>)
 8008d20:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	785b      	ldrb	r3, [r3, #1]
 8008d26:	2b06      	cmp	r3, #6
 8008d28:	d10f      	bne.n	8008d4a <USBD_HID_Setup+0x206>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	885b      	ldrh	r3, [r3, #2]
 8008d2e:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008d32:	d10a      	bne.n	8008d4a <USBD_HID_Setup+0x206>
    		len = 16;
 8008d34:	2310      	movs	r3, #16
 8008d36:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8008d38:	4b21      	ldr	r3, [pc, #132]	; (8008dc0 <USBD_HID_Setup+0x27c>)
 8008d3a:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008d3c:	8afb      	ldrh	r3, [r7, #22]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6939      	ldr	r1, [r7, #16]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 f9cf 	bl	800a0e6 <USBD_CtlSendData>
 8008d48:	e02a      	b.n	8008da0 <USBD_HID_Setup+0x25c>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d10f      	bne.n	8008d72 <USBD_HID_Setup+0x22e>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	885b      	ldrh	r3, [r3, #2]
 8008d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d5a:	d10a      	bne.n	8008d72 <USBD_HID_Setup+0x22e>
    		len = 20;
 8008d5c:	2314      	movs	r3, #20
 8008d5e:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008d60:	4b19      	ldr	r3, [pc, #100]	; (8008dc8 <USBD_HID_Setup+0x284>)
 8008d62:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008d64:	8afb      	ldrh	r3, [r7, #22]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6939      	ldr	r1, [r7, #16]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 f9bb 	bl	800a0e6 <USBD_CtlSendData>
 8008d70:	e016      	b.n	8008da0 <USBD_HID_Setup+0x25c>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d11a      	bne.n	8008db0 <USBD_HID_Setup+0x26c>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d82:	d115      	bne.n	8008db0 <USBD_HID_Setup+0x26c>
    		rumble_brequest_sent = 1;
 8008d84:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <USBD_HID_Setup+0x288>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8008d8a:	2306      	movs	r3, #6
 8008d8c:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008d8e:	4b10      	ldr	r3, [pc, #64]	; (8008dd0 <USBD_HID_Setup+0x28c>)
 8008d90:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008d92:	8afb      	ldrh	r3, [r7, #22]
 8008d94:	461a      	mov	r2, r3
 8008d96:	6939      	ldr	r1, [r7, #16]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f9a4 	bl	800a0e6 <USBD_CtlSendData>
    	}
    break;
 8008d9e:	e007      	b.n	8008db0 <USBD_HID_Setup+0x26c>
 8008da0:	e006      	b.n	8008db0 <USBD_HID_Setup+0x26c>


    default:
      USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 f92d 	bl	800a004 <USBD_CtlError>
      ret = USBD_FAIL;
 8008daa:	2303      	movs	r3, #3
 8008dac:	77fb      	strb	r3, [r7, #31]
      break;
 8008dae:	e000      	b.n	8008db2 <USBD_HID_Setup+0x26e>
    break;
 8008db0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008db2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3720      	adds	r7, #32
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000aba 	.word	0x20000aba
 8008dc0:	20000090 	.word	0x20000090
 8008dc4:	20000ab8 	.word	0x20000ab8
 8008dc8:	200000ac 	.word	0x200000ac
 8008dcc:	20000abb 	.word	0x20000abb
 8008dd0:	200000c0 	.word	0x200000c0

08008dd4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008de8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e013      	b.n	8008e1c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d10c      	bne.n	8008e1a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	7b1b      	ldrb	r3, [r3, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d108      	bne.n	8008e1a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	2181      	movs	r1, #129	; 0x81
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f004 fb1c 	bl	800d452 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3718      	adds	r7, #24
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008e32:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	20000050 	.word	0x20000050

08008e44 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008e4c:	bf00      	nop
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
	...

08008e5c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	; (8008e78 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	20000070 	.word	0x20000070

08008e7c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e8e:	2200      	movs	r2, #0
 8008e90:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <USBD_HID_DataOut+0x30>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <USBD_HID_DataOut+0x30>)
 8008eb6:	701a      	strb	r2, [r3, #0]
	//rx_buf[3]=5;
    //HAL_PCD_EP_Receive(&hUsbDeviceFS.pData, HID_EPOUT_ADDR, (uint8_t *)rx_buf, HID_EPOUT_SIZE);
    USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*)(rx_buf), HID_EPOUT_SIZE);
 8008eb8:	2306      	movs	r3, #6
 8008eba:	4a06      	ldr	r2, [pc, #24]	; (8008ed4 <USBD_HID_DataOut+0x34>)
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f004 fae8 	bl	800d494 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20000ab9 	.word	0x20000ab9
 8008ed4:	200001c8 	.word	0x200001c8

08008ed8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	220a      	movs	r2, #10
 8008ee4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008ee6:	4b03      	ldr	r3, [pc, #12]	; (8008ef4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	200000a0 	.word	0x200000a0

08008ef8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e01f      	b.n	8008f50 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	79fa      	ldrb	r2, [r7, #7]
 8008f42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f004 f94f 	bl	800d1e8 <USBD_LL_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e016      	b.n	8008f9e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00b      	beq.n	8008f9c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	f107 020e 	add.w	r2, r7, #14
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
 8008f94:	4602      	mov	r2, r0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f004 f966 	bl	800d280 <USBD_LL_Start>
 8008fb4:	4603      	mov	r3, r0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b083      	sub	sp, #12
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	4798      	blx	r3
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d007      	beq.n	8009032 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	78fa      	ldrb	r2, [r7, #3]
 800902c:	4611      	mov	r1, r2
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
  }

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ff9e 	bl	8009f90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009062:	461a      	mov	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009070:	f003 031f 	and.w	r3, r3, #31
 8009074:	2b02      	cmp	r3, #2
 8009076:	d01a      	beq.n	80090ae <USBD_LL_SetupStage+0x72>
 8009078:	2b02      	cmp	r3, #2
 800907a:	d822      	bhi.n	80090c2 <USBD_LL_SetupStage+0x86>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <USBD_LL_SetupStage+0x4a>
 8009080:	2b01      	cmp	r3, #1
 8009082:	d00a      	beq.n	800909a <USBD_LL_SetupStage+0x5e>
 8009084:	e01d      	b.n	80090c2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa62 	bl	8009558 <USBD_StdDevReq>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	e020      	b.n	80090dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fad4 	bl	8009650 <USBD_StdItfReq>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
      break;
 80090ac:	e016      	b.n	80090dc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb13 	bl	80096e2 <USBD_StdEPReq>
 80090bc:	4603      	mov	r3, r0
 80090be:	73fb      	strb	r3, [r7, #15]
      break;
 80090c0:	e00c      	b.n	80090dc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f004 f935 	bl	800d340 <USBD_LL_StallEP>
 80090d6:	4603      	mov	r3, r0
 80090d8:	73fb      	strb	r3, [r7, #15]
      break;
 80090da:	bf00      	nop
  }

  return ret;
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b086      	sub	sp, #24
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	460b      	mov	r3, r1
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d138      	bne.n	800916c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009100:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009108:	2b03      	cmp	r3, #3
 800910a:	d14a      	bne.n	80091a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	429a      	cmp	r2, r3
 8009116:	d913      	bls.n	8009140 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	1ad2      	subs	r2, r2, r3
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	68da      	ldr	r2, [r3, #12]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	4293      	cmp	r3, r2
 8009130:	bf28      	it	cs
 8009132:	4613      	movcs	r3, r2
 8009134:	461a      	mov	r2, r3
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f001 f800 	bl	800a13e <USBD_CtlContinueRx>
 800913e:	e030      	b.n	80091a2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b03      	cmp	r3, #3
 800914a:	d10b      	bne.n	8009164 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fffb 	bl	800a160 <USBD_CtlSendStatus>
 800916a:	e01a      	b.n	80091a2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b03      	cmp	r3, #3
 8009176:	d114      	bne.n	80091a2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00e      	beq.n	80091a2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	7afa      	ldrb	r2, [r7, #11]
 800918e:	4611      	mov	r1, r2
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	4798      	blx	r3
 8009194:	4603      	mov	r3, r0
 8009196:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
 80091a0:	e000      	b.n	80091a4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	460b      	mov	r3, r1
 80091b6:	607a      	str	r2, [r7, #4]
 80091b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d16b      	bne.n	8009298 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3314      	adds	r3, #20
 80091c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d156      	bne.n	800927e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d914      	bls.n	8009206 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	1ad2      	subs	r2, r2, r3
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	461a      	mov	r2, r3
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 ff92 	bl	800a11c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091f8:	2300      	movs	r3, #0
 80091fa:	2200      	movs	r2, #0
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f004 f948 	bl	800d494 <USBD_LL_PrepareReceive>
 8009204:	e03b      	b.n	800927e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	429a      	cmp	r2, r3
 8009210:	d11c      	bne.n	800924c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800921a:	429a      	cmp	r2, r3
 800921c:	d316      	bcc.n	800924c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009228:	429a      	cmp	r2, r3
 800922a:	d20f      	bcs.n	800924c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800922c:	2200      	movs	r2, #0
 800922e:	2100      	movs	r1, #0
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 ff73 	bl	800a11c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800923e:	2300      	movs	r3, #0
 8009240:	2200      	movs	r2, #0
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f004 f925 	bl	800d494 <USBD_LL_PrepareReceive>
 800924a:	e018      	b.n	800927e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b03      	cmp	r3, #3
 8009256:	d10b      	bne.n	8009270 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009270:	2180      	movs	r1, #128	; 0x80
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f004 f864 	bl	800d340 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 ff84 	bl	800a186 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009284:	2b01      	cmp	r3, #1
 8009286:	d122      	bne.n	80092ce <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f7ff fe98 	bl	8008fbe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009296:	e01a      	b.n	80092ce <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d114      	bne.n	80092ce <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00e      	beq.n	80092ce <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	7afa      	ldrb	r2, [r7, #11]
 80092ba:	4611      	mov	r1, r2
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	4798      	blx	r3
 80092c0:	4603      	mov	r3, r0
 80092c2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	e000      	b.n	80092d0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	e02f      	b.n	800936c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00f      	beq.n	8009336 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d009      	beq.n	8009336 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6852      	ldr	r2, [r2, #4]
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	4611      	mov	r1, r2
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009336:	2340      	movs	r3, #64	; 0x40
 8009338:	2200      	movs	r2, #0
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f003 ffba 	bl	800d2b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2240      	movs	r2, #64	; 0x40
 800934e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009352:	2340      	movs	r3, #64	; 0x40
 8009354:	2200      	movs	r2, #0
 8009356:	2180      	movs	r1, #128	; 0x80
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f003 ffac 	bl	800d2b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2240      	movs	r2, #64	; 0x40
 8009368:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2204      	movs	r2, #4
 80093ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b04      	cmp	r3, #4
 80093d2:	d106      	bne.n	80093e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009402:	2303      	movs	r3, #3
 8009404:	e012      	b.n	800942c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b03      	cmp	r3, #3
 8009410:	d10b      	bne.n	800942a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d005      	beq.n	800942a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800944a:	2303      	movs	r3, #3
 800944c:	e014      	b.n	8009478 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b03      	cmp	r3, #3
 8009458:	d10d      	bne.n	8009476 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	4611      	mov	r1, r2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009496:	2303      	movs	r3, #3
 8009498:	e014      	b.n	80094c4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d10d      	bne.n	80094c2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	4611      	mov	r1, r2
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d009      	beq.n	8009510 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6852      	ldr	r2, [r2, #4]
 8009508:	b2d2      	uxtb	r2, r2
 800950a:	4611      	mov	r1, r2
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
  }

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800951a:	b480      	push	{r7}
 800951c:	b087      	sub	sp, #28
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	3301      	adds	r3, #1
 8009530:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009538:	8a3b      	ldrh	r3, [r7, #16]
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	b21a      	sxth	r2, r3
 800953e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009542:	4313      	orrs	r3, r2
 8009544:	b21b      	sxth	r3, r3
 8009546:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009548:	89fb      	ldrh	r3, [r7, #14]
}
 800954a:	4618      	mov	r0, r3
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009580:	2b40      	cmp	r3, #64	; 0x40
 8009582:	d005      	beq.n	8009590 <USBD_StdDevReq+0x38>
 8009584:	2b40      	cmp	r3, #64	; 0x40
 8009586:	d854      	bhi.n	8009632 <USBD_StdDevReq+0xda>
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_StdDevReq+0x4c>
 800958c:	2b20      	cmp	r3, #32
 800958e:	d150      	bne.n	8009632 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]
		  break;
 80095a2:	e04e      	b.n	8009642 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b09      	cmp	r3, #9
 80095aa:	d83c      	bhi.n	8009626 <USBD_StdDevReq+0xce>
 80095ac:	a201      	add	r2, pc, #4	; (adr r2, 80095b4 <USBD_StdDevReq+0x5c>)
 80095ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b2:	bf00      	nop
 80095b4:	08009609 	.word	0x08009609
 80095b8:	0800961d 	.word	0x0800961d
 80095bc:	08009627 	.word	0x08009627
 80095c0:	08009613 	.word	0x08009613
 80095c4:	08009627 	.word	0x08009627
 80095c8:	080095e7 	.word	0x080095e7
 80095cc:	080095dd 	.word	0x080095dd
 80095d0:	08009627 	.word	0x08009627
 80095d4:	080095ff 	.word	0x080095ff
 80095d8:	080095f1 	.word	0x080095f1
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9e2 	bl	80099a8 <USBD_GetDescriptor>
			  break;
 80095e4:	e024      	b.n	8009630 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fb47 	bl	8009c7c <USBD_SetAddress>
			  break;
 80095ee:	e01f      	b.n	8009630 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb86 	bl	8009d04 <USBD_SetConfig>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]
			  break;
 80095fc:	e018      	b.n	8009630 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fc25 	bl	8009e50 <USBD_GetConfig>
			  break;
 8009606:	e013      	b.n	8009630 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8009608:	6839      	ldr	r1, [r7, #0]
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fc56 	bl	8009ebc <USBD_GetStatus>
			  break;
 8009610:	e00e      	b.n	8009630 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fc85 	bl	8009f24 <USBD_SetFeature>
			  break;
 800961a:	e009      	b.n	8009630 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fc94 	bl	8009f4c <USBD_ClrFeature>
			  break;
 8009624:	e004      	b.n	8009630 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fceb 	bl	800a004 <USBD_CtlError>
			  break;
 800962e:	bf00      	nop
		  }
		  break;
 8009630:	e007      	b.n	8009642 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 8009632:	4b06      	ldr	r3, [pc, #24]	; (800964c <USBD_StdDevReq+0xf4>)
 8009634:	2201      	movs	r2, #1
 8009636:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fce2 	bl	800a004 <USBD_CtlError>
		  break;
 8009640:	bf00      	nop
	  }

  return ret;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20000abc 	.word	0x20000abc

08009650 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009666:	2b40      	cmp	r3, #64	; 0x40
 8009668:	d005      	beq.n	8009676 <USBD_StdItfReq+0x26>
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d82f      	bhi.n	80096ce <USBD_StdItfReq+0x7e>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <USBD_StdItfReq+0x26>
 8009672:	2b20      	cmp	r3, #32
 8009674:	d12b      	bne.n	80096ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800967c:	b2db      	uxtb	r3, r3
 800967e:	3b01      	subs	r3, #1
 8009680:	2b02      	cmp	r3, #2
 8009682:	d81d      	bhi.n	80096c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	889b      	ldrh	r3, [r3, #4]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b01      	cmp	r3, #1
 800968c:	d813      	bhi.n	80096b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	4798      	blx	r3
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	88db      	ldrh	r3, [r3, #6]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d110      	bne.n	80096ca <USBD_StdItfReq+0x7a>
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10d      	bne.n	80096ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fd56 	bl	800a160 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096b4:	e009      	b.n	80096ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fca3 	bl	800a004 <USBD_CtlError>
          break;
 80096be:	e004      	b.n	80096ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fc9e 	bl	800a004 <USBD_CtlError>
          break;
 80096c8:	e000      	b.n	80096cc <USBD_StdItfReq+0x7c>
          break;
 80096ca:	bf00      	nop
      }
      break;
 80096cc:	e004      	b.n	80096d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 fc97 	bl	800a004 <USBD_CtlError>
      break;
 80096d6:	bf00      	nop
  }

  return ret;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	889b      	ldrh	r3, [r3, #4]
 80096f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096fe:	2b40      	cmp	r3, #64	; 0x40
 8009700:	d007      	beq.n	8009712 <USBD_StdEPReq+0x30>
 8009702:	2b40      	cmp	r3, #64	; 0x40
 8009704:	f200 8145 	bhi.w	8009992 <USBD_StdEPReq+0x2b0>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00c      	beq.n	8009726 <USBD_StdEPReq+0x44>
 800970c:	2b20      	cmp	r3, #32
 800970e:	f040 8140 	bne.w	8009992 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	4798      	blx	r3
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
      break;
 8009724:	e13a      	b.n	800999c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	2b03      	cmp	r3, #3
 800972c:	d007      	beq.n	800973e <USBD_StdEPReq+0x5c>
 800972e:	2b03      	cmp	r3, #3
 8009730:	f300 8129 	bgt.w	8009986 <USBD_StdEPReq+0x2a4>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d07f      	beq.n	8009838 <USBD_StdEPReq+0x156>
 8009738:	2b01      	cmp	r3, #1
 800973a:	d03c      	beq.n	80097b6 <USBD_StdEPReq+0xd4>
 800973c:	e123      	b.n	8009986 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b02      	cmp	r3, #2
 8009748:	d002      	beq.n	8009750 <USBD_StdEPReq+0x6e>
 800974a:	2b03      	cmp	r3, #3
 800974c:	d016      	beq.n	800977c <USBD_StdEPReq+0x9a>
 800974e:	e02c      	b.n	80097aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00d      	beq.n	8009772 <USBD_StdEPReq+0x90>
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b80      	cmp	r3, #128	; 0x80
 800975a:	d00a      	beq.n	8009772 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f003 fded 	bl	800d340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009766:	2180      	movs	r1, #128	; 0x80
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f003 fde9 	bl	800d340 <USBD_LL_StallEP>
 800976e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009770:	e020      	b.n	80097b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fc45 	bl	800a004 <USBD_CtlError>
              break;
 800977a:	e01b      	b.n	80097b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	885b      	ldrh	r3, [r3, #2]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10e      	bne.n	80097a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <USBD_StdEPReq+0xc0>
 800978a:	7bbb      	ldrb	r3, [r7, #14]
 800978c:	2b80      	cmp	r3, #128	; 0x80
 800978e:	d008      	beq.n	80097a2 <USBD_StdEPReq+0xc0>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d104      	bne.n	80097a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	4619      	mov	r1, r3
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f003 fdcf 	bl	800d340 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fcdc 	bl	800a160 <USBD_CtlSendStatus>

              break;
 80097a8:	e004      	b.n	80097b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fc29 	bl	800a004 <USBD_CtlError>
              break;
 80097b2:	bf00      	nop
          }
          break;
 80097b4:	e0ec      	b.n	8009990 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d002      	beq.n	80097c8 <USBD_StdEPReq+0xe6>
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d016      	beq.n	80097f4 <USBD_StdEPReq+0x112>
 80097c6:	e030      	b.n	800982a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00d      	beq.n	80097ea <USBD_StdEPReq+0x108>
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b80      	cmp	r3, #128	; 0x80
 80097d2:	d00a      	beq.n	80097ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f003 fdb1 	bl	800d340 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80097de:	2180      	movs	r1, #128	; 0x80
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f003 fdad 	bl	800d340 <USBD_LL_StallEP>
 80097e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097e8:	e025      	b.n	8009836 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fc09 	bl	800a004 <USBD_CtlError>
              break;
 80097f2:	e020      	b.n	8009836 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	885b      	ldrh	r3, [r3, #2]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d11b      	bne.n	8009834 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f003 fdb7 	bl	800d37e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fca5 	bl	800a160 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	4798      	blx	r3
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009828:	e004      	b.n	8009834 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fbe9 	bl	800a004 <USBD_CtlError>
              break;
 8009832:	e000      	b.n	8009836 <USBD_StdEPReq+0x154>
              break;
 8009834:	bf00      	nop
          }
          break;
 8009836:	e0ab      	b.n	8009990 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d002      	beq.n	800984a <USBD_StdEPReq+0x168>
 8009844:	2b03      	cmp	r3, #3
 8009846:	d032      	beq.n	80098ae <USBD_StdEPReq+0x1cc>
 8009848:	e097      	b.n	800997a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <USBD_StdEPReq+0x17e>
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	2b80      	cmp	r3, #128	; 0x80
 8009854:	d004      	beq.n	8009860 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fbd3 	bl	800a004 <USBD_CtlError>
                break;
 800985e:	e091      	b.n	8009984 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009864:	2b00      	cmp	r3, #0
 8009866:	da0b      	bge.n	8009880 <USBD_StdEPReq+0x19e>
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800986e:	4613      	mov	r3, r2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	3310      	adds	r3, #16
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	4413      	add	r3, r2
 800987c:	3304      	adds	r3, #4
 800987e:	e00b      	b.n	8009898 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	3304      	adds	r3, #4
 8009898:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2202      	movs	r2, #2
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fc1d 	bl	800a0e6 <USBD_CtlSendData>
              break;
 80098ac:	e06a      	b.n	8009984 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da11      	bge.n	80098da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	f003 020f 	and.w	r2, r3, #15
 80098bc:	6879      	ldr	r1, [r7, #4]
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	3324      	adds	r3, #36	; 0x24
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d117      	bne.n	8009900 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fb96 	bl	800a004 <USBD_CtlError>
                  break;
 80098d8:	e054      	b.n	8009984 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	f003 020f 	and.w	r2, r3, #15
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d104      	bne.n	8009900 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fb83 	bl	800a004 <USBD_CtlError>
                  break;
 80098fe:	e041      	b.n	8009984 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da0b      	bge.n	8009920 <USBD_StdEPReq+0x23e>
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	3310      	adds	r3, #16
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	4413      	add	r3, r2
 800991c:	3304      	adds	r3, #4
 800991e:	e00b      	b.n	8009938 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	4413      	add	r3, r2
 8009936:	3304      	adds	r3, #4
 8009938:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <USBD_StdEPReq+0x264>
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d103      	bne.n	800994e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	e00e      	b.n	800996c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800994e:	7bbb      	ldrb	r3, [r7, #14]
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f003 fd32 	bl	800d3bc <USBD_LL_IsStallEP>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2201      	movs	r2, #1
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e002      	b.n	800996c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2202      	movs	r2, #2
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fbb7 	bl	800a0e6 <USBD_CtlSendData>
              break;
 8009978:	e004      	b.n	8009984 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fb41 	bl	800a004 <USBD_CtlError>
              break;
 8009982:	bf00      	nop
          }
          break;
 8009984:	e004      	b.n	8009990 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fb3b 	bl	800a004 <USBD_CtlError>
          break;
 800998e:	bf00      	nop
      }
      break;
 8009990:	e004      	b.n	800999c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fb35 	bl	800a004 <USBD_CtlError>
      break;
 800999a:	bf00      	nop
  }

  return ret;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
	...

080099a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	3b01      	subs	r3, #1
 80099c8:	2b06      	cmp	r3, #6
 80099ca:	f200 8128 	bhi.w	8009c1e <USBD_GetDescriptor+0x276>
 80099ce:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <USBD_GetDescriptor+0x2c>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	080099f1 	.word	0x080099f1
 80099d8:	08009a09 	.word	0x08009a09
 80099dc:	08009a49 	.word	0x08009a49
 80099e0:	08009c1f 	.word	0x08009c1f
 80099e4:	08009c1f 	.word	0x08009c1f
 80099e8:	08009bbf 	.word	0x08009bbf
 80099ec:	08009beb 	.word	0x08009beb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	7c12      	ldrb	r2, [r2, #16]
 80099fc:	f107 0108 	add.w	r1, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
      break;
 8009a06:	e112      	b.n	8009c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7c1b      	ldrb	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10d      	bne.n	8009a2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	f107 0208 	add.w	r2, r7, #8
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4798      	blx	r3
 8009a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	2202      	movs	r2, #2
 8009a28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a2a:	e100      	b.n	8009c2e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	f107 0208 	add.w	r2, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	2202      	movs	r2, #2
 8009a44:	701a      	strb	r2, [r3, #0]
      break;
 8009a46:	e0f2      	b.n	8009c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	885b      	ldrh	r3, [r3, #2]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	f200 80ac 	bhi.w	8009bac <USBD_GetDescriptor+0x204>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <USBD_GetDescriptor+0xb4>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a75 	.word	0x08009a75
 8009a60:	08009aa9 	.word	0x08009aa9
 8009a64:	08009add 	.word	0x08009add
 8009a68:	08009b11 	.word	0x08009b11
 8009a6c:	08009b45 	.word	0x08009b45
 8009a70:	08009b79 	.word	0x08009b79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7c12      	ldrb	r2, [r2, #16]
 8009a8c:	f107 0108 	add.w	r1, r7, #8
 8009a90:	4610      	mov	r0, r2
 8009a92:	4798      	blx	r3
 8009a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a96:	e091      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fab2 	bl	800a004 <USBD_CtlError>
            err++;
 8009aa0:	7afb      	ldrb	r3, [r7, #11]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa6:	e089      	b.n	8009bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00b      	beq.n	8009acc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	7c12      	ldrb	r2, [r2, #16]
 8009ac0:	f107 0108 	add.w	r1, r7, #8
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	4798      	blx	r3
 8009ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aca:	e077      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa98 	bl	800a004 <USBD_CtlError>
            err++;
 8009ad4:	7afb      	ldrb	r3, [r7, #11]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ada:	e06f      	b.n	8009bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	7c12      	ldrb	r2, [r2, #16]
 8009af4:	f107 0108 	add.w	r1, r7, #8
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
 8009afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afe:	e05d      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fa7e 	bl	800a004 <USBD_CtlError>
            err++;
 8009b08:	7afb      	ldrb	r3, [r7, #11]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0e:	e055      	b.n	8009bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00b      	beq.n	8009b34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	7c12      	ldrb	r2, [r2, #16]
 8009b28:	f107 0108 	add.w	r1, r7, #8
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4798      	blx	r3
 8009b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b32:	e043      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa64 	bl	800a004 <USBD_CtlError>
            err++;
 8009b3c:	7afb      	ldrb	r3, [r7, #11]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	72fb      	strb	r3, [r7, #11]
          break;
 8009b42:	e03b      	b.n	8009bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	7c12      	ldrb	r2, [r2, #16]
 8009b5c:	f107 0108 	add.w	r1, r7, #8
 8009b60:	4610      	mov	r0, r2
 8009b62:	4798      	blx	r3
 8009b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b66:	e029      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fa4a 	bl	800a004 <USBD_CtlError>
            err++;
 8009b70:	7afb      	ldrb	r3, [r7, #11]
 8009b72:	3301      	adds	r3, #1
 8009b74:	72fb      	strb	r3, [r7, #11]
          break;
 8009b76:	e021      	b.n	8009bbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7c12      	ldrb	r2, [r2, #16]
 8009b90:	f107 0108 	add.w	r1, r7, #8
 8009b94:	4610      	mov	r0, r2
 8009b96:	4798      	blx	r3
 8009b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9a:	e00f      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b9c:	6839      	ldr	r1, [r7, #0]
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fa30 	bl	800a004 <USBD_CtlError>
            err++;
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8009baa:	e007      	b.n	8009bbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fa28 	bl	800a004 <USBD_CtlError>
          err++;
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009bba:	bf00      	nop
      }
      break;
 8009bbc:	e037      	b.n	8009c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7c1b      	ldrb	r3, [r3, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d109      	bne.n	8009bda <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f107 0208 	add.w	r2, r7, #8
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4798      	blx	r3
 8009bd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bd8:	e029      	b.n	8009c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fa11 	bl	800a004 <USBD_CtlError>
        err++;
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	3301      	adds	r3, #1
 8009be6:	72fb      	strb	r3, [r7, #11]
      break;
 8009be8:	e021      	b.n	8009c2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7c1b      	ldrb	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d10d      	bne.n	8009c0e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	f107 0208 	add.w	r2, r7, #8
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4798      	blx	r3
 8009c02:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	2207      	movs	r2, #7
 8009c0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c0c:	e00f      	b.n	8009c2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f9f7 	bl	800a004 <USBD_CtlError>
        err++;
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c1c:	e007      	b.n	8009c2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f9ef 	bl	800a004 <USBD_CtlError>
      err++;
 8009c26:	7afb      	ldrb	r3, [r7, #11]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c2c:	bf00      	nop
  }

  if (err != 0U)
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d11e      	bne.n	8009c72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	88db      	ldrh	r3, [r3, #6]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d016      	beq.n	8009c6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009c3c:	893b      	ldrh	r3, [r7, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00e      	beq.n	8009c60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	88da      	ldrh	r2, [r3, #6]
 8009c46:	893b      	ldrh	r3, [r7, #8]
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bf28      	it	cs
 8009c4c:	4613      	movcs	r3, r2
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c52:	893b      	ldrh	r3, [r7, #8]
 8009c54:	461a      	mov	r2, r3
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fa44 	bl	800a0e6 <USBD_CtlSendData>
 8009c5e:	e009      	b.n	8009c74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f9ce 	bl	800a004 <USBD_CtlError>
 8009c68:	e004      	b.n	8009c74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa78 	bl	800a160 <USBD_CtlSendStatus>
 8009c70:	e000      	b.n	8009c74 <USBD_GetDescriptor+0x2cc>
    return;
 8009c72:	bf00      	nop
  }
}
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop

08009c7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	889b      	ldrh	r3, [r3, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d131      	bne.n	8009cf2 <USBD_SetAddress+0x76>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	88db      	ldrh	r3, [r3, #6]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d12d      	bne.n	8009cf2 <USBD_SetAddress+0x76>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	885b      	ldrh	r3, [r3, #2]
 8009c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c9c:	d829      	bhi.n	8009cf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ca8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d104      	bne.n	8009cc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f9a3 	bl	800a004 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	e01d      	b.n	8009cfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7bfa      	ldrb	r2, [r7, #15]
 8009cc4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f003 fba1 	bl	800d414 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa44 	bl	800a160 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d004      	beq.n	8009ce8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce6:	e009      	b.n	8009cfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cf0:	e004      	b.n	8009cfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f985 	bl	800a004 <USBD_CtlError>
  }
}
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	4b4c      	ldr	r3, [pc, #304]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d1c:	4b4b      	ldr	r3, [pc, #300]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d905      	bls.n	8009d30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f96c 	bl	800a004 <USBD_CtlError>
    return USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e088      	b.n	8009e42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d002      	beq.n	8009d42 <USBD_SetConfig+0x3e>
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d025      	beq.n	8009d8c <USBD_SetConfig+0x88>
 8009d40:	e071      	b.n	8009e26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d42:	4b42      	ldr	r3, [pc, #264]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d01c      	beq.n	8009d84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009d4a:	4b40      	ldr	r3, [pc, #256]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d54:	4b3d      	ldr	r3, [pc, #244]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff f93a 	bl	8008fd4 <USBD_SetClassConfig>
 8009d60:	4603      	mov	r3, r0
 8009d62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d64:	7bfb      	ldrb	r3, [r7, #15]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f949 	bl	800a004 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d72:	e065      	b.n	8009e40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f9f3 	bl	800a160 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2203      	movs	r2, #3
 8009d7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d82:	e05d      	b.n	8009e40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f9eb 	bl	800a160 <USBD_CtlSendStatus>
      break;
 8009d8a:	e059      	b.n	8009e40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d8c:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d112      	bne.n	8009dba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d9c:	4b2b      	ldr	r3, [pc, #172]	; (8009e4c <USBD_SetConfig+0x148>)
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	461a      	mov	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009da6:	4b29      	ldr	r3, [pc, #164]	; (8009e4c <USBD_SetConfig+0x148>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff f92d 	bl	800900c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f9d4 	bl	800a160 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009db8:	e042      	b.n	8009e40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009dba:	4b24      	ldr	r3, [pc, #144]	; (8009e4c <USBD_SetConfig+0x148>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d02a      	beq.n	8009e1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff f91b 	bl	800900c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009dd6:	4b1d      	ldr	r3, [pc, #116]	; (8009e4c <USBD_SetConfig+0x148>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009de0:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <USBD_SetConfig+0x148>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff f8f4 	bl	8008fd4 <USBD_SetClassConfig>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00f      	beq.n	8009e16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f903 	bl	800a004 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7ff f900 	bl	800900c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2202      	movs	r2, #2
 8009e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e14:	e014      	b.n	8009e40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f9a2 	bl	800a160 <USBD_CtlSendStatus>
      break;
 8009e1c:	e010      	b.n	8009e40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f99e 	bl	800a160 <USBD_CtlSendStatus>
      break;
 8009e24:	e00c      	b.n	8009e40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f8eb 	bl	800a004 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <USBD_SetConfig+0x148>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff f8e9 	bl	800900c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e3e:	bf00      	nop
  }

  return ret;
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000abd 	.word	0x20000abd

08009e50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88db      	ldrh	r3, [r3, #6]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d004      	beq.n	8009e6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 f8cd 	bl	800a004 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e6a:	e023      	b.n	8009eb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	dc02      	bgt.n	8009e7e <USBD_GetConfig+0x2e>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc03      	bgt.n	8009e84 <USBD_GetConfig+0x34>
 8009e7c:	e015      	b.n	8009eaa <USBD_GetConfig+0x5a>
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	d00b      	beq.n	8009e9a <USBD_GetConfig+0x4a>
 8009e82:	e012      	b.n	8009eaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	2201      	movs	r2, #1
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f927 	bl	800a0e6 <USBD_CtlSendData>
        break;
 8009e98:	e00c      	b.n	8009eb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f91f 	bl	800a0e6 <USBD_CtlSendData>
        break;
 8009ea8:	e004      	b.n	8009eb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f8a9 	bl	800a004 <USBD_CtlError>
        break;
 8009eb2:	bf00      	nop
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d81e      	bhi.n	8009f12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	88db      	ldrh	r3, [r3, #6]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d004      	beq.n	8009ee6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f890 	bl	800a004 <USBD_CtlError>
        break;
 8009ee4:	e01a      	b.n	8009f1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d005      	beq.n	8009f02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	f043 0202 	orr.w	r2, r3, #2
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	330c      	adds	r3, #12
 8009f06:	2202      	movs	r2, #2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8eb 	bl	800a0e6 <USBD_CtlSendData>
      break;
 8009f10:	e004      	b.n	8009f1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f875 	bl	800a004 <USBD_CtlError>
      break;
 8009f1a:	bf00      	nop
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	885b      	ldrh	r3, [r3, #2]
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d106      	bne.n	8009f44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f90e 	bl	800a160 <USBD_CtlSendStatus>
  }
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d80b      	bhi.n	8009f7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	885b      	ldrh	r3, [r3, #2]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d10c      	bne.n	8009f86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8f3 	bl	800a160 <USBD_CtlSendStatus>
      }
      break;
 8009f7a:	e004      	b.n	8009f86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f7c:	6839      	ldr	r1, [r7, #0]
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f840 	bl	800a004 <USBD_CtlError>
      break;
 8009f84:	e000      	b.n	8009f88 <USBD_ClrFeature+0x3c>
      break;
 8009f86:	bf00      	nop
  }
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	781a      	ldrb	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	781a      	ldrb	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff faad 	bl	800951a <SWAPBYTE>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7ff faa0 	bl	800951a <SWAPBYTE>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	461a      	mov	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3301      	adds	r3, #1
 8009fec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f7ff fa93 	bl	800951a <SWAPBYTE>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	80da      	strh	r2, [r3, #6]
}
 8009ffc:	bf00      	nop
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a00e:	2180      	movs	r1, #128	; 0x80
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f003 f995 	bl	800d340 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a016:	2100      	movs	r1, #0
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f003 f991 	bl	800d340 <USBD_LL_StallEP>
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d036      	beq.n	800a0aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a040:	6938      	ldr	r0, [r7, #16]
 800a042:	f000 f836 	bl	800a0b2 <USBD_GetLen>
 800a046:	4603      	mov	r3, r0
 800a048:	3301      	adds	r3, #1
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	4413      	add	r3, r2
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	7812      	ldrb	r2, [r2, #0]
 800a05e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	3301      	adds	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	4413      	add	r3, r2
 800a06c:	2203      	movs	r2, #3
 800a06e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	3301      	adds	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a076:	e013      	b.n	800a0a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a078:	7dfb      	ldrb	r3, [r7, #23]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	4413      	add	r3, r2
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3301      	adds	r3, #1
 800a088:	613b      	str	r3, [r7, #16]
    idx++;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	3301      	adds	r3, #1
 800a08e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	4413      	add	r3, r2
 800a096:	2200      	movs	r2, #0
 800a098:	701a      	strb	r2, [r3, #0]
    idx++;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	3301      	adds	r3, #1
 800a09e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1e7      	bne.n	800a078 <USBD_GetString+0x52>
 800a0a8:	e000      	b.n	800a0ac <USBD_GetString+0x86>
    return;
 800a0aa:	bf00      	nop
  }
}
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b085      	sub	sp, #20
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0c2:	e005      	b.n	800a0d0 <USBD_GetLen+0x1e>
  {
    len++;
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f5      	bne.n	800a0c4 <USBD_GetLen+0x12>
  }

  return len;
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	2100      	movs	r1, #0
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f003 f9a0 	bl	800d452 <USBD_LL_Transmit>

  return USBD_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	2100      	movs	r1, #0
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f003 f98f 	bl	800d452 <USBD_LL_Transmit>

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	2100      	movs	r1, #0
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f003 f99f 	bl	800d494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2204      	movs	r2, #4
 800a16c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a170:	2300      	movs	r3, #0
 800a172:	2200      	movs	r2, #0
 800a174:	2100      	movs	r1, #0
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f003 f96b 	bl	800d452 <USBD_LL_Transmit>

  return USBD_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2205      	movs	r2, #5
 800a192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a196:	2300      	movs	r3, #0
 800a198:	2200      	movs	r2, #0
 800a19a:	2100      	movs	r1, #0
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f003 f979 	bl	800d494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <__NVIC_SetPriority>:
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6039      	str	r1, [r7, #0]
 800a1b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	db0a      	blt.n	800a1d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	490c      	ldr	r1, [pc, #48]	; (800a1f8 <__NVIC_SetPriority+0x4c>)
 800a1c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ca:	0112      	lsls	r2, r2, #4
 800a1cc:	b2d2      	uxtb	r2, r2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a1d4:	e00a      	b.n	800a1ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	4908      	ldr	r1, [pc, #32]	; (800a1fc <__NVIC_SetPriority+0x50>)
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	f003 030f 	and.w	r3, r3, #15
 800a1e2:	3b04      	subs	r3, #4
 800a1e4:	0112      	lsls	r2, r2, #4
 800a1e6:	b2d2      	uxtb	r2, r2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	761a      	strb	r2, [r3, #24]
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	e000e100 	.word	0xe000e100
 800a1fc:	e000ed00 	.word	0xe000ed00

0800a200 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <SysTick_Handler+0x1c>)
 800a206:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a208:	f001 fcfe 	bl	800bc08 <xTaskGetSchedulerState>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d001      	beq.n	800a216 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a212:	f002 fae9 	bl	800c7e8 <xPortSysTickHandler>
  }
}
 800a216:	bf00      	nop
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	e000e010 	.word	0xe000e010

0800a220 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a224:	2100      	movs	r1, #0
 800a226:	f06f 0004 	mvn.w	r0, #4
 800a22a:	f7ff ffbf 	bl	800a1ac <__NVIC_SetPriority>
#endif
}
 800a22e:	bf00      	nop
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a23a:	f3ef 8305 	mrs	r3, IPSR
 800a23e:	603b      	str	r3, [r7, #0]
  return(result);
 800a240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a246:	f06f 0305 	mvn.w	r3, #5
 800a24a:	607b      	str	r3, [r7, #4]
 800a24c:	e00c      	b.n	800a268 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a24e:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <osKernelInitialize+0x44>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d105      	bne.n	800a262 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <osKernelInitialize+0x44>)
 800a258:	2201      	movs	r2, #1
 800a25a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	607b      	str	r3, [r7, #4]
 800a260:	e002      	b.n	800a268 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a262:	f04f 33ff 	mov.w	r3, #4294967295
 800a266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a268:	687b      	ldr	r3, [r7, #4]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	20000ac0 	.word	0x20000ac0

0800a27c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a282:	f3ef 8305 	mrs	r3, IPSR
 800a286:	603b      	str	r3, [r7, #0]
  return(result);
 800a288:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d003      	beq.n	800a296 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a28e:	f06f 0305 	mvn.w	r3, #5
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	e010      	b.n	800a2b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a296:	4b0b      	ldr	r3, [pc, #44]	; (800a2c4 <osKernelStart+0x48>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d109      	bne.n	800a2b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a29e:	f7ff ffbf 	bl	800a220 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a2a2:	4b08      	ldr	r3, [pc, #32]	; (800a2c4 <osKernelStart+0x48>)
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a2a8:	f001 f866 	bl	800b378 <vTaskStartScheduler>
      stat = osOK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	607b      	str	r3, [r7, #4]
 800a2b0:	e002      	b.n	800a2b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2b8:	687b      	ldr	r3, [r7, #4]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	20000ac0 	.word	0x20000ac0

0800a2c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08e      	sub	sp, #56	; 0x38
 800a2cc:	af04      	add	r7, sp, #16
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2d8:	f3ef 8305 	mrs	r3, IPSR
 800a2dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a2de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d17e      	bne.n	800a3e2 <osThreadNew+0x11a>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d07b      	beq.n	800a3e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2ea:	2380      	movs	r3, #128	; 0x80
 800a2ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2ee:	2318      	movs	r3, #24
 800a2f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d045      	beq.n	800a38e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <osThreadNew+0x48>
        name = attr->name;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <osThreadNew+0x6e>
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	2b38      	cmp	r3, #56	; 0x38
 800a328:	d805      	bhi.n	800a336 <osThreadNew+0x6e>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <osThreadNew+0x72>
        return (NULL);
 800a336:	2300      	movs	r3, #0
 800a338:	e054      	b.n	800a3e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	089b      	lsrs	r3, r3, #2
 800a348:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00e      	beq.n	800a370 <osThreadNew+0xa8>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	2b5b      	cmp	r3, #91	; 0x5b
 800a358:	d90a      	bls.n	800a370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d006      	beq.n	800a370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <osThreadNew+0xa8>
        mem = 1;
 800a36a:	2301      	movs	r3, #1
 800a36c:	61bb      	str	r3, [r7, #24]
 800a36e:	e010      	b.n	800a392 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10c      	bne.n	800a392 <osThreadNew+0xca>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d108      	bne.n	800a392 <osThreadNew+0xca>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d104      	bne.n	800a392 <osThreadNew+0xca>
          mem = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	61bb      	str	r3, [r7, #24]
 800a38c:	e001      	b.n	800a392 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d110      	bne.n	800a3ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a3a0:	9202      	str	r2, [sp, #8]
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6a3a      	ldr	r2, [r7, #32]
 800a3ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fe0c 	bl	800afcc <xTaskCreateStatic>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	e013      	b.n	800a3e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d110      	bne.n	800a3e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	f107 0310 	add.w	r3, r7, #16
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 fe57 	bl	800b086 <xTaskCreate>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d001      	beq.n	800a3e2 <osThreadNew+0x11a>
            hTask = NULL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3e2:	693b      	ldr	r3, [r7, #16]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3728      	adds	r7, #40	; 0x28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3f4:	f3ef 8305 	mrs	r3, IPSR
 800a3f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <osDelay+0x1c>
    stat = osErrorISR;
 800a400:	f06f 0305 	mvn.w	r3, #5
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	e007      	b.n	800a418 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 ff7c 	bl	800b310 <vTaskDelay>
    }
  }

  return (stat);
 800a418:	68fb      	ldr	r3, [r7, #12]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
	...

0800a424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	4a07      	ldr	r2, [pc, #28]	; (800a450 <vApplicationGetIdleTaskMemory+0x2c>)
 800a434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	4a06      	ldr	r2, [pc, #24]	; (800a454 <vApplicationGetIdleTaskMemory+0x30>)
 800a43a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2280      	movs	r2, #128	; 0x80
 800a440:	601a      	str	r2, [r3, #0]
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	20000ac4 	.word	0x20000ac4
 800a454:	20000b20 	.word	0x20000b20

0800a458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4a07      	ldr	r2, [pc, #28]	; (800a484 <vApplicationGetTimerTaskMemory+0x2c>)
 800a468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	4a06      	ldr	r2, [pc, #24]	; (800a488 <vApplicationGetTimerTaskMemory+0x30>)
 800a46e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a476:	601a      	str	r2, [r3, #0]
}
 800a478:	bf00      	nop
 800a47a:	3714      	adds	r7, #20
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	20000d20 	.word	0x20000d20
 800a488:	20000d7c 	.word	0x20000d7c

0800a48c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f103 0208 	add.w	r2, r3, #8
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f103 0208 	add.w	r2, r3, #8
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f103 0208 	add.w	r2, r3, #8
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
}
 800a522:	bf00      	nop
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a52e:	b480      	push	{r7}
 800a530:	b085      	sub	sp, #20
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a544:	d103      	bne.n	800a54e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e00c      	b.n	800a568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3308      	adds	r3, #8
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	e002      	b.n	800a55c <vListInsert+0x2e>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	429a      	cmp	r2, r3
 800a566:	d2f6      	bcs.n	800a556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]
}
 800a594:	bf00      	nop
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6892      	ldr	r2, [r2, #8]
 800a5b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6852      	ldr	r2, [r2, #4]
 800a5c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d103      	bne.n	800a5d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	1e5a      	subs	r2, r3, #1
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d10a      	bne.n	800a61e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a61e:	f002 f851 	bl	800c6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a62a:	68f9      	ldr	r1, [r7, #12]
 800a62c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a62e:	fb01 f303 	mul.w	r3, r1, r3
 800a632:	441a      	add	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64e:	3b01      	subs	r3, #1
 800a650:	68f9      	ldr	r1, [r7, #12]
 800a652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a654:	fb01 f303 	mul.w	r3, r1, r3
 800a658:	441a      	add	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	22ff      	movs	r2, #255	; 0xff
 800a662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	22ff      	movs	r2, #255	; 0xff
 800a66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d114      	bne.n	800a69e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d01a      	beq.n	800a6b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3310      	adds	r3, #16
 800a680:	4618      	mov	r0, r3
 800a682:	f001 f903 	bl	800b88c <xTaskRemoveFromEventList>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d012      	beq.n	800a6b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a68c:	4b0c      	ldr	r3, [pc, #48]	; (800a6c0 <xQueueGenericReset+0xcc>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	e009      	b.n	800a6b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3310      	adds	r3, #16
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff fef2 	bl	800a48c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3324      	adds	r3, #36	; 0x24
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff feed 	bl	800a48c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6b2:	f002 f837 	bl	800c724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6b6:	2301      	movs	r3, #1
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08e      	sub	sp, #56	; 0x38
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10a      	bne.n	800a70a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a706:	bf00      	nop
 800a708:	e7fe      	b.n	800a708 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <xQueueGenericCreateStatic+0x52>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <xQueueGenericCreateStatic+0x56>
 800a716:	2301      	movs	r3, #1
 800a718:	e000      	b.n	800a71c <xQueueGenericCreateStatic+0x58>
 800a71a:	2300      	movs	r3, #0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	623b      	str	r3, [r7, #32]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d102      	bne.n	800a742 <xQueueGenericCreateStatic+0x7e>
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <xQueueGenericCreateStatic+0x82>
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <xQueueGenericCreateStatic+0x84>
 800a746:	2300      	movs	r3, #0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	61fb      	str	r3, [r7, #28]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a762:	2350      	movs	r3, #80	; 0x50
 800a764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b50      	cmp	r3, #80	; 0x50
 800a76a:	d00a      	beq.n	800a782 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	61bb      	str	r3, [r7, #24]
}
 800a77e:	bf00      	nop
 800a780:	e7fe      	b.n	800a780 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a782:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00d      	beq.n	800a7aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	68b9      	ldr	r1, [r7, #8]
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 f805 	bl	800a7b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3730      	adds	r7, #48	; 0x30
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	e002      	b.n	800a7d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	69b8      	ldr	r0, [r7, #24]
 800a7e6:	f7ff ff05 	bl	800a5f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08e      	sub	sp, #56	; 0x38
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
 800a808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a80a:	2300      	movs	r3, #0
 800a80c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <xQueueGenericSend+0x32>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d103      	bne.n	800a83c <xQueueGenericSend+0x40>
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <xQueueGenericSend+0x44>
 800a83c:	2301      	movs	r3, #1
 800a83e:	e000      	b.n	800a842 <xQueueGenericSend+0x46>
 800a840:	2300      	movs	r3, #0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10a      	bne.n	800a85c <xQueueGenericSend+0x60>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a858:	bf00      	nop
 800a85a:	e7fe      	b.n	800a85a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d103      	bne.n	800a86a <xQueueGenericSend+0x6e>
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a866:	2b01      	cmp	r3, #1
 800a868:	d101      	bne.n	800a86e <xQueueGenericSend+0x72>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <xQueueGenericSend+0x74>
 800a86e:	2300      	movs	r3, #0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10a      	bne.n	800a88a <xQueueGenericSend+0x8e>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	623b      	str	r3, [r7, #32]
}
 800a886:	bf00      	nop
 800a888:	e7fe      	b.n	800a888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a88a:	f001 f9bd 	bl	800bc08 <xTaskGetSchedulerState>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <xQueueGenericSend+0x9e>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d101      	bne.n	800a89e <xQueueGenericSend+0xa2>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <xQueueGenericSend+0xa4>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <xQueueGenericSend+0xbe>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	61fb      	str	r3, [r7, #28]
}
 800a8b6:	bf00      	nop
 800a8b8:	e7fe      	b.n	800a8b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8ba:	f001 ff03 	bl	800c6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d302      	bcc.n	800a8d0 <xQueueGenericSend+0xd4>
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d129      	bne.n	800a924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d6:	f000 fa0b 	bl	800acf0 <prvCopyDataToQueue>
 800a8da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d010      	beq.n	800a906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e6:	3324      	adds	r3, #36	; 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 ffcf 	bl	800b88c <xTaskRemoveFromEventList>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d013      	beq.n	800a91c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8f4:	4b3f      	ldr	r3, [pc, #252]	; (800a9f4 <xQueueGenericSend+0x1f8>)
 800a8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	e00a      	b.n	800a91c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d007      	beq.n	800a91c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a90c:	4b39      	ldr	r3, [pc, #228]	; (800a9f4 <xQueueGenericSend+0x1f8>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a91c:	f001 ff02 	bl	800c724 <vPortExitCritical>
				return pdPASS;
 800a920:	2301      	movs	r3, #1
 800a922:	e063      	b.n	800a9ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d103      	bne.n	800a932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a92a:	f001 fefb 	bl	800c724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	e05c      	b.n	800a9ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	2b00      	cmp	r3, #0
 800a936:	d106      	bne.n	800a946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a938:	f107 0314 	add.w	r3, r7, #20
 800a93c:	4618      	mov	r0, r3
 800a93e:	f001 f809 	bl	800b954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a942:	2301      	movs	r3, #1
 800a944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a946:	f001 feed 	bl	800c724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a94a:	f000 fd7b 	bl	800b444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a94e:	f001 feb9 	bl	800c6c4 <vPortEnterCritical>
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a958:	b25b      	sxtb	r3, r3
 800a95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a95e:	d103      	bne.n	800a968 <xQueueGenericSend+0x16c>
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a96e:	b25b      	sxtb	r3, r3
 800a970:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a974:	d103      	bne.n	800a97e <xQueueGenericSend+0x182>
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a97e:	f001 fed1 	bl	800c724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a982:	1d3a      	adds	r2, r7, #4
 800a984:	f107 0314 	add.w	r3, r7, #20
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 fff8 	bl	800b980 <xTaskCheckForTimeOut>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d124      	bne.n	800a9e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a998:	f000 faa2 	bl	800aee0 <prvIsQueueFull>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d018      	beq.n	800a9d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	3310      	adds	r3, #16
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 ff1e 	bl	800b7ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9b2:	f000 fa2d 	bl	800ae10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9b6:	f000 fd53 	bl	800b460 <xTaskResumeAll>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f47f af7c 	bne.w	800a8ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a9c2:	4b0c      	ldr	r3, [pc, #48]	; (800a9f4 <xQueueGenericSend+0x1f8>)
 800a9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	e772      	b.n	800a8ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9d6:	f000 fa1b 	bl	800ae10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9da:	f000 fd41 	bl	800b460 <xTaskResumeAll>
 800a9de:	e76c      	b.n	800a8ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9e2:	f000 fa15 	bl	800ae10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9e6:	f000 fd3b 	bl	800b460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3738      	adds	r7, #56	; 0x38
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	e000ed04 	.word	0xe000ed04

0800a9f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b090      	sub	sp, #64	; 0x40
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d103      	bne.n	800aa34 <xQueueGenericSendFromISR+0x3c>
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <xQueueGenericSendFromISR+0x40>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <xQueueGenericSendFromISR+0x42>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d103      	bne.n	800aa62 <xQueueGenericSendFromISR+0x6a>
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <xQueueGenericSendFromISR+0x6e>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e000      	b.n	800aa68 <xQueueGenericSendFromISR+0x70>
 800aa66:	2300      	movs	r3, #0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10a      	bne.n	800aa82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	623b      	str	r3, [r7, #32]
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa82:	f001 ff01 	bl	800c888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa86:	f3ef 8211 	mrs	r2, BASEPRI
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	61fa      	str	r2, [r7, #28]
 800aa9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <xQueueGenericSendFromISR+0xbc>
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d12f      	bne.n	800ab14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aaca:	f000 f911 	bl	800acf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aace:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	d112      	bne.n	800aafe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d016      	beq.n	800ab0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae2:	3324      	adds	r3, #36	; 0x24
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fed1 	bl	800b88c <xTaskRemoveFromEventList>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00e      	beq.n	800ab0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00b      	beq.n	800ab0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	e007      	b.n	800ab0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aafe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab02:	3301      	adds	r3, #1
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	b25a      	sxtb	r2, r3
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab12:	e001      	b.n	800ab18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab14:	2300      	movs	r3, #0
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3740      	adds	r7, #64	; 0x40
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08c      	sub	sp, #48	; 0x30
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10a      	bne.n	800ab60 <xQueueReceive+0x30>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	623b      	str	r3, [r7, #32]
}
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d103      	bne.n	800ab6e <xQueueReceive+0x3e>
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <xQueueReceive+0x42>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <xQueueReceive+0x44>
 800ab72:	2300      	movs	r3, #0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <xQueueReceive+0x5e>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	61fb      	str	r3, [r7, #28]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab8e:	f001 f83b 	bl	800bc08 <xTaskGetSchedulerState>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <xQueueReceive+0x6e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <xQueueReceive+0x72>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <xQueueReceive+0x74>
 800aba2:	2300      	movs	r3, #0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d10a      	bne.n	800abbe <xQueueReceive+0x8e>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	61bb      	str	r3, [r7, #24]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abbe:	f001 fd81 	bl	800c6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d01f      	beq.n	800ac0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd2:	f000 f8f7 	bl	800adc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	1e5a      	subs	r2, r3, #1
 800abda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00f      	beq.n	800ac06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe8:	3310      	adds	r3, #16
 800abea:	4618      	mov	r0, r3
 800abec:	f000 fe4e 	bl	800b88c <xTaskRemoveFromEventList>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d007      	beq.n	800ac06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abf6:	4b3d      	ldr	r3, [pc, #244]	; (800acec <xQueueReceive+0x1bc>)
 800abf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac06:	f001 fd8d 	bl	800c724 <vPortExitCritical>
				return pdPASS;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e069      	b.n	800ace2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac14:	f001 fd86 	bl	800c724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e062      	b.n	800ace2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac22:	f107 0310 	add.w	r3, r7, #16
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fe94 	bl	800b954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac30:	f001 fd78 	bl	800c724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac34:	f000 fc06 	bl	800b444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac38:	f001 fd44 	bl	800c6c4 <vPortEnterCritical>
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac42:	b25b      	sxtb	r3, r3
 800ac44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac48:	d103      	bne.n	800ac52 <xQueueReceive+0x122>
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac58:	b25b      	sxtb	r3, r3
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d103      	bne.n	800ac68 <xQueueReceive+0x138>
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac68:	f001 fd5c 	bl	800c724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac6c:	1d3a      	adds	r2, r7, #4
 800ac6e:	f107 0310 	add.w	r3, r7, #16
 800ac72:	4611      	mov	r1, r2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 fe83 	bl	800b980 <xTaskCheckForTimeOut>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d123      	bne.n	800acc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac82:	f000 f917 	bl	800aeb4 <prvIsQueueEmpty>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d017      	beq.n	800acbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	3324      	adds	r3, #36	; 0x24
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	4611      	mov	r1, r2
 800ac94:	4618      	mov	r0, r3
 800ac96:	f000 fda9 	bl	800b7ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac9c:	f000 f8b8 	bl	800ae10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aca0:	f000 fbde 	bl	800b460 <xTaskResumeAll>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d189      	bne.n	800abbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800acaa:	4b10      	ldr	r3, [pc, #64]	; (800acec <xQueueReceive+0x1bc>)
 800acac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	e780      	b.n	800abbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acbe:	f000 f8a7 	bl	800ae10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acc2:	f000 fbcd 	bl	800b460 <xTaskResumeAll>
 800acc6:	e77a      	b.n	800abbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acca:	f000 f8a1 	bl	800ae10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acce:	f000 fbc7 	bl	800b460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd4:	f000 f8ee 	bl	800aeb4 <prvIsQueueEmpty>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f43f af6f 	beq.w	800abbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ace0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3730      	adds	r7, #48	; 0x30
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	e000ed04 	.word	0xe000ed04

0800acf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800acfc:	2300      	movs	r3, #0
 800acfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10d      	bne.n	800ad2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d14d      	bne.n	800adb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 ff92 	bl	800bc44 <xTaskPriorityDisinherit>
 800ad20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	609a      	str	r2, [r3, #8]
 800ad28:	e043      	b.n	800adb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d119      	bne.n	800ad64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6858      	ldr	r0, [r3, #4]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad38:	461a      	mov	r2, r3
 800ad3a:	68b9      	ldr	r1, [r7, #8]
 800ad3c:	f008 fd7c 	bl	8013838 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad48:	441a      	add	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d32b      	bcc.n	800adb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	605a      	str	r2, [r3, #4]
 800ad62:	e026      	b.n	800adb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	68d8      	ldr	r0, [r3, #12]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	68b9      	ldr	r1, [r7, #8]
 800ad70:	f008 fd62 	bl	8013838 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	441a      	add	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68da      	ldr	r2, [r3, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d207      	bcs.n	800ada0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	425b      	negs	r3, r3
 800ad9a:	441a      	add	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d105      	bne.n	800adb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3b01      	subs	r3, #1
 800adb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800adba:	697b      	ldr	r3, [r7, #20]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add2:	2b00      	cmp	r3, #0
 800add4:	d018      	beq.n	800ae08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adde:	441a      	add	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68da      	ldr	r2, [r3, #12]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	429a      	cmp	r2, r3
 800adee:	d303      	bcc.n	800adf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68d9      	ldr	r1, [r3, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae00:	461a      	mov	r2, r3
 800ae02:	6838      	ldr	r0, [r7, #0]
 800ae04:	f008 fd18 	bl	8013838 <memcpy>
	}
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae18:	f001 fc54 	bl	800c6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae24:	e011      	b.n	800ae4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d012      	beq.n	800ae54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3324      	adds	r3, #36	; 0x24
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fd2a 	bl	800b88c <xTaskRemoveFromEventList>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae3e:	f000 fe01 	bl	800ba44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	3b01      	subs	r3, #1
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	dce9      	bgt.n	800ae26 <prvUnlockQueue+0x16>
 800ae52:	e000      	b.n	800ae56 <prvUnlockQueue+0x46>
					break;
 800ae54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	22ff      	movs	r2, #255	; 0xff
 800ae5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ae5e:	f001 fc61 	bl	800c724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae62:	f001 fc2f 	bl	800c6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae6e:	e011      	b.n	800ae94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d012      	beq.n	800ae9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3310      	adds	r3, #16
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 fd05 	bl	800b88c <xTaskRemoveFromEventList>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae88:	f000 fddc 	bl	800ba44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	3b01      	subs	r3, #1
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dce9      	bgt.n	800ae70 <prvUnlockQueue+0x60>
 800ae9c:	e000      	b.n	800aea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	22ff      	movs	r2, #255	; 0xff
 800aea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aea8:	f001 fc3c 	bl	800c724 <vPortExitCritical>
}
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aebc:	f001 fc02 	bl	800c6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	60fb      	str	r3, [r7, #12]
 800aecc:	e001      	b.n	800aed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aece:	2300      	movs	r3, #0
 800aed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aed2:	f001 fc27 	bl	800c724 <vPortExitCritical>

	return xReturn;
 800aed6:	68fb      	ldr	r3, [r7, #12]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aee8:	f001 fbec 	bl	800c6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d102      	bne.n	800aefe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aef8:	2301      	movs	r3, #1
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	e001      	b.n	800af02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aefe:	2300      	movs	r3, #0
 800af00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af02:	f001 fc0f 	bl	800c724 <vPortExitCritical>

	return xReturn;
 800af06:	68fb      	ldr	r3, [r7, #12]
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	e014      	b.n	800af4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af20:	4a0f      	ldr	r2, [pc, #60]	; (800af60 <vQueueAddToRegistry+0x50>)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10b      	bne.n	800af44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af2c:	490c      	ldr	r1, [pc, #48]	; (800af60 <vQueueAddToRegistry+0x50>)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af36:	4a0a      	ldr	r2, [pc, #40]	; (800af60 <vQueueAddToRegistry+0x50>)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	00db      	lsls	r3, r3, #3
 800af3c:	4413      	add	r3, r2
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af42:	e006      	b.n	800af52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3301      	adds	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b07      	cmp	r3, #7
 800af4e:	d9e7      	bls.n	800af20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af50:	bf00      	nop
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	2000543c 	.word	0x2000543c

0800af64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af74:	f001 fba6 	bl	800c6c4 <vPortEnterCritical>
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af84:	d103      	bne.n	800af8e <vQueueWaitForMessageRestricted+0x2a>
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af94:	b25b      	sxtb	r3, r3
 800af96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9a:	d103      	bne.n	800afa4 <vQueueWaitForMessageRestricted+0x40>
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa4:	f001 fbbe 	bl	800c724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afac:	2b00      	cmp	r3, #0
 800afae:	d106      	bne.n	800afbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	3324      	adds	r3, #36	; 0x24
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	68b9      	ldr	r1, [r7, #8]
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fc3b 	bl	800b834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afbe:	6978      	ldr	r0, [r7, #20]
 800afc0:	f7ff ff26 	bl	800ae10 <prvUnlockQueue>
	}
 800afc4:	bf00      	nop
 800afc6:	3718      	adds	r7, #24
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	; 0x38
 800afd0:	af04      	add	r7, sp, #16
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10a      	bne.n	800aff6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	623b      	str	r3, [r7, #32]
}
 800aff2:	bf00      	nop
 800aff4:	e7fe      	b.n	800aff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10a      	bne.n	800b012 <xTaskCreateStatic+0x46>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	61fb      	str	r3, [r7, #28]
}
 800b00e:	bf00      	nop
 800b010:	e7fe      	b.n	800b010 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b012:	235c      	movs	r3, #92	; 0x5c
 800b014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2b5c      	cmp	r3, #92	; 0x5c
 800b01a:	d00a      	beq.n	800b032 <xTaskCreateStatic+0x66>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	61bb      	str	r3, [r7, #24]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b032:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	2b00      	cmp	r3, #0
 800b038:	d01e      	beq.n	800b078 <xTaskCreateStatic+0xac>
 800b03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01b      	beq.n	800b078 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	2202      	movs	r2, #2
 800b04e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b052:	2300      	movs	r3, #0
 800b054:	9303      	str	r3, [sp, #12]
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	9302      	str	r3, [sp, #8]
 800b05a:	f107 0314 	add.w	r3, r7, #20
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	68b9      	ldr	r1, [r7, #8]
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 f850 	bl	800b110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b072:	f000 f8dd 	bl	800b230 <prvAddNewTaskToReadyList>
 800b076:	e001      	b.n	800b07c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b07c:	697b      	ldr	r3, [r7, #20]
	}
 800b07e:	4618      	mov	r0, r3
 800b080:	3728      	adds	r7, #40	; 0x28
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b086:	b580      	push	{r7, lr}
 800b088:	b08c      	sub	sp, #48	; 0x30
 800b08a:	af04      	add	r7, sp, #16
 800b08c:	60f8      	str	r0, [r7, #12]
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	603b      	str	r3, [r7, #0]
 800b092:	4613      	mov	r3, r2
 800b094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b096:	88fb      	ldrh	r3, [r7, #6]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 fc34 	bl	800c908 <pvPortMalloc>
 800b0a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00e      	beq.n	800b0c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0a8:	205c      	movs	r0, #92	; 0x5c
 800b0aa:	f001 fc2d 	bl	800c908 <pvPortMalloc>
 800b0ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	631a      	str	r2, [r3, #48]	; 0x30
 800b0bc:	e005      	b.n	800b0ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0be:	6978      	ldr	r0, [r7, #20]
 800b0c0:	f001 fcee 	bl	800caa0 <vPortFree>
 800b0c4:	e001      	b.n	800b0ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d017      	beq.n	800b100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0d8:	88fa      	ldrh	r2, [r7, #6]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9303      	str	r3, [sp, #12]
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	9302      	str	r3, [sp, #8]
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 f80e 	bl	800b110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0f4:	69f8      	ldr	r0, [r7, #28]
 800b0f6:	f000 f89b 	bl	800b230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	61bb      	str	r3, [r7, #24]
 800b0fe:	e002      	b.n	800b106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b100:	f04f 33ff 	mov.w	r3, #4294967295
 800b104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b106:	69bb      	ldr	r3, [r7, #24]
	}
 800b108:	4618      	mov	r0, r3
 800b10a:	3720      	adds	r7, #32
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	461a      	mov	r2, r3
 800b128:	21a5      	movs	r1, #165	; 0xa5
 800b12a:	f008 fb93 	bl	8013854 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b138:	3b01      	subs	r3, #1
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	f023 0307 	bic.w	r3, r3, #7
 800b146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	f003 0307 	and.w	r3, r3, #7
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	617b      	str	r3, [r7, #20]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d01f      	beq.n	800b1ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b16e:	2300      	movs	r3, #0
 800b170:	61fb      	str	r3, [r7, #28]
 800b172:	e012      	b.n	800b19a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	4413      	add	r3, r2
 800b17a:	7819      	ldrb	r1, [r3, #0]
 800b17c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	3334      	adds	r3, #52	; 0x34
 800b184:	460a      	mov	r2, r1
 800b186:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	4413      	add	r3, r2
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d006      	beq.n	800b1a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	3301      	adds	r3, #1
 800b198:	61fb      	str	r3, [r7, #28]
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	2b0f      	cmp	r3, #15
 800b19e:	d9e9      	bls.n	800b174 <prvInitialiseNewTask+0x64>
 800b1a0:	e000      	b.n	800b1a4 <prvInitialiseNewTask+0x94>
			{
				break;
 800b1a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1ac:	e003      	b.n	800b1b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	2b37      	cmp	r3, #55	; 0x37
 800b1ba:	d901      	bls.n	800b1c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1bc:	2337      	movs	r3, #55	; 0x37
 800b1be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff f978 	bl	800a4cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	3318      	adds	r3, #24
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff f973 	bl	800a4cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fe:	2200      	movs	r2, #0
 800b200:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	68f9      	ldr	r1, [r7, #12]
 800b20e:	69b8      	ldr	r0, [r7, #24]
 800b210:	f001 f928 	bl	800c464 <pxPortInitialiseStack>
 800b214:	4602      	mov	r2, r0
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b226:	bf00      	nop
 800b228:	3720      	adds	r7, #32
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b238:	f001 fa44 	bl	800c6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b23c:	4b2d      	ldr	r3, [pc, #180]	; (800b2f4 <prvAddNewTaskToReadyList+0xc4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	4a2c      	ldr	r2, [pc, #176]	; (800b2f4 <prvAddNewTaskToReadyList+0xc4>)
 800b244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b246:	4b2c      	ldr	r3, [pc, #176]	; (800b2f8 <prvAddNewTaskToReadyList+0xc8>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d109      	bne.n	800b262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b24e:	4a2a      	ldr	r2, [pc, #168]	; (800b2f8 <prvAddNewTaskToReadyList+0xc8>)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b254:	4b27      	ldr	r3, [pc, #156]	; (800b2f4 <prvAddNewTaskToReadyList+0xc4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d110      	bne.n	800b27e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b25c:	f000 fc16 	bl	800ba8c <prvInitialiseTaskLists>
 800b260:	e00d      	b.n	800b27e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b262:	4b26      	ldr	r3, [pc, #152]	; (800b2fc <prvAddNewTaskToReadyList+0xcc>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d109      	bne.n	800b27e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b26a:	4b23      	ldr	r3, [pc, #140]	; (800b2f8 <prvAddNewTaskToReadyList+0xc8>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b274:	429a      	cmp	r2, r3
 800b276:	d802      	bhi.n	800b27e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b278:	4a1f      	ldr	r2, [pc, #124]	; (800b2f8 <prvAddNewTaskToReadyList+0xc8>)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b27e:	4b20      	ldr	r3, [pc, #128]	; (800b300 <prvAddNewTaskToReadyList+0xd0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	4a1e      	ldr	r2, [pc, #120]	; (800b300 <prvAddNewTaskToReadyList+0xd0>)
 800b286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b288:	4b1d      	ldr	r3, [pc, #116]	; (800b300 <prvAddNewTaskToReadyList+0xd0>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4b1b      	ldr	r3, [pc, #108]	; (800b304 <prvAddNewTaskToReadyList+0xd4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d903      	bls.n	800b2a4 <prvAddNewTaskToReadyList+0x74>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	4a18      	ldr	r2, [pc, #96]	; (800b304 <prvAddNewTaskToReadyList+0xd4>)
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4a15      	ldr	r2, [pc, #84]	; (800b308 <prvAddNewTaskToReadyList+0xd8>)
 800b2b2:	441a      	add	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f7ff f913 	bl	800a4e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2c0:	f001 fa30 	bl	800c724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2c4:	4b0d      	ldr	r3, [pc, #52]	; (800b2fc <prvAddNewTaskToReadyList+0xcc>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00e      	beq.n	800b2ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <prvAddNewTaskToReadyList+0xc8>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d207      	bcs.n	800b2ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b2da:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <prvAddNewTaskToReadyList+0xdc>)
 800b2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e0:	601a      	str	r2, [r3, #0]
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2ea:	bf00      	nop
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	20001650 	.word	0x20001650
 800b2f8:	2000117c 	.word	0x2000117c
 800b2fc:	2000165c 	.word	0x2000165c
 800b300:	2000166c 	.word	0x2000166c
 800b304:	20001658 	.word	0x20001658
 800b308:	20001180 	.word	0x20001180
 800b30c:	e000ed04 	.word	0xe000ed04

0800b310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d017      	beq.n	800b352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b322:	4b13      	ldr	r3, [pc, #76]	; (800b370 <vTaskDelay+0x60>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <vTaskDelay+0x30>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	60bb      	str	r3, [r7, #8]
}
 800b33c:	bf00      	nop
 800b33e:	e7fe      	b.n	800b33e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b340:	f000 f880 	bl	800b444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b344:	2100      	movs	r1, #0
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fcea 	bl	800bd20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b34c:	f000 f888 	bl	800b460 <xTaskResumeAll>
 800b350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d107      	bne.n	800b368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b358:	4b06      	ldr	r3, [pc, #24]	; (800b374 <vTaskDelay+0x64>)
 800b35a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b35e:	601a      	str	r2, [r3, #0]
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b368:	bf00      	nop
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	20001678 	.word	0x20001678
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08a      	sub	sp, #40	; 0x28
 800b37c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b382:	2300      	movs	r3, #0
 800b384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b386:	463a      	mov	r2, r7
 800b388:	1d39      	adds	r1, r7, #4
 800b38a:	f107 0308 	add.w	r3, r7, #8
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff f848 	bl	800a424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	9202      	str	r2, [sp, #8]
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	460a      	mov	r2, r1
 800b3a6:	4921      	ldr	r1, [pc, #132]	; (800b42c <vTaskStartScheduler+0xb4>)
 800b3a8:	4821      	ldr	r0, [pc, #132]	; (800b430 <vTaskStartScheduler+0xb8>)
 800b3aa:	f7ff fe0f 	bl	800afcc <xTaskCreateStatic>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	4a20      	ldr	r2, [pc, #128]	; (800b434 <vTaskStartScheduler+0xbc>)
 800b3b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b3b4:	4b1f      	ldr	r3, [pc, #124]	; (800b434 <vTaskStartScheduler+0xbc>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	e001      	b.n	800b3c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d102      	bne.n	800b3d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b3cc:	f000 fcfc 	bl	800bdc8 <xTimerCreateTimerTask>
 800b3d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d116      	bne.n	800b406 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	613b      	str	r3, [r7, #16]
}
 800b3ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3ec:	4b12      	ldr	r3, [pc, #72]	; (800b438 <vTaskStartScheduler+0xc0>)
 800b3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b3f4:	4b11      	ldr	r3, [pc, #68]	; (800b43c <vTaskStartScheduler+0xc4>)
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b3fa:	4b11      	ldr	r3, [pc, #68]	; (800b440 <vTaskStartScheduler+0xc8>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b400:	f001 f8be 	bl	800c580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b404:	e00e      	b.n	800b424 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40c:	d10a      	bne.n	800b424 <vTaskStartScheduler+0xac>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	60fb      	str	r3, [r7, #12]
}
 800b420:	bf00      	nop
 800b422:	e7fe      	b.n	800b422 <vTaskStartScheduler+0xaa>
}
 800b424:	bf00      	nop
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	08013acc 	.word	0x08013acc
 800b430:	0800ba5d 	.word	0x0800ba5d
 800b434:	20001674 	.word	0x20001674
 800b438:	20001670 	.word	0x20001670
 800b43c:	2000165c 	.word	0x2000165c
 800b440:	20001654 	.word	0x20001654

0800b444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b444:	b480      	push	{r7}
 800b446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b448:	4b04      	ldr	r3, [pc, #16]	; (800b45c <vTaskSuspendAll+0x18>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	4a03      	ldr	r2, [pc, #12]	; (800b45c <vTaskSuspendAll+0x18>)
 800b450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b452:	bf00      	nop
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	20001678 	.word	0x20001678

0800b460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b46e:	4b42      	ldr	r3, [pc, #264]	; (800b578 <xTaskResumeAll+0x118>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <xTaskResumeAll+0x2c>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	603b      	str	r3, [r7, #0]
}
 800b488:	bf00      	nop
 800b48a:	e7fe      	b.n	800b48a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b48c:	f001 f91a 	bl	800c6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b490:	4b39      	ldr	r3, [pc, #228]	; (800b578 <xTaskResumeAll+0x118>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3b01      	subs	r3, #1
 800b496:	4a38      	ldr	r2, [pc, #224]	; (800b578 <xTaskResumeAll+0x118>)
 800b498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b49a:	4b37      	ldr	r3, [pc, #220]	; (800b578 <xTaskResumeAll+0x118>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d162      	bne.n	800b568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4a2:	4b36      	ldr	r3, [pc, #216]	; (800b57c <xTaskResumeAll+0x11c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d05e      	beq.n	800b568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4aa:	e02f      	b.n	800b50c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ac:	4b34      	ldr	r3, [pc, #208]	; (800b580 <xTaskResumeAll+0x120>)
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	3318      	adds	r3, #24
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff f871 	bl	800a5a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff f86c 	bl	800a5a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4cc:	4b2d      	ldr	r3, [pc, #180]	; (800b584 <xTaskResumeAll+0x124>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d903      	bls.n	800b4dc <xTaskResumeAll+0x7c>
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d8:	4a2a      	ldr	r2, [pc, #168]	; (800b584 <xTaskResumeAll+0x124>)
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	4a27      	ldr	r2, [pc, #156]	; (800b588 <xTaskResumeAll+0x128>)
 800b4ea:	441a      	add	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3304      	adds	r3, #4
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	f7fe fff7 	bl	800a4e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4fc:	4b23      	ldr	r3, [pc, #140]	; (800b58c <xTaskResumeAll+0x12c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	429a      	cmp	r2, r3
 800b504:	d302      	bcc.n	800b50c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b506:	4b22      	ldr	r3, [pc, #136]	; (800b590 <xTaskResumeAll+0x130>)
 800b508:	2201      	movs	r2, #1
 800b50a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b50c:	4b1c      	ldr	r3, [pc, #112]	; (800b580 <xTaskResumeAll+0x120>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1cb      	bne.n	800b4ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b51a:	f000 fb55 	bl	800bbc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b51e:	4b1d      	ldr	r3, [pc, #116]	; (800b594 <xTaskResumeAll+0x134>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d010      	beq.n	800b54c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b52a:	f000 f847 	bl	800b5bc <xTaskIncrementTick>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b534:	4b16      	ldr	r3, [pc, #88]	; (800b590 <xTaskResumeAll+0x130>)
 800b536:	2201      	movs	r2, #1
 800b538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1f1      	bne.n	800b52a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b546:	4b13      	ldr	r3, [pc, #76]	; (800b594 <xTaskResumeAll+0x134>)
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b54c:	4b10      	ldr	r3, [pc, #64]	; (800b590 <xTaskResumeAll+0x130>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d009      	beq.n	800b568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b558:	4b0f      	ldr	r3, [pc, #60]	; (800b598 <xTaskResumeAll+0x138>)
 800b55a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b568:	f001 f8dc 	bl	800c724 <vPortExitCritical>

	return xAlreadyYielded;
 800b56c:	68bb      	ldr	r3, [r7, #8]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20001678 	.word	0x20001678
 800b57c:	20001650 	.word	0x20001650
 800b580:	20001610 	.word	0x20001610
 800b584:	20001658 	.word	0x20001658
 800b588:	20001180 	.word	0x20001180
 800b58c:	2000117c 	.word	0x2000117c
 800b590:	20001664 	.word	0x20001664
 800b594:	20001660 	.word	0x20001660
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5a2:	4b05      	ldr	r3, [pc, #20]	; (800b5b8 <xTaskGetTickCount+0x1c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5a8:	687b      	ldr	r3, [r7, #4]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	20001654 	.word	0x20001654

0800b5bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5c6:	4b4f      	ldr	r3, [pc, #316]	; (800b704 <xTaskIncrementTick+0x148>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f040 808f 	bne.w	800b6ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b5d0:	4b4d      	ldr	r3, [pc, #308]	; (800b708 <xTaskIncrementTick+0x14c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b5d8:	4a4b      	ldr	r2, [pc, #300]	; (800b708 <xTaskIncrementTick+0x14c>)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d120      	bne.n	800b626 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b5e4:	4b49      	ldr	r3, [pc, #292]	; (800b70c <xTaskIncrementTick+0x150>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00a      	beq.n	800b604 <xTaskIncrementTick+0x48>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	603b      	str	r3, [r7, #0]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <xTaskIncrementTick+0x46>
 800b604:	4b41      	ldr	r3, [pc, #260]	; (800b70c <xTaskIncrementTick+0x150>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	4b41      	ldr	r3, [pc, #260]	; (800b710 <xTaskIncrementTick+0x154>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a3f      	ldr	r2, [pc, #252]	; (800b70c <xTaskIncrementTick+0x150>)
 800b610:	6013      	str	r3, [r2, #0]
 800b612:	4a3f      	ldr	r2, [pc, #252]	; (800b710 <xTaskIncrementTick+0x154>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	4b3e      	ldr	r3, [pc, #248]	; (800b714 <xTaskIncrementTick+0x158>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	3301      	adds	r3, #1
 800b61e:	4a3d      	ldr	r2, [pc, #244]	; (800b714 <xTaskIncrementTick+0x158>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	f000 fad1 	bl	800bbc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b626:	4b3c      	ldr	r3, [pc, #240]	; (800b718 <xTaskIncrementTick+0x15c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d349      	bcc.n	800b6c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b630:	4b36      	ldr	r3, [pc, #216]	; (800b70c <xTaskIncrementTick+0x150>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63a:	4b37      	ldr	r3, [pc, #220]	; (800b718 <xTaskIncrementTick+0x15c>)
 800b63c:	f04f 32ff 	mov.w	r2, #4294967295
 800b640:	601a      	str	r2, [r3, #0]
					break;
 800b642:	e03f      	b.n	800b6c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b644:	4b31      	ldr	r3, [pc, #196]	; (800b70c <xTaskIncrementTick+0x150>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d203      	bcs.n	800b664 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b65c:	4a2e      	ldr	r2, [pc, #184]	; (800b718 <xTaskIncrementTick+0x15c>)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b662:	e02f      	b.n	800b6c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	3304      	adds	r3, #4
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fe ff99 	bl	800a5a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b672:	2b00      	cmp	r3, #0
 800b674:	d004      	beq.n	800b680 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	3318      	adds	r3, #24
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe ff90 	bl	800a5a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b684:	4b25      	ldr	r3, [pc, #148]	; (800b71c <xTaskIncrementTick+0x160>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d903      	bls.n	800b694 <xTaskIncrementTick+0xd8>
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b690:	4a22      	ldr	r2, [pc, #136]	; (800b71c <xTaskIncrementTick+0x160>)
 800b692:	6013      	str	r3, [r2, #0]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b698:	4613      	mov	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4a1f      	ldr	r2, [pc, #124]	; (800b720 <xTaskIncrementTick+0x164>)
 800b6a2:	441a      	add	r2, r3
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	3304      	adds	r3, #4
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f7fe ff1b 	bl	800a4e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b4:	4b1b      	ldr	r3, [pc, #108]	; (800b724 <xTaskIncrementTick+0x168>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d3b8      	bcc.n	800b630 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c2:	e7b5      	b.n	800b630 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b6c4:	4b17      	ldr	r3, [pc, #92]	; (800b724 <xTaskIncrementTick+0x168>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ca:	4915      	ldr	r1, [pc, #84]	; (800b720 <xTaskIncrementTick+0x164>)
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	440b      	add	r3, r1
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d901      	bls.n	800b6e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b6e0:	4b11      	ldr	r3, [pc, #68]	; (800b728 <xTaskIncrementTick+0x16c>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d007      	beq.n	800b6f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e004      	b.n	800b6f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b6ee:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <xTaskIncrementTick+0x170>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a0d      	ldr	r2, [pc, #52]	; (800b72c <xTaskIncrementTick+0x170>)
 800b6f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6f8:	697b      	ldr	r3, [r7, #20]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20001678 	.word	0x20001678
 800b708:	20001654 	.word	0x20001654
 800b70c:	20001608 	.word	0x20001608
 800b710:	2000160c 	.word	0x2000160c
 800b714:	20001668 	.word	0x20001668
 800b718:	20001670 	.word	0x20001670
 800b71c:	20001658 	.word	0x20001658
 800b720:	20001180 	.word	0x20001180
 800b724:	2000117c 	.word	0x2000117c
 800b728:	20001664 	.word	0x20001664
 800b72c:	20001660 	.word	0x20001660

0800b730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b736:	4b28      	ldr	r3, [pc, #160]	; (800b7d8 <vTaskSwitchContext+0xa8>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b73e:	4b27      	ldr	r3, [pc, #156]	; (800b7dc <vTaskSwitchContext+0xac>)
 800b740:	2201      	movs	r2, #1
 800b742:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b744:	e041      	b.n	800b7ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b746:	4b25      	ldr	r3, [pc, #148]	; (800b7dc <vTaskSwitchContext+0xac>)
 800b748:	2200      	movs	r2, #0
 800b74a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74c:	4b24      	ldr	r3, [pc, #144]	; (800b7e0 <vTaskSwitchContext+0xb0>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	e010      	b.n	800b776 <vTaskSwitchContext+0x46>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <vTaskSwitchContext+0x40>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	607b      	str	r3, [r7, #4]
}
 800b76c:	bf00      	nop
 800b76e:	e7fe      	b.n	800b76e <vTaskSwitchContext+0x3e>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	3b01      	subs	r3, #1
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	491b      	ldr	r1, [pc, #108]	; (800b7e4 <vTaskSwitchContext+0xb4>)
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4613      	mov	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	440b      	add	r3, r1
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0e4      	beq.n	800b754 <vTaskSwitchContext+0x24>
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	4613      	mov	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4a13      	ldr	r2, [pc, #76]	; (800b7e4 <vTaskSwitchContext+0xb4>)
 800b796:	4413      	add	r3, r2
 800b798:	60bb      	str	r3, [r7, #8]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	605a      	str	r2, [r3, #4]
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d104      	bne.n	800b7ba <vTaskSwitchContext+0x8a>
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	605a      	str	r2, [r3, #4]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	4a09      	ldr	r2, [pc, #36]	; (800b7e8 <vTaskSwitchContext+0xb8>)
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	4a06      	ldr	r2, [pc, #24]	; (800b7e0 <vTaskSwitchContext+0xb0>)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6013      	str	r3, [r2, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	3714      	adds	r7, #20
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
 800b7d6:	bf00      	nop
 800b7d8:	20001678 	.word	0x20001678
 800b7dc:	20001664 	.word	0x20001664
 800b7e0:	20001658 	.word	0x20001658
 800b7e4:	20001180 	.word	0x20001180
 800b7e8:	2000117c 	.word	0x2000117c

0800b7ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10a      	bne.n	800b812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60fb      	str	r3, [r7, #12]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b812:	4b07      	ldr	r3, [pc, #28]	; (800b830 <vTaskPlaceOnEventList+0x44>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3318      	adds	r3, #24
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fe fe87 	bl	800a52e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b820:	2101      	movs	r1, #1
 800b822:	6838      	ldr	r0, [r7, #0]
 800b824:	f000 fa7c 	bl	800bd20 <prvAddCurrentTaskToDelayedList>
}
 800b828:	bf00      	nop
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2000117c 	.word	0x2000117c

0800b834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10a      	bne.n	800b85c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	617b      	str	r3, [r7, #20]
}
 800b858:	bf00      	nop
 800b85a:	e7fe      	b.n	800b85a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <vTaskPlaceOnEventListRestricted+0x54>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	3318      	adds	r3, #24
 800b862:	4619      	mov	r1, r3
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f7fe fe3e 	bl	800a4e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b870:	f04f 33ff 	mov.w	r3, #4294967295
 800b874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b876:	6879      	ldr	r1, [r7, #4]
 800b878:	68b8      	ldr	r0, [r7, #8]
 800b87a:	f000 fa51 	bl	800bd20 <prvAddCurrentTaskToDelayedList>
	}
 800b87e:	bf00      	nop
 800b880:	3718      	adds	r7, #24
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	2000117c 	.word	0x2000117c

0800b88c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d10a      	bne.n	800b8b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	60fb      	str	r3, [r7, #12]
}
 800b8b4:	bf00      	nop
 800b8b6:	e7fe      	b.n	800b8b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	3318      	adds	r3, #24
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fe fe6f 	bl	800a5a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8c2:	4b1e      	ldr	r3, [pc, #120]	; (800b93c <xTaskRemoveFromEventList+0xb0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d11d      	bne.n	800b906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fe66 	bl	800a5a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d8:	4b19      	ldr	r3, [pc, #100]	; (800b940 <xTaskRemoveFromEventList+0xb4>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d903      	bls.n	800b8e8 <xTaskRemoveFromEventList+0x5c>
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	4a16      	ldr	r2, [pc, #88]	; (800b940 <xTaskRemoveFromEventList+0xb4>)
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4a13      	ldr	r2, [pc, #76]	; (800b944 <xTaskRemoveFromEventList+0xb8>)
 800b8f6:	441a      	add	r2, r3
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f7fe fdf1 	bl	800a4e6 <vListInsertEnd>
 800b904:	e005      	b.n	800b912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	3318      	adds	r3, #24
 800b90a:	4619      	mov	r1, r3
 800b90c:	480e      	ldr	r0, [pc, #56]	; (800b948 <xTaskRemoveFromEventList+0xbc>)
 800b90e:	f7fe fdea 	bl	800a4e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b916:	4b0d      	ldr	r3, [pc, #52]	; (800b94c <xTaskRemoveFromEventList+0xc0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d905      	bls.n	800b92c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b920:	2301      	movs	r3, #1
 800b922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b924:	4b0a      	ldr	r3, [pc, #40]	; (800b950 <xTaskRemoveFromEventList+0xc4>)
 800b926:	2201      	movs	r2, #1
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	e001      	b.n	800b930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b92c:	2300      	movs	r3, #0
 800b92e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b930:	697b      	ldr	r3, [r7, #20]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20001678 	.word	0x20001678
 800b940:	20001658 	.word	0x20001658
 800b944:	20001180 	.word	0x20001180
 800b948:	20001610 	.word	0x20001610
 800b94c:	2000117c 	.word	0x2000117c
 800b950:	20001664 	.word	0x20001664

0800b954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <vTaskInternalSetTimeOutState+0x24>)
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b964:	4b05      	ldr	r3, [pc, #20]	; (800b97c <vTaskInternalSetTimeOutState+0x28>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	605a      	str	r2, [r3, #4]
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	20001668 	.word	0x20001668
 800b97c:	20001654 	.word	0x20001654

0800b980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b088      	sub	sp, #32
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	613b      	str	r3, [r7, #16]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60fb      	str	r3, [r7, #12]
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b9c2:	f000 fe7f 	bl	800c6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b9c6:	4b1d      	ldr	r3, [pc, #116]	; (800ba3c <xTaskCheckForTimeOut+0xbc>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	69ba      	ldr	r2, [r7, #24]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9de:	d102      	bne.n	800b9e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	61fb      	str	r3, [r7, #28]
 800b9e4:	e023      	b.n	800ba2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <xTaskCheckForTimeOut+0xc0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d007      	beq.n	800ba02 <xTaskCheckForTimeOut+0x82>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d302      	bcc.n	800ba02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	61fb      	str	r3, [r7, #28]
 800ba00:	e015      	b.n	800ba2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	697a      	ldr	r2, [r7, #20]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d20b      	bcs.n	800ba24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	1ad2      	subs	r2, r2, r3
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7ff ff9b 	bl	800b954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	e004      	b.n	800ba2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2200      	movs	r2, #0
 800ba28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba2e:	f000 fe79 	bl	800c724 <vPortExitCritical>

	return xReturn;
 800ba32:	69fb      	ldr	r3, [r7, #28]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3720      	adds	r7, #32
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	20001654 	.word	0x20001654
 800ba40:	20001668 	.word	0x20001668

0800ba44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba48:	4b03      	ldr	r3, [pc, #12]	; (800ba58 <vTaskMissedYield+0x14>)
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
}
 800ba4e:	bf00      	nop
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	20001664 	.word	0x20001664

0800ba5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba64:	f000 f852 	bl	800bb0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba68:	4b06      	ldr	r3, [pc, #24]	; (800ba84 <prvIdleTask+0x28>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d9f9      	bls.n	800ba64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba70:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <prvIdleTask+0x2c>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba80:	e7f0      	b.n	800ba64 <prvIdleTask+0x8>
 800ba82:	bf00      	nop
 800ba84:	20001180 	.word	0x20001180
 800ba88:	e000ed04 	.word	0xe000ed04

0800ba8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba92:	2300      	movs	r3, #0
 800ba94:	607b      	str	r3, [r7, #4]
 800ba96:	e00c      	b.n	800bab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4a12      	ldr	r2, [pc, #72]	; (800baec <prvInitialiseTaskLists+0x60>)
 800baa4:	4413      	add	r3, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe fcf0 	bl	800a48c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3301      	adds	r3, #1
 800bab0:	607b      	str	r3, [r7, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b37      	cmp	r3, #55	; 0x37
 800bab6:	d9ef      	bls.n	800ba98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bab8:	480d      	ldr	r0, [pc, #52]	; (800baf0 <prvInitialiseTaskLists+0x64>)
 800baba:	f7fe fce7 	bl	800a48c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800babe:	480d      	ldr	r0, [pc, #52]	; (800baf4 <prvInitialiseTaskLists+0x68>)
 800bac0:	f7fe fce4 	bl	800a48c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bac4:	480c      	ldr	r0, [pc, #48]	; (800baf8 <prvInitialiseTaskLists+0x6c>)
 800bac6:	f7fe fce1 	bl	800a48c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800baca:	480c      	ldr	r0, [pc, #48]	; (800bafc <prvInitialiseTaskLists+0x70>)
 800bacc:	f7fe fcde 	bl	800a48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bad0:	480b      	ldr	r0, [pc, #44]	; (800bb00 <prvInitialiseTaskLists+0x74>)
 800bad2:	f7fe fcdb 	bl	800a48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bad6:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <prvInitialiseTaskLists+0x78>)
 800bad8:	4a05      	ldr	r2, [pc, #20]	; (800baf0 <prvInitialiseTaskLists+0x64>)
 800bada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800badc:	4b0a      	ldr	r3, [pc, #40]	; (800bb08 <prvInitialiseTaskLists+0x7c>)
 800bade:	4a05      	ldr	r2, [pc, #20]	; (800baf4 <prvInitialiseTaskLists+0x68>)
 800bae0:	601a      	str	r2, [r3, #0]
}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20001180 	.word	0x20001180
 800baf0:	200015e0 	.word	0x200015e0
 800baf4:	200015f4 	.word	0x200015f4
 800baf8:	20001610 	.word	0x20001610
 800bafc:	20001624 	.word	0x20001624
 800bb00:	2000163c 	.word	0x2000163c
 800bb04:	20001608 	.word	0x20001608
 800bb08:	2000160c 	.word	0x2000160c

0800bb0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb12:	e019      	b.n	800bb48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb14:	f000 fdd6 	bl	800c6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb18:	4b10      	ldr	r3, [pc, #64]	; (800bb5c <prvCheckTasksWaitingTermination+0x50>)
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	3304      	adds	r3, #4
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fe fd3b 	bl	800a5a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb2a:	4b0d      	ldr	r3, [pc, #52]	; (800bb60 <prvCheckTasksWaitingTermination+0x54>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	4a0b      	ldr	r2, [pc, #44]	; (800bb60 <prvCheckTasksWaitingTermination+0x54>)
 800bb32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb34:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <prvCheckTasksWaitingTermination+0x58>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	4a0a      	ldr	r2, [pc, #40]	; (800bb64 <prvCheckTasksWaitingTermination+0x58>)
 800bb3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb3e:	f000 fdf1 	bl	800c724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 f810 	bl	800bb68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb48:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <prvCheckTasksWaitingTermination+0x58>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1e1      	bne.n	800bb14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb50:	bf00      	nop
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20001624 	.word	0x20001624
 800bb60:	20001650 	.word	0x20001650
 800bb64:	20001638 	.word	0x20001638

0800bb68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d108      	bne.n	800bb8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 ff8e 	bl	800caa0 <vPortFree>
				vPortFree( pxTCB );
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 ff8b 	bl	800caa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb8a:	e018      	b.n	800bbbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d103      	bne.n	800bb9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 ff82 	bl	800caa0 <vPortFree>
	}
 800bb9c:	e00f      	b.n	800bbbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d00a      	beq.n	800bbbe <prvDeleteTCB+0x56>
	__asm volatile
 800bba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	60fb      	str	r3, [r7, #12]
}
 800bbba:	bf00      	nop
 800bbbc:	e7fe      	b.n	800bbbc <prvDeleteTCB+0x54>
	}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <prvResetNextTaskUnblockTime+0x38>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d104      	bne.n	800bbe2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <prvResetNextTaskUnblockTime+0x3c>)
 800bbda:	f04f 32ff 	mov.w	r2, #4294967295
 800bbde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bbe0:	e008      	b.n	800bbf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <prvResetNextTaskUnblockTime+0x38>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <prvResetNextTaskUnblockTime+0x3c>)
 800bbf2:	6013      	str	r3, [r2, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20001608 	.word	0x20001608
 800bc04:	20001670 	.word	0x20001670

0800bc08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc0e:	4b0b      	ldr	r3, [pc, #44]	; (800bc3c <xTaskGetSchedulerState+0x34>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d102      	bne.n	800bc1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc16:	2301      	movs	r3, #1
 800bc18:	607b      	str	r3, [r7, #4]
 800bc1a:	e008      	b.n	800bc2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc1c:	4b08      	ldr	r3, [pc, #32]	; (800bc40 <xTaskGetSchedulerState+0x38>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc24:	2302      	movs	r3, #2
 800bc26:	607b      	str	r3, [r7, #4]
 800bc28:	e001      	b.n	800bc2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc2e:	687b      	ldr	r3, [r7, #4]
	}
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	2000165c 	.word	0x2000165c
 800bc40:	20001678 	.word	0x20001678

0800bc44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc50:	2300      	movs	r3, #0
 800bc52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d056      	beq.n	800bd08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc5a:	4b2e      	ldr	r3, [pc, #184]	; (800bd14 <xTaskPriorityDisinherit+0xd0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d00a      	beq.n	800bc7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60fb      	str	r3, [r7, #12]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	60bb      	str	r3, [r7, #8]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc9c:	1e5a      	subs	r2, r3, #1
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d02c      	beq.n	800bd08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d128      	bne.n	800bd08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	3304      	adds	r3, #4
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fe fc70 	bl	800a5a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd8:	4b0f      	ldr	r3, [pc, #60]	; (800bd18 <xTaskPriorityDisinherit+0xd4>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d903      	bls.n	800bce8 <xTaskPriorityDisinherit+0xa4>
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce4:	4a0c      	ldr	r2, [pc, #48]	; (800bd18 <xTaskPriorityDisinherit+0xd4>)
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <xTaskPriorityDisinherit+0xd8>)
 800bcf6:	441a      	add	r2, r3
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4610      	mov	r0, r2
 800bd00:	f7fe fbf1 	bl	800a4e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd04:	2301      	movs	r3, #1
 800bd06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd08:	697b      	ldr	r3, [r7, #20]
	}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	2000117c 	.word	0x2000117c
 800bd18:	20001658 	.word	0x20001658
 800bd1c:	20001180 	.word	0x20001180

0800bd20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd2a:	4b21      	ldr	r3, [pc, #132]	; (800bdb0 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd30:	4b20      	ldr	r3, [pc, #128]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fc32 	bl	800a5a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd42:	d10a      	bne.n	800bd5a <prvAddCurrentTaskToDelayedList+0x3a>
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d007      	beq.n	800bd5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd4a:	4b1a      	ldr	r3, [pc, #104]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4619      	mov	r1, r3
 800bd52:	4819      	ldr	r0, [pc, #100]	; (800bdb8 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd54:	f7fe fbc7 	bl	800a4e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd58:	e026      	b.n	800bda8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd62:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d209      	bcs.n	800bd86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	4b0f      	ldr	r3, [pc, #60]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f7fe fbd5 	bl	800a52e <vListInsert>
}
 800bd84:	e010      	b.n	800bda8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd86:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3304      	adds	r3, #4
 800bd90:	4619      	mov	r1, r3
 800bd92:	4610      	mov	r0, r2
 800bd94:	f7fe fbcb 	bl	800a52e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd98:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d202      	bcs.n	800bda8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bda2:	4a08      	ldr	r2, [pc, #32]	; (800bdc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	6013      	str	r3, [r2, #0]
}
 800bda8:	bf00      	nop
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20001654 	.word	0x20001654
 800bdb4:	2000117c 	.word	0x2000117c
 800bdb8:	2000163c 	.word	0x2000163c
 800bdbc:	2000160c 	.word	0x2000160c
 800bdc0:	20001608 	.word	0x20001608
 800bdc4:	20001670 	.word	0x20001670

0800bdc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08a      	sub	sp, #40	; 0x28
 800bdcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdd2:	f000 fb07 	bl	800c3e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdd6:	4b1c      	ldr	r3, [pc, #112]	; (800be48 <xTimerCreateTimerTask+0x80>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d021      	beq.n	800be22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bde6:	1d3a      	adds	r2, r7, #4
 800bde8:	f107 0108 	add.w	r1, r7, #8
 800bdec:	f107 030c 	add.w	r3, r7, #12
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f7fe fb31 	bl	800a458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	9202      	str	r2, [sp, #8]
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	2302      	movs	r3, #2
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	2300      	movs	r3, #0
 800be06:	460a      	mov	r2, r1
 800be08:	4910      	ldr	r1, [pc, #64]	; (800be4c <xTimerCreateTimerTask+0x84>)
 800be0a:	4811      	ldr	r0, [pc, #68]	; (800be50 <xTimerCreateTimerTask+0x88>)
 800be0c:	f7ff f8de 	bl	800afcc <xTaskCreateStatic>
 800be10:	4603      	mov	r3, r0
 800be12:	4a10      	ldr	r2, [pc, #64]	; (800be54 <xTimerCreateTimerTask+0x8c>)
 800be14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be16:	4b0f      	ldr	r3, [pc, #60]	; (800be54 <xTimerCreateTimerTask+0x8c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be1e:	2301      	movs	r3, #1
 800be20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10a      	bne.n	800be3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	613b      	str	r3, [r7, #16]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be3e:	697b      	ldr	r3, [r7, #20]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	200016ac 	.word	0x200016ac
 800be4c:	08013ad4 	.word	0x08013ad4
 800be50:	0800bf8d 	.word	0x0800bf8d
 800be54:	200016b0 	.word	0x200016b0

0800be58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08a      	sub	sp, #40	; 0x28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be66:	2300      	movs	r3, #0
 800be68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10a      	bne.n	800be86 <xTimerGenericCommand+0x2e>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	623b      	str	r3, [r7, #32]
}
 800be82:	bf00      	nop
 800be84:	e7fe      	b.n	800be84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <xTimerGenericCommand+0x98>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d02a      	beq.n	800bee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b05      	cmp	r3, #5
 800be9e:	dc18      	bgt.n	800bed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bea0:	f7ff feb2 	bl	800bc08 <xTaskGetSchedulerState>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	d109      	bne.n	800bebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800beaa:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <xTimerGenericCommand+0x98>)
 800beac:	6818      	ldr	r0, [r3, #0]
 800beae:	f107 0110 	add.w	r1, r7, #16
 800beb2:	2300      	movs	r3, #0
 800beb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb6:	f7fe fca1 	bl	800a7fc <xQueueGenericSend>
 800beba:	6278      	str	r0, [r7, #36]	; 0x24
 800bebc:	e012      	b.n	800bee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bebe:	4b0c      	ldr	r3, [pc, #48]	; (800bef0 <xTimerGenericCommand+0x98>)
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f107 0110 	add.w	r1, r7, #16
 800bec6:	2300      	movs	r3, #0
 800bec8:	2200      	movs	r2, #0
 800beca:	f7fe fc97 	bl	800a7fc <xQueueGenericSend>
 800bece:	6278      	str	r0, [r7, #36]	; 0x24
 800bed0:	e008      	b.n	800bee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bed2:	4b07      	ldr	r3, [pc, #28]	; (800bef0 <xTimerGenericCommand+0x98>)
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	f107 0110 	add.w	r1, r7, #16
 800beda:	2300      	movs	r3, #0
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	f7fe fd8b 	bl	800a9f8 <xQueueGenericSendFromISR>
 800bee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3728      	adds	r7, #40	; 0x28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	200016ac 	.word	0x200016ac

0800bef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af02      	add	r7, sp, #8
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800befe:	4b22      	ldr	r3, [pc, #136]	; (800bf88 <prvProcessExpiredTimer+0x94>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	3304      	adds	r3, #4
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fe fb47 	bl	800a5a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf18:	f003 0304 	and.w	r3, r3, #4
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d022      	beq.n	800bf66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	699a      	ldr	r2, [r3, #24]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	18d1      	adds	r1, r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	6978      	ldr	r0, [r7, #20]
 800bf2e:	f000 f8d1 	bl	800c0d4 <prvInsertTimerInActiveList>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d01f      	beq.n	800bf78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	2100      	movs	r1, #0
 800bf42:	6978      	ldr	r0, [r7, #20]
 800bf44:	f7ff ff88 	bl	800be58 <xTimerGenericCommand>
 800bf48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d113      	bne.n	800bf78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	60fb      	str	r3, [r7, #12]
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf6c:	f023 0301 	bic.w	r3, r3, #1
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	6a1b      	ldr	r3, [r3, #32]
 800bf7c:	6978      	ldr	r0, [r7, #20]
 800bf7e:	4798      	blx	r3
}
 800bf80:	bf00      	nop
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	200016a4 	.word	0x200016a4

0800bf8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf94:	f107 0308 	add.w	r3, r7, #8
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f000 f857 	bl	800c04c <prvGetNextExpireTime>
 800bf9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f000 f803 	bl	800bfb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bfaa:	f000 f8d5 	bl	800c158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfae:	e7f1      	b.n	800bf94 <prvTimerTask+0x8>

0800bfb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfba:	f7ff fa43 	bl	800b444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfbe:	f107 0308 	add.w	r3, r7, #8
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 f866 	bl	800c094 <prvSampleTimeNow>
 800bfc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d130      	bne.n	800c032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <prvProcessTimerOrBlockTask+0x3c>
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d806      	bhi.n	800bfec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bfde:	f7ff fa3f 	bl	800b460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bfe2:	68f9      	ldr	r1, [r7, #12]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7ff ff85 	bl	800bef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bfea:	e024      	b.n	800c036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d008      	beq.n	800c004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bff2:	4b13      	ldr	r3, [pc, #76]	; (800c040 <prvProcessTimerOrBlockTask+0x90>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <prvProcessTimerOrBlockTask+0x50>
 800bffc:	2301      	movs	r3, #1
 800bffe:	e000      	b.n	800c002 <prvProcessTimerOrBlockTask+0x52>
 800c000:	2300      	movs	r3, #0
 800c002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c004:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <prvProcessTimerOrBlockTask+0x94>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	4619      	mov	r1, r3
 800c012:	f7fe ffa7 	bl	800af64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c016:	f7ff fa23 	bl	800b460 <xTaskResumeAll>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d10a      	bne.n	800c036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c020:	4b09      	ldr	r3, [pc, #36]	; (800c048 <prvProcessTimerOrBlockTask+0x98>)
 800c022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c026:	601a      	str	r2, [r3, #0]
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	f3bf 8f6f 	isb	sy
}
 800c030:	e001      	b.n	800c036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c032:	f7ff fa15 	bl	800b460 <xTaskResumeAll>
}
 800c036:	bf00      	nop
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	200016a8 	.word	0x200016a8
 800c044:	200016ac 	.word	0x200016ac
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c054:	4b0e      	ldr	r3, [pc, #56]	; (800c090 <prvGetNextExpireTime+0x44>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <prvGetNextExpireTime+0x16>
 800c05e:	2201      	movs	r2, #1
 800c060:	e000      	b.n	800c064 <prvGetNextExpireTime+0x18>
 800c062:	2200      	movs	r2, #0
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d105      	bne.n	800c07c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <prvGetNextExpireTime+0x44>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]
 800c07a:	e001      	b.n	800c080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c080:	68fb      	ldr	r3, [r7, #12]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	200016a4 	.word	0x200016a4

0800c094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c09c:	f7ff fa7e 	bl	800b59c <xTaskGetTickCount>
 800c0a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0a2:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <prvSampleTimeNow+0x3c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d205      	bcs.n	800c0b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0ac:	f000 f936 	bl	800c31c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	e002      	b.n	800c0be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0be:	4a04      	ldr	r2, [pc, #16]	; (800c0d0 <prvSampleTimeNow+0x3c>)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	200016b4 	.word	0x200016b4

0800c0d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
 800c0e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d812      	bhi.n	800c120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	1ad2      	subs	r2, r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	429a      	cmp	r2, r3
 800c106:	d302      	bcc.n	800c10e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c108:	2301      	movs	r3, #1
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	e01b      	b.n	800c146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <prvInsertTimerInActiveList+0x7c>)
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	3304      	adds	r3, #4
 800c116:	4619      	mov	r1, r3
 800c118:	4610      	mov	r0, r2
 800c11a:	f7fe fa08 	bl	800a52e <vListInsert>
 800c11e:	e012      	b.n	800c146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d206      	bcs.n	800c136 <prvInsertTimerInActiveList+0x62>
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d302      	bcc.n	800c136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c130:	2301      	movs	r3, #1
 800c132:	617b      	str	r3, [r7, #20]
 800c134:	e007      	b.n	800c146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c136:	4b07      	ldr	r3, [pc, #28]	; (800c154 <prvInsertTimerInActiveList+0x80>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3304      	adds	r3, #4
 800c13e:	4619      	mov	r1, r3
 800c140:	4610      	mov	r0, r2
 800c142:	f7fe f9f4 	bl	800a52e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c146:	697b      	ldr	r3, [r7, #20]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3718      	adds	r7, #24
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	200016a8 	.word	0x200016a8
 800c154:	200016a4 	.word	0x200016a4

0800c158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08e      	sub	sp, #56	; 0x38
 800c15c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c15e:	e0ca      	b.n	800c2f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	da18      	bge.n	800c198 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c166:	1d3b      	adds	r3, r7, #4
 800c168:	3304      	adds	r3, #4
 800c16a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	61fb      	str	r3, [r7, #28]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c18e:	6850      	ldr	r0, [r2, #4]
 800c190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c192:	6892      	ldr	r2, [r2, #8]
 800c194:	4611      	mov	r1, r2
 800c196:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f2c0 80aa 	blt.w	800c2f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe f9f5 	bl	800a5a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff ff6b 	bl	800c094 <prvSampleTimeNow>
 800c1be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	f200 8097 	bhi.w	800c2f6 <prvProcessReceivedCommands+0x19e>
 800c1c8:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <prvProcessReceivedCommands+0x78>)
 800c1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ce:	bf00      	nop
 800c1d0:	0800c1f9 	.word	0x0800c1f9
 800c1d4:	0800c1f9 	.word	0x0800c1f9
 800c1d8:	0800c1f9 	.word	0x0800c1f9
 800c1dc:	0800c26d 	.word	0x0800c26d
 800c1e0:	0800c281 	.word	0x0800c281
 800c1e4:	0800c2cb 	.word	0x0800c2cb
 800c1e8:	0800c1f9 	.word	0x0800c1f9
 800c1ec:	0800c1f9 	.word	0x0800c1f9
 800c1f0:	0800c26d 	.word	0x0800c26d
 800c1f4:	0800c281 	.word	0x0800c281
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	b2da      	uxtb	r2, r3
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	18d1      	adds	r1, r2, r3
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c218:	f7ff ff5c 	bl	800c0d4 <prvInsertTimerInActiveList>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d069      	beq.n	800c2f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c230:	f003 0304 	and.w	r3, r3, #4
 800c234:	2b00      	cmp	r3, #0
 800c236:	d05e      	beq.n	800c2f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	441a      	add	r2, r3
 800c240:	2300      	movs	r3, #0
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	2300      	movs	r3, #0
 800c246:	2100      	movs	r1, #0
 800c248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24a:	f7ff fe05 	bl	800be58 <xTimerGenericCommand>
 800c24e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d14f      	bne.n	800c2f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	61bb      	str	r3, [r7, #24]
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c272:	f023 0301 	bic.w	r3, r3, #1
 800c276:	b2da      	uxtb	r2, r3
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c27e:	e03a      	b.n	800c2f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c286:	f043 0301 	orr.w	r3, r3, #1
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10a      	bne.n	800c2b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	617b      	str	r3, [r7, #20]
}
 800c2b2:	bf00      	nop
 800c2b4:	e7fe      	b.n	800c2b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	699a      	ldr	r2, [r3, #24]
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2bc:	18d1      	adds	r1, r2, r3
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c4:	f7ff ff06 	bl	800c0d4 <prvInsertTimerInActiveList>
					break;
 800c2c8:	e015      	b.n	800c2f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2d0:	f003 0302 	and.w	r3, r3, #2
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2da:	f000 fbe1 	bl	800caa0 <vPortFree>
 800c2de:	e00a      	b.n	800c2f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e6:	f023 0301 	bic.w	r3, r3, #1
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2f2:	e000      	b.n	800c2f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c2f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2f6:	4b08      	ldr	r3, [pc, #32]	; (800c318 <prvProcessReceivedCommands+0x1c0>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	1d39      	adds	r1, r7, #4
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fe fc16 	bl	800ab30 <xQueueReceive>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	f47f af2a 	bne.w	800c160 <prvProcessReceivedCommands+0x8>
	}
}
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	3730      	adds	r7, #48	; 0x30
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	200016ac 	.word	0x200016ac

0800c31c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c322:	e048      	b.n	800c3b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c324:	4b2d      	ldr	r3, [pc, #180]	; (800c3dc <prvSwitchTimerLists+0xc0>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c32e:	4b2b      	ldr	r3, [pc, #172]	; (800c3dc <prvSwitchTimerLists+0xc0>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3304      	adds	r3, #4
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fe f92f 	bl	800a5a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b00      	cmp	r3, #0
 800c356:	d02e      	beq.n	800c3b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4413      	add	r3, r2
 800c360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	429a      	cmp	r2, r3
 800c368:	d90e      	bls.n	800c388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c376:	4b19      	ldr	r3, [pc, #100]	; (800c3dc <prvSwitchTimerLists+0xc0>)
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4619      	mov	r1, r3
 800c380:	4610      	mov	r0, r2
 800c382:	f7fe f8d4 	bl	800a52e <vListInsert>
 800c386:	e016      	b.n	800c3b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c388:	2300      	movs	r3, #0
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	2300      	movs	r3, #0
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	2100      	movs	r1, #0
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff fd60 	bl	800be58 <xTimerGenericCommand>
 800c398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d10a      	bne.n	800c3b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	603b      	str	r3, [r7, #0]
}
 800c3b2:	bf00      	nop
 800c3b4:	e7fe      	b.n	800c3b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3b6:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <prvSwitchTimerLists+0xc0>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1b1      	bne.n	800c324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <prvSwitchTimerLists+0xc0>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3c6:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <prvSwitchTimerLists+0xc4>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a04      	ldr	r2, [pc, #16]	; (800c3dc <prvSwitchTimerLists+0xc0>)
 800c3cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3ce:	4a04      	ldr	r2, [pc, #16]	; (800c3e0 <prvSwitchTimerLists+0xc4>)
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	6013      	str	r3, [r2, #0]
}
 800c3d4:	bf00      	nop
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	200016a4 	.word	0x200016a4
 800c3e0:	200016a8 	.word	0x200016a8

0800c3e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3ea:	f000 f96b 	bl	800c6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3ee:	4b15      	ldr	r3, [pc, #84]	; (800c444 <prvCheckForValidListAndQueue+0x60>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d120      	bne.n	800c438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3f6:	4814      	ldr	r0, [pc, #80]	; (800c448 <prvCheckForValidListAndQueue+0x64>)
 800c3f8:	f7fe f848 	bl	800a48c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3fc:	4813      	ldr	r0, [pc, #76]	; (800c44c <prvCheckForValidListAndQueue+0x68>)
 800c3fe:	f7fe f845 	bl	800a48c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c402:	4b13      	ldr	r3, [pc, #76]	; (800c450 <prvCheckForValidListAndQueue+0x6c>)
 800c404:	4a10      	ldr	r2, [pc, #64]	; (800c448 <prvCheckForValidListAndQueue+0x64>)
 800c406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c408:	4b12      	ldr	r3, [pc, #72]	; (800c454 <prvCheckForValidListAndQueue+0x70>)
 800c40a:	4a10      	ldr	r2, [pc, #64]	; (800c44c <prvCheckForValidListAndQueue+0x68>)
 800c40c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c40e:	2300      	movs	r3, #0
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	4b11      	ldr	r3, [pc, #68]	; (800c458 <prvCheckForValidListAndQueue+0x74>)
 800c414:	4a11      	ldr	r2, [pc, #68]	; (800c45c <prvCheckForValidListAndQueue+0x78>)
 800c416:	2110      	movs	r1, #16
 800c418:	200a      	movs	r0, #10
 800c41a:	f7fe f953 	bl	800a6c4 <xQueueGenericCreateStatic>
 800c41e:	4603      	mov	r3, r0
 800c420:	4a08      	ldr	r2, [pc, #32]	; (800c444 <prvCheckForValidListAndQueue+0x60>)
 800c422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c424:	4b07      	ldr	r3, [pc, #28]	; (800c444 <prvCheckForValidListAndQueue+0x60>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d005      	beq.n	800c438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c42c:	4b05      	ldr	r3, [pc, #20]	; (800c444 <prvCheckForValidListAndQueue+0x60>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	490b      	ldr	r1, [pc, #44]	; (800c460 <prvCheckForValidListAndQueue+0x7c>)
 800c432:	4618      	mov	r0, r3
 800c434:	f7fe fd6c 	bl	800af10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c438:	f000 f974 	bl	800c724 <vPortExitCritical>
}
 800c43c:	bf00      	nop
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	200016ac 	.word	0x200016ac
 800c448:	2000167c 	.word	0x2000167c
 800c44c:	20001690 	.word	0x20001690
 800c450:	200016a4 	.word	0x200016a4
 800c454:	200016a8 	.word	0x200016a8
 800c458:	20001758 	.word	0x20001758
 800c45c:	200016b8 	.word	0x200016b8
 800c460:	08013adc 	.word	0x08013adc

0800c464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3b04      	subs	r3, #4
 800c474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f023 0201 	bic.w	r2, r3, #1
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3b04      	subs	r3, #4
 800c492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c494:	4a0c      	ldr	r2, [pc, #48]	; (800c4c8 <pxPortInitialiseStack+0x64>)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3b14      	subs	r3, #20
 800c49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3b04      	subs	r3, #4
 800c4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f06f 0202 	mvn.w	r2, #2
 800c4b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3b20      	subs	r3, #32
 800c4b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3714      	adds	r7, #20
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr
 800c4c8:	0800c4cd 	.word	0x0800c4cd

0800c4cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4d6:	4b12      	ldr	r3, [pc, #72]	; (800c520 <prvTaskExitError+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4de:	d00a      	beq.n	800c4f6 <prvTaskExitError+0x2a>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	60fb      	str	r3, [r7, #12]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <prvTaskExitError+0x28>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	60bb      	str	r3, [r7, #8]
}
 800c508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c50a:	bf00      	nop
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0fc      	beq.n	800c50c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	3714      	adds	r7, #20
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	200000c8 	.word	0x200000c8
	...

0800c530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <pxCurrentTCBConst2>)
 800c532:	6819      	ldr	r1, [r3, #0]
 800c534:	6808      	ldr	r0, [r1, #0]
 800c536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53a:	f380 8809 	msr	PSP, r0
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f04f 0000 	mov.w	r0, #0
 800c546:	f380 8811 	msr	BASEPRI, r0
 800c54a:	4770      	bx	lr
 800c54c:	f3af 8000 	nop.w

0800c550 <pxCurrentTCBConst2>:
 800c550:	2000117c 	.word	0x2000117c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c554:	bf00      	nop
 800c556:	bf00      	nop

0800c558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c558:	4808      	ldr	r0, [pc, #32]	; (800c57c <prvPortStartFirstTask+0x24>)
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	6800      	ldr	r0, [r0, #0]
 800c55e:	f380 8808 	msr	MSP, r0
 800c562:	f04f 0000 	mov.w	r0, #0
 800c566:	f380 8814 	msr	CONTROL, r0
 800c56a:	b662      	cpsie	i
 800c56c:	b661      	cpsie	f
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	df00      	svc	0
 800c578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c57a:	bf00      	nop
 800c57c:	e000ed08 	.word	0xe000ed08

0800c580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c586:	4b46      	ldr	r3, [pc, #280]	; (800c6a0 <xPortStartScheduler+0x120>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a46      	ldr	r2, [pc, #280]	; (800c6a4 <xPortStartScheduler+0x124>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d10a      	bne.n	800c5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	613b      	str	r3, [r7, #16]
}
 800c5a2:	bf00      	nop
 800c5a4:	e7fe      	b.n	800c5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5a6:	4b3e      	ldr	r3, [pc, #248]	; (800c6a0 <xPortStartScheduler+0x120>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a3f      	ldr	r2, [pc, #252]	; (800c6a8 <xPortStartScheduler+0x128>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d10a      	bne.n	800c5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	60fb      	str	r3, [r7, #12]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5c6:	4b39      	ldr	r3, [pc, #228]	; (800c6ac <xPortStartScheduler+0x12c>)
 800c5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	22ff      	movs	r2, #255	; 0xff
 800c5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	4b31      	ldr	r3, [pc, #196]	; (800c6b0 <xPortStartScheduler+0x130>)
 800c5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5ee:	4b31      	ldr	r3, [pc, #196]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c5f0:	2207      	movs	r2, #7
 800c5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5f4:	e009      	b.n	800c60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c5f6:	4b2f      	ldr	r3, [pc, #188]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	4a2d      	ldr	r2, [pc, #180]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c600:	78fb      	ldrb	r3, [r7, #3]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	005b      	lsls	r3, r3, #1
 800c606:	b2db      	uxtb	r3, r3
 800c608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c60a:	78fb      	ldrb	r3, [r7, #3]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c612:	2b80      	cmp	r3, #128	; 0x80
 800c614:	d0ef      	beq.n	800c5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c616:	4b27      	ldr	r3, [pc, #156]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f1c3 0307 	rsb	r3, r3, #7
 800c61e:	2b04      	cmp	r3, #4
 800c620:	d00a      	beq.n	800c638 <xPortStartScheduler+0xb8>
	__asm volatile
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	60bb      	str	r3, [r7, #8]
}
 800c634:	bf00      	nop
 800c636:	e7fe      	b.n	800c636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c638:	4b1e      	ldr	r3, [pc, #120]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	4a1d      	ldr	r2, [pc, #116]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c642:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c64a:	4a1a      	ldr	r2, [pc, #104]	; (800c6b4 <xPortStartScheduler+0x134>)
 800c64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	b2da      	uxtb	r2, r3
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c656:	4b18      	ldr	r3, [pc, #96]	; (800c6b8 <xPortStartScheduler+0x138>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a17      	ldr	r2, [pc, #92]	; (800c6b8 <xPortStartScheduler+0x138>)
 800c65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c662:	4b15      	ldr	r3, [pc, #84]	; (800c6b8 <xPortStartScheduler+0x138>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a14      	ldr	r2, [pc, #80]	; (800c6b8 <xPortStartScheduler+0x138>)
 800c668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c66e:	f000 f8dd 	bl	800c82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c672:	4b12      	ldr	r3, [pc, #72]	; (800c6bc <xPortStartScheduler+0x13c>)
 800c674:	2200      	movs	r2, #0
 800c676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c678:	f000 f8fc 	bl	800c874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c67c:	4b10      	ldr	r3, [pc, #64]	; (800c6c0 <xPortStartScheduler+0x140>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a0f      	ldr	r2, [pc, #60]	; (800c6c0 <xPortStartScheduler+0x140>)
 800c682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c688:	f7ff ff66 	bl	800c558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c68c:	f7ff f850 	bl	800b730 <vTaskSwitchContext>
	prvTaskExitError();
 800c690:	f7ff ff1c 	bl	800c4cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	e000ed00 	.word	0xe000ed00
 800c6a4:	410fc271 	.word	0x410fc271
 800c6a8:	410fc270 	.word	0x410fc270
 800c6ac:	e000e400 	.word	0xe000e400
 800c6b0:	200017a8 	.word	0x200017a8
 800c6b4:	200017ac 	.word	0x200017ac
 800c6b8:	e000ed20 	.word	0xe000ed20
 800c6bc:	200000c8 	.word	0x200000c8
 800c6c0:	e000ef34 	.word	0xe000ef34

0800c6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	607b      	str	r3, [r7, #4]
}
 800c6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6de:	4b0f      	ldr	r3, [pc, #60]	; (800c71c <vPortEnterCritical+0x58>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	4a0d      	ldr	r2, [pc, #52]	; (800c71c <vPortEnterCritical+0x58>)
 800c6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	; (800c71c <vPortEnterCritical+0x58>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d10f      	bne.n	800c710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6f0:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <vPortEnterCritical+0x5c>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d00a      	beq.n	800c710 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	603b      	str	r3, [r7, #0]
}
 800c70c:	bf00      	nop
 800c70e:	e7fe      	b.n	800c70e <vPortEnterCritical+0x4a>
	}
}
 800c710:	bf00      	nop
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	200000c8 	.word	0x200000c8
 800c720:	e000ed04 	.word	0xe000ed04

0800c724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c72a:	4b12      	ldr	r3, [pc, #72]	; (800c774 <vPortExitCritical+0x50>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10a      	bne.n	800c748 <vPortExitCritical+0x24>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	f383 8811 	msr	BASEPRI, r3
 800c73a:	f3bf 8f6f 	isb	sy
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	607b      	str	r3, [r7, #4]
}
 800c744:	bf00      	nop
 800c746:	e7fe      	b.n	800c746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c748:	4b0a      	ldr	r3, [pc, #40]	; (800c774 <vPortExitCritical+0x50>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	4a09      	ldr	r2, [pc, #36]	; (800c774 <vPortExitCritical+0x50>)
 800c750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c752:	4b08      	ldr	r3, [pc, #32]	; (800c774 <vPortExitCritical+0x50>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d105      	bne.n	800c766 <vPortExitCritical+0x42>
 800c75a:	2300      	movs	r3, #0
 800c75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	f383 8811 	msr	BASEPRI, r3
}
 800c764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c766:	bf00      	nop
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	200000c8 	.word	0x200000c8
	...

0800c780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c780:	f3ef 8009 	mrs	r0, PSP
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4b15      	ldr	r3, [pc, #84]	; (800c7e0 <pxCurrentTCBConst>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	f01e 0f10 	tst.w	lr, #16
 800c790:	bf08      	it	eq
 800c792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79a:	6010      	str	r0, [r2, #0]
 800c79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7a4:	f380 8811 	msr	BASEPRI, r0
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f7fe ffbe 	bl	800b730 <vTaskSwitchContext>
 800c7b4:	f04f 0000 	mov.w	r0, #0
 800c7b8:	f380 8811 	msr	BASEPRI, r0
 800c7bc:	bc09      	pop	{r0, r3}
 800c7be:	6819      	ldr	r1, [r3, #0]
 800c7c0:	6808      	ldr	r0, [r1, #0]
 800c7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c6:	f01e 0f10 	tst.w	lr, #16
 800c7ca:	bf08      	it	eq
 800c7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c7d0:	f380 8809 	msr	PSP, r0
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	f3af 8000 	nop.w

0800c7e0 <pxCurrentTCBConst>:
 800c7e0:	2000117c 	.word	0x2000117c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop

0800c7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	607b      	str	r3, [r7, #4]
}
 800c800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c802:	f7fe fedb 	bl	800b5bc <xTaskIncrementTick>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c80c:	4b06      	ldr	r3, [pc, #24]	; (800c828 <xPortSysTickHandler+0x40>)
 800c80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	2300      	movs	r3, #0
 800c816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	f383 8811 	msr	BASEPRI, r3
}
 800c81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	e000ed04 	.word	0xe000ed04

0800c82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c830:	4b0b      	ldr	r3, [pc, #44]	; (800c860 <vPortSetupTimerInterrupt+0x34>)
 800c832:	2200      	movs	r2, #0
 800c834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c836:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <vPortSetupTimerInterrupt+0x38>)
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c83c:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <vPortSetupTimerInterrupt+0x3c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a0a      	ldr	r2, [pc, #40]	; (800c86c <vPortSetupTimerInterrupt+0x40>)
 800c842:	fba2 2303 	umull	r2, r3, r2, r3
 800c846:	099b      	lsrs	r3, r3, #6
 800c848:	4a09      	ldr	r2, [pc, #36]	; (800c870 <vPortSetupTimerInterrupt+0x44>)
 800c84a:	3b01      	subs	r3, #1
 800c84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c84e:	4b04      	ldr	r3, [pc, #16]	; (800c860 <vPortSetupTimerInterrupt+0x34>)
 800c850:	2207      	movs	r2, #7
 800c852:	601a      	str	r2, [r3, #0]
}
 800c854:	bf00      	nop
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	e000e010 	.word	0xe000e010
 800c864:	e000e018 	.word	0xe000e018
 800c868:	20000004 	.word	0x20000004
 800c86c:	10624dd3 	.word	0x10624dd3
 800c870:	e000e014 	.word	0xe000e014

0800c874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c884 <vPortEnableVFP+0x10>
 800c878:	6801      	ldr	r1, [r0, #0]
 800c87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c87e:	6001      	str	r1, [r0, #0]
 800c880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c882:	bf00      	nop
 800c884:	e000ed88 	.word	0xe000ed88

0800c888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c88e:	f3ef 8305 	mrs	r3, IPSR
 800c892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b0f      	cmp	r3, #15
 800c898:	d914      	bls.n	800c8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c89a:	4a17      	ldr	r2, [pc, #92]	; (800c8f8 <vPortValidateInterruptPriority+0x70>)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4413      	add	r3, r2
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8a4:	4b15      	ldr	r3, [pc, #84]	; (800c8fc <vPortValidateInterruptPriority+0x74>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	7afa      	ldrb	r2, [r7, #11]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d20a      	bcs.n	800c8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	607b      	str	r3, [r7, #4]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8c4:	4b0e      	ldr	r3, [pc, #56]	; (800c900 <vPortValidateInterruptPriority+0x78>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c8cc:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <vPortValidateInterruptPriority+0x7c>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d90a      	bls.n	800c8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d8:	f383 8811 	msr	BASEPRI, r3
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	f3bf 8f4f 	dsb	sy
 800c8e4:	603b      	str	r3, [r7, #0]
}
 800c8e6:	bf00      	nop
 800c8e8:	e7fe      	b.n	800c8e8 <vPortValidateInterruptPriority+0x60>
	}
 800c8ea:	bf00      	nop
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	e000e3f0 	.word	0xe000e3f0
 800c8fc:	200017a8 	.word	0x200017a8
 800c900:	e000ed0c 	.word	0xe000ed0c
 800c904:	200017ac 	.word	0x200017ac

0800c908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08a      	sub	sp, #40	; 0x28
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c910:	2300      	movs	r3, #0
 800c912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c914:	f7fe fd96 	bl	800b444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c918:	4b5b      	ldr	r3, [pc, #364]	; (800ca88 <pvPortMalloc+0x180>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c920:	f000 f920 	bl	800cb64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c924:	4b59      	ldr	r3, [pc, #356]	; (800ca8c <pvPortMalloc+0x184>)
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4013      	ands	r3, r2
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f040 8093 	bne.w	800ca58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d01d      	beq.n	800c974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c938:	2208      	movs	r2, #8
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4413      	add	r3, r2
 800c93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f003 0307 	and.w	r3, r3, #7
 800c946:	2b00      	cmp	r3, #0
 800c948:	d014      	beq.n	800c974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f023 0307 	bic.w	r3, r3, #7
 800c950:	3308      	adds	r3, #8
 800c952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f003 0307 	and.w	r3, r3, #7
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00a      	beq.n	800c974 <pvPortMalloc+0x6c>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	617b      	str	r3, [r7, #20]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d06e      	beq.n	800ca58 <pvPortMalloc+0x150>
 800c97a:	4b45      	ldr	r3, [pc, #276]	; (800ca90 <pvPortMalloc+0x188>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	429a      	cmp	r2, r3
 800c982:	d869      	bhi.n	800ca58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c984:	4b43      	ldr	r3, [pc, #268]	; (800ca94 <pvPortMalloc+0x18c>)
 800c986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c988:	4b42      	ldr	r3, [pc, #264]	; (800ca94 <pvPortMalloc+0x18c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c98e:	e004      	b.n	800c99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d903      	bls.n	800c9ac <pvPortMalloc+0xa4>
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1f1      	bne.n	800c990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9ac:	4b36      	ldr	r3, [pc, #216]	; (800ca88 <pvPortMalloc+0x180>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d050      	beq.n	800ca58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9b6:	6a3b      	ldr	r3, [r7, #32]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2208      	movs	r2, #8
 800c9bc:	4413      	add	r3, r2
 800c9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	6a3b      	ldr	r3, [r7, #32]
 800c9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	1ad2      	subs	r2, r2, r3
 800c9d0:	2308      	movs	r3, #8
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d91f      	bls.n	800ca18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4413      	add	r3, r2
 800c9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	f003 0307 	and.w	r3, r3, #7
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00a      	beq.n	800ca00 <pvPortMalloc+0xf8>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	613b      	str	r3, [r7, #16]
}
 800c9fc:	bf00      	nop
 800c9fe:	e7fe      	b.n	800c9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	685a      	ldr	r2, [r3, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	1ad2      	subs	r2, r2, r3
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca12:	69b8      	ldr	r0, [r7, #24]
 800ca14:	f000 f908 	bl	800cc28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca18:	4b1d      	ldr	r3, [pc, #116]	; (800ca90 <pvPortMalloc+0x188>)
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	1ad3      	subs	r3, r2, r3
 800ca22:	4a1b      	ldr	r2, [pc, #108]	; (800ca90 <pvPortMalloc+0x188>)
 800ca24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca26:	4b1a      	ldr	r3, [pc, #104]	; (800ca90 <pvPortMalloc+0x188>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	4b1b      	ldr	r3, [pc, #108]	; (800ca98 <pvPortMalloc+0x190>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d203      	bcs.n	800ca3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca32:	4b17      	ldr	r3, [pc, #92]	; (800ca90 <pvPortMalloc+0x188>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a18      	ldr	r2, [pc, #96]	; (800ca98 <pvPortMalloc+0x190>)
 800ca38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <pvPortMalloc+0x184>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	431a      	orrs	r2, r3
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca4e:	4b13      	ldr	r3, [pc, #76]	; (800ca9c <pvPortMalloc+0x194>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3301      	adds	r3, #1
 800ca54:	4a11      	ldr	r2, [pc, #68]	; (800ca9c <pvPortMalloc+0x194>)
 800ca56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca58:	f7fe fd02 	bl	800b460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f003 0307 	and.w	r3, r3, #7
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <pvPortMalloc+0x174>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	f383 8811 	msr	BASEPRI, r3
 800ca6e:	f3bf 8f6f 	isb	sy
 800ca72:	f3bf 8f4f 	dsb	sy
 800ca76:	60fb      	str	r3, [r7, #12]
}
 800ca78:	bf00      	nop
 800ca7a:	e7fe      	b.n	800ca7a <pvPortMalloc+0x172>
	return pvReturn;
 800ca7c:	69fb      	ldr	r3, [r7, #28]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3728      	adds	r7, #40	; 0x28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	200053b8 	.word	0x200053b8
 800ca8c:	200053cc 	.word	0x200053cc
 800ca90:	200053bc 	.word	0x200053bc
 800ca94:	200053b0 	.word	0x200053b0
 800ca98:	200053c0 	.word	0x200053c0
 800ca9c:	200053c4 	.word	0x200053c4

0800caa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d04d      	beq.n	800cb4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cab2:	2308      	movs	r3, #8
 800cab4:	425b      	negs	r3, r3
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	4413      	add	r3, r2
 800caba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	4b24      	ldr	r3, [pc, #144]	; (800cb58 <vPortFree+0xb8>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4013      	ands	r3, r2
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10a      	bne.n	800cae4 <vPortFree+0x44>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	60fb      	str	r3, [r7, #12]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00a      	beq.n	800cb02 <vPortFree+0x62>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	60bb      	str	r3, [r7, #8]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <vPortFree+0xb8>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d01e      	beq.n	800cb4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11a      	bne.n	800cb4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <vPortFree+0xb8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	43db      	mvns	r3, r3
 800cb22:	401a      	ands	r2, r3
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb28:	f7fe fc8c 	bl	800b444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	685a      	ldr	r2, [r3, #4]
 800cb30:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <vPortFree+0xbc>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4413      	add	r3, r2
 800cb36:	4a09      	ldr	r2, [pc, #36]	; (800cb5c <vPortFree+0xbc>)
 800cb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb3a:	6938      	ldr	r0, [r7, #16]
 800cb3c:	f000 f874 	bl	800cc28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb40:	4b07      	ldr	r3, [pc, #28]	; (800cb60 <vPortFree+0xc0>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3301      	adds	r3, #1
 800cb46:	4a06      	ldr	r2, [pc, #24]	; (800cb60 <vPortFree+0xc0>)
 800cb48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb4a:	f7fe fc89 	bl	800b460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb4e:	bf00      	nop
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	200053cc 	.word	0x200053cc
 800cb5c:	200053bc 	.word	0x200053bc
 800cb60:	200053c8 	.word	0x200053c8

0800cb64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cb6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb70:	4b27      	ldr	r3, [pc, #156]	; (800cc10 <prvHeapInit+0xac>)
 800cb72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f003 0307 	and.w	r3, r3, #7
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00c      	beq.n	800cb98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3307      	adds	r3, #7
 800cb82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f023 0307 	bic.w	r3, r3, #7
 800cb8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb8c:	68ba      	ldr	r2, [r7, #8]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	4a1f      	ldr	r2, [pc, #124]	; (800cc10 <prvHeapInit+0xac>)
 800cb94:	4413      	add	r3, r2
 800cb96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb9c:	4a1d      	ldr	r2, [pc, #116]	; (800cc14 <prvHeapInit+0xb0>)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cba2:	4b1c      	ldr	r3, [pc, #112]	; (800cc14 <prvHeapInit+0xb0>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	4413      	add	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	1a9b      	subs	r3, r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 0307 	bic.w	r3, r3, #7
 800cbbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	4a15      	ldr	r2, [pc, #84]	; (800cc18 <prvHeapInit+0xb4>)
 800cbc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbc6:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <prvHeapInit+0xb4>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbce:	4b12      	ldr	r3, [pc, #72]	; (800cc18 <prvHeapInit+0xb4>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	1ad2      	subs	r2, r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	; (800cc18 <prvHeapInit+0xb4>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	4a0a      	ldr	r2, [pc, #40]	; (800cc1c <prvHeapInit+0xb8>)
 800cbf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	4a09      	ldr	r2, [pc, #36]	; (800cc20 <prvHeapInit+0xbc>)
 800cbfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbfc:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <prvHeapInit+0xc0>)
 800cbfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc02:	601a      	str	r2, [r3, #0]
}
 800cc04:	bf00      	nop
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	200017b0 	.word	0x200017b0
 800cc14:	200053b0 	.word	0x200053b0
 800cc18:	200053b8 	.word	0x200053b8
 800cc1c:	200053c0 	.word	0x200053c0
 800cc20:	200053bc 	.word	0x200053bc
 800cc24:	200053cc 	.word	0x200053cc

0800cc28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc30:	4b28      	ldr	r3, [pc, #160]	; (800ccd4 <prvInsertBlockIntoFreeList+0xac>)
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	e002      	b.n	800cc3c <prvInsertBlockIntoFreeList+0x14>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d8f7      	bhi.n	800cc36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	4413      	add	r3, r2
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d108      	bne.n	800cc6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	441a      	add	r2, r3
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	441a      	add	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d118      	bne.n	800ccb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d00d      	beq.n	800cca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	441a      	add	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	e008      	b.n	800ccb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cca6:	4b0c      	ldr	r3, [pc, #48]	; (800ccd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	e003      	b.n	800ccb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d002      	beq.n	800ccc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccc6:	bf00      	nop
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	200053b0 	.word	0x200053b0
 800ccd8:	200053b8 	.word	0x200053b8

0800ccdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cce0:	2201      	movs	r2, #1
 800cce2:	4912      	ldr	r1, [pc, #72]	; (800cd2c <MX_USB_DEVICE_Init+0x50>)
 800cce4:	4812      	ldr	r0, [pc, #72]	; (800cd30 <MX_USB_DEVICE_Init+0x54>)
 800cce6:	f7fc f907 	bl	8008ef8 <USBD_Init>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d004      	beq.n	800ccfa <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800ccf0:	4b10      	ldr	r3, [pc, #64]	; (800cd34 <MX_USB_DEVICE_Init+0x58>)
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ccf6:	f7f5 f883 	bl	8001e00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ccfa:	490f      	ldr	r1, [pc, #60]	; (800cd38 <MX_USB_DEVICE_Init+0x5c>)
 800ccfc:	480c      	ldr	r0, [pc, #48]	; (800cd30 <MX_USB_DEVICE_Init+0x54>)
 800ccfe:	f7fc f92b 	bl	8008f58 <USBD_RegisterClass>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d004      	beq.n	800cd12 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800cd08:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <MX_USB_DEVICE_Init+0x58>)
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cd0e:	f7f5 f877 	bl	8001e00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd12:	4807      	ldr	r0, [pc, #28]	; (800cd30 <MX_USB_DEVICE_Init+0x54>)
 800cd14:	f7fc f947 	bl	8008fa6 <USBD_Start>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d004      	beq.n	800cd28 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800cd1e:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <MX_USB_DEVICE_Init+0x58>)
 800cd20:	2201      	movs	r2, #1
 800cd22:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800cd24:	f7f5 f86c 	bl	8001e00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd28:	bf00      	nop
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	200000cc 	.word	0x200000cc
 800cd30:	2000547c 	.word	0x2000547c
 800cd34:	200053d0 	.word	0x200053d0
 800cd38:	20000018 	.word	0x20000018

0800cd3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	2212      	movs	r2, #18
 800cd4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd4e:	4b03      	ldr	r3, [pc, #12]	; (800cd5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr
 800cd5c:	200000e8 	.word	0x200000e8

0800cd60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	4603      	mov	r3, r0
 800cd68:	6039      	str	r1, [r7, #0]
 800cd6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2204      	movs	r2, #4
 800cd70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd72:	4b03      	ldr	r3, [pc, #12]	; (800cd80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	200000fc 	.word	0x200000fc

0800cd84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	6039      	str	r1, [r7, #0]
 800cd8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd90:	79fb      	ldrb	r3, [r7, #7]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d105      	bne.n	800cda2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4907      	ldr	r1, [pc, #28]	; (800cdb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd9a:	4808      	ldr	r0, [pc, #32]	; (800cdbc <USBD_FS_ProductStrDescriptor+0x38>)
 800cd9c:	f7fd f943 	bl	800a026 <USBD_GetString>
 800cda0:	e004      	b.n	800cdac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	4904      	ldr	r1, [pc, #16]	; (800cdb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cda6:	4805      	ldr	r0, [pc, #20]	; (800cdbc <USBD_FS_ProductStrDescriptor+0x38>)
 800cda8:	f7fd f93d 	bl	800a026 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdac:	4b02      	ldr	r3, [pc, #8]	; (800cdb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3708      	adds	r7, #8
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	2000574c 	.word	0x2000574c
 800cdbc:	08013ae4 	.word	0x08013ae4

0800cdc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdcc:	683a      	ldr	r2, [r7, #0]
 800cdce:	4904      	ldr	r1, [pc, #16]	; (800cde0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cdd0:	4804      	ldr	r0, [pc, #16]	; (800cde4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cdd2:	f7fd f928 	bl	800a026 <USBD_GetString>
  return USBD_StrDesc;
 800cdd6:	4b02      	ldr	r3, [pc, #8]	; (800cde0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	2000574c 	.word	0x2000574c
 800cde4:	08013afc 	.word	0x08013afc

0800cde8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	221a      	movs	r2, #26
 800cdf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdfa:	f000 f843 	bl	800ce84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdfe:	4b02      	ldr	r3, [pc, #8]	; (800ce08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}
 800ce08:	20000100 	.word	0x20000100

0800ce0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	6039      	str	r1, [r7, #0]
 800ce16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d105      	bne.n	800ce2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	4907      	ldr	r1, [pc, #28]	; (800ce40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce22:	4808      	ldr	r0, [pc, #32]	; (800ce44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce24:	f7fd f8ff 	bl	800a026 <USBD_GetString>
 800ce28:	e004      	b.n	800ce34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	4904      	ldr	r1, [pc, #16]	; (800ce40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce2e:	4805      	ldr	r0, [pc, #20]	; (800ce44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce30:	f7fd f8f9 	bl	800a026 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	2000574c 	.word	0x2000574c
 800ce44:	08013b10 	.word	0x08013b10

0800ce48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce54:	79fb      	ldrb	r3, [r7, #7]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d105      	bne.n	800ce66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	4907      	ldr	r1, [pc, #28]	; (800ce7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce5e:	4808      	ldr	r0, [pc, #32]	; (800ce80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce60:	f7fd f8e1 	bl	800a026 <USBD_GetString>
 800ce64:	e004      	b.n	800ce70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	4904      	ldr	r1, [pc, #16]	; (800ce7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce6a:	4805      	ldr	r0, [pc, #20]	; (800ce80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce6c:	f7fd f8db 	bl	800a026 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce70:	4b02      	ldr	r3, [pc, #8]	; (800ce7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	2000574c 	.word	0x2000574c
 800ce80:	08013b1c 	.word	0x08013b1c

0800ce84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce8a:	4b0f      	ldr	r3, [pc, #60]	; (800cec8 <Get_SerialNum+0x44>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce90:	4b0e      	ldr	r3, [pc, #56]	; (800cecc <Get_SerialNum+0x48>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce96:	4b0e      	ldr	r3, [pc, #56]	; (800ced0 <Get_SerialNum+0x4c>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce9c:	68fa      	ldr	r2, [r7, #12]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4413      	add	r3, r2
 800cea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d009      	beq.n	800cebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ceaa:	2208      	movs	r2, #8
 800ceac:	4909      	ldr	r1, [pc, #36]	; (800ced4 <Get_SerialNum+0x50>)
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 f814 	bl	800cedc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ceb4:	2204      	movs	r2, #4
 800ceb6:	4908      	ldr	r1, [pc, #32]	; (800ced8 <Get_SerialNum+0x54>)
 800ceb8:	68b8      	ldr	r0, [r7, #8]
 800ceba:	f000 f80f 	bl	800cedc <IntToUnicode>
  }
}
 800cebe:	bf00      	nop
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	1fff7a10 	.word	0x1fff7a10
 800cecc:	1fff7a14 	.word	0x1fff7a14
 800ced0:	1fff7a18 	.word	0x1fff7a18
 800ced4:	20000102 	.word	0x20000102
 800ced8:	20000112 	.word	0x20000112

0800cedc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cedc:	b480      	push	{r7}
 800cede:	b087      	sub	sp, #28
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ceea:	2300      	movs	r3, #0
 800ceec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ceee:	2300      	movs	r3, #0
 800cef0:	75fb      	strb	r3, [r7, #23]
 800cef2:	e027      	b.n	800cf44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	0f1b      	lsrs	r3, r3, #28
 800cef8:	2b09      	cmp	r3, #9
 800cefa:	d80b      	bhi.n	800cf14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	0f1b      	lsrs	r3, r3, #28
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	7dfb      	ldrb	r3, [r7, #23]
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	4619      	mov	r1, r3
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	440b      	add	r3, r1
 800cf0c:	3230      	adds	r2, #48	; 0x30
 800cf0e:	b2d2      	uxtb	r2, r2
 800cf10:	701a      	strb	r2, [r3, #0]
 800cf12:	e00a      	b.n	800cf2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	0f1b      	lsrs	r3, r3, #28
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	4619      	mov	r1, r3
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	440b      	add	r3, r1
 800cf24:	3237      	adds	r2, #55	; 0x37
 800cf26:	b2d2      	uxtb	r2, r2
 800cf28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	011b      	lsls	r3, r3, #4
 800cf2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	005b      	lsls	r3, r3, #1
 800cf34:	3301      	adds	r3, #1
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	4413      	add	r3, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	3301      	adds	r3, #1
 800cf42:	75fb      	strb	r3, [r7, #23]
 800cf44:	7dfa      	ldrb	r2, [r7, #23]
 800cf46:	79fb      	ldrb	r3, [r7, #7]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d3d3      	bcc.n	800cef4 <IntToUnicode+0x18>
  }
}
 800cf4c:	bf00      	nop
 800cf4e:	bf00      	nop
 800cf50:	371c      	adds	r7, #28
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
	...

0800cf5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	; 0x28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf64:	f107 0314 	add.w	r3, r7, #20
 800cf68:	2200      	movs	r2, #0
 800cf6a:	601a      	str	r2, [r3, #0]
 800cf6c:	605a      	str	r2, [r3, #4]
 800cf6e:	609a      	str	r2, [r3, #8]
 800cf70:	60da      	str	r2, [r3, #12]
 800cf72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf7c:	d13a      	bne.n	800cff4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
 800cf82:	4b1e      	ldr	r3, [pc, #120]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf86:	4a1d      	ldr	r2, [pc, #116]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cf88:	f043 0301 	orr.w	r3, r3, #1
 800cf8c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf8e:	4b1b      	ldr	r3, [pc, #108]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cf90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	613b      	str	r3, [r7, #16]
 800cf98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfac:	230a      	movs	r3, #10
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfb0:	f107 0314 	add.w	r3, r7, #20
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4812      	ldr	r0, [pc, #72]	; (800d000 <HAL_PCD_MspInit+0xa4>)
 800cfb8:	f7f5 fda8 	bl	8002b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfbc:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cfbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc0:	4a0e      	ldr	r2, [pc, #56]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cfc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfc6:	6353      	str	r3, [r2, #52]	; 0x34
 800cfc8:	2300      	movs	r3, #0
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cfce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfd0:	4a0a      	ldr	r2, [pc, #40]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cfd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfd6:	6453      	str	r3, [r2, #68]	; 0x44
 800cfd8:	4b08      	ldr	r3, [pc, #32]	; (800cffc <HAL_PCD_MspInit+0xa0>)
 800cfda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2105      	movs	r1, #5
 800cfe8:	2043      	movs	r0, #67	; 0x43
 800cfea:	f7f5 fd65 	bl	8002ab8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfee:	2043      	movs	r0, #67	; 0x43
 800cff0:	f7f5 fd7e 	bl	8002af0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cff4:	bf00      	nop
 800cff6:	3728      	adds	r7, #40	; 0x28
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	40023800 	.word	0x40023800
 800d000:	40020000 	.word	0x40020000

0800d004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d018:	4619      	mov	r1, r3
 800d01a:	4610      	mov	r0, r2
 800d01c:	f7fc f80e 	bl	800903c <USBD_LL_SetupStage>
}
 800d020:	bf00      	nop
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}

0800d028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d03a:	78fa      	ldrb	r2, [r7, #3]
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	4613      	mov	r3, r2
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	1a9b      	subs	r3, r3, r2
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	440b      	add	r3, r1
 800d048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	78fb      	ldrb	r3, [r7, #3]
 800d050:	4619      	mov	r1, r3
 800d052:	f7fc f848 	bl	80090e6 <USBD_LL_DataOutStage>
}
 800d056:	bf00      	nop
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b082      	sub	sp, #8
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
 800d066:	460b      	mov	r3, r1
 800d068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d070:	78fa      	ldrb	r2, [r7, #3]
 800d072:	6879      	ldr	r1, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	00db      	lsls	r3, r3, #3
 800d078:	1a9b      	subs	r3, r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	440b      	add	r3, r1
 800d07e:	3348      	adds	r3, #72	; 0x48
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	4619      	mov	r1, r3
 800d086:	f7fc f891 	bl	80091ac <USBD_LL_DataInStage>
}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b082      	sub	sp, #8
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fc f9a5 	bl	80093f0 <USBD_LL_SOF>
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]
 800d0c6:	e008      	b.n	800d0da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d102      	bne.n	800d0d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	73fb      	strb	r3, [r7, #15]
 800d0d4:	e001      	b.n	800d0da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0d6:	f7f4 fe93 	bl	8001e00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0e0:	7bfa      	ldrb	r2, [r7, #15]
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fc f945 	bl	8009374 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fc f8f1 	bl	80092d8 <USBD_LL_Reset>
}
 800d0f6:	bf00      	nop
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
	...

0800d100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fc f940 	bl	8009394 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d126:	f043 0301 	orr.w	r3, r3, #1
 800d12a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a1b      	ldr	r3, [r3, #32]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d005      	beq.n	800d140 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d134:	4b04      	ldr	r3, [pc, #16]	; (800d148 <HAL_PCD_SuspendCallback+0x48>)
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	4a03      	ldr	r2, [pc, #12]	; (800d148 <HAL_PCD_SuspendCallback+0x48>)
 800d13a:	f043 0306 	orr.w	r3, r3, #6
 800d13e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	e000ed00 	.word	0xe000ed00

0800d14c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fc f930 	bl	80093c0 <USBD_LL_Resume>
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	460b      	mov	r3, r1
 800d172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d17a:	78fa      	ldrb	r2, [r7, #3]
 800d17c:	4611      	mov	r1, r2
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fc f97e 	bl	8009480 <USBD_LL_IsoOUTIncomplete>
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	460b      	mov	r3, r1
 800d196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d19e:	78fa      	ldrb	r2, [r7, #3]
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7fc f946 	bl	8009434 <USBD_LL_IsoINIncomplete>
}
 800d1a8:	bf00      	nop
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fc f984 	bl	80094cc <USBD_LL_DevConnected>
}
 800d1c4:	bf00      	nop
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fc f981 	bl	80094e2 <USBD_LL_DevDisconnected>
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d13c      	bne.n	800d272 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1f8:	4a20      	ldr	r2, [pc, #128]	; (800d27c <USBD_LL_Init+0x94>)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a1e      	ldr	r2, [pc, #120]	; (800d27c <USBD_LL_Init+0x94>)
 800d204:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d208:	4b1c      	ldr	r3, [pc, #112]	; (800d27c <USBD_LL_Init+0x94>)
 800d20a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d20e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d210:	4b1a      	ldr	r3, [pc, #104]	; (800d27c <USBD_LL_Init+0x94>)
 800d212:	2206      	movs	r2, #6
 800d214:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d216:	4b19      	ldr	r3, [pc, #100]	; (800d27c <USBD_LL_Init+0x94>)
 800d218:	2202      	movs	r2, #2
 800d21a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d21c:	4b17      	ldr	r3, [pc, #92]	; (800d27c <USBD_LL_Init+0x94>)
 800d21e:	2200      	movs	r2, #0
 800d220:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d222:	4b16      	ldr	r3, [pc, #88]	; (800d27c <USBD_LL_Init+0x94>)
 800d224:	2202      	movs	r2, #2
 800d226:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d228:	4b14      	ldr	r3, [pc, #80]	; (800d27c <USBD_LL_Init+0x94>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d22e:	4b13      	ldr	r3, [pc, #76]	; (800d27c <USBD_LL_Init+0x94>)
 800d230:	2200      	movs	r2, #0
 800d232:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d234:	4b11      	ldr	r3, [pc, #68]	; (800d27c <USBD_LL_Init+0x94>)
 800d236:	2200      	movs	r2, #0
 800d238:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d23a:	4b10      	ldr	r3, [pc, #64]	; (800d27c <USBD_LL_Init+0x94>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d240:	4b0e      	ldr	r3, [pc, #56]	; (800d27c <USBD_LL_Init+0x94>)
 800d242:	2200      	movs	r2, #0
 800d244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d246:	480d      	ldr	r0, [pc, #52]	; (800d27c <USBD_LL_Init+0x94>)
 800d248:	f7f6 fa81 	bl	800374e <HAL_PCD_Init>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d252:	f7f4 fdd5 	bl	8001e00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d256:	2180      	movs	r1, #128	; 0x80
 800d258:	4808      	ldr	r0, [pc, #32]	; (800d27c <USBD_LL_Init+0x94>)
 800d25a:	f7f7 fbfa 	bl	8004a52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d25e:	2240      	movs	r2, #64	; 0x40
 800d260:	2100      	movs	r1, #0
 800d262:	4806      	ldr	r0, [pc, #24]	; (800d27c <USBD_LL_Init+0x94>)
 800d264:	f7f7 fbae 	bl	80049c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d268:	2280      	movs	r2, #128	; 0x80
 800d26a:	2101      	movs	r1, #1
 800d26c:	4803      	ldr	r0, [pc, #12]	; (800d27c <USBD_LL_Init+0x94>)
 800d26e:	f7f7 fba9 	bl	80049c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	2000594c 	.word	0x2000594c

0800d280 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d296:	4618      	mov	r0, r3
 800d298:	f7f6 fb7d 	bl	8003996 <HAL_PCD_Start>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f97e 	bl	800d5a4 <USBD_Get_USB_Status>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b084      	sub	sp, #16
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	4608      	mov	r0, r1
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	70fb      	strb	r3, [r7, #3]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70bb      	strb	r3, [r7, #2]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2de:	78bb      	ldrb	r3, [r7, #2]
 800d2e0:	883a      	ldrh	r2, [r7, #0]
 800d2e2:	78f9      	ldrb	r1, [r7, #3]
 800d2e4:	f7f6 ff8e 	bl	8004204 <HAL_PCD_EP_Open>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ec:	7bfb      	ldrb	r3, [r7, #15]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 f958 	bl	800d5a4 <USBD_Get_USB_Status>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b084      	sub	sp, #16
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	460b      	mov	r3, r1
 800d30c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d31c:	78fa      	ldrb	r2, [r7, #3]
 800d31e:	4611      	mov	r1, r2
 800d320:	4618      	mov	r0, r3
 800d322:	f7f6 ffd7 	bl	80042d4 <HAL_PCD_EP_Close>
 800d326:	4603      	mov	r3, r0
 800d328:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f000 f939 	bl	800d5a4 <USBD_Get_USB_Status>
 800d332:	4603      	mov	r3, r0
 800d334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d336:	7bbb      	ldrb	r3, [r7, #14]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	460b      	mov	r3, r1
 800d34a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d34c:	2300      	movs	r3, #0
 800d34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d35a:	78fa      	ldrb	r2, [r7, #3]
 800d35c:	4611      	mov	r1, r2
 800d35e:	4618      	mov	r0, r3
 800d360:	f7f7 f897 	bl	8004492 <HAL_PCD_EP_SetStall>
 800d364:	4603      	mov	r3, r0
 800d366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d368:	7bfb      	ldrb	r3, [r7, #15]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 f91a 	bl	800d5a4 <USBD_Get_USB_Status>
 800d370:	4603      	mov	r3, r0
 800d372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d374:	7bbb      	ldrb	r3, [r7, #14]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d398:	78fa      	ldrb	r2, [r7, #3]
 800d39a:	4611      	mov	r1, r2
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7f7 f8dc 	bl	800455a <HAL_PCD_EP_ClrStall>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 f8fb 	bl	800d5a4 <USBD_Get_USB_Status>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	da0b      	bge.n	800d3f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3d8:	78fb      	ldrb	r3, [r7, #3]
 800d3da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3de:	68f9      	ldr	r1, [r7, #12]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	00db      	lsls	r3, r3, #3
 800d3e4:	1a9b      	subs	r3, r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	333e      	adds	r3, #62	; 0x3e
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	e00b      	b.n	800d408 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3f6:	68f9      	ldr	r1, [r7, #12]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	1a9b      	subs	r3, r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	440b      	add	r3, r1
 800d402:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d406:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3714      	adds	r7, #20
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	460b      	mov	r3, r1
 800d41e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d420:	2300      	movs	r3, #0
 800d422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d42e:	78fa      	ldrb	r2, [r7, #3]
 800d430:	4611      	mov	r1, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f7f6 fec1 	bl	80041ba <HAL_PCD_SetAddress>
 800d438:	4603      	mov	r3, r0
 800d43a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 f8b0 	bl	800d5a4 <USBD_Get_USB_Status>
 800d444:	4603      	mov	r3, r0
 800d446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d448:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b086      	sub	sp, #24
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	607a      	str	r2, [r7, #4]
 800d45c:	603b      	str	r3, [r7, #0]
 800d45e:	460b      	mov	r3, r1
 800d460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d470:	7af9      	ldrb	r1, [r7, #11]
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	f7f6 ffc2 	bl	80043fe <HAL_PCD_EP_Transmit>
 800d47a:	4603      	mov	r3, r0
 800d47c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	4618      	mov	r0, r3
 800d482:	f000 f88f 	bl	800d5a4 <USBD_Get_USB_Status>
 800d486:	4603      	mov	r3, r0
 800d488:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d48a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3718      	adds	r7, #24
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	607a      	str	r2, [r7, #4]
 800d49e:	603b      	str	r3, [r7, #0]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4b2:	7af9      	ldrb	r1, [r7, #11]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	f7f6 ff56 	bl	8004368 <HAL_PCD_EP_Receive>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 f86e 	bl	800d5a4 <USBD_Get_USB_Status>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3718      	adds	r7, #24
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
	...

0800d4d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d4e4:	78fb      	ldrb	r3, [r7, #3]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <HAL_PCDEx_LPM_Callback+0x18>
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d01f      	beq.n	800d52e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d4ee:	e03b      	b.n	800d568 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d007      	beq.n	800d508 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d4f8:	f7f3 fcb6 	bl	8000e68 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4fc:	4b1c      	ldr	r3, [pc, #112]	; (800d570 <HAL_PCDEx_LPM_Callback+0x98>)
 800d4fe:	691b      	ldr	r3, [r3, #16]
 800d500:	4a1b      	ldr	r2, [pc, #108]	; (800d570 <HAL_PCDEx_LPM_Callback+0x98>)
 800d502:	f023 0306 	bic.w	r3, r3, #6
 800d506:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	6812      	ldr	r2, [r2, #0]
 800d516:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d51a:	f023 0301 	bic.w	r3, r3, #1
 800d51e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d526:	4618      	mov	r0, r3
 800d528:	f7fb ff4a 	bl	80093c0 <USBD_LL_Resume>
    break;
 800d52c:	e01c      	b.n	800d568 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	6812      	ldr	r2, [r2, #0]
 800d53c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d540:	f043 0301 	orr.w	r3, r3, #1
 800d544:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fb ff21 	bl	8009394 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d005      	beq.n	800d566 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d55a:	4b05      	ldr	r3, [pc, #20]	; (800d570 <HAL_PCDEx_LPM_Callback+0x98>)
 800d55c:	691b      	ldr	r3, [r3, #16]
 800d55e:	4a04      	ldr	r2, [pc, #16]	; (800d570 <HAL_PCDEx_LPM_Callback+0x98>)
 800d560:	f043 0306 	orr.w	r3, r3, #6
 800d564:	6113      	str	r3, [r2, #16]
    break;
 800d566:	bf00      	nop
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	e000ed00 	.word	0xe000ed00

0800d574 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d57c:	4b03      	ldr	r3, [pc, #12]	; (800d58c <USBD_static_malloc+0x18>)
}
 800d57e:	4618      	mov	r0, r3
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	200053d4 	.word	0x200053d4

0800d590 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]

}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5b2:	79fb      	ldrb	r3, [r7, #7]
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d817      	bhi.n	800d5e8 <USBD_Get_USB_Status+0x44>
 800d5b8:	a201      	add	r2, pc, #4	; (adr r2, 800d5c0 <USBD_Get_USB_Status+0x1c>)
 800d5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5be:	bf00      	nop
 800d5c0:	0800d5d1 	.word	0x0800d5d1
 800d5c4:	0800d5d7 	.word	0x0800d5d7
 800d5c8:	0800d5dd 	.word	0x0800d5dd
 800d5cc:	0800d5e3 	.word	0x0800d5e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d4:	e00b      	b.n	800d5ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5da:	e008      	b.n	800d5ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e0:	e005      	b.n	800d5ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e6:	e002      	b.n	800d5ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ec:	bf00      	nop
  }
  return usb_status;
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	4608      	mov	r0, r1
 800d606:	4611      	mov	r1, r2
 800d608:	461a      	mov	r2, r3
 800d60a:	4603      	mov	r3, r0
 800d60c:	70fb      	strb	r3, [r7, #3]
 800d60e:	460b      	mov	r3, r1
 800d610:	70bb      	strb	r3, [r7, #2]
 800d612:	4613      	mov	r3, r2
 800d614:	707b      	strb	r3, [r7, #1]
                return 0;
 800d616:	2300      	movs	r3, #0
        }
 800d618:	4618      	mov	r0, r3
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	4608      	mov	r0, r1
 800d62e:	4611      	mov	r1, r2
 800d630:	461a      	mov	r2, r3
 800d632:	4603      	mov	r3, r0
 800d634:	70fb      	strb	r3, [r7, #3]
 800d636:	460b      	mov	r3, r1
 800d638:	70bb      	strb	r3, [r7, #2]
 800d63a:	4613      	mov	r3, r2
 800d63c:	707b      	strb	r3, [r7, #1]
                return 0;
 800d63e:	2300      	movs	r3, #0
        }
 800d640:	4618      	mov	r0, r3
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
                return 0;
 800d654:	2300      	movs	r3, #0
        }
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800d662:	b480      	push	{r7}
 800d664:	b083      	sub	sp, #12
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
                return 0;
 800d66a:	2300      	movs	r3, #0
        }
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
                return 0;
 800d680:	2300      	movs	r3, #0
        }
 800d682:	4618      	mov	r0, r3
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800d68e:	b480      	push	{r7}
 800d690:	b083      	sub	sp, #12
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	70fb      	strb	r3, [r7, #3]
                return;
 800d69a:	bf00      	nop
        } // Note used for hubs only!
 800d69c:	370c      	adds	r7, #12
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr

0800d6a6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800d6a6:	b480      	push	{r7}
 800d6a8:	b083      	sub	sp, #12
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	807b      	strh	r3, [r7, #2]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	803b      	strh	r3, [r7, #0]
                return false;
 800d6b6:	2300      	movs	r3, #0
        }
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800d6c4:	b480      	push	{r7}
 800d6c6:	b083      	sub	sp, #12
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	70fb      	strb	r3, [r7, #3]
                return false;
 800d6d0:	2300      	movs	r3, #0
        }
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	70fb      	strb	r3, [r7, #3]
                return true;
 800d6ea:	2301      	movs	r3, #1
        }
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800d700:	687b      	ldr	r3, [r7, #4]
        };
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800d70e:	b480      	push	{r7}
 800d710:	b085      	sub	sp, #20
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
 800d716:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d718:	2300      	movs	r3, #0
 800d71a:	73fb      	strb	r3, [r7, #15]
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	2b0f      	cmp	r3, #15
 800d720:	d812      	bhi.n	800d748 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800d722:	7bfa      	ldrb	r2, [r7, #15]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	321e      	adds	r2, #30
 800d728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d107      	bne.n	800d740 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800d730:	7bfa      	ldrb	r2, [r7, #15]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	321e      	adds	r2, #30
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800d73c:	2300      	movs	r3, #0
 800d73e:	e004      	b.n	800d74a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	3301      	adds	r3, #1
 800d744:	73fb      	strb	r3, [r7, #15]
 800d746:	e7e9      	b.n	800d71c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800d748:	23d3      	movs	r3, #211	; 0xd3
        };
 800d74a:	4618      	mov	r0, r3
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800d756:	b480      	push	{r7}
 800d758:	b083      	sub	sp, #12
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	705a      	strb	r2, [r3, #1]
 800d76a:	2200      	movs	r2, #0
 800d76c:	709a      	strb	r2, [r3, #2]
 800d76e:	2200      	movs	r2, #0
 800d770:	70da      	strb	r2, [r3, #3]
 800d772:	2200      	movs	r2, #0
 800d774:	711a      	strb	r2, [r3, #4]
        };
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	601a      	str	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	711a      	strb	r2, [r3, #4]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	715a      	strb	r2, [r3, #5]
        };
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	781a      	ldrb	r2, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	715a      	strb	r2, [r3, #5]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	795a      	ldrb	r2, [r3, #5]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	711a      	strb	r2, [r3, #4]
        };
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	601a      	str	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	711a      	strb	r2, [r3, #4]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	80da      	strh	r2, [r3, #6]
        };
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	80da      	strh	r2, [r3, #6]
        };
 800d81e:	bf00      	nop
 800d820:	370c      	adds	r7, #12
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800d82a:	b480      	push	{r7}
 800d82c:	b085      	sub	sp, #20
 800d82e:	af00      	add	r7, sp, #0
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	60b9      	str	r1, [r7, #8]
 800d834:	607a      	str	r2, [r7, #4]
 800d836:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	791b      	ldrb	r3, [r3, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d002      	beq.n	800d846 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800d840:	2b01      	cmp	r3, #1
 800d842:	d009      	beq.n	800d858 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800d844:	e029      	b.n	800d89a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	887a      	ldrh	r2, [r7, #2]
 800d84a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	791b      	ldrb	r3, [r3, #4]
 800d850:	3301      	adds	r3, #1
 800d852:	b2da      	uxtb	r2, r3
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	88db      	ldrh	r3, [r3, #6]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d015      	beq.n	800d88c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d011      	beq.n	800d88c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	88db      	ldrh	r3, [r3, #6]
 800d86c:	3b01      	subs	r3, #1
 800d86e:	b29a      	uxth	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	80da      	strh	r2, [r3, #6]
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	1c5a      	adds	r2, r3, #1
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	3b01      	subs	r3, #1
 800d884:	b29a      	uxth	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	801a      	strh	r2, [r3, #0]
 800d88a:	e7e5      	b.n	800d858 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	88db      	ldrh	r3, [r3, #6]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	88db      	ldrh	r3, [r3, #6]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bf0c      	ite	eq
 800d8a2:	2301      	moveq	r3, #1
 800d8a4:	2300      	movne	r3, #0
 800d8a6:	b2db      	uxtb	r3, r3
        };
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	4608      	mov	r0, r1
 800d8be:	4611      	mov	r1, r2
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	70fb      	strb	r3, [r7, #3]
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	70bb      	strb	r3, [r7, #2]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	707b      	strb	r3, [r7, #1]
        };
 800d8ce:	bf00      	nop
 800d8d0:	370c      	adds	r7, #12
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
	...

0800d8dc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	4a04      	ldr	r2, [pc, #16]	; (800d8f8 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	370c      	adds	r7, #12
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	08014aec 	.word	0x08014aec

0800d8fc <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	4a04      	ldr	r2, [pc, #16]	; (800d918 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4618      	mov	r0, r3
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	08014ad4 	.word	0x08014ad4

0800d91c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
                return bAddress;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800d92a:	4618      	mov	r0, r3
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800d936:	b480      	push	{r7}
 800d938:	b083      	sub	sp, #12
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800d944:	4618      	mov	r0, r3
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800d95c:	78fb      	ldrb	r3, [r7, #3]
 800d95e:	2be0      	cmp	r3, #224	; 0xe0
 800d960:	bf0c      	ite	eq
 800d962:	2301      	moveq	r3, #1
 800d964:	2300      	movne	r3, #0
 800d966:	b2db      	uxtb	r3, r3
        };
 800d968:	4618      	mov	r0, r3
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	460b      	mov	r3, r1
 800d97e:	807b      	strh	r3, [r7, #2]
 800d980:	4613      	mov	r3, r2
 800d982:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800d984:	887b      	ldrh	r3, [r7, #2]
 800d986:	f640 225c 	movw	r2, #2652	; 0xa5c
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d104      	bne.n	800d998 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800d98e:	883b      	ldrh	r3, [r7, #0]
 800d990:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800d994:	4293      	cmp	r3, r2
 800d996:	d009      	beq.n	800d9ac <_ZN3BTD8VIDPIDOKEtt+0x38>
 800d998:	887b      	ldrh	r3, [r7, #2]
 800d99a:	f240 520d 	movw	r2, #1293	; 0x50d
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	d106      	bne.n	800d9b0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800d9a2:	883b      	ldrh	r3, [r7, #0]
 800d9a4:	f240 625a 	movw	r2, #1626	; 0x65a
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d101      	bne.n	800d9b0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e02d      	b.n	800da0c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	7d1b      	ldrb	r3, [r3, #20]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d113      	bne.n	800d9e0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	7d5b      	ldrb	r3, [r3, #21]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d10f      	bne.n	800d9e0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7d9b      	ldrb	r3, [r3, #22]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d10b      	bne.n	800d9e0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	7ddb      	ldrb	r3, [r3, #23]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d107      	bne.n	800d9e0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	7e1b      	ldrb	r3, [r3, #24]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d103      	bne.n	800d9e0 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	7e5b      	ldrb	r3, [r3, #25]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d014      	beq.n	800da0a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800d9e0:	887b      	ldrh	r3, [r7, #2]
 800d9e2:	f240 524c 	movw	r2, #1356	; 0x54c
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d10f      	bne.n	800da0a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800d9ea:	883b      	ldrh	r3, [r7, #0]
 800d9ec:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800d9f0:	d009      	beq.n	800da06 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800d9f2:	883b      	ldrh	r3, [r7, #0]
 800d9f4:	f240 422f 	movw	r2, #1071	; 0x42f
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d004      	beq.n	800da06 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800d9fc:	883b      	ldrh	r3, [r7, #0]
 800d9fe:	f240 32d5 	movw	r2, #981	; 0x3d5
 800da02:	4293      	cmp	r3, r2
 800da04:	d101      	bne.n	800da0a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800da06:	2301      	movs	r3, #1
 800da08:	e000      	b.n	800da0c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800da0a:	2300      	movs	r3, #0
        };
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f7ff ff59 	bl	800d8dc <_ZN15USBDeviceConfigC1Ev>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3304      	adds	r3, #4
 800da2e:	4618      	mov	r0, r3
 800da30:	f7ff ff64 	bl	800d8fc <_ZN17UsbConfigXtracterC1Ev>
 800da34:	4a2b      	ldr	r2, [pc, #172]	; (800dae4 <_ZN3BTDC1EP3USB+0xcc>)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	4a2b      	ldr	r2, [pc, #172]	; (800dae8 <_ZN3BTDC1EP3USB+0xd0>)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	605a      	str	r2, [r3, #4]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2200      	movs	r2, #0
 800da5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	64da      	str	r2, [r3, #76]	; 0x4c
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	661a      	str	r2, [r3, #96]	; 0x60
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800da9c:	2300      	movs	r3, #0
 800da9e:	73fb      	strb	r3, [r7, #15]
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d80a      	bhi.n	800dabc <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800daa6:	7bfb      	ldrb	r3, [r7, #15]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	3318      	adds	r3, #24
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	4413      	add	r3, r2
 800dab0:	2200      	movs	r2, #0
 800dab2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	3301      	adds	r3, #1
 800dab8:	73fb      	strb	r3, [r7, #15]
 800daba:	e7f1      	b.n	800daa0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 fa7d 	bl	800dfbc <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d006      	beq.n	800dad8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	4611      	mov	r1, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fe1b 	bl	800d70e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	08014a94 	.word	0x08014a94
 800dae8:	08014ac8 	.word	0x08014ac8

0800daec <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800daec:	b590      	push	{r4, r7, lr}
 800daee:	b08f      	sub	sp, #60	; 0x3c
 800daf0:	af02      	add	r7, sp, #8
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	4608      	mov	r0, r1
 800daf6:	4611      	mov	r1, r2
 800daf8:	461a      	mov	r2, r3
 800dafa:	4603      	mov	r3, r0
 800dafc:	70fb      	strb	r3, [r7, #3]
 800dafe:	460b      	mov	r3, r1
 800db00:	70bb      	strb	r3, [r7, #2]
 800db02:	4613      	mov	r3, r2
 800db04:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800db06:	2312      	movs	r3, #18
 800db08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800db12:	2300      	movs	r3, #0
 800db14:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800db16:	2300      	movs	r3, #0
 800db18:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 fa4e 	bl	800dfbc <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff fde7 	bl	800d6f8 <_ZN3USB14GetAddressPoolEv>
 800db2a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800db36:	23d9      	movs	r3, #217	; 0xd9
 800db38:	e087      	b.n	800dc4a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2100      	movs	r1, #0
 800db42:	69f8      	ldr	r0, [r7, #28]
 800db44:	4798      	blx	r3
 800db46:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800db4e:	23d6      	movs	r3, #214	; 0xd6
 800db50:	e07b      	b.n	800dc4a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800db5a:	23d7      	movs	r3, #215	; 0xd7
 800db5c:	e075      	b.n	800dc4a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800db5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800db6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db70:	787a      	ldrb	r2, [r7, #1]
 800db72:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db78:	f107 0308 	add.w	r3, r7, #8
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	2312      	movs	r3, #18
 800db80:	2200      	movs	r2, #0
 800db82:	2100      	movs	r1, #0
 800db84:	f005 fa13 	bl	8012fae <_ZN3USB11getDevDescrEhhtPh>
 800db88:	4603      	mov	r3, r0
 800db8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	6a3a      	ldr	r2, [r7, #32]
 800db92:	601a      	str	r2, [r3, #0]

        if(rcode)
 800db94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d146      	bne.n	800dc2a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3304      	adds	r3, #4
 800dba2:	681c      	ldr	r4, [r3, #0]
 800dba4:	78bb      	ldrb	r3, [r7, #2]
 800dba6:	78f9      	ldrb	r1, [r7, #3]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	69f8      	ldr	r0, [r7, #28]
 800dbac:	47a0      	blx	r4
 800dbae:	4603      	mov	r3, r0
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800dbc2:	23d4      	movs	r3, #212	; 0xd4
 800dbc4:	e041      	b.n	800dc4a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	791b      	ldrb	r3, [r3, #4]
 800dbca:	2b09      	cmp	r3, #9
 800dbcc:	d017      	beq.n	800dbfe <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800dbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd0:	79da      	ldrb	r2, [r3, #7]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800dbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbda:	7c5a      	ldrb	r2, [r3, #17]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800dbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe4:	891b      	ldrh	r3, [r3, #8]
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800dbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf0:	895b      	ldrh	r3, [r3, #10]
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800dbfa:	23e0      	movs	r3, #224	; 0xe0
 800dbfc:	e025      	b.n	800dc4a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800dbfe:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f005 fa6b 	bl	80130e8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800dc12:	23d1      	movs	r3, #209	; 0xd1
 800dc14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	3308      	adds	r3, #8
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	4798      	blx	r3
        return rcode;
 800dc24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc28:	e00f      	b.n	800dc4a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800dc2a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800dc2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc30:	2b0d      	cmp	r3, #13
 800dc32:	d002      	beq.n	800dc3a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800dc34:	23e1      	movs	r3, #225	; 0xe1
 800dc36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	3308      	adds	r3, #8
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	4798      	blx	r3
        return rcode;
 800dc46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3734      	adds	r7, #52	; 0x34
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd90      	pop	{r4, r7, pc}

0800dc52 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b096      	sub	sp, #88	; 0x58
 800dc56:	af02      	add	r7, sp, #8
 800dc58:	6078      	str	r0, [r7, #4]
 800dc5a:	4608      	mov	r0, r1
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4603      	mov	r3, r0
 800dc62:	70fb      	strb	r3, [r7, #3]
 800dc64:	460b      	mov	r3, r1
 800dc66:	70bb      	strb	r3, [r7, #2]
 800dc68:	4613      	mov	r3, r2
 800dc6a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dc72:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff fd38 	bl	800d6f8 <_ZN3USB14GetAddressPoolEv>
 800dc88:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800dc8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800dc96:	4611      	mov	r1, r2
 800dc98:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dc9a:	4798      	blx	r3
 800dc9c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800dc9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d101      	bne.n	800dca8 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dca4:	23d6      	movs	r3, #214	; 0xd6
 800dca6:	e185      	b.n	800dfb4 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800dca8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800dcac:	f7f4 fe28 	bl	8002900 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dcba:	2200      	movs	r2, #0
 800dcbc:	2100      	movs	r1, #0
 800dcbe:	f005 fa13 	bl	80130e8 <_ZN3USB7setAddrEhhh>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800dcc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d003      	beq.n	800dcd8 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800dcd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800dcd6:	e165      	b.n	800dfa4 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800dcd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcda:	2200      	movs	r2, #0
 800dcdc:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800dcde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800dcea:	4611      	mov	r1, r2
 800dcec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dcee:	4798      	blx	r3
 800dcf0:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800dcf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d101      	bne.n	800dcfc <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dcf8:	23d6      	movs	r3, #214	; 0xd6
 800dcfa:	e15b      	b.n	800dfb4 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800dcfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcfe:	787a      	ldrb	r2, [r7, #1]
 800dd00:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3351      	adds	r3, #81	; 0x51
 800dd10:	2201      	movs	r2, #1
 800dd12:	f004 f8dc 	bl	8011ece <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800dd16:	4603      	mov	r3, r0
 800dd18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800dd1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	f040 8128 	bne.w	800df76 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800dd2c:	f240 524c 	movw	r2, #1356	; 0x54c
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d177      	bne.n	800de24 <_ZN3BTD4InitEhhb+0x1d2>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd3a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dd3e:	d00d      	beq.n	800dd5c <_ZN3BTD4InitEhhb+0x10a>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd46:	f240 422f 	movw	r2, #1071	; 0x42f
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d006      	beq.n	800dd5c <_ZN3BTD4InitEhhb+0x10a>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dd54:	f240 32d5 	movw	r2, #981	; 0x3d5
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d163      	bne.n	800de24 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800dd5c:	2064      	movs	r0, #100	; 0x64
 800dd5e:	f7f4 fdcf 	bl	8002900 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800dd72:	2301      	movs	r3, #1
 800dd74:	f005 f9e6 	bl	8013144 <_ZN3USB7setConfEhhh>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800dd7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	f040 80f9 	bne.w	800df7a <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	7d1b      	ldrb	r3, [r3, #20]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d113      	bne.n	800ddb8 <_ZN3BTD4InitEhhb+0x166>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	7d5b      	ldrb	r3, [r3, #21]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10f      	bne.n	800ddb8 <_ZN3BTD4InitEhhb+0x166>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	7d9b      	ldrb	r3, [r3, #22]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10b      	bne.n	800ddb8 <_ZN3BTD4InitEhhb+0x166>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	7ddb      	ldrb	r3, [r3, #23]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d107      	bne.n	800ddb8 <_ZN3BTD4InitEhhb+0x166>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	7e1b      	ldrb	r3, [r3, #24]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d103      	bne.n	800ddb8 <_ZN3BTD4InitEhhb+0x166>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	7e5b      	ldrb	r3, [r3, #25]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d019      	beq.n	800ddec <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ddbe:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ddc2:	d006      	beq.n	800ddd2 <_ZN3BTD4InitEhhb+0x180>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ddca:	f240 422f 	movw	r2, #1071	; 0x42f
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d106      	bne.n	800dde0 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	3314      	adds	r3, #20
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f002 f8b0 	bl	800ff3e <_ZN3BTD9setBdaddrEPh>
 800ddde:	e005      	b.n	800ddec <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3314      	adds	r3, #20
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f002 f8e9 	bl	800ffbe <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f005 f9a1 	bl	8013144 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de0c:	2300      	movs	r3, #0
 800de0e:	2200      	movs	r2, #0
 800de10:	f005 f96a 	bl	80130e8 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	3308      	adds	r3, #8
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800de20:	23d1      	movs	r3, #209	; 0xd1
 800de22:	e0c7      	b.n	800dfb4 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800de24:	2300      	movs	r3, #0
 800de26:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800de2a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800de2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800de32:	429a      	cmp	r2, r3
 800de34:	d25e      	bcs.n	800def4 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800de3c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800de40:	4293      	cmp	r3, r2
 800de42:	d106      	bne.n	800de52 <_ZN3BTD4InitEhhb+0x200>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de4a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800de4e:	4293      	cmp	r3, r2
 800de50:	d00d      	beq.n	800de6e <_ZN3BTD4InitEhhb+0x21c>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800de58:	f240 520d 	movw	r2, #1293	; 0x50d
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d120      	bne.n	800dea2 <_ZN3BTD4InitEhhb+0x250>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de66:	f240 625a 	movw	r2, #1626	; 0x65a
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d119      	bne.n	800dea2 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	1d1a      	adds	r2, r3, #4
 800de72:	f107 0308 	add.w	r3, r7, #8
 800de76:	4611      	mov	r1, r2
 800de78:	4618      	mov	r0, r3
 800de7a:	f002 f8f3 	bl	8010064 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de88:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800de8c:	f107 0308 	add.w	r3, r7, #8
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	4613      	mov	r3, r2
 800de94:	2200      	movs	r2, #0
 800de96:	f005 f8da 	bl	801304e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800de9a:	4603      	mov	r3, r0
 800de9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dea0:	e018      	b.n	800ded4 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	1d1a      	adds	r2, r3, #4
 800dea6:	f107 0308 	add.w	r3, r7, #8
 800deaa:	4611      	mov	r1, r2
 800deac:	4618      	mov	r0, r3
 800deae:	f002 f927 	bl	8010100 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800debc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dec0:	f107 0308 	add.w	r3, r7, #8
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4613      	mov	r3, r2
 800dec8:	2200      	movs	r2, #0
 800deca:	f005 f8c0 	bl	801304e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800dece:	4603      	mov	r3, r0
 800ded0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800ded4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d150      	bne.n	800df7e <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d805      	bhi.n	800def2 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800dee6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800deea:	3301      	adds	r3, #1
 800deec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800def0:	e79b      	b.n	800de2a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800def2:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800defa:	2b03      	cmp	r3, #3
 800defc:	d945      	bls.n	800df8a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3351      	adds	r3, #81	; 0x51
 800df12:	f003 ffdc 	bl	8011ece <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800df16:	4603      	mov	r3, r0
 800df18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800df1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df20:	2b00      	cmp	r3, #0
 800df22:	d12e      	bne.n	800df82 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800df3a:	f005 f903 	bl	8013144 <_ZN3USB7setConfEhhh>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800df44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d11c      	bne.n	800df86 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2264      	movs	r2, #100	; 0x64
 800df50:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2200      	movs	r2, #0
 800df60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2201      	movs	r2, #1
 800df6e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800df72:	2300      	movs	r3, #0
 800df74:	e01e      	b.n	800dfb4 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800df76:	bf00      	nop
 800df78:	e014      	b.n	800dfa4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800df7a:	bf00      	nop
 800df7c:	e012      	b.n	800dfa4 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800df7e:	bf00      	nop
 800df80:	e010      	b.n	800dfa4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800df82:	bf00      	nop
 800df84:	e00e      	b.n	800dfa4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800df86:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800df88:	e00c      	b.n	800dfa4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800df8a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df96:	2300      	movs	r3, #0
 800df98:	2200      	movs	r2, #0
 800df9a:	f005 f8a5 	bl	80130e8 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800df9e:	23d1      	movs	r3, #209	; 0xd1
 800dfa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	4798      	blx	r3
        return rcode;
 800dfb0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3750      	adds	r7, #80	; 0x50
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]
 800dfc8:	7bfb      	ldrb	r3, [r7, #15]
 800dfca:	2b03      	cmp	r3, #3
 800dfcc:	d845      	bhi.n	800e05a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800dfce:	7bfa      	ldrb	r2, [r7, #15]
 800dfd0:	6879      	ldr	r1, [r7, #4]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	4413      	add	r3, r2
 800dfd8:	440b      	add	r3, r1
 800dfda:	3351      	adds	r3, #81	; 0x51
 800dfdc:	2200      	movs	r2, #0
 800dfde:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <_ZN3BTD10InitializeEv+0x2e>
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	e000      	b.n	800dfec <_ZN3BTD10InitializeEv+0x30>
 800dfea:	2008      	movs	r0, #8
 800dfec:	7bfa      	ldrb	r2, [r7, #15]
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	4613      	mov	r3, r2
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	4413      	add	r3, r2
 800dff6:	440b      	add	r3, r1
 800dff8:	3352      	adds	r3, #82	; 0x52
 800dffa:	4602      	mov	r2, r0
 800dffc:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800dffe:	7bfa      	ldrb	r2, [r7, #15]
 800e000:	6879      	ldr	r1, [r7, #4]
 800e002:	4613      	mov	r3, r2
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	4413      	add	r3, r2
 800e008:	440b      	add	r3, r1
 800e00a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e00e:	78d3      	ldrb	r3, [r2, #3]
 800e010:	f36f 0300 	bfc	r3, #0, #1
 800e014:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800e016:	7bfa      	ldrb	r2, [r7, #15]
 800e018:	6879      	ldr	r1, [r7, #4]
 800e01a:	4613      	mov	r3, r2
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	4413      	add	r3, r2
 800e020:	440b      	add	r3, r1
 800e022:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e026:	78d3      	ldrb	r3, [r2, #3]
 800e028:	f36f 0341 	bfc	r3, #1, #1
 800e02c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <_ZN3BTD10InitializeEv+0x7c>
 800e034:	2101      	movs	r1, #1
 800e036:	e000      	b.n	800e03a <_ZN3BTD10InitializeEv+0x7e>
 800e038:	210f      	movs	r1, #15
 800e03a:	7bfa      	ldrb	r2, [r7, #15]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	4613      	mov	r3, r2
 800e040:	005b      	lsls	r3, r3, #1
 800e042:	4413      	add	r3, r2
 800e044:	4403      	add	r3, r0
 800e046:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e04a:	78d3      	ldrb	r3, [r2, #3]
 800e04c:	f361 0387 	bfi	r3, r1, #2, #6
 800e050:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	3301      	adds	r3, #1
 800e056:	73fb      	strb	r3, [r7, #15]
 800e058:	e7b6      	b.n	800dfc8 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e05a:	2300      	movs	r3, #0
 800e05c:	73fb      	strb	r3, [r7, #15]
 800e05e:	7bfb      	ldrb	r3, [r7, #15]
 800e060:	2b03      	cmp	r3, #3
 800e062:	d81c      	bhi.n	800e09e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800e064:	7bfb      	ldrb	r3, [r7, #15]
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	3318      	adds	r3, #24
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4413      	add	r3, r2
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d010      	beq.n	800e096 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800e074:	7bfb      	ldrb	r3, [r7, #15]
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	3318      	adds	r3, #24
 800e07a:	009b      	lsls	r3, r3, #2
 800e07c:	4413      	add	r3, r2
 800e07e:	6859      	ldr	r1, [r3, #4]
 800e080:	7bfb      	ldrb	r3, [r7, #15]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	3318      	adds	r3, #24
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	3308      	adds	r3, #8
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4608      	mov	r0, r1
 800e094:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	3301      	adds	r3, #1
 800e09a:	73fb      	strb	r3, [r7, #15]
 800e09c:	e7df      	b.n	800e05e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800e0f4:	bf00      	nop
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800e0fc:	b480      	push	{r7}
 800e0fe:	b085      	sub	sp, #20
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	4608      	mov	r0, r1
 800e106:	4611      	mov	r1, r2
 800e108:	461a      	mov	r2, r3
 800e10a:	4603      	mov	r3, r0
 800e10c:	70fb      	strb	r3, [r7, #3]
 800e10e:	460b      	mov	r3, r1
 800e110:	70bb      	strb	r3, [r7, #2]
 800e112:	4613      	mov	r3, r2
 800e114:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800e116:	787b      	ldrb	r3, [r7, #1]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d15d      	bne.n	800e1d8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	78fa      	ldrb	r2, [r7, #3]
 800e120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	78db      	ldrb	r3, [r3, #3]
 800e128:	f003 0303 	and.w	r3, r3, #3
 800e12c:	2b03      	cmp	r3, #3
 800e12e:	d114      	bne.n	800e15a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	789b      	ldrb	r3, [r3, #2]
 800e134:	b25b      	sxtb	r3, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	da0f      	bge.n	800e15a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800e13a:	2301      	movs	r3, #1
 800e13c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800e13e:	7bfa      	ldrb	r2, [r7, #15]
 800e140:	6879      	ldr	r1, [r7, #4]
 800e142:	4613      	mov	r3, r2
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	4413      	add	r3, r2
 800e148:	440b      	add	r3, r1
 800e14a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e14e:	78d3      	ldrb	r3, [r2, #3]
 800e150:	2101      	movs	r1, #1
 800e152:	f361 0387 	bfi	r3, r1, #2, #6
 800e156:	70d3      	strb	r3, [r2, #3]
 800e158:	e00e      	b.n	800e178 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	78db      	ldrb	r3, [r3, #3]
 800e15e:	f003 0303 	and.w	r3, r3, #3
 800e162:	2b02      	cmp	r3, #2
 800e164:	d13a      	bne.n	800e1dc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	789b      	ldrb	r3, [r3, #2]
 800e16a:	b25b      	sxtb	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	da01      	bge.n	800e174 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800e170:	2302      	movs	r3, #2
 800e172:	e000      	b.n	800e176 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800e174:	2303      	movs	r3, #3
 800e176:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	789b      	ldrb	r3, [r3, #2]
 800e17c:	7bfa      	ldrb	r2, [r7, #15]
 800e17e:	f003 030f 	and.w	r3, r3, #15
 800e182:	b2d8      	uxtb	r0, r3
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	4613      	mov	r3, r2
 800e188:	005b      	lsls	r3, r3, #1
 800e18a:	4413      	add	r3, r2
 800e18c:	440b      	add	r3, r1
 800e18e:	3351      	adds	r3, #81	; 0x51
 800e190:	4602      	mov	r2, r0
 800e192:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	889b      	ldrh	r3, [r3, #4]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	7bfa      	ldrb	r2, [r7, #15]
 800e19c:	b2d8      	uxtb	r0, r3
 800e19e:	6879      	ldr	r1, [r7, #4]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	4413      	add	r3, r2
 800e1a6:	440b      	add	r3, r1
 800e1a8:	3352      	adds	r3, #82	; 0x52
 800e1aa:	4602      	mov	r2, r0
 800e1ac:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	799b      	ldrb	r3, [r3, #6]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d204      	bcs.n	800e1c6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	799a      	ldrb	r2, [r3, #6]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800e1d6:	e002      	b.n	800e1de <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800e1d8:	bf00      	nop
 800e1da:	e000      	b.n	800e1de <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800e1dc:	bf00      	nop
}
 800e1de:	3714      	adds	r7, #20
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800e1e8:	f1a0 0004 	sub.w	r0, r0, #4
 800e1ec:	f7ff bf86 	b.w	800e0fc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800e1f0 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff fedf 	bl	800dfbc <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff fa78 	bl	800d6f8 <_ZN3USB14GetAddressPoolEv>
 800e208:	4603      	mov	r3, r0
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	3208      	adds	r2, #8
 800e20e:	6812      	ldr	r2, [r2, #0]
 800e210:	6879      	ldr	r1, [r7, #4]
 800e212:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800e216:	4618      	mov	r0, r3
 800e218:	4790      	blx	r2
        return 0;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800e232:	f083 0301 	eor.w	r3, r3, #1
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800e23c:	2300      	movs	r3, #0
 800e23e:	e01d      	b.n	800e27c <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e240:	f7f4 fb52 	bl	80028e8 <HAL_GetTick>
 800e244:	4602      	mov	r2, r0
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	43db      	mvns	r3, r3
 800e24e:	0fdb      	lsrs	r3, r3, #31
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b00      	cmp	r3, #0
 800e254:	d011      	beq.n	800e27a <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e256:	f7f4 fb47 	bl	80028e8 <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e262:	441a      	add	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f80b 	bl	800e284 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fb22 	bl	800e8b8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fe4b 	bl	800ef10 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800e284:	b5b0      	push	{r4, r5, r7, lr}
 800e286:	b088      	sub	sp, #32
 800e288:	af02      	add	r7, sp, #8
 800e28a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800e28c:	2340      	movs	r3, #64	; 0x40
 800e28e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	3389      	adds	r3, #137	; 0x89
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800e2aa:	f107 050c 	add.w	r5, r7, #12
 800e2ae:	9201      	str	r2, [sp, #4]
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	462b      	mov	r3, r5
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	f003 ff72 	bl	801219e <_ZN3USB10inTransferEhhPtPhh>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d003      	beq.n	800e2cc <_ZN3BTD14HCI_event_taskEv+0x48>
 800e2c4:	7bfb      	ldrb	r3, [r7, #15]
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	f040 82f1 	bne.w	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	2b35      	cmp	r3, #53	; 0x35
 800e2d6:	f200 82ea 	bhi.w	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
 800e2da:	a201      	add	r2, pc, #4	; (adr r2, 800e2e0 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800e2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e0:	0800e4c1 	.word	0x0800e4c1
 800e2e4:	0800e521 	.word	0x0800e521
 800e2e8:	0800e679 	.word	0x0800e679
 800e2ec:	0800e763 	.word	0x0800e763
 800e2f0:	0800e6d5 	.word	0x0800e6d5
 800e2f4:	0800e821 	.word	0x0800e821
 800e2f8:	0800e707 	.word	0x0800e707
 800e2fc:	0800e899 	.word	0x0800e899
 800e300:	0800e899 	.word	0x0800e899
 800e304:	0800e8af 	.word	0x0800e8af
 800e308:	0800e8af 	.word	0x0800e8af
 800e30c:	0800e899 	.word	0x0800e899
 800e310:	0800e899 	.word	0x0800e899
 800e314:	0800e3b9 	.word	0x0800e3b9
 800e318:	0800e899 	.word	0x0800e899
 800e31c:	0800e8af 	.word	0x0800e8af
 800e320:	0800e8af 	.word	0x0800e8af
 800e324:	0800e899 	.word	0x0800e899
 800e328:	0800e899 	.word	0x0800e899
 800e32c:	0800e8af 	.word	0x0800e8af
 800e330:	0800e8af 	.word	0x0800e8af
 800e334:	0800e7ef 	.word	0x0800e7ef
 800e338:	0800e819 	.word	0x0800e819
 800e33c:	0800e899 	.word	0x0800e899
 800e340:	0800e899 	.word	0x0800e899
 800e344:	0800e899 	.word	0x0800e899
 800e348:	0800e899 	.word	0x0800e899
 800e34c:	0800e8af 	.word	0x0800e8af
 800e350:	0800e8af 	.word	0x0800e8af
 800e354:	0800e8af 	.word	0x0800e8af
 800e358:	0800e8af 	.word	0x0800e8af
 800e35c:	0800e899 	.word	0x0800e899
 800e360:	0800e8af 	.word	0x0800e8af
 800e364:	0800e8af 	.word	0x0800e8af
 800e368:	0800e8af 	.word	0x0800e8af
 800e36c:	0800e8af 	.word	0x0800e8af
 800e370:	0800e8af 	.word	0x0800e8af
 800e374:	0800e8af 	.word	0x0800e8af
 800e378:	0800e8af 	.word	0x0800e8af
 800e37c:	0800e8af 	.word	0x0800e8af
 800e380:	0800e8af 	.word	0x0800e8af
 800e384:	0800e8af 	.word	0x0800e8af
 800e388:	0800e8af 	.word	0x0800e8af
 800e38c:	0800e8af 	.word	0x0800e8af
 800e390:	0800e8af 	.word	0x0800e8af
 800e394:	0800e8af 	.word	0x0800e8af
 800e398:	0800e8af 	.word	0x0800e8af
 800e39c:	0800e8af 	.word	0x0800e8af
 800e3a0:	0800e889 	.word	0x0800e889
 800e3a4:	0800e899 	.word	0x0800e899
 800e3a8:	0800e891 	.word	0x0800e891
 800e3ac:	0800e8af 	.word	0x0800e8af
 800e3b0:	0800e8af 	.word	0x0800e8af
 800e3b4:	0800e899 	.word	0x0800e899
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f040 826c 	bne.w	800e89c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e3ca:	f043 0301 	orr.w	r3, r3, #1
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d114      	bne.n	800e40a <_ZN3BTD14HCI_event_taskEv+0x186>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e3e6:	2b10      	cmp	r3, #16
 800e3e8:	d10f      	bne.n	800e40a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e400:	b29a      	uxth	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e408:	e059      	b.n	800e4be <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e410:	2b04      	cmp	r3, #4
 800e412:	d12a      	bne.n	800e46a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e41a:	2b10      	cmp	r3, #16
 800e41c:	d125      	bne.n	800e46a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d114      	bne.n	800e456 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10f      	bne.n	800e456 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e43c:	f003 0308 	and.w	r3, r3, #8
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800e44c:	e003      	b.n	800e456 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2200      	movs	r2, #0
 800e452:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e45c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e460:	b29a      	uxth	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e468:	e029      	b.n	800e4be <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e470:	2b09      	cmp	r3, #9
 800e472:	f040 8213 	bne.w	800e89c <_ZN3BTD14HCI_event_taskEv+0x618>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e47c:	2b10      	cmp	r3, #16
 800e47e:	f040 820d 	bne.w	800e89c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800e482:	2300      	movs	r3, #0
 800e484:	75fb      	strb	r3, [r7, #23]
 800e486:	7dfb      	ldrb	r3, [r7, #23]
 800e488:	2b05      	cmp	r3, #5
 800e48a:	d80e      	bhi.n	800e4aa <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800e48c:	7dfb      	ldrb	r3, [r7, #23]
 800e48e:	1d9a      	adds	r2, r3, #6
 800e490:	7dfb      	ldrb	r3, [r7, #23]
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	440a      	add	r2, r1
 800e496:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	4413      	add	r3, r2
 800e49e:	460a      	mov	r2, r1
 800e4a0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800e4a2:	7dfb      	ldrb	r3, [r7, #23]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	75fb      	strb	r3, [r7, #23]
 800e4a8:	e7ed      	b.n	800e486 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e4b0:	f043 0320 	orr.w	r3, r3, #32
 800e4b4:	b29a      	uxth	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800e4bc:	e1ee      	b.n	800e89c <_ZN3BTD14HCI_event_taskEv+0x618>
 800e4be:	e1ed      	b.n	800e89c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e4c6:	2b04      	cmp	r3, #4
 800e4c8:	d921      	bls.n	800e50e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d104      	bne.n	800e4de <_ZN3BTD14HCI_event_taskEv+0x25a>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d017      	beq.n	800e50e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	220a      	movs	r2, #10
 800e50a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e514:	3301      	adds	r3, #1
 800e516:	b2da      	uxtb	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800e51e:	e1c6      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e526:	2b00      	cmp	r3, #0
 800e528:	f000 81ba 	beq.w	800e8a0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e52c:	2300      	movs	r3, #0
 800e52e:	75bb      	strb	r3, [r7, #22]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e536:	7dba      	ldrb	r2, [r7, #22]
 800e538:	429a      	cmp	r2, r3
 800e53a:	f080 81b1 	bcs.w	800e8a0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	b2da      	uxtb	r2, r3
 800e548:	7dbb      	ldrb	r3, [r7, #22]
 800e54a:	4619      	mov	r1, r3
 800e54c:	0049      	lsls	r1, r1, #1
 800e54e:	440b      	add	r3, r1
 800e550:	b2db      	uxtb	r3, r3
 800e552:	4413      	add	r3, r2
 800e554:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800e556:	2300      	movs	r3, #0
 800e558:	757b      	strb	r3, [r7, #21]
 800e55a:	7d7b      	ldrb	r3, [r7, #21]
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d811      	bhi.n	800e584 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800e560:	7d7b      	ldrb	r3, [r7, #21]
 800e562:	1d1a      	adds	r2, r3, #4
 800e564:	7bbb      	ldrb	r3, [r7, #14]
 800e566:	441a      	add	r2, r3
 800e568:	7d7b      	ldrb	r3, [r7, #21]
 800e56a:	6879      	ldr	r1, [r7, #4]
 800e56c:	440a      	add	r2, r1
 800e56e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	4413      	add	r3, r2
 800e576:	460a      	mov	r2, r1
 800e578:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800e57c:	7d7b      	ldrb	r3, [r7, #21]
 800e57e:	3301      	adds	r3, #1
 800e580:	757b      	strb	r3, [r7, #21]
 800e582:	e7ea      	b.n	800e55a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d038      	beq.n	800e600 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e594:	2b00      	cmp	r3, #0
 800e596:	d133      	bne.n	800e600 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e59e:	2b05      	cmp	r3, #5
 800e5a0:	d12e      	bne.n	800e600 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e5a8:	f003 030c 	and.w	r3, r3, #12
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d027      	beq.n	800e600 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	753b      	strb	r3, [r7, #20]
 800e5bc:	7d3b      	ldrb	r3, [r7, #20]
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d814      	bhi.n	800e5ec <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e5c2:	7d3b      	ldrb	r3, [r7, #20]
 800e5c4:	1cd9      	adds	r1, r3, #3
 800e5c6:	7dba      	ldrb	r2, [r7, #22]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	4413      	add	r3, r2
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	18ca      	adds	r2, r1, r3
 800e5d2:	7d3b      	ldrb	r3, [r7, #20]
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	440a      	add	r2, r1
 800e5d8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	4413      	add	r3, r2
 800e5e0:	460a      	mov	r2, r1
 800e5e2:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e5e4:	7d3b      	ldrb	r3, [r7, #20]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	753b      	strb	r3, [r7, #20]
 800e5ea:	e7e7      	b.n	800e5bc <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e5fe:	e03a      	b.n	800e676 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e606:	2b00      	cmp	r3, #0
 800e608:	d031      	beq.n	800e66e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	2b05      	cmp	r3, #5
 800e616:	d12a      	bne.n	800e66e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e61e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e622:	2b00      	cmp	r3, #0
 800e624:	d023      	beq.n	800e66e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800e626:	2300      	movs	r3, #0
 800e628:	74fb      	strb	r3, [r7, #19]
 800e62a:	7cfb      	ldrb	r3, [r7, #19]
 800e62c:	2b05      	cmp	r3, #5
 800e62e:	d814      	bhi.n	800e65a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e630:	7cfb      	ldrb	r3, [r7, #19]
 800e632:	1cd9      	adds	r1, r3, #3
 800e634:	7dba      	ldrb	r2, [r7, #22]
 800e636:	4613      	mov	r3, r2
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	4413      	add	r3, r2
 800e63c:	005b      	lsls	r3, r3, #1
 800e63e:	18ca      	adds	r2, r1, r3
 800e640:	7cfb      	ldrb	r3, [r7, #19]
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	440a      	add	r2, r1
 800e646:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	4413      	add	r3, r2
 800e64e:	460a      	mov	r2, r1
 800e650:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e652:	7cfb      	ldrb	r3, [r7, #19]
 800e654:	3301      	adds	r3, #1
 800e656:	74fb      	strb	r3, [r7, #19]
 800e658:	e7e7      	b.n	800e62a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e664:	b29a      	uxth	r2, r3
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e66c:	e003      	b.n	800e676 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e66e:	7dbb      	ldrb	r3, [r7, #22]
 800e670:	3301      	adds	r3, #1
 800e672:	75bb      	strb	r3, [r7, #22]
 800e674:	e75c      	b.n	800e530 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800e676:	e113      	b.n	800e8a0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e682:	b29a      	uxth	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e690:	2b00      	cmp	r3, #0
 800e692:	d11a      	bne.n	800e6ca <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e69a:	b21a      	sxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e6a2:	021b      	lsls	r3, r3, #8
 800e6a4:	b21b      	sxth	r3, r3
 800e6a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e6aa:	b21b      	sxth	r3, r3
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	b21b      	sxth	r3, r3
 800e6b0:	b29a      	uxth	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6bc:	f043 0302 	orr.w	r3, r3, #2
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800e6c8:	e0f1      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2206      	movs	r2, #6
 800e6ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e6d2:	e0ec      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f040 80e2 	bne.w	800e8a4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6e6:	f043 0304 	orr.w	r3, r3, #4
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e6f8:	f023 0302 	bic.w	r3, r3, #2
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e704:	e0ce      	b.n	800e8a4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f040 80cb 	bne.w	800e8a8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e712:	2300      	movs	r3, #0
 800e714:	74bb      	strb	r3, [r7, #18]
 800e716:	7cbb      	ldrb	r3, [r7, #18]
 800e718:	2b1d      	cmp	r3, #29
 800e71a:	d818      	bhi.n	800e74e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800e71c:	7cbb      	ldrb	r3, [r7, #18]
 800e71e:	f103 0209 	add.w	r2, r3, #9
 800e722:	7cbb      	ldrb	r3, [r7, #18]
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	440a      	add	r2, r1
 800e728:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	4413      	add	r3, r2
 800e730:	460a      	mov	r2, r1
 800e732:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800e736:	7cbb      	ldrb	r3, [r7, #18]
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	4413      	add	r3, r2
 800e73c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e740:	2b00      	cmp	r3, #0
 800e742:	d003      	beq.n	800e74c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e744:	7cbb      	ldrb	r3, [r7, #18]
 800e746:	3301      	adds	r3, #1
 800e748:	74bb      	strb	r3, [r7, #18]
 800e74a:	e7e4      	b.n	800e716 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800e74c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e754:	f043 0308 	orr.w	r3, r3, #8
 800e758:	b29a      	uxth	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e760:	e0a2      	b.n	800e8a8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800e762:	2300      	movs	r3, #0
 800e764:	747b      	strb	r3, [r7, #17]
 800e766:	7c7b      	ldrb	r3, [r7, #17]
 800e768:	2b05      	cmp	r3, #5
 800e76a:	d80e      	bhi.n	800e78a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800e76c:	7c7b      	ldrb	r3, [r7, #17]
 800e76e:	1c9a      	adds	r2, r3, #2
 800e770:	7c7b      	ldrb	r3, [r7, #17]
 800e772:	6879      	ldr	r1, [r7, #4]
 800e774:	440a      	add	r2, r1
 800e776:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	4413      	add	r3, r2
 800e77e:	460a      	mov	r2, r1
 800e780:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800e782:	7c7b      	ldrb	r3, [r7, #17]
 800e784:	3301      	adds	r3, #1
 800e786:	747b      	strb	r3, [r7, #17]
 800e788:	e7ed      	b.n	800e766 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800e78a:	2300      	movs	r3, #0
 800e78c:	743b      	strb	r3, [r7, #16]
 800e78e:	7c3b      	ldrb	r3, [r7, #16]
 800e790:	2b02      	cmp	r3, #2
 800e792:	d810      	bhi.n	800e7b6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800e794:	7c3b      	ldrb	r3, [r7, #16]
 800e796:	f103 0208 	add.w	r2, r3, #8
 800e79a:	7c3b      	ldrb	r3, [r7, #16]
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	440a      	add	r2, r1
 800e7a0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	460a      	mov	r2, r1
 800e7aa:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800e7ae:	7c3b      	ldrb	r3, [r7, #16]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	743b      	strb	r3, [r7, #16]
 800e7b4:	e7eb      	b.n	800e78e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e7bc:	f003 030f 	and.w	r3, r3, #15
 800e7c0:	2b05      	cmp	r3, #5
 800e7c2:	d10a      	bne.n	800e7da <_ZN3BTD14HCI_event_taskEv+0x556>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e7ca:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e7e0:	f043 0310 	orr.w	r3, r3, #16
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800e7ec:	e05f      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d003      	beq.n	800e800 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 feec 	bl	800f5d6 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800e7fe:	e056      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 fee4 	bl	800f5d6 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800e80e:	e04e      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 ff93 	bl	800f73c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800e816:	e04a      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f000 ffca 	bl	800f7b2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800e81e:	e046      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e826:	2b00      	cmp	r3, #0
 800e828:	d123      	bne.n	800e872 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00c      	beq.n	800e84e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e83a:	f083 0301 	eor.w	r3, r3, #1
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	d004      	beq.n	800e84e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800e84c:	e02e      	b.n	800e8ac <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e854:	2b00      	cmp	r3, #0
 800e856:	d029      	beq.n	800e8ac <_ZN3BTD14HCI_event_taskEv+0x628>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e85e:	f083 0301 	eor.w	r3, r3, #1
 800e862:	b2db      	uxtb	r3, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	d021      	beq.n	800e8ac <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800e870:	e01c      	b.n	800e8ac <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	8b5b      	ldrh	r3, [r3, #26]
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f001 f882 	bl	800f982 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2210      	movs	r2, #16
 800e882:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e886:	e011      	b.n	800e8ac <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 ffcd 	bl	800f828 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800e88e:	e00e      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f001 f810 	bl	800f8b6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800e896:	e00a      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800e898:	bf00      	nop
 800e89a:	e008      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e89c:	bf00      	nop
 800e89e:	e006      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e8a0:	bf00      	nop
 800e8a2:	e004      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e8a4:	bf00      	nop
 800e8a6:	e002      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e8a8:	bf00      	nop
 800e8aa:	e000      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e8ac:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800e8ae:	bf00      	nop
 800e8b0:	3718      	adds	r7, #24
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b6:	bf00      	nop

0800e8b8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8c6:	2b13      	cmp	r3, #19
 800e8c8:	f200 82ef 	bhi.w	800eeaa <_ZN3BTD8HCI_taskEv+0x5f2>
 800e8cc:	a201      	add	r2, pc, #4	; (adr r2, 800e8d4 <_ZN3BTD8HCI_taskEv+0x1c>)
 800e8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d2:	bf00      	nop
 800e8d4:	0800e925 	.word	0x0800e925
 800e8d8:	0800e95f 	.word	0x0800e95f
 800e8dc:	0800e9e5 	.word	0x0800e9e5
 800e8e0:	0800ea05 	.word	0x0800ea05
 800e8e4:	0800ea25 	.word	0x0800ea25
 800e8e8:	0800ea79 	.word	0x0800ea79
 800e8ec:	0800eb1f 	.word	0x0800eb1f
 800e8f0:	0800eb4d 	.word	0x0800eb4d
 800e8f4:	0800eb87 	.word	0x0800eb87
 800e8f8:	0800ebaf 	.word	0x0800ebaf
 800e8fc:	0800ebe5 	.word	0x0800ebe5
 800e900:	0800ec43 	.word	0x0800ec43
 800e904:	0800ec81 	.word	0x0800ec81
 800e908:	0800eda7 	.word	0x0800eda7
 800e90c:	0800eeab 	.word	0x0800eeab
 800e910:	0800eded 	.word	0x0800eded
 800e914:	0800ee1b 	.word	0x0800ee1b
 800e918:	0800eaaf 	.word	0x0800eaaf
 800e91c:	0800eae5 	.word	0x0800eae5
 800e920:	0800eb05 	.word	0x0800eb05
                case HCI_INIT_STATE:
                        hci_counter++;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e92a:	3301      	adds	r3, #1
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e940:	429a      	cmp	r2, r3
 800e942:	f240 82b4 	bls.w	800eeae <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 fb7d 	bl	800f046 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800e95c:	e2a7      	b.n	800eeae <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800e964:	3301      	adds	r3, #1
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00b      	beq.n	800e994 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f001 f830 	bl	800f9f2 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800e992:	e28e      	b.n	800eeb2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	f240 8286 	bls.w	800eeb2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	0092      	lsls	r2, r2, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	005b      	lsls	r3, r3, #1
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800e9c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e9c6:	d904      	bls.n	800e9d2 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800e9ce:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800e9e2:	e266      	b.n	800eeb2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e9ea:	f003 0301 	and.w	r3, r3, #1
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f000 8261 	beq.w	800eeb6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2203      	movs	r2, #3
 800e9f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 fb72 	bl	800f0e6 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800ea02:	e258      	b.n	800eeb6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea0a:	f003 0320 	and.w	r3, r3, #32
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f000 8253 	beq.w	800eeba <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fb8a 	bl	800f12e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2204      	movs	r2, #4
 800ea1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ea22:	e24a      	b.n	800eeba <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 8245 	beq.w	800eebe <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00a      	beq.n	800ea52 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	4619      	mov	r1, r3
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 fc5d 	bl	800f302 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2205      	movs	r2, #5
 800ea4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ea50:	e235      	b.n	800eebe <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d008      	beq.n	800ea6e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fb89 	bl	800f176 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2211      	movs	r2, #17
 800ea68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ea6c:	e227      	b.n	800eebe <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2206      	movs	r2, #6
 800ea72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ea76:	e222      	b.n	800eebe <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea7e:	f003 0301 	and.w	r3, r3, #1
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	f000 821d 	beq.w	800eec2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d008      	beq.n	800eaa4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ea92:	2100      	movs	r1, #0
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fb6e 	bl	800f176 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2211      	movs	r2, #17
 800ea9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800eaa2:	e20e      	b.n	800eec2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2206      	movs	r2, #6
 800eaa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eaac:	e209      	b.n	800eec2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f000 8204 	beq.w	800eec6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d008      	beq.n	800eada <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800eac8:	2101      	movs	r1, #1
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 fc9d 	bl	800f40a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2212      	movs	r2, #18
 800ead4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ead8:	e1f5      	b.n	800eec6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2206      	movs	r2, #6
 800eade:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eae2:	e1f0      	b.n	800eec6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	f000 81eb 	beq.w	800eeca <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 fc4d 	bl	800f394 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2213      	movs	r2, #19
 800eafe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eb02:	e1e2      	b.n	800eeca <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 81dd 	beq.w	800eece <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2206      	movs	r2, #6
 800eb18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eb1c:	e1d7      	b.n	800eece <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d104      	bne.n	800eb32 <_ZN3BTD8HCI_taskEv+0x27a>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d007      	beq.n	800eb42 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fc8f 	bl	800f456 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2207      	movs	r2, #7
 800eb3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800eb40:	e1d8      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	220a      	movs	r2, #10
 800eb46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eb4a:	e1d3      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f000 81bb 	beq.w	800eed2 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fcb2 	bl	800f4c6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d007      	beq.n	800eb7c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f000 fb74 	bl	800f25a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	220c      	movs	r2, #12
 800eb76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800eb7a:	e1aa      	b.n	800eed2 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2208      	movs	r2, #8
 800eb80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eb84:	e1a5      	b.n	800eed2 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb8c:	f003 0301 	and.w	r3, r3, #1
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 81a0 	beq.w	800eed6 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fcac 	bl	800f4fc <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2209      	movs	r2, #9
 800eba8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ebac:	e193      	b.n	800eed6 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f000 818e 	beq.w	800eeda <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebc4:	f003 0302 	and.w	r3, r3, #2
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d007      	beq.n	800ebdc <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 fead 	bl	800f92c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	220a      	movs	r2, #10
 800ebd6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800ebda:	e17e      	b.n	800eeda <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fc8d 	bl	800f4fc <_ZN3BTD11hci_connectEv>
                        break;
 800ebe2:	e17a      	b.n	800eeda <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebea:	f083 0301 	eor.w	r3, r3, #1
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 8174 	beq.w	800eede <_ZN3BTD8HCI_taskEv+0x626>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebfc:	f083 0301 	eor.w	r3, r3, #1
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f000 816b 	beq.w	800eede <_ZN3BTD8HCI_taskEv+0x626>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ec0e:	f083 0301 	eor.w	r3, r3, #1
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f000 8162 	beq.w	800eede <_ZN3BTD8HCI_taskEv+0x626>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ec20:	f083 0301 	eor.w	r3, r3, #1
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	f000 8159 	beq.w	800eede <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fa29 	bl	800f084 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	220b      	movs	r2, #11
 800ec3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ec40:	e14d      	b.n	800eede <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec48:	f003 0310 	and.w	r3, r3, #16
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d00a      	beq.n	800ec66 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 faff 	bl	800f25a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	220c      	movs	r2, #12
 800ec60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ec64:	e13d      	b.n	800eee2 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec6c:	f003 0304 	and.w	r3, r3, #4
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 8136 	beq.w	800eee2 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2210      	movs	r2, #16
 800ec7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ec7e:	e130      	b.n	800eee2 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec86:	f003 0308 	and.w	r3, r3, #8
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f000 812b 	beq.w	800eee6 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3322      	adds	r3, #34	; 0x22
 800ec94:	2208      	movs	r2, #8
 800ec96:	4999      	ldr	r1, [pc, #612]	; (800eefc <_ZN3BTD8HCI_taskEv+0x644>)
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f004 fe27 	bl	80138ec <strncmp>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d147      	bne.n	800ed34 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3322      	adds	r3, #34	; 0x22
 800ecc8:	2216      	movs	r2, #22
 800ecca:	498d      	ldr	r1, [pc, #564]	; (800ef00 <_ZN3BTD8HCI_taskEv+0x648>)
 800eccc:	4618      	mov	r0, r3
 800ecce:	f004 fe0d 	bl	80138ec <strncmp>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d104      	bne.n	800ece2 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ece0:	e028      	b.n	800ed34 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3322      	adds	r3, #34	; 0x22
 800ece6:	2216      	movs	r2, #22
 800ece8:	4986      	ldr	r1, [pc, #536]	; (800ef04 <_ZN3BTD8HCI_taskEv+0x64c>)
 800ecea:	4618      	mov	r0, r3
 800ecec:	f004 fdfe 	bl	80138ec <strncmp>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d110      	bne.n	800ed18 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed16:	e00d      	b.n	800ed34 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3322      	adds	r3, #34	; 0x22
 800ed1c:	2213      	movs	r2, #19
 800ed1e:	497a      	ldr	r1, [pc, #488]	; (800ef08 <_ZN3BTD8HCI_taskEv+0x650>)
 800ed20:	4618      	mov	r0, r3
 800ed22:	f004 fde3 	bl	80138ec <strncmp>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d103      	bne.n	800ed34 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d117      	bne.n	800ed6e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ed44:	2b25      	cmp	r3, #37	; 0x25
 800ed46:	d112      	bne.n	800ed6e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ed4e:	2b08      	cmp	r3, #8
 800ed50:	d10d      	bne.n	800ed6e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3322      	adds	r3, #34	; 0x22
 800ed56:	2213      	movs	r2, #19
 800ed58:	496c      	ldr	r1, [pc, #432]	; (800ef0c <_ZN3BTD8HCI_taskEv+0x654>)
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f004 fdc6 	bl	80138ec <strncmp>
 800ed60:	4603      	mov	r3, r0
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d103      	bne.n	800ed6e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d104      	bne.n	800ed82 <_ZN3BTD8HCI_taskEv+0x4ca>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d009      	beq.n	800ed96 <_ZN3BTD8HCI_taskEv+0x4de>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d004      	beq.n	800ed96 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2208      	movs	r2, #8
 800ed90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800ed94:	e0a7      	b.n	800eee6 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fa17 	bl	800f1ca <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	220d      	movs	r2, #13
 800eda0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eda4:	e09f      	b.n	800eee6 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800edac:	f003 0302 	and.w	r3, r3, #2
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 809a 	beq.w	800eeea <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d003      	beq.n	800edc8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2200      	movs	r2, #0
 800edcc:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	220f      	movs	r2, #15
 800ede6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800edea:	e07e      	b.n	800eeea <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800edf2:	3301      	adds	r3, #1
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ee02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee06:	d972      	bls.n	800eeee <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	220a      	movs	r2, #10
 800ee14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ee18:	e069      	b.n	800eeee <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ee20:	f003 0304 	and.w	r3, r3, #4
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d064      	beq.n	800eef2 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	3389      	adds	r3, #137	; 0x89
 800ee34:	2240      	movs	r2, #64	; 0x40
 800ee36:	2100      	movs	r1, #0
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f004 fd0b 	bl	8013854 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	33c9      	adds	r3, #201	; 0xc9
 800ee42:	2240      	movs	r2, #64	; 0x40
 800ee44:	2100      	movs	r1, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f004 fd04 	bl	8013854 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	220a      	movs	r2, #10
 800eea4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eea8:	e023      	b.n	800eef2 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800eeaa:	bf00      	nop
 800eeac:	e022      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeae:	bf00      	nop
 800eeb0:	e020      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeb2:	bf00      	nop
 800eeb4:	e01e      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeb6:	bf00      	nop
 800eeb8:	e01c      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeba:	bf00      	nop
 800eebc:	e01a      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eebe:	bf00      	nop
 800eec0:	e018      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eec2:	bf00      	nop
 800eec4:	e016      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eec6:	bf00      	nop
 800eec8:	e014      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeca:	bf00      	nop
 800eecc:	e012      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eece:	bf00      	nop
 800eed0:	e010      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eed2:	bf00      	nop
 800eed4:	e00e      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eed6:	bf00      	nop
 800eed8:	e00c      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeda:	bf00      	nop
 800eedc:	e00a      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eede:	bf00      	nop
 800eee0:	e008      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eee2:	bf00      	nop
 800eee4:	e006      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eee6:	bf00      	nop
 800eee8:	e004      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeea:	bf00      	nop
 800eeec:	e002      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eeee:	bf00      	nop
 800eef0:	e000      	b.n	800eef4 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eef2:	bf00      	nop
        }
}
 800eef4:	bf00      	nop
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	08013b2c 	.word	0x08013b2c
 800ef00:	08013b38 	.word	0x08013b38
 800ef04:	08013b50 	.word	0x08013b50
 800ef08:	08013b68 	.word	0x08013b68
 800ef0c:	08013b7c 	.word	0x08013b7c

0800ef10 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ef10:	b5b0      	push	{r4, r5, r7, lr}
 800ef12:	b086      	sub	sp, #24
 800ef14:	af02      	add	r7, sp, #8
 800ef16:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ef18:	2340      	movs	r3, #64	; 0x40
 800ef1a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	33c9      	adds	r3, #201	; 0xc9
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ef36:	f107 050a 	add.w	r5, r7, #10
 800ef3a:	9201      	str	r2, [sp, #4]
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	462b      	mov	r3, r5
 800ef40:	4622      	mov	r2, r4
 800ef42:	f003 f92c 	bl	801219e <_ZN3USB10inTransferEhhPtPhh>
 800ef46:	4603      	mov	r3, r0
 800ef48:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ef4a:	7b7b      	ldrb	r3, [r7, #13]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d125      	bne.n	800ef9c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ef50:	897b      	ldrh	r3, [r7, #10]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d022      	beq.n	800ef9c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ef56:	2300      	movs	r3, #0
 800ef58:	73fb      	strb	r3, [r7, #15]
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d81d      	bhi.n	800ef9c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	3318      	adds	r3, #24
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	4413      	add	r3, r2
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d011      	beq.n	800ef94 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800ef70:	7bfb      	ldrb	r3, [r7, #15]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	3318      	adds	r3, #24
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	4413      	add	r3, r2
 800ef7a:	6858      	ldr	r0, [r3, #4]
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	3318      	adds	r3, #24
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	32c9      	adds	r2, #201	; 0xc9
 800ef90:	4611      	mov	r1, r2
 800ef92:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
 800ef96:	3301      	adds	r3, #1
 800ef98:	73fb      	strb	r3, [r7, #15]
 800ef9a:	e7de      	b.n	800ef5a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	73bb      	strb	r3, [r7, #14]
 800efa0:	7bbb      	ldrb	r3, [r7, #14]
 800efa2:	2b03      	cmp	r3, #3
 800efa4:	d81c      	bhi.n	800efe0 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800efa6:	7bbb      	ldrb	r3, [r7, #14]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	3318      	adds	r3, #24
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4413      	add	r3, r2
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d010      	beq.n	800efd8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800efb6:	7bbb      	ldrb	r3, [r7, #14]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	3318      	adds	r3, #24
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4413      	add	r3, r2
 800efc0:	6859      	ldr	r1, [r3, #4]
 800efc2:	7bbb      	ldrb	r3, [r7, #14]
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	3318      	adds	r3, #24
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4413      	add	r3, r2
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	3304      	adds	r3, #4
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	4608      	mov	r0, r1
 800efd6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800efd8:	7bbb      	ldrb	r3, [r7, #14]
 800efda:	3301      	adds	r3, #1
 800efdc:	73bb      	strb	r3, [r7, #14]
 800efde:	e7df      	b.n	800efa0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800efe0:	bf00      	nop
 800efe2:	3710      	adds	r7, #16
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bdb0      	pop	{r4, r5, r7, pc}

0800efe8 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800efe8:	b580      	push	{r7, lr}
 800efea:	b08c      	sub	sp, #48	; 0x30
 800efec:	af08      	add	r7, sp, #32
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4613      	mov	r3, r2
 800eff4:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800effc:	f023 0301 	bic.w	r3, r3, #1
 800f000:	b29a      	uxth	r2, r3
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800f018:	2300      	movs	r3, #0
 800f01a:	9307      	str	r3, [sp, #28]
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	9306      	str	r3, [sp, #24]
 800f020:	88fb      	ldrh	r3, [r7, #6]
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	9304      	str	r3, [sp, #16]
 800f028:	2300      	movs	r3, #0
 800f02a:	9303      	str	r3, [sp, #12]
 800f02c:	2300      	movs	r3, #0
 800f02e:	9302      	str	r3, [sp, #8]
 800f030:	2300      	movs	r3, #0
 800f032:	9301      	str	r3, [sp, #4]
 800f034:	2300      	movs	r3, #0
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	2320      	movs	r3, #32
 800f03a:	f002 ffd8 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800f03e:	bf00      	nop
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800f046:	b580      	push	{r7, lr}
 800f048:	b082      	sub	sp, #8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2203      	movs	r2, #3
 800f05a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	220c      	movs	r2, #12
 800f062:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3389      	adds	r3, #137	; 0x89
 800f072:	2203      	movs	r2, #3
 800f074:	4619      	mov	r1, r3
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f7ff ffb6 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f07c:	bf00      	nop
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f092:	f023 0310 	bic.w	r3, r3, #16
 800f096:	b29a      	uxth	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	221a      	movs	r2, #26
 800f0a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	220c      	movs	r2, #12
 800f0aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d004      	beq.n	800f0c8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2203      	movs	r2, #3
 800f0c2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800f0c6:	e003      	b.n	800f0d0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	3389      	adds	r3, #137	; 0x89
 800f0d4:	2204      	movs	r2, #4
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7ff ff85 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f0de:	bf00      	nop
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f0f4:	f023 0320 	bic.w	r3, r3, #32
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2209      	movs	r2, #9
 800f104:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2210      	movs	r2, #16
 800f10c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	3389      	adds	r3, #137	; 0x89
 800f11c:	2203      	movs	r2, #3
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff ff61 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f126:	bf00      	nop
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800f12e:	b580      	push	{r7, lr}
 800f130:	b082      	sub	sp, #8
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f13c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f140:	b29a      	uxth	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2201      	movs	r2, #1
 800f14c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2210      	movs	r2, #16
 800f154:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3389      	adds	r3, #137	; 0x89
 800f164:	2203      	movs	r2, #3
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff ff3d 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	460b      	mov	r3, r1
 800f180:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2204      	movs	r2, #4
 800f198:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2210      	movs	r2, #16
 800f1a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	78fa      	ldrb	r2, [r7, #3]
 800f1b0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	3389      	adds	r3, #137	; 0x89
 800f1b8:	2204      	movs	r2, #4
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7ff ff13 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f1c2:	bf00      	nop
 800f1c4:	3708      	adds	r7, #8
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b082      	sub	sp, #8
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f1d8:	f023 0302 	bic.w	r3, r3, #2
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2209      	movs	r2, #9
 800f1e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2204      	movs	r2, #4
 800f1f0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2207      	movs	r2, #7
 800f1f8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	7f1a      	ldrb	r2, [r3, #28]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	7f5a      	ldrb	r2, [r3, #29]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7f9a      	ldrb	r2, [r3, #30]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	7fda      	ldrb	r2, [r3, #31]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	3389      	adds	r3, #137	; 0x89
 800f248:	220a      	movs	r2, #10
 800f24a:	4619      	mov	r1, r3
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff fecb 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f252:	bf00      	nop
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f268:	f023 0308 	bic.w	r3, r3, #8
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2219      	movs	r2, #25
 800f278:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2204      	movs	r2, #4
 800f280:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	220a      	movs	r2, #10
 800f288:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	7f1a      	ldrb	r2, [r3, #28]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	7f5a      	ldrb	r2, [r3, #29]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	7f9a      	ldrb	r2, [r3, #30]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	7fda      	ldrb	r2, [r3, #31]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3389      	adds	r3, #137	; 0x89
 800f2f0:	220d      	movs	r2, #13
 800f2f2:	4619      	mov	r1, r3
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff fe77 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f2fa:	bf00      	nop
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800f302:	b590      	push	{r4, r7, lr}
 800f304:	b085      	sub	sp, #20
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2213      	movs	r2, #19
 800f310:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	220c      	movs	r2, #12
 800f318:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800f31c:	6838      	ldr	r0, [r7, #0]
 800f31e:	f7f0 ff77 	bl	8000210 <strlen>
 800f322:	4603      	mov	r3, r0
 800f324:	b2db      	uxtb	r3, r3
 800f326:	3301      	adds	r3, #1
 800f328:	b2da      	uxtb	r2, r3
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800f330:	2300      	movs	r3, #0
 800f332:	73fb      	strb	r3, [r7, #15]
 800f334:	7bfc      	ldrb	r4, [r7, #15]
 800f336:	6838      	ldr	r0, [r7, #0]
 800f338:	f7f0 ff6a 	bl	8000210 <strlen>
 800f33c:	4603      	mov	r3, r0
 800f33e:	429c      	cmp	r4, r3
 800f340:	d20e      	bcs.n	800f360 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	441a      	add	r2, r3
 800f348:	7bfb      	ldrb	r3, [r7, #15]
 800f34a:	3303      	adds	r3, #3
 800f34c:	7811      	ldrb	r1, [r2, #0]
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	4413      	add	r3, r2
 800f352:	460a      	mov	r2, r1
 800f354:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800f358:	7bfb      	ldrb	r3, [r7, #15]
 800f35a:	3301      	adds	r3, #1
 800f35c:	73fb      	strb	r3, [r7, #15]
 800f35e:	e7e9      	b.n	800f334 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800f360:	7bfb      	ldrb	r3, [r7, #15]
 800f362:	3303      	adds	r3, #3
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	4413      	add	r3, r2
 800f368:	2200      	movs	r2, #0
 800f36a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800f374:	6838      	ldr	r0, [r7, #0]
 800f376:	f7f0 ff4b 	bl	8000210 <strlen>
 800f37a:	4603      	mov	r3, r0
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	3304      	adds	r3, #4
 800f380:	b29b      	uxth	r3, r3
 800f382:	461a      	mov	r2, r3
 800f384:	4621      	mov	r1, r4
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7ff fe2e 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f38c:	bf00      	nop
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	bd90      	pop	{r4, r7, pc}

0800f394 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	220c      	movs	r2, #12
 800f3a8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2208      	movs	r2, #8
 800f3b0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	22ff      	movs	r2, #255	; 0xff
 800f3b8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	22ff      	movs	r2, #255	; 0xff
 800f3c0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	22ff      	movs	r2, #255	; 0xff
 800f3c8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	22ff      	movs	r2, #255	; 0xff
 800f3d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	22ff      	movs	r2, #255	; 0xff
 800f3d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	221f      	movs	r2, #31
 800f3e0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	22ff      	movs	r2, #255	; 0xff
 800f3e8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	3389      	adds	r3, #137	; 0x89
 800f3f8:	220b      	movs	r2, #11
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff fdf3 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f402:	bf00      	nop
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b082      	sub	sp, #8
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	460b      	mov	r3, r1
 800f414:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2256      	movs	r2, #86	; 0x56
 800f41a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	220c      	movs	r2, #12
 800f422:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d001      	beq.n	800f438 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800f434:	2201      	movs	r2, #1
 800f436:	e000      	b.n	800f43a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800f438:	2200      	movs	r2, #0
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	3389      	adds	r3, #137	; 0x89
 800f444:	2204      	movs	r2, #4
 800f446:	4619      	mov	r1, r3
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7ff fdcd 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f44e:	bf00      	nop
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800f456:	b580      	push	{r7, lr}
 800f458:	b082      	sub	sp, #8
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f468:	b29a      	uxth	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2201      	movs	r2, #1
 800f474:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2204      	movs	r2, #4
 800f47c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2205      	movs	r2, #5
 800f484:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2233      	movs	r2, #51	; 0x33
 800f48c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	228b      	movs	r2, #139	; 0x8b
 800f494:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	229e      	movs	r2, #158	; 0x9e
 800f49c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2230      	movs	r2, #48	; 0x30
 800f4a4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	220a      	movs	r2, #10
 800f4ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	3389      	adds	r3, #137	; 0x89
 800f4b4:	2208      	movs	r2, #8
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff fd95 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f4be:	bf00      	nop
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800f4c6:	b580      	push	{r7, lr}
 800f4c8:	b082      	sub	sp, #8
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2204      	movs	r2, #4
 800f4da:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3389      	adds	r3, #137	; 0x89
 800f4ea:	2203      	movs	r2, #3
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f7ff fd7a 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f4f4:	bf00      	nop
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	331c      	adds	r3, #28
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 f804 	bl	800f518 <_ZN3BTD11hci_connectEPh>
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f528:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2205      	movs	r2, #5
 800f538:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2204      	movs	r2, #4
 800f540:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	220d      	movs	r2, #13
 800f548:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	781a      	ldrb	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	785a      	ldrb	r2, [r3, #1]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	789a      	ldrb	r2, [r3, #2]
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	78da      	ldrb	r2, [r3, #3]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	791a      	ldrb	r2, [r3, #4]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	795a      	ldrb	r2, [r3, #5]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2218      	movs	r2, #24
 800f58c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	22cc      	movs	r2, #204	; 0xcc
 800f594:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3389      	adds	r3, #137	; 0x89
 800f5c4:	2210      	movs	r2, #16
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7ff fd0d 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f5ce:	bf00      	nop
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800f5d6:	b590      	push	{r4, r7, lr}
 800f5d8:	b085      	sub	sp, #20
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	220d      	movs	r2, #13
 800f5e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2204      	movs	r2, #4
 800f5ea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2217      	movs	r2, #23
 800f5f2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	7f1a      	ldrb	r2, [r3, #28]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	7f5a      	ldrb	r2, [r3, #29]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	7f9a      	ldrb	r2, [r3, #30]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	7fda      	ldrb	r2, [r3, #31]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d03f      	beq.n	800f6c0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2206      	movs	r2, #6
 800f644:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d013      	beq.n	800f67a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800f652:	2300      	movs	r3, #0
 800f654:	73fb      	strb	r3, [r7, #15]
 800f656:	7bfb      	ldrb	r3, [r7, #15]
 800f658:	2b05      	cmp	r3, #5
 800f65a:	d822      	bhi.n	800f6a2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800f65c:	7bfa      	ldrb	r2, [r7, #15]
 800f65e:	7bfb      	ldrb	r3, [r7, #15]
 800f660:	330a      	adds	r3, #10
 800f662:	6879      	ldr	r1, [r7, #4]
 800f664:	440a      	add	r2, r1
 800f666:	7d11      	ldrb	r1, [r2, #20]
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	4413      	add	r3, r2
 800f66c:	460a      	mov	r2, r1
 800f66e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f672:	7bfb      	ldrb	r3, [r7, #15]
 800f674:	3301      	adds	r3, #1
 800f676:	73fb      	strb	r3, [r7, #15]
 800f678:	e7ed      	b.n	800f656 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800f67a:	2300      	movs	r3, #0
 800f67c:	73bb      	strb	r3, [r7, #14]
 800f67e:	7bbb      	ldrb	r3, [r7, #14]
 800f680:	2b05      	cmp	r3, #5
 800f682:	d80e      	bhi.n	800f6a2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800f684:	7bba      	ldrb	r2, [r7, #14]
 800f686:	7bbb      	ldrb	r3, [r7, #14]
 800f688:	330a      	adds	r3, #10
 800f68a:	6879      	ldr	r1, [r7, #4]
 800f68c:	440a      	add	r2, r1
 800f68e:	7f11      	ldrb	r1, [r2, #28]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	4413      	add	r3, r2
 800f694:	460a      	mov	r2, r1
 800f696:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f69a:	7bbb      	ldrb	r3, [r7, #14]
 800f69c:	3301      	adds	r3, #1
 800f69e:	73bb      	strb	r3, [r7, #14]
 800f6a0:	e7ed      	b.n	800f67e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800f6a2:	2310      	movs	r3, #16
 800f6a4:	737b      	strb	r3, [r7, #13]
 800f6a6:	7b7b      	ldrb	r3, [r7, #13]
 800f6a8:	2b19      	cmp	r3, #25
 800f6aa:	d83c      	bhi.n	800f726 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800f6ac:	7b7b      	ldrb	r3, [r7, #13]
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	4413      	add	r3, r2
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800f6b8:	7b7b      	ldrb	r3, [r7, #13]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	737b      	strb	r3, [r7, #13]
 800f6be:	e7f2      	b.n	800f6a6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7f0 fda3 	bl	8000210 <strlen>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	733b      	strb	r3, [r7, #12]
 800f6d8:	7b3c      	ldrb	r4, [r7, #12]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	691b      	ldr	r3, [r3, #16]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7f0 fd96 	bl	8000210 <strlen>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	429c      	cmp	r4, r3
 800f6e8:	d20f      	bcs.n	800f70a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	691a      	ldr	r2, [r3, #16]
 800f6ee:	7b3b      	ldrb	r3, [r7, #12]
 800f6f0:	441a      	add	r2, r3
 800f6f2:	7b3b      	ldrb	r3, [r7, #12]
 800f6f4:	330a      	adds	r3, #10
 800f6f6:	7811      	ldrb	r1, [r2, #0]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	460a      	mov	r2, r1
 800f6fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f702:	7b3b      	ldrb	r3, [r7, #12]
 800f704:	3301      	adds	r3, #1
 800f706:	733b      	strb	r3, [r7, #12]
 800f708:	e7e6      	b.n	800f6d8 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800f70a:	7b3b      	ldrb	r3, [r7, #12]
 800f70c:	2b0f      	cmp	r3, #15
 800f70e:	d80a      	bhi.n	800f726 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800f710:	7b3b      	ldrb	r3, [r7, #12]
 800f712:	330a      	adds	r3, #10
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	4413      	add	r3, r2
 800f718:	2200      	movs	r2, #0
 800f71a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800f71e:	7b3b      	ldrb	r3, [r7, #12]
 800f720:	3301      	adds	r3, #1
 800f722:	733b      	strb	r3, [r7, #12]
 800f724:	e7f1      	b.n	800f70a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3389      	adds	r3, #137	; 0x89
 800f72a:	221a      	movs	r2, #26
 800f72c:	4619      	mov	r1, r3
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f7ff fc5a 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f734:	bf00      	nop
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd90      	pop	{r4, r7, pc}

0800f73c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	220e      	movs	r2, #14
 800f748:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2204      	movs	r2, #4
 800f750:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2206      	movs	r2, #6
 800f758:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	7f1a      	ldrb	r2, [r3, #28]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	7f5a      	ldrb	r2, [r3, #29]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	7f9a      	ldrb	r2, [r3, #30]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	7fda      	ldrb	r2, [r3, #31]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3389      	adds	r3, #137	; 0x89
 800f7a0:	2209      	movs	r2, #9
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff fc1f 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b082      	sub	sp, #8
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	220c      	movs	r2, #12
 800f7be:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2204      	movs	r2, #4
 800f7c6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2206      	movs	r2, #6
 800f7ce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	7f1a      	ldrb	r2, [r3, #28]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	7f5a      	ldrb	r2, [r3, #29]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	7f9a      	ldrb	r2, [r3, #30]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7fda      	ldrb	r2, [r3, #31]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	3389      	adds	r3, #137	; 0x89
 800f816:	2209      	movs	r2, #9
 800f818:	4619      	mov	r1, r3
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7ff fbe4 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f820:	bf00      	nop
 800f822:	3708      	adds	r7, #8
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	222b      	movs	r2, #43	; 0x2b
 800f834:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2204      	movs	r2, #4
 800f83c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2209      	movs	r2, #9
 800f844:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	7f1a      	ldrb	r2, [r3, #28]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	7f5a      	ldrb	r2, [r3, #29]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	7f9a      	ldrb	r2, [r3, #30]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	7fda      	ldrb	r2, [r3, #31]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2203      	movs	r2, #3
 800f88c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	3389      	adds	r3, #137	; 0x89
 800f8a4:	220c      	movs	r2, #12
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff fb9d 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f8ae:	bf00      	nop
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	222c      	movs	r2, #44	; 0x2c
 800f8c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2204      	movs	r2, #4
 800f8ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2206      	movs	r2, #6
 800f8d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	7f1a      	ldrb	r2, [r3, #28]
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	7f5a      	ldrb	r2, [r3, #29]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	7f9a      	ldrb	r2, [r3, #30]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	7fda      	ldrb	r2, [r3, #31]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3389      	adds	r3, #137	; 0x89
 800f91a:	2209      	movs	r2, #9
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff fb62 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2211      	movs	r2, #17
 800f938:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2204      	movs	r2, #4
 800f940:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2202      	movs	r2, #2
 800f948:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8b5b      	ldrh	r3, [r3, #26]
 800f950:	b2da      	uxtb	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8b5b      	ldrh	r3, [r3, #26]
 800f95c:	121b      	asrs	r3, r3, #8
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	f003 030f 	and.w	r3, r3, #15
 800f964:	b2da      	uxtb	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	3389      	adds	r3, #137	; 0x89
 800f970:	2205      	movs	r2, #5
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff fb37 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f97a:	bf00      	nop
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800f982:	b580      	push	{r7, lr}
 800f984:	b082      	sub	sp, #8
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
 800f98a:	460b      	mov	r3, r1
 800f98c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f994:	f023 0304 	bic.w	r3, r3, #4
 800f998:	b29a      	uxth	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2206      	movs	r2, #6
 800f9a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2204      	movs	r2, #4
 800f9ac:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2203      	movs	r2, #3
 800f9b4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800f9b8:	887b      	ldrh	r3, [r7, #2]
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800f9c2:	887b      	ldrh	r3, [r7, #2]
 800f9c4:	121b      	asrs	r3, r3, #8
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	f003 030f 	and.w	r3, r3, #15
 800f9cc:	b2da      	uxtb	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2213      	movs	r2, #19
 800f9d8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	3389      	adds	r3, #137	; 0x89
 800f9e0:	2206      	movs	r2, #6
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff faff 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800f9ea:	bf00      	nop
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}

0800f9f2 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800f9f2:	b580      	push	{r7, lr}
 800f9f4:	b082      	sub	sp, #8
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2224      	movs	r2, #36	; 0x24
 800f9fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	220c      	movs	r2, #12
 800fa06:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2203      	movs	r2, #3
 800fa0e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2204      	movs	r2, #4
 800fa16:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2208      	movs	r2, #8
 800fa1e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2200      	movs	r2, #0
 800fa26:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	3389      	adds	r3, #137	; 0x89
 800fa2e:	2206      	movs	r2, #6
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f7ff fad8 	bl	800efe8 <_ZN3BTD11HCI_CommandEPht>
}
 800fa38:	bf00      	nop
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800fa40:	b5b0      	push	{r4, r5, r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af02      	add	r7, sp, #8
 800fa46:	60f8      	str	r0, [r7, #12]
 800fa48:	607a      	str	r2, [r7, #4]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	817b      	strh	r3, [r7, #10]
 800fa50:	4613      	mov	r3, r2
 800fa52:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800fa54:	466b      	mov	r3, sp
 800fa56:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800fa58:	7a7b      	ldrb	r3, [r7, #9]
 800fa5a:	1ddc      	adds	r4, r3, #7
 800fa5c:	61bc      	str	r4, [r7, #24]
 800fa5e:	4623      	mov	r3, r4
 800fa60:	3301      	adds	r3, #1
 800fa62:	4618      	mov	r0, r3
 800fa64:	f04f 0100 	mov.w	r1, #0
 800fa68:	f04f 0200 	mov.w	r2, #0
 800fa6c:	f04f 0300 	mov.w	r3, #0
 800fa70:	00cb      	lsls	r3, r1, #3
 800fa72:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800fa76:	00c2      	lsls	r2, r0, #3
 800fa78:	4623      	mov	r3, r4
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f04f 0100 	mov.w	r1, #0
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	f04f 0300 	mov.w	r3, #0
 800fa8a:	00cb      	lsls	r3, r1, #3
 800fa8c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800fa90:	00c2      	lsls	r2, r0, #3
 800fa92:	4623      	mov	r3, r4
 800fa94:	3301      	adds	r3, #1
 800fa96:	3307      	adds	r3, #7
 800fa98:	08db      	lsrs	r3, r3, #3
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	ebad 0d03 	sub.w	sp, sp, r3
 800faa0:	ab02      	add	r3, sp, #8
 800faa2:	3300      	adds	r3, #0
 800faa4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800faa6:	897b      	ldrh	r3, [r7, #10]
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800faae:	897b      	ldrh	r3, [r7, #10]
 800fab0:	121b      	asrs	r3, r3, #8
 800fab2:	b25b      	sxtb	r3, r3
 800fab4:	f003 030f 	and.w	r3, r3, #15
 800fab8:	b25b      	sxtb	r3, r3
 800faba:	f043 0320 	orr.w	r3, r3, #32
 800fabe:	b25b      	sxtb	r3, r3
 800fac0:	b2da      	uxtb	r2, r3
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800fac6:	7a7b      	ldrb	r3, [r7, #9]
 800fac8:	3304      	adds	r3, #4
 800faca:	b2da      	uxtb	r2, r3
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800fad0:	7a7b      	ldrb	r3, [r7, #9]
 800fad2:	3304      	adds	r3, #4
 800fad4:	121b      	asrs	r3, r3, #8
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	7a7a      	ldrb	r2, [r7, #9]
 800fae0:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800fae2:	7a7b      	ldrb	r3, [r7, #9]
 800fae4:	121b      	asrs	r3, r3, #8
 800fae6:	b2da      	uxtb	r2, r3
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800faf2:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fafa:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fafc:	2300      	movs	r3, #0
 800fafe:	83fb      	strh	r3, [r7, #30]
 800fb00:	7a7b      	ldrb	r3, [r7, #9]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	8bfa      	ldrh	r2, [r7, #30]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d20b      	bcs.n	800fb22 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800fb0a:	8bfb      	ldrh	r3, [r7, #30]
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	441a      	add	r2, r3
 800fb10:	8bfb      	ldrh	r3, [r7, #30]
 800fb12:	3308      	adds	r3, #8
 800fb14:	7811      	ldrb	r1, [r2, #0]
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fb1a:	8bfb      	ldrh	r3, [r7, #30]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	83fb      	strh	r3, [r7, #30]
 800fb20:	e7ee      	b.n	800fb00 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800fb32:	7a7b      	ldrb	r3, [r7, #9]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	3308      	adds	r3, #8
 800fb38:	b29c      	uxth	r4, r3
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	4623      	mov	r3, r4
 800fb40:	f002 fc34 	bl	80123ac <_ZN3USB11outTransferEhhtPh>
 800fb44:	4603      	mov	r3, r0
 800fb46:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800fb48:	7cfb      	ldrb	r3, [r7, #19]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d002      	beq.n	800fb54 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800fb4e:	2064      	movs	r0, #100	; 0x64
 800fb50:	f7f2 fed6 	bl	8002900 <HAL_Delay>
 800fb54:	46ad      	mov	sp, r5
}
 800fb56:	bf00      	nop
 800fb58:	3720      	adds	r7, #32
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bdb0      	pop	{r4, r5, r7, pc}

0800fb5e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b086      	sub	sp, #24
 800fb62:	af02      	add	r7, sp, #8
 800fb64:	60f8      	str	r0, [r7, #12]
 800fb66:	607b      	str	r3, [r7, #4]
 800fb68:	460b      	mov	r3, r1
 800fb6a:	817b      	strh	r3, [r7, #10]
 800fb6c:	4613      	mov	r3, r2
 800fb6e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	2202      	movs	r2, #2
 800fb74:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	7a7a      	ldrb	r2, [r7, #9]
 800fb7c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2204      	movs	r2, #4
 800fb84:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800fb90:	8b3b      	ldrh	r3, [r7, #24]
 800fb92:	b2da      	uxtb	r2, r3
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800fb9a:	8b3b      	ldrh	r3, [r7, #24]
 800fb9c:	121b      	asrs	r3, r3, #8
 800fb9e:	b2da      	uxtb	r2, r3
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	781a      	ldrb	r2, [r3, #0]
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	785a      	ldrb	r2, [r3, #1]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fbc0:	8979      	ldrh	r1, [r7, #10]
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	9301      	str	r3, [sp, #4]
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	2308      	movs	r3, #8
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f7ff ff37 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fbd2:	bf00      	nop
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b086      	sub	sp, #24
 800fbde:	af02      	add	r7, sp, #8
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	607b      	str	r3, [r7, #4]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	817b      	strh	r3, [r7, #10]
 800fbe8:	4613      	mov	r3, r2
 800fbea:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2203      	movs	r2, #3
 800fbf0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	7a7a      	ldrb	r2, [r7, #9]
 800fbf8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2208      	movs	r2, #8
 800fc00:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	781a      	ldrb	r2, [r3, #0]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	785a      	ldrb	r2, [r3, #1]
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	781a      	ldrb	r2, [r3, #0]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	785a      	ldrb	r2, [r3, #1]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	7f3a      	ldrb	r2, [r7, #28]
 800fc38:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2200      	movs	r2, #0
 800fc48:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fc5a:	8979      	ldrh	r1, [r7, #10]
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	9301      	str	r3, [sp, #4]
 800fc60:	2301      	movs	r3, #1
 800fc62:	9300      	str	r3, [sp, #0]
 800fc64:	230c      	movs	r3, #12
 800fc66:	68f8      	ldr	r0, [r7, #12]
 800fc68:	f7ff feea 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fc6c:	bf00      	nop
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af02      	add	r7, sp, #8
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	460b      	mov	r3, r1
 800fc80:	817b      	strh	r3, [r7, #10]
 800fc82:	4613      	mov	r3, r2
 800fc84:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2204      	movs	r2, #4
 800fc8a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	7a7a      	ldrb	r2, [r7, #9]
 800fc92:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2208      	movs	r2, #8
 800fc9a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	781a      	ldrb	r2, [r3, #0]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	785a      	ldrb	r2, [r3, #1]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2201      	movs	r2, #1
 800fcce:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2202      	movs	r2, #2
 800fcd6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	22ff      	movs	r2, #255	; 0xff
 800fcde:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	22ff      	movs	r2, #255	; 0xff
 800fce6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fcf0:	8979      	ldrh	r1, [r7, #10]
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	9301      	str	r3, [sp, #4]
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	230c      	movs	r3, #12
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f7ff fe9f 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd02:	bf00      	nop
 800fd04:	3710      	adds	r7, #16
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b086      	sub	sp, #24
 800fd0e:	af02      	add	r7, sp, #8
 800fd10:	60f8      	str	r0, [r7, #12]
 800fd12:	607b      	str	r3, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	817b      	strh	r3, [r7, #10]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2205      	movs	r2, #5
 800fd20:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	7a7a      	ldrb	r2, [r7, #9]
 800fd28:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	220a      	movs	r2, #10
 800fd30:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	781a      	ldrb	r2, [r3, #0]
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	785a      	ldrb	r2, [r3, #1]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2201      	movs	r2, #1
 800fd74:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2202      	movs	r2, #2
 800fd7c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	22a0      	movs	r2, #160	; 0xa0
 800fd84:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	2202      	movs	r2, #2
 800fd8c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fd96:	8979      	ldrh	r1, [r7, #10]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	230e      	movs	r3, #14
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff fe4c 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fda8:	bf00      	nop
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af02      	add	r7, sp, #8
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	607b      	str	r3, [r7, #4]
 800fdba:	460b      	mov	r3, r1
 800fdbc:	817b      	strh	r3, [r7, #10]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2206      	movs	r2, #6
 800fdc6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	7a7a      	ldrb	r2, [r7, #9]
 800fdce:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2204      	movs	r2, #4
 800fdd6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	781a      	ldrb	r2, [r3, #0]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	785a      	ldrb	r2, [r3, #1]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	781a      	ldrb	r2, [r3, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	785a      	ldrb	r2, [r3, #1]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fe10:	8979      	ldrh	r1, [r7, #10]
 800fe12:	2300      	movs	r3, #0
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	2301      	movs	r3, #1
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	2308      	movs	r3, #8
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff fe0f 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fe22:	bf00      	nop
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b086      	sub	sp, #24
 800fe2e:	af02      	add	r7, sp, #8
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	607b      	str	r3, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	817b      	strh	r3, [r7, #10]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2207      	movs	r2, #7
 800fe40:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	7a7a      	ldrb	r2, [r7, #9]
 800fe48:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	781a      	ldrb	r2, [r3, #0]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	785a      	ldrb	r2, [r3, #1]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	781a      	ldrb	r2, [r3, #0]
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	785a      	ldrb	r2, [r3, #1]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fe8a:	8979      	ldrh	r1, [r7, #10]
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	9301      	str	r3, [sp, #4]
 800fe90:	2301      	movs	r3, #1
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	2308      	movs	r3, #8
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f7ff fdd2 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fe9c:	bf00      	nop
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af02      	add	r7, sp, #8
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	4608      	mov	r0, r1
 800feae:	4611      	mov	r1, r2
 800feb0:	461a      	mov	r2, r3
 800feb2:	4603      	mov	r3, r0
 800feb4:	807b      	strh	r3, [r7, #2]
 800feb6:	460b      	mov	r3, r1
 800feb8:	707b      	strb	r3, [r7, #1]
 800feba:	4613      	mov	r3, r2
 800febc:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	220b      	movs	r2, #11
 800fec2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	787a      	ldrb	r2, [r7, #1]
 800feca:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2208      	movs	r2, #8
 800fed2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	783a      	ldrb	r2, [r7, #0]
 800fee2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	7c3a      	ldrb	r2, [r7, #16]
 800feea:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ff24:	8879      	ldrh	r1, [r7, #2]
 800ff26:	2300      	movs	r3, #0
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	230c      	movs	r3, #12
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7ff fd85 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ff36:	bf00      	nop
 800ff38:	3708      	adds	r7, #8
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b08e      	sub	sp, #56	; 0x38
 800ff42:	af08      	add	r7, sp, #32
 800ff44:	6078      	str	r0, [r7, #4]
 800ff46:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800ff50:	2300      	movs	r3, #0
 800ff52:	75fb      	strb	r3, [r7, #23]
 800ff54:	7dfb      	ldrb	r3, [r7, #23]
 800ff56:	2b05      	cmp	r3, #5
 800ff58:	d811      	bhi.n	800ff7e <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800ff5a:	7dfb      	ldrb	r3, [r7, #23]
 800ff5c:	f1c3 0305 	rsb	r3, r3, #5
 800ff60:	461a      	mov	r2, r3
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	441a      	add	r2, r3
 800ff66:	7dfb      	ldrb	r3, [r7, #23]
 800ff68:	3302      	adds	r3, #2
 800ff6a:	7812      	ldrb	r2, [r2, #0]
 800ff6c:	f107 0118 	add.w	r1, r7, #24
 800ff70:	440b      	add	r3, r1
 800ff72:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800ff76:	7dfb      	ldrb	r3, [r7, #23]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	75fb      	strb	r3, [r7, #23]
 800ff7c:	e7ea      	b.n	800ff54 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ff8e:	2300      	movs	r3, #0
 800ff90:	9307      	str	r3, [sp, #28]
 800ff92:	f107 030c 	add.w	r3, r7, #12
 800ff96:	9306      	str	r3, [sp, #24]
 800ff98:	2308      	movs	r3, #8
 800ff9a:	9305      	str	r3, [sp, #20]
 800ff9c:	2308      	movs	r3, #8
 800ff9e:	9304      	str	r3, [sp, #16]
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	9303      	str	r3, [sp, #12]
 800ffa4:	2303      	movs	r3, #3
 800ffa6:	9302      	str	r3, [sp, #8]
 800ffa8:	23f5      	movs	r3, #245	; 0xf5
 800ffaa:	9301      	str	r3, [sp, #4]
 800ffac:	2309      	movs	r3, #9
 800ffae:	9300      	str	r3, [sp, #0]
 800ffb0:	2321      	movs	r3, #33	; 0x21
 800ffb2:	f002 f81c 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ffb6:	bf00      	nop
 800ffb8:	3718      	adds	r7, #24
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}

0800ffbe <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b08e      	sub	sp, #56	; 0x38
 800ffc2:	af08      	add	r7, sp, #32
 800ffc4:	6078      	str	r0, [r7, #4]
 800ffc6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800ffc8:	2305      	movs	r3, #5
 800ffca:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800ffcc:	2310      	movs	r3, #16
 800ffce:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800ffd8:	2312      	movs	r3, #18
 800ffda:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800ffdc:	2300      	movs	r3, #0
 800ffde:	75fb      	strb	r3, [r7, #23]
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	2b05      	cmp	r3, #5
 800ffe4:	d80e      	bhi.n	8010004 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
 800ffe8:	683a      	ldr	r2, [r7, #0]
 800ffea:	441a      	add	r2, r3
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	3301      	adds	r3, #1
 800fff0:	7812      	ldrb	r2, [r2, #0]
 800fff2:	f107 0118 	add.w	r1, r7, #24
 800fff6:	440b      	add	r3, r1
 800fff8:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	3301      	adds	r3, #1
 8010000:	75fb      	strb	r3, [r7, #23]
 8010002:	e7ed      	b.n	800ffe0 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8010014:	2300      	movs	r3, #0
 8010016:	9307      	str	r3, [sp, #28]
 8010018:	f107 030c 	add.w	r3, r7, #12
 801001c:	9306      	str	r3, [sp, #24]
 801001e:	230b      	movs	r3, #11
 8010020:	9305      	str	r3, [sp, #20]
 8010022:	230b      	movs	r3, #11
 8010024:	9304      	str	r3, [sp, #16]
 8010026:	2300      	movs	r3, #0
 8010028:	9303      	str	r3, [sp, #12]
 801002a:	2303      	movs	r3, #3
 801002c:	9302      	str	r3, [sp, #8]
 801002e:	2305      	movs	r3, #5
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	2309      	movs	r3, #9
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	2321      	movs	r3, #33	; 0x21
 8010038:	f001 ffd9 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 801003c:	bf00      	nop
 801003e:	3718      	adds	r7, #24
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	4a04      	ldr	r2, [pc, #16]	; (8010060 <_ZN13USBReadParserC1Ev+0x1c>)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	601a      	str	r2, [r3, #0]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	4618      	mov	r0, r3
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	08014ae0 	.word	0x08014ae0

08010064 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff ffe7 	bl	8010044 <_ZN13USBReadParserC1Ev>
 8010076:	4a21      	ldr	r2, [pc, #132]	; (80100fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	601a      	str	r2, [r3, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	683a      	ldr	r2, [r7, #0]
 8010080:	605a      	str	r2, [r3, #4]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	3308      	adds	r3, #8
 8010086:	4618      	mov	r0, r3
 8010088:	f7fd fb65 	bl	800d756 <_ZN16MultiValueBufferC1Ev>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	3310      	adds	r3, #16
 8010090:	4618      	mov	r0, r3
 8010092:	f7fd fb77 	bl	800d784 <_ZN20MultiByteValueParserC1Ev>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	3318      	adds	r3, #24
 801009a:	4618      	mov	r0, r3
 801009c:	f7fd fb9e 	bl	800d7dc <_ZN11ByteSkipperC1Ev>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f103 0220 	add.w	r2, r3, #32
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f103 0210 	add.w	r2, r3, #16
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	3308      	adds	r3, #8
 80100d6:	4619      	mov	r1, r3
 80100d8:	4610      	mov	r0, r2
 80100da:	f7fd fb67 	bl	800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f103 0218 	add.w	r2, r3, #24
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3308      	adds	r3, #8
 80100e8:	4619      	mov	r1, r3
 80100ea:	4610      	mov	r0, r2
 80100ec:	f7fd fb8a 	bl	800d804 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	08014a88 	.word	0x08014a88

08010100 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
UseOr(false) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	4618      	mov	r0, r3
 801010e:	f7ff ff99 	bl	8010044 <_ZN13USBReadParserC1Ev>
 8010112:	4a21      	ldr	r2, [pc, #132]	; (8010198 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	601a      	str	r2, [r3, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	605a      	str	r2, [r3, #4]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3308      	adds	r3, #8
 8010122:	4618      	mov	r0, r3
 8010124:	f7fd fb17 	bl	800d756 <_ZN16MultiValueBufferC1Ev>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3310      	adds	r3, #16
 801012c:	4618      	mov	r0, r3
 801012e:	f7fd fb29 	bl	800d784 <_ZN20MultiByteValueParserC1Ev>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	3318      	adds	r3, #24
 8010136:	4618      	mov	r0, r3
 8010138:	f7fd fb50 	bl	800d7dc <_ZN11ByteSkipperC1Ev>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2200      	movs	r2, #0
 8010148:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f103 0220 	add.w	r2, r3, #32
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f103 0210 	add.w	r2, r3, #16
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	3308      	adds	r3, #8
 8010172:	4619      	mov	r1, r3
 8010174:	4610      	mov	r0, r2
 8010176:	f7fd fb19 	bl	800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f103 0218 	add.w	r2, r3, #24
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	3308      	adds	r3, #8
 8010184:	4619      	mov	r1, r3
 8010186:	4610      	mov	r0, r2
 8010188:	f7fd fb3c 	bl	800d804 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4618      	mov	r0, r3
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	08014a7c 	.word	0x08014a7c

0801019c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	607a      	str	r2, [r7, #4]
 80101a6:	603b      	str	r3, [r7, #0]
 80101a8:	460b      	mov	r3, r1
 80101aa:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80101ac:	897b      	ldrh	r3, [r7, #10]
 80101ae:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	613b      	str	r3, [r7, #16]

        while(cntdn)
 80101b4:	8afb      	ldrh	r3, [r7, #22]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00f      	beq.n	80101da <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80101ba:	f107 0216 	add.w	r2, r7, #22
 80101be:	f107 0310 	add.w	r3, r7, #16
 80101c2:	4619      	mov	r1, r3
 80101c4:	68f8      	ldr	r0, [r7, #12]
 80101c6:	f000 f82d 	bl	8010224 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80101ca:	4603      	mov	r3, r0
 80101cc:	f083 0301 	eor.w	r3, r3, #1
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d100      	bne.n	80101d8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 80101d6:	e7ed      	b.n	80101b4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 80101d8:	bf00      	nop
}
 80101da:	3718      	adds	r7, #24
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	607a      	str	r2, [r7, #4]
 80101ea:	603b      	str	r3, [r7, #0]
 80101ec:	460b      	mov	r3, r1
 80101ee:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80101f0:	897b      	ldrh	r3, [r7, #10]
 80101f2:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	613b      	str	r3, [r7, #16]
        while(cntdn)
 80101f8:	8afb      	ldrh	r3, [r7, #22]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d00f      	beq.n	801021e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80101fe:	f107 0216 	add.w	r2, r7, #22
 8010202:	f107 0310 	add.w	r3, r7, #16
 8010206:	4619      	mov	r1, r3
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f000 f981 	bl	8010510 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801020e:	4603      	mov	r3, r0
 8010210:	f083 0301 	eor.w	r3, r3, #1
 8010214:	b2db      	uxtb	r3, r3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d100      	bne.n	801021c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 801021a:	e7ed      	b.n	80101f8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801021c:	bf00      	nop
}
 801021e:	3718      	adds	r7, #24
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010226:	b089      	sub	sp, #36	; 0x24
 8010228:	af02      	add	r7, sp, #8
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	3320      	adds	r3, #32
 8010234:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	3320      	adds	r3, #32
 801023a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010242:	2b04      	cmp	r3, #4
 8010244:	f200 815e 	bhi.w	8010504 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010248:	a201      	add	r2, pc, #4	; (adr r2, 8010250 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 801024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801024e:	bf00      	nop
 8010250:	08010265 	.word	0x08010265
 8010254:	08010285 	.word	0x08010285
 8010258:	080102c7 	.word	0x080102c7
 801025c:	080102db 	.word	0x080102db
 8010260:	0801039f 	.word	0x0801039f
                case 0:
                        theBuffer.valueSize = 2;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2202      	movs	r2, #2
 8010268:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f103 0210 	add.w	r2, r3, #16
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	3308      	adds	r3, #8
 8010274:	4619      	mov	r1, r3
 8010276:	4610      	mov	r0, r2
 8010278:	f7fd fa98 	bl	800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2201      	movs	r2, #1
 8010280:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	3310      	adds	r3, #16
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	68b9      	ldr	r1, [r7, #8]
 801028c:	4618      	mov	r0, r3
 801028e:	f003 fa49 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010292:	4603      	mov	r3, r0
 8010294:	f083 0301 	eor.w	r3, r3, #1
 8010298:	b2db      	uxtb	r3, r3
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 801029e:	2300      	movs	r3, #0
 80102a0:	e131      	b.n	8010506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80102a8:	781a      	ldrb	r2, [r3, #0]
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80102b6:	785a      	ldrb	r2, [r3, #1]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2202      	movs	r2, #2
 80102c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	3320      	adds	r3, #32
 80102ca:	1c9a      	adds	r2, r3, #2
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2203      	movs	r2, #3
 80102d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80102e0:	3b02      	subs	r3, #2
 80102e2:	2b1f      	cmp	r3, #31
 80102e4:	d847      	bhi.n	8010376 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 80102e6:	a201      	add	r2, pc, #4	; (adr r2, 80102ec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 80102e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ec:	08010377 	.word	0x08010377
 80102f0:	08010377 	.word	0x08010377
 80102f4:	0801036d 	.word	0x0801036d
 80102f8:	08010377 	.word	0x08010377
 80102fc:	08010377 	.word	0x08010377
 8010300:	08010377 	.word	0x08010377
 8010304:	08010377 	.word	0x08010377
 8010308:	08010377 	.word	0x08010377
 801030c:	08010377 	.word	0x08010377
 8010310:	08010377 	.word	0x08010377
 8010314:	08010377 	.word	0x08010377
 8010318:	08010377 	.word	0x08010377
 801031c:	08010377 	.word	0x08010377
 8010320:	08010377 	.word	0x08010377
 8010324:	08010377 	.word	0x08010377
 8010328:	08010377 	.word	0x08010377
 801032c:	08010377 	.word	0x08010377
 8010330:	08010377 	.word	0x08010377
 8010334:	08010377 	.word	0x08010377
 8010338:	08010377 	.word	0x08010377
 801033c:	08010377 	.word	0x08010377
 8010340:	08010377 	.word	0x08010377
 8010344:	08010377 	.word	0x08010377
 8010348:	08010377 	.word	0x08010377
 801034c:	08010377 	.word	0x08010377
 8010350:	08010377 	.word	0x08010377
 8010354:	08010377 	.word	0x08010377
 8010358:	08010377 	.word	0x08010377
 801035c:	08010377 	.word	0x08010377
 8010360:	08010377 	.word	0x08010377
 8010364:	08010377 	.word	0x08010377
 8010368:	08010377 	.word	0x08010377
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2200      	movs	r2, #0
 8010370:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010374:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801037c:	3b02      	subs	r3, #2
 801037e:	b2da      	uxtb	r2, r3
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f103 0210 	add.w	r2, r3, #16
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	3308      	adds	r3, #8
 801038e:	4619      	mov	r1, r3
 8010390:	4610      	mov	r0, r2
 8010392:	f7fd fa0b 	bl	800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2204      	movs	r2, #4
 801039a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80103a4:	2b05      	cmp	r3, #5
 80103a6:	d055      	beq.n	8010454 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80103a8:	2b05      	cmp	r3, #5
 80103aa:	f300 8085 	bgt.w	80104b8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80103ae:	2b02      	cmp	r3, #2
 80103b0:	d002      	beq.n	80103b8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80103b2:	2b04      	cmp	r3, #4
 80103b4:	d015      	beq.n	80103e2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80103b6:	e07f      	b.n	80104b8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	3310      	adds	r3, #16
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	68b9      	ldr	r1, [r7, #8]
 80103c0:	4618      	mov	r0, r3
 80103c2:	f003 f9af 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80103c6:	4603      	mov	r3, r0
 80103c8:	f083 0301 	eor.w	r3, r3, #1
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80103d2:	2300      	movs	r3, #0
 80103d4:	e097      	b.n	8010506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	795a      	ldrb	r2, [r3, #5]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80103e0:	e086      	b.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	3310      	adds	r3, #16
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	68b9      	ldr	r1, [r7, #8]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f003 f99a 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80103f0:	4603      	mov	r3, r0
 80103f2:	f083 0301 	eor.w	r3, r3, #1
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d001      	beq.n	8010400 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 80103fc:	2300      	movs	r3, #0
 80103fe:	e082      	b.n	8010506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	795b      	ldrb	r3, [r3, #5]
 8010404:	2be0      	cmp	r3, #224	; 0xe0
 8010406:	d16c      	bne.n	80104e2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	799b      	ldrb	r3, [r3, #6]
 801040c:	2b01      	cmp	r3, #1
 801040e:	d16a      	bne.n	80104e6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010416:	2b00      	cmp	r3, #0
 8010418:	d004      	beq.n	8010424 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	79db      	ldrb	r3, [r3, #7]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d104      	bne.n	801042c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010422:	e065      	b.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	79db      	ldrb	r3, [r3, #7]
 8010428:	2b01      	cmp	r3, #1
 801042a:	d15e      	bne.n	80104ea <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2201      	movs	r2, #1
 8010430:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	789a      	ldrb	r2, [r3, #2]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	78da      	ldrb	r2, [r3, #3]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	79da      	ldrb	r2, [r3, #7]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8010452:	e04d      	b.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	3310      	adds	r3, #16
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	68b9      	ldr	r1, [r7, #8]
 801045c:	4618      	mov	r0, r3
 801045e:	f003 f961 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010462:	4603      	mov	r3, r0
 8010464:	f083 0301 	eor.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d001      	beq.n	8010472 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801046e:	2300      	movs	r3, #0
 8010470:	e049      	b.n	8010506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010478:	2b00      	cmp	r3, #0
 801047a:	d038      	beq.n	80104ee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d034      	beq.n	80104ee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6858      	ldr	r0, [r3, #4]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	681c      	ldr	r4, [r3, #0]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	3220      	adds	r2, #32
 80104ac:	9201      	str	r2, [sp, #4]
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	4633      	mov	r3, r6
 80104b2:	462a      	mov	r2, r5
 80104b4:	47a0      	blx	r4
                                        break;
 80104b6:	e01a      	b.n	80104ee <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f103 0018 	add.w	r0, r3, #24
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	3b02      	subs	r3, #2
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	68b9      	ldr	r1, [r7, #8]
 80104ce:	f7fd f9ac 	bl	800d82a <_ZN11ByteSkipper4SkipEPPhPtt>
 80104d2:	4603      	mov	r3, r0
 80104d4:	f083 0301 	eor.w	r3, r3, #1
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d008      	beq.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80104de:	2300      	movs	r3, #0
 80104e0:	e011      	b.n	8010506 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80104e2:	bf00      	nop
 80104e4:	e004      	b.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80104e6:	bf00      	nop
 80104e8:	e002      	b.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80104ea:	bf00      	nop
 80104ec:	e000      	b.n	80104f0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80104ee:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	f103 0220 	add.w	r2, r3, #32
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2200      	movs	r2, #0
 8010500:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8010504:	2301      	movs	r3, #1
}
 8010506:	4618      	mov	r0, r3
 8010508:	371c      	adds	r7, #28
 801050a:	46bd      	mov	sp, r7
 801050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801050e:	bf00      	nop

08010510 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010512:	b089      	sub	sp, #36	; 0x24
 8010514:	af02      	add	r7, sp, #8
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	3320      	adds	r3, #32
 8010520:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	3320      	adds	r3, #32
 8010526:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801052e:	2b04      	cmp	r3, #4
 8010530:	f200 815e 	bhi.w	80107f0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010534:	a201      	add	r2, pc, #4	; (adr r2, 801053c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801053a:	bf00      	nop
 801053c:	08010551 	.word	0x08010551
 8010540:	08010571 	.word	0x08010571
 8010544:	080105b3 	.word	0x080105b3
 8010548:	080105c7 	.word	0x080105c7
 801054c:	0801068b 	.word	0x0801068b
                        theBuffer.valueSize = 2;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2202      	movs	r2, #2
 8010554:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f103 0210 	add.w	r2, r3, #16
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	3308      	adds	r3, #8
 8010560:	4619      	mov	r1, r3
 8010562:	4610      	mov	r0, r2
 8010564:	f7fd f922 	bl	800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	3310      	adds	r3, #16
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	68b9      	ldr	r1, [r7, #8]
 8010578:	4618      	mov	r0, r3
 801057a:	f003 f8d3 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801057e:	4603      	mov	r3, r0
 8010580:	f083 0301 	eor.w	r3, r3, #1
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b00      	cmp	r3, #0
 8010588:	d001      	beq.n	801058e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 801058a:	2300      	movs	r3, #0
 801058c:	e131      	b.n	80107f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8010594:	781a      	ldrb	r2, [r3, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80105a2:	785a      	ldrb	r2, [r3, #1]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2202      	movs	r2, #2
 80105ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	3320      	adds	r3, #32
 80105b6:	1c9a      	adds	r2, r3, #2
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2203      	movs	r2, #3
 80105c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80105cc:	3b02      	subs	r3, #2
 80105ce:	2b1f      	cmp	r3, #31
 80105d0:	d847      	bhi.n	8010662 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 80105d2:	a201      	add	r2, pc, #4	; (adr r2, 80105d8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 80105d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d8:	08010663 	.word	0x08010663
 80105dc:	08010663 	.word	0x08010663
 80105e0:	08010659 	.word	0x08010659
 80105e4:	08010663 	.word	0x08010663
 80105e8:	08010663 	.word	0x08010663
 80105ec:	08010663 	.word	0x08010663
 80105f0:	08010663 	.word	0x08010663
 80105f4:	08010663 	.word	0x08010663
 80105f8:	08010663 	.word	0x08010663
 80105fc:	08010663 	.word	0x08010663
 8010600:	08010663 	.word	0x08010663
 8010604:	08010663 	.word	0x08010663
 8010608:	08010663 	.word	0x08010663
 801060c:	08010663 	.word	0x08010663
 8010610:	08010663 	.word	0x08010663
 8010614:	08010663 	.word	0x08010663
 8010618:	08010663 	.word	0x08010663
 801061c:	08010663 	.word	0x08010663
 8010620:	08010663 	.word	0x08010663
 8010624:	08010663 	.word	0x08010663
 8010628:	08010663 	.word	0x08010663
 801062c:	08010663 	.word	0x08010663
 8010630:	08010663 	.word	0x08010663
 8010634:	08010663 	.word	0x08010663
 8010638:	08010663 	.word	0x08010663
 801063c:	08010663 	.word	0x08010663
 8010640:	08010663 	.word	0x08010663
 8010644:	08010663 	.word	0x08010663
 8010648:	08010663 	.word	0x08010663
 801064c:	08010663 	.word	0x08010663
 8010650:	08010663 	.word	0x08010663
 8010654:	08010663 	.word	0x08010663
                                        isGoodInterface = false;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2200      	movs	r2, #0
 801065c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010660:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010668:	3b02      	subs	r3, #2
 801066a:	b2da      	uxtb	r2, r3
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f103 0210 	add.w	r2, r3, #16
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3308      	adds	r3, #8
 801067a:	4619      	mov	r1, r3
 801067c:	4610      	mov	r0, r2
 801067e:	f7fd f895 	bl	800d7ac <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2204      	movs	r2, #4
 8010686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010690:	2b05      	cmp	r3, #5
 8010692:	d055      	beq.n	8010740 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8010694:	2b05      	cmp	r3, #5
 8010696:	f300 8085 	bgt.w	80107a4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 801069a:	2b02      	cmp	r3, #2
 801069c:	d002      	beq.n	80106a4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 801069e:	2b04      	cmp	r3, #4
 80106a0:	d015      	beq.n	80106ce <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80106a2:	e07f      	b.n	80107a4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	3310      	adds	r3, #16
 80106a8:	687a      	ldr	r2, [r7, #4]
 80106aa:	68b9      	ldr	r1, [r7, #8]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f003 f839 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80106b2:	4603      	mov	r3, r0
 80106b4:	f083 0301 	eor.w	r3, r3, #1
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d001      	beq.n	80106c2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80106be:	2300      	movs	r3, #0
 80106c0:	e097      	b.n	80107f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	795a      	ldrb	r2, [r3, #5]
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80106cc:	e086      	b.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	3310      	adds	r3, #16
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	68b9      	ldr	r1, [r7, #8]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f003 f824 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80106dc:	4603      	mov	r3, r0
 80106de:	f083 0301 	eor.w	r3, r3, #1
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d001      	beq.n	80106ec <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 80106e8:	2300      	movs	r3, #0
 80106ea:	e082      	b.n	80107f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	795b      	ldrb	r3, [r3, #5]
 80106f0:	2bff      	cmp	r3, #255	; 0xff
 80106f2:	d16c      	bne.n	80107ce <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	799b      	ldrb	r3, [r3, #6]
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d16a      	bne.n	80107d2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010702:	2b00      	cmp	r3, #0
 8010704:	d004      	beq.n	8010710 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	79db      	ldrb	r3, [r3, #7]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d104      	bne.n	8010718 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801070e:	e065      	b.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	79db      	ldrb	r3, [r3, #7]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d15e      	bne.n	80107d6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2201      	movs	r2, #1
 801071c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	789a      	ldrb	r2, [r3, #2]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	78da      	ldrb	r2, [r3, #3]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	79da      	ldrb	r2, [r3, #7]
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801073e:	e04d      	b.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	3310      	adds	r3, #16
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	68b9      	ldr	r1, [r7, #8]
 8010748:	4618      	mov	r0, r3
 801074a:	f002 ffeb 	bl	8013724 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801074e:	4603      	mov	r3, r0
 8010750:	f083 0301 	eor.w	r3, r3, #1
 8010754:	b2db      	uxtb	r3, r3
 8010756:	2b00      	cmp	r3, #0
 8010758:	d001      	beq.n	801075e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801075a:	2300      	movs	r3, #0
 801075c:	e049      	b.n	80107f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010764:	2b00      	cmp	r3, #0
 8010766:	d038      	beq.n	80107da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d034      	beq.n	80107da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6858      	ldr	r0, [r3, #4]
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	681c      	ldr	r4, [r3, #0]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010794:	68fa      	ldr	r2, [r7, #12]
 8010796:	3220      	adds	r2, #32
 8010798:	9201      	str	r2, [sp, #4]
 801079a:	9300      	str	r3, [sp, #0]
 801079c:	4633      	mov	r3, r6
 801079e:	462a      	mov	r2, r5
 80107a0:	47a0      	blx	r4
                                        break;
 80107a2:	e01a      	b.n	80107da <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f103 0018 	add.w	r0, r3, #24
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	3b02      	subs	r3, #2
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	68b9      	ldr	r1, [r7, #8]
 80107ba:	f7fd f836 	bl	800d82a <_ZN11ByteSkipper4SkipEPPhPtt>
 80107be:	4603      	mov	r3, r0
 80107c0:	f083 0301 	eor.w	r3, r3, #1
 80107c4:	b2db      	uxtb	r3, r3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d008      	beq.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80107ca:	2300      	movs	r3, #0
 80107cc:	e011      	b.n	80107f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80107ce:	bf00      	nop
 80107d0:	e004      	b.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80107d2:	bf00      	nop
 80107d4:	e002      	b.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80107d6:	bf00      	nop
 80107d8:	e000      	b.n	80107dc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80107da:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f103 0220 	add.w	r2, r3, #32
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 80107f0:	2301      	movs	r3, #1
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	371c      	adds	r7, #28
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107fa:	bf00      	nop

080107fc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010806:	2300      	movs	r3, #0
 8010808:	73fb      	strb	r3, [r7, #15]
 801080a:	7bfb      	ldrb	r3, [r7, #15]
 801080c:	2b03      	cmp	r3, #3
 801080e:	d815      	bhi.n	801083c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8010810:	7bfb      	ldrb	r3, [r7, #15]
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	3318      	adds	r3, #24
 8010816:	009b      	lsls	r3, r3, #2
 8010818:	4413      	add	r3, r2
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d109      	bne.n	8010834 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 8010820:	7bfb      	ldrb	r3, [r7, #15]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	3318      	adds	r3, #24
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	4413      	add	r3, r2
 801082a:	683a      	ldr	r2, [r7, #0]
 801082c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801082e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010832:	e005      	b.n	8010840 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010834:	7bfb      	ldrb	r3, [r7, #15]
 8010836:	3301      	adds	r3, #1
 8010838:	73fb      	strb	r3, [r7, #15]
 801083a:	e7e6      	b.n	801080a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 801083c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 8010840:	4618      	mov	r0, r3
 8010842:	3714      	adds	r7, #20
 8010844:	46bd      	mov	sp, r7
 8010846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084a:	4770      	bx	lr

0801084c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	6039      	str	r1, [r7, #0]
 8010856:	4a0a      	ldr	r2, [pc, #40]	; (8010880 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	601a      	str	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	609a      	str	r2, [r3, #8]
                if(pBtd)
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d005      	beq.n	8010876 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	4618      	mov	r0, r3
 8010872:	f7ff ffc3 	bl	80107fc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	08014b44 	.word	0x08014b44

08010884 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	4613      	mov	r3, r2
 8010890:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	461a      	mov	r2, r3
 8010898:	88fb      	ldrh	r3, [r7, #6]
 801089a:	b2db      	uxtb	r3, r3
 801089c:	429a      	cmp	r2, r3
 801089e:	d10b      	bne.n	80108b8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	3301      	adds	r3, #1
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	88fb      	ldrh	r3, [r7, #6]
 80108aa:	121b      	asrs	r3, r3, #8
 80108ac:	f043 0320 	orr.w	r3, r3, #32
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d101      	bne.n	80108b8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80108b4:	2301      	movs	r3, #1
 80108b6:	e000      	b.n	80108ba <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80108b8:	2300      	movs	r3, #0
        }
 80108ba:	4618      	mov	r0, r3
 80108bc:	3714      	adds	r7, #20
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80108c6:	b480      	push	{r7}
 80108c8:	b085      	sub	sp, #20
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	60f8      	str	r0, [r7, #12]
 80108ce:	460b      	mov	r3, r1
 80108d0:	607a      	str	r2, [r7, #4]
 80108d2:	72fb      	strb	r3, [r7, #11]
                return;
 80108d4:	bf00      	nop
        };
 80108d6:	3714      	adds	r7, #20
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
                return;
 80108e8:	bf00      	nop
        };
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
                return;
 80108fc:	bf00      	nop
        }
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8010908:	b580      	push	{r7, lr}
 801090a:	b086      	sub	sp, #24
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	603b      	str	r3, [r7, #0]
 8010914:	4613      	mov	r3, r2
 8010916:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	68b9      	ldr	r1, [r7, #8]
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff ff95 	bl	801084c <_ZN16BluetoothServiceC1EP3BTD>
 8010922:	4a1f      	ldr	r2, [pc, #124]	; (80109a0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	601a      	str	r2, [r3, #0]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2200      	movs	r2, #0
 801092c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010930:	2300      	movs	r3, #0
 8010932:	75fb      	strb	r3, [r7, #23]
 8010934:	7dfb      	ldrb	r3, [r7, #23]
 8010936:	2b01      	cmp	r3, #1
 8010938:	d809      	bhi.n	801094e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 801093a:	7dfa      	ldrb	r2, [r7, #23]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	3208      	adds	r2, #8
 8010940:	2100      	movs	r1, #0
 8010942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010946:	7dfb      	ldrb	r3, [r7, #23]
 8010948:	3301      	adds	r3, #1
 801094a:	75fb      	strb	r3, [r7, #23]
 801094c:	e7f2      	b.n	8010934 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	79fa      	ldrb	r2, [r7, #7]
 8010954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2250      	movs	r2, #80	; 0x50
 8010964:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2200      	movs	r2, #0
 801096c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2270      	movs	r2, #112	; 0x70
 8010974:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2200      	movs	r2, #0
 801097c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2271      	movs	r2, #113	; 0x71
 8010984:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2200      	movs	r2, #0
 801098c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 f807 	bl	80109a4 <_ZN5BTHID5ResetEv>
}
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	4618      	mov	r0, r3
 801099a:	3718      	adds	r7, #24
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	08014b18 	.word	0x08014b18

080109a4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
        connected = false;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	220a      	movs	r2, #10
 80109cc:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3320      	adds	r3, #32
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	4798      	blx	r3
}
 80109e2:	bf00      	nop
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 80109ea:	b590      	push	{r4, r7, lr}
 80109ec:	b085      	sub	sp, #20
 80109ee:	af02      	add	r7, sp, #8
 80109f0:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d014      	beq.n	8010a26 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6898      	ldr	r0, [r3, #8]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	8999      	ldrh	r1, [r3, #12]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7d1b      	ldrb	r3, [r3, #20]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	b2da      	uxtb	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	751a      	strb	r2, [r3, #20]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	7d1a      	ldrb	r2, [r3, #20]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f103 041b 	add.w	r4, r3, #27
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	336f      	adds	r3, #111	; 0x6f
 8010a1e:	9300      	str	r3, [sp, #0]
 8010a20:	4623      	mov	r3, r4
 8010a22:	f7ff f9c5 	bl	800fdb0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6898      	ldr	r0, [r3, #8]
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	8999      	ldrh	r1, [r3, #12]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	7d1b      	ldrb	r3, [r3, #20]
 8010a32:	3301      	adds	r3, #1
 8010a34:	b2da      	uxtb	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	751a      	strb	r2, [r3, #20]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	7d1a      	ldrb	r2, [r3, #20]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f103 0418 	add.w	r4, r3, #24
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	336d      	adds	r3, #109	; 0x6d
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	4623      	mov	r3, r4
 8010a4c:	f7ff f9b0 	bl	800fdb0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	3308      	adds	r3, #8
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	220e      	movs	r2, #14
 8010a60:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2209      	movs	r2, #9
 8010a66:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8010a6a:	bf00      	nop
 8010a6c:	370c      	adds	r7, #12
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd90      	pop	{r4, r7, pc}

08010a72 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8010a72:	b590      	push	{r4, r7, lr}
 8010a74:	b087      	sub	sp, #28
 8010a76:	af02      	add	r7, sp, #8
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	6039      	str	r1, [r7, #0]
        if(!connected) {
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	7d5b      	ldrb	r3, [r3, #21]
 8010a80:	f083 0301 	eor.w	r3, r3, #1
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d023      	beq.n	8010ad2 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	3308      	adds	r3, #8
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d11e      	bne.n	8010ad2 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	330c      	adds	r3, #12
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	330d      	adds	r3, #13
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	021b      	lsls	r3, r3, #8
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d113      	bne.n	8010ad2 <_ZN5BTHID7ACLDataEPh+0x60>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	7a9b      	ldrb	r3, [r3, #10]
 8010ab0:	f083 0301 	eor.w	r3, r3, #1
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00b      	beq.n	8010ad2 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	2201      	movs	r2, #1
 8010ac0:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	689b      	ldr	r3, [r3, #8]
 8010ac6:	8b5a      	ldrh	r2, [r3, #26]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	220a      	movs	r2, #10
 8010ad0:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	689b      	ldr	r3, [r3, #8]
 8010ad6:	7a5b      	ldrb	r3, [r3, #9]
 8010ad8:	f083 0301 	eor.w	r3, r3, #1
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d03a      	beq.n	8010b58 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d034      	beq.n	8010b58 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	7d5b      	ldrb	r3, [r3, #21]
 8010af2:	f083 0301 	eor.w	r3, r3, #1
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d02d      	beq.n	8010b58 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010b02:	f083 0301 	eor.w	r3, r3, #1
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d025      	beq.n	8010b58 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	3308      	adds	r3, #8
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d120      	bne.n	8010b58 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	330c      	adds	r3, #12
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	330d      	adds	r3, #13
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	021b      	lsls	r3, r3, #8
 8010b26:	4313      	orrs	r3, r2
 8010b28:	2b11      	cmp	r3, #17
 8010b2a:	d115      	bne.n	8010b58 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	689b      	ldr	r3, [r3, #8]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	689b      	ldr	r3, [r3, #8]
 8010b4a:	8b5a      	ldrh	r2, [r3, #26]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	899b      	ldrh	r3, [r3, #12]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	6839      	ldr	r1, [r7, #0]
 8010b62:	f7ff fe8f 	bl	8010884 <_ZN16BluetoothService14checkHciHandleEPht>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f000 83d9 	beq.w	8011320 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	3306      	adds	r3, #6
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	461a      	mov	r2, r3
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	3307      	adds	r3, #7
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	021b      	lsls	r3, r3, #8
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	f040 829b 	bne.w	80110bc <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	3308      	adds	r3, #8
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	f000 83c1 	beq.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	3308      	adds	r3, #8
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	2b03      	cmp	r3, #3
 8010b9a:	f040 808d 	bne.w	8010cb8 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	3310      	adds	r3, #16
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	3311      	adds	r3, #17
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	021b      	lsls	r3, r3, #8
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f040 83af 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	3312      	adds	r3, #18
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	3313      	adds	r3, #19
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	021b      	lsls	r3, r3, #8
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f040 83a3 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	330e      	adds	r3, #14
 8010bd2:	781a      	ldrb	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d124      	bne.n	8010c28 <_ZN5BTHID7ACLDataEPh+0x1b6>
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	330f      	adds	r3, #15
 8010be2:	781a      	ldrb	r2, [r3, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d11c      	bne.n	8010c28 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	7a5a      	ldrb	r2, [r3, #9]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	7b1a      	ldrb	r2, [r3, #12]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	7b5a      	ldrb	r2, [r3, #13]
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	7d1b      	ldrb	r3, [r3, #20]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6898      	ldr	r0, [r3, #8]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	8999      	ldrh	r1, [r3, #12]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	7d1a      	ldrb	r2, [r3, #20]
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	331b      	adds	r3, #27
 8010c22:	f7ff f827 	bl	800fc74 <_ZN3BTD20l2cap_config_requestEthPh>
 8010c26:	e375      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	330e      	adds	r3, #14
 8010c2c:	781a      	ldrb	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d11a      	bne.n	8010c6e <_ZN5BTHID7ACLDataEPh+0x1fc>
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	330f      	adds	r3, #15
 8010c3c:	781a      	ldrb	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d112      	bne.n	8010c6e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	7a5a      	ldrb	r2, [r3, #9]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	7b1a      	ldrb	r2, [r3, #12]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	7b5a      	ldrb	r2, [r3, #13]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	f043 0204 	orr.w	r2, r3, #4
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	611a      	str	r2, [r3, #16]
 8010c6c:	e352      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	330e      	adds	r3, #14
 8010c72:	781a      	ldrb	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	f040 834a 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	330f      	adds	r3, #15
 8010c84:	781a      	ldrb	r2, [r3, #0]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	f040 8341 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	7a5a      	ldrb	r2, [r3, #9]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	7b1a      	ldrb	r2, [r3, #12]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	7b5a      	ldrb	r2, [r3, #13]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	611a      	str	r2, [r3, #16]
 8010cb6:	e32d      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	3308      	adds	r3, #8
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d15a      	bne.n	8010d78 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	330c      	adds	r3, #12
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	461a      	mov	r2, r3
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	330d      	adds	r3, #13
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	021b      	lsls	r3, r3, #8
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d112      	bne.n	8010cfe <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	7a5a      	ldrb	r2, [r3, #9]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	7b9a      	ldrb	r2, [r3, #14]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	7bda      	ldrb	r2, [r3, #15]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	691b      	ldr	r3, [r3, #16]
 8010cf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	611a      	str	r2, [r3, #16]
 8010cfc:	e30a      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	330c      	adds	r3, #12
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	461a      	mov	r2, r3
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	330d      	adds	r3, #13
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	021b      	lsls	r3, r3, #8
 8010d0e:	4313      	orrs	r3, r2
 8010d10:	2b11      	cmp	r3, #17
 8010d12:	d112      	bne.n	8010d3a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	7a5a      	ldrb	r2, [r3, #9]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	7b9a      	ldrb	r2, [r3, #14]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	7bda      	ldrb	r2, [r3, #15]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	691b      	ldr	r3, [r3, #16]
 8010d30:	f043 0201 	orr.w	r2, r3, #1
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	611a      	str	r2, [r3, #16]
 8010d38:	e2ec      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	330c      	adds	r3, #12
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	461a      	mov	r2, r3
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	330d      	adds	r3, #13
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	021b      	lsls	r3, r3, #8
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	2b13      	cmp	r3, #19
 8010d4e:	f040 82e1 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	7a5a      	ldrb	r2, [r3, #9]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	7b9a      	ldrb	r2, [r3, #14]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	7bda      	ldrb	r2, [r3, #15]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	691b      	ldr	r3, [r3, #16]
 8010d6e:	f043 0210 	orr.w	r2, r3, #16
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	611a      	str	r2, [r3, #16]
 8010d76:	e2cd      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	3308      	adds	r3, #8
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	2b05      	cmp	r3, #5
 8010d80:	d15e      	bne.n	8010e40 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	3310      	adds	r3, #16
 8010d86:	781b      	ldrb	r3, [r3, #0]
 8010d88:	461a      	mov	r2, r3
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	3311      	adds	r3, #17
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	021b      	lsls	r3, r3, #8
 8010d92:	4313      	orrs	r3, r2
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f040 82bd 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	330c      	adds	r3, #12
 8010d9e:	781a      	ldrb	r2, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d112      	bne.n	8010dd0 <_ZN5BTHID7ACLDataEPh+0x35e>
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	330d      	adds	r3, #13
 8010dae:	781a      	ldrb	r2, [r3, #0]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d10a      	bne.n	8010dd0 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	7a5a      	ldrb	r2, [r3, #9]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	691b      	ldr	r3, [r3, #16]
 8010dc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	611a      	str	r2, [r3, #16]
 8010dce:	e2a1      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	330c      	adds	r3, #12
 8010dd4:	781a      	ldrb	r2, [r3, #0]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d112      	bne.n	8010e06 <_ZN5BTHID7ACLDataEPh+0x394>
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	330d      	adds	r3, #13
 8010de4:	781a      	ldrb	r2, [r3, #0]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d10a      	bne.n	8010e06 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	7a5a      	ldrb	r2, [r3, #9]
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	691b      	ldr	r3, [r3, #16]
 8010dfc:	f043 0202 	orr.w	r2, r3, #2
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	611a      	str	r2, [r3, #16]
 8010e04:	e286      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	330c      	adds	r3, #12
 8010e0a:	781a      	ldrb	r2, [r3, #0]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010e12:	429a      	cmp	r2, r3
 8010e14:	f040 827e 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	330d      	adds	r3, #13
 8010e1c:	781a      	ldrb	r2, [r3, #0]
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010e24:	429a      	cmp	r2, r3
 8010e26:	f040 8275 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	7a5a      	ldrb	r2, [r3, #9]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	691b      	ldr	r3, [r3, #16]
 8010e36:	f043 0220 	orr.w	r2, r3, #32
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	611a      	str	r2, [r3, #16]
 8010e3e:	e269      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	3308      	adds	r3, #8
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	2b04      	cmp	r3, #4
 8010e48:	d155      	bne.n	8010ef6 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	330c      	adds	r3, #12
 8010e4e:	781a      	ldrb	r2, [r3, #0]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010e56:	429a      	cmp	r2, r3
 8010e58:	d113      	bne.n	8010e82 <_ZN5BTHID7ACLDataEPh+0x410>
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	330d      	adds	r3, #13
 8010e5e:	781a      	ldrb	r2, [r3, #0]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d10b      	bne.n	8010e82 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6898      	ldr	r0, [r3, #8]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	8999      	ldrh	r1, [r3, #12]
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	3309      	adds	r3, #9
 8010e76:	781a      	ldrb	r2, [r3, #0]
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	331b      	adds	r3, #27
 8010e7c:	f7fe ff45 	bl	800fd0a <_ZN3BTD21l2cap_config_responseEthPh>
 8010e80:	e248      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	330c      	adds	r3, #12
 8010e86:	781a      	ldrb	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d113      	bne.n	8010eba <_ZN5BTHID7ACLDataEPh+0x448>
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	330d      	adds	r3, #13
 8010e96:	781a      	ldrb	r2, [r3, #0]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d10b      	bne.n	8010eba <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6898      	ldr	r0, [r3, #8]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	8999      	ldrh	r1, [r3, #12]
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	3309      	adds	r3, #9
 8010eae:	781a      	ldrb	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	3316      	adds	r3, #22
 8010eb4:	f7fe ff29 	bl	800fd0a <_ZN3BTD21l2cap_config_responseEthPh>
 8010eb8:	e22c      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	330c      	adds	r3, #12
 8010ebe:	781a      	ldrb	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	f040 8224 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	330d      	adds	r3, #13
 8010ed0:	781a      	ldrb	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	f040 821b 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6898      	ldr	r0, [r3, #8]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	8999      	ldrh	r1, [r3, #12]
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	3309      	adds	r3, #9
 8010eea:	781a      	ldrb	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	3318      	adds	r3, #24
 8010ef0:	f7fe ff0b 	bl	800fd0a <_ZN3BTD21l2cap_config_responseEthPh>
 8010ef4:	e20e      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	3308      	adds	r3, #8
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	2b06      	cmp	r3, #6
 8010efe:	d170      	bne.n	8010fe2 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	330c      	adds	r3, #12
 8010f04:	781a      	ldrb	r2, [r3, #0]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d112      	bne.n	8010f36 <_ZN5BTHID7ACLDataEPh+0x4c4>
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	330d      	adds	r3, #13
 8010f14:	781a      	ldrb	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d10a      	bne.n	8010f36 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	7a5a      	ldrb	r2, [r3, #9]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	691b      	ldr	r3, [r3, #16]
 8010f2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	611a      	str	r2, [r3, #16]
 8010f34:	e1ee      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	330c      	adds	r3, #12
 8010f3a:	781a      	ldrb	r2, [r3, #0]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d121      	bne.n	8010f8a <_ZN5BTHID7ACLDataEPh+0x518>
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	330d      	adds	r3, #13
 8010f4a:	781a      	ldrb	r2, [r3, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d119      	bne.n	8010f8a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	7a5a      	ldrb	r2, [r3, #9]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6898      	ldr	r0, [r3, #8]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	8999      	ldrh	r1, [r3, #12]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	7d1a      	ldrb	r2, [r3, #20]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	3316      	adds	r3, #22
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	4623      	mov	r3, r4
 8010f78:	f7fe ff57 	bl	800fe2a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	3308      	adds	r3, #8
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	4798      	blx	r3
 8010f88:	e1c4      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010f8a:	683b      	ldr	r3, [r7, #0]
 8010f8c:	330c      	adds	r3, #12
 8010f8e:	781a      	ldrb	r2, [r3, #0]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010f96:	429a      	cmp	r2, r3
 8010f98:	f040 81bc 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	330d      	adds	r3, #13
 8010fa0:	781a      	ldrb	r2, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	f040 81b3 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	7a5a      	ldrb	r2, [r3, #9]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6898      	ldr	r0, [r3, #8]
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	8999      	ldrh	r1, [r3, #12]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	7d1a      	ldrb	r2, [r3, #20]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	3318      	adds	r3, #24
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	4623      	mov	r3, r4
 8010fd0:	f7fe ff2b 	bl	800fe2a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	3308      	adds	r3, #8
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	4798      	blx	r3
 8010fe0:	e198      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	2b07      	cmp	r3, #7
 8010fea:	d14c      	bne.n	8011086 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	330c      	adds	r3, #12
 8010ff0:	781a      	ldrb	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	7edb      	ldrb	r3, [r3, #27]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d111      	bne.n	801101e <_ZN5BTHID7ACLDataEPh+0x5ac>
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	330d      	adds	r3, #13
 8010ffe:	781a      	ldrb	r2, [r3, #0]
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	7f1b      	ldrb	r3, [r3, #28]
 8011004:	429a      	cmp	r2, r3
 8011006:	d10a      	bne.n	801101e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	7a5a      	ldrb	r2, [r3, #9]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	611a      	str	r2, [r3, #16]
 801101c:	e17a      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	330c      	adds	r3, #12
 8011022:	781a      	ldrb	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	7d9b      	ldrb	r3, [r3, #22]
 8011028:	429a      	cmp	r2, r3
 801102a:	d111      	bne.n	8011050 <_ZN5BTHID7ACLDataEPh+0x5de>
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	330d      	adds	r3, #13
 8011030:	781a      	ldrb	r2, [r3, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	7ddb      	ldrb	r3, [r3, #23]
 8011036:	429a      	cmp	r2, r3
 8011038:	d10a      	bne.n	8011050 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	7a5a      	ldrb	r2, [r3, #9]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	691b      	ldr	r3, [r3, #16]
 8011046:	f043 0208 	orr.w	r2, r3, #8
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	611a      	str	r2, [r3, #16]
 801104e:	e161      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	330c      	adds	r3, #12
 8011054:	781a      	ldrb	r2, [r3, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	7e1b      	ldrb	r3, [r3, #24]
 801105a:	429a      	cmp	r2, r3
 801105c:	f040 815a 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	330d      	adds	r3, #13
 8011064:	781a      	ldrb	r2, [r3, #0]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	7e5b      	ldrb	r3, [r3, #25]
 801106a:	429a      	cmp	r2, r3
 801106c:	f040 8152 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	7a5a      	ldrb	r2, [r3, #9]
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	691b      	ldr	r3, [r3, #16]
 801107c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	611a      	str	r2, [r3, #16]
 8011084:	e146      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	3308      	adds	r3, #8
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	2b0a      	cmp	r3, #10
 801108e:	f040 8141 	bne.w	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	7a5a      	ldrb	r2, [r3, #9]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6898      	ldr	r0, [r3, #8]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	8999      	ldrh	r1, [r3, #12]
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	7d1a      	ldrb	r2, [r3, #20]
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	330c      	adds	r3, #12
 80110aa:	781c      	ldrb	r4, [r3, #0]
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	330d      	adds	r3, #13
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	4623      	mov	r3, r4
 80110b6:	f7fe fef5 	bl	800fea4 <_ZN3BTD26l2cap_information_responseEthhh>
 80110ba:	e12b      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	3306      	adds	r3, #6
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80110c8:	429a      	cmp	r2, r3
 80110ca:	f040 8087 	bne.w	80111dc <_ZN5BTHID7ACLDataEPh+0x76a>
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	3307      	adds	r3, #7
 80110d2:	781a      	ldrb	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80110da:	429a      	cmp	r2, r3
 80110dc:	d17e      	bne.n	80111dc <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	3308      	adds	r3, #8
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	2b02      	cmp	r3, #2
 80110e6:	d131      	bne.n	801114c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2203      	movs	r2, #3
 80110ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	7a5a      	ldrb	r2, [r3, #9]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	7a9a      	ldrb	r2, [r3, #10]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2205      	movs	r2, #5
 8011110:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2200      	movs	r2, #0
 8011138:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	3328      	adds	r3, #40	; 0x28
 8011140:	220a      	movs	r2, #10
 8011142:	4619      	mov	r1, r3
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fb6d 	bl	8011824 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801114a:	e0e0      	b.n	801130e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	3308      	adds	r3, #8
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b04      	cmp	r3, #4
 8011154:	d131      	bne.n	80111ba <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2205      	movs	r2, #5
 801115a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	7a5a      	ldrb	r2, [r3, #9]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	7a9a      	ldrb	r2, [r3, #10]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2205      	movs	r2, #5
 801117e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2202      	movs	r2, #2
 801118e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2235      	movs	r2, #53	; 0x35
 8011196:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	3328      	adds	r3, #40	; 0x28
 80111ae:	220a      	movs	r2, #10
 80111b0:	4619      	mov	r1, r3
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 fb36 	bl	8011824 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80111b8:	e0a9      	b.n	801130e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	3308      	adds	r3, #8
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	2b06      	cmp	r3, #6
 80111c2:	f040 80a4 	bne.w	801130e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	3309      	adds	r3, #9
 80111ca:	7819      	ldrb	r1, [r3, #0]
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	330a      	adds	r3, #10
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	461a      	mov	r2, r3
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 fb3f 	bl	8011858 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80111da:	e098      	b.n	801130e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	3306      	adds	r3, #6
 80111e0:	781a      	ldrb	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80111e8:	429a      	cmp	r2, r3
 80111ea:	d162      	bne.n	80112b2 <_ZN5BTHID7ACLDataEPh+0x840>
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	3307      	adds	r3, #7
 80111f0:	781a      	ldrb	r2, [r3, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d15a      	bne.n	80112b2 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	3308      	adds	r3, #8
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	2ba1      	cmp	r3, #161	; 0xa1
 8011204:	f040 8085 	bne.w	8011312 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8011208:	f7f1 fb6e 	bl	80028e8 <HAL_GetTick>
 801120c:	4602      	mov	r2, r0
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	3305      	adds	r3, #5
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	021b      	lsls	r3, r3, #8
 801121a:	b21a      	sxth	r2, r3
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	3304      	adds	r3, #4
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	b21b      	sxth	r3, r3
 8011224:	4313      	orrs	r3, r2
 8011226:	b21b      	sxth	r3, r3
 8011228:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	3314      	adds	r3, #20
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	89fa      	ldrh	r2, [r7, #14]
 8011234:	b2d2      	uxtb	r2, r2
 8011236:	3a01      	subs	r2, #1
 8011238:	b2d1      	uxtb	r1, r2
 801123a:	683a      	ldr	r2, [r7, #0]
 801123c:	3209      	adds	r2, #9
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	3309      	adds	r3, #9
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d002      	beq.n	8011252 <_ZN5BTHID7ACLDataEPh+0x7e0>
 801124c:	2b02      	cmp	r3, #2
 801124e:	d016      	beq.n	801127e <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8011250:	e05f      	b.n	8011312 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d027      	beq.n	80112aa <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a18      	ldr	r0, [r3, #32]
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a1b      	ldr	r3, [r3, #32]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681c      	ldr	r4, [r3, #0]
 8011266:	89fb      	ldrh	r3, [r7, #14]
 8011268:	b2db      	uxtb	r3, r3
 801126a:	3b02      	subs	r3, #2
 801126c:	b2da      	uxtb	r2, r3
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	330a      	adds	r3, #10
 8011272:	9300      	str	r3, [sp, #0]
 8011274:	4613      	mov	r3, r2
 8011276:	2200      	movs	r2, #0
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	47a0      	blx	r4
                                                break;
 801127c:	e015      	b.n	80112aa <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011282:	2b00      	cmp	r3, #0
 8011284:	d013      	beq.n	80112ae <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681c      	ldr	r4, [r3, #0]
 8011292:	89fb      	ldrh	r3, [r7, #14]
 8011294:	b2db      	uxtb	r3, r3
 8011296:	3b02      	subs	r3, #2
 8011298:	b2da      	uxtb	r2, r3
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	330a      	adds	r3, #10
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	4613      	mov	r3, r2
 80112a2:	2200      	movs	r2, #0
 80112a4:	6879      	ldr	r1, [r7, #4]
 80112a6:	47a0      	blx	r4
                                                break;
 80112a8:	e001      	b.n	80112ae <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 80112aa:	bf00      	nop
 80112ac:	e031      	b.n	8011312 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 80112ae:	bf00      	nop
                        }
 80112b0:	e02f      	b.n	8011312 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	3306      	adds	r3, #6
 80112b6:	781a      	ldrb	r2, [r3, #0]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80112be:	429a      	cmp	r2, r3
 80112c0:	d128      	bne.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	3307      	adds	r3, #7
 80112c6:	781a      	ldrb	r2, [r3, #0]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d120      	bne.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	3308      	adds	r3, #8
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	2ba3      	cmp	r3, #163	; 0xa3
 80112da:	d11b      	bne.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	3305      	adds	r3, #5
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	021b      	lsls	r3, r3, #8
 80112e4:	b21a      	sxth	r2, r3
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	3304      	adds	r3, #4
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	b21b      	sxth	r3, r3
 80112ee:	4313      	orrs	r3, r2
 80112f0:	b21b      	sxth	r3, r3
 80112f2:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	3318      	adds	r3, #24
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	89ba      	ldrh	r2, [r7, #12]
 80112fe:	b2d2      	uxtb	r2, r2
 8011300:	3a01      	subs	r2, #1
 8011302:	b2d1      	uxtb	r1, r2
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	3209      	adds	r2, #9
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	4798      	blx	r3
 801130c:	e002      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801130e:	bf00      	nop
 8011310:	e000      	b.n	8011314 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8011312:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f000 f807 	bl	8011328 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 f8b4 	bl	8011488 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8011320:	bf00      	nop
 8011322:	3714      	adds	r7, #20
 8011324:	46bd      	mov	sp, r7
 8011326:	bd90      	pop	{r4, r7, pc}

08011328 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8011328:	b5b0      	push	{r4, r5, r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af02      	add	r7, sp, #8
 801132e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	7e9b      	ldrb	r3, [r3, #26]
 8011334:	2b0e      	cmp	r3, #14
 8011336:	f000 8084 	beq.w	8011442 <_ZN5BTHID8SDP_taskEv+0x11a>
 801133a:	2b0e      	cmp	r3, #14
 801133c:	f300 809f 	bgt.w	801147e <_ZN5BTHID8SDP_taskEv+0x156>
 8011340:	2b0a      	cmp	r3, #10
 8011342:	d002      	beq.n	801134a <_ZN5BTHID8SDP_taskEv+0x22>
 8011344:	2b0b      	cmp	r3, #11
 8011346:	d068      	beq.n	801141a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8011348:	e099      	b.n	801147e <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	691b      	ldr	r3, [r3, #16]
 801134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011352:	2b00      	cmp	r3, #0
 8011354:	d041      	beq.n	80113da <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6898      	ldr	r0, [r3, #8]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	8999      	ldrh	r1, [r3, #12]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	7d1a      	ldrb	r2, [r3, #20]
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	331b      	adds	r3, #27
 8011378:	2501      	movs	r5, #1
 801137a:	9501      	str	r5, [sp, #4]
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	4623      	mov	r3, r4
 8011380:	f7fe fc2b 	bl	800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011384:	2001      	movs	r0, #1
 8011386:	f7f1 fabb 	bl	8002900 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6898      	ldr	r0, [r3, #8]
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8999      	ldrh	r1, [r3, #12]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7d1a      	ldrb	r2, [r3, #20]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	331b      	adds	r3, #27
 80113a0:	2500      	movs	r5, #0
 80113a2:	9501      	str	r5, [sp, #4]
 80113a4:	9300      	str	r3, [sp, #0]
 80113a6:	4623      	mov	r3, r4
 80113a8:	f7fe fc17 	bl	800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	7d1b      	ldrb	r3, [r3, #20]
 80113b0:	3301      	adds	r3, #1
 80113b2:	b2da      	uxtb	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80113b8:	2001      	movs	r0, #1
 80113ba:	f7f1 faa1 	bl	8002900 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6898      	ldr	r0, [r3, #8]
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	8999      	ldrh	r1, [r3, #12]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7d1a      	ldrb	r2, [r3, #20]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	331b      	adds	r3, #27
 80113ce:	f7fe fc51 	bl	800fc74 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	220b      	movs	r2, #11
 80113d6:	769a      	strb	r2, [r3, #26]
                        break;
 80113d8:	e04c      	b.n	8011474 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	691b      	ldr	r3, [r3, #16]
 80113de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d046      	beq.n	8011474 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	2200      	movs	r2, #0
 80113f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	6898      	ldr	r0, [r3, #8]
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8999      	ldrh	r1, [r3, #12]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	7d1a      	ldrb	r2, [r3, #20]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	331b      	adds	r3, #27
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	4623      	mov	r3, r4
 8011414:	f7fe fd09 	bl	800fe2a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8011418:	e02c      	b.n	8011474 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	691b      	ldr	r3, [r3, #16]
 801141e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011422:	2b00      	cmp	r3, #0
 8011424:	d028      	beq.n	8011478 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	691b      	ldr	r3, [r3, #16]
 801142a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2201      	movs	r2, #1
 8011436:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	220a      	movs	r2, #10
 801143e:	769a      	strb	r2, [r3, #26]
                        break;
 8011440:	e01a      	b.n	8011478 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801144a:	2b00      	cmp	r3, #0
 801144c:	d016      	beq.n	801147c <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	689a      	ldr	r2, [r3, #8]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	899b      	ldrh	r3, [r3, #12]
 8011456:	4619      	mov	r1, r3
 8011458:	4610      	mov	r0, r2
 801145a:	f7fe fa92 	bl	800f982 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011464:	819a      	strh	r2, [r3, #12]
                                Reset();
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	3308      	adds	r3, #8
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	4798      	blx	r3
                        break;
 8011472:	e003      	b.n	801147c <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 8011474:	bf00      	nop
 8011476:	e002      	b.n	801147e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 8011478:	bf00      	nop
 801147a:	e000      	b.n	801147e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 801147c:	bf00      	nop
}
 801147e:	bf00      	nop
 8011480:	3708      	adds	r7, #8
 8011482:	46bd      	mov	sp, r7
 8011484:	bdb0      	pop	{r4, r5, r7, pc}
	...

08011488 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8011488:	b5b0      	push	{r4, r5, r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af02      	add	r7, sp, #8
 801148e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8011496:	3b01      	subs	r3, #1
 8011498:	2b08      	cmp	r3, #8
 801149a:	f200 812c 	bhi.w	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801149e:	a201      	add	r2, pc, #4	; (adr r2, 80114a4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 80114a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a4:	080116d5 	.word	0x080116d5
 80114a8:	0801156f 	.word	0x0801156f
 80114ac:	080115a7 	.word	0x080115a7
 80114b0:	080114c9 	.word	0x080114c9
 80114b4:	080116a1 	.word	0x080116a1
 80114b8:	080114e7 	.word	0x080114e7
 80114bc:	080115ef 	.word	0x080115ef
 80114c0:	08011625 	.word	0x08011625
 80114c4:	08011661 	.word	0x08011661
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	691b      	ldr	r3, [r3, #16]
 80114cc:	f003 0302 	and.w	r3, r3, #2
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f000 8101 	beq.w	80116d8 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f000 f9f9 	bl	80118ce <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2206      	movs	r2, #6
 80114e0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80114e4:	e0f8      	b.n	80116d8 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	691b      	ldr	r3, [r3, #16]
 80114ea:	f003 0310 	and.w	r3, r3, #16
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f000 80f4 	beq.w	80116dc <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6898      	ldr	r0, [r3, #8]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	8999      	ldrh	r1, [r3, #12]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	7d1a      	ldrb	r2, [r3, #20]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	3318      	adds	r3, #24
 801150a:	2501      	movs	r5, #1
 801150c:	9501      	str	r5, [sp, #4]
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	4623      	mov	r3, r4
 8011512:	f7fe fb62 	bl	800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011516:	2001      	movs	r0, #1
 8011518:	f7f1 f9f2 	bl	8002900 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6898      	ldr	r0, [r3, #8]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	8999      	ldrh	r1, [r3, #12]
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	7d1a      	ldrb	r2, [r3, #20]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	3318      	adds	r3, #24
 8011532:	2500      	movs	r5, #0
 8011534:	9501      	str	r5, [sp, #4]
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	4623      	mov	r3, r4
 801153a:	f7fe fb4e 	bl	800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	7d1b      	ldrb	r3, [r3, #20]
 8011542:	3301      	adds	r3, #1
 8011544:	b2da      	uxtb	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801154a:	2001      	movs	r0, #1
 801154c:	f7f1 f9d8 	bl	8002900 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6898      	ldr	r0, [r3, #8]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	8999      	ldrh	r1, [r3, #12]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7d1a      	ldrb	r2, [r3, #20]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	3318      	adds	r3, #24
 8011560:	f7fe fb88 	bl	800fc74 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2208      	movs	r2, #8
 8011568:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801156c:	e0b6      	b.n	80116dc <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	f003 0304 	and.w	r3, r3, #4
 8011576:	2b00      	cmp	r3, #0
 8011578:	f000 80b2 	beq.w	80116e0 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	7d1b      	ldrb	r3, [r3, #20]
 8011580:	3301      	adds	r3, #1
 8011582:	b2da      	uxtb	r2, r3
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6898      	ldr	r0, [r3, #8]
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	8999      	ldrh	r1, [r3, #12]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	7d1a      	ldrb	r2, [r3, #20]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	3316      	adds	r3, #22
 8011598:	f7fe fb6c 	bl	800fc74 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2203      	movs	r2, #3
 80115a0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80115a4:	e09c      	b.n	80116e0 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	691b      	ldr	r3, [r3, #16]
 80115aa:	f003 0302 	and.w	r3, r3, #2
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f000 8098 	beq.w	80116e4 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 f98a 	bl	80118ce <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80115ba:	2001      	movs	r0, #1
 80115bc:	f7f1 f9a0 	bl	8002900 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	7d1b      	ldrb	r3, [r3, #20]
 80115c4:	3301      	adds	r3, #1
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6898      	ldr	r0, [r3, #8]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	8999      	ldrh	r1, [r3, #12]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	7d1a      	ldrb	r2, [r3, #20]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	336d      	adds	r3, #109	; 0x6d
 80115dc:	2413      	movs	r4, #19
 80115de:	9400      	str	r4, [sp, #0]
 80115e0:	f7fe fabd 	bl	800fb5e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2207      	movs	r2, #7
 80115e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80115ec:	e07a      	b.n	80116e4 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d076      	beq.n	80116e8 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	7d1b      	ldrb	r3, [r3, #20]
 80115fe:	3301      	adds	r3, #1
 8011600:	b2da      	uxtb	r2, r3
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6898      	ldr	r0, [r3, #8]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	8999      	ldrh	r1, [r3, #12]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	7d1a      	ldrb	r2, [r3, #20]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	3318      	adds	r3, #24
 8011616:	f7fe fb2d 	bl	800fc74 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2208      	movs	r2, #8
 801161e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011622:	e061      	b.n	80116e8 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	691b      	ldr	r3, [r3, #16]
 8011628:	f003 0320 	and.w	r3, r3, #32
 801162c:	2b00      	cmp	r3, #0
 801162e:	d05d      	beq.n	80116ec <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	2200      	movs	r2, #0
 8011636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	689b      	ldr	r3, [r3, #8]
 801163e:	2200      	movs	r2, #0
 8011640:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2201      	movs	r2, #1
 8011648:	755a      	strb	r2, [r3, #21]
                                onInit();
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	3310      	adds	r3, #16
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2201      	movs	r2, #1
 801165a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801165e:	e045      	b.n	80116ec <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	691b      	ldr	r3, [r3, #16]
 8011664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011668:	2b00      	cmp	r3, #0
 801166a:	d041      	beq.n	80116f0 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7d1b      	ldrb	r3, [r3, #20]
 8011670:	3301      	adds	r3, #1
 8011672:	b2da      	uxtb	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6898      	ldr	r0, [r3, #8]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	8999      	ldrh	r1, [r3, #12]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	7d1a      	ldrb	r2, [r3, #20]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f103 0416 	add.w	r4, r3, #22
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	336b      	adds	r3, #107	; 0x6b
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	4623      	mov	r3, r4
 8011692:	f7fe fb8d 	bl	800fdb0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2205      	movs	r2, #5
 801169a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801169e:	e027      	b.n	80116f0 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	f003 0308 	and.w	r3, r3, #8
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d023      	beq.n	80116f4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	689a      	ldr	r2, [r3, #8]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	899b      	ldrh	r3, [r3, #12]
 80116b4:	4619      	mov	r1, r3
 80116b6:	4610      	mov	r0, r2
 80116b8:	f7fe f963 	bl	800f982 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116c2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80116d2:	e00f      	b.n	80116f4 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 80116d4:	bf00      	nop
 80116d6:	e00e      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116d8:	bf00      	nop
 80116da:	e00c      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116dc:	bf00      	nop
 80116de:	e00a      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116e0:	bf00      	nop
 80116e2:	e008      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116e4:	bf00      	nop
 80116e6:	e006      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116e8:	bf00      	nop
 80116ea:	e004      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116ec:	bf00      	nop
 80116ee:	e002      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116f0:	bf00      	nop
 80116f2:	e000      	b.n	80116f6 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80116f4:	bf00      	nop
        }
}
 80116f6:	bf00      	nop
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bdb0      	pop	{r4, r5, r7, pc}
 80116fe:	bf00      	nop

08011700 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8011700:	b5b0      	push	{r4, r5, r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af02      	add	r7, sp, #8
 8011706:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801170e:	2b00      	cmp	r3, #0
 8011710:	f040 8084 	bne.w	801181c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	689b      	ldr	r3, [r3, #8]
 8011718:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801171c:	2b00      	cmp	r3, #0
 801171e:	d03a      	beq.n	8011796 <_ZN5BTHID3RunEv+0x96>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	689b      	ldr	r3, [r3, #8]
 8011724:	7a5b      	ldrb	r3, [r3, #9]
 8011726:	f083 0301 	eor.w	r3, r3, #1
 801172a:	b2db      	uxtb	r3, r3
 801172c:	2b00      	cmp	r3, #0
 801172e:	d032      	beq.n	8011796 <_ZN5BTHID3RunEv+0x96>
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	7d5b      	ldrb	r3, [r3, #21]
 8011734:	f083 0301 	eor.w	r3, r3, #1
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	d02b      	beq.n	8011796 <_ZN5BTHID3RunEv+0x96>
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011744:	f083 0301 	eor.w	r3, r3, #1
 8011748:	b2db      	uxtb	r3, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	d023      	beq.n	8011796 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	689b      	ldr	r3, [r3, #8]
 8011752:	2201      	movs	r2, #1
 8011754:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2201      	movs	r2, #1
 801175a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	689b      	ldr	r3, [r3, #8]
 8011762:	8b5a      	ldrh	r2, [r3, #26]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2200      	movs	r2, #0
 801176c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6898      	ldr	r0, [r3, #8]
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	8999      	ldrh	r1, [r3, #12]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	7d1a      	ldrb	r2, [r3, #20]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	336b      	adds	r3, #107	; 0x6b
 8011784:	2411      	movs	r4, #17
 8011786:	9400      	str	r4, [sp, #0]
 8011788:	f7fe f9e9 	bl	800fb5e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2202      	movs	r2, #2
 8011790:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8011794:	e041      	b.n	801181a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	691b      	ldr	r3, [r3, #16]
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d03b      	beq.n	801181a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6898      	ldr	r0, [r3, #8]
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	8999      	ldrh	r1, [r3, #12]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	7d1a      	ldrb	r2, [r3, #20]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	3316      	adds	r3, #22
 80117b8:	2501      	movs	r5, #1
 80117ba:	9501      	str	r5, [sp, #4]
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	4623      	mov	r3, r4
 80117c0:	f7fe fa0b 	bl	800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80117c4:	2001      	movs	r0, #1
 80117c6:	f7f1 f89b 	bl	8002900 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6898      	ldr	r0, [r3, #8]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	8999      	ldrh	r1, [r3, #12]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	7d1a      	ldrb	r2, [r3, #20]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	3316      	adds	r3, #22
 80117e0:	2500      	movs	r5, #0
 80117e2:	9501      	str	r5, [sp, #4]
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	4623      	mov	r3, r4
 80117e8:	f7fe f9f7 	bl	800fbda <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	7d1b      	ldrb	r3, [r3, #20]
 80117f0:	3301      	adds	r3, #1
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7f1 f881 	bl	8002900 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6898      	ldr	r0, [r3, #8]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	8999      	ldrh	r1, [r3, #12]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	7d1a      	ldrb	r2, [r3, #20]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	3316      	adds	r3, #22
 801180e:	f7fe fa31 	bl	800fc74 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2204      	movs	r2, #4
 8011816:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801181a:	bf00      	nop
        }
}
 801181c:	bf00      	nop
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bdb0      	pop	{r4, r5, r7, pc}

08011824 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8011824:	b590      	push	{r4, r7, lr}
 8011826:	b087      	sub	sp, #28
 8011828:	af02      	add	r7, sp, #8
 801182a:	60f8      	str	r0, [r7, #12]
 801182c:	60b9      	str	r1, [r7, #8]
 801182e:	4613      	mov	r3, r2
 8011830:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	6898      	ldr	r0, [r3, #8]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	8999      	ldrh	r1, [r3, #12]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	7edb      	ldrb	r3, [r3, #27]
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	7f12      	ldrb	r2, [r2, #28]
 8011842:	79fc      	ldrb	r4, [r7, #7]
 8011844:	9201      	str	r2, [sp, #4]
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	4623      	mov	r3, r4
 801184a:	68ba      	ldr	r2, [r7, #8]
 801184c:	f7fe f8f8 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011850:	bf00      	nop
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	bd90      	pop	{r4, r7, pc}

08011858 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	460b      	mov	r3, r1
 8011862:	70fb      	strb	r3, [r7, #3]
 8011864:	4613      	mov	r3, r2
 8011866:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2207      	movs	r2, #7
 801186c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	78fa      	ldrb	r2, [r7, #3]
 8011874:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	78ba      	ldrb	r2, [r7, #2]
 801187c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2205      	movs	r2, #5
 801188c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2200      	movs	r2, #0
 8011894:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2202      	movs	r2, #2
 801189c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2235      	movs	r2, #53	; 0x35
 80118a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	3328      	adds	r3, #40	; 0x28
 80118bc:	220a      	movs	r2, #10
 80118be:	4619      	mov	r1, r3
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7ff ffaf 	bl	8011824 <_ZN5BTHID11SDP_CommandEPhh>
}
 80118c6:	bf00      	nop
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 80118ce:	b590      	push	{r4, r7, lr}
 80118d0:	b087      	sub	sp, #28
 80118d2:	af02      	add	r7, sp, #8
 80118d4:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d008      	beq.n	80118f2 <_ZN5BTHID11setProtocolEv+0x24>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d003      	beq.n	80118f2 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2200      	movs	r2, #0
 80118ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80118f8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6898      	ldr	r0, [r3, #8]
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	8999      	ldrh	r1, [r3, #12]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	7d9b      	ldrb	r3, [r3, #22]
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	7dd2      	ldrb	r2, [r2, #23]
 8011910:	f107 040f 	add.w	r4, r7, #15
 8011914:	9201      	str	r2, [sp, #4]
 8011916:	9300      	str	r3, [sp, #0]
 8011918:	2301      	movs	r3, #1
 801191a:	4622      	mov	r2, r4
 801191c:	f7fe f890 	bl	800fa40 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011920:	bf00      	nop
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	bd90      	pop	{r4, r7, pc}

08011928 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	460b      	mov	r3, r1
 8011932:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8011934:	78fb      	ldrb	r3, [r7, #3]
 8011936:	2b03      	cmp	r3, #3
 8011938:	d86e      	bhi.n	8011a18 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 801193a:	a201      	add	r2, pc, #4	; (adr r2, 8011940 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 801193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011940:	08011951 	.word	0x08011951
 8011944:	08011983 	.word	0x08011983
 8011948:	080119b5 	.word	0x080119b5
 801194c:	080119e7 	.word	0x080119e7
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	7a1b      	ldrb	r3, [r3, #8]
 8011954:	f003 030f 	and.w	r3, r3, #15
 8011958:	b2db      	uxtb	r3, r3
 801195a:	2b07      	cmp	r3, #7
 801195c:	d00d      	beq.n	801197a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	7a1b      	ldrb	r3, [r3, #8]
 8011962:	f003 030f 	and.w	r3, r3, #15
 8011966:	b2db      	uxtb	r3, r3
 8011968:	2b00      	cmp	r3, #0
 801196a:	d006      	beq.n	801197a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	7a1b      	ldrb	r3, [r3, #8]
 8011970:	f003 030f 	and.w	r3, r3, #15
 8011974:	b2db      	uxtb	r3, r3
 8011976:	2b01      	cmp	r3, #1
 8011978:	d101      	bne.n	801197e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 801197a:	2301      	movs	r3, #1
 801197c:	e04d      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 801197e:	2300      	movs	r3, #0
 8011980:	e04b      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	7a1b      	ldrb	r3, [r3, #8]
 8011986:	f003 030f 	and.w	r3, r3, #15
 801198a:	b2db      	uxtb	r3, r3
 801198c:	2b01      	cmp	r3, #1
 801198e:	d00d      	beq.n	80119ac <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	7a1b      	ldrb	r3, [r3, #8]
 8011994:	f003 030f 	and.w	r3, r3, #15
 8011998:	b2db      	uxtb	r3, r3
 801199a:	2b02      	cmp	r3, #2
 801199c:	d006      	beq.n	80119ac <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	7a1b      	ldrb	r3, [r3, #8]
 80119a2:	f003 030f 	and.w	r3, r3, #15
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b03      	cmp	r3, #3
 80119aa:	d101      	bne.n	80119b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 80119ac:	2301      	movs	r3, #1
 80119ae:	e034      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80119b0:	2300      	movs	r3, #0
 80119b2:	e032      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	7a1b      	ldrb	r3, [r3, #8]
 80119b8:	f003 030f 	and.w	r3, r3, #15
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	2b03      	cmp	r3, #3
 80119c0:	d00d      	beq.n	80119de <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	7a1b      	ldrb	r3, [r3, #8]
 80119c6:	f003 030f 	and.w	r3, r3, #15
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	2b04      	cmp	r3, #4
 80119ce:	d006      	beq.n	80119de <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	7a1b      	ldrb	r3, [r3, #8]
 80119d4:	f003 030f 	and.w	r3, r3, #15
 80119d8:	b2db      	uxtb	r3, r3
 80119da:	2b05      	cmp	r3, #5
 80119dc:	d101      	bne.n	80119e2 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 80119de:	2301      	movs	r3, #1
 80119e0:	e01b      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80119e2:	2300      	movs	r3, #0
 80119e4:	e019      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	7a1b      	ldrb	r3, [r3, #8]
 80119ea:	f003 030f 	and.w	r3, r3, #15
 80119ee:	b2db      	uxtb	r3, r3
 80119f0:	2b05      	cmp	r3, #5
 80119f2:	d00d      	beq.n	8011a10 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	7a1b      	ldrb	r3, [r3, #8]
 80119f8:	f003 030f 	and.w	r3, r3, #15
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b06      	cmp	r3, #6
 8011a00:	d006      	beq.n	8011a10 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	7a1b      	ldrb	r3, [r3, #8]
 8011a06:	f003 030f 	and.w	r3, r3, #15
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	2b07      	cmp	r3, #7
 8011a0e:	d101      	bne.n	8011a14 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8011a10:	2301      	movs	r3, #1
 8011a12:	e002      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011a14:	2300      	movs	r3, #0
 8011a16:	e000      	b.n	8011a1a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8011a18:	2300      	movs	r3, #0
        }
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	370c      	adds	r7, #12
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop

08011a28 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	460b      	mov	r3, r1
 8011a32:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8011a34:	78fb      	ldrb	r3, [r7, #3]
 8011a36:	2b03      	cmp	r3, #3
 8011a38:	d806      	bhi.n	8011a48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 8011a3a:	78fb      	ldrb	r3, [r7, #3]
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f7ff ff72 	bl	8011928 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011a44:	4603      	mov	r3, r0
 8011a46:	e011      	b.n	8011a6c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011a50:	4619      	mov	r1, r3
 8011a52:	78fb      	ldrb	r3, [r7, #3]
 8011a54:	4a07      	ldr	r2, [pc, #28]	; (8011a74 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8011a56:	4413      	add	r3, r2
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8011a5e:	f003 0301 	and.w	r3, r3, #1
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	bf14      	ite	ne
 8011a66:	2301      	movne	r3, #1
 8011a68:	2300      	moveq	r3, #0
 8011a6a:	b2db      	uxtb	r3, r3
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	08014b58 	.word	0x08014b58

08011a78 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8011a78:	b480      	push	{r7}
 8011a7a:	b085      	sub	sp, #20
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	460b      	mov	r3, r1
 8011a82:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8011a84:	78fb      	ldrb	r3, [r7, #3]
 8011a86:	4a1b      	ldr	r2, [pc, #108]	; (8011af4 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8011a88:	4413      	add	r3, r2
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	2301      	movs	r3, #1
 8011a90:	4093      	lsls	r3, r2
 8011a92:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011a9e:	021b      	lsls	r3, r3, #8
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	4013      	ands	r3, r2
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	bf14      	ite	ne
 8011aac:	2301      	movne	r3, #1
 8011aae:	2300      	moveq	r3, #0
 8011ab0:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011ab8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011abc:	021b      	lsls	r3, r3, #8
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	43db      	mvns	r3, r3
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	b2d1      	uxtb	r1, r2
 8011ad0:	2000      	movs	r0, #0
 8011ad2:	4301      	orrs	r1, r0
 8011ad4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011ad8:	0a12      	lsrs	r2, r2, #8
 8011ada:	b292      	uxth	r2, r2
 8011adc:	2100      	movs	r1, #0
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8011ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3714      	adds	r7, #20
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
 8011af2:	bf00      	nop
 8011af4:	08014b58 	.word	0x08014b58

08011af8 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	460b      	mov	r3, r1
 8011b02:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8011b04:	78fb      	ldrb	r3, [r7, #3]
 8011b06:	2b08      	cmp	r3, #8
 8011b08:	d102      	bne.n	8011b10 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	7adb      	ldrb	r3, [r3, #11]
 8011b0e:	e006      	b.n	8011b1e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8011b10:	78fb      	ldrb	r3, [r7, #3]
 8011b12:	2b09      	cmp	r3, #9
 8011b14:	d102      	bne.n	8011b1c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	7b1b      	ldrb	r3, [r3, #12]
 8011b1a:	e000      	b.n	8011b1e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8011b1c:	2300      	movs	r3, #0
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	370c      	adds	r7, #12
 8011b22:	46bd      	mov	sp, r7
 8011b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b28:	4770      	bx	lr

08011b2a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8011b2a:	b480      	push	{r7}
 8011b2c:	b083      	sub	sp, #12
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	460b      	mov	r3, r1
 8011b34:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8011b36:	78fb      	ldrb	r3, [r7, #3]
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	4413      	add	r3, r2
 8011b3c:	791b      	ldrb	r3, [r3, #4]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	370c      	adds	r7, #12
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b086      	sub	sp, #24
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	60f8      	str	r0, [r7, #12]
 8011b52:	460b      	mov	r3, r1
 8011b54:	607a      	str	r2, [r7, #4]
 8011b56:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8011b58:	7afb      	ldrb	r3, [r7, #11]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	f240 80a6 	bls.w	8011cac <_ZN9PS4Parser5ParseEhPh+0x162>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f000 80a2 	beq.w	8011cac <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d10e      	bne.n	8011b8e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	1d18      	adds	r0, r3, #4
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	1c59      	adds	r1, r3, #1
 8011b78:	7afb      	ldrb	r3, [r7, #11]
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	2b3c      	cmp	r3, #60	; 0x3c
 8011b80:	bf28      	it	cs
 8011b82:	233c      	movcs	r3, #60	; 0x3c
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	461a      	mov	r2, r3
 8011b88:	f001 fe56 	bl	8013838 <memcpy>
 8011b8c:	e016      	b.n	8011bbc <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	2b11      	cmp	r3, #17
 8011b94:	f040 8098 	bne.w	8011cc8 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8011b98:	7afb      	ldrb	r3, [r7, #11]
 8011b9a:	2b03      	cmp	r3, #3
 8011b9c:	f240 8096 	bls.w	8011ccc <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	1d18      	adds	r0, r3, #4
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	1cd9      	adds	r1, r3, #3
 8011ba8:	7afb      	ldrb	r3, [r7, #11]
 8011baa:	3b03      	subs	r3, #3
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	2b3c      	cmp	r3, #60	; 0x3c
 8011bb0:	bf28      	it	cs
 8011bb2:	233c      	movcs	r3, #60	; 0x3c
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	f001 fe3e 	bl	8013838 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	689b      	ldr	r3, [r3, #8]
 8011bc0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bc8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d06d      	beq.n	8011cac <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	689b      	ldr	r3, [r3, #8]
 8011bd4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011bd8:	461a      	mov	r2, r3
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bde:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011be2:	43db      	mvns	r3, r3
 8011be4:	4013      	ands	r3, r2
 8011be6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	b2d1      	uxtb	r1, r2
 8011bee:	2000      	movs	r0, #0
 8011bf0:	4301      	orrs	r1, r0
 8011bf2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011bf6:	0a12      	lsrs	r2, r2, #8
 8011bf8:	b292      	uxth	r2, r2
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	430a      	orrs	r2, r1
 8011bfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	689b      	ldr	r3, [r3, #8]
 8011c06:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8011c0a:	68fa      	ldr	r2, [r7, #12]
 8011c0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011c0e:	f361 0317 	bfi	r3, r1, #0, #24
 8011c12:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8011c18:	2100      	movs	r1, #0
 8011c1a:	68f8      	ldr	r0, [r7, #12]
 8011c1c:	f7ff fe84 	bl	8011928 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d003      	beq.n	8011c2e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8011c26:	7dfb      	ldrb	r3, [r7, #23]
 8011c28:	f043 0301 	orr.w	r3, r3, #1
 8011c2c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8011c2e:	2101      	movs	r1, #1
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f7ff fe79 	bl	8011928 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011c36:	4603      	mov	r3, r0
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d003      	beq.n	8011c44 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 8011c3c:	7dfb      	ldrb	r3, [r7, #23]
 8011c3e:	f043 0302 	orr.w	r3, r3, #2
 8011c42:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8011c44:	2102      	movs	r1, #2
 8011c46:	68f8      	ldr	r0, [r7, #12]
 8011c48:	f7ff fe6e 	bl	8011928 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d003      	beq.n	8011c5a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	f043 0304 	orr.w	r3, r3, #4
 8011c58:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8011c5a:	2103      	movs	r1, #3
 8011c5c:	68f8      	ldr	r0, [r7, #12]
 8011c5e:	f7ff fe63 	bl	8011928 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011c62:	4603      	mov	r3, r0
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d003      	beq.n	8011c70 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8011c68:	7dfb      	ldrb	r3, [r7, #23]
 8011c6a:	f043 0308 	orr.w	r3, r3, #8
 8011c6e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011c76:	7dfa      	ldrb	r2, [r7, #23]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d017      	beq.n	8011cac <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011c82:	b25b      	sxtb	r3, r3
 8011c84:	43db      	mvns	r3, r3
 8011c86:	b25a      	sxtb	r2, r3
 8011c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c8c:	4013      	ands	r3, r2
 8011c8e:	b25b      	sxtb	r3, r3
 8011c90:	f003 030f 	and.w	r3, r3, #15
 8011c94:	b2d9      	uxtb	r1, r3
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011c9c:	f361 0303 	bfi	r3, r1, #0, #4
 8011ca0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	7dfa      	ldrb	r2, [r7, #23]
 8011ca8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d00b      	beq.n	8011cce <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	3246      	adds	r2, #70	; 0x46
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	68f8      	ldr	r0, [r7, #12]
 8011cc4:	4798      	blx	r3
 8011cc6:	e002      	b.n	8011cce <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8011cc8:	bf00      	nop
 8011cca:	e000      	b.n	8011cce <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8011ccc:	bf00      	nop
}
 8011cce:	3718      	adds	r7, #24
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011cdc:	2300      	movs	r3, #0
 8011cde:	73fb      	strb	r3, [r7, #15]
 8011ce0:	7bfb      	ldrb	r3, [r7, #15]
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d808      	bhi.n	8011cf8 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8011ce6:	7bfb      	ldrb	r3, [r7, #15]
 8011ce8:	687a      	ldr	r2, [r7, #4]
 8011cea:	4413      	add	r3, r2
 8011cec:	227f      	movs	r2, #127	; 0x7f
 8011cee:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	73fb      	strb	r3, [r7, #15]
 8011cf6:	e7f3      	b.n	8011ce0 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	6893      	ldr	r3, [r2, #8]
 8011cfc:	f36f 0317 	bfc	r3, #0, #24
 8011d00:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011d06:	f36f 0317 	bfc	r3, #0, #24
 8011d0a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73fb      	strb	r3, [r7, #15]
 8011d10:	7bfb      	ldrb	r3, [r7, #15]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d808      	bhi.n	8011d28 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8011d16:	7bfb      	ldrb	r3, [r7, #15]
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011d20:	7bfb      	ldrb	r3, [r7, #15]
 8011d22:	3301      	adds	r3, #1
 8011d24:	73fb      	strb	r3, [r7, #15]
 8011d26:	e7f3      	b.n	8011d10 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011d28:	2300      	movs	r3, #0
 8011d2a:	73fb      	strb	r3, [r7, #15]
 8011d2c:	7bfb      	ldrb	r3, [r7, #15]
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d81b      	bhi.n	8011d6a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011d32:	2300      	movs	r3, #0
 8011d34:	73bb      	strb	r3, [r7, #14]
 8011d36:	7bbb      	ldrb	r3, [r7, #14]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d812      	bhi.n	8011d62 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8011d3c:	7bfa      	ldrb	r2, [r7, #15]
 8011d3e:	7bbb      	ldrb	r3, [r7, #14]
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	0098      	lsls	r0, r3, #2
 8011d44:	4613      	mov	r3, r2
 8011d46:	00db      	lsls	r3, r3, #3
 8011d48:	4413      	add	r3, r2
 8011d4a:	4403      	add	r3, r0
 8011d4c:	440b      	add	r3, r1
 8011d4e:	f103 0220 	add.w	r2, r3, #32
 8011d52:	7993      	ldrb	r3, [r2, #6]
 8011d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d58:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011d5a:	7bbb      	ldrb	r3, [r7, #14]
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	73bb      	strb	r3, [r7, #14]
 8011d60:	e7e9      	b.n	8011d36 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011d62:	7bfb      	ldrb	r3, [r7, #15]
 8011d64:	3301      	adds	r3, #1
 8011d66:	73fb      	strb	r3, [r7, #15]
 8011d68:	e7e0      	b.n	8011d2c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	7a13      	ldrb	r3, [r2, #8]
 8011d6e:	2108      	movs	r1, #8
 8011d70:	f361 0303 	bfi	r3, r1, #0, #4
 8011d74:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011d7c:	2108      	movs	r1, #8
 8011d7e:	f361 0303 	bfi	r3, r1, #0, #4
 8011d82:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011d8c:	f36f 0303 	bfc	r3, #0, #4
 8011d90:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2200      	movs	r2, #0
 8011db4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2200      	movs	r2, #0
 8011de8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8011dec:	bf00      	nop
 8011dee:	3714      	adds	r7, #20
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr

08011df8 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	2180      	movs	r1, #128	; 0x80
 8011dfe:	4803      	ldr	r0, [pc, #12]	; (8011e0c <_ZN2P95IsSetEv+0x14>)
 8011e00:	f7f1 f818 	bl	8002e34 <HAL_GPIO_ReadPin>
 8011e04:	4603      	mov	r3, r0
 8011e06:	4618      	mov	r0, r3
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	40020800 	.word	0x40020800

08011e10 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f001 f9bb 	bl	8013194 <_ZN8MAX3421eI3P102P9EC1Ev>
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	4618      	mov	r0, r3
 8011e22:	f001 f9d3 	bl	80131cc <_ZN15AddressPoolImplILh16EEC1Ev>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8011e2e:	4b05      	ldr	r3, [pc, #20]	; (8011e44 <_ZN3USBC1Ev+0x34>)
 8011e30:	2211      	movs	r2, #17
 8011e32:	701a      	strb	r2, [r3, #0]
        init();
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f807 	bl	8011e48 <_ZN3USB4initEv>
}
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	200053e9 	.word	0x200053e9

08011e48 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8011e48:	b480      	push	{r7}
 8011e4a:	b083      	sub	sp, #12
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b086      	sub	sp, #24
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
 8011e70:	4613      	mov	r3, r2
 8011e72:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	78fa      	ldrb	r2, [r7, #3]
 8011e78:	4611      	mov	r1, r2
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f001 f9e0 	bl	8013240 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011e80:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d003      	beq.n	8011e90 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d101      	bne.n	8011e94 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8011e90:	2300      	movs	r3, #0
 8011e92:	e018      	b.n	8011ec6 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	74fb      	strb	r3, [r7, #19]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	795b      	ldrb	r3, [r3, #5]
 8011ea2:	7cfa      	ldrb	r2, [r7, #19]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d20d      	bcs.n	8011ec4 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	78ba      	ldrb	r2, [r7, #2]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d101      	bne.n	8011eb6 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	e007      	b.n	8011ec6 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	3303      	adds	r3, #3
 8011eba:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8011ebc:	7cfb      	ldrb	r3, [r7, #19]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	74fb      	strb	r3, [r7, #19]
 8011ec2:	e7ec      	b.n	8011e9e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3718      	adds	r7, #24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b086      	sub	sp, #24
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	60f8      	str	r0, [r7, #12]
 8011ed6:	607b      	str	r3, [r7, #4]
 8011ed8:	460b      	mov	r3, r1
 8011eda:	72fb      	strb	r3, [r7, #11]
 8011edc:	4613      	mov	r3, r2
 8011ede:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d101      	bne.n	8011eea <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8011ee6:	23d8      	movs	r3, #216	; 0xd8
 8011ee8:	e015      	b.n	8011f16 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	7afa      	ldrb	r2, [r7, #11]
 8011eee:	4611      	mov	r1, r2
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f001 f9a5 	bl	8013240 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011ef6:	6178      	str	r0, [r7, #20]

        if(!p)
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d101      	bne.n	8011f02 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011efe:	23d6      	movs	r3, #214	; 0xd6
 8011f00:	e009      	b.n	8011f16 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	7afa      	ldrb	r2, [r7, #11]
 8011f06:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	7aba      	ldrb	r2, [r7, #10]
 8011f12:	715a      	strb	r2, [r3, #5]

        return 0;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3718      	adds	r7, #24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b086      	sub	sp, #24
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	60f8      	str	r0, [r7, #12]
 8011f26:	607b      	str	r3, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	72fb      	strb	r3, [r7, #11]
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	7afa      	ldrb	r2, [r7, #11]
 8011f34:	4611      	mov	r1, r2
 8011f36:	4618      	mov	r0, r3
 8011f38:	f001 f982 	bl	8013240 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011f3c:	6178      	str	r0, [r7, #20]

        if(!p)
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d101      	bne.n	8011f48 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8011f44:	23d6      	movs	r3, #214	; 0xd6
 8011f46:	e04e      	b.n	8011fe6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d101      	bne.n	8011f54 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8011f50:	23d7      	movs	r3, #215	; 0xd7
 8011f52:	e048      	b.n	8011fe6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8011f54:	7aba      	ldrb	r2, [r7, #10]
 8011f56:	7afb      	ldrb	r3, [r7, #11]
 8011f58:	4619      	mov	r1, r3
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f7ff ff82 	bl	8011e64 <_ZN3USB14getEpInfoEntryEhh>
 8011f60:	4602      	mov	r2, r0
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d101      	bne.n	8011f72 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8011f6e:	23db      	movs	r3, #219	; 0xdb
 8011f70:	e039      	b.n	8011fe6 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	789b      	ldrb	r3, [r3, #2]
 8011f78:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	2b0f      	cmp	r3, #15
 8011f80:	bf28      	it	cs
 8011f82:	230f      	movcs	r3, #15
 8011f84:	b2db      	uxtb	r3, r3
 8011f86:	461a      	mov	r2, r3
 8011f88:	2301      	movs	r3, #1
 8011f8a:	4093      	lsls	r3, r2
 8011f8c:	b29a      	uxth	r2, r3
 8011f8e:	6a3b      	ldr	r3, [r7, #32]
 8011f90:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	881b      	ldrh	r3, [r3, #0]
 8011f96:	3b01      	subs	r3, #1
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	6a3b      	ldr	r3, [r7, #32]
 8011f9c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 8011f9e:	7afb      	ldrb	r3, [r7, #11]
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	21e0      	movs	r1, #224	; 0xe0
 8011fa4:	68f8      	ldr	r0, [r7, #12]
 8011fa6:	f7ef ff8f 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 8011faa:	21d8      	movs	r1, #216	; 0xd8
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	f7ef ffdd 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	799b      	ldrb	r3, [r3, #6]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d009      	beq.n	8011fd2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011fc4:	7cfb      	ldrb	r3, [r7, #19]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	f043 0302 	orr.w	r3, r3, #2
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	e003      	b.n	8011fda <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8011fd2:	7cfb      	ldrb	r3, [r7, #19]
 8011fd4:	f023 0306 	bic.w	r3, r3, #6
 8011fd8:	b2db      	uxtb	r3, r3
 8011fda:	461a      	mov	r2, r3
 8011fdc:	21d8      	movs	r1, #216	; 0xd8
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f7ef ff72 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 8011fee:	b590      	push	{r4, r7, lr}
 8011ff0:	b08b      	sub	sp, #44	; 0x2c
 8011ff2:	af02      	add	r7, sp, #8
 8011ff4:	6078      	str	r0, [r7, #4]
 8011ff6:	4608      	mov	r0, r1
 8011ff8:	4611      	mov	r1, r2
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	70fb      	strb	r3, [r7, #3]
 8012000:	460b      	mov	r3, r1
 8012002:	70bb      	strb	r3, [r7, #2]
 8012004:	4613      	mov	r3, r2
 8012006:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8012008:	2300      	movs	r3, #0
 801200a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 801200c:	2300      	movs	r3, #0
 801200e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8012010:	2300      	movs	r3, #0
 8012012:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8012014:	f107 000c 	add.w	r0, r7, #12
 8012018:	78ba      	ldrb	r2, [r7, #2]
 801201a:	78f9      	ldrb	r1, [r7, #3]
 801201c:	f107 030a 	add.w	r3, r7, #10
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	4603      	mov	r3, r0
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff ff7a 	bl	8011f1e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 801202a:	4603      	mov	r3, r0
 801202c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 801202e:	7ffb      	ldrb	r3, [r7, #31]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d001      	beq.n	8012038 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8012034:	7ffb      	ldrb	r3, [r7, #31]
 8012036:	e0ae      	b.n	8012196 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8012038:	787b      	ldrb	r3, [r7, #1]
 801203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801203e:	2b00      	cmp	r3, #0
 8012040:	bfcc      	ite	gt
 8012042:	2301      	movgt	r3, #1
 8012044:	2300      	movle	r3, #0
 8012046:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8012048:	787b      	ldrb	r3, [r7, #1]
 801204a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 801204c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012050:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8012052:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012056:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8012058:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801205c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 801205e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012060:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8012062:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012066:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8012068:	f107 0310 	add.w	r3, r7, #16
 801206c:	2208      	movs	r2, #8
 801206e:	2120      	movs	r1, #32
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f001 f90b 	bl	801328c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8012076:	897b      	ldrh	r3, [r7, #10]
 8012078:	78ba      	ldrb	r2, [r7, #2]
 801207a:	2110      	movs	r1, #16
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 faf2 	bl	8012666 <_ZN3USB11dispatchPktEhht>
 8012082:	4603      	mov	r3, r0
 8012084:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8012086:	7ffb      	ldrb	r3, [r7, #31]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d001      	beq.n	8012090 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 801208c:	7ffb      	ldrb	r3, [r7, #31]
 801208e:	e082      	b.n	8012196 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8012090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012092:	2b00      	cmp	r3, #0
 8012094:	d072      	beq.n	801217c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8012096:	7efb      	ldrb	r3, [r7, #27]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d057      	beq.n	801214c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 801209c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120a0:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	7893      	ldrb	r3, [r2, #2]
 80120a6:	f043 0302 	orr.w	r3, r3, #2
 80120aa:	7093      	strb	r3, [r2, #2]

                        while(left) {
 80120ac:	8bbb      	ldrh	r3, [r7, #28]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d05f      	beq.n	8012172 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 80120b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80120b6:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 80120b8:	68f9      	ldr	r1, [r7, #12]
 80120ba:	897a      	ldrh	r2, [r7, #10]
 80120bc:	f107 0008 	add.w	r0, r7, #8
 80120c0:	2300      	movs	r3, #0
 80120c2:	9301      	str	r3, [sp, #4]
 80120c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120c6:	9300      	str	r3, [sp, #0]
 80120c8:	4603      	mov	r3, r0
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 f8a6 	bl	801221c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 80120d0:	4603      	mov	r3, r0
 80120d2:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 80120d4:	7ffb      	ldrb	r3, [r7, #31]
 80120d6:	2b06      	cmp	r3, #6
 80120d8:	d114      	bne.n	8012104 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80120da:	21f8      	movs	r1, #248	; 0xf8
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ef ff45 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80120e2:	4603      	mov	r3, r0
 80120e4:	f003 0320 	and.w	r3, r3, #32
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	bf0c      	ite	eq
 80120ec:	2301      	moveq	r3, #1
 80120ee:	2300      	movne	r3, #0
 80120f0:	b2db      	uxtb	r3, r3
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	f003 0301 	and.w	r3, r3, #1
 80120f8:	b2d9      	uxtb	r1, r3
 80120fa:	7893      	ldrb	r3, [r2, #2]
 80120fc:	f361 0341 	bfi	r3, r1, #1, #1
 8012100:	7093      	strb	r3, [r2, #2]
 8012102:	e7d3      	b.n	80120ac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8012104:	7ffb      	ldrb	r3, [r7, #31]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d001      	beq.n	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 801210a:	7ffb      	ldrb	r3, [r7, #31]
 801210c:	e043      	b.n	8012196 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 801210e:	7ffb      	ldrb	r3, [r7, #31]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d111      	bne.n	8012138 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8012114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00e      	beq.n	8012138 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 801211a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681c      	ldr	r4, [r3, #0]
 8012120:	8939      	ldrh	r1, [r7, #8]
 8012122:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012126:	8bbb      	ldrh	r3, [r7, #28]
 8012128:	1ad3      	subs	r3, r2, r3
 801212a:	b29b      	uxth	r3, r3
 801212c:	833b      	strh	r3, [r7, #24]
 801212e:	f107 0318 	add.w	r3, r7, #24
 8012132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012136:	47a0      	blx	r4

                                left -= read;
 8012138:	893b      	ldrh	r3, [r7, #8]
 801213a:	8bba      	ldrh	r2, [r7, #28]
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8012140:	893b      	ldrh	r3, [r7, #8]
 8012142:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012146:	429a      	cmp	r2, r3
 8012148:	d812      	bhi.n	8012170 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 801214a:	e7af      	b.n	80120ac <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 801214c:	68fa      	ldr	r2, [r7, #12]
 801214e:	7893      	ldrb	r3, [r2, #2]
 8012150:	f043 0301 	orr.w	r3, r3, #1
 8012154:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8012156:	68f9      	ldr	r1, [r7, #12]
 8012158:	897a      	ldrh	r2, [r7, #10]
 801215a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 801215e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012160:	9300      	str	r3, [sp, #0]
 8012162:	4603      	mov	r3, r0
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f000 f953 	bl	8012410 <_ZN3USB11OutTransferEP6EpInfottPh>
 801216a:	4603      	mov	r3, r0
 801216c:	77fb      	strb	r3, [r7, #31]
 801216e:	e000      	b.n	8012172 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8012170:	bf00      	nop
                }
                if(rcode) //return error
 8012172:	7ffb      	ldrb	r3, [r7, #31]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d001      	beq.n	801217c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8012178:	7ffb      	ldrb	r3, [r7, #31]
 801217a:	e00c      	b.n	8012196 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 801217c:	7efb      	ldrb	r3, [r7, #27]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8012182:	21a0      	movs	r1, #160	; 0xa0
 8012184:	e000      	b.n	8012188 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8012186:	2180      	movs	r1, #128	; 0x80
 8012188:	897b      	ldrh	r3, [r7, #10]
 801218a:	78ba      	ldrb	r2, [r7, #2]
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f000 fa6a 	bl	8012666 <_ZN3USB11dispatchPktEhht>
 8012192:	4603      	mov	r3, r0
 8012194:	bf00      	nop
}
 8012196:	4618      	mov	r0, r3
 8012198:	3724      	adds	r7, #36	; 0x24
 801219a:	46bd      	mov	sp, r7
 801219c:	bd90      	pop	{r4, r7, pc}

0801219e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801219e:	b580      	push	{r7, lr}
 80121a0:	b08a      	sub	sp, #40	; 0x28
 80121a2:	af02      	add	r7, sp, #8
 80121a4:	60f8      	str	r0, [r7, #12]
 80121a6:	607b      	str	r3, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	72fb      	strb	r3, [r7, #11]
 80121ac:	4613      	mov	r3, r2
 80121ae:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80121b0:	2300      	movs	r3, #0
 80121b2:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80121b4:	2300      	movs	r3, #0
 80121b6:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80121b8:	f107 0018 	add.w	r0, r7, #24
 80121bc:	7aba      	ldrb	r2, [r7, #10]
 80121be:	7af9      	ldrb	r1, [r7, #11]
 80121c0:	f107 0316 	add.w	r3, r7, #22
 80121c4:	9300      	str	r3, [sp, #0]
 80121c6:	4603      	mov	r3, r0
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f7ff fea8 	bl	8011f1e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80121ce:	4603      	mov	r3, r0
 80121d0:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 80121d2:	7ffb      	ldrb	r3, [r7, #31]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d010      	beq.n	80121fa <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 80121d8:	7ffb      	ldrb	r3, [r7, #31]
 80121da:	2181      	movs	r1, #129	; 0x81
 80121dc:	4618      	mov	r0, r3
 80121de:	f001 f883 	bl	80132e8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 80121e2:	7afb      	ldrb	r3, [r7, #11]
 80121e4:	2181      	movs	r1, #129	; 0x81
 80121e6:	4618      	mov	r0, r3
 80121e8:	f001 f87e 	bl	80132e8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 80121ec:	7abb      	ldrb	r3, [r7, #10]
 80121ee:	2181      	movs	r1, #129	; 0x81
 80121f0:	4618      	mov	r0, r3
 80121f2:	f001 f879 	bl	80132e8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 80121f6:	7ffb      	ldrb	r3, [r7, #31]
 80121f8:	e00c      	b.n	8012214 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 80121fa:	69b9      	ldr	r1, [r7, #24]
 80121fc:	8afa      	ldrh	r2, [r7, #22]
 80121fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012202:	9301      	str	r3, [sp, #4]
 8012204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f000 f806 	bl	801221c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012210:	4603      	mov	r3, r0
 8012212:	bf00      	nop
}
 8012214:	4618      	mov	r0, r3
 8012216:	3720      	adds	r7, #32
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801221c:	b580      	push	{r7, lr}
 801221e:	b086      	sub	sp, #24
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	603b      	str	r3, [r7, #0]
 8012228:	4613      	mov	r3, r2
 801222a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	785b      	ldrb	r3, [r3, #1]
 801223a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	2200      	movs	r2, #0
 8012240:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	789b      	ldrb	r3, [r3, #2]
 8012246:	f003 0302 	and.w	r3, r3, #2
 801224a:	b2db      	uxtb	r3, r3
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8012250:	2320      	movs	r3, #32
 8012252:	e000      	b.n	8012256 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8012254:	2310      	movs	r3, #16
 8012256:	461a      	mov	r2, r3
 8012258:	21e8      	movs	r1, #232	; 0xe8
 801225a:	68f8      	ldr	r0, [r7, #12]
 801225c:	f7ef fe34 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	781a      	ldrb	r2, [r3, #0]
 8012264:	88fb      	ldrh	r3, [r7, #6]
 8012266:	2100      	movs	r1, #0
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f000 f9fc 	bl	8012666 <_ZN3USB11dispatchPktEhht>
 801226e:	4603      	mov	r3, r0
 8012270:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8012272:	7dfb      	ldrb	r3, [r7, #23]
 8012274:	2b06      	cmp	r3, #6
 8012276:	d123      	bne.n	80122c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8012278:	21f8      	movs	r1, #248	; 0xf8
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f7ef fe76 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012280:	4603      	mov	r3, r0
 8012282:	f003 0310 	and.w	r3, r3, #16
 8012286:	2b00      	cmp	r3, #0
 8012288:	bf0c      	ite	eq
 801228a:	2301      	moveq	r3, #1
 801228c:	2300      	movne	r3, #0
 801228e:	b2db      	uxtb	r3, r3
 8012290:	f003 0301 	and.w	r3, r3, #1
 8012294:	b2d9      	uxtb	r1, r3
 8012296:	68ba      	ldr	r2, [r7, #8]
 8012298:	7893      	ldrb	r3, [r2, #2]
 801229a:	f361 0341 	bfi	r3, r1, #1, #1
 801229e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	789b      	ldrb	r3, [r3, #2]
 80122a4:	f003 0302 	and.w	r3, r3, #2
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d001      	beq.n	80122b2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 80122ae:	2320      	movs	r3, #32
 80122b0:	e000      	b.n	80122b4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 80122b2:	2310      	movs	r3, #16
 80122b4:	461a      	mov	r2, r3
 80122b6:	21e8      	movs	r1, #232	; 0xe8
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7ef fe05 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 80122be:	e06e      	b.n	801239e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 80122c0:	7dfb      	ldrb	r3, [r7, #23]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d16c      	bne.n	80123a0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 80122c6:	21c8      	movs	r1, #200	; 0xc8
 80122c8:	68f8      	ldr	r0, [r7, #12]
 80122ca:	f7ef fe4f 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80122ce:	4603      	mov	r3, r0
 80122d0:	f003 0304 	and.w	r3, r3, #4
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	bf0c      	ite	eq
 80122d8:	2301      	moveq	r3, #1
 80122da:	2300      	movne	r3, #0
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d002      	beq.n	80122e8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 80122e2:	23f0      	movs	r3, #240	; 0xf0
 80122e4:	75fb      	strb	r3, [r7, #23]
                        break;
 80122e6:	e05c      	b.n	80123a2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 80122e8:	2130      	movs	r1, #48	; 0x30
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f7ef fe3e 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80122f0:	4603      	mov	r3, r0
 80122f2:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 80122f4:	7dba      	ldrb	r2, [r7, #22]
 80122f6:	8a7b      	ldrh	r3, [r7, #18]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	dd01      	ble.n	8012300 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 80122fc:	8a7b      	ldrh	r3, [r7, #18]
 80122fe:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012306:	b29b      	uxth	r3, r3
 8012308:	8a7a      	ldrh	r2, [r7, #18]
 801230a:	1ad3      	subs	r3, r2, r3
 801230c:	b29b      	uxth	r3, r3
 801230e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8012310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012314:	2b00      	cmp	r3, #0
 8012316:	da01      	bge.n	801231c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8012318:	2300      	movs	r3, #0
 801231a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801231c:	7dba      	ldrb	r2, [r7, #22]
 801231e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012322:	4293      	cmp	r3, r2
 8012324:	bfa8      	it	ge
 8012326:	4613      	movge	r3, r2
 8012328:	b2da      	uxtb	r2, r3
 801232a:	6a3b      	ldr	r3, [r7, #32]
 801232c:	2108      	movs	r1, #8
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f000 ffe6 	bl	8013300 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8012334:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8012336:	2204      	movs	r2, #4
 8012338:	21c8      	movs	r1, #200	; 0xc8
 801233a:	68f8      	ldr	r0, [r7, #12]
 801233c:	f7ef fdc4 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8012340:	683b      	ldr	r3, [r7, #0]
 8012342:	881a      	ldrh	r2, [r3, #0]
 8012344:	7dbb      	ldrb	r3, [r7, #22]
 8012346:	b29b      	uxth	r3, r3
 8012348:	4413      	add	r3, r2
 801234a:	b29a      	uxth	r2, r3
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8012350:	7dba      	ldrb	r2, [r7, #22]
 8012352:	7c7b      	ldrb	r3, [r7, #17]
 8012354:	429a      	cmp	r2, r3
 8012356:	d304      	bcc.n	8012362 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	881b      	ldrh	r3, [r3, #0]
 801235c:	8a7a      	ldrh	r2, [r7, #18]
 801235e:	429a      	cmp	r2, r3
 8012360:	d813      	bhi.n	801238a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8012362:	21f8      	movs	r1, #248	; 0xf8
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f7ef fe01 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 801236a:	4603      	mov	r3, r0
 801236c:	f003 0310 	and.w	r3, r3, #16
 8012370:	2b00      	cmp	r3, #0
 8012372:	d001      	beq.n	8012378 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8012374:	2101      	movs	r1, #1
 8012376:	e000      	b.n	801237a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8012378:	2100      	movs	r1, #0
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	7893      	ldrb	r3, [r2, #2]
 801237e:	f361 0341 	bfi	r3, r1, #1, #1
 8012382:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8012384:	2300      	movs	r3, #0
 8012386:	75fb      	strb	r3, [r7, #23]
                        break;
 8012388:	e00b      	b.n	80123a2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 801238a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801238e:	2b00      	cmp	r3, #0
 8012390:	f43f af66 	beq.w	8012260 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8012394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012398:	4618      	mov	r0, r3
 801239a:	f7f0 fab1 	bl	8002900 <HAL_Delay>
        } //while( 1 )
 801239e:	e75f      	b.n	8012260 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 80123a0:	bf00      	nop
        return ( rcode);
 80123a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3718      	adds	r7, #24
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b088      	sub	sp, #32
 80123b0:	af02      	add	r7, sp, #8
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	4608      	mov	r0, r1
 80123b6:	4611      	mov	r1, r2
 80123b8:	461a      	mov	r2, r3
 80123ba:	4603      	mov	r3, r0
 80123bc:	70fb      	strb	r3, [r7, #3]
 80123be:	460b      	mov	r3, r1
 80123c0:	70bb      	strb	r3, [r7, #2]
 80123c2:	4613      	mov	r3, r2
 80123c4:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 80123c6:	2300      	movs	r3, #0
 80123c8:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80123ce:	f107 0010 	add.w	r0, r7, #16
 80123d2:	78ba      	ldrb	r2, [r7, #2]
 80123d4:	78f9      	ldrb	r1, [r7, #3]
 80123d6:	f107 030e 	add.w	r3, r7, #14
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	4603      	mov	r3, r0
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f7ff fd9d 	bl	8011f1e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80123e4:	4603      	mov	r3, r0
 80123e6:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d001      	beq.n	80123f2 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 80123ee:	7dfb      	ldrb	r3, [r7, #23]
 80123f0:	e00a      	b.n	8012408 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 80123f2:	6939      	ldr	r1, [r7, #16]
 80123f4:	89fa      	ldrh	r2, [r7, #14]
 80123f6:	8838      	ldrh	r0, [r7, #0]
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	9300      	str	r3, [sp, #0]
 80123fc:	4603      	mov	r3, r0
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f000 f806 	bl	8012410 <_ZN3USB11OutTransferEP6EpInfottPh>
 8012404:	4603      	mov	r3, r0
 8012406:	bf00      	nop
}
 8012408:	4618      	mov	r0, r3
 801240a:	3718      	adds	r7, #24
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8012410:	b580      	push	{r7, lr}
 8012412:	b08a      	sub	sp, #40	; 0x28
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	4611      	mov	r1, r2
 801241c:	461a      	mov	r2, r3
 801241e:	460b      	mov	r3, r1
 8012420:	80fb      	strh	r3, [r7, #6]
 8012422:	4613      	mov	r3, r2
 8012424:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8012426:	2300      	movs	r3, #0
 8012428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8012430:	88bb      	ldrh	r3, [r7, #4]
 8012432:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	785b      	ldrb	r3, [r3, #1]
 8012438:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801243a:	7efb      	ldrb	r3, [r7, #27]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d002      	beq.n	8012446 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8012440:	7efb      	ldrb	r3, [r7, #27]
 8012442:	2b40      	cmp	r3, #64	; 0x40
 8012444:	d901      	bls.n	801244a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8012446:	23da      	movs	r3, #218	; 0xda
 8012448:	e109      	b.n	801265e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801244a:	f7f0 fa4d 	bl	80028e8 <HAL_GetTick>
 801244e:	4603      	mov	r3, r0
 8012450:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012454:	3308      	adds	r3, #8
 8012456:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	789b      	ldrb	r3, [r3, #2]
 801245c:	f003 0301 	and.w	r3, r3, #1
 8012460:	b2db      	uxtb	r3, r3
 8012462:	2b00      	cmp	r3, #0
 8012464:	d001      	beq.n	801246a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8012466:	2380      	movs	r3, #128	; 0x80
 8012468:	e000      	b.n	801246c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801246a:	2340      	movs	r3, #64	; 0x40
 801246c:	461a      	mov	r2, r3
 801246e:	21e8      	movs	r1, #232	; 0xe8
 8012470:	68f8      	ldr	r0, [r7, #12]
 8012472:	f7ef fd29 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8012476:	8bbb      	ldrh	r3, [r7, #28]
 8012478:	2b00      	cmp	r3, #0
 801247a:	f000 80da 	beq.w	8012632 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8012484:	2300      	movs	r3, #0
 8012486:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8012488:	7efb      	ldrb	r3, [r7, #27]
 801248a:	b29b      	uxth	r3, r3
 801248c:	8bba      	ldrh	r2, [r7, #28]
 801248e:	4293      	cmp	r3, r2
 8012490:	bf28      	it	cs
 8012492:	4613      	movcs	r3, r2
 8012494:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8012496:	8a7b      	ldrh	r3, [r7, #18]
 8012498:	b2da      	uxtb	r2, r3
 801249a:	6a3b      	ldr	r3, [r7, #32]
 801249c:	2110      	movs	r1, #16
 801249e:	68f8      	ldr	r0, [r7, #12]
 80124a0:	f000 fef4 	bl	801328c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80124a4:	8a7b      	ldrh	r3, [r7, #18]
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	461a      	mov	r2, r3
 80124aa:	2138      	movs	r1, #56	; 0x38
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ef fd0b 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	f043 0320 	orr.w	r3, r3, #32
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	461a      	mov	r2, r3
 80124be:	21f0      	movs	r1, #240	; 0xf0
 80124c0:	68f8      	ldr	r0, [r7, #12]
 80124c2:	f7ef fd01 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80124c6:	21c8      	movs	r1, #200	; 0xc8
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f7ef fd4f 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80124ce:	4603      	mov	r3, r0
 80124d0:	b25b      	sxtb	r3, r3
 80124d2:	43db      	mvns	r3, r3
 80124d4:	b2db      	uxtb	r3, r3
 80124d6:	09db      	lsrs	r3, r3, #7
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d000      	beq.n	80124e0 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 80124de:	e7f2      	b.n	80124c6 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 80124e0:	2280      	movs	r2, #128	; 0x80
 80124e2:	21c8      	movs	r1, #200	; 0xc8
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f7ef fcef 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 80124ea:	21f8      	movs	r1, #248	; 0xf8
 80124ec:	68f8      	ldr	r0, [r7, #12]
 80124ee:	f7ef fd3d 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80124f2:	4603      	mov	r3, r0
 80124f4:	f003 030f 	and.w	r3, r3, #15
 80124f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 80124fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012500:	2b00      	cmp	r3, #0
 8012502:	d008      	beq.n	8012516 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012504:	f7f0 f9f0 	bl	80028e8 <HAL_GetTick>
 8012508:	4602      	mov	r2, r0
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	1ad3      	subs	r3, r2, r3
 801250e:	2b00      	cmp	r3, #0
 8012510:	da01      	bge.n	8012516 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012512:	2301      	movs	r3, #1
 8012514:	e000      	b.n	8012518 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8012516:	2300      	movs	r3, #0
 8012518:	2b00      	cmp	r3, #0
 801251a:	f000 8081 	beq.w	8012620 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801251e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012522:	2b0e      	cmp	r3, #14
 8012524:	d012      	beq.n	801254c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8012526:	2b0e      	cmp	r3, #14
 8012528:	f300 8085 	bgt.w	8012636 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801252c:	2b04      	cmp	r3, #4
 801252e:	d002      	beq.n	8012536 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8012530:	2b06      	cmp	r3, #6
 8012532:	d015      	beq.n	8012560 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8012534:	e07f      	b.n	8012636 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8012536:	8bfb      	ldrh	r3, [r7, #30]
 8012538:	3301      	adds	r3, #1
 801253a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801253c:	88fb      	ldrh	r3, [r7, #6]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d032      	beq.n	80125a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8012542:	8bfa      	ldrh	r2, [r7, #30]
 8012544:	88fb      	ldrh	r3, [r7, #6]
 8012546:	429a      	cmp	r2, r3
 8012548:	d12e      	bne.n	80125a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801254a:	e075      	b.n	8012638 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801254c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012550:	3301      	adds	r3, #1
 8012552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8012556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801255a:	2b03      	cmp	r3, #3
 801255c:	d126      	bne.n	80125ac <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801255e:	e06b      	b.n	8012638 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8012560:	21f8      	movs	r1, #248	; 0xf8
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f7ef fd02 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012568:	4603      	mov	r3, r0
 801256a:	f003 0320 	and.w	r3, r3, #32
 801256e:	2b00      	cmp	r3, #0
 8012570:	bf0c      	ite	eq
 8012572:	2301      	moveq	r3, #1
 8012574:	2300      	movne	r3, #0
 8012576:	b2db      	uxtb	r3, r3
 8012578:	f003 0301 	and.w	r3, r3, #1
 801257c:	b2d9      	uxtb	r1, r3
 801257e:	68ba      	ldr	r2, [r7, #8]
 8012580:	7893      	ldrb	r3, [r2, #2]
 8012582:	f361 0300 	bfi	r3, r1, #0, #1
 8012586:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	789b      	ldrb	r3, [r3, #2]
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	b2db      	uxtb	r3, r3
 8012592:	2b00      	cmp	r3, #0
 8012594:	d001      	beq.n	801259a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8012596:	2380      	movs	r3, #128	; 0x80
 8012598:	e000      	b.n	801259c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801259a:	2340      	movs	r3, #64	; 0x40
 801259c:	461a      	mov	r2, r3
 801259e:	21e8      	movs	r1, #232	; 0xe8
 80125a0:	68f8      	ldr	r0, [r7, #12]
 80125a2:	f7ef fc91 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80125a6:	e002      	b.n	80125ae <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80125a8:	bf00      	nop
 80125aa:	e000      	b.n	80125ae <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80125ac:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80125ae:	2200      	movs	r2, #0
 80125b0:	2138      	movs	r1, #56	; 0x38
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f7ef fc88 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80125b8:	6a3b      	ldr	r3, [r7, #32]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	461a      	mov	r2, r3
 80125be:	2110      	movs	r1, #16
 80125c0:	68f8      	ldr	r0, [r7, #12]
 80125c2:	f7ef fc81 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80125c6:	8a7b      	ldrh	r3, [r7, #18]
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	461a      	mov	r2, r3
 80125cc:	2138      	movs	r1, #56	; 0x38
 80125ce:	68f8      	ldr	r0, [r7, #12]
 80125d0:	f7ef fc7a 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	f043 0320 	orr.w	r3, r3, #32
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	461a      	mov	r2, r3
 80125e0:	21f0      	movs	r1, #240	; 0xf0
 80125e2:	68f8      	ldr	r0, [r7, #12]
 80125e4:	f7ef fc70 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80125e8:	21c8      	movs	r1, #200	; 0xc8
 80125ea:	68f8      	ldr	r0, [r7, #12]
 80125ec:	f7ef fcbe 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80125f0:	4603      	mov	r3, r0
 80125f2:	b25b      	sxtb	r3, r3
 80125f4:	43db      	mvns	r3, r3
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	09db      	lsrs	r3, r3, #7
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d000      	beq.n	8012602 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8012600:	e7f2      	b.n	80125e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012602:	2280      	movs	r2, #128	; 0x80
 8012604:	21c8      	movs	r1, #200	; 0xc8
 8012606:	68f8      	ldr	r0, [r7, #12]
 8012608:	f7ef fc5e 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801260c:	21f8      	movs	r1, #248	; 0xf8
 801260e:	68f8      	ldr	r0, [r7, #12]
 8012610:	f7ef fcac 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012614:	4603      	mov	r3, r0
 8012616:	f003 030f 	and.w	r3, r3, #15
 801261a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801261e:	e76d      	b.n	80124fc <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8012620:	8bba      	ldrh	r2, [r7, #28]
 8012622:	8a7b      	ldrh	r3, [r7, #18]
 8012624:	1ad3      	subs	r3, r2, r3
 8012626:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8012628:	8a7b      	ldrh	r3, [r7, #18]
 801262a:	6a3a      	ldr	r2, [r7, #32]
 801262c:	4413      	add	r3, r2
 801262e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8012630:	e721      	b.n	8012476 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8012632:	bf00      	nop
 8012634:	e000      	b.n	8012638 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8012636:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8012638:	21f8      	movs	r1, #248	; 0xf8
 801263a:	68f8      	ldr	r0, [r7, #12]
 801263c:	f7ef fc96 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012640:	4603      	mov	r3, r0
 8012642:	f003 0320 	and.w	r3, r3, #32
 8012646:	2b00      	cmp	r3, #0
 8012648:	d001      	beq.n	801264e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801264a:	2101      	movs	r1, #1
 801264c:	e000      	b.n	8012650 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801264e:	2100      	movs	r1, #0
 8012650:	68ba      	ldr	r2, [r7, #8]
 8012652:	7893      	ldrb	r3, [r2, #2]
 8012654:	f361 0300 	bfi	r3, r1, #0, #1
 8012658:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801265a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801265e:	4618      	mov	r0, r3
 8012660:	3728      	adds	r7, #40	; 0x28
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8012666:	b580      	push	{r7, lr}
 8012668:	b086      	sub	sp, #24
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
 801266e:	4608      	mov	r0, r1
 8012670:	4611      	mov	r1, r2
 8012672:	461a      	mov	r2, r3
 8012674:	4603      	mov	r3, r0
 8012676:	70fb      	strb	r3, [r7, #3]
 8012678:	460b      	mov	r3, r1
 801267a:	70bb      	strb	r3, [r7, #2]
 801267c:	4613      	mov	r3, r2
 801267e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8012680:	f7f0 f932 	bl	80028e8 <HAL_GetTick>
 8012684:	4603      	mov	r3, r0
 8012686:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801268a:	3308      	adds	r3, #8
 801268c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801268e:	2300      	movs	r3, #0
 8012690:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8012692:	2300      	movs	r3, #0
 8012694:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801269a:	f7f0 f925 	bl	80028e8 <HAL_GetTick>
 801269e:	4602      	mov	r2, r0
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	0fdb      	lsrs	r3, r3, #31
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d04c      	beq.n	8012746 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80126ac:	78fa      	ldrb	r2, [r7, #3]
 80126ae:	78bb      	ldrb	r3, [r7, #2]
 80126b0:	4313      	orrs	r3, r2
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	461a      	mov	r2, r3
 80126b6:	21f0      	movs	r1, #240	; 0xf0
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ef fc05 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80126be:	23ff      	movs	r3, #255	; 0xff
 80126c0:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80126c2:	f7f0 f911 	bl	80028e8 <HAL_GetTick>
 80126c6:	4602      	mov	r2, r0
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	1ad3      	subs	r3, r2, r3
 80126cc:	0fdb      	lsrs	r3, r3, #31
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d010      	beq.n	80126f6 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 80126d4:	21c8      	movs	r1, #200	; 0xc8
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7ef fc48 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80126dc:	4603      	mov	r3, r0
 80126de:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 80126e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	daec      	bge.n	80126c2 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 80126e8:	2280      	movs	r2, #128	; 0x80
 80126ea:	21c8      	movs	r1, #200	; 0xc8
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f7ef fbeb 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 80126f2:	2300      	movs	r3, #0
 80126f4:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 80126f6:	21f8      	movs	r1, #248	; 0xf8
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f7ef fc37 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80126fe:	4603      	mov	r3, r0
 8012700:	f003 030f 	and.w	r3, r3, #15
 8012704:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8012706:	7dfb      	ldrb	r3, [r7, #23]
 8012708:	2b04      	cmp	r3, #4
 801270a:	d002      	beq.n	8012712 <_ZN3USB11dispatchPktEhht+0xac>
 801270c:	2b0e      	cmp	r3, #14
 801270e:	d00c      	beq.n	801272a <_ZN3USB11dispatchPktEhht+0xc4>
 8012710:	e013      	b.n	801273a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8012712:	8abb      	ldrh	r3, [r7, #20]
 8012714:	3301      	adds	r3, #1
 8012716:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8012718:	883b      	ldrh	r3, [r7, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00f      	beq.n	801273e <_ZN3USB11dispatchPktEhht+0xd8>
 801271e:	8aba      	ldrh	r2, [r7, #20]
 8012720:	883b      	ldrh	r3, [r7, #0]
 8012722:	429a      	cmp	r2, r3
 8012724:	d10b      	bne.n	801273e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8012726:	7dfb      	ldrb	r3, [r7, #23]
 8012728:	e00e      	b.n	8012748 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801272a:	7dbb      	ldrb	r3, [r7, #22]
 801272c:	3301      	adds	r3, #1
 801272e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8012730:	7dbb      	ldrb	r3, [r7, #22]
 8012732:	2b03      	cmp	r3, #3
 8012734:	d105      	bne.n	8012742 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8012736:	7dfb      	ldrb	r3, [r7, #23]
 8012738:	e006      	b.n	8012748 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801273a:	7dfb      	ldrb	r3, [r7, #23]
 801273c:	e004      	b.n	8012748 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801273e:	bf00      	nop
 8012740:	e7ab      	b.n	801269a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8012742:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8012744:	e7a9      	b.n	801269a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8012746:	7dfb      	ldrb	r3, [r7, #23]
}
 8012748:	4618      	mov	r0, r3
 801274a:	3718      	adds	r7, #24
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8012758:	2300      	movs	r3, #0
 801275a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fdfd 	bl	801335c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 fe12 	bl	801338c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8012768:	4603      	mov	r3, r0
 801276a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801276c:	7b3b      	ldrb	r3, [r7, #12]
 801276e:	2b03      	cmp	r3, #3
 8012770:	d82e      	bhi.n	80127d0 <_ZN3USB4TaskEv+0x80>
 8012772:	a201      	add	r2, pc, #4	; (adr r2, 8012778 <_ZN3USB4TaskEv+0x28>)
 8012774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012778:	08012795 	.word	0x08012795
 801277c:	08012789 	.word	0x08012789
 8012780:	080127b1 	.word	0x080127b1
 8012784:	080127ad 	.word	0x080127ad
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8012788:	4bbf      	ldr	r3, [pc, #764]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 801278a:	2213      	movs	r2, #19
 801278c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801278e:	2300      	movs	r3, #0
 8012790:	73fb      	strb	r3, [r7, #15]
                        break;
 8012792:	e01d      	b.n	80127d0 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8012794:	4bbc      	ldr	r3, [pc, #752]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801279c:	2b10      	cmp	r3, #16
 801279e:	d002      	beq.n	80127a6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80127a0:	4bb9      	ldr	r3, [pc, #740]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 80127a2:	2211      	movs	r2, #17
 80127a4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80127a6:	2300      	movs	r3, #0
 80127a8:	73fb      	strb	r3, [r7, #15]
                        break;
 80127aa:	e011      	b.n	80127d0 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80127ac:	2301      	movs	r3, #1
 80127ae:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80127b0:	4bb5      	ldr	r3, [pc, #724]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80127b8:	2b10      	cmp	r3, #16
 80127ba:	d108      	bne.n	80127ce <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80127bc:	f7f0 f894 	bl	80028e8 <HAL_GetTick>
 80127c0:	4603      	mov	r3, r0
 80127c2:	33c8      	adds	r3, #200	; 0xc8
 80127c4:	4ab1      	ldr	r2, [pc, #708]	; (8012a8c <_ZN3USB4TaskEv+0x33c>)
 80127c6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80127c8:	4baf      	ldr	r3, [pc, #700]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 80127ca:	2220      	movs	r2, #32
 80127cc:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80127ce:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80127d0:	2300      	movs	r3, #0
 80127d2:	73bb      	strb	r3, [r7, #14]
 80127d4:	7bbb      	ldrb	r3, [r7, #14]
 80127d6:	2b0f      	cmp	r3, #15
 80127d8:	d81b      	bhi.n	8012812 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 80127da:	7bba      	ldrb	r2, [r7, #14]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	321e      	adds	r2, #30
 80127e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d010      	beq.n	801280a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 80127e8:	7bba      	ldrb	r2, [r7, #14]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	321e      	adds	r2, #30
 80127ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127f2:	7bba      	ldrb	r2, [r7, #14]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	321e      	adds	r2, #30
 80127f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	330c      	adds	r3, #12
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	4608      	mov	r0, r1
 8012804:	4798      	blx	r3
 8012806:	4603      	mov	r3, r0
 8012808:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801280a:	7bbb      	ldrb	r3, [r7, #14]
 801280c:	3301      	adds	r3, #1
 801280e:	73bb      	strb	r3, [r7, #14]
 8012810:	e7e0      	b.n	80127d4 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8012812:	4b9d      	ldr	r3, [pc, #628]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	2ba0      	cmp	r3, #160	; 0xa0
 8012818:	f000 8123 	beq.w	8012a62 <_ZN3USB4TaskEv+0x312>
 801281c:	2ba0      	cmp	r3, #160	; 0xa0
 801281e:	f300 812f 	bgt.w	8012a80 <_ZN3USB4TaskEv+0x330>
 8012822:	2b90      	cmp	r3, #144	; 0x90
 8012824:	f000 811f 	beq.w	8012a66 <_ZN3USB4TaskEv+0x316>
 8012828:	2b90      	cmp	r3, #144	; 0x90
 801282a:	f300 8129 	bgt.w	8012a80 <_ZN3USB4TaskEv+0x330>
 801282e:	2b80      	cmp	r3, #128	; 0x80
 8012830:	f000 80fe 	beq.w	8012a30 <_ZN3USB4TaskEv+0x2e0>
 8012834:	2b80      	cmp	r3, #128	; 0x80
 8012836:	f300 8123 	bgt.w	8012a80 <_ZN3USB4TaskEv+0x330>
 801283a:	2b51      	cmp	r3, #81	; 0x51
 801283c:	f000 80ea 	beq.w	8012a14 <_ZN3USB4TaskEv+0x2c4>
 8012840:	2b51      	cmp	r3, #81	; 0x51
 8012842:	f300 811d 	bgt.w	8012a80 <_ZN3USB4TaskEv+0x330>
 8012846:	2b40      	cmp	r3, #64	; 0x40
 8012848:	dc6a      	bgt.n	8012920 <_ZN3USB4TaskEv+0x1d0>
 801284a:	2b11      	cmp	r3, #17
 801284c:	f2c0 8118 	blt.w	8012a80 <_ZN3USB4TaskEv+0x330>
 8012850:	3b11      	subs	r3, #17
 8012852:	2b2f      	cmp	r3, #47	; 0x2f
 8012854:	f200 8114 	bhi.w	8012a80 <_ZN3USB4TaskEv+0x330>
 8012858:	a201      	add	r2, pc, #4	; (adr r2, 8012860 <_ZN3USB4TaskEv+0x110>)
 801285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801285e:	bf00      	nop
 8012860:	08012927 	.word	0x08012927
 8012864:	08012a6b 	.word	0x08012a6b
 8012868:	08012a6b 	.word	0x08012a6b
 801286c:	08012a81 	.word	0x08012a81
 8012870:	08012a81 	.word	0x08012a81
 8012874:	08012a81 	.word	0x08012a81
 8012878:	08012a81 	.word	0x08012a81
 801287c:	08012a81 	.word	0x08012a81
 8012880:	08012a81 	.word	0x08012a81
 8012884:	08012a81 	.word	0x08012a81
 8012888:	08012a81 	.word	0x08012a81
 801288c:	08012a81 	.word	0x08012a81
 8012890:	08012a81 	.word	0x08012a81
 8012894:	08012a81 	.word	0x08012a81
 8012898:	08012a81 	.word	0x08012a81
 801289c:	08012977 	.word	0x08012977
 80128a0:	08012a81 	.word	0x08012a81
 80128a4:	08012a81 	.word	0x08012a81
 80128a8:	08012a81 	.word	0x08012a81
 80128ac:	08012a81 	.word	0x08012a81
 80128b0:	08012a81 	.word	0x08012a81
 80128b4:	08012a81 	.word	0x08012a81
 80128b8:	08012a81 	.word	0x08012a81
 80128bc:	08012a81 	.word	0x08012a81
 80128c0:	08012a81 	.word	0x08012a81
 80128c4:	08012a81 	.word	0x08012a81
 80128c8:	08012a81 	.word	0x08012a81
 80128cc:	08012a81 	.word	0x08012a81
 80128d0:	08012a81 	.word	0x08012a81
 80128d4:	08012a81 	.word	0x08012a81
 80128d8:	08012a81 	.word	0x08012a81
 80128dc:	08012993 	.word	0x08012993
 80128e0:	08012a81 	.word	0x08012a81
 80128e4:	08012a81 	.word	0x08012a81
 80128e8:	08012a81 	.word	0x08012a81
 80128ec:	08012a81 	.word	0x08012a81
 80128f0:	08012a81 	.word	0x08012a81
 80128f4:	08012a81 	.word	0x08012a81
 80128f8:	08012a81 	.word	0x08012a81
 80128fc:	08012a81 	.word	0x08012a81
 8012900:	08012a81 	.word	0x08012a81
 8012904:	08012a81 	.word	0x08012a81
 8012908:	08012a81 	.word	0x08012a81
 801290c:	08012a81 	.word	0x08012a81
 8012910:	08012a81 	.word	0x08012a81
 8012914:	08012a81 	.word	0x08012a81
 8012918:	08012a81 	.word	0x08012a81
 801291c:	080129a5 	.word	0x080129a5
 8012920:	2b50      	cmp	r3, #80	; 0x50
 8012922:	d05f      	beq.n	80129e4 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8012924:	e0ac      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        init();
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff fa8e 	bl	8011e48 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801292c:	2300      	movs	r3, #0
 801292e:	737b      	strb	r3, [r7, #13]
 8012930:	7b7b      	ldrb	r3, [r7, #13]
 8012932:	2b0f      	cmp	r3, #15
 8012934:	d81b      	bhi.n	801296e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8012936:	7b7a      	ldrb	r2, [r7, #13]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	321e      	adds	r2, #30
 801293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d010      	beq.n	8012966 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8012944:	7b7a      	ldrb	r2, [r7, #13]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	321e      	adds	r2, #30
 801294a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801294e:	7b7a      	ldrb	r2, [r7, #13]
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	321e      	adds	r2, #30
 8012954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	3308      	adds	r3, #8
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	4608      	mov	r0, r1
 8012960:	4798      	blx	r3
 8012962:	4603      	mov	r3, r0
 8012964:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012966:	7b7b      	ldrb	r3, [r7, #13]
 8012968:	3301      	adds	r3, #1
 801296a:	737b      	strb	r3, [r7, #13]
 801296c:	e7e0      	b.n	8012930 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 801296e:	4b46      	ldr	r3, [pc, #280]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012970:	2212      	movs	r2, #18
 8012972:	701a      	strb	r2, [r3, #0]
                        break;
 8012974:	e084      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8012976:	f7ef ffb7 	bl	80028e8 <HAL_GetTick>
 801297a:	4602      	mov	r2, r0
 801297c:	4b43      	ldr	r3, [pc, #268]	; (8012a8c <_ZN3USB4TaskEv+0x33c>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	1ad3      	subs	r3, r2, r3
 8012982:	43db      	mvns	r3, r3
 8012984:	0fdb      	lsrs	r3, r3, #31
 8012986:	b2db      	uxtb	r3, r3
 8012988:	2b00      	cmp	r3, #0
 801298a:	d070      	beq.n	8012a6e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 801298c:	4b3e      	ldr	r3, [pc, #248]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 801298e:	2230      	movs	r2, #48	; 0x30
 8012990:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012992:	2201      	movs	r2, #1
 8012994:	21e8      	movs	r1, #232	; 0xe8
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f7ef fa96 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801299c:	4b3a      	ldr	r3, [pc, #232]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 801299e:	2240      	movs	r2, #64	; 0x40
 80129a0:	701a      	strb	r2, [r3, #0]
                        break;
 80129a2:	e06d      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 80129a4:	21e8      	movs	r1, #232	; 0xe8
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7ef fae0 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80129ac:	4603      	mov	r3, r0
 80129ae:	f003 0301 	and.w	r3, r3, #1
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	bf0c      	ite	eq
 80129b6:	2301      	moveq	r3, #1
 80129b8:	2300      	movne	r3, #0
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d058      	beq.n	8012a72 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 80129c0:	21d8      	movs	r1, #216	; 0xd8
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ef fad2 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80129c8:	4603      	mov	r3, r0
 80129ca:	f043 0308 	orr.w	r3, r3, #8
 80129ce:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 80129d0:	7b3b      	ldrb	r3, [r7, #12]
 80129d2:	461a      	mov	r2, r3
 80129d4:	21d8      	movs	r1, #216	; 0xd8
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f7ef fa76 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80129dc:	4b2a      	ldr	r3, [pc, #168]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 80129de:	2250      	movs	r2, #80	; 0x50
 80129e0:	701a      	strb	r2, [r3, #0]
                        break;
 80129e2:	e046      	b.n	8012a72 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 80129e4:	21c8      	movs	r1, #200	; 0xc8
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7ef fac0 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80129ec:	4603      	mov	r3, r0
 80129ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	bf14      	ite	ne
 80129f6:	2301      	movne	r3, #1
 80129f8:	2300      	moveq	r3, #0
 80129fa:	b2db      	uxtb	r3, r3
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d03a      	beq.n	8012a76 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8012a00:	4b21      	ldr	r3, [pc, #132]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012a02:	2251      	movs	r2, #81	; 0x51
 8012a04:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8012a06:	f7ef ff6f 	bl	80028e8 <HAL_GetTick>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	3314      	adds	r3, #20
 8012a0e:	4a1f      	ldr	r2, [pc, #124]	; (8012a8c <_ZN3USB4TaskEv+0x33c>)
 8012a10:	6013      	str	r3, [r2, #0]
                        break;
 8012a12:	e030      	b.n	8012a76 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8012a14:	f7ef ff68 	bl	80028e8 <HAL_GetTick>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	4b1c      	ldr	r3, [pc, #112]	; (8012a8c <_ZN3USB4TaskEv+0x33c>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	43db      	mvns	r3, r3
 8012a22:	0fdb      	lsrs	r3, r3, #31
 8012a24:	b2db      	uxtb	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d027      	beq.n	8012a7a <_ZN3USB4TaskEv+0x32a>
 8012a2a:	4b17      	ldr	r3, [pc, #92]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012a2c:	2280      	movs	r2, #128	; 0x80
 8012a2e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8012a30:	7bfb      	ldrb	r3, [r7, #15]
 8012a32:	2200      	movs	r2, #0
 8012a34:	2100      	movs	r1, #0
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f000 f920 	bl	8012c7c <_ZN3USB11ConfiguringEhhb>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8012a40:	7afb      	ldrb	r3, [r7, #11]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d009      	beq.n	8012a5a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8012a46:	7afb      	ldrb	r3, [r7, #11]
 8012a48:	2bd2      	cmp	r3, #210	; 0xd2
 8012a4a:	d018      	beq.n	8012a7e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 8012a4c:	4a10      	ldr	r2, [pc, #64]	; (8012a90 <_ZN3USB4TaskEv+0x340>)
 8012a4e:	7afb      	ldrb	r3, [r7, #11]
 8012a50:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8012a52:	4b0d      	ldr	r3, [pc, #52]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012a54:	22a0      	movs	r2, #160	; 0xa0
 8012a56:	701a      	strb	r2, [r3, #0]
                        break;
 8012a58:	e011      	b.n	8012a7e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 8012a5a:	4b0b      	ldr	r3, [pc, #44]	; (8012a88 <_ZN3USB4TaskEv+0x338>)
 8012a5c:	2290      	movs	r2, #144	; 0x90
 8012a5e:	701a      	strb	r2, [r3, #0]
                        break;
 8012a60:	e00d      	b.n	8012a7e <_ZN3USB4TaskEv+0x32e>
                        break;
 8012a62:	bf00      	nop
 8012a64:	e00c      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        break;
 8012a66:	bf00      	nop
 8012a68:	e00a      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        break;
 8012a6a:	bf00      	nop
 8012a6c:	e008      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8012a6e:	bf00      	nop
 8012a70:	e006      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        break;
 8012a72:	bf00      	nop
 8012a74:	e004      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        break;
 8012a76:	bf00      	nop
 8012a78:	e002      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8012a7a:	bf00      	nop
 8012a7c:	e000      	b.n	8012a80 <_ZN3USB4TaskEv+0x330>
                        break;
 8012a7e:	bf00      	nop
}
 8012a80:	bf00      	nop
 8012a82:	3710      	adds	r7, #16
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	200053e9 	.word	0x200053e9
 8012a8c:	200053ec 	.word	0x200053ec
 8012a90:	200053e8 	.word	0x200053e8

08012a94 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b086      	sub	sp, #24
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
 8012a9c:	4608      	mov	r0, r1
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	70fb      	strb	r3, [r7, #3]
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	70bb      	strb	r3, [r7, #2]
 8012aaa:	4613      	mov	r3, r2
 8012aac:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	617b      	str	r3, [r7, #20]
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2100      	movs	r1, #0
 8012aba:	4618      	mov	r0, r3
 8012abc:	f000 fbc0 	bl	8013240 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012ac0:	6178      	str	r0, [r7, #20]

        if(!p0)
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d101      	bne.n	8012acc <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012ac8:	23d6      	movs	r3, #214	; 0xd6
 8012aca:	e03a      	b.n	8012b42 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d101      	bne.n	8012ad8 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8012ad4:	23d7      	movs	r3, #215	; 0xd7
 8012ad6:	e034      	b.n	8012b42 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	787a      	ldrb	r2, [r7, #1]
 8012adc:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	78bb      	ldrb	r3, [r7, #2]
 8012ae2:	78f9      	ldrb	r1, [r7, #3]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	f000 fc5f 	bl	80133a8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 8012aea:	4603      	mov	r3, r0
 8012aec:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 8012aee:	7bfb      	ldrb	r3, [r7, #15]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d101      	bne.n	8012af8 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8012af4:	23d4      	movs	r3, #212	; 0xd4
 8012af6:	e024      	b.n	8012b42 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	7bfa      	ldrb	r2, [r7, #15]
 8012afc:	4611      	mov	r1, r2
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 fb9e 	bl	8013240 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012b04:	6138      	str	r0, [r7, #16]

        if(!p)
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d101      	bne.n	8012b10 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012b0c:	23d6      	movs	r3, #214	; 0xd6
 8012b0e:	e018      	b.n	8012b42 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	787a      	ldrb	r2, [r7, #1]
 8012b14:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8012b16:	7bfb      	ldrb	r3, [r7, #15]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 fae3 	bl	80130e8 <_ZN3USB7setAddrEhhh>
 8012b22:	4603      	mov	r3, r0
 8012b24:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8012b26:	7bbb      	ldrb	r3, [r7, #14]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d009      	beq.n	8012b40 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	7bfa      	ldrb	r2, [r7, #15]
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f000 fcd0 	bl	80134d8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8012b3c:	7bbb      	ldrb	r3, [r7, #14]
 8012b3e:	e000      	b.n	8012b42 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8012b40:	2300      	movs	r3, #0
};
 8012b42:	4618      	mov	r0, r3
 8012b44:	3718      	adds	r7, #24
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8012b4a:	b590      	push	{r4, r7, lr}
 8012b4c:	b085      	sub	sp, #20
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	4608      	mov	r0, r1
 8012b54:	4611      	mov	r1, r2
 8012b56:	461a      	mov	r2, r3
 8012b58:	4603      	mov	r3, r0
 8012b5a:	70fb      	strb	r3, [r7, #3]
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	70bb      	strb	r3, [r7, #2]
 8012b60:	4613      	mov	r3, r2
 8012b62:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8012b68:	78fa      	ldrb	r2, [r7, #3]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	321e      	adds	r2, #30
 8012b6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b72:	78fa      	ldrb	r2, [r7, #3]
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	321e      	adds	r2, #30
 8012b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	3304      	adds	r3, #4
 8012b80:	681c      	ldr	r4, [r3, #0]
 8012b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b86:	787a      	ldrb	r2, [r7, #1]
 8012b88:	78b9      	ldrb	r1, [r7, #2]
 8012b8a:	47a0      	blx	r4
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8012b90:	7bbb      	ldrb	r3, [r7, #14]
 8012b92:	2be0      	cmp	r3, #224	; 0xe0
 8012b94:	d11c      	bne.n	8012bd0 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8012b96:	78bb      	ldrb	r3, [r7, #2]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d108      	bne.n	8012bae <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	21e8      	movs	r1, #232	; 0xe8
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7ef f991 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012ba6:	2066      	movs	r0, #102	; 0x66
 8012ba8:	f7ef feaa 	bl	8002900 <HAL_Delay>
 8012bac:	e022      	b.n	8012bf4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012bae:	78ba      	ldrb	r2, [r7, #2]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	321e      	adds	r2, #30
 8012bb4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012bb8:	78ba      	ldrb	r2, [r7, #2]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	321e      	adds	r2, #30
 8012bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	3314      	adds	r3, #20
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	787a      	ldrb	r2, [r7, #1]
 8012bca:	4611      	mov	r1, r2
 8012bcc:	4798      	blx	r3
 8012bce:	e011      	b.n	8012bf4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012bd0:	7bbb      	ldrb	r3, [r7, #14]
 8012bd2:	2b0d      	cmp	r3, #13
 8012bd4:	d109      	bne.n	8012bea <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8012bd6:	7bfb      	ldrb	r3, [r7, #15]
 8012bd8:	2b02      	cmp	r3, #2
 8012bda:	d806      	bhi.n	8012bea <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8012bdc:	2064      	movs	r0, #100	; 0x64
 8012bde:	f7ef fe8f 	bl	8002900 <HAL_Delay>
                retries++;
 8012be2:	7bfb      	ldrb	r3, [r7, #15]
 8012be4:	3301      	adds	r3, #1
 8012be6:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012be8:	e7be      	b.n	8012b68 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8012bea:	7bbb      	ldrb	r3, [r7, #14]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8012bf0:	7bbb      	ldrb	r3, [r7, #14]
 8012bf2:	e03f      	b.n	8012c74 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8012bf4:	78fa      	ldrb	r2, [r7, #3]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	321e      	adds	r2, #30
 8012bfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012bfe:	78fa      	ldrb	r2, [r7, #3]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	321e      	adds	r2, #30
 8012c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	681c      	ldr	r4, [r3, #0]
 8012c0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c10:	787a      	ldrb	r2, [r7, #1]
 8012c12:	78b9      	ldrb	r1, [r7, #2]
 8012c14:	47a0      	blx	r4
 8012c16:	4603      	mov	r3, r0
 8012c18:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012c1a:	7bbb      	ldrb	r3, [r7, #14]
 8012c1c:	2b0d      	cmp	r3, #13
 8012c1e:	d109      	bne.n	8012c34 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8012c20:	7bfb      	ldrb	r3, [r7, #15]
 8012c22:	2b02      	cmp	r3, #2
 8012c24:	d806      	bhi.n	8012c34 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8012c26:	2064      	movs	r0, #100	; 0x64
 8012c28:	f7ef fe6a 	bl	8002900 <HAL_Delay>
                retries++;
 8012c2c:	7bfb      	ldrb	r3, [r7, #15]
 8012c2e:	3301      	adds	r3, #1
 8012c30:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012c32:	e799      	b.n	8012b68 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8012c34:	7bbb      	ldrb	r3, [r7, #14]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d01b      	beq.n	8012c72 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8012c3a:	78bb      	ldrb	r3, [r7, #2]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d108      	bne.n	8012c52 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012c40:	2201      	movs	r2, #1
 8012c42:	21e8      	movs	r1, #232	; 0xe8
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f7ef f93f 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012c4a:	2066      	movs	r0, #102	; 0x66
 8012c4c:	f7ef fe58 	bl	8002900 <HAL_Delay>
 8012c50:	e00f      	b.n	8012c72 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012c52:	78ba      	ldrb	r2, [r7, #2]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	321e      	adds	r2, #30
 8012c58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c5c:	78ba      	ldrb	r2, [r7, #2]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	321e      	adds	r2, #30
 8012c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	3314      	adds	r3, #20
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	787a      	ldrb	r2, [r7, #1]
 8012c6e:	4611      	mov	r1, r2
 8012c70:	4798      	blx	r3
                }
        }
        return rcode;
 8012c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd90      	pop	{r4, r7, pc}

08012c7c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b090      	sub	sp, #64	; 0x40
 8012c80:	af02      	add	r7, sp, #8
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	4608      	mov	r0, r1
 8012c86:	4611      	mov	r1, r2
 8012c88:	461a      	mov	r2, r3
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	70fb      	strb	r3, [r7, #3]
 8012c8e:	460b      	mov	r3, r1
 8012c90:	70bb      	strb	r3, [r7, #2]
 8012c92:	4613      	mov	r3, r2
 8012c94:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8012c96:	2300      	movs	r3, #0
 8012c98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8012c9c:	f107 030c 	add.w	r3, r7, #12
 8012ca0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8012caa:	2300      	movs	r3, #0
 8012cac:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8012cae:	2308      	movs	r3, #8
 8012cb0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8012cb2:	7abb      	ldrb	r3, [r7, #10]
 8012cb4:	f36f 0300 	bfc	r3, #0, #1
 8012cb8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8012cba:	7abb      	ldrb	r3, [r7, #10]
 8012cbc:	f36f 0341 	bfc	r3, #1, #1
 8012cc0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8012cc2:	7abb      	ldrb	r3, [r7, #10]
 8012cc4:	220f      	movs	r2, #15
 8012cc6:	f362 0387 	bfi	r3, r2, #2, #6
 8012cca:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7fa fd13 	bl	800d6f8 <_ZN3USB14GetAddressPoolEv>
 8012cd2:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2100      	movs	r1, #0
 8012cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cde:	4798      	blx	r3
 8012ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8012ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012ce8:	23d6      	movs	r3, #214	; 0xd6
 8012cea:	e15c      	b.n	8012fa6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8012cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8012cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf4:	f107 0208 	add.w	r2, r7, #8
 8012cf8:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8012cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfc:	787a      	ldrb	r2, [r7, #1]
 8012cfe:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8012d00:	f107 030c 	add.w	r3, r7, #12
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	2312      	movs	r3, #18
 8012d08:	2200      	movs	r2, #0
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f000 f94e 	bl	8012fae <_ZN3USB11getDevDescrEhhtPh>
 8012d12:	4603      	mov	r3, r0
 8012d14:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8012d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d1c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8012d1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d002      	beq.n	8012d2c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8012d26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012d2a:	e13c      	b.n	8012fa6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8012d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2e:	7a1a      	ldrb	r2, [r3, #8]
 8012d30:	7a5b      	ldrb	r3, [r3, #9]
 8012d32:	021b      	lsls	r3, r3, #8
 8012d34:	4313      	orrs	r3, r2
 8012d36:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8012d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3a:	7a9a      	ldrb	r2, [r3, #10]
 8012d3c:	7adb      	ldrb	r3, [r3, #11]
 8012d3e:	021b      	lsls	r3, r3, #8
 8012d40:	4313      	orrs	r3, r2
 8012d42:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8012d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d46:	791b      	ldrb	r3, [r3, #4]
 8012d48:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8012d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4c:	795b      	ldrb	r3, [r3, #5]
 8012d4e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012d50:	2300      	movs	r3, #0
 8012d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d5a:	2b0f      	cmp	r3, #15
 8012d5c:	f200 8081 	bhi.w	8012e62 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012d60:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	321e      	adds	r2, #30
 8012d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d06e      	beq.n	8012e4e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012d70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	321e      	adds	r2, #30
 8012d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	321e      	adds	r2, #30
 8012d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	3310      	adds	r3, #16
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4608      	mov	r0, r1
 8012d90:	4798      	blx	r3
 8012d92:	4603      	mov	r3, r0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	bf14      	ite	ne
 8012d98:	2301      	movne	r3, #1
 8012d9a:	2300      	moveq	r3, #0
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d157      	bne.n	8012e52 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8012da2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	321e      	adds	r2, #30
 8012daa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012dae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	321e      	adds	r2, #30
 8012db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	3320      	adds	r3, #32
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	7fba      	ldrb	r2, [r7, #30]
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	4798      	blx	r3
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d02b      	beq.n	8012e24 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012dcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	321e      	adds	r2, #30
 8012dd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012dd8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	321e      	adds	r2, #30
 8012de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	3318      	adds	r3, #24
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	8c3a      	ldrh	r2, [r7, #32]
 8012dec:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012dee:	4798      	blx	r3
 8012df0:	4603      	mov	r3, r0
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d114      	bne.n	8012e20 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8012df6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	321e      	adds	r2, #30
 8012dfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012e02:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	321e      	adds	r2, #30
 8012e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	331c      	adds	r3, #28
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	7ffa      	ldrb	r2, [r7, #31]
 8012e16:	4611      	mov	r1, r2
 8012e18:	4798      	blx	r3
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d001      	beq.n	8012e24 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012e20:	2301      	movs	r3, #1
 8012e22:	e000      	b.n	8012e26 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8012e24:	2300      	movs	r3, #0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d014      	beq.n	8012e54 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012e2a:	78b8      	ldrb	r0, [r7, #2]
 8012e2c:	78fa      	ldrb	r2, [r7, #3]
 8012e2e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012e32:	787b      	ldrb	r3, [r7, #1]
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	4603      	mov	r3, r0
 8012e38:	6878      	ldr	r0, [r7, #4]
 8012e3a:	f7ff fe86 	bl	8012b4a <_ZN3USB13AttemptConfigEhhhb>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8012e44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e48:	2bd1      	cmp	r3, #209	; 0xd1
 8012e4a:	d109      	bne.n	8012e60 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8012e4c:	e002      	b.n	8012e54 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012e4e:	bf00      	nop
 8012e50:	e000      	b.n	8012e54 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012e52:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012e54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e58:	3301      	adds	r3, #1
 8012e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e5e:	e77a      	b.n	8012d56 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8012e60:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8012e62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e66:	2b0f      	cmp	r3, #15
 8012e68:	d802      	bhi.n	8012e70 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8012e6a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e6e:	e09a      	b.n	8012fa6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012e70:	2300      	movs	r3, #0
 8012e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e7a:	2b0f      	cmp	r3, #15
 8012e7c:	f200 8088 	bhi.w	8012f90 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8012e80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	321e      	adds	r2, #30
 8012e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d074      	beq.n	8012f7a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012e90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	321e      	adds	r2, #30
 8012e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	321e      	adds	r2, #30
 8012ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	3310      	adds	r3, #16
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	4608      	mov	r0, r1
 8012eb0:	4798      	blx	r3
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	bf14      	ite	ne
 8012eb8:	2301      	movne	r3, #1
 8012eba:	2300      	moveq	r3, #0
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d15d      	bne.n	8012f7e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012ec2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	321e      	adds	r2, #30
 8012eca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ece:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	321e      	adds	r2, #30
 8012ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	3320      	adds	r3, #32
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	7fba      	ldrb	r2, [r7, #30]
 8012ee2:	4611      	mov	r1, r2
 8012ee4:	4798      	blx	r3
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d02b      	beq.n	8012f44 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8012eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	321e      	adds	r2, #30
 8012ef4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ef8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	321e      	adds	r2, #30
 8012f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	3318      	adds	r3, #24
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	8c3a      	ldrh	r2, [r7, #32]
 8012f0c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012f0e:	4798      	blx	r3
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d114      	bne.n	8012f40 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8012f16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	321e      	adds	r2, #30
 8012f1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012f22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	321e      	adds	r2, #30
 8012f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	331c      	adds	r3, #28
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	7ffa      	ldrb	r2, [r7, #31]
 8012f36:	4611      	mov	r1, r2
 8012f38:	4798      	blx	r3
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8012f40:	2301      	movs	r3, #1
 8012f42:	e000      	b.n	8012f46 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8012f44:	2300      	movs	r3, #0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d11b      	bne.n	8012f82 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012f4a:	78b8      	ldrb	r0, [r7, #2]
 8012f4c:	78fa      	ldrb	r2, [r7, #3]
 8012f4e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012f52:	787b      	ldrb	r3, [r7, #1]
 8012f54:	9300      	str	r3, [sp, #0]
 8012f56:	4603      	mov	r3, r0
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fdf6 	bl	8012b4a <_ZN3USB13AttemptConfigEhhhb>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8012f64:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f68:	2bd1      	cmp	r3, #209	; 0xd1
 8012f6a:	d00b      	beq.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x308>
 8012f6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f70:	2bd9      	cmp	r3, #217	; 0xd9
 8012f72:	d007      	beq.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8012f74:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f78:	e015      	b.n	8012fa6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8012f7a:	bf00      	nop
 8012f7c:	e002      	b.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012f7e:	bf00      	nop
 8012f80:	e000      	b.n	8012f84 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012f82:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012f84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f88:	3301      	adds	r3, #1
 8012f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f8e:	e772      	b.n	8012e76 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8012f90:	787b      	ldrb	r3, [r7, #1]
 8012f92:	78ba      	ldrb	r2, [r7, #2]
 8012f94:	78f9      	ldrb	r1, [r7, #3]
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f7ff fd7c 	bl	8012a94 <_ZN3USB17DefaultAddressingEhhb>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8012fa2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	3738      	adds	r7, #56	; 0x38
 8012faa:	46bd      	mov	sp, r7
 8012fac:	bd80      	pop	{r7, pc}

08012fae <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 8012fae:	b580      	push	{r7, lr}
 8012fb0:	b08a      	sub	sp, #40	; 0x28
 8012fb2:	af08      	add	r7, sp, #32
 8012fb4:	6078      	str	r0, [r7, #4]
 8012fb6:	4608      	mov	r0, r1
 8012fb8:	4611      	mov	r1, r2
 8012fba:	461a      	mov	r2, r3
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	70fb      	strb	r3, [r7, #3]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70bb      	strb	r3, [r7, #2]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8012fc8:	78ba      	ldrb	r2, [r7, #2]
 8012fca:	78f9      	ldrb	r1, [r7, #3]
 8012fcc:	2300      	movs	r3, #0
 8012fce:	9307      	str	r3, [sp, #28]
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	9306      	str	r3, [sp, #24]
 8012fd4:	883b      	ldrh	r3, [r7, #0]
 8012fd6:	9305      	str	r3, [sp, #20]
 8012fd8:	883b      	ldrh	r3, [r7, #0]
 8012fda:	9304      	str	r3, [sp, #16]
 8012fdc:	2300      	movs	r3, #0
 8012fde:	9303      	str	r3, [sp, #12]
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	9302      	str	r3, [sp, #8]
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	9301      	str	r3, [sp, #4]
 8012fe8:	2306      	movs	r3, #6
 8012fea:	9300      	str	r3, [sp, #0]
 8012fec:	2380      	movs	r3, #128	; 0x80
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7fe fffd 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8012ff4:	4603      	mov	r3, r0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b08a      	sub	sp, #40	; 0x28
 8013002:	af08      	add	r7, sp, #32
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	4608      	mov	r0, r1
 8013008:	4611      	mov	r1, r2
 801300a:	461a      	mov	r2, r3
 801300c:	4603      	mov	r3, r0
 801300e:	70fb      	strb	r3, [r7, #3]
 8013010:	460b      	mov	r3, r1
 8013012:	70bb      	strb	r3, [r7, #2]
 8013014:	4613      	mov	r3, r2
 8013016:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8013018:	78ba      	ldrb	r2, [r7, #2]
 801301a:	78f9      	ldrb	r1, [r7, #3]
 801301c:	2300      	movs	r3, #0
 801301e:	9307      	str	r3, [sp, #28]
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	9306      	str	r3, [sp, #24]
 8013024:	883b      	ldrh	r3, [r7, #0]
 8013026:	9305      	str	r3, [sp, #20]
 8013028:	883b      	ldrh	r3, [r7, #0]
 801302a:	9304      	str	r3, [sp, #16]
 801302c:	2300      	movs	r3, #0
 801302e:	9303      	str	r3, [sp, #12]
 8013030:	2302      	movs	r3, #2
 8013032:	9302      	str	r3, [sp, #8]
 8013034:	7c3b      	ldrb	r3, [r7, #16]
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	2306      	movs	r3, #6
 801303a:	9300      	str	r3, [sp, #0]
 801303c:	2380      	movs	r3, #128	; 0x80
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f7fe ffd5 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013044:	4603      	mov	r3, r0
}
 8013046:	4618      	mov	r0, r3
 8013048:	3708      	adds	r7, #8
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 801304e:	b580      	push	{r7, lr}
 8013050:	b09e      	sub	sp, #120	; 0x78
 8013052:	af08      	add	r7, sp, #32
 8013054:	6078      	str	r0, [r7, #4]
 8013056:	4608      	mov	r0, r1
 8013058:	4611      	mov	r1, r2
 801305a:	461a      	mov	r2, r3
 801305c:	4603      	mov	r3, r0
 801305e:	70fb      	strb	r3, [r7, #3]
 8013060:	460b      	mov	r3, r1
 8013062:	70bb      	strb	r3, [r7, #2]
 8013064:	4613      	mov	r3, r2
 8013066:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8013068:	2340      	movs	r3, #64	; 0x40
 801306a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 801306e:	f107 030c 	add.w	r3, r7, #12
 8013072:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8013074:	78ba      	ldrb	r2, [r7, #2]
 8013076:	78f9      	ldrb	r1, [r7, #3]
 8013078:	f107 030c 	add.w	r3, r7, #12
 801307c:	9301      	str	r3, [sp, #4]
 801307e:	787b      	ldrb	r3, [r7, #1]
 8013080:	9300      	str	r3, [sp, #0]
 8013082:	2309      	movs	r3, #9
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7ff ffba 	bl	8012ffe <_ZN3USB12getConfDescrEhhthPh>
 801308a:	4603      	mov	r3, r0
 801308c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8013090:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8013094:	2b00      	cmp	r3, #0
 8013096:	d002      	beq.n	801309e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8013098:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801309c:	e020      	b.n	80130e0 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 801309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130a0:	789a      	ldrb	r2, [r3, #2]
 80130a2:	78db      	ldrb	r3, [r3, #3]
 80130a4:	021b      	lsls	r3, r3, #8
 80130a6:	4313      	orrs	r3, r2
 80130a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 80130ac:	78ba      	ldrb	r2, [r7, #2]
 80130ae:	78f9      	ldrb	r1, [r7, #3]
 80130b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80130b2:	9307      	str	r3, [sp, #28]
 80130b4:	f107 030c 	add.w	r3, r7, #12
 80130b8:	9306      	str	r3, [sp, #24]
 80130ba:	2340      	movs	r3, #64	; 0x40
 80130bc:	9305      	str	r3, [sp, #20]
 80130be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80130c2:	9304      	str	r3, [sp, #16]
 80130c4:	2300      	movs	r3, #0
 80130c6:	9303      	str	r3, [sp, #12]
 80130c8:	2302      	movs	r3, #2
 80130ca:	9302      	str	r3, [sp, #8]
 80130cc:	787b      	ldrb	r3, [r7, #1]
 80130ce:	9301      	str	r3, [sp, #4]
 80130d0:	2306      	movs	r3, #6
 80130d2:	9300      	str	r3, [sp, #0]
 80130d4:	2380      	movs	r3, #128	; 0x80
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f7fe ff89 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80130dc:	4603      	mov	r3, r0
 80130de:	bf00      	nop
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3758      	adds	r7, #88	; 0x58
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b08c      	sub	sp, #48	; 0x30
 80130ec:	af08      	add	r7, sp, #32
 80130ee:	6078      	str	r0, [r7, #4]
 80130f0:	4608      	mov	r0, r1
 80130f2:	4611      	mov	r1, r2
 80130f4:	461a      	mov	r2, r3
 80130f6:	4603      	mov	r3, r0
 80130f8:	70fb      	strb	r3, [r7, #3]
 80130fa:	460b      	mov	r3, r1
 80130fc:	70bb      	strb	r3, [r7, #2]
 80130fe:	4613      	mov	r3, r2
 8013100:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8013102:	78ba      	ldrb	r2, [r7, #2]
 8013104:	78f9      	ldrb	r1, [r7, #3]
 8013106:	2300      	movs	r3, #0
 8013108:	9307      	str	r3, [sp, #28]
 801310a:	2300      	movs	r3, #0
 801310c:	9306      	str	r3, [sp, #24]
 801310e:	2300      	movs	r3, #0
 8013110:	9305      	str	r3, [sp, #20]
 8013112:	2300      	movs	r3, #0
 8013114:	9304      	str	r3, [sp, #16]
 8013116:	2300      	movs	r3, #0
 8013118:	9303      	str	r3, [sp, #12]
 801311a:	2300      	movs	r3, #0
 801311c:	9302      	str	r3, [sp, #8]
 801311e:	787b      	ldrb	r3, [r7, #1]
 8013120:	9301      	str	r3, [sp, #4]
 8013122:	2305      	movs	r3, #5
 8013124:	9300      	str	r3, [sp, #0]
 8013126:	2300      	movs	r3, #0
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7fe ff60 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801312e:	4603      	mov	r3, r0
 8013130:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8013132:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013136:	f7ef fbe3 	bl	8002900 <HAL_Delay>
        return rcode;
 801313a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8013144:	b580      	push	{r7, lr}
 8013146:	b08a      	sub	sp, #40	; 0x28
 8013148:	af08      	add	r7, sp, #32
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	4608      	mov	r0, r1
 801314e:	4611      	mov	r1, r2
 8013150:	461a      	mov	r2, r3
 8013152:	4603      	mov	r3, r0
 8013154:	70fb      	strb	r3, [r7, #3]
 8013156:	460b      	mov	r3, r1
 8013158:	70bb      	strb	r3, [r7, #2]
 801315a:	4613      	mov	r3, r2
 801315c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801315e:	78ba      	ldrb	r2, [r7, #2]
 8013160:	78f9      	ldrb	r1, [r7, #3]
 8013162:	2300      	movs	r3, #0
 8013164:	9307      	str	r3, [sp, #28]
 8013166:	2300      	movs	r3, #0
 8013168:	9306      	str	r3, [sp, #24]
 801316a:	2300      	movs	r3, #0
 801316c:	9305      	str	r3, [sp, #20]
 801316e:	2300      	movs	r3, #0
 8013170:	9304      	str	r3, [sp, #16]
 8013172:	2300      	movs	r3, #0
 8013174:	9303      	str	r3, [sp, #12]
 8013176:	2300      	movs	r3, #0
 8013178:	9302      	str	r3, [sp, #8]
 801317a:	787b      	ldrb	r3, [r7, #1]
 801317c:	9301      	str	r3, [sp, #4]
 801317e:	2309      	movs	r3, #9
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	2300      	movs	r3, #0
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7fe ff32 	bl	8011fee <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801318a:	4603      	mov	r3, r0
}
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8013194:	b480      	push	{r7}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
};
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	4618      	mov	r0, r3
 80131a0:	370c      	adds	r7, #12
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr
	...

080131ac <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	4a04      	ldr	r2, [pc, #16]	; (80131c8 <_ZN11AddressPoolC1Ev+0x1c>)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4618      	mov	r0, r3
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr
 80131c8:	08014b88 	.word	0x08014b88

080131cc <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7ff ffe8 	bl	80131ac <_ZN11AddressPoolC1Ev>
 80131dc:	4a17      	ldr	r2, [pc, #92]	; (801323c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	601a      	str	r2, [r3, #0]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 80131e8:	2100      	movs	r1, #0
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 f990 	bl	8013510 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2200      	movs	r2, #0
 80131f4:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	1d1a      	adds	r2, r3, #4
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2200      	movs	r2, #0
 8013202:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2208      	movs	r2, #8
 8013208:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 801320a:	687a      	ldr	r2, [r7, #4]
 801320c:	7993      	ldrb	r3, [r2, #6]
 801320e:	f36f 0300 	bfc	r3, #0, #1
 8013212:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8013214:	687a      	ldr	r2, [r7, #4]
 8013216:	7993      	ldrb	r3, [r2, #6]
 8013218:	f36f 0341 	bfc	r3, #1, #1
 801321c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	7993      	ldrb	r3, [r2, #6]
 8013222:	210f      	movs	r1, #15
 8013224:	f361 0387 	bfi	r3, r1, #2, #6
 8013228:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f000 f9a1 	bl	8013572 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	08014b74 	.word	0x08014b74

08013240 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8013240:	b580      	push	{r7, lr}
 8013242:	b084      	sub	sp, #16
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	460b      	mov	r3, r1
 801324a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 801324c:	78fb      	ldrb	r3, [r7, #3]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d102      	bne.n	8013258 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	3308      	adds	r3, #8
 8013256:	e014      	b.n	8013282 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8013258:	78fb      	ldrb	r3, [r7, #3]
 801325a:	4619      	mov	r1, r3
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 f9a1 	bl	80135a4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013262:	4603      	mov	r3, r0
 8013264:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8013266:	7bfb      	ldrb	r3, [r7, #15]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d008      	beq.n	801327e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f103 0108 	add.w	r1, r3, #8
 8013272:	7bfa      	ldrb	r2, [r7, #15]
 8013274:	4613      	mov	r3, r2
 8013276:	00db      	lsls	r3, r3, #3
 8013278:	1a9b      	subs	r3, r3, r2
 801327a:	440b      	add	r3, r1
 801327c:	e000      	b.n	8013280 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 801327e:	2300      	movs	r3, #0
 8013280:	bf00      	nop
        };
 8013282:	4618      	mov	r0, r3
 8013284:	3710      	adds	r7, #16
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
	...

0801328c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 801328c:	b580      	push	{r7, lr}
 801328e:	b086      	sub	sp, #24
 8013290:	af00      	add	r7, sp, #0
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	607b      	str	r3, [r7, #4]
 8013296:	460b      	mov	r3, r1
 8013298:	72fb      	strb	r3, [r7, #11]
 801329a:	4613      	mov	r3, r2
 801329c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 801329e:	f7ed fb31 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 80132a2:	7afb      	ldrb	r3, [r7, #11]
 80132a4:	f043 0302 	orr.w	r3, r3, #2
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 80132ac:	f107 0117 	add.w	r1, r7, #23
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295
 80132b4:	2201      	movs	r2, #1
 80132b6:	480b      	ldr	r0, [pc, #44]	; (80132e4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80132b8:	f7f2 fd4f 	bl	8005d5a <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80132bc:	7abb      	ldrb	r3, [r7, #10]
 80132be:	b29a      	uxth	r2, r3
 80132c0:	f04f 33ff 	mov.w	r3, #4294967295
 80132c4:	6879      	ldr	r1, [r7, #4]
 80132c6:	4807      	ldr	r0, [pc, #28]	; (80132e4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80132c8:	f7f2 fd47 	bl	8005d5a <HAL_SPI_Transmit>
        data_p += nbytes;
 80132cc:	7abb      	ldrb	r3, [r7, #10]
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	4413      	add	r3, r2
 80132d2:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80132d4:	f7ed fb0a 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 80132d8:	687b      	ldr	r3, [r7, #4]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3718      	adds	r7, #24
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	20000320 	.word	0x20000320

080132e8 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 80132e8:	b480      	push	{r7}
 80132ea:	b083      	sub	sp, #12
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	4603      	mov	r3, r0
 80132f0:	6039      	str	r1, [r7, #0]
 80132f2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 80132f4:	bf00      	nop
 80132f6:	370c      	adds	r7, #12
 80132f8:	46bd      	mov	sp, r7
 80132fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fe:	4770      	bx	lr

08013300 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	607b      	str	r3, [r7, #4]
 801330a:	460b      	mov	r3, r1
 801330c:	72fb      	strb	r3, [r7, #11]
 801330e:	4613      	mov	r3, r2
 8013310:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013312:	f7ed faf7 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8013316:	f107 010b 	add.w	r1, r7, #11
 801331a:	f04f 33ff 	mov.w	r3, #4294967295
 801331e:	2201      	movs	r2, #1
 8013320:	480d      	ldr	r0, [pc, #52]	; (8013358 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013322:	f7f2 fd1a 	bl	8005d5a <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8013326:	7abb      	ldrb	r3, [r7, #10]
 8013328:	461a      	mov	r2, r3
 801332a:	2100      	movs	r1, #0
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 fa91 	bl	8013854 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013332:	7abb      	ldrb	r3, [r7, #10]
 8013334:	b29a      	uxth	r2, r3
 8013336:	f04f 33ff 	mov.w	r3, #4294967295
 801333a:	6879      	ldr	r1, [r7, #4]
 801333c:	4806      	ldr	r0, [pc, #24]	; (8013358 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801333e:	f7f2 fe48 	bl	8005fd2 <HAL_SPI_Receive>
        data_p += nbytes;
 8013342:	7abb      	ldrb	r3, [r7, #10]
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	4413      	add	r3, r2
 8013348:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801334a:	f7ed facf 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 801334e:	687b      	ldr	r3, [r7, #4]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3710      	adds	r7, #16
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	20000320 	.word	0x20000320

0801335c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801335c:	b580      	push	{r7, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8013368:	f7fe fd46 	bl	8011df8 <_ZN2P95IsSetEv>
 801336c:	4603      	mov	r3, r0
 801336e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8013370:	7bbb      	ldrb	r3, [r7, #14]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d104      	bne.n	8013380 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 f937 	bl	80135ea <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 801337c:	4603      	mov	r3, r0
 801337e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8013380:	7bfb      	ldrb	r3, [r7, #15]
}
 8013382:	4618      	mov	r0, r3
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 801338c:	b480      	push	{r7}
 801338e:	b083      	sub	sp, #12
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
                return vbusState;
 8013394:	4b03      	ldr	r3, [pc, #12]	; (80133a4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8013396:	781b      	ldrb	r3, [r3, #0]
        };
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr
 80133a4:	200006ac 	.word	0x200006ac

080133a8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	4608      	mov	r0, r1
 80133b2:	4611      	mov	r1, r2
 80133b4:	461a      	mov	r2, r3
 80133b6:	4603      	mov	r3, r0
 80133b8:	70fb      	strb	r3, [r7, #3]
 80133ba:	460b      	mov	r3, r1
 80133bc:	70bb      	strb	r3, [r7, #2]
 80133be:	4613      	mov	r3, r2
 80133c0:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80133c2:	78fb      	ldrb	r3, [r7, #3]
 80133c4:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80133c6:	7b3b      	ldrb	r3, [r7, #12]
 80133c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80133cc:	b2db      	uxtb	r3, r3
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d102      	bne.n	80133d8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 80133d2:	787b      	ldrb	r3, [r7, #1]
 80133d4:	2b07      	cmp	r3, #7
 80133d6:	d901      	bls.n	80133dc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 80133d8:	2300      	movs	r3, #0
 80133da:	e079      	b.n	80134d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 80133dc:	78bb      	ldrb	r3, [r7, #2]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d005      	beq.n	80133ee <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	79db      	ldrb	r3, [r3, #7]
 80133e6:	2b07      	cmp	r3, #7
 80133e8:	d101      	bne.n	80133ee <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 80133ea:	2300      	movs	r3, #0
 80133ec:	e070      	b.n	80134d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 80133ee:	2100      	movs	r1, #0
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f000 f8d7 	bl	80135a4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80133f6:	4603      	mov	r3, r0
 80133f8:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 80133fa:	7bfb      	ldrb	r3, [r7, #15]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d101      	bne.n	8013404 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8013400:	2300      	movs	r3, #0
 8013402:	e065      	b.n	80134d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8013404:	7b3b      	ldrb	r3, [r7, #12]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d124      	bne.n	8013454 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801340a:	78bb      	ldrb	r3, [r7, #2]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00f      	beq.n	8013430 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8013410:	7bfa      	ldrb	r2, [r7, #15]
 8013412:	6879      	ldr	r1, [r7, #4]
 8013414:	4613      	mov	r3, r2
 8013416:	00db      	lsls	r3, r3, #3
 8013418:	1a9b      	subs	r3, r3, r2
 801341a:	440b      	add	r3, r1
 801341c:	330c      	adds	r3, #12
 801341e:	2241      	movs	r2, #65	; 0x41
 8013420:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	79db      	ldrb	r3, [r3, #7]
 8013426:	3301      	adds	r3, #1
 8013428:	b2da      	uxtb	r2, r3
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	71da      	strb	r2, [r3, #7]
 801342e:	e008      	b.n	8013442 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8013430:	7bfa      	ldrb	r2, [r7, #15]
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	4613      	mov	r3, r2
 8013436:	00db      	lsls	r3, r3, #3
 8013438:	1a9b      	subs	r3, r3, r2
 801343a:	440b      	add	r3, r1
 801343c:	330c      	adds	r3, #12
 801343e:	2201      	movs	r2, #1
 8013440:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8013442:	7bfa      	ldrb	r2, [r7, #15]
 8013444:	6879      	ldr	r1, [r7, #4]
 8013446:	4613      	mov	r3, r2
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	1a9b      	subs	r3, r3, r2
 801344c:	440b      	add	r3, r1
 801344e:	330c      	adds	r3, #12
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	e03d      	b.n	80134d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8013454:	2300      	movs	r3, #0
 8013456:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8013458:	7b3b      	ldrb	r3, [r7, #12]
 801345a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801345e:	b2da      	uxtb	r2, r3
 8013460:	7a3b      	ldrb	r3, [r7, #8]
 8013462:	f362 03c5 	bfi	r3, r2, #3, #3
 8013466:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8013468:	78bb      	ldrb	r3, [r7, #2]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d013      	beq.n	8013496 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801346e:	7a3b      	ldrb	r3, [r7, #8]
 8013470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013474:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	79db      	ldrb	r3, [r3, #7]
 801347a:	3301      	adds	r3, #1
 801347c:	b2da      	uxtb	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	71da      	strb	r2, [r3, #7]
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	79db      	ldrb	r3, [r3, #7]
 8013486:	f003 0307 	and.w	r3, r3, #7
 801348a:	b2da      	uxtb	r2, r3
 801348c:	7a3b      	ldrb	r3, [r7, #8]
 801348e:	f362 0302 	bfi	r3, r2, #0, #3
 8013492:	723b      	strb	r3, [r7, #8]
 8013494:	e00b      	b.n	80134ae <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8013496:	7a3b      	ldrb	r3, [r7, #8]
 8013498:	f36f 1386 	bfc	r3, #6, #1
 801349c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801349e:	787b      	ldrb	r3, [r7, #1]
 80134a0:	f003 0307 	and.w	r3, r3, #7
 80134a4:	b2da      	uxtb	r2, r3
 80134a6:	7a3b      	ldrb	r3, [r7, #8]
 80134a8:	f362 0302 	bfi	r3, r2, #0, #3
 80134ac:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80134ae:	7bfa      	ldrb	r2, [r7, #15]
 80134b0:	6879      	ldr	r1, [r7, #4]
 80134b2:	4613      	mov	r3, r2
 80134b4:	00db      	lsls	r3, r3, #3
 80134b6:	1a9b      	subs	r3, r3, r2
 80134b8:	440b      	add	r3, r1
 80134ba:	330c      	adds	r3, #12
 80134bc:	7a3a      	ldrb	r2, [r7, #8]
 80134be:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80134c0:	7bfa      	ldrb	r2, [r7, #15]
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	4613      	mov	r3, r2
 80134c6:	00db      	lsls	r3, r3, #3
 80134c8:	1a9b      	subs	r3, r3, r2
 80134ca:	440b      	add	r3, r1
 80134cc:	330c      	adds	r3, #12
 80134ce:	781b      	ldrb	r3, [r3, #0]
        };
 80134d0:	4618      	mov	r0, r3
 80134d2:	3710      	adds	r7, #16
 80134d4:	46bd      	mov	sp, r7
 80134d6:	bd80      	pop	{r7, pc}

080134d8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 80134d8:	b580      	push	{r7, lr}
 80134da:	b084      	sub	sp, #16
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	460b      	mov	r3, r1
 80134e2:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 80134e4:	78fb      	ldrb	r3, [r7, #3]
 80134e6:	2b41      	cmp	r3, #65	; 0x41
 80134e8:	d103      	bne.n	80134f2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f000 f841 	bl	8013572 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 80134f0:	e00b      	b.n	801350a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 80134f2:	78fb      	ldrb	r3, [r7, #3]
 80134f4:	4619      	mov	r1, r3
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f000 f854 	bl	80135a4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80134fc:	4603      	mov	r3, r0
 80134fe:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8013500:	7bfb      	ldrb	r3, [r7, #15]
 8013502:	4619      	mov	r1, r3
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f000 f893 	bl	8013630 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801350a:	3710      	adds	r7, #16
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8013510:	b480      	push	{r7}
 8013512:	b083      	sub	sp, #12
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	460b      	mov	r3, r1
 801351a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801351c:	78fa      	ldrb	r2, [r7, #3]
 801351e:	6879      	ldr	r1, [r7, #4]
 8013520:	4613      	mov	r3, r2
 8013522:	00db      	lsls	r3, r3, #3
 8013524:	1a9b      	subs	r3, r3, r2
 8013526:	440b      	add	r3, r1
 8013528:	330c      	adds	r3, #12
 801352a:	2200      	movs	r2, #0
 801352c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801352e:	78fa      	ldrb	r2, [r7, #3]
 8013530:	6879      	ldr	r1, [r7, #4]
 8013532:	4613      	mov	r3, r2
 8013534:	00db      	lsls	r3, r3, #3
 8013536:	1a9b      	subs	r3, r3, r2
 8013538:	440b      	add	r3, r1
 801353a:	330d      	adds	r3, #13
 801353c:	2201      	movs	r2, #1
 801353e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8013540:	78fa      	ldrb	r2, [r7, #3]
 8013542:	6879      	ldr	r1, [r7, #4]
 8013544:	4613      	mov	r3, r2
 8013546:	00db      	lsls	r3, r3, #3
 8013548:	1a9b      	subs	r3, r3, r2
 801354a:	440b      	add	r3, r1
 801354c:	330e      	adds	r3, #14
 801354e:	2200      	movs	r2, #0
 8013550:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8013552:	78fa      	ldrb	r2, [r7, #3]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	1d19      	adds	r1, r3, #4
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	4613      	mov	r3, r2
 801355c:	00db      	lsls	r3, r3, #3
 801355e:	1a9b      	subs	r3, r3, r2
 8013560:	4403      	add	r3, r0
 8013562:	3308      	adds	r3, #8
 8013564:	6019      	str	r1, [r3, #0]
        };
 8013566:	bf00      	nop
 8013568:	370c      	adds	r7, #12
 801356a:	46bd      	mov	sp, r7
 801356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013570:	4770      	bx	lr

08013572 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8013572:	b580      	push	{r7, lr}
 8013574:	b084      	sub	sp, #16
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801357a:	2301      	movs	r3, #1
 801357c:	73fb      	strb	r3, [r7, #15]
 801357e:	7bfb      	ldrb	r3, [r7, #15]
 8013580:	2b0f      	cmp	r3, #15
 8013582:	d808      	bhi.n	8013596 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8013584:	7bfb      	ldrb	r3, [r7, #15]
 8013586:	4619      	mov	r1, r3
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f7ff ffc1 	bl	8013510 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801358e:	7bfb      	ldrb	r3, [r7, #15]
 8013590:	3301      	adds	r3, #1
 8013592:	73fb      	strb	r3, [r7, #15]
 8013594:	e7f3      	b.n	801357e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	71da      	strb	r2, [r3, #7]
        };
 801359c:	bf00      	nop
 801359e:	3710      	adds	r7, #16
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80135a4:	b480      	push	{r7}
 80135a6:	b085      	sub	sp, #20
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	460b      	mov	r3, r1
 80135ae:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80135b0:	2301      	movs	r3, #1
 80135b2:	73fb      	strb	r3, [r7, #15]
 80135b4:	7bfb      	ldrb	r3, [r7, #15]
 80135b6:	2b0f      	cmp	r3, #15
 80135b8:	d810      	bhi.n	80135dc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80135ba:	7bfa      	ldrb	r2, [r7, #15]
 80135bc:	6879      	ldr	r1, [r7, #4]
 80135be:	4613      	mov	r3, r2
 80135c0:	00db      	lsls	r3, r3, #3
 80135c2:	1a9b      	subs	r3, r3, r2
 80135c4:	440b      	add	r3, r1
 80135c6:	330c      	adds	r3, #12
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	78fa      	ldrb	r2, [r7, #3]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d101      	bne.n	80135d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80135d0:	7bfb      	ldrb	r3, [r7, #15]
 80135d2:	e004      	b.n	80135de <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80135d4:	7bfb      	ldrb	r3, [r7, #15]
 80135d6:	3301      	adds	r3, #1
 80135d8:	73fb      	strb	r3, [r7, #15]
 80135da:	e7eb      	b.n	80135b4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 80135dc:	2300      	movs	r3, #0
        };
 80135de:	4618      	mov	r0, r3
 80135e0:	3714      	adds	r7, #20
 80135e2:	46bd      	mov	sp, r7
 80135e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e8:	4770      	bx	lr

080135ea <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 80135ea:	b580      	push	{r7, lr}
 80135ec:	b084      	sub	sp, #16
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 80135f2:	2300      	movs	r3, #0
 80135f4:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 80135f6:	21c8      	movs	r1, #200	; 0xc8
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f7ee fcb7 	bl	8001f6c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80135fe:	4603      	mov	r3, r0
 8013600:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8013602:	7bbb      	ldrb	r3, [r7, #14]
 8013604:	f003 0320 	and.w	r3, r3, #32
 8013608:	2b00      	cmp	r3, #0
 801360a:	d006      	beq.n	801361a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7ee fccf 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8013612:	7bfb      	ldrb	r3, [r7, #15]
 8013614:	f043 0320 	orr.w	r3, r3, #32
 8013618:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801361a:	7bfb      	ldrb	r3, [r7, #15]
 801361c:	461a      	mov	r2, r3
 801361e:	21c8      	movs	r1, #200	; 0xc8
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7ee fc51 	bl	8001ec8 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8013626:	7bfb      	ldrb	r3, [r7, #15]
}
 8013628:	4618      	mov	r0, r3
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8013630:	b580      	push	{r7, lr}
 8013632:	b084      	sub	sp, #16
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801363c:	78fb      	ldrb	r3, [r7, #3]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d03a      	beq.n	80136b8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8013642:	78fa      	ldrb	r2, [r7, #3]
 8013644:	6879      	ldr	r1, [r7, #4]
 8013646:	4613      	mov	r3, r2
 8013648:	00db      	lsls	r3, r3, #3
 801364a:	1a9b      	subs	r3, r3, r2
 801364c:	440b      	add	r3, r1
 801364e:	330c      	adds	r3, #12
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8013654:	7b3b      	ldrb	r3, [r7, #12]
 8013656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801365a:	b2db      	uxtb	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d025      	beq.n	80136ac <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8013660:	2301      	movs	r3, #1
 8013662:	73fb      	strb	r3, [r7, #15]
 8013664:	7bfb      	ldrb	r3, [r7, #15]
 8013666:	461a      	mov	r2, r3
 8013668:	7b39      	ldrb	r1, [r7, #12]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 f828 	bl	80136c0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8013670:	4603      	mov	r3, r0
 8013672:	73fb      	strb	r3, [r7, #15]
 8013674:	7bfb      	ldrb	r3, [r7, #15]
 8013676:	2b00      	cmp	r3, #0
 8013678:	bf14      	ite	ne
 801367a:	2301      	movne	r3, #1
 801367c:	2300      	moveq	r3, #0
 801367e:	b2db      	uxtb	r3, r3
 8013680:	2b00      	cmp	r3, #0
 8013682:	d005      	beq.n	8013690 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8013684:	7bfb      	ldrb	r3, [r7, #15]
 8013686:	4619      	mov	r1, r3
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7ff ffd1 	bl	8013630 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801368e:	e7e9      	b.n	8013664 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	79db      	ldrb	r3, [r3, #7]
 8013694:	7b3a      	ldrb	r2, [r7, #12]
 8013696:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801369a:	b2d2      	uxtb	r2, r2
 801369c:	4293      	cmp	r3, r2
 801369e:	d105      	bne.n	80136ac <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	79db      	ldrb	r3, [r3, #7]
 80136a4:	3b01      	subs	r3, #1
 80136a6:	b2da      	uxtb	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80136ac:	78fb      	ldrb	r3, [r7, #3]
 80136ae:	4619      	mov	r1, r3
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff ff2d 	bl	8013510 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80136b6:	e000      	b.n	80136ba <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80136b8:	bf00      	nop
        }
 80136ba:	3710      	adds	r7, #16
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}

080136c0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80136c0:	b480      	push	{r7}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	7039      	strb	r1, [r7, #0]
 80136ca:	4613      	mov	r3, r2
 80136cc:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80136ce:	78fb      	ldrb	r3, [r7, #3]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d004      	beq.n	80136de <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80136d4:	78fb      	ldrb	r3, [r7, #3]
 80136d6:	2b0f      	cmp	r3, #15
 80136d8:	d801      	bhi.n	80136de <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80136da:	78fb      	ldrb	r3, [r7, #3]
 80136dc:	e000      	b.n	80136e0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 80136de:	2301      	movs	r3, #1
 80136e0:	73fb      	strb	r3, [r7, #15]
 80136e2:	7bfb      	ldrb	r3, [r7, #15]
 80136e4:	2b0f      	cmp	r3, #15
 80136e6:	d816      	bhi.n	8013716 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 80136e8:	7bfa      	ldrb	r2, [r7, #15]
 80136ea:	6879      	ldr	r1, [r7, #4]
 80136ec:	4613      	mov	r3, r2
 80136ee:	00db      	lsls	r3, r3, #3
 80136f0:	1a9b      	subs	r3, r3, r2
 80136f2:	440b      	add	r3, r1
 80136f4:	3308      	adds	r3, #8
 80136f6:	791b      	ldrb	r3, [r3, #4]
 80136f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 80136fc:	b2da      	uxtb	r2, r3
 80136fe:	783b      	ldrb	r3, [r7, #0]
 8013700:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013704:	b2db      	uxtb	r3, r3
 8013706:	429a      	cmp	r2, r3
 8013708:	d101      	bne.n	801370e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801370a:	7bfb      	ldrb	r3, [r7, #15]
 801370c:	e004      	b.n	8013718 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801370e:	7bfb      	ldrb	r3, [r7, #15]
 8013710:	3301      	adds	r3, #1
 8013712:	73fb      	strb	r3, [r7, #15]
 8013714:	e7e5      	b.n	80136e2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8013716:	2300      	movs	r3, #0
        };
 8013718:	4618      	mov	r0, r3
 801371a:	3714      	adds	r7, #20
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr

08013724 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8013724:	b480      	push	{r7}
 8013726:	b085      	sub	sp, #20
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d101      	bne.n	801373c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8013738:	2300      	movs	r3, #0
 801373a:	e031      	b.n	80137a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	791b      	ldrb	r3, [r3, #4]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d022      	beq.n	801378a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	881b      	ldrh	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d01e      	beq.n	801378a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	681a      	ldr	r2, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	68f9      	ldr	r1, [r7, #12]
 8013756:	7949      	ldrb	r1, [r1, #5]
 8013758:	4608      	mov	r0, r1
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	7909      	ldrb	r1, [r1, #4]
 801375e:	1a41      	subs	r1, r0, r1
 8013760:	440b      	add	r3, r1
 8013762:	7812      	ldrb	r2, [r2, #0]
 8013764:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	791b      	ldrb	r3, [r3, #4]
 801376a:	3b01      	subs	r3, #1
 801376c:	b2da      	uxtb	r2, r3
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	711a      	strb	r2, [r3, #4]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	3b01      	subs	r3, #1
 8013778:	b29a      	uxth	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	801a      	strh	r2, [r3, #0]
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	1c5a      	adds	r2, r3, #1
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	601a      	str	r2, [r3, #0]
 8013788:	e7d8      	b.n	801373c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	791b      	ldrb	r3, [r3, #4]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d001      	beq.n	8013796 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8013792:	2300      	movs	r3, #0
 8013794:	e004      	b.n	80137a0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	795a      	ldrb	r2, [r3, #5]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	711a      	strb	r2, [r3, #4]
        return true;
 801379e:	2301      	movs	r3, #1
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3714      	adds	r7, #20
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <__cxa_pure_virtual>:
 80137ac:	b508      	push	{r3, lr}
 80137ae:	f000 f80d 	bl	80137cc <_ZSt9terminatev>

080137b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80137b2:	b508      	push	{r3, lr}
 80137b4:	4780      	blx	r0
 80137b6:	f000 f80e 	bl	80137d6 <abort>
	...

080137bc <_ZSt13get_terminatev>:
 80137bc:	4b02      	ldr	r3, [pc, #8]	; (80137c8 <_ZSt13get_terminatev+0xc>)
 80137be:	6818      	ldr	r0, [r3, #0]
 80137c0:	f3bf 8f5b 	dmb	ish
 80137c4:	4770      	bx	lr
 80137c6:	bf00      	nop
 80137c8:	2000011c 	.word	0x2000011c

080137cc <_ZSt9terminatev>:
 80137cc:	b508      	push	{r3, lr}
 80137ce:	f7ff fff5 	bl	80137bc <_ZSt13get_terminatev>
 80137d2:	f7ff ffee 	bl	80137b2 <_ZN10__cxxabiv111__terminateEPFvvE>

080137d6 <abort>:
 80137d6:	b508      	push	{r3, lr}
 80137d8:	2006      	movs	r0, #6
 80137da:	f000 f86b 	bl	80138b4 <raise>
 80137de:	2001      	movs	r0, #1
 80137e0:	f7ee fe5e 	bl	80024a0 <_exit>

080137e4 <__errno>:
 80137e4:	4b01      	ldr	r3, [pc, #4]	; (80137ec <__errno+0x8>)
 80137e6:	6818      	ldr	r0, [r3, #0]
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	20000120 	.word	0x20000120

080137f0 <__libc_init_array>:
 80137f0:	b570      	push	{r4, r5, r6, lr}
 80137f2:	4d0d      	ldr	r5, [pc, #52]	; (8013828 <__libc_init_array+0x38>)
 80137f4:	4c0d      	ldr	r4, [pc, #52]	; (801382c <__libc_init_array+0x3c>)
 80137f6:	1b64      	subs	r4, r4, r5
 80137f8:	10a4      	asrs	r4, r4, #2
 80137fa:	2600      	movs	r6, #0
 80137fc:	42a6      	cmp	r6, r4
 80137fe:	d109      	bne.n	8013814 <__libc_init_array+0x24>
 8013800:	4d0b      	ldr	r5, [pc, #44]	; (8013830 <__libc_init_array+0x40>)
 8013802:	4c0c      	ldr	r4, [pc, #48]	; (8013834 <__libc_init_array+0x44>)
 8013804:	f000 f884 	bl	8013910 <_init>
 8013808:	1b64      	subs	r4, r4, r5
 801380a:	10a4      	asrs	r4, r4, #2
 801380c:	2600      	movs	r6, #0
 801380e:	42a6      	cmp	r6, r4
 8013810:	d105      	bne.n	801381e <__libc_init_array+0x2e>
 8013812:	bd70      	pop	{r4, r5, r6, pc}
 8013814:	f855 3b04 	ldr.w	r3, [r5], #4
 8013818:	4798      	blx	r3
 801381a:	3601      	adds	r6, #1
 801381c:	e7ee      	b.n	80137fc <__libc_init_array+0xc>
 801381e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013822:	4798      	blx	r3
 8013824:	3601      	adds	r6, #1
 8013826:	e7f2      	b.n	801380e <__libc_init_array+0x1e>
 8013828:	08014bfc 	.word	0x08014bfc
 801382c:	08014bfc 	.word	0x08014bfc
 8013830:	08014bfc 	.word	0x08014bfc
 8013834:	08014c04 	.word	0x08014c04

08013838 <memcpy>:
 8013838:	440a      	add	r2, r1
 801383a:	4291      	cmp	r1, r2
 801383c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013840:	d100      	bne.n	8013844 <memcpy+0xc>
 8013842:	4770      	bx	lr
 8013844:	b510      	push	{r4, lr}
 8013846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801384a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801384e:	4291      	cmp	r1, r2
 8013850:	d1f9      	bne.n	8013846 <memcpy+0xe>
 8013852:	bd10      	pop	{r4, pc}

08013854 <memset>:
 8013854:	4402      	add	r2, r0
 8013856:	4603      	mov	r3, r0
 8013858:	4293      	cmp	r3, r2
 801385a:	d100      	bne.n	801385e <memset+0xa>
 801385c:	4770      	bx	lr
 801385e:	f803 1b01 	strb.w	r1, [r3], #1
 8013862:	e7f9      	b.n	8013858 <memset+0x4>

08013864 <_raise_r>:
 8013864:	291f      	cmp	r1, #31
 8013866:	b538      	push	{r3, r4, r5, lr}
 8013868:	4604      	mov	r4, r0
 801386a:	460d      	mov	r5, r1
 801386c:	d904      	bls.n	8013878 <_raise_r+0x14>
 801386e:	2316      	movs	r3, #22
 8013870:	6003      	str	r3, [r0, #0]
 8013872:	f04f 30ff 	mov.w	r0, #4294967295
 8013876:	bd38      	pop	{r3, r4, r5, pc}
 8013878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801387a:	b112      	cbz	r2, 8013882 <_raise_r+0x1e>
 801387c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013880:	b94b      	cbnz	r3, 8013896 <_raise_r+0x32>
 8013882:	4620      	mov	r0, r4
 8013884:	f000 f830 	bl	80138e8 <_getpid_r>
 8013888:	462a      	mov	r2, r5
 801388a:	4601      	mov	r1, r0
 801388c:	4620      	mov	r0, r4
 801388e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013892:	f000 b817 	b.w	80138c4 <_kill_r>
 8013896:	2b01      	cmp	r3, #1
 8013898:	d00a      	beq.n	80138b0 <_raise_r+0x4c>
 801389a:	1c59      	adds	r1, r3, #1
 801389c:	d103      	bne.n	80138a6 <_raise_r+0x42>
 801389e:	2316      	movs	r3, #22
 80138a0:	6003      	str	r3, [r0, #0]
 80138a2:	2001      	movs	r0, #1
 80138a4:	e7e7      	b.n	8013876 <_raise_r+0x12>
 80138a6:	2400      	movs	r4, #0
 80138a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80138ac:	4628      	mov	r0, r5
 80138ae:	4798      	blx	r3
 80138b0:	2000      	movs	r0, #0
 80138b2:	e7e0      	b.n	8013876 <_raise_r+0x12>

080138b4 <raise>:
 80138b4:	4b02      	ldr	r3, [pc, #8]	; (80138c0 <raise+0xc>)
 80138b6:	4601      	mov	r1, r0
 80138b8:	6818      	ldr	r0, [r3, #0]
 80138ba:	f7ff bfd3 	b.w	8013864 <_raise_r>
 80138be:	bf00      	nop
 80138c0:	20000120 	.word	0x20000120

080138c4 <_kill_r>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	4d07      	ldr	r5, [pc, #28]	; (80138e4 <_kill_r+0x20>)
 80138c8:	2300      	movs	r3, #0
 80138ca:	4604      	mov	r4, r0
 80138cc:	4608      	mov	r0, r1
 80138ce:	4611      	mov	r1, r2
 80138d0:	602b      	str	r3, [r5, #0]
 80138d2:	f7ee fdd5 	bl	8002480 <_kill>
 80138d6:	1c43      	adds	r3, r0, #1
 80138d8:	d102      	bne.n	80138e0 <_kill_r+0x1c>
 80138da:	682b      	ldr	r3, [r5, #0]
 80138dc:	b103      	cbz	r3, 80138e0 <_kill_r+0x1c>
 80138de:	6023      	str	r3, [r4, #0]
 80138e0:	bd38      	pop	{r3, r4, r5, pc}
 80138e2:	bf00      	nop
 80138e4:	20005d54 	.word	0x20005d54

080138e8 <_getpid_r>:
 80138e8:	f7ee bdc2 	b.w	8002470 <_getpid>

080138ec <strncmp>:
 80138ec:	b510      	push	{r4, lr}
 80138ee:	b16a      	cbz	r2, 801390c <strncmp+0x20>
 80138f0:	3901      	subs	r1, #1
 80138f2:	1884      	adds	r4, r0, r2
 80138f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80138f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80138fc:	4293      	cmp	r3, r2
 80138fe:	d103      	bne.n	8013908 <strncmp+0x1c>
 8013900:	42a0      	cmp	r0, r4
 8013902:	d001      	beq.n	8013908 <strncmp+0x1c>
 8013904:	2b00      	cmp	r3, #0
 8013906:	d1f5      	bne.n	80138f4 <strncmp+0x8>
 8013908:	1a98      	subs	r0, r3, r2
 801390a:	bd10      	pop	{r4, pc}
 801390c:	4610      	mov	r0, r2
 801390e:	e7fc      	b.n	801390a <strncmp+0x1e>

08013910 <_init>:
 8013910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013912:	bf00      	nop
 8013914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013916:	bc08      	pop	{r3}
 8013918:	469e      	mov	lr, r3
 801391a:	4770      	bx	lr

0801391c <_fini>:
 801391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801391e:	bf00      	nop
 8013920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013922:	bc08      	pop	{r3}
 8013924:	469e      	mov	lr, r3
 8013926:	4770      	bx	lr
