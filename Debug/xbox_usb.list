
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011ac  080103bc  080103bc  000203bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011568  08011568  000301b0  2**0
                  CONTENTS
  4 .ARM          00000008  08011568  08011568  00021568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011570  08011570  000301b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011570  08011570  00021570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011578  08011578  00021578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  0801157c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bcc  200001b0  0801172c  000301b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d7c  0801172c  00035d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006587f  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097d3  00000000  00000000  00095a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007bfc  00000000  00000000  0009f232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002680  00000000  00000000  000a6e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002928  00000000  00000000  000a94b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d192  00000000  00000000  000abdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032955  00000000  00000000  000d8f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa67c  00000000  00000000  0010b8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00205f3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a258  00000000  00000000  00205f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080103a4 	.word	0x080103a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	080103a4 	.word	0x080103a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8000518:	b161      	cbz	r1, 8000534 <_ZN5Print5printEPKc+0x1c>
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 800051a:	b538      	push	{r3, r4, r5, lr}
 800051c:	4604      	mov	r4, r0
 800051e:	460d      	mov	r5, r1
      return write((const uint8_t *)str, strlen(str));
 8000520:	4608      	mov	r0, r1
 8000522:	f7ff fe75 	bl	8000210 <strlen>
 8000526:	4602      	mov	r2, r0
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	4629      	mov	r1, r5
 800052e:	4620      	mov	r0, r4
 8000530:	4798      	blx	r3
  return write(str);
}
 8000532:	bd38      	pop	{r3, r4, r5, pc}
      if (str == NULL) return 0;
 8000534:	2000      	movs	r0, #0
 8000536:	4770      	bx	lr

08000538 <_ZN5Print5printEPK19__FlashStringHelper>:
{
 8000538:	b508      	push	{r3, lr}
  return print(reinterpret_cast<const char *>(ifsh));
 800053a:	f7ff ffed 	bl	8000518 <_ZN5Print5printEPKc>
}
 800053e:	bd08      	pop	{r3, pc}

08000540 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 8000540:	b508      	push	{r3, lr}
  return write(c);
 8000542:	6803      	ldr	r3, [r0, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4798      	blx	r3
}
 8000548:	bd08      	pop	{r3, pc}

0800054a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 800054a:	b570      	push	{r4, r5, r6, lr}
 800054c:	b08a      	sub	sp, #40	; 0x28
 800054e:	4604      	mov	r4, r0
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8000550:	2300      	movs	r3, #0
 8000552:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8000556:	2a01      	cmp	r2, #1
 8000558:	bf98      	it	ls
 800055a:	220a      	movls	r2, #10
 800055c:	ad09      	add	r5, sp, #36	; 0x24

  do {
    unsigned long m = n;
    n /= base;
 800055e:	4616      	mov	r6, r2
 8000560:	4608      	mov	r0, r1
 8000562:	fbb1 f1f2 	udiv	r1, r1, r2
    char c = m - base * n;
 8000566:	fb01 0312 	mls	r3, r1, r2, r0
 800056a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 800056e:	2b09      	cmp	r3, #9
 8000570:	bf94      	ite	ls
 8000572:	3330      	addls	r3, #48	; 0x30
 8000574:	3337      	addhi	r3, #55	; 0x37
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f805 3d01 	strb.w	r3, [r5, #-1]!
  } while(n);
 800057c:	4286      	cmp	r6, r0
 800057e:	d9ef      	bls.n	8000560 <_ZN5Print11printNumberEmh+0x16>
      return write((const uint8_t *)str, strlen(str));
 8000580:	4628      	mov	r0, r5
 8000582:	f7ff fe45 	bl	8000210 <strlen>
 8000586:	4602      	mov	r2, r0
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	4629      	mov	r1, r5
 800058e:	4620      	mov	r0, r4
 8000590:	4798      	blx	r3

  return write(str);
}
 8000592:	b00a      	add	sp, #40	; 0x28
 8000594:	bd70      	pop	{r4, r5, r6, pc}

08000596 <_ZN5Print5printEli>:
{
 8000596:	b570      	push	{r4, r5, r6, lr}
 8000598:	4604      	mov	r4, r0
 800059a:	460d      	mov	r5, r1
  if (base == 0) {
 800059c:	b922      	cbnz	r2, 80005a8 <_ZN5Print5printEli+0x12>
    return write(n);
 800059e:	6803      	ldr	r3, [r0, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	b2c9      	uxtb	r1, r1
 80005a4:	4798      	blx	r3
}
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
  } else if (base == 10) {
 80005a8:	2a0a      	cmp	r2, #10
 80005aa:	d110      	bne.n	80005ce <_ZN5Print5printEli+0x38>
    if (n < 0) {
 80005ac:	2900      	cmp	r1, #0
 80005ae:	db03      	blt.n	80005b8 <_ZN5Print5printEli+0x22>
    return printNumber(n, 10);
 80005b0:	220a      	movs	r2, #10
 80005b2:	f7ff ffca 	bl	800054a <_ZN5Print11printNumberEmh>
 80005b6:	e7f6      	b.n	80005a6 <_ZN5Print5printEli+0x10>
      int t = print('-');
 80005b8:	212d      	movs	r1, #45	; 0x2d
 80005ba:	f7ff ffc1 	bl	8000540 <_ZN5Print5printEc>
 80005be:	4606      	mov	r6, r0
      return printNumber(n, 10) + t;
 80005c0:	220a      	movs	r2, #10
 80005c2:	4269      	negs	r1, r5
 80005c4:	4620      	mov	r0, r4
 80005c6:	f7ff ffc0 	bl	800054a <_ZN5Print11printNumberEmh>
 80005ca:	4430      	add	r0, r6
 80005cc:	e7eb      	b.n	80005a6 <_ZN5Print5printEli+0x10>
    return printNumber(n, base);
 80005ce:	b2d2      	uxtb	r2, r2
 80005d0:	f7ff ffbb 	bl	800054a <_ZN5Print11printNumberEmh>
 80005d4:	e7e7      	b.n	80005a6 <_ZN5Print5printEli+0x10>

080005d6 <_ZN5Print5printEii>:
{
 80005d6:	b508      	push	{r3, lr}
  return print((long) n, base);
 80005d8:	f7ff ffdd 	bl	8000596 <_ZN5Print5printEli>
}
 80005dc:	bd08      	pop	{r3, pc}

080005de <_ZN5Print5printEmi>:
{
 80005de:	b508      	push	{r3, lr}
  if (base == 0) return write(n);
 80005e0:	b922      	cbnz	r2, 80005ec <_ZN5Print5printEmi+0xe>
 80005e2:	6803      	ldr	r3, [r0, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	4798      	blx	r3
}
 80005ea:	bd08      	pop	{r3, pc}
  else return printNumber(n, base);
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	f7ff ffac 	bl	800054a <_ZN5Print11printNumberEmh>
 80005f2:	e7fa      	b.n	80005ea <_ZN5Print5printEmi+0xc>

080005f4 <_ZN5Print5printEhi>:
{
 80005f4:	b508      	push	{r3, lr}
  return print((unsigned long) b, base);
 80005f6:	f7ff fff2 	bl	80005de <_ZN5Print5printEmi>
}
 80005fa:	bd08      	pop	{r3, pc}

080005fc <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 80005fc:	b500      	push	{lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	f88d 1007 	strb.w	r1, [sp, #7]
	return write(&data, 1);
 8000604:	6803      	ldr	r3, [r0, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2201      	movs	r2, #1
 800060a:	f10d 0107 	add.w	r1, sp, #7
 800060e:	4798      	blx	r3
}
 8000610:	b003      	add	sp, #12
 8000612:	f85d fb04 	ldr.w	pc, [sp], #4

08000616 <_ZN11SerialClass9availableEv>:
	return data;
}

int SerialClass::available() {
	return -1;
}
 8000616:	f04f 30ff 	mov.w	r0, #4294967295
 800061a:	4770      	bx	lr

0800061c <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
	return -1;
}
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr

08000622 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
}
 8000622:	4770      	bx	lr

08000624 <_ZN11SerialClass5writeEPKhj>:
size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8000624:	b510      	push	{r4, lr}
 8000626:	4614      	mov	r4, r2
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	b292      	uxth	r2, r2
 800062e:	6900      	ldr	r0, [r0, #16]
 8000630:	f005 fe29 	bl	8006286 <HAL_UART_Transmit>
}
 8000634:	4620      	mov	r0, r4
 8000636:	bd10      	pop	{r4, pc}

08000638 <_ZN11SerialClass4readEv>:
int SerialClass::read() {
 8000638:	b500      	push	{lr}
 800063a:	b083      	sub	sp, #12
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2201      	movs	r2, #1
 8000642:	f10d 0107 	add.w	r1, sp, #7
 8000646:	6900      	ldr	r0, [r0, #16]
 8000648:	f005 feaf 	bl	80063aa <HAL_UART_Receive>
}
 800064c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000650:	b003      	add	sp, #12
 8000652:	f85d fb04 	ldr.w	pc, [sp], #4

08000656 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000656:	b510      	push	{r4, lr}
 8000658:	4604      	mov	r4, r0
                if(pFuncOnInit)
 800065a:	6843      	ldr	r3, [r0, #4]
 800065c:	b103      	cbz	r3, 8000660 <_ZN5BTHID6onInitEv+0xa>
                        pFuncOnInit(); // Call the user function
 800065e:	4798      	blx	r3
                OnInitBTHID();
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	4620      	mov	r0, r4
 8000666:	4798      	blx	r3
        };
 8000668:	bd10      	pop	{r4, pc}

0800066a <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
                return;
        }
 800066a:	4770      	bx	lr

0800066c <_Z19StartControllerJoinPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
{
 800066c:	b580      	push	{r7, lr}
        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
                return BTHID::connected;
 800066e:	4c10      	ldr	r4, [pc, #64]	; (80006b0 <_Z19StartControllerJoinPv+0x44>)
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for(;;)
  {
	if(PS4.connected() && !rumble_once) {
 8000670:	4f10      	ldr	r7, [pc, #64]	; (80006b4 <_Z19StartControllerJoinPv+0x48>)
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
                ps4Output.bigRumble = bigRumble;
                ps4Output.smallRumble = smallRumble;
                ps4Output.reportChanged = true;
 8000672:	2501      	movs	r5, #1
 8000674:	e002      	b.n	800067c <_Z19StartControllerJoinPv+0x10>
	  PS4.setRumbleOn(RumbleLow);
	  osDelay(500);
	  PS4.setRumbleOff();
	  rumble_once = 1;
	}
	osDelay(1);
 8000676:	4628      	mov	r0, r5
 8000678:	f009 f96a 	bl	8009950 <osDelay>
	if(PS4.connected() && !rumble_once) {
 800067c:	7d63      	ldrb	r3, [r4, #21]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <_Z19StartControllerJoinPv+0xa>
 8000682:	783b      	ldrb	r3, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f6      	bne.n	8000676 <_Z19StartControllerJoinPv+0xa>
                ps4Output.bigRumble = bigRumble;
 8000688:	2600      	movs	r6, #0
 800068a:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
                ps4Output.smallRumble = smallRumble;
 800068e:	23ff      	movs	r3, #255	; 0xff
 8000690:	f884 30bf 	strb.w	r3, [r4, #191]	; 0xbf
                ps4Output.reportChanged = true;
 8000694:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
	  osDelay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069c:	f009 f958 	bl	8009950 <osDelay>
                ps4Output.bigRumble = bigRumble;
 80006a0:	f884 60be 	strb.w	r6, [r4, #190]	; 0xbe
                ps4Output.smallRumble = smallRumble;
 80006a4:	f884 60bf 	strb.w	r6, [r4, #191]	; 0xbf
                ps4Output.reportChanged = true;
 80006a8:	f884 50c5 	strb.w	r5, [r4, #197]	; 0xc5
	  rumble_once = 1;
 80006ac:	703d      	strb	r5, [r7, #0]
 80006ae:	e7e2      	b.n	8000676 <_Z19StartControllerJoinPv+0xa>
 80006b0:	20000314 	.word	0x20000314
 80006b4:	200006ae 	.word	0x200006ae

080006b8 <_Z12StartSendUSBPv>:
{
 80006b8:	b508      	push	{r3, lr}
	MX_USB_DEVICE_Init();
 80006ba:	f00b fdbf 	bl	800c23c <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 80006be:	4e06      	ldr	r6, [pc, #24]	; (80006d8 <_Z12StartSendUSBPv+0x20>)
 80006c0:	4d06      	ldr	r5, [pc, #24]	; (80006dc <_Z12StartSendUSBPv+0x24>)
 80006c2:	2414      	movs	r4, #20
 80006c4:	4622      	mov	r2, r4
 80006c6:	4631      	mov	r1, r6
 80006c8:	4628      	mov	r0, r5
 80006ca:	f007 fdf1 	bl	80082b0 <USBD_HID_SendReport>
    osDelay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f009 f93e 	bl	8009950 <osDelay>
  for(;;)
 80006d4:	e7f6      	b.n	80006c4 <_Z12StartSendUSBPv+0xc>
 80006d6:	bf00      	nop
 80006d8:	200006bc 	.word	0x200006bc
 80006dc:	200054a0 	.word	0x200054a0

080006e0 <_Z14StartUpdateLCDPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */
  ssd1306_Fill(Black_);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f001 f9de 	bl	8001aa4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80006e8:	f001 fa00 	bl	8001aec <ssd1306_UpdateScreen>
  for(;;)
  {
    if(display_run_once == 0) {
 80006ec:	4d3e      	ldr	r5, [pc, #248]	; (80007e8 <_Z14StartUpdateLCDPv+0x108>)
      ssd1306_Fill(Black_);
      ssd1306_UpdateScreen();
      if(display_no == 0) {
 80006ee:	4e3f      	ldr	r6, [pc, #252]	; (80007ec <_Z14StartUpdateLCDPv+0x10c>)
        }
        ssd1306_SetCursor(2,26);
        ssd1306_WriteString("Paired!", Font_11x18, White_);
        ssd1306_UpdateScreen();
      }
      display_run_once = 1;
 80006f0:	2401      	movs	r4, #1
 80006f2:	e01d      	b.n	8000730 <_Z14StartUpdateLCDPv+0x50>
        ssd1306_SetCursor(25,0);
 80006f4:	2100      	movs	r1, #0
 80006f6:	2019      	movs	r0, #25
 80006f8:	f001 fb2e 	bl	8001d58 <ssd1306_SetCursor>
        ssd1306_WriteString("Status:", Font_11x18, White_);
 80006fc:	4a3c      	ldr	r2, [pc, #240]	; (80007f0 <_Z14StartUpdateLCDPv+0x110>)
 80006fe:	4623      	mov	r3, r4
 8000700:	ca06      	ldmia	r2, {r1, r2}
 8000702:	483c      	ldr	r0, [pc, #240]	; (80007f4 <_Z14StartUpdateLCDPv+0x114>)
 8000704:	f001 fb02 	bl	8001d0c <ssd1306_WriteString>
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <_Z14StartUpdateLCDPv+0x118>)
        if(PS4.connected() == 0) {
 800070a:	7d5b      	ldrb	r3, [r3, #21]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d152      	bne.n	80007b6 <_Z14StartUpdateLCDPv+0xd6>
          ssd1306_SetCursor(2, 26);
 8000710:	211a      	movs	r1, #26
 8000712:	2002      	movs	r0, #2
 8000714:	f001 fb20 	bl	8001d58 <ssd1306_SetCursor>
          ssd1306_WriteString("Not Paired", Font_11x18, White_);
 8000718:	4a35      	ldr	r2, [pc, #212]	; (80007f0 <_Z14StartUpdateLCDPv+0x110>)
 800071a:	4623      	mov	r3, r4
 800071c:	ca06      	ldmia	r2, {r1, r2}
 800071e:	4837      	ldr	r0, [pc, #220]	; (80007fc <_Z14StartUpdateLCDPv+0x11c>)
 8000720:	f001 faf4 	bl	8001d0c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8000724:	f001 f9e2 	bl	8001aec <ssd1306_UpdateScreen>
      display_run_once = 1;
 8000728:	702c      	strb	r4, [r5, #0]
    }


    osDelay(1);
 800072a:	4620      	mov	r0, r4
 800072c:	f009 f910 	bl	8009950 <osDelay>
    if(display_run_once == 0) {
 8000730:	782b      	ldrb	r3, [r5, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1f9      	bne.n	800072a <_Z14StartUpdateLCDPv+0x4a>
      ssd1306_Fill(Black_);
 8000736:	2000      	movs	r0, #0
 8000738:	f001 f9b4 	bl	8001aa4 <ssd1306_Fill>
      ssd1306_UpdateScreen();
 800073c:	f001 f9d6 	bl	8001aec <ssd1306_UpdateScreen>
      if(display_no == 0) {
 8000740:	7833      	ldrb	r3, [r6, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0d6      	beq.n	80006f4 <_Z14StartUpdateLCDPv+0x14>
      } else if (display_no == 1) {
 8000746:	2b01      	cmp	r3, #1
 8000748:	d040      	beq.n	80007cc <_Z14StartUpdateLCDPv+0xec>
      } else if(display_no == 7) {
 800074a:	2b07      	cmp	r3, #7
 800074c:	d1ec      	bne.n	8000728 <_Z14StartUpdateLCDPv+0x48>
	    ssd1306_Fill(Black_);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f9a8 	bl	8001aa4 <ssd1306_Fill>
	  	ssd1306_UpdateScreen();
 8000754:	f001 f9ca 	bl	8001aec <ssd1306_UpdateScreen>
    	ssd1306_SetCursor(25,0);
 8000758:	2100      	movs	r1, #0
 800075a:	2019      	movs	r0, #25
 800075c:	f001 fafc 	bl	8001d58 <ssd1306_SetCursor>
        ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <_Z14StartUpdateLCDPv+0x110>)
 8000762:	4623      	mov	r3, r4
 8000764:	ca06      	ldmia	r2, {r1, r2}
 8000766:	4826      	ldr	r0, [pc, #152]	; (8000800 <_Z14StartUpdateLCDPv+0x120>)
 8000768:	f001 fad0 	bl	8001d0c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 800076c:	f001 f9be 	bl	8001aec <ssd1306_UpdateScreen>
                if(pBtd)
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <_Z14StartUpdateLCDPv+0x118>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	b133      	cbz	r3, 8000784 <_Z14StartUpdateLCDPv+0xa4>
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
                waitingForConnection = false;
 8000776:	2200      	movs	r2, #0
 8000778:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800077a:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800077e:	2206      	movs	r2, #6
 8000780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <_Z14StartUpdateLCDPv+0x118>)
        while(PS4.connected() == 0) {
 8000786:	7d5b      	ldrb	r3, [r3, #21]
 8000788:	b943      	cbnz	r3, 800079c <_Z14StartUpdateLCDPv+0xbc>
          osDelay(10);
 800078a:	f04f 080a 	mov.w	r8, #10
 800078e:	4f1a      	ldr	r7, [pc, #104]	; (80007f8 <_Z14StartUpdateLCDPv+0x118>)
 8000790:	4640      	mov	r0, r8
 8000792:	f009 f8dd 	bl	8009950 <osDelay>
        while(PS4.connected() == 0) {
 8000796:	7d7b      	ldrb	r3, [r7, #21]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <_Z14StartUpdateLCDPv+0xb0>
        ssd1306_SetCursor(2,26);
 800079c:	211a      	movs	r1, #26
 800079e:	2002      	movs	r0, #2
 80007a0:	f001 fada 	bl	8001d58 <ssd1306_SetCursor>
        ssd1306_WriteString("Paired!", Font_11x18, White_);
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <_Z14StartUpdateLCDPv+0x110>)
 80007a6:	4623      	mov	r3, r4
 80007a8:	ca06      	ldmia	r2, {r1, r2}
 80007aa:	4816      	ldr	r0, [pc, #88]	; (8000804 <_Z14StartUpdateLCDPv+0x124>)
 80007ac:	f001 faae 	bl	8001d0c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80007b0:	f001 f99c 	bl	8001aec <ssd1306_UpdateScreen>
 80007b4:	e7b8      	b.n	8000728 <_Z14StartUpdateLCDPv+0x48>
          ssd1306_SetCursor(2, 26);
 80007b6:	211a      	movs	r1, #26
 80007b8:	2002      	movs	r0, #2
 80007ba:	f001 facd 	bl	8001d58 <ssd1306_SetCursor>
          ssd1306_WriteString("Paired to DS4", Font_11x18, White_);
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <_Z14StartUpdateLCDPv+0x110>)
 80007c0:	4623      	mov	r3, r4
 80007c2:	ca06      	ldmia	r2, {r1, r2}
 80007c4:	4810      	ldr	r0, [pc, #64]	; (8000808 <_Z14StartUpdateLCDPv+0x128>)
 80007c6:	f001 faa1 	bl	8001d0c <ssd1306_WriteString>
 80007ca:	e7ab      	b.n	8000724 <_Z14StartUpdateLCDPv+0x44>
        ssd1306_SetCursor(25,0);
 80007cc:	2100      	movs	r1, #0
 80007ce:	2019      	movs	r0, #25
 80007d0:	f001 fac2 	bl	8001d58 <ssd1306_SetCursor>
        ssd1306_WriteString("Pair?", Font_11x18, White_);
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <_Z14StartUpdateLCDPv+0x110>)
 80007d6:	4623      	mov	r3, r4
 80007d8:	ca06      	ldmia	r2, {r1, r2}
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <_Z14StartUpdateLCDPv+0x12c>)
 80007dc:	f001 fa96 	bl	8001d0c <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80007e0:	f001 f984 	bl	8001aec <ssd1306_UpdateScreen>
 80007e4:	e7a0      	b.n	8000728 <_Z14StartUpdateLCDPv+0x48>
 80007e6:	bf00      	nop
 80007e8:	20000561 	.word	0x20000561
 80007ec:	20000560 	.word	0x20000560
 80007f0:	20000008 	.word	0x20000008
 80007f4:	0801043c 	.word	0x0801043c
 80007f8:	20000314 	.word	0x20000314
 80007fc:	08010444 	.word	0x08010444
 8000800:	08010468 	.word	0x08010468
 8000804:	08010474 	.word	0x08010474
 8000808:	08010450 	.word	0x08010450
 800080c:	08010460 	.word	0x08010460

08000810 <_ZN5PS4BT10ResetBTHIDEv>:
                if (!pFuncOnInit)
                        setLed(Blue); // Only call this is a user function has not been set
        };

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000810:	b508      	push	{r3, lr}
                PS4Parser::Reset();
 8000812:	3078      	adds	r0, #120	; 0x78
 8000814:	f00e fcba 	bl	800f18c <_ZN9PS4Parser5ResetEv>
        };
 8000818:	bd08      	pop	{r3, pc}

0800081a <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 800081a:	b570      	push	{r4, r5, r6, lr}
 800081c:	b096      	sub	sp, #88	; 0x58
 800081e:	4605      	mov	r5, r0
 8000820:	460c      	mov	r4, r1
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000822:	264f      	movs	r6, #79	; 0x4f
 8000824:	4632      	mov	r2, r6
 8000826:	2100      	movs	r1, #0
 8000828:	a802      	add	r0, sp, #8
 800082a:	f00f fd5d 	bl	80102e8 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 800082e:	2352      	movs	r3, #82	; 0x52
 8000830:	f88d 3008 	strb.w	r3, [sp, #8]
                buf[1] = 0x11; // Report ID
 8000834:	2311      	movs	r3, #17
 8000836:	f88d 3009 	strb.w	r3, [sp, #9]
                buf[2] = 0x80;
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	f88d 300a 	strb.w	r3, [sp, #10]
                buf[4]= 0xFF;
 8000840:	23ff      	movs	r3, #255	; 0xff
 8000842:	f88d 300c 	strb.w	r3, [sp, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000846:	7863      	ldrb	r3, [r4, #1]
 8000848:	f88d 300f 	strb.w	r3, [sp, #15]
                buf[8] = output->bigRumble; // Big rumble
 800084c:	7823      	ldrb	r3, [r4, #0]
 800084e:	f88d 3010 	strb.w	r3, [sp, #16]

                buf[9] = output->r; // Red
 8000852:	78a3      	ldrb	r3, [r4, #2]
 8000854:	f88d 3011 	strb.w	r3, [sp, #17]
                buf[10] = output->g; // Green
 8000858:	78e3      	ldrb	r3, [r4, #3]
 800085a:	f88d 3012 	strb.w	r3, [sp, #18]
                buf[11] = output->b; // Blue
 800085e:	7923      	ldrb	r3, [r4, #4]
 8000860:	f88d 3013 	strb.w	r3, [sp, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000864:	7963      	ldrb	r3, [r4, #5]
 8000866:	f88d 3014 	strb.w	r3, [sp, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 800086a:	79a3      	ldrb	r3, [r4, #6]
 800086c:	f88d 3015 	strb.w	r3, [sp, #21]

                output->reportChanged = false;
 8000870:	2300      	movs	r3, #0
 8000872:	71e3      	strb	r3, [r4, #7]

                HID_Command(buf, 2);
        };

        void HID_Command(uint8_t *data, uint8_t nbytes) {
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000874:	7deb      	ldrb	r3, [r5, #23]
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	7dab      	ldrb	r3, [r5, #22]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4633      	mov	r3, r6
 800087e:	aa02      	add	r2, sp, #8
 8000880:	89a9      	ldrh	r1, [r5, #12]
 8000882:	68a8      	ldr	r0, [r5, #8]
 8000884:	f00d fc0f 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000888:	b016      	add	sp, #88	; 0x58
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	b096      	sub	sp, #88	; 0x58
 8000890:	4605      	mov	r5, r0
 8000892:	460c      	mov	r4, r1
 8000894:	264f      	movs	r6, #79	; 0x4f
 8000896:	4632      	mov	r2, r6
 8000898:	2100      	movs	r1, #0
 800089a:	a802      	add	r0, sp, #8
 800089c:	f00f fd24 	bl	80102e8 <memset>
 80008a0:	2352      	movs	r3, #82	; 0x52
 80008a2:	f88d 3008 	strb.w	r3, [sp, #8]
 80008a6:	2311      	movs	r3, #17
 80008a8:	f88d 3009 	strb.w	r3, [sp, #9]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	f88d 300a 	strb.w	r3, [sp, #10]
 80008b2:	23ff      	movs	r3, #255	; 0xff
 80008b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80008b8:	7863      	ldrb	r3, [r4, #1]
 80008ba:	f88d 300f 	strb.w	r3, [sp, #15]
 80008be:	7823      	ldrb	r3, [r4, #0]
 80008c0:	f88d 3010 	strb.w	r3, [sp, #16]
 80008c4:	78a3      	ldrb	r3, [r4, #2]
 80008c6:	f88d 3011 	strb.w	r3, [sp, #17]
 80008ca:	78e3      	ldrb	r3, [r4, #3]
 80008cc:	f88d 3012 	strb.w	r3, [sp, #18]
 80008d0:	7923      	ldrb	r3, [r4, #4]
 80008d2:	f88d 3013 	strb.w	r3, [sp, #19]
 80008d6:	7963      	ldrb	r3, [r4, #5]
 80008d8:	f88d 3014 	strb.w	r3, [sp, #20]
 80008dc:	79a3      	ldrb	r3, [r4, #6]
 80008de:	f88d 3015 	strb.w	r3, [sp, #21]
 80008e2:	2300      	movs	r3, #0
 80008e4:	71e3      	strb	r3, [r4, #7]
 80008e6:	f815 3c61 	ldrb.w	r3, [r5, #-97]
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	f815 3c62 	ldrb.w	r3, [r5, #-98]
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	4633      	mov	r3, r6
 80008f4:	aa02      	add	r2, sp, #8
 80008f6:	f835 1c6c 	ldrh.w	r1, [r5, #-108]
 80008fa:	f855 0c70 	ldr.w	r0, [r5, #-112]
 80008fe:	f00d fbd2 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
 8000902:	b016      	add	sp, #88	; 0x58
 8000904:	bd70      	pop	{r4, r5, r6, pc}

08000906 <_ZN5PS4BT11OnInitBTHIDEv>:
        virtual void OnInitBTHID() {
 8000906:	b510      	push	{r4, lr}
 8000908:	b084      	sub	sp, #16
 800090a:	4604      	mov	r4, r0
                PS4Parser::Reset();
 800090c:	3078      	adds	r0, #120	; 0x78
 800090e:	f00e fc3d 	bl	800f18c <_ZN9PS4Parser5ResetEv>
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000912:	2343      	movs	r3, #67	; 0x43
 8000914:	f88d 300c 	strb.w	r3, [sp, #12]
                buf[1] = 0x02; // Report ID
 8000918:	2302      	movs	r3, #2
 800091a:	f88d 300d 	strb.w	r3, [sp, #13]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 800091e:	7de2      	ldrb	r2, [r4, #23]
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	7da2      	ldrb	r2, [r4, #22]
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	aa03      	add	r2, sp, #12
 8000928:	89a1      	ldrh	r1, [r4, #12]
 800092a:	68a0      	ldr	r0, [r4, #8]
 800092c:	f00d fbbb 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
                if (!pFuncOnInit)
 8000930:	6863      	ldr	r3, [r4, #4]
 8000932:	b10b      	cbz	r3, 8000938 <_ZN5PS4BT11OnInitBTHIDEv+0x32>
        };
 8000934:	b004      	add	sp, #16
 8000936:	bd10      	pop	{r4, pc}
        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
                ps4Output.r = r;
 8000938:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
                ps4Output.g = g;
 800093c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
                ps4Output.b = b;
 8000940:	23ff      	movs	r3, #255	; 0xff
 8000942:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
                ps4Output.reportChanged = true;
 8000946:	2301      	movs	r3, #1
 8000948:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
 800094c:	e7f2      	b.n	8000934 <_ZN5PS4BT11OnInitBTHIDEv+0x2e>

0800094e <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 800094e:	b508      	push	{r3, lr}
                PS4Parser::Parse(len, buf);
 8000950:	3078      	adds	r0, #120	; 0x78
 8000952:	f00e fbb1 	bl	800f0b8 <_ZN9PS4Parser5ParseEhPh>
        };
 8000956:	bd08      	pop	{r3, pc}

08000958 <_Z23ProcessKeyCodeInContexth>:
void ProcessKeyCodeInContext(uint8_t keyCode) {
 8000958:	b510      	push	{r4, lr}
  if(display_no == 0) { /* This is the status screen, show if controller or not connected */
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b95b      	cbnz	r3, 8000978 <_Z23ProcessKeyCodeInContexth+0x20>
    if(keyCode == BACK_BTN)
 8000960:	2803      	cmp	r0, #3
 8000962:	d005      	beq.n	8000970 <_Z23ProcessKeyCodeInContexth+0x18>
    else if(keyCode == FORWARD_BTN)
 8000964:	2806      	cmp	r0, #6
 8000966:	d109      	bne.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
      display_no = 1;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e005      	b.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
      display_no = 1;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	e001      	b.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
  } else if (display_no == 1) { /* Pair Controller Screen */
 8000978:	2b01      	cmp	r3, #1
 800097a:	d00e      	beq.n	800099a <_Z23ProcessKeyCodeInContexth+0x42>
  Serial.print("\r\nDisplay no is: ");
 800097c:	4c11      	ldr	r4, [pc, #68]	; (80009c4 <_Z23ProcessKeyCodeInContexth+0x6c>)
 800097e:	4912      	ldr	r1, [pc, #72]	; (80009c8 <_Z23ProcessKeyCodeInContexth+0x70>)
 8000980:	4620      	mov	r0, r4
 8000982:	f7ff fdc9 	bl	8000518 <_ZN5Print5printEPKc>
  Serial.print(display_no);
 8000986:	220a      	movs	r2, #10
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 800098a:	7819      	ldrb	r1, [r3, #0]
 800098c:	4620      	mov	r0, r4
 800098e:	f7ff fe31 	bl	80005f4 <_ZN5Print5printEhi>
  display_run_once = 0;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <_Z23ProcessKeyCodeInContexth+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
}
 8000998:	bd10      	pop	{r4, pc}
    if(keyCode == BACK_BTN)
 800099a:	2803      	cmp	r0, #3
 800099c:	d007      	beq.n	80009ae <_Z23ProcessKeyCodeInContexth+0x56>
    else if(keyCode == FORWARD_BTN)
 800099e:	2806      	cmp	r0, #6
 80009a0:	d009      	beq.n	80009b6 <_Z23ProcessKeyCodeInContexth+0x5e>
    else if(keyCode == SELECT_BTN) {
 80009a2:	2805      	cmp	r0, #5
 80009a4:	d1ea      	bne.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
      display_no = 7;  /* Only get to the pair status screen from here */
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	e7e6      	b.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
      display_no = 0;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e7e2      	b.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
      display_no = 0;
 80009b6:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <_Z23ProcessKeyCodeInContexth+0x68>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e7de      	b.n	800097c <_Z23ProcessKeyCodeInContexth+0x24>
 80009be:	bf00      	nop
 80009c0:	20000560 	.word	0x20000560
 80009c4:	20000438 	.word	0x20000438
 80009c8:	0801047c 	.word	0x0801047c
 80009cc:	20000561 	.word	0x20000561

080009d0 <_Z16StartButtonPressPv>:
{
 80009d0:	b580      	push	{r7, lr}
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80009d2:	4f1b      	ldr	r7, [pc, #108]	; (8000a40 <_Z16StartButtonPressPv+0x70>)
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 80009d4:	4d1b      	ldr	r5, [pc, #108]	; (8000a44 <_Z16StartButtonPressPv+0x74>)
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80009d6:	4e1c      	ldr	r6, [pc, #112]	; (8000a48 <_Z16StartButtonPressPv+0x78>)
 80009d8:	e005      	b.n	80009e6 <_Z16StartButtonPressPv+0x16>
		  buttonDebounced = true;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <_Z16StartButtonPressPv+0x7c>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 80009e0:	2064      	movs	r0, #100	; 0x64
 80009e2:	f008 ffb5 	bl	8009950 <osDelay>
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	4638      	mov	r0, r7
 80009ec:	f001 fca8 	bl	8002340 <HAL_GPIO_ReadPin>
 80009f0:	4680      	mov	r8, r0
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 80009f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f6:	4628      	mov	r0, r5
 80009f8:	f001 fca2 	bl	8002340 <HAL_GPIO_ReadPin>
 80009fc:	0044      	lsls	r4, r0, #1
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 80009fe:	ea44 0088 	orr.w	r0, r4, r8, lsl #2
 8000a02:	b244      	sxtb	r4, r0
			(HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8000a04:	2110      	movs	r1, #16
 8000a06:	4628      	mov	r0, r5
 8000a08:	f001 fc9a 	bl	8002340 <HAL_GPIO_ReadPin>
			(HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8000a0c:	4320      	orrs	r0, r4
 8000a0e:	b2c0      	uxtb	r0, r0
  keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8000a10:	7030      	strb	r0, [r6, #0]
  if (BUTTON_PRESSED) {
 8000a12:	2807      	cmp	r0, #7
 8000a14:	d00d      	beq.n	8000a32 <_Z16StartButtonPressPv+0x62>
	  if(buttonDebounced == true) {  // you only get here if the same button combination has been pressed for 100mS
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <_Z16StartButtonPressPv+0x7c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d1dd      	bne.n	80009da <_Z16StartButtonPressPv+0xa>
		  if (buttonProcessed == false) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <_Z16StartButtonPressPv+0x80>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1dc      	bne.n	80009e0 <_Z16StartButtonPressPv+0x10>
			  buttonProcessed = true;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <_Z16StartButtonPressPv+0x80>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
			  ProcessKeyCodeInContext(keyCode);
 8000a2c:	f7ff ff94 	bl	8000958 <_Z23ProcessKeyCodeInContexth>
 8000a30:	e7d6      	b.n	80009e0 <_Z16StartButtonPressPv+0x10>
	  buttonDebounced = false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <_Z16StartButtonPressPv+0x7c>)
 8000a36:	7013      	strb	r3, [r2, #0]
	  buttonProcessed = false;
 8000a38:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_Z16StartButtonPressPv+0x80>)
 8000a3a:	7013      	strb	r3, [r2, #0]
 8000a3c:	e7d0      	b.n	80009e0 <_Z16StartButtonPressPv+0x10>
 8000a3e:	bf00      	nop
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	2000054d 	.word	0x2000054d
 8000a50:	20000554 	.word	0x20000554

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000a56:	6802      	ldr	r2, [r0, #0]
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d000      	beq.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a5e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000a60:	f001 f9b4 	bl	8001dcc <HAL_IncTick>
}
 8000a64:	e7fb      	b.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0xa>
 8000a66:	bf00      	nop
 8000a68:	40001c00 	.word	0x40001c00

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 8000a6e:	4903      	ldr	r1, [pc, #12]	; (8000a7c <Error_Handler+0x10>)
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <Error_Handler+0x14>)
 8000a72:	f7ff fd51 	bl	8000518 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a76:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0xc>
 8000a7a:	bf00      	nop
 8000a7c:	08010490 	.word	0x08010490
 8000a80:	20000438 	.word	0x20000438

08000a84 <SystemClock_Config>:
{
 8000a84:	b510      	push	{r4, lr}
 8000a86:	b0ac      	sub	sp, #176	; 0xb0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a88:	2234      	movs	r2, #52	; 0x34
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	a81f      	add	r0, sp, #124	; 0x7c
 8000a8e:	f00f fc2b 	bl	80102e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a92:	2400      	movs	r4, #0
 8000a94:	941a      	str	r4, [sp, #104]	; 0x68
 8000a96:	941b      	str	r4, [sp, #108]	; 0x6c
 8000a98:	941c      	str	r4, [sp, #112]	; 0x70
 8000a9a:	941d      	str	r4, [sp, #116]	; 0x74
 8000a9c:	941e      	str	r4, [sp, #120]	; 0x78
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9e:	225c      	movs	r2, #92	; 0x5c
 8000aa0:	4621      	mov	r1, r4
 8000aa2:	a803      	add	r0, sp, #12
 8000aa4:	f00f fc20 	bl	80102e8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	9401      	str	r4, [sp, #4]
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <SystemClock_Config+0xc0>)
 8000aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ab2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abe:	9402      	str	r4, [sp, #8]
 8000ac0:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <SystemClock_Config+0xc4>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000adc:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	9325      	str	r3, [sp, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ae6:	9226      	str	r2, [sp, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae8:	2204      	movs	r2, #4
 8000aea:	9227      	str	r2, [sp, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aec:	22a8      	movs	r2, #168	; 0xa8
 8000aee:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af0:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af2:	2207      	movs	r2, #7
 8000af4:	922a      	str	r2, [sp, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	a81f      	add	r0, sp, #124	; 0x7c
 8000afa:	f004 f88d 	bl	8004c18 <HAL_RCC_OscConfig>
 8000afe:	b9d8      	cbnz	r0, 8000b38 <SystemClock_Config+0xb4>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b10:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b18:	2105      	movs	r1, #5
 8000b1a:	a81a      	add	r0, sp, #104	; 0x68
 8000b1c:	f003 fa54 	bl	8003fc8 <HAL_RCC_ClockConfig>
 8000b20:	b960      	cbnz	r0, 8000b3c <SystemClock_Config+0xb8>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b26:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2c:	a803      	add	r0, sp, #12
 8000b2e:	f003 fb97 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	b928      	cbnz	r0, 8000b40 <SystemClock_Config+0xbc>
}
 8000b34:	b02c      	add	sp, #176	; 0xb0
 8000b36:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b38:	f7ff ff98 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000b3c:	f7ff ff96 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000b40:	f7ff ff94 	bl	8000a6c <Error_Handler>
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <main>:
{
 8000b4c:	b500      	push	{lr}
 8000b4e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000b50:	f001 f91a 	bl	8001d88 <HAL_Init>
  SystemClock_Config();
 8000b54:	f7ff ff96 	bl	8000a84 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	2400      	movs	r4, #0
 8000b5a:	9408      	str	r4, [sp, #32]
 8000b5c:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	9401      	str	r4, [sp, #4]
 8000b60:	4b8e      	ldr	r3, [pc, #568]	; (8000d9c <main+0x250>)
 8000b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b64:	f042 0204 	orr.w	r2, r2, #4
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
 8000b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6c:	f002 0204 	and.w	r2, r2, #4
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b74:	9402      	str	r4, [sp, #8]
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b80:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b84:	9202      	str	r2, [sp, #8]
 8000b86:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	9403      	str	r4, [sp, #12]
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8c:	f042 0201 	orr.w	r2, r2, #1
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
 8000b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b94:	f002 0201 	and.w	r2, r2, #1
 8000b98:	9203      	str	r2, [sp, #12]
 8000b9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	9404      	str	r4, [sp, #16]
 8000b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba0:	f042 0202 	orr.w	r2, r2, #2
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	9304      	str	r3, [sp, #16]
 8000bae:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bb6:	4b7a      	ldr	r3, [pc, #488]	; (8000da0 <main+0x254>)
 8000bb8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	a905      	add	r1, sp, #20
 8000bbe:	4879      	ldr	r0, [pc, #484]	; (8000da4 <main+0x258>)
 8000bc0:	f001 fa2a 	bl	8002018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2501      	movs	r5, #1
 8000bce:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	a905      	add	r1, sp, #20
 8000bd2:	4875      	ldr	r0, [pc, #468]	; (8000da8 <main+0x25c>)
 8000bd4:	f001 fa20 	bl	8002018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bdc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	4e72      	ldr	r6, [pc, #456]	; (8000dac <main+0x260>)
 8000be2:	a905      	add	r1, sp, #20
 8000be4:	4630      	mov	r0, r6
 8000be6:	f001 fa17 	bl	8002018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	a905      	add	r1, sp, #20
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f001 fa0e 	bl	8002018 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000bfc:	486c      	ldr	r0, [pc, #432]	; (8000db0 <main+0x264>)
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <main+0x268>)
 8000c00:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000c06:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c08:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	f005 fae9 	bl	80061ec <HAL_UART_Init>
 8000c1a:	2800      	cmp	r0, #0
 8000c1c:	f040 80b5 	bne.w	8000d8a <main+0x23e>
  hspi1.Instance = SPI1;
 8000c20:	4865      	ldr	r0, [pc, #404]	; (8000db8 <main+0x26c>)
 8000c22:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <main+0x270>)
 8000c24:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c2a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c32:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c34:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3a:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c3c:	2218      	movs	r2, #24
 8000c3e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c40:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c42:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c46:	230a      	movs	r3, #10
 8000c48:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c4a:	f004 fa83 	bl	8005154 <HAL_SPI_Init>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	f040 809d 	bne.w	8000d8e <main+0x242>
  MX_USB_DEVICE_Init();
 8000c54:	f00b faf2 	bl	800c23c <MX_USB_DEVICE_Init>
  htim14.Instance = TIM14;
 8000c58:	4859      	ldr	r0, [pc, #356]	; (8000dc0 <main+0x274>)
 8000c5a:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <main+0x278>)
 8000c5c:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8000c5e:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8000c62:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	2300      	movs	r3, #0
 8000c66:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 10000-1;
 8000c68:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c6c:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6e:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c72:	f005 f817 	bl	8005ca4 <HAL_TIM_Base_Init>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	f040 808b 	bne.w	8000d92 <main+0x246>
  hi2c1.Instance = I2C1;
 8000c7c:	4852      	ldr	r0, [pc, #328]	; (8000dc8 <main+0x27c>)
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <main+0x280>)
 8000c80:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c82:	4b53      	ldr	r3, [pc, #332]	; (8000dd0 <main+0x284>)
 8000c84:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c86:	2300      	movs	r3, #0
 8000c88:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8a:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c90:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c92:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c94:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c96:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c98:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c9a:	f001 fb83 	bl	80023a4 <HAL_I2C_Init>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d179      	bne.n	8000d96 <main+0x24a>
  SPI_Handle = hspi1;
 8000ca2:	2258      	movs	r2, #88	; 0x58
 8000ca4:	4944      	ldr	r1, [pc, #272]	; (8000db8 <main+0x26c>)
 8000ca6:	484b      	ldr	r0, [pc, #300]	; (8000dd4 <main+0x288>)
 8000ca8:	f00f fb10 	bl	80102cc <memcpy>
  UART_Handle = huart2;
 8000cac:	2244      	movs	r2, #68	; 0x44
 8000cae:	4940      	ldr	r1, [pc, #256]	; (8000db0 <main+0x264>)
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <main+0x28c>)
 8000cb2:	f00f fb0b 	bl	80102cc <memcpy>
  HAL_TIM_Base_Start_IT(&htim14);
 8000cb6:	4d42      	ldr	r5, [pc, #264]	; (8000dc0 <main+0x274>)
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f005 f843 	bl	8005d44 <HAL_TIM_Base_Start_IT>
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cbe:	4c47      	ldr	r4, [pc, #284]	; (8000ddc <main+0x290>)
 8000cc0:	4947      	ldr	r1, [pc, #284]	; (8000de0 <main+0x294>)
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	f7ff fc38 	bl	8000538 <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 8000cc8:	f003 fa64 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 8000ccc:	4b45      	ldr	r3, [pc, #276]	; (8000de4 <main+0x298>)
 8000cce:	fba3 3100 	umull	r3, r1, r3, r0
 8000cd2:	0c89      	lsrs	r1, r1, #18
 8000cd4:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <main+0x29c>)
 8000cd6:	6019      	str	r1, [r3, #0]
  Serial.print((int)cpu_freq);
 8000cd8:	220a      	movs	r2, #10
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f7ff fc7b 	bl	80005d6 <_ZN5Print5printEii>
  Serial.print("MHz");
 8000ce0:	4942      	ldr	r1, [pc, #264]	; (8000dec <main+0x2a0>)
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f7ff fc18 	bl	8000518 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000ce8:	4941      	ldr	r1, [pc, #260]	; (8000df0 <main+0x2a4>)
 8000cea:	4620      	mov	r0, r4
 8000cec:	f7ff fc14 	bl	8000518 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000cf0:	682b      	ldr	r3, [r5, #0]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	4e3f      	ldr	r6, [pc, #252]	; (8000df4 <main+0x2a8>)
 8000cf6:	8033      	strh	r3, [r6, #0]
  HAL_Delay(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f001 f886 	bl	8001e0c <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	4d3c      	ldr	r5, [pc, #240]	; (8000df8 <main+0x2ac>)
 8000d06:	8832      	ldrh	r2, [r6, #0]
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	802b      	strh	r3, [r5, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000d0c:	493b      	ldr	r1, [pc, #236]	; (8000dfc <main+0x2b0>)
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f7ff fc02 	bl	8000518 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 8000d14:	8829      	ldrh	r1, [r5, #0]
 8000d16:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <main+0x2b4>)
 8000d18:	fba3 3101 	umull	r3, r1, r3, r1
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	08c9      	lsrs	r1, r1, #3
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fc58 	bl	80005d6 <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d26:	4937      	ldr	r1, [pc, #220]	; (8000e04 <main+0x2b8>)
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff fbf5 	bl	8000518 <_ZN5Print5printEPKc>
  Serial.print((int)hal_gettick);
 8000d2e:	220a      	movs	r2, #10
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <main+0x2bc>)
 8000d32:	6819      	ldr	r1, [r3, #0]
 8000d34:	4620      	mov	r0, r4
 8000d36:	f7ff fc4e 	bl	80005d6 <_ZN5Print5printEii>
  osKernelInitialize();
 8000d3a:	f008 fd2d 	bl	8009798 <osKernelInitialize>
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d3e:	4a33      	ldr	r2, [pc, #204]	; (8000e0c <main+0x2c0>)
 8000d40:	2100      	movs	r1, #0
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <main+0x2c4>)
 8000d44:	f008 fd72 	bl	800982c <osThreadNew>
 8000d48:	4b32      	ldr	r3, [pc, #200]	; (8000e14 <main+0x2c8>)
 8000d4a:	6018      	str	r0, [r3, #0]
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d4c:	4a32      	ldr	r2, [pc, #200]	; (8000e18 <main+0x2cc>)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <main+0x2d0>)
 8000d52:	f008 fd6b 	bl	800982c <osThreadNew>
 8000d56:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <main+0x2d4>)
 8000d58:	6018      	str	r0, [r3, #0]
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d5a:	4a32      	ldr	r2, [pc, #200]	; (8000e24 <main+0x2d8>)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4832      	ldr	r0, [pc, #200]	; (8000e28 <main+0x2dc>)
 8000d60:	f008 fd64 	bl	800982c <osThreadNew>
 8000d64:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <main+0x2e0>)
 8000d66:	6018      	str	r0, [r3, #0]
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000d68:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <main+0x2e4>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4831      	ldr	r0, [pc, #196]	; (8000e34 <main+0x2e8>)
 8000d6e:	f008 fd5d 	bl	800982c <osThreadNew>
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <main+0x2ec>)
 8000d74:	6018      	str	r0, [r3, #0]
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000d76:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <main+0x2f0>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4831      	ldr	r0, [pc, #196]	; (8000e40 <main+0x2f4>)
 8000d7c:	f008 fd56 	bl	800982c <osThreadNew>
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <main+0x2f8>)
 8000d82:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d84:	f008 fd2c 	bl	80097e0 <osKernelStart>
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <main+0x23c>
    Error_Handler();
 8000d8a:	f7ff fe6f 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000d8e:	f7ff fe6d 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000d92:	f7ff fe6b 	bl	8000a6c <Error_Handler>
    Error_Handler();
 8000d96:	f7ff fe69 	bl	8000a6c <Error_Handler>
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	10210000 	.word	0x10210000
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020400 	.word	0x40020400
 8000db0:	20000668 	.word	0x20000668
 8000db4:	40004400 	.word	0x40004400
 8000db8:	200005c8 	.word	0x200005c8
 8000dbc:	40013000 	.word	0x40013000
 8000dc0:	20000620 	.word	0x20000620
 8000dc4:	40002000 	.word	0x40002000
 8000dc8:	20000574 	.word	0x20000574
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	00061a80 	.word	0x00061a80
 8000dd4:	200003e0 	.word	0x200003e0
 8000dd8:	2000044c 	.word	0x2000044c
 8000ddc:	20000438 	.word	0x20000438
 8000de0:	080104a8 	.word	0x080104a8
 8000de4:	431bde83 	.word	0x431bde83
 8000de8:	2000055c 	.word	0x2000055c
 8000dec:	080104c0 	.word	0x080104c0
 8000df0:	080104c4 	.word	0x080104c4
 8000df4:	200006b4 	.word	0x200006b4
 8000df8:	200006b6 	.word	0x200006b6
 8000dfc:	080104cc 	.word	0x080104cc
 8000e00:	cccccccd 	.word	0xcccccccd
 8000e04:	080104e0 	.word	0x080104e0
 8000e08:	20000570 	.word	0x20000570
 8000e0c:	080105b4 	.word	0x080105b4
 8000e10:	08001061 	.word	0x08001061
 8000e14:	2000056c 	.word	0x2000056c
 8000e18:	080105d8 	.word	0x080105d8
 8000e1c:	080006b9 	.word	0x080006b9
 8000e20:	200006b0 	.word	0x200006b0
 8000e24:	08010644 	.word	0x08010644
 8000e28:	0800066d 	.word	0x0800066d
 8000e2c:	20000558 	.word	0x20000558
 8000e30:	08010620 	.word	0x08010620
 8000e34:	080009d1 	.word	0x080009d1
 8000e38:	20000550 	.word	0x20000550
 8000e3c:	080105fc 	.word	0x080105fc
 8000e40:	080006e1 	.word	0x080006e1
 8000e44:	200006b8 	.word	0x200006b8

08000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
#endif
};

/* write single byte into MAX3421 register */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8000e48:	b570      	push	{r4, r5, r6, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	4615      	mov	r5, r2
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000e50:	4e0c      	ldr	r6, [pc, #48]	; (8000e84 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x3c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	2140      	movs	r1, #64	; 0x40
 8000e56:	4630      	mov	r0, r6
 8000e58:	f001 fa8a 	bl	8002370 <HAL_GPIO_WritePin>
        c[0] = reg | 0x02;
        c[1] = data;
        USB_SPI.transfer(c, 2);
#elif defined(STM32F4)
        uint8_t c[2];
        c[0] = reg | 0x02;
 8000e5c:	f044 0402 	orr.w	r4, r4, #2
 8000e60:	f88d 4004 	strb.w	r4, [sp, #4]
        c[1] = data;
 8000e64:	f88d 5005 	strb.w	r5, [sp, #5]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	a901      	add	r1, sp, #4
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8000e72:	f004 f9f8 	bl	8005266 <HAL_SPI_Transmit>
 8000e76:	2201      	movs	r2, #1
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	f001 fa78 	bl	8002370 <HAL_GPIO_WritePin>
#if defined(SPI_HAS_TRANSACTION)
        USB_SPI.endTransaction();
#endif
        XMEM_RELEASE_SPI();
        return;
};
 8000e80:	b002      	add	sp, #8
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	40020400 	.word	0x40020400
 8000e88:	200003e0 	.word	0x200003e0

08000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>:
        return;
}

/* single host register read    */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8000e8c:	b530      	push	{r4, r5, lr}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	f88d 1007 	strb.w	r1, [sp, #7]
 8000e94:	4c11      	ldr	r4, [pc, #68]	; (8000edc <_ZN8MAX3421eI3P102P9E5regRdEh+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f001 fa68 	bl	8002370 <HAL_GPIO_WritePin>
#if USING_SPI4TEENSY3
        spi4teensy3::send(reg);
        uint8_t rv = spi4teensy3::receive();
        SPI_SS::Set();
#elif defined(STM32F4)
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8000ea0:	4d0f      	ldr	r5, [pc, #60]	; (8000ee0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x54>)
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f10d 0107 	add.w	r1, sp, #7
 8000eac:	4628      	mov	r0, r5
 8000eae:	f004 f9da 	bl	8005266 <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f88d 300f 	strb.w	r3, [sp, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f10d 010f 	add.w	r1, sp, #15
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	f004 fb0b 	bl	80054de <HAL_SPI_Receive>
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	4620      	mov	r0, r4
 8000ece:	f001 fa4f 	bl	8002370 <HAL_GPIO_WritePin>
#if defined(SPI_HAS_TRANSACTION)
        USB_SPI.endTransaction();
#endif
        XMEM_RELEASE_SPI();
        return (rv);
}
 8000ed2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000ed6:	b005      	add	sp, #20
 8000ed8:	bd30      	pop	{r4, r5, pc}
 8000eda:	bf00      	nop
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	200003e0 	.word	0x200003e0

08000ee4 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8000ee8:	21f8      	movs	r1, #248	; 0xf8
 8000eea:	f7ff ffcf 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8000eee:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
        switch(bus_sample) { //start full-speed or low-speed host
 8000ef2:	2880      	cmp	r0, #128	; 0x80
 8000ef4:	d019      	beq.n	8000f2a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x46>
 8000ef6:	d812      	bhi.n	8000f1e <_ZN8MAX3421eI3P102P9E8busprobeEv+0x3a>
 8000ef8:	b3c8      	cbz	r0, 8000f6e <_ZN8MAX3421eI3P102P9E8busprobeEv+0x8a>
 8000efa:	2840      	cmp	r0, #64	; 0x40
 8000efc:	d114      	bne.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
                                vbusState = LSHOST;
                        }
                        break;
                case( bmKSTATUS):
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8000efe:	21d8      	movs	r1, #216	; 0xd8
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff ffc3 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8000f06:	f010 0f02 	tst.w	r0, #2
 8000f0a:	d127      	bne.n	8000f5c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8000f0c:	22cb      	movs	r2, #203	; 0xcb
 8000f0e:	21d8      	movs	r1, #216	; 0xd8
 8000f10:	4620      	mov	r0, r4
 8000f12:	f7ff ff99 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x9c>)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e004      	b.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
        switch(bus_sample) { //start full-speed or low-speed host
 8000f1e:	28c0      	cmp	r0, #192	; 0xc0
 8000f20:	d102      	bne.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
                                vbusState = FSHOST;
                        }
                        break;
                case( bmSE1): //illegal state
                        vbusState = SE1;
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x9c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 8000f28:	bd10      	pop	{r4, pc}
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8000f2a:	21d8      	movs	r1, #216	; 0xd8
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff ffad 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8000f32:	f010 0f02 	tst.w	r0, #2
 8000f36:	d108      	bne.n	8000f4a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8000f38:	22c9      	movs	r2, #201	; 0xc9
 8000f3a:	21d8      	movs	r1, #216	; 0xd8
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff ff83 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x9c>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e7ee      	b.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8000f4a:	22cb      	movs	r2, #203	; 0xcb
 8000f4c:	21d8      	movs	r1, #216	; 0xd8
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff ff7a 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x9c>)
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e7e5      	b.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8000f5c:	22c9      	movs	r2, #201	; 0xc9
 8000f5e:	21d8      	movs	r1, #216	; 0xd8
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff ff71 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x9c>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e7dc      	b.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8000f6e:	22d1      	movs	r2, #209	; 0xd1
 8000f70:	21d8      	movs	r1, #216	; 0xd8
 8000f72:	4620      	mov	r0, r4
 8000f74:	f7ff ff68 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8000f78:	4b01      	ldr	r3, [pc, #4]	; (8000f80 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x9c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	e7d3      	b.n	8000f28 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x44>
 8000f80:	200001cc 	.word	0x200001cc

08000f84 <_ZN8MAX3421eI3P102P9E4InitEv>:
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8000f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f88:	4605      	mov	r5, r0
 8000f8a:	4931      	ldr	r1, [pc, #196]	; (8001050 <_ZN8MAX3421eI3P102P9E4InitEv+0xcc>)
 8000f8c:	2740      	movs	r7, #64	; 0x40
 8000f8e:	600f      	str	r7, [r1, #0]
 8000f90:	f04f 0801 	mov.w	r8, #1
 8000f94:	f8c1 8004 	str.w	r8, [r1, #4]
 8000f98:	2400      	movs	r4, #0
 8000f9a:	608c      	str	r4, [r1, #8]
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	60cb      	str	r3, [r1, #12]
 8000fa0:	4e2c      	ldr	r6, [pc, #176]	; (8001054 <_ZN8MAX3421eI3P102P9E4InitEv+0xd0>)
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	f001 f838 	bl	8002018 <HAL_GPIO_Init>
 8000fa8:	4642      	mov	r2, r8
 8000faa:	4639      	mov	r1, r7
 8000fac:	4630      	mov	r0, r6
 8000fae:	f001 f9df 	bl	8002370 <HAL_GPIO_WritePin>
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000fb2:	4929      	ldr	r1, [pc, #164]	; (8001058 <_ZN8MAX3421eI3P102P9E4InitEv+0xd4>)
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	600b      	str	r3, [r1, #0]
 8000fb8:	604c      	str	r4, [r1, #4]
 8000fba:	608c      	str	r4, [r1, #8]
 8000fbc:	4827      	ldr	r0, [pc, #156]	; (800105c <_ZN8MAX3421eI3P102P9E4InitEv+0xd8>)
 8000fbe:	f001 f82b 	bl	8002018 <HAL_GPIO_Init>
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8000fc2:	2218      	movs	r2, #24
 8000fc4:	2188      	movs	r1, #136	; 0x88
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f7ff ff3e 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, bmCHIPRES);
 8000fcc:	2220      	movs	r2, #32
 8000fce:	2178      	movs	r1, #120	; 0x78
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f7ff ff39 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	2178      	movs	r1, #120	; 0x78
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff ff34 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
 8000fe0:	f64f 74ff 	movw	r4, #65535	; 0xffff
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8000fe4:	2668      	movs	r6, #104	; 0x68
 8000fe6:	4631      	mov	r1, r6
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f7ff ff4f 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8000fee:	f010 0f01 	tst.w	r0, #1
 8000ff2:	d106      	bne.n	8001002 <_ZN8MAX3421eI3P102P9E4InitEv+0x7e>
        while(++i) {
 8000ff4:	3c01      	subs	r4, #1
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	2c00      	cmp	r4, #0
 8000ffa:	d1f4      	bne.n	8000fe6 <_ZN8MAX3421eI3P102P9E4InitEv+0x62>
                return ( -1);
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	e024      	b.n	800104c <_ZN8MAX3421eI3P102P9E4InitEv+0xc8>
        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001002:	22c1      	movs	r2, #193	; 0xc1
 8001004:	21d8      	movs	r1, #216	; 0xd8
 8001006:	4628      	mov	r0, r5
 8001008:	f7ff ff1e 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 800100c:	2260      	movs	r2, #96	; 0x60
 800100e:	21d0      	movs	r1, #208	; 0xd0
 8001010:	4628      	mov	r0, r5
 8001012:	f7ff ff19 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001016:	2204      	movs	r2, #4
 8001018:	21e8      	movs	r1, #232	; 0xe8
 800101a:	4628      	mov	r0, r5
 800101c:	f7ff ff14 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001020:	24e8      	movs	r4, #232	; 0xe8
 8001022:	4621      	mov	r1, r4
 8001024:	4628      	mov	r0, r5
 8001026:	f7ff ff31 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800102a:	f010 0f04 	tst.w	r0, #4
 800102e:	d0f8      	beq.n	8001022 <_ZN8MAX3421eI3P102P9E4InitEv+0x9e>
        busprobe(); //check if anything is connected
 8001030:	4628      	mov	r0, r5
 8001032:	f7ff ff57 	bl	8000ee4 <_ZN8MAX3421eI3P102P9E8busprobeEv>
        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001036:	2220      	movs	r2, #32
 8001038:	21c8      	movs	r1, #200	; 0xc8
 800103a:	4628      	mov	r0, r5
 800103c:	f7ff ff04 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001040:	2201      	movs	r2, #1
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	4628      	mov	r0, r5
 8001046:	f7ff feff 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( 0);
 800104a:	2000      	movs	r0, #0
}
 800104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001050:	200001d0 	.word	0x200001d0
 8001054:	40020400 	.word	0x40020400
 8001058:	200001e4 	.word	0x200001e4
 800105c:	40020800 	.word	0x40020800

08001060 <_Z10StartGetBTPv>:
{
 8001060:	b580      	push	{r7, lr}
  if (Usb.Init() == -1) {
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <_Z10StartGetBTPv+0x74>)
 8001064:	f7ff ff8e 	bl	8000f84 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001068:	f1b0 3fff 	cmp.w	r0, #4294967295
 800106c:	d025      	beq.n	80010ba <_Z10StartGetBTPv+0x5a>
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 800106e:	491a      	ldr	r1, [pc, #104]	; (80010d8 <_Z10StartGetBTPv+0x78>)
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <_Z10StartGetBTPv+0x7c>)
 8001072:	f7ff fa61 	bl	8000538 <_ZN5Print5printEPK19__FlashStringHelper>
  gameHID.JoyX = 0;
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <_Z10StartGetBTPv+0x80>)
 8001078:	2300      	movs	r3, #0
 800107a:	7093      	strb	r3, [r2, #2]
  gameHID.JoyY = 0;
 800107c:	70d3      	strb	r3, [r2, #3]
  gameHID.Joy2X = 0;
 800107e:	7113      	strb	r3, [r2, #4]
  gameHID.Joy2Y = 0;
 8001080:	7153      	strb	r3, [r2, #5]
  gameHID.Joy_LT = 0;
 8001082:	7013      	strb	r3, [r2, #0]
  gameHID.Joy_RT = 0;
 8001084:	7053      	strb	r3, [r2, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 8001086:	7991      	ldrb	r1, [r2, #6]
 8001088:	f363 0100 	bfi	r1, r3, #0, #1
 800108c:	7191      	strb	r1, [r2, #6]
  xboxHID.startByte = 0x00;
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <_Z10StartGetBTPv+0x84>)
 8001090:	7013      	strb	r3, [r2, #0]
  xboxHID.bLength = 20;
 8001092:	2114      	movs	r1, #20
 8001094:	7051      	strb	r1, [r2, #1]
  xboxHID.dButtons = 0x00;
 8001096:	7093      	strb	r3, [r2, #2]
  xboxHID.A = 0;
 8001098:	7113      	strb	r3, [r2, #4]
  xboxHID.B = 0;
 800109a:	7153      	strb	r3, [r2, #5]
  xboxHID.X = 0;
 800109c:	7193      	strb	r3, [r2, #6]
  xboxHID.Y = 0;
 800109e:	71d3      	strb	r3, [r2, #7]
  xboxHID.BLACK = 0;
 80010a0:	7213      	strb	r3, [r2, #8]
  xboxHID.WHITE = 0;
 80010a2:	7253      	strb	r3, [r2, #9]
  xboxHID.L = 0;
 80010a4:	7293      	strb	r3, [r2, #10]
  xboxHID.R = 0;
 80010a6:	72d3      	strb	r3, [r2, #11]
  xboxHID.leftStickX = 0;
 80010a8:	8193      	strh	r3, [r2, #12]
  xboxHID.leftStickY = 0;
 80010aa:	81d3      	strh	r3, [r2, #14]
  xboxHID.rightStickX = 0;
 80010ac:	8213      	strh	r3, [r2, #16]
  xboxHID.rightStickY = 0;
 80010ae:	8253      	strh	r3, [r2, #18]
                return BTHID::connected;
 80010b0:	4d0d      	ldr	r5, [pc, #52]	; (80010e8 <_Z10StartGetBTPv+0x88>)
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80010b2:	4e0e      	ldr	r6, [pc, #56]	; (80010ec <_Z10StartGetBTPv+0x8c>)
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 80010b4:	f105 0478 	add.w	r4, r5, #120	; 0x78
 80010b8:	e131      	b.n	800131e <_Z10StartGetBTPv+0x2be>
  		Serial.print(F("\r\nOSC did not start"));
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <_Z10StartGetBTPv+0x90>)
 80010bc:	4807      	ldr	r0, [pc, #28]	; (80010dc <_Z10StartGetBTPv+0x7c>)
 80010be:	f7ff fa3b 	bl	8000538 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 80010c2:	e7fe      	b.n	80010c2 <_Z10StartGetBTPv+0x62>
				gameHID.JoyX = 0;
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <_Z10StartGetBTPv+0x80>)
 80010c6:	2300      	movs	r3, #0
 80010c8:	7093      	strb	r3, [r2, #2]
				gameHID.JoyY = 0;
 80010ca:	70d3      	strb	r3, [r2, #3]
				xboxHID.leftStickX = 0;
 80010cc:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_Z10StartGetBTPv+0x84>)
 80010ce:	8193      	strh	r3, [r2, #12]
				xboxHID.leftStickY = 0;
 80010d0:	81d3      	strh	r3, [r2, #14]
 80010d2:	e16e      	b.n	80013b2 <_Z10StartGetBTPv+0x352>
 80010d4:	20000490 	.word	0x20000490
 80010d8:	080104f8 	.word	0x080104f8
 80010dc:	20000438 	.word	0x20000438
 80010e0:	20000564 	.word	0x20000564
 80010e4:	200006bc 	.word	0x200006bc
 80010e8:	20000314 	.word	0x20000314
 80010ec:	40020800 	.word	0x40020800
 80010f0:	080104e4 	.word	0x080104e4
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 80010f4:	2102      	movs	r1, #2
 80010f6:	4620      	mov	r0, r4
 80010f8:	f00d ffdb 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80010fc:	4fc4      	ldr	r7, [pc, #784]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80010fe:	3880      	subs	r0, #128	; 0x80
 8001100:	7138      	strb	r0, [r7, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001102:	2103      	movs	r1, #3
 8001104:	4620      	mov	r0, r4
 8001106:	f00d ffd4 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800110a:	3880      	subs	r0, #128	; 0x80
 800110c:	b240      	sxtb	r0, r0
 800110e:	7178      	strb	r0, [r7, #5]
				xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001110:	4ac0      	ldr	r2, [pc, #768]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 8001112:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	8213      	strh	r3, [r2, #16]
				xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 800111a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800111e:	eba3 2000 	sub.w	r0, r3, r0, lsl #8
 8001122:	8250      	strh	r0, [r2, #18]
			xboxHID.L = PS4.getAnalogButton(L2);
 8001124:	2108      	movs	r1, #8
 8001126:	4620      	mov	r0, r4
 8001128:	f00d ffba 	bl	800f0a0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 800112c:	4fb9      	ldr	r7, [pc, #740]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800112e:	72b8      	strb	r0, [r7, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 8001130:	2109      	movs	r1, #9
 8001132:	4620      	mov	r0, r4
 8001134:	f00d ffb4 	bl	800f0a0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001138:	72f8      	strb	r0, [r7, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 800113a:	4ab5      	ldr	r2, [pc, #724]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 800113c:	7abb      	ldrb	r3, [r7, #10]
 800113e:	3b80      	subs	r3, #128	; 0x80
 8001140:	7013      	strb	r3, [r2, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 8001142:	3880      	subs	r0, #128	; 0x80
 8001144:	7050      	strb	r0, [r2, #1]
			if (PS4.getButtonClick(PS)) {
 8001146:	2110      	movs	r1, #16
 8001148:	4620      	mov	r0, r4
 800114a:	f00d ff91 	bl	800f070 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 800114e:	2800      	cmp	r0, #0
 8001150:	f040 8145 	bne.w	80013de <_Z10StartGetBTPv+0x37e>
			if (PS4.getButtonPress(TRIANGLE)) {
 8001154:	210c      	movs	r1, #12
 8001156:	4620      	mov	r0, r4
 8001158:	f00d ff78 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800115c:	2800      	cmp	r0, #0
 800115e:	f000 8145 	beq.w	80013ec <_Z10StartGetBTPv+0x38c>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 8001162:	4aab      	ldr	r2, [pc, #684]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001164:	79d3      	ldrb	r3, [r2, #7]
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 800116c:	4ba9      	ldr	r3, [pc, #676]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	71da      	strb	r2, [r3, #7]
			if (PS4.getButtonPress(CIRCLE)) {
 8001172:	210d      	movs	r1, #13
 8001174:	4620      	mov	r0, r4
 8001176:	f00d ff69 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800117a:	2800      	cmp	r0, #0
 800117c:	f000 813f 	beq.w	80013fe <_Z10StartGetBTPv+0x39e>
				gameHID.ps4ButtonsTag.button_circle = 1;
 8001180:	4aa3      	ldr	r2, [pc, #652]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001182:	7993      	ldrb	r3, [r2, #6]
 8001184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001188:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 800118a:	4ba2      	ldr	r3, [pc, #648]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	715a      	strb	r2, [r3, #5]
			if (PS4.getButtonPress(CROSS)) {
 8001190:	210e      	movs	r1, #14
 8001192:	4620      	mov	r0, r4
 8001194:	f00d ff5a 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001198:	2800      	cmp	r0, #0
 800119a:	f000 814d 	beq.w	8001438 <_Z10StartGetBTPv+0x3d8>
				gameHID.ps4ButtonsTag.button_cross = 1;
 800119e:	4a9c      	ldr	r2, [pc, #624]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80011a0:	7993      	ldrb	r3, [r2, #6]
 80011a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a6:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 80011a8:	4b9a      	ldr	r3, [pc, #616]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80011aa:	22ff      	movs	r2, #255	; 0xff
 80011ac:	711a      	strb	r2, [r3, #4]
			if (PS4.getButtonPress(SQUARE)) {
 80011ae:	210f      	movs	r1, #15
 80011b0:	4620      	mov	r0, r4
 80011b2:	f00d ff4b 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	f000 8147 	beq.w	800144a <_Z10StartGetBTPv+0x3ea>
				gameHID.ps4ButtonsTag.button_square = 1;
 80011bc:	4a94      	ldr	r2, [pc, #592]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80011be:	79d3      	ldrb	r3, [r2, #7]
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 80011c6:	4b93      	ldr	r3, [pc, #588]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80011c8:	22ff      	movs	r2, #255	; 0xff
 80011ca:	719a      	strb	r2, [r3, #6]
			if (PS4.getButtonPress(UP)) {
 80011cc:	2100      	movs	r1, #0
 80011ce:	4620      	mov	r0, r4
 80011d0:	f00d ff3c 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f000 8141 	beq.w	800145c <_Z10StartGetBTPv+0x3fc>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 80011da:	4a8d      	ldr	r2, [pc, #564]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80011dc:	79d3      	ldrb	r3, [r2, #7]
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 80011e4:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80011e6:	7893      	ldrb	r3, [r2, #2]
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(RIGHT)) {
 80011ee:	2101      	movs	r1, #1
 80011f0:	4620      	mov	r0, r4
 80011f2:	f00d ff2b 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	f000 813b 	beq.w	8001472 <_Z10StartGetBTPv+0x412>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 80011fc:	4a84      	ldr	r2, [pc, #528]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80011fe:	79d3      	ldrb	r3, [r2, #7]
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 8001206:	4a83      	ldr	r2, [pc, #524]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 8001208:	7893      	ldrb	r3, [r2, #2]
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(DOWN)) {
 8001210:	2102      	movs	r1, #2
 8001212:	4620      	mov	r0, r4
 8001214:	f00d ff1a 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001218:	2800      	cmp	r0, #0
 800121a:	f000 8135 	beq.w	8001488 <_Z10StartGetBTPv+0x428>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 800121e:	4a7c      	ldr	r2, [pc, #496]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001220:	79d3      	ldrb	r3, [r2, #7]
 8001222:	f043 0320 	orr.w	r3, r3, #32
 8001226:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 8001228:	4a7a      	ldr	r2, [pc, #488]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800122a:	7893      	ldrb	r3, [r2, #2]
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(LEFT)) {
 8001232:	2103      	movs	r1, #3
 8001234:	4620      	mov	r0, r4
 8001236:	f00d ff09 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800123a:	2800      	cmp	r0, #0
 800123c:	f000 812f 	beq.w	800149e <_Z10StartGetBTPv+0x43e>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8001240:	4a73      	ldr	r2, [pc, #460]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001242:	79d3      	ldrb	r3, [r2, #7]
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 800124a:	4a72      	ldr	r2, [pc, #456]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800124c:	7893      	ldrb	r3, [r2, #2]
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(L1)) {
 8001254:	210a      	movs	r1, #10
 8001256:	4620      	mov	r0, r4
 8001258:	f00d fef8 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800125c:	2800      	cmp	r0, #0
 800125e:	f000 8129 	beq.w	80014b4 <_Z10StartGetBTPv+0x454>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001262:	4a6b      	ldr	r2, [pc, #428]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001264:	7993      	ldrb	r3, [r2, #6]
 8001266:	f043 0320 	orr.w	r3, r3, #32
 800126a:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	725a      	strb	r2, [r3, #9]
			if (PS4.getButtonPress(L3)) {
 8001272:	2106      	movs	r1, #6
 8001274:	4620      	mov	r0, r4
 8001276:	f00d fee9 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800127a:	2800      	cmp	r0, #0
 800127c:	f000 8123 	beq.w	80014c6 <_Z10StartGetBTPv+0x466>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8001280:	4a63      	ldr	r2, [pc, #396]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001282:	79d3      	ldrb	r3, [r2, #7]
 8001284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001288:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 800128a:	4a62      	ldr	r2, [pc, #392]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800128c:	7893      	ldrb	r3, [r2, #2]
 800128e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001292:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(R1)) {
 8001294:	210b      	movs	r1, #11
 8001296:	4620      	mov	r0, r4
 8001298:	f00d fed8 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800129c:	2800      	cmp	r0, #0
 800129e:	f000 811d 	beq.w	80014dc <_Z10StartGetBTPv+0x47c>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 80012a2:	4a5b      	ldr	r2, [pc, #364]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80012a4:	7993      	ldrb	r3, [r2, #6]
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	721a      	strb	r2, [r3, #8]
			if (PS4.getButtonPress(R3)) {
 80012b2:	2107      	movs	r1, #7
 80012b4:	4620      	mov	r0, r4
 80012b6:	f00d fec9 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	f000 8117 	beq.w	80014ee <_Z10StartGetBTPv+0x48e>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80012c0:	4a53      	ldr	r2, [pc, #332]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80012c2:	79d3      	ldrb	r3, [r2, #7]
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 80012ca:	4a52      	ldr	r2, [pc, #328]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80012cc:	7893      	ldrb	r3, [r2, #2]
 80012ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d2:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(SHARE)) {
 80012d4:	2104      	movs	r1, #4
 80012d6:	4620      	mov	r0, r4
 80012d8:	f00d feb8 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80012dc:	2800      	cmp	r0, #0
 80012de:	f000 8111 	beq.w	8001504 <_Z10StartGetBTPv+0x4a4>
				gameHID.ps4ButtonsTag.button_share = 1;
 80012e2:	4a4b      	ldr	r2, [pc, #300]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80012e4:	7993      	ldrb	r3, [r2, #6]
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80012ee:	7893      	ldrb	r3, [r2, #2]
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	7093      	strb	r3, [r2, #2]
			if (PS4.getButtonPress(OPTIONS)) {
 80012f6:	2105      	movs	r1, #5
 80012f8:	4620      	mov	r0, r4
 80012fa:	f00d fea7 	bl	800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80012fe:	2800      	cmp	r0, #0
 8001300:	f000 810b 	beq.w	800151a <_Z10StartGetBTPv+0x4ba>
				gameHID.ps4ButtonsTag.button_start = 1;
 8001304:	4a42      	ldr	r2, [pc, #264]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001306:	7993      	ldrb	r3, [r2, #6]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 800130e:	4a41      	ldr	r2, [pc, #260]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 8001310:	7893      	ldrb	r3, [r2, #2]
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	7093      	strb	r3, [r2, #2]
    osDelay(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f008 fb19 	bl	8009950 <osDelay>
		Usb.Task();
 800131e:	483e      	ldr	r0, [pc, #248]	; (8001418 <_Z10StartGetBTPv+0x3b8>)
 8001320:	f00e fe8a 	bl	8010038 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 8001324:	7d6b      	ldrb	r3, [r5, #21]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8102 	beq.w	8001530 <_Z10StartGetBTPv+0x4d0>
			pairing = 0;
 800132c:	2100      	movs	r1, #0
 800132e:	4b3b      	ldr	r3, [pc, #236]	; (800141c <_Z10StartGetBTPv+0x3bc>)
 8001330:	7019      	strb	r1, [r3, #0]
			ps4_connected = 1;
 8001332:	f04f 0801 	mov.w	r8, #1
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <_Z10StartGetBTPv+0x3c0>)
 8001338:	f883 8000 	strb.w	r8, [r3]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 800133c:	4620      	mov	r0, r4
 800133e:	f00d feb8 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001342:	4f38      	ldr	r7, [pc, #224]	; (8001424 <_Z10StartGetBTPv+0x3c4>)
 8001344:	7038      	strb	r0, [r7, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001346:	4641      	mov	r1, r8
 8001348:	4620      	mov	r0, r4
 800134a:	f00d feb2 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <_Z10StartGetBTPv+0x3c8>)
 8001350:	7018      	strb	r0, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001352:	2102      	movs	r1, #2
 8001354:	4620      	mov	r0, r4
 8001356:	f00d feac 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <_Z10StartGetBTPv+0x3cc>)
 800135c:	7018      	strb	r0, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 800135e:	2103      	movs	r1, #3
 8001360:	4620      	mov	r0, r4
 8001362:	f00d fea6 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001366:	4b32      	ldr	r3, [pc, #200]	; (8001430 <_Z10StartGetBTPv+0x3d0>)
 8001368:	7018      	strb	r0, [r3, #0]
			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117) {// || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 800136a:	783b      	ldrb	r3, [r7, #0]
 800136c:	3b75      	subs	r3, #117	; 0x75
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b14      	cmp	r3, #20
 8001372:	d806      	bhi.n	8001382 <_Z10StartGetBTPv+0x322>
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <_Z10StartGetBTPv+0x3c8>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	3b75      	subs	r3, #117	; 0x75
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b14      	cmp	r3, #20
 800137e:	f67f aea1 	bls.w	80010c4 <_Z10StartGetBTPv+0x64>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001382:	2100      	movs	r1, #0
 8001384:	4620      	mov	r0, r4
 8001386:	f00d fe94 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800138a:	4f21      	ldr	r7, [pc, #132]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 800138c:	3880      	subs	r0, #128	; 0x80
 800138e:	70b8      	strb	r0, [r7, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001390:	2101      	movs	r1, #1
 8001392:	4620      	mov	r0, r4
 8001394:	f00d fe8d 	bl	800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001398:	3880      	subs	r0, #128	; 0x80
 800139a:	b240      	sxtb	r0, r0
 800139c:	70f8      	strb	r0, [r7, #3]
				xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80013a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	8193      	strh	r3, [r2, #12]
				xboxHID.leftStickY = -xboxHID.leftStickY-128;
 80013a8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013ac:	eba3 2000 	sub.w	r0, r3, r0, lsl #8
 80013b0:	81d0      	strh	r0, [r2, #14]
			if(RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <_Z10StartGetBTPv+0x3cc>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3b75      	subs	r3, #117	; 0x75
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b14      	cmp	r3, #20
 80013bc:	f63f ae9a 	bhi.w	80010f4 <_Z10StartGetBTPv+0x94>
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <_Z10StartGetBTPv+0x3d0>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3b75      	subs	r3, #117	; 0x75
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b14      	cmp	r3, #20
 80013ca:	f63f ae93 	bhi.w	80010f4 <_Z10StartGetBTPv+0x94>
				gameHID.Joy2X = 0;
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80013d0:	2300      	movs	r3, #0
 80013d2:	7113      	strb	r3, [r2, #4]
				gameHID.Joy2Y = 0;
 80013d4:	7153      	strb	r3, [r2, #5]
				xboxHID.rightStickX = 0;
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80013d8:	8213      	strh	r3, [r2, #16]
				xboxHID.rightStickY = 0;
 80013da:	8253      	strh	r3, [r2, #18]
 80013dc:	e6a2      	b.n	8001124 <_Z10StartGetBTPv+0xc4>
				PS4.disconnect();
 80013de:	4628      	mov	r0, r5
 80013e0:	f00d f95f 	bl	800e6a2 <_ZN5BTHID10disconnectEv>
				rumble_once = 0;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_Z10StartGetBTPv+0x3d4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e6b3      	b.n	8001154 <_Z10StartGetBTPv+0xf4>
				gameHID.ps4ButtonsTag.button_triangle = 0;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 80013ee:	79da      	ldrb	r2, [r3, #7]
 80013f0:	f36f 0200 	bfc	r2, #0, #1
 80013f4:	71da      	strb	r2, [r3, #7]
				xboxHID.Y = 0;
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	71da      	strb	r2, [r3, #7]
 80013fc:	e6b9      	b.n	8001172 <_Z10StartGetBTPv+0x112>
				gameHID.ps4ButtonsTag.button_circle = 0;
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <_Z10StartGetBTPv+0x3b0>)
 8001400:	799a      	ldrb	r2, [r3, #6]
 8001402:	f36f 12c7 	bfc	r2, #7, #1
 8001406:	719a      	strb	r2, [r3, #6]
				xboxHID.B = 0;
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <_Z10StartGetBTPv+0x3b4>)
 800140a:	2200      	movs	r2, #0
 800140c:	715a      	strb	r2, [r3, #5]
 800140e:	e6bf      	b.n	8001190 <_Z10StartGetBTPv+0x130>
 8001410:	20000564 	.word	0x20000564
 8001414:	200006bc 	.word	0x200006bc
 8001418:	20000490 	.word	0x20000490
 800141c:	200006ac 	.word	0x200006ac
 8001420:	200006ad 	.word	0x200006ad
 8001424:	20000310 	.word	0x20000310
 8001428:	20000311 	.word	0x20000311
 800142c:	200003dc 	.word	0x200003dc
 8001430:	200003dd 	.word	0x200003dd
 8001434:	200006ae 	.word	0x200006ae
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001438:	4b4f      	ldr	r3, [pc, #316]	; (8001578 <_Z10StartGetBTPv+0x518>)
 800143a:	799a      	ldrb	r2, [r3, #6]
 800143c:	f36f 1286 	bfc	r2, #6, #1
 8001440:	719a      	strb	r2, [r3, #6]
				xboxHID.A = 0;
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <_Z10StartGetBTPv+0x51c>)
 8001444:	2200      	movs	r2, #0
 8001446:	711a      	strb	r2, [r3, #4]
 8001448:	e6b1      	b.n	80011ae <_Z10StartGetBTPv+0x14e>
				gameHID.ps4ButtonsTag.button_square = 0;
 800144a:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <_Z10StartGetBTPv+0x518>)
 800144c:	79da      	ldrb	r2, [r3, #7]
 800144e:	f36f 0241 	bfc	r2, #1, #1
 8001452:	71da      	strb	r2, [r3, #7]
				xboxHID.X = 0;
 8001454:	4b49      	ldr	r3, [pc, #292]	; (800157c <_Z10StartGetBTPv+0x51c>)
 8001456:	2200      	movs	r2, #0
 8001458:	719a      	strb	r2, [r3, #6]
 800145a:	e6b7      	b.n	80011cc <_Z10StartGetBTPv+0x16c>
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 800145c:	4b46      	ldr	r3, [pc, #280]	; (8001578 <_Z10StartGetBTPv+0x518>)
 800145e:	79da      	ldrb	r2, [r3, #7]
 8001460:	f36f 0282 	bfc	r2, #2, #1
 8001464:	71da      	strb	r2, [r3, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001466:	4a45      	ldr	r2, [pc, #276]	; (800157c <_Z10StartGetBTPv+0x51c>)
 8001468:	7893      	ldrb	r3, [r2, #2]
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	7093      	strb	r3, [r2, #2]
 8001470:	e6bd      	b.n	80011ee <_Z10StartGetBTPv+0x18e>
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <_Z10StartGetBTPv+0x518>)
 8001474:	79da      	ldrb	r2, [r3, #7]
 8001476:	f36f 02c3 	bfc	r2, #3, #1
 800147a:	71da      	strb	r2, [r3, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 800147c:	4a3f      	ldr	r2, [pc, #252]	; (800157c <_Z10StartGetBTPv+0x51c>)
 800147e:	7893      	ldrb	r3, [r2, #2]
 8001480:	f023 0308 	bic.w	r3, r3, #8
 8001484:	7093      	strb	r3, [r2, #2]
 8001486:	e6c3      	b.n	8001210 <_Z10StartGetBTPv+0x1b0>
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8001488:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <_Z10StartGetBTPv+0x518>)
 800148a:	79da      	ldrb	r2, [r3, #7]
 800148c:	f36f 1245 	bfc	r2, #5, #1
 8001490:	71da      	strb	r2, [r3, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 8001492:	4a3a      	ldr	r2, [pc, #232]	; (800157c <_Z10StartGetBTPv+0x51c>)
 8001494:	7893      	ldrb	r3, [r2, #2]
 8001496:	f023 0302 	bic.w	r3, r3, #2
 800149a:	7093      	strb	r3, [r2, #2]
 800149c:	e6c9      	b.n	8001232 <_Z10StartGetBTPv+0x1d2>
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 800149e:	4b36      	ldr	r3, [pc, #216]	; (8001578 <_Z10StartGetBTPv+0x518>)
 80014a0:	79da      	ldrb	r2, [r3, #7]
 80014a2:	f36f 1204 	bfc	r2, #4, #1
 80014a6:	71da      	strb	r2, [r3, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80014a8:	4a34      	ldr	r2, [pc, #208]	; (800157c <_Z10StartGetBTPv+0x51c>)
 80014aa:	7893      	ldrb	r3, [r2, #2]
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	7093      	strb	r3, [r2, #2]
 80014b2:	e6cf      	b.n	8001254 <_Z10StartGetBTPv+0x1f4>
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 80014b4:	4b30      	ldr	r3, [pc, #192]	; (8001578 <_Z10StartGetBTPv+0x518>)
 80014b6:	799a      	ldrb	r2, [r3, #6]
 80014b8:	f36f 1245 	bfc	r2, #5, #1
 80014bc:	719a      	strb	r2, [r3, #6]
				xboxHID.WHITE = 0;
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <_Z10StartGetBTPv+0x51c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	725a      	strb	r2, [r3, #9]
 80014c4:	e6d5      	b.n	8001272 <_Z10StartGetBTPv+0x212>
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <_Z10StartGetBTPv+0x518>)
 80014c8:	79da      	ldrb	r2, [r3, #7]
 80014ca:	f36f 1286 	bfc	r2, #6, #1
 80014ce:	71da      	strb	r2, [r3, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 80014d0:	4a2a      	ldr	r2, [pc, #168]	; (800157c <_Z10StartGetBTPv+0x51c>)
 80014d2:	7893      	ldrb	r3, [r2, #2]
 80014d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014d8:	7093      	strb	r3, [r2, #2]
 80014da:	e6db      	b.n	8001294 <_Z10StartGetBTPv+0x234>
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <_Z10StartGetBTPv+0x518>)
 80014de:	799a      	ldrb	r2, [r3, #6]
 80014e0:	f36f 1204 	bfc	r2, #4, #1
 80014e4:	719a      	strb	r2, [r3, #6]
				xboxHID.BLACK = 0;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <_Z10StartGetBTPv+0x51c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	721a      	strb	r2, [r3, #8]
 80014ec:	e6e1      	b.n	80012b2 <_Z10StartGetBTPv+0x252>
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <_Z10StartGetBTPv+0x518>)
 80014f0:	79da      	ldrb	r2, [r3, #7]
 80014f2:	f36f 12c7 	bfc	r2, #7, #1
 80014f6:	71da      	strb	r2, [r3, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 80014f8:	4a20      	ldr	r2, [pc, #128]	; (800157c <_Z10StartGetBTPv+0x51c>)
 80014fa:	7893      	ldrb	r3, [r2, #2]
 80014fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001500:	7093      	strb	r3, [r2, #2]
 8001502:	e6e7      	b.n	80012d4 <_Z10StartGetBTPv+0x274>
				gameHID.ps4ButtonsTag.button_share = 0;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <_Z10StartGetBTPv+0x518>)
 8001506:	799a      	ldrb	r2, [r3, #6]
 8001508:	f36f 02c3 	bfc	r2, #3, #1
 800150c:	719a      	strb	r2, [r3, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <_Z10StartGetBTPv+0x51c>)
 8001510:	7893      	ldrb	r3, [r2, #2]
 8001512:	f023 0320 	bic.w	r3, r3, #32
 8001516:	7093      	strb	r3, [r2, #2]
 8001518:	e6ed      	b.n	80012f6 <_Z10StartGetBTPv+0x296>
				gameHID.ps4ButtonsTag.button_start = 0;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <_Z10StartGetBTPv+0x518>)
 800151c:	799a      	ldrb	r2, [r3, #6]
 800151e:	f36f 0282 	bfc	r2, #2, #1
 8001522:	719a      	strb	r2, [r3, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 8001524:	4a15      	ldr	r2, [pc, #84]	; (800157c <_Z10StartGetBTPv+0x51c>)
 8001526:	7893      	ldrb	r3, [r2, #2]
 8001528:	f023 0310 	bic.w	r3, r3, #16
 800152c:	7093      	strb	r3, [r2, #2]
 800152e:	e6f3      	b.n	8001318 <_Z10StartGetBTPv+0x2b8>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001534:	4630      	mov	r0, r6
 8001536:	f000 ff03 	bl	8002340 <HAL_GPIO_ReadPin>
 800153a:	b9c0      	cbnz	r0, 800156e <_Z10StartGetBTPv+0x50e>
			if (!buttonPressed) {
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <_Z10StartGetBTPv+0x520>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b11b      	cbz	r3, 800154a <_Z10StartGetBTPv+0x4ea>
			buttonPressed = true;
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <_Z10StartGetBTPv+0x520>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
 8001548:	e6e6      	b.n	8001318 <_Z10StartGetBTPv+0x2b8>
				Serial.print(F("\r\nButton Pressed"));
 800154a:	490e      	ldr	r1, [pc, #56]	; (8001584 <_Z10StartGetBTPv+0x524>)
 800154c:	480e      	ldr	r0, [pc, #56]	; (8001588 <_Z10StartGetBTPv+0x528>)
 800154e:	f7fe fff3 	bl	8000538 <_ZN5Print5printEPK19__FlashStringHelper>
 8001552:	68ab      	ldr	r3, [r5, #8]
 8001554:	b13b      	cbz	r3, 8001566 <_Z10StartGetBTPv+0x506>
                waitingForConnection = false;
 8001556:	2200      	movs	r2, #0
 8001558:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8001560:	2206      	movs	r2, #6
 8001562:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
				pairing = 1;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <_Z10StartGetBTPv+0x52c>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e7e9      	b.n	8001542 <_Z10StartGetBTPv+0x4e2>
			buttonPressed = false;
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <_Z10StartGetBTPv+0x520>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	e6d0      	b.n	8001318 <_Z10StartGetBTPv+0x2b8>
 8001576:	bf00      	nop
 8001578:	20000564 	.word	0x20000564
 800157c:	200006bc 	.word	0x200006bc
 8001580:	2000054c 	.word	0x2000054c
 8001584:	08010518 	.word	0x08010518
 8001588:	20000438 	.word	0x20000438
 800158c:	200006ac 	.word	0x200006ac

08001590 <_GLOBAL__sub_I_hi2c1>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001590:	b570      	push	{r4, r5, r6, lr}
    Print() : write_error(0) {}
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <_GLOBAL__sub_I_hi2c1+0x54>)
 8001594:	2600      	movs	r6, #0
 8001596:	605e      	str	r6, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8001598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800159c:	609a      	str	r2, [r3, #8]
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <_GLOBAL__sub_I_hi2c1+0x58>)
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_GLOBAL__sub_I_hi2c1+0x5c>)
 80015a4:	611a      	str	r2, [r3, #16]
USB Usb;
 80015a6:	4d12      	ldr	r5, [pc, #72]	; (80015f0 <_GLOBAL__sub_I_hi2c1+0x60>)
 80015a8:	4628      	mov	r0, r5
 80015aa:	f00d feb5 	bl	800f318 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80015ae:	4c11      	ldr	r4, [pc, #68]	; (80015f4 <_GLOBAL__sub_I_hi2c1+0x64>)
 80015b0:	4629      	mov	r1, r5
 80015b2:	4620      	mov	r0, r4
 80015b4:	f00b fd74 	bl	800d0a0 <_ZN3BTDC1EP3USB>
        BTHID(p, pair, pin) {
 80015b8:	4d0f      	ldr	r5, [pc, #60]	; (80015f8 <_GLOBAL__sub_I_hi2c1+0x68>)
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <_GLOBAL__sub_I_hi2c1+0x6c>)
 80015bc:	4632      	mov	r2, r6
 80015be:	4621      	mov	r1, r4
 80015c0:	4628      	mov	r0, r5
 80015c2:	f00d f8ef 	bl	800e7a4 <_ZN5BTHIDC1EP3BTDbPKc>
        PS4Parser() {
 80015c6:	462c      	mov	r4, r5
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <_GLOBAL__sub_I_hi2c1+0x70>)
 80015ca:	f844 3f78 	str.w	r3, [r4, #120]!
                Reset();
 80015ce:	4620      	mov	r0, r4
 80015d0:	f00d fddc 	bl	800f18c <_ZN9PS4Parser5ResetEv>
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <_GLOBAL__sub_I_hi2c1+0x74>)
 80015d6:	602b      	str	r3, [r5, #0]
 80015d8:	3330      	adds	r3, #48	; 0x30
 80015da:	67ab      	str	r3, [r5, #120]	; 0x78
                PS4Parser::Reset();
 80015dc:	4620      	mov	r0, r4
 80015de:	f00d fdd5 	bl	800f18c <_ZN9PS4Parser5ResetEv>
}
 80015e2:	bd70      	pop	{r4, r5, r6, pc}
 80015e4:	20000438 	.word	0x20000438
 80015e8:	08010424 	.word	0x08010424
 80015ec:	20000668 	.word	0x20000668
 80015f0:	20000490 	.word	0x20000490
 80015f4:	200001f8 	.word	0x200001f8
 80015f8:	20000314 	.word	0x20000314
 80015fc:	0801052c 	.word	0x0801052c
 8001600:	0801053c 	.word	0x0801053c
 8001604:	08010548 	.word	0x08010548

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_MspInit+0x54>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <HAL_MspInit+0x54>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_MspInit+0x54>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_MspInit+0x54>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_MspInit+0x54>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_MspInit+0x54>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	210f      	movs	r1, #15
 800164a:	f06f 0001 	mvn.w	r0, #1
 800164e:	f000 fcb9 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_I2C_MspInit+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12c      	bne.n	80016dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800169e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a4:	2312      	movs	r3, #18
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b0:	2304      	movs	r3, #4
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <HAL_I2C_MspInit+0x8c>)
 80016bc:	f000 fcac 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 80016ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_I2C_MspInit+0x88>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020400 	.word	0x40020400

080016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a19      	ldr	r2, [pc, #100]	; (8001774 <HAL_SPI_MspInit+0x84>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12b      	bne.n	800176a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_SPI_MspInit+0x88>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_SPI_MspInit+0x88>)
 800171c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_SPI_MspInit+0x88>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <HAL_SPI_MspInit+0x88>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_SPI_MspInit+0x88>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <HAL_SPI_MspInit+0x88>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800174a:	23e0      	movs	r3, #224	; 0xe0
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175a:	2305      	movs	r3, #5
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_SPI_MspInit+0x8c>)
 8001766:	f000 fc57 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800176a:	bf00      	nop
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40013000 	.word	0x40013000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_TIM_Base_MspInit+0x48>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d115      	bne.n	80017be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_TIM_Base_MspInit+0x4c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0c      	ldr	r2, [pc, #48]	; (80017cc <HAL_TIM_Base_MspInit+0x4c>)
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_TIM_Base_MspInit+0x4c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	202d      	movs	r0, #45	; 0x2d
 80017b4:	f000 fc06 	bl	8001fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80017b8:	202d      	movs	r0, #45	; 0x2d
 80017ba:	f000 fc1f 	bl	8001ffc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40002000 	.word	0x40002000
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_UART_MspInit+0x84>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_UART_MspInit+0x88>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_UART_MspInit+0x88>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800182a:	230c      	movs	r3, #12
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800183a:	2307      	movs	r3, #7
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_UART_MspInit+0x8c>)
 8001846:	f000 fbe7 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40004400 	.word	0x40004400
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	202c      	movs	r0, #44	; 0x2c
 8001876:	f000 fba5 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800187a:	202c      	movs	r0, #44	; 0x2c
 800187c:	f000 fbbe 	bl	8001ffc <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_InitTick+0xa4>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_InitTick+0xa4>)
 800188a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <HAL_InitTick+0xa4>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189c:	f107 0210 	add.w	r2, r7, #16
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fca8 	bl	80041fc <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018ac:	f002 fc7e 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 80018b0:	4603      	mov	r3, r0
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	4a13      	ldr	r2, [pc, #76]	; (8001908 <HAL_InitTick+0xa8>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	3b01      	subs	r3, #1
 80018c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_InitTick+0xac>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <HAL_InitTick+0xb0>)
 80018c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_InitTick+0xac>)
 80018cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_InitTick+0xac>)
 80018d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_InitTick+0xac>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_InitTick+0xac>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <HAL_InitTick+0xac>)
 80018e6:	f004 f9dd 	bl	8005ca4 <HAL_TIM_Base_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d104      	bne.n	80018fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <HAL_InitTick+0xac>)
 80018f2:	f004 fa27 	bl	8005d44 <HAL_TIM_Base_Start_IT>
 80018f6:	4603      	mov	r3, r0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	431bde83 	.word	0x431bde83
 800190c:	20005414 	.word	0x20005414
 8001910:	40001c00 	.word	0x40001c00

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <NMI_Handler+0x4>

0800191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler+0x4>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler+0x4>

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001946:	f004 fa6d 	bl	8005e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20005414 	.word	0x20005414

08001954 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800195a:	f004 fa63 	bl	8005e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000620 	.word	0x20000620

08001968 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800196c:	4802      	ldr	r0, [pc, #8]	; (8001978 <OTG_FS_IRQHandler+0x10>)
 800196e:	f001 facb 	bl	8002f08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20005970 	.word	0x20005970

0800197c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_kill>:

int _kill(int pid, int sig)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001996:	f00e fc6f 	bl	8010278 <__errno>
 800199a:	4603      	mov	r3, r0
 800199c:	2216      	movs	r2, #22
 800199e:	601a      	str	r2, [r3, #0]
	return -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_exit>:

void _exit (int status)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ffe7 	bl	800198c <_kill>
	while (1) {}		/* Make sure we hang here */
 80019be:	e7fe      	b.n	80019be <_exit+0x12>

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SystemInit+0x28>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <SystemInit+0x28>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SystemInit+0x28>)
 80019d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019da:	609a      	str	r2, [r3, #8]
#endif
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019f2:	e003      	b.n	80019fc <LoopCopyDataInit>

080019f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019fa:	3104      	adds	r1, #4

080019fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a04:	d3f6      	bcc.n	80019f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a08:	e002      	b.n	8001a10 <LoopFillZerobss>

08001a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a0c:	f842 3b04 	str.w	r3, [r2], #4

08001a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a14:	d3f9      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a16:	f7ff ffd3 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f00e fc33 	bl	8010284 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff f895 	bl	8000b4c <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a28:	0801157c 	.word	0x0801157c
  ldr  r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a30:	200001b0 	.word	0x200001b0
  ldr  r2, =_sbss
 8001a34:	200001b0 	.word	0x200001b0
  ldr  r3, = _ebss
 8001a38:	20005d7c 	.word	0x20005d7c

08001a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC_IRQHandler>
	...

08001a40 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	2301      	movs	r3, #1
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	1dfb      	adds	r3, r7, #7
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2178      	movs	r1, #120	; 0x78
 8001a5e:	4803      	ldr	r0, [pc, #12]	; (8001a6c <ssd1306_WriteCommand+0x2c>)
 8001a60:	f000 fde4 	bl	800262c <HAL_I2C_Mem_Write>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000574 	.word	0x20000574

08001a70 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	2240      	movs	r2, #64	; 0x40
 8001a8e:	2178      	movs	r1, #120	; 0x78
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <ssd1306_WriteData+0x30>)
 8001a92:	f000 fdcb 	bl	800262c <HAL_I2C_Mem_Write>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000574 	.word	0x20000574

08001aa4 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e00d      	b.n	8001ad0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <ssd1306_Fill+0x1a>
 8001aba:	2100      	movs	r1, #0
 8001abc:	e000      	b.n	8001ac0 <ssd1306_Fill+0x1c>
 8001abe:	21ff      	movs	r1, #255	; 0xff
 8001ac0:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <ssd1306_Fill+0x44>)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	460a      	mov	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3301      	adds	r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d3ed      	bcc.n	8001ab4 <ssd1306_Fill+0x10>
    }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200006d0 	.word	0x200006d0

08001aec <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	e016      	b.n	8001b26 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	3b50      	subs	r3, #80	; 0x50
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff9e 	bl	8001a40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff ff9b 	bl	8001a40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f7ff ff98 	bl	8001a40 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	01db      	lsls	r3, r3, #7
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <ssd1306_UpdateScreen+0x4c>)
 8001b16:	4413      	add	r3, r2
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ffa8 	bl	8001a70 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	3301      	adds	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b07      	cmp	r3, #7
 8001b2a:	d9e5      	bls.n	8001af8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200006d0 	.word	0x200006d0

08001b3c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
 8001b46:	460b      	mov	r3, r1
 8001b48:	71bb      	strb	r3, [r7, #6]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db48      	blt.n	8001be8 <ssd1306_DrawPixel+0xac>
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	2b3f      	cmp	r3, #63	; 0x3f
 8001b5a:	d845      	bhi.n	8001be8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <ssd1306_DrawPixel+0xb8>)
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 8001b72:	797b      	ldrb	r3, [r7, #5]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11a      	bne.n	8001bae <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	79bb      	ldrb	r3, [r7, #6]
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	b2d8      	uxtb	r0, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	01db      	lsls	r3, r3, #7
 8001b84:	4413      	add	r3, r2
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <ssd1306_DrawPixel+0xbc>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b259      	sxtb	r1, r3
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	01db      	lsls	r3, r3, #7
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b2c9      	uxtb	r1, r1
 8001ba8:	4a13      	ldr	r2, [pc, #76]	; (8001bf8 <ssd1306_DrawPixel+0xbc>)
 8001baa:	54d1      	strb	r1, [r2, r3]
 8001bac:	e01d      	b.n	8001bea <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bae:	79fa      	ldrb	r2, [r7, #7]
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	08db      	lsrs	r3, r3, #3
 8001bb4:	b2d8      	uxtb	r0, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	01db      	lsls	r3, r3, #7
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <ssd1306_DrawPixel+0xbc>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	b25a      	sxtb	r2, r3
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b259      	sxtb	r1, r3
 8001bd8:	79fa      	ldrb	r2, [r7, #7]
 8001bda:	4603      	mov	r3, r0
 8001bdc:	01db      	lsls	r3, r3, #7
 8001bde:	4413      	add	r3, r2
 8001be0:	b2c9      	uxtb	r1, r1
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <ssd1306_DrawPixel+0xbc>)
 8001be4:	54d1      	strb	r1, [r2, r3]
 8001be6:	e000      	b.n	8001bea <ssd1306_DrawPixel+0xae>
        return;
 8001be8:	bf00      	nop
    }
}
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000ad0 	.word	0x20000ad0
 8001bf8:	200006d0 	.word	0x200006d0

08001bfc <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	1d38      	adds	r0, r7, #4
 8001c06:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	4613      	mov	r3, r2
 8001c12:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	2b1f      	cmp	r3, #31
 8001c18:	d902      	bls.n	8001c20 <ssd1306_WriteChar+0x24>
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b7e      	cmp	r3, #126	; 0x7e
 8001c1e:	d901      	bls.n	8001c24 <ssd1306_WriteChar+0x28>
        return 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e06d      	b.n	8001d00 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	793b      	ldrb	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	dc06      	bgt.n	8001c40 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c32:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001c34:	885b      	ldrh	r3, [r3, #2]
 8001c36:	461a      	mov	r2, r3
 8001c38:	797b      	ldrb	r3, [r7, #5]
 8001c3a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	dd01      	ble.n	8001c44 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e05d      	b.n	8001d00 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	e04c      	b.n	8001ce4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	3b20      	subs	r3, #32
 8001c50:	7979      	ldrb	r1, [r7, #5]
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4619      	mov	r1, r3
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e034      	b.n	8001cd4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b2d8      	uxtb	r0, r3
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001c8a:	885b      	ldrh	r3, [r3, #2]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	7bba      	ldrb	r2, [r7, #14]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f7ff ff4f 	bl	8001b3c <ssd1306_DrawPixel>
 8001c9e:	e016      	b.n	8001cce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	b2d8      	uxtb	r0, r3
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001cb0:	885b      	ldrh	r3, [r3, #2]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2d9      	uxtb	r1, r3
 8001cbc:	7bbb      	ldrb	r3, [r7, #14]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f7ff ff37 	bl	8001b3c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	793b      	ldrb	r3, [r7, #4]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d3c5      	bcc.n	8001c6a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	797b      	ldrb	r3, [r7, #5]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d3ad      	bcc.n	8001c4a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001cf0:	881a      	ldrh	r2, [r3, #0]
 8001cf2:	793b      	ldrb	r3, [r7, #4]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <ssd1306_WriteChar+0x10c>)
 8001cfc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3724      	adds	r7, #36	; 0x24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}
 8001d08:	20000ad0 	.word	0x20000ad0

08001d0c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	1d38      	adds	r0, r7, #4
 8001d16:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d1a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001d1c:	e012      	b.n	8001d44 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	7818      	ldrb	r0, [r3, #0]
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	1d3a      	adds	r2, r7, #4
 8001d26:	ca06      	ldmia	r2, {r1, r2}
 8001d28:	f7ff ff68 	bl	8001bfc <ssd1306_WriteChar>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d002      	beq.n	8001d3e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	e008      	b.n	8001d50 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e8      	bne.n	8001d1e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460a      	mov	r2, r1
 8001d62:	71fb      	strb	r3, [r7, #7]
 8001d64:	4613      	mov	r3, r2
 8001d66:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <ssd1306_SetCursor+0x2c>)
 8001d6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <ssd1306_SetCursor+0x2c>)
 8001d76:	805a      	strh	r2, [r3, #2]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000ad0 	.word	0x20000ad0

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 f8fc 	bl	8001fae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fd52 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fc24 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000014 	.word	0x20000014
 8001df0:	2000545c 	.word	0x2000545c

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	2000545c 	.word	0x2000545c

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_Delay+0x44>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000014 	.word	0x20000014

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff4c 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd6:	f7ff ff61 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ffb1 	bl	8001f48 <NVIC_EncodePriority>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff80 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff54 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e165      	b.n	8002300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8154 	bne.w	80022fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	2b02      	cmp	r3, #2
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80ae 	beq.w	80022fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_GPIO_Init+0x300>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_GPIO_Init+0x300>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_GPIO_Init+0x300>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a58      	ldr	r2, [pc, #352]	; (800231c <HAL_GPIO_Init+0x304>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <HAL_GPIO_Init+0x308>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d025      	beq.n	8002232 <HAL_GPIO_Init+0x21a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4e      	ldr	r2, [pc, #312]	; (8002324 <HAL_GPIO_Init+0x30c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x216>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4d      	ldr	r2, [pc, #308]	; (8002328 <HAL_GPIO_Init+0x310>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x212>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_GPIO_Init+0x314>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x20e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4b      	ldr	r2, [pc, #300]	; (8002330 <HAL_GPIO_Init+0x318>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x20a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4a      	ldr	r2, [pc, #296]	; (8002334 <HAL_GPIO_Init+0x31c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x206>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_GPIO_Init+0x320>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x202>
 8002216:	2306      	movs	r3, #6
 8002218:	e00c      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 800221a:	2307      	movs	r3, #7
 800221c:	e00a      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 800221e:	2305      	movs	r3, #5
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 8002222:	2304      	movs	r3, #4
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x21c>
 8002232:	2300      	movs	r3, #0
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4093      	lsls	r3, r2
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002244:	4935      	ldr	r1, [pc, #212]	; (800231c <HAL_GPIO_Init+0x304>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002252:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_GPIO_Init+0x324>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002276:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_GPIO_Init+0x324>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800227c:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_GPIO_Init+0x324>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a0:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_GPIO_Init+0x324>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_GPIO_Init+0x324>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_GPIO_Init+0x324>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_GPIO_Init+0x324>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_GPIO_Init+0x324>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3301      	adds	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	f67f ae96 	bls.w	8002034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40013800 	.word	0x40013800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40021400 	.word	0x40021400
 8002338:	40021800 	.word	0x40021800
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	887b      	ldrh	r3, [r7, #2]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e001      	b.n	8002362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e12b      	b.n	800260e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff f948 	bl	8001660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2224      	movs	r2, #36	; 0x24
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002408:	f001 fed0 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a81      	ldr	r2, [pc, #516]	; (8002618 <HAL_I2C_Init+0x274>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d807      	bhi.n	8002428 <HAL_I2C_Init+0x84>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a80      	ldr	r2, [pc, #512]	; (800261c <HAL_I2C_Init+0x278>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e006      	b.n	8002436 <HAL_I2C_Init+0x92>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4a7d      	ldr	r2, [pc, #500]	; (8002620 <HAL_I2C_Init+0x27c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	bf94      	ite	ls
 8002430:	2301      	movls	r3, #1
 8002432:	2300      	movhi	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0e7      	b.n	800260e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a78      	ldr	r2, [pc, #480]	; (8002624 <HAL_I2C_Init+0x280>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a6a      	ldr	r2, [pc, #424]	; (8002618 <HAL_I2C_Init+0x274>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d802      	bhi.n	8002478 <HAL_I2C_Init+0xd4>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3301      	adds	r3, #1
 8002476:	e009      	b.n	800248c <HAL_I2C_Init+0xe8>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_I2C_Init+0x284>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	3301      	adds	r3, #1
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800249e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	495c      	ldr	r1, [pc, #368]	; (8002618 <HAL_I2C_Init+0x274>)
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d819      	bhi.n	80024e0 <HAL_I2C_Init+0x13c>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e59      	subs	r1, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ba:	1c59      	adds	r1, r3, #1
 80024bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024c0:	400b      	ands	r3, r1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_I2C_Init+0x138>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e59      	subs	r1, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024da:	e051      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 80024dc:	2304      	movs	r3, #4
 80024de:	e04f      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d111      	bne.n	800250c <HAL_I2C_Init+0x168>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e58      	subs	r0, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e012      	b.n	8002532 <HAL_I2C_Init+0x18e>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	0099      	lsls	r1, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002522:	3301      	adds	r3, #1
 8002524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x196>
 8002536:	2301      	movs	r3, #1
 8002538:	e022      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10e      	bne.n	8002560 <HAL_I2C_Init+0x1bc>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e58      	subs	r0, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	440b      	add	r3, r1
 8002550:	fbb0 f3f3 	udiv	r3, r0, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800255a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800255e:	e00f      	b.n	8002580 <HAL_I2C_Init+0x1dc>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e58      	subs	r0, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	0099      	lsls	r1, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	fbb0 f3f3 	udiv	r3, r0, r3
 8002576:	3301      	adds	r3, #1
 8002578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	6809      	ldr	r1, [r1, #0]
 8002584:	4313      	orrs	r3, r2
 8002586:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6911      	ldr	r1, [r2, #16]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68d2      	ldr	r2, [r2, #12]
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	000186a0 	.word	0x000186a0
 800261c:	001e847f 	.word	0x001e847f
 8002620:	003d08ff 	.word	0x003d08ff
 8002624:	431bde83 	.word	0x431bde83
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7ff fbd5 	bl	8001df4 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 80d9 	bne.w	800280c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	496d      	ldr	r1, [pc, #436]	; (8002818 <HAL_I2C_Mem_Write+0x1ec>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f971 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e0cc      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Write+0x56>
 800267e:	2302      	movs	r3, #2
 8002680:	e0c5      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2221      	movs	r2, #33	; 0x21
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_I2C_Mem_Write+0x1f0>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f890 	bl	8002820 <I2C_RequestMemoryWrite>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d052      	beq.n	80027ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e081      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f9f2 	bl	8002af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b04      	cmp	r3, #4
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06b      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d11b      	bne.n	80027ac <HAL_I2C_Mem_Write+0x180>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d017      	beq.n	80027ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1aa      	bne.n	800270a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f9de 	bl	8002b7a <I2C_WaitOnBTFFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d107      	bne.n	80027dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e016      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	00100002 	.word	0x00100002
 800281c:	ffff0000 	.word	0xffff0000

08002820 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	817b      	strh	r3, [r7, #10]
 8002832:	460b      	mov	r3, r1
 8002834:	813b      	strh	r3, [r7, #8]
 8002836:	4613      	mov	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002848:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	2200      	movs	r2, #0
 8002852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f878 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00d      	beq.n	800287e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	d103      	bne.n	800287a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e05f      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800287e:	897b      	ldrh	r3, [r7, #10]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800288c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	492d      	ldr	r1, [pc, #180]	; (8002948 <I2C_RequestMemoryWrite+0x128>)
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f8b0 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04c      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f91a 	bl	8002af8 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d107      	bne.n	80028e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e02b      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]
 80028f6:	e021      	b.n	800293c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8f4 	bl	8002af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b04      	cmp	r3, #4
 800291c:	d107      	bne.n	800292e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e005      	b.n	800293e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002932:	893b      	ldrh	r3, [r7, #8]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	00010002 	.word	0x00010002

0800294c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800295c:	e025      	b.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d021      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7ff fa45 	bl	8001df4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e023      	b.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10d      	bne.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	e00c      	b.n	80029ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d0b6      	beq.n	800295e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a08:	e051      	b.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d123      	bne.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e046      	b.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d021      	beq.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff f9c3 	bl	8001df4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e020      	b.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10c      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e00b      	b.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4013      	ands	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d18d      	bne.n	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b04:	e02d      	b.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f878 	bl	8002bfc <I2C_IsAcknowledgeFailed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02d      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d021      	beq.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7ff f969 	bl	8001df4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d1ca      	bne.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b86:	e02d      	b.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f837 	bl	8002bfc <I2C_IsAcknowledgeFailed>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e02d      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d021      	beq.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7ff f928 	bl	8001df4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d1ca      	bne.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c12:	d11b      	bne.n	8002c4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c5c:	b08f      	sub	sp, #60	; 0x3c
 8002c5e:	af0a      	add	r7, sp, #40	; 0x28
 8002c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e116      	b.n	8002e9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f009 fc18 	bl	800c4bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 ff47 	bl	8006b3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	687e      	ldr	r6, [r7, #4]
 8002cb8:	466d      	mov	r5, sp
 8002cba:	f106 0410 	add.w	r4, r6, #16
 8002cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cce:	1d33      	adds	r3, r6, #4
 8002cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd2:	6838      	ldr	r0, [r7, #0]
 8002cd4:	f003 fe1e 	bl	8006914 <USB_CoreInit>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0d7      	b.n	8002e9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f003 ff35 	bl	8006b60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	e04a      	b.n	8002d92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	333d      	adds	r3, #61	; 0x3d
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	333c      	adds	r3, #60	; 0x3c
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	b298      	uxth	r0, r3
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3342      	adds	r3, #66	; 0x42
 8002d38:	4602      	mov	r2, r0
 8002d3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	333f      	adds	r3, #63	; 0x3f
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3344      	adds	r3, #68	; 0x44
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3348      	adds	r3, #72	; 0x48
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	3350      	adds	r3, #80	; 0x50
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3af      	bcc.n	8002cfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e044      	b.n	8002e2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	1a9b      	subs	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dfa:	7bfa      	ldrb	r2, [r7, #15]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d3b5      	bcc.n	8002da2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	687e      	ldr	r6, [r7, #4]
 8002e3e:	466d      	mov	r5, sp
 8002e40:	f106 0410 	add.w	r4, r6, #16
 8002e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e54:	1d33      	adds	r3, r6, #4
 8002e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	f003 feab 	bl	8006bb4 <USB_DevInit>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e014      	b.n	8002e9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f001 f879 	bl	8003f80 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f004 fee6 	bl	8007c64 <USB_DevDisconnect>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ea2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_PCD_Start+0x1c>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e020      	b.n	8002f00 <HAL_PCD_Start+0x5e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d109      	bne.n	8002ee2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d005      	beq.n	8002ee2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f003 fe18 	bl	8006b1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f004 fe96 	bl	8007c22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b08d      	sub	sp, #52	; 0x34
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 ff54 	bl	8007dcc <USB_GetMode>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 83ca 	bne.w	80036c0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 feb8 	bl	8007ca6 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 83c0 	beq.w	80036be <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 feaf 	bl	8007ca6 <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d107      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f002 0202 	and.w	r2, r2, #2
 8002f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f004 fe9d 	bl	8007ca6 <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b10      	cmp	r3, #16
 8002f74:	d161      	bne.n	800303a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0210 	bic.w	r2, r2, #16
 8002f84:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 020f 	and.w	r2, r3, #15
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	0c5b      	lsrs	r3, r3, #17
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d124      	bne.n	8002ffc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d035      	beq.n	800302a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a38      	ldr	r0, [r7, #32]
 8002fd2:	f004 fd03 	bl	80079dc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fe2:	441a      	add	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff4:	441a      	add	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	e016      	b.n	800302a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	0c5b      	lsrs	r3, r3, #17
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	2b06      	cmp	r3, #6
 8003006:	d110      	bne.n	800302a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800300e:	2208      	movs	r2, #8
 8003010:	4619      	mov	r1, r3
 8003012:	6a38      	ldr	r0, [r7, #32]
 8003014:	f004 fce2 	bl	80079dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003024:	441a      	add	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0210 	orr.w	r2, r2, #16
 8003038:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f004 fe31 	bl	8007ca6 <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800304e:	d16e      	bne.n	800312e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f004 fe37 	bl	8007ccc <USB_ReadDevAllOutEpInterrupt>
 800305e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003060:	e062      	b.n	8003128 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d057      	beq.n	800311c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f004 fe5c 	bl	8007d34 <USB_ReadDevOutEPInterrupt>
 800307c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00c      	beq.n	80030a2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	2301      	movs	r3, #1
 8003098:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800309a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 fdc5 	bl	8003c2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00c      	beq.n	80030c6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	461a      	mov	r2, r3
 80030ba:	2308      	movs	r3, #8
 80030bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 febf 	bl	8003e44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030dc:	461a      	mov	r2, r3
 80030de:	2310      	movs	r3, #16
 80030e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	2320      	movs	r3, #32
 80030fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	461a      	mov	r2, r3
 8003116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800311a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	3301      	adds	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312a:	2b00      	cmp	r3, #0
 800312c:	d199      	bne.n	8003062 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fdb7 	bl	8007ca6 <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003142:	f040 80c0 	bne.w	80032c6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f004 fdd8 	bl	8007d00 <USB_ReadDevAllInEpInterrupt>
 8003150:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003156:	e0b2      	b.n	80032be <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80a7 	beq.w	80032b2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f004 fdfe 	bl	8007d70 <USB_ReadDevInEPInterrupt>
 8003174:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d057      	beq.n	8003230 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	2201      	movs	r2, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031a0:	4013      	ands	r3, r2
 80031a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	461a      	mov	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d132      	bne.n	8003224 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3348      	adds	r3, #72	; 0x48
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	3344      	adds	r3, #68	; 0x44
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4419      	add	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4403      	add	r3, r0
 80031f2:	3348      	adds	r3, #72	; 0x48
 80031f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <HAL_PCD_IRQHandler+0x31c>
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3350      	adds	r3, #80	; 0x50
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d108      	bne.n	8003224 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800321c:	461a      	mov	r2, r3
 800321e:	2101      	movs	r1, #1
 8003220:	f004 fe06 	bl	8007e30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	b2db      	uxtb	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f009 f9c7 	bl	800c5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003246:	461a      	mov	r2, r3
 8003248:	2308      	movs	r3, #8
 800324a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003262:	461a      	mov	r2, r3
 8003264:	2310      	movs	r3, #16
 8003266:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800327e:	461a      	mov	r2, r3
 8003280:	2340      	movs	r3, #64	; 0x40
 8003282:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329a:	461a      	mov	r2, r3
 800329c:	2302      	movs	r3, #2
 800329e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fc30 	bl	8003b12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	3301      	adds	r3, #1
 80032b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f47f af49 	bne.w	8003158 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 fceb 	bl	8007ca6 <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032da:	d122      	bne.n	8003322 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003302:	2100      	movs	r1, #0
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f009 fb97 	bl	800ca38 <HAL_PCDEx_LPM_Callback>
 800330a:	e002      	b.n	8003312 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f009 f9cd 	bl	800c6ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fcbd 	bl	8007ca6 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003336:	d112      	bne.n	800335e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d102      	bne.n	800334e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f009 f989 	bl	800c660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800335c:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fc9f 	bl	8007ca6 <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003372:	d121      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003382:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d111      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033a8:	2101      	movs	r1, #1
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f009 fb44 	bl	800ca38 <HAL_PCDEx_LPM_Callback>
 80033b0:	e002      	b.n	80033b8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f009 f954 	bl	800c660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 fc72 	bl	8007ca6 <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033cc:	f040 80c7 	bne.w	800355e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2110      	movs	r1, #16
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fd40 	bl	8006e70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f4:	e056      	b.n	80034a4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	461a      	mov	r2, r3
 8003404:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003408:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341a:	0151      	lsls	r1, r2, #5
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	440a      	add	r2, r1
 8003420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003428:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343a:	0151      	lsls	r1, r2, #5
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	440a      	add	r2, r1
 8003440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003444:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003448:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800345c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800346e:	0151      	lsls	r1, r2, #5
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	440a      	add	r2, r1
 8003474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003478:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800347c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348e:	0151      	lsls	r1, r2, #5
 8003490:	69fa      	ldr	r2, [r7, #28]
 8003492:	440a      	add	r2, r1
 8003494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003498:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800349c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	3301      	adds	r3, #1
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d3a3      	bcc.n	80033f6 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80034c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034da:	f043 030b 	orr.w	r3, r3, #11
 80034de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f0:	f043 030b 	orr.w	r3, r3, #11
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	e015      	b.n	8003524 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800350a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800350e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800351e:	f043 030b 	orr.w	r3, r3, #11
 8003522:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003532:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003536:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003548:	461a      	mov	r2, r3
 800354a:	f004 fc71 	bl	8007e30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800355c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f004 fb9f 	bl	8007ca6 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	d124      	bne.n	80035be <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f004 fc35 	bl	8007de8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f003 fcd5 	bl	8006f32 <USB_GetDevSpeed>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681c      	ldr	r4, [r3, #0]
 8003594:	f000 fdfe 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 8003598:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4620      	mov	r0, r4
 80035a4:	f003 fa18 	bl	80069d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f009 f830 	bl	800c60e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80035bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 fb6f 	bl	8007ca6 <USB_ReadInterrupts>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d10a      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f009 f80d 	bl	800c5f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f002 0208 	and.w	r2, r2, #8
 80035e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f004 fb5a 	bl	8007ca6 <USB_ReadInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035fc:	d10f      	bne.n	800361e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f009 f86f 	bl	800c6ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800361c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fb3f 	bl	8007ca6 <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003632:	d10f      	bne.n	8003654 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f009 f842 	bl	800c6c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fb24 	bl	8007ca6 <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d10a      	bne.n	8003680 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f009 f850 	bl	800c710 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800367e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f004 fb0e 	bl	8007ca6 <USB_ReadInterrupts>
 800368a:	4603      	mov	r3, r0
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d115      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f009 f840 	bl	800c72c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	e000      	b.n	80036c0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80036be:	bf00      	nop
    }
  }
}
 80036c0:	3734      	adds	r7, #52	; 0x34
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}

080036c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_PCD_SetAddress+0x1a>
 80036dc:	2302      	movs	r3, #2
 80036de:	e013      	b.n	8003708 <HAL_PCD_SetAddress+0x42>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f004 fa6c 	bl	8007bd6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	70fb      	strb	r3, [r7, #3]
 8003722:	460b      	mov	r3, r1
 8003724:	803b      	strh	r3, [r7, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800372e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003732:	2b00      	cmp	r3, #0
 8003734:	da0f      	bge.n	8003756 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	f003 020f 	and.w	r2, r3, #15
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	3338      	adds	r3, #56	; 0x38
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	705a      	strb	r2, [r3, #1]
 8003754:	e00f      	b.n	8003776 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003782:	883a      	ldrh	r2, [r7, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	78ba      	ldrb	r2, [r7, #2]
 800378c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037a0:	78bb      	ldrb	r3, [r7, #2]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d102      	bne.n	80037ac <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_PCD_EP_Open+0xaa>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e00e      	b.n	80037d8 <HAL_PCD_EP_Open+0xc8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68f9      	ldr	r1, [r7, #12]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fbd7 	bl	8006f7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da0f      	bge.n	8003814 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 020f 	and.w	r2, r3, #15
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	3338      	adds	r3, #56	; 0x38
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	705a      	strb	r2, [r3, #1]
 8003812:	e00f      	b.n	8003834 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_PCD_EP_Close+0x6e>
 800384a:	2302      	movs	r3, #2
 800384c:	e00e      	b.n	800386c <HAL_PCD_EP_Close+0x8c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	4618      	mov	r0, r3
 800385e:	f003 fc15 	bl	800708c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	460b      	mov	r3, r1
 8003882:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003884:	7afb      	ldrb	r3, [r7, #11]
 8003886:	f003 020f 	and.w	r2, r3, #15
 800388a:	4613      	mov	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4413      	add	r3, r2
 800389a:	3304      	adds	r3, #4
 800389c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2200      	movs	r2, #0
 80038ae:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038d0:	7afb      	ldrb	r3, [r7, #11]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	6979      	ldr	r1, [r7, #20]
 80038e8:	f003 fef0 	bl	80076cc <USB_EP0StartXfer>
 80038ec:	e008      	b.n	8003900 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	f003 fca2 	bl	8007244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	460b      	mov	r3, r1
 8003918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391a:	7afb      	ldrb	r3, [r7, #11]
 800391c:	f003 020f 	and.w	r2, r3, #15
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3338      	adds	r3, #56	; 0x38
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	3304      	adds	r3, #4
 8003930:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2201      	movs	r2, #1
 8003948:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394a:	7afb      	ldrb	r3, [r7, #11]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	b2da      	uxtb	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	f003 fea6 	bl	80076cc <USB_EP0StartXfer>
 8003980:	e008      	b.n	8003994 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	f003 fc58 	bl	8007244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d901      	bls.n	80039bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e050      	b.n	8003a5e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da0f      	bge.n	80039e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	3338      	adds	r3, #56	; 0x38
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4413      	add	r3, r2
 80039d8:	3304      	adds	r3, #4
 80039da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	705a      	strb	r2, [r3, #1]
 80039e2:	e00d      	b.n	8003a00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	4413      	add	r3, r2
 80039f6:	3304      	adds	r3, #4
 80039f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_PCD_EP_SetStall+0x82>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e01e      	b.n	8003a5e <HAL_PCD_EP_SetStall+0xc0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68f9      	ldr	r1, [r7, #12]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fffd 	bl	8007a2e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10a      	bne.n	8003a54 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	b2d9      	uxtb	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f004 f9ee 	bl	8007e30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d901      	bls.n	8003a84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e042      	b.n	8003b0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	da0f      	bge.n	8003aac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 020f 	and.w	r2, r3, #15
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	3338      	adds	r3, #56	; 0x38
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	705a      	strb	r2, [r3, #1]
 8003aaa:	e00f      	b.n	8003acc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	f003 020f 	and.w	r2, r3, #15
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_PCD_EP_ClrStall+0x86>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e00e      	b.n	8003b0a <HAL_PCD_EP_ClrStall+0xa4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68f9      	ldr	r1, [r7, #12]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 f805 	bl	8007b0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b08a      	sub	sp, #40	; 0x28
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	3338      	adds	r3, #56	; 0x38
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d901      	bls.n	8003b4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e06c      	b.n	8003c24 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d902      	bls.n	8003b66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3303      	adds	r3, #3
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b6e:	e02b      	b.n	8003bc8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	695a      	ldr	r2, [r3, #20]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d902      	bls.n	8003b8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3303      	adds	r3, #3
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68d9      	ldr	r1, [r3, #12]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4603      	mov	r3, r0
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f003 fee1 	bl	8007972 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d809      	bhi.n	8003bf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d203      	bcs.n	8003bf2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1be      	bne.n	8003b70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d811      	bhi.n	8003c22 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	2201      	movs	r2, #1
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	6939      	ldr	r1, [r7, #16]
 8003c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c1e:	4013      	ands	r3, r2
 8003c20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	333c      	adds	r3, #60	; 0x3c
 8003c44:	3304      	adds	r3, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	f040 80a0 	bne.w	8003da4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d015      	beq.n	8003c9a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a72      	ldr	r2, [pc, #456]	; (8003e3c <PCD_EP_OutXfrComplete_int+0x210>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	f240 80dd 	bls.w	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 80d7 	beq.w	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c96:	6093      	str	r3, [r2, #8]
 8003c98:	e0cb      	b.n	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2320      	movs	r3, #32
 8003cb4:	6093      	str	r3, [r2, #8]
 8003cb6:	e0bc      	b.n	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 80b7 	bne.w	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a5d      	ldr	r2, [pc, #372]	; (8003e3c <PCD_EP_OutXfrComplete_int+0x210>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d90f      	bls.n	8003cec <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	e0a2      	b.n	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cfe:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	0159      	lsls	r1, r3, #5
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	440b      	add	r3, r1
 8003d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003d12:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4403      	add	r3, r0
 8003d22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d26:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4403      	add	r3, r0
 8003d4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4419      	add	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4403      	add	r3, r0
 8003d60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d64:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d114      	bne.n	8003d96 <PCD_EP_OutXfrComplete_int+0x16a>
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d108      	bne.n	8003d96 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2101      	movs	r1, #1
 8003d92:	f004 f84d 	bl	8007e30 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f008 fbf3 	bl	800c588 <HAL_PCD_DataOutStageCallback>
 8003da2:	e046      	b.n	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <PCD_EP_OutXfrComplete_int+0x214>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d124      	bne.n	8003df6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc8:	6093      	str	r3, [r2, #8]
 8003dca:	e032      	b.n	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	461a      	mov	r2, r3
 8003de4:	2320      	movs	r3, #32
 8003de6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	4619      	mov	r1, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f008 fbca 	bl	800c588 <HAL_PCD_DataOutStageCallback>
 8003df4:	e01d      	b.n	8003e32 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d114      	bne.n	8003e26 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2100      	movs	r1, #0
 8003e22:	f004 f805 	bl	8007e30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f008 fbab 	bl	800c588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	4f54300a 	.word	0x4f54300a
 8003e40:	4f54310a 	.word	0x4f54310a

08003e44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	333c      	adds	r3, #60	; 0x3c
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d90e      	bls.n	8003e98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	461a      	mov	r2, r3
 8003e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f008 fb63 	bl	800c564 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <PCD_EP_OutSetupPacket_int+0x88>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d90c      	bls.n	8003ec0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d108      	bne.n	8003ec0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2101      	movs	r1, #1
 8003ebc:	f003 ffb8 	bl	8007e30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	4f54300a 	.word	0x4f54300a

08003ed0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
 8003edc:	4613      	mov	r3, r2
 8003ede:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eee:	883b      	ldrh	r3, [r7, #0]
 8003ef0:	0419      	lsls	r1, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
 8003efc:	e028      	b.n	8003f50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e00d      	b.n	8003f2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	3340      	adds	r3, #64	; 0x40
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4413      	add	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
 8003f2e:	7bfa      	ldrb	r2, [r7, #15]
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d3ec      	bcc.n	8003f12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f38:	883b      	ldrh	r3, [r7, #0]
 8003f3a:	0418      	lsls	r0, r3, #16
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6819      	ldr	r1, [r3, #0]
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4302      	orrs	r2, r0
 8003f48:	3340      	adds	r3, #64	; 0x40
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	460b      	mov	r3, r1
 8003f68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	f043 0303 	orr.w	r3, r3, #3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0cc      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d90c      	bls.n	8004004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b63      	ldr	r3, [pc, #396]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0b8      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d020      	beq.n	8004052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800403e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004040:	4b50      	ldr	r3, [pc, #320]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	494d      	ldr	r1, [pc, #308]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d044      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d119      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e07f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d003      	beq.n	8004086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004082:	2b03      	cmp	r3, #3
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	4b3f      	ldr	r3, [pc, #252]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e06f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004096:	4b3b      	ldr	r3, [pc, #236]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e067      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a6:	4b37      	ldr	r3, [pc, #220]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f023 0203 	bic.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	4934      	ldr	r1, [pc, #208]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b8:	f7fd fe9c 	bl	8001df4 <HAL_GetTick>
 80040bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c0:	f7fd fe98 	bl	8001df4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e04f      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	4b2b      	ldr	r3, [pc, #172]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 020c 	and.w	r2, r3, #12
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d1eb      	bne.n	80040c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d20c      	bcs.n	8004110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fe:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e032      	b.n	8004176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4916      	ldr	r1, [pc, #88]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	490e      	ldr	r1, [pc, #56]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800414e:	f000 fbb1 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8004152:	4602      	mov	r2, r0
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	490a      	ldr	r1, [pc, #40]	; (8004188 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	5ccb      	ldrb	r3, [r1, r3]
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	4a09      	ldr	r2, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1c8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fb76 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023c00 	.word	0x40023c00
 8004184:	40023800 	.word	0x40023800
 8004188:	08010668 	.word	0x08010668
 800418c:	20000004 	.word	0x20000004
 8004190:	20000010 	.word	0x20000010

08004194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800419a:	681b      	ldr	r3, [r3, #0]
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000004 	.word	0x20000004

080041ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b0:	f7ff fff0 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	0a9b      	lsrs	r3, r3, #10
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4903      	ldr	r1, [pc, #12]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08010678 	.word	0x08010678

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041d8:	f7ff ffdc 	bl	8004194 <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0b5b      	lsrs	r3, r3, #13
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08010678 	.word	0x08010678

080041fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	220f      	movs	r2, #15
 800420a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800420c:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0203 	and.w	r2, r3, #3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004230:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCC_GetClockConfig+0x5c>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	08db      	lsrs	r3, r3, #3
 8004236:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <HAL_RCC_GetClockConfig+0x60>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 020f 	and.w	r2, r3, #15
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40023c00 	.word	0x40023c00

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004298:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800429a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800429e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	496c      	ldr	r1, [pc, #432]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80042b6:	2301      	movs	r3, #1
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d010      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80042c6:	4b64      	ldr	r3, [pc, #400]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	4960      	ldr	r1, [pc, #384]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80042e4:	2301      	movs	r3, #1
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042f4:	4b58      	ldr	r3, [pc, #352]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	4955      	ldr	r1, [pc, #340]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004312:	d101      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004314:	2301      	movs	r3, #1
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004320:	2301      	movs	r3, #1
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d017      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004330:	4b49      	ldr	r3, [pc, #292]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004336:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433e:	4946      	ldr	r1, [pc, #280]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434e:	d101      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004350:	2301      	movs	r3, #1
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 808a 	beq.w	8004482 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	4b39      	ldr	r3, [pc, #228]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	4a38      	ldr	r2, [pc, #224]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	6413      	str	r3, [r2, #64]	; 0x40
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800438a:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004394:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fd fd2d 	bl	8001df4 <HAL_GetTick>
 800439a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800439e:	f7fd fd29 	bl	8001df4 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e278      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b0:	4b2a      	ldr	r3, [pc, #168]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043bc:	4b26      	ldr	r3, [pc, #152]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02f      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d028      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043da:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e4:	4b1e      	ldr	r3, [pc, #120]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d114      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004402:	f7fd fcf7 	bl	8001df4 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fd fcf3 	bl	8001df4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e240      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004438:	d114      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	4902      	ldr	r1, [pc, #8]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	608b      	str	r3, [r1, #8]
 8004454:	e00c      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	40007000 	.word	0x40007000
 8004460:	42470e40 	.word	0x42470e40
 8004464:	4b4a      	ldr	r3, [pc, #296]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a49      	ldr	r2, [pc, #292]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800446a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800446e:	6093      	str	r3, [r2, #8]
 8004470:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	4944      	ldr	r1, [pc, #272]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800447e:	4313      	orrs	r3, r2
 8004480:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004494:	4b3f      	ldr	r3, [pc, #252]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004496:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	4937      	ldr	r1, [pc, #220]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044c6:	4b32      	ldr	r3, [pc, #200]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d4:	492e      	ldr	r1, [pc, #184]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d011      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044e8:	4b29      	ldr	r3, [pc, #164]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	4926      	ldr	r1, [pc, #152]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004506:	d101      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004508:	2301      	movs	r3, #1
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	491a      	ldr	r1, [pc, #104]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800453c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004540:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004548:	4911      	ldr	r1, [pc, #68]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004558:	d101      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800455a:	2301      	movs	r3, #1
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d005      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456c:	f040 80ff 	bne.w	800476e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004576:	f7fd fc3d 	bl	8001df4 <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800457c:	e00e      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800457e:	f7fd fc39 	bl	8001df4 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d907      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e188      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004590:	40023800 	.word	0x40023800
 8004594:	424711e0 	.word	0x424711e0
 8004598:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800459c:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ea      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d028      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d124      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045d0:	4b71      	ldr	r3, [pc, #452]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	3301      	adds	r3, #1
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e8:	0e1b      	lsrs	r3, r3, #24
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	019b      	lsls	r3, r3, #6
 80045fa:	431a      	orrs	r2, r3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	431a      	orrs	r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	071b      	lsls	r3, r3, #28
 8004612:	4961      	ldr	r1, [pc, #388]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004638:	2b00      	cmp	r3, #0
 800463a:	d035      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004644:	d130      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004646:	4b54      	ldr	r3, [pc, #336]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	3301      	adds	r3, #1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004658:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	0f1b      	lsrs	r3, r3, #28
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	019b      	lsls	r3, r3, #6
 8004670:	431a      	orrs	r2, r3
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	3b01      	subs	r3, #1
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	071b      	lsls	r3, r3, #28
 8004688:	4943      	ldr	r1, [pc, #268]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004696:	f023 021f 	bic.w	r2, r3, #31
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	493d      	ldr	r1, [pc, #244]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d029      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046bc:	d124      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	3301      	adds	r3, #1
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046d0:	4b31      	ldr	r3, [pc, #196]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	0f1b      	lsrs	r3, r3, #28
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	019b      	lsls	r3, r3, #6
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	431a      	orrs	r2, r3
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	431a      	orrs	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	071b      	lsls	r3, r3, #28
 8004700:	4925      	ldr	r1, [pc, #148]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004710:	2b00      	cmp	r3, #0
 8004712:	d016      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	4917      	ldr	r1, [pc, #92]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004748:	f7fd fb54 	bl	8001df4 <HAL_GetTick>
 800474c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004750:	f7fd fb50 	bl	8001df4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e09f      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 8095 	bne.w	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800477c:	f7fd fb3a 	bl	8001df4 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004782:	e00f      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004784:	f7fd fb36 	bl	8001df4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d908      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e085      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	42470068 	.word	0x42470068
 80047a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047a4:	4b41      	ldr	r3, [pc, #260]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d0e8      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02b      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d127      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80047da:	4b34      	ldr	r3, [pc, #208]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	431a      	orrs	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	4928      	ldr	r1, [pc, #160]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004810:	4b26      	ldr	r3, [pc, #152]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004816:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	3b01      	subs	r3, #1
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	4922      	ldr	r1, [pc, #136]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01d      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800483e:	d118      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004846:	0e1b      	lsrs	r3, r3, #24
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	019b      	lsls	r3, r3, #6
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	3b01      	subs	r3, #1
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	061b      	lsls	r3, r3, #24
 800486a:	4910      	ldr	r1, [pc, #64]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004878:	f7fd fabc 	bl	8001df4 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004880:	f7fd fab8 	bl	8001df4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e007      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800489a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800489e:	d1ef      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3730      	adds	r7, #48	; 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
 80048b0:	42470070 	.word	0x42470070

080048b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b8:	b088      	sub	sp, #32
 80048ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4bce      	ldr	r3, [pc, #824]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b0c      	cmp	r3, #12
 80048da:	f200 818d 	bhi.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x344>
 80048de:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <HAL_RCC_GetSysClockFreq+0x30>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	08004919 	.word	0x08004919
 80048e8:	08004bf9 	.word	0x08004bf9
 80048ec:	08004bf9 	.word	0x08004bf9
 80048f0:	08004bf9 	.word	0x08004bf9
 80048f4:	0800491f 	.word	0x0800491f
 80048f8:	08004bf9 	.word	0x08004bf9
 80048fc:	08004bf9 	.word	0x08004bf9
 8004900:	08004bf9 	.word	0x08004bf9
 8004904:	08004925 	.word	0x08004925
 8004908:	08004bf9 	.word	0x08004bf9
 800490c:	08004bf9 	.word	0x08004bf9
 8004910:	08004bf9 	.word	0x08004bf9
 8004914:	08004a99 	.word	0x08004a99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4bbd      	ldr	r3, [pc, #756]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x35c>)
 800491a:	61bb      	str	r3, [r7, #24]
       break;
 800491c:	e16f      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800491e:	4bbd      	ldr	r3, [pc, #756]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x360>)
 8004920:	61bb      	str	r3, [r7, #24]
      break;
 8004922:	e16c      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004924:	4bb9      	ldr	r3, [pc, #740]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800492e:	4bb7      	ldr	r3, [pc, #732]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d053      	beq.n	80049e2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493a:	4bb4      	ldr	r3, [pc, #720]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	461a      	mov	r2, r3
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f240 10ff 	movw	r0, #511	; 0x1ff
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	ea02 0400 	and.w	r4, r2, r0
 8004952:	603c      	str	r4, [r7, #0]
 8004954:	400b      	ands	r3, r1
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e9d7 4500 	ldrd	r4, r5, [r7]
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	014b      	lsls	r3, r1, #5
 800496a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800496e:	0142      	lsls	r2, r0, #5
 8004970:	4610      	mov	r0, r2
 8004972:	4619      	mov	r1, r3
 8004974:	4623      	mov	r3, r4
 8004976:	1ac0      	subs	r0, r0, r3
 8004978:	462b      	mov	r3, r5
 800497a:	eb61 0103 	sbc.w	r1, r1, r3
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	018b      	lsls	r3, r1, #6
 8004988:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800498c:	0182      	lsls	r2, r0, #6
 800498e:	1a12      	subs	r2, r2, r0
 8004990:	eb63 0301 	sbc.w	r3, r3, r1
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	00d9      	lsls	r1, r3, #3
 800499e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a2:	00d0      	lsls	r0, r2, #3
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4621      	mov	r1, r4
 80049aa:	1852      	adds	r2, r2, r1
 80049ac:	4629      	mov	r1, r5
 80049ae:	eb43 0101 	adc.w	r1, r3, r1
 80049b2:	460b      	mov	r3, r1
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	0259      	lsls	r1, r3, #9
 80049be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049c2:	0250      	lsls	r0, r2, #9
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f7fb fc24 	bl	8000220 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4613      	mov	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	e04c      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e2:	4b8a      	ldr	r3, [pc, #552]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	461a      	mov	r2, r3
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	ea02 0a00 	and.w	sl, r2, r0
 80049fa:	ea03 0b01 	and.w	fp, r3, r1
 80049fe:	4650      	mov	r0, sl
 8004a00:	4659      	mov	r1, fp
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	014b      	lsls	r3, r1, #5
 8004a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a10:	0142      	lsls	r2, r0, #5
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	ebb0 000a 	subs.w	r0, r0, sl
 8004a1a:	eb61 010b 	sbc.w	r1, r1, fp
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	018b      	lsls	r3, r1, #6
 8004a28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a2c:	0182      	lsls	r2, r0, #6
 8004a2e:	1a12      	subs	r2, r2, r0
 8004a30:	eb63 0301 	sbc.w	r3, r3, r1
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	00d9      	lsls	r1, r3, #3
 8004a3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a42:	00d0      	lsls	r0, r2, #3
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	eb12 020a 	adds.w	r2, r2, sl
 8004a4c:	eb43 030b 	adc.w	r3, r3, fp
 8004a50:	f04f 0000 	mov.w	r0, #0
 8004a54:	f04f 0100 	mov.w	r1, #0
 8004a58:	0299      	lsls	r1, r3, #10
 8004a5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a5e:	0290      	lsls	r0, r2, #10
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	f7fb fbd6 	bl	8000220 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a7c:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	3301      	adds	r3, #1
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	61bb      	str	r3, [r7, #24]
      break;
 8004a96:	e0b2      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4b5c      	ldr	r3, [pc, #368]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d04d      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4b57      	ldr	r3, [pc, #348]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	ea02 0800 	and.w	r8, r2, r0
 8004ac6:	ea03 0901 	and.w	r9, r3, r1
 8004aca:	4640      	mov	r0, r8
 8004acc:	4649      	mov	r1, r9
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	014b      	lsls	r3, r1, #5
 8004ad8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004adc:	0142      	lsls	r2, r0, #5
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	ebb0 0008 	subs.w	r0, r0, r8
 8004ae6:	eb61 0109 	sbc.w	r1, r1, r9
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	018b      	lsls	r3, r1, #6
 8004af4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004af8:	0182      	lsls	r2, r0, #6
 8004afa:	1a12      	subs	r2, r2, r0
 8004afc:	eb63 0301 	sbc.w	r3, r3, r1
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	00d9      	lsls	r1, r3, #3
 8004b0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b0e:	00d0      	lsls	r0, r2, #3
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	eb12 0208 	adds.w	r2, r2, r8
 8004b18:	eb43 0309 	adc.w	r3, r3, r9
 8004b1c:	f04f 0000 	mov.w	r0, #0
 8004b20:	f04f 0100 	mov.w	r1, #0
 8004b24:	0259      	lsls	r1, r3, #9
 8004b26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b2a:	0250      	lsls	r0, r2, #9
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	f7fb fb70 	bl	8000220 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	e04a      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	461a      	mov	r2, r3
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b5a:	f04f 0100 	mov.w	r1, #0
 8004b5e:	ea02 0400 	and.w	r4, r2, r0
 8004b62:	ea03 0501 	and.w	r5, r3, r1
 8004b66:	4620      	mov	r0, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	014b      	lsls	r3, r1, #5
 8004b74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b78:	0142      	lsls	r2, r0, #5
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	1b00      	subs	r0, r0, r4
 8004b80:	eb61 0105 	sbc.w	r1, r1, r5
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	f04f 0300 	mov.w	r3, #0
 8004b8c:	018b      	lsls	r3, r1, #6
 8004b8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b92:	0182      	lsls	r2, r0, #6
 8004b94:	1a12      	subs	r2, r2, r0
 8004b96:	eb63 0301 	sbc.w	r3, r3, r1
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	00d9      	lsls	r1, r3, #3
 8004ba4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba8:	00d0      	lsls	r0, r2, #3
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	1912      	adds	r2, r2, r4
 8004bb0:	eb45 0303 	adc.w	r3, r5, r3
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	f04f 0100 	mov.w	r1, #0
 8004bbc:	0299      	lsls	r1, r3, #10
 8004bbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bc2:	0290      	lsls	r0, r2, #10
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	f7fb fb24 	bl	8000220 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0f1b      	lsrs	r3, r3, #28
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004bec:	69fa      	ldr	r2, [r7, #28]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf4:	61bb      	str	r3, [r7, #24]
      break;
 8004bf6:	e002      	b.n	8004bfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bfa:	61bb      	str	r3, [r7, #24]
      break;
 8004bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	007a1200 	.word	0x007a1200

08004c18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e28d      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8083 	beq.w	8004d3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c38:	4b94      	ldr	r3, [pc, #592]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d019      	beq.n	8004c78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c44:	4b91      	ldr	r3, [pc, #580]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c50:	4b8e      	ldr	r3, [pc, #568]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5c:	d00c      	beq.n	8004c78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5e:	4b8b      	ldr	r3, [pc, #556]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d112      	bne.n	8004c90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6a:	4b88      	ldr	r3, [pc, #544]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c76:	d10b      	bne.n	8004c90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	4b84      	ldr	r3, [pc, #528]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d05b      	beq.n	8004d3c <HAL_RCC_OscConfig+0x124>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d157      	bne.n	8004d3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e25a      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x90>
 8004c9a:	4b7c      	ldr	r3, [pc, #496]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7b      	ldr	r2, [pc, #492]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e01d      	b.n	8004ce4 <HAL_RCC_OscConfig+0xcc>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0xb4>
 8004cb2:	4b76      	ldr	r3, [pc, #472]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a75      	ldr	r2, [pc, #468]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	4b73      	ldr	r3, [pc, #460]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a72      	ldr	r2, [pc, #456]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCC_OscConfig+0xcc>
 8004ccc:	4b6f      	ldr	r3, [pc, #444]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a6e      	ldr	r2, [pc, #440]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	4b6c      	ldr	r3, [pc, #432]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a6b      	ldr	r2, [pc, #428]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d013      	beq.n	8004d14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd f882 	bl	8001df4 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd f87e 	bl	8001df4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e21f      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d06:	4b61      	ldr	r3, [pc, #388]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f0      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xdc>
 8004d12:	e014      	b.n	8004d3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd f86e 	bl	8001df4 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fd f86a 	bl	8001df4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e20b      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2e:	4b57      	ldr	r3, [pc, #348]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x104>
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d06f      	beq.n	8004e2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d4a:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d017      	beq.n	8004d86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d56:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d105      	bne.n	8004d6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d62:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d11c      	bne.n	8004db4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d116      	bne.n	8004db4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d86:	4b41      	ldr	r3, [pc, #260]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_RCC_OscConfig+0x186>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d001      	beq.n	8004d9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e1d3      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4937      	ldr	r1, [pc, #220]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db2:	e03a      	b.n	8004e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d020      	beq.n	8004dfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dbc:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <HAL_RCC_OscConfig+0x278>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fd f817 	bl	8001df4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dca:	f7fd f813 	bl	8001df4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e1b4      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de8:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4925      	ldr	r1, [pc, #148]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	600b      	str	r3, [r1, #0]
 8004dfc:	e015      	b.n	8004e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_RCC_OscConfig+0x278>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fc fff6 	bl	8001df4 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fc fff2 	bl	8001df4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e193      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1e:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d036      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <HAL_RCC_OscConfig+0x27c>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e44:	f7fc ffd6 	bl	8001df4 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e4c:	f7fc ffd2 	bl	8001df4 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e173      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <HAL_RCC_OscConfig+0x274>)
 8004e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x234>
 8004e6a:	e01b      	b.n	8004ea4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6c:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_RCC_OscConfig+0x27c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e72:	f7fc ffbf 	bl	8001df4 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	e00e      	b.n	8004e98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7a:	f7fc ffbb 	bl	8001df4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d907      	bls.n	8004e98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e15c      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	42470000 	.word	0x42470000
 8004e94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	4b8a      	ldr	r3, [pc, #552]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ea      	bne.n	8004e7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8097 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb6:	4b83      	ldr	r3, [pc, #524]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10f      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	4b7f      	ldr	r3, [pc, #508]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4a7e      	ldr	r2, [pc, #504]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed2:	4b7c      	ldr	r3, [pc, #496]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee2:	4b79      	ldr	r3, [pc, #484]	; (80050c8 <HAL_RCC_OscConfig+0x4b0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d118      	bne.n	8004f20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eee:	4b76      	ldr	r3, [pc, #472]	; (80050c8 <HAL_RCC_OscConfig+0x4b0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a75      	ldr	r2, [pc, #468]	; (80050c8 <HAL_RCC_OscConfig+0x4b0>)
 8004ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004efa:	f7fc ff7b 	bl	8001df4 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f02:	f7fc ff77 	bl	8001df4 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e118      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f14:	4b6c      	ldr	r3, [pc, #432]	; (80050c8 <HAL_RCC_OscConfig+0x4b0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d106      	bne.n	8004f36 <HAL_RCC_OscConfig+0x31e>
 8004f28:	4b66      	ldr	r3, [pc, #408]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a65      	ldr	r2, [pc, #404]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	e01c      	b.n	8004f70 <HAL_RCC_OscConfig+0x358>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCC_OscConfig+0x340>
 8004f3e:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	4a60      	ldr	r2, [pc, #384]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f44:	f043 0304 	orr.w	r3, r3, #4
 8004f48:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4a:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a5d      	ldr	r2, [pc, #372]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	e00b      	b.n	8004f70 <HAL_RCC_OscConfig+0x358>
 8004f58:	4b5a      	ldr	r3, [pc, #360]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4a59      	ldr	r2, [pc, #356]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	6713      	str	r3, [r2, #112]	; 0x70
 8004f64:	4b57      	ldr	r3, [pc, #348]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	4a56      	ldr	r2, [pc, #344]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	f023 0304 	bic.w	r3, r3, #4
 8004f6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d015      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fc ff3c 	bl	8001df4 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f80:	f7fc ff38 	bl	8001df4 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0d7      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0ee      	beq.n	8004f80 <HAL_RCC_OscConfig+0x368>
 8004fa2:	e014      	b.n	8004fce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fc ff26 	bl	8001df4 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fac:	f7fc ff22 	bl	8001df4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e0c1      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc2:	4b40      	ldr	r3, [pc, #256]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ee      	bne.n	8004fac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80ad 	beq.w	8005144 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fea:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d060      	beq.n	80050b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d145      	bne.n	800508a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_RCC_OscConfig+0x4b4>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc fef6 	bl	8001df4 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500c:	f7fc fef2 	bl	8001df4 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e093      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501e:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69da      	ldr	r2, [r3, #28]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	019b      	lsls	r3, r3, #6
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	3b01      	subs	r3, #1
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	071b      	lsls	r3, r3, #28
 8005056:	491b      	ldr	r1, [pc, #108]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x4b4>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005062:	f7fc fec7 	bl	8001df4 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506a:	f7fc fec3 	bl	8001df4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e064      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x452>
 8005088:	e05c      	b.n	8005144 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_OscConfig+0x4b4>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fc feb0 	bl	8001df4 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005098:	f7fc feac 	bl	8001df4 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e04d      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_RCC_OscConfig+0x4ac>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x480>
 80050b6:	e045      	b.n	8005144 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e040      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40007000 	.word	0x40007000
 80050cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d0:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <HAL_RCC_OscConfig+0x538>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d030      	beq.n	8005140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d129      	bne.n	8005140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d122      	bne.n	8005140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005100:	4013      	ands	r3, r2
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005108:	4293      	cmp	r3, r2
 800510a:	d119      	bne.n	8005140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	3b01      	subs	r3, #1
 800511a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d10f      	bne.n	8005140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e07b      	b.n	800525e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005176:	d009      	beq.n	800518c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	61da      	str	r2, [r3, #28]
 800517e:	e005      	b.n	800518c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc faa2 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005210:	ea42 0103 	orr.w	r1, r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0104 	and.w	r1, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	f003 0210 	and.w	r2, r3, #16
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800524c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_SPI_Transmit+0x22>
 8005284:	2302      	movs	r3, #2
 8005286:	e126      	b.n	80054d6 <HAL_SPI_Transmit+0x270>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005290:	f7fc fdb0 	bl	8001df4 <HAL_GetTick>
 8005294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d002      	beq.n	80052ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052a6:	2302      	movs	r3, #2
 80052a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052aa:	e10b      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Transmit+0x52>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052bc:	e102      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2203      	movs	r2, #3
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005304:	d10f      	bne.n	8005326 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005324:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d007      	beq.n	8005344 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534c:	d14b      	bne.n	80053e6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <HAL_SPI_Transmit+0xf6>
 8005356:	8afb      	ldrh	r3, [r7, #22]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d13e      	bne.n	80053da <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005380:	e02b      	b.n	80053da <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d112      	bne.n	80053b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80053b4:	e011      	b.n	80053da <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b6:	f7fc fd1d 	bl	8001df4 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_Transmit+0x168>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_Transmit+0x16e>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053d8:	e074      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ce      	bne.n	8005382 <HAL_SPI_Transmit+0x11c>
 80053e4:	e04c      	b.n	8005480 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_Transmit+0x18e>
 80053ee:	8afb      	ldrh	r3, [r7, #22]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d140      	bne.n	8005476 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800541a:	e02c      	b.n	8005476 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d113      	bne.n	8005452 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005450:	e011      	b.n	8005476 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005452:	f7fc fccf 	bl	8001df4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_Transmit+0x204>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x20a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d102      	bne.n	8005476 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005474:	e026      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1cd      	bne.n	800541c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fbcb 	bl	8005c20 <SPI_EndRxTxTransaction>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e000      	b.n	80054c4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80054c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b088      	sub	sp, #32
 80054e2:	af02      	add	r7, sp, #8
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fa:	d112      	bne.n	8005522 <HAL_SPI_Receive+0x44>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10e      	bne.n	8005522 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2204      	movs	r2, #4
 8005508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f8f1 	bl	8005700 <HAL_SPI_TransmitReceive>
 800551e:	4603      	mov	r3, r0
 8005520:	e0ea      	b.n	80056f8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_SPI_Receive+0x52>
 800552c:	2302      	movs	r3, #2
 800552e:	e0e3      	b.n	80056f8 <HAL_SPI_Receive+0x21a>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fc fc5c 	bl	8001df4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800554a:	2302      	movs	r3, #2
 800554c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800554e:	e0ca      	b.n	80056e6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_SPI_Receive+0x7e>
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005560:	e0c1      	b.n	80056e6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2204      	movs	r2, #4
 8005566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d10f      	bne.n	80055ca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d007      	beq.n	80055e8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d162      	bne.n	80056b6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055f0:	e02e      	b.n	8005650 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d115      	bne.n	800562c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f103 020c 	add.w	r2, r3, #12
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	87da      	strh	r2, [r3, #62]	; 0x3e
 800562a:	e011      	b.n	8005650 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800562c:	f7fc fbe2 	bl	8001df4 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d803      	bhi.n	8005644 <HAL_SPI_Receive+0x166>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005642:	d102      	bne.n	800564a <HAL_SPI_Receive+0x16c>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800564e:	e04a      	b.n	80056e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1cb      	bne.n	80055f2 <HAL_SPI_Receive+0x114>
 800565a:	e031      	b.n	80056c0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d113      	bne.n	8005692 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	b292      	uxth	r2, r2
 8005676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005690:	e011      	b.n	80056b6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005692:	f7fc fbaf 	bl	8001df4 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d803      	bhi.n	80056aa <HAL_SPI_Receive+0x1cc>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d102      	bne.n	80056b0 <HAL_SPI_Receive+0x1d2>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056b4:	e017      	b.n	80056e6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1cd      	bne.n	800565c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 fa45 	bl	8005b54 <SPI_EndRxTransaction>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	75fb      	strb	r3, [r7, #23]
 80056e2:	e000      	b.n	80056e6 <HAL_SPI_Receive+0x208>
  }

error :
 80056e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08c      	sub	sp, #48	; 0x30
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800570e:	2301      	movs	r3, #1
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_SPI_TransmitReceive+0x26>
 8005722:	2302      	movs	r3, #2
 8005724:	e18a      	b.n	8005a3c <HAL_SPI_TransmitReceive+0x33c>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572e:	f7fc fb61 	bl	8001df4 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800574c:	2b01      	cmp	r3, #1
 800574e:	d00f      	beq.n	8005770 <HAL_SPI_TransmitReceive+0x70>
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005756:	d107      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d103      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x68>
 8005760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005764:	2b04      	cmp	r3, #4
 8005766:	d003      	beq.n	8005770 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005768:	2302      	movs	r3, #2
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800576e:	e15b      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x82>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <HAL_SPI_TransmitReceive+0x82>
 800577c:	887b      	ldrh	r3, [r7, #2]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005788:	e14e      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b04      	cmp	r3, #4
 8005794:	d003      	beq.n	800579e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2205      	movs	r2, #5
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	887a      	ldrh	r2, [r7, #2]
 80057ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	887a      	ldrh	r2, [r7, #2]
 80057b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	887a      	ldrh	r2, [r7, #2]
 80057c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d007      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	d178      	bne.n	80058ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_TransmitReceive+0x10a>
 8005804:	8b7b      	ldrh	r3, [r7, #26]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d166      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	881a      	ldrh	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	1c9a      	adds	r2, r3, #2
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582e:	e053      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b02      	cmp	r3, #2
 800583c:	d11b      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x176>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d016      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x176>
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d113      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	881a      	ldrh	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	1c9a      	adds	r2, r3, #2
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d119      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x1b8>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d014      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	b292      	uxth	r2, r2
 800589a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	1c9a      	adds	r2, r3, #2
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b4:	2301      	movs	r3, #1
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058b8:	f7fc fa9c 	bl	8001df4 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d807      	bhi.n	80058d8 <HAL_SPI_TransmitReceive+0x1d8>
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d003      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058d6:	e0a7      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1a6      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x130>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1a1      	bne.n	8005830 <HAL_SPI_TransmitReceive+0x130>
 80058ec:	e07c      	b.n	80059e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_TransmitReceive+0x1fc>
 80058f6:	8b7b      	ldrh	r3, [r7, #26]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d16b      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005922:	e057      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b02      	cmp	r3, #2
 8005930:	d11c      	bne.n	800596c <HAL_SPI_TransmitReceive+0x26c>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d017      	beq.n	800596c <HAL_SPI_TransmitReceive+0x26c>
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b01      	cmp	r3, #1
 8005940:	d114      	bne.n	800596c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d119      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x2ae>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d014      	beq.n	80059ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059aa:	2301      	movs	r3, #1
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059ae:	f7fc fa21 	bl	8001df4 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d803      	bhi.n	80059c6 <HAL_SPI_TransmitReceive+0x2c6>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d102      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x2cc>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d103      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059d2:	e029      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1a2      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x224>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d19d      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f917 	bl	8005c20 <SPI_EndRxTxTransaction>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d006      	beq.n	8005a06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a04:	e010      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	e000      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3730      	adds	r7, #48	; 0x30
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a54:	f7fc f9ce 	bl	8001df4 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	4413      	add	r3, r2
 8005a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a64:	f7fc f9c6 	bl	8001df4 <HAL_GetTick>
 8005a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a6a:	4b39      	ldr	r3, [pc, #228]	; (8005b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	015b      	lsls	r3, r3, #5
 8005a70:	0d1b      	lsrs	r3, r3, #20
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
 8005a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a7a:	e054      	b.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d050      	beq.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a84:	f7fc f9b6 	bl	8001df4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d902      	bls.n	8005a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d13d      	bne.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ab2:	d111      	bne.n	8005ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005abc:	d004      	beq.n	8005ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac6:	d107      	bne.n	8005ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae0:	d10f      	bne.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e017      	b.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	bf0c      	ite	eq
 8005b36:	2301      	moveq	r3, #1
 8005b38:	2300      	movne	r3, #0
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d19b      	bne.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000004 	.word	0x20000004

08005b54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b68:	d111      	bne.n	8005b8e <SPI_EndRxTransaction+0x3a>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b72:	d004      	beq.n	8005b7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7c:	d107      	bne.n	8005b8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b96:	d12a      	bne.n	8005bee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d012      	beq.n	8005bc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff ff49 	bl	8005a44 <SPI_WaitFlagStateUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d02d      	beq.n	8005c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e026      	b.n	8005c16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff ff36 	bl	8005a44 <SPI_WaitFlagStateUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01a      	beq.n	8005c14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	f043 0220 	orr.w	r2, r3, #32
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e013      	b.n	8005c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff ff23 	bl	8005a44 <SPI_WaitFlagStateUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e000      	b.n	8005c16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c2c:	4b1b      	ldr	r3, [pc, #108]	; (8005c9c <SPI_EndRxTxTransaction+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <SPI_EndRxTxTransaction+0x80>)
 8005c32:	fba2 2303 	umull	r2, r3, r2, r3
 8005c36:	0d5b      	lsrs	r3, r3, #21
 8005c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4a:	d112      	bne.n	8005c72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2200      	movs	r2, #0
 8005c54:	2180      	movs	r1, #128	; 0x80
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fef4 	bl	8005a44 <SPI_WaitFlagStateUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d016      	beq.n	8005c90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f043 0220 	orr.w	r2, r3, #32
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e00f      	b.n	8005c92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00a      	beq.n	8005c8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c88:	2b80      	cmp	r3, #128	; 0x80
 8005c8a:	d0f2      	beq.n	8005c72 <SPI_EndRxTxTransaction+0x52>
 8005c8c:	e000      	b.n	8005c90 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c8e:	bf00      	nop
  }

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000004 	.word	0x20000004
 8005ca0:	165e9f81 	.word	0x165e9f81

08005ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e041      	b.n	8005d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fb fd58 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	f000 f9ce 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d001      	beq.n	8005d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e04e      	b.n	8005dfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a23      	ldr	r2, [pc, #140]	; (8005e08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d022      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d01d      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d018      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d013      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	; (8005e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00e      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d009      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x80>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d111      	bne.n	8005de8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b06      	cmp	r3, #6
 8005dd4:	d010      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0201 	orr.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	e007      	b.n	8005df8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40010400 	.word	0x40010400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40001800 	.word	0x40001800

08005e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d122      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d11b      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0202 	mvn.w	r2, #2
 8005e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f8ee 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005e6c:	e005      	b.n	8005e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f8e0 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f8f1 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d122      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0204 	mvn.w	r2, #4
 8005ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f8c4 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f8b6 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f8c7 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d122      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d11b      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0208 	mvn.w	r2, #8
 8005ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2204      	movs	r2, #4
 8005efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f89a 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f88c 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f89d 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d122      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0210 	mvn.w	r2, #16
 8005f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2208      	movs	r2, #8
 8005f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f870 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005f68:	e005      	b.n	8005f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f862 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f873 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0201 	mvn.w	r2, #1
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fa fd56 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d107      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f902 	bl	80061d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d107      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f838 	bl	8006070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b20      	cmp	r3, #32
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b20      	cmp	r3, #32
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0220 	mvn.w	r2, #32
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8cc 	bl	80061c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a40      	ldr	r2, [pc, #256]	; (8006198 <TIM_Base_SetConfig+0x114>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d013      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d00f      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a3d      	ldr	r2, [pc, #244]	; (800619c <TIM_Base_SetConfig+0x118>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a3c      	ldr	r2, [pc, #240]	; (80061a0 <TIM_Base_SetConfig+0x11c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a3b      	ldr	r2, [pc, #236]	; (80061a4 <TIM_Base_SetConfig+0x120>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a3a      	ldr	r2, [pc, #232]	; (80061a8 <TIM_Base_SetConfig+0x124>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d108      	bne.n	80060d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a2f      	ldr	r2, [pc, #188]	; (8006198 <TIM_Base_SetConfig+0x114>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d02b      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d027      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a2c      	ldr	r2, [pc, #176]	; (800619c <TIM_Base_SetConfig+0x118>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d023      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2b      	ldr	r2, [pc, #172]	; (80061a0 <TIM_Base_SetConfig+0x11c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d01f      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a2a      	ldr	r2, [pc, #168]	; (80061a4 <TIM_Base_SetConfig+0x120>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01b      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <TIM_Base_SetConfig+0x124>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d017      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a28      	ldr	r2, [pc, #160]	; (80061ac <TIM_Base_SetConfig+0x128>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a27      	ldr	r2, [pc, #156]	; (80061b0 <TIM_Base_SetConfig+0x12c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00f      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a26      	ldr	r2, [pc, #152]	; (80061b4 <TIM_Base_SetConfig+0x130>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00b      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a25      	ldr	r2, [pc, #148]	; (80061b8 <TIM_Base_SetConfig+0x134>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a24      	ldr	r2, [pc, #144]	; (80061bc <TIM_Base_SetConfig+0x138>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a23      	ldr	r2, [pc, #140]	; (80061c0 <TIM_Base_SetConfig+0x13c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d108      	bne.n	8006148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a0a      	ldr	r2, [pc, #40]	; (8006198 <TIM_Base_SetConfig+0x114>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_Base_SetConfig+0xf8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a0c      	ldr	r2, [pc, #48]	; (80061a8 <TIM_Base_SetConfig+0x124>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d103      	bne.n	8006184 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	615a      	str	r2, [r3, #20]
}
 800618a:	bf00      	nop
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40010000 	.word	0x40010000
 800619c:	40000400 	.word	0x40000400
 80061a0:	40000800 	.word	0x40000800
 80061a4:	40000c00 	.word	0x40000c00
 80061a8:	40010400 	.word	0x40010400
 80061ac:	40014000 	.word	0x40014000
 80061b0:	40014400 	.word	0x40014400
 80061b4:	40014800 	.word	0x40014800
 80061b8:	40001800 	.word	0x40001800
 80061bc:	40001c00 	.word	0x40001c00
 80061c0:	40002000 	.word	0x40002000

080061c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e03f      	b.n	800627e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fb fadc 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2224      	movs	r2, #36	; 0x24
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800622e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f9a7 	bl	8006584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b08a      	sub	sp, #40	; 0x28
 800628a:	af02      	add	r7, sp, #8
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d17c      	bne.n	80063a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_UART_Transmit+0x2c>
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e075      	b.n	80063a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_UART_Transmit+0x3e>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e06e      	b.n	80063a2 <HAL_UART_Transmit+0x11c>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2221      	movs	r2, #33	; 0x21
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062da:	f7fb fd8b 	bl	8001df4 <HAL_GetTick>
 80062de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	88fa      	ldrh	r2, [r7, #6]
 80062e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f4:	d108      	bne.n	8006308 <HAL_UART_Transmit+0x82>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d104      	bne.n	8006308 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	e003      	b.n	8006310 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800630c:	2300      	movs	r3, #0
 800630e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006318:	e02a      	b.n	8006370 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	2180      	movs	r1, #128	; 0x80
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f8e2 	bl	80064ee <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e036      	b.n	80063a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006348:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	3302      	adds	r3, #2
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e007      	b.n	8006362 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	781a      	ldrb	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1cf      	bne.n	800631a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2200      	movs	r2, #0
 8006382:	2140      	movs	r1, #64	; 0x40
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f8b2 	bl	80064ee <UART_WaitOnFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e006      	b.n	80063a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b08a      	sub	sp, #40	; 0x28
 80063ae:	af02      	add	r7, sp, #8
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b20      	cmp	r3, #32
 80063c8:	f040 808c 	bne.w	80064e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_UART_Receive+0x2e>
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e084      	b.n	80064e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_UART_Receive+0x40>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e07d      	b.n	80064e6 <HAL_UART_Receive+0x13c>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2222      	movs	r2, #34	; 0x22
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006406:	f7fb fcf5 	bl	8001df4 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d108      	bne.n	8006434 <HAL_UART_Receive+0x8a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	e003      	b.n	800643c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006444:	e043      	b.n	80064ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	2120      	movs	r1, #32
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f84c 	bl	80064ee <UART_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e042      	b.n	80064e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10c      	bne.n	8006480 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	b29a      	uxth	r2, r3
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	3302      	adds	r3, #2
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	e01f      	b.n	80064c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006488:	d007      	beq.n	800649a <HAL_UART_Receive+0xf0>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10a      	bne.n	80064a8 <HAL_UART_Receive+0xfe>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	e008      	b.n	80064ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3301      	adds	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	3b01      	subs	r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1b6      	bne.n	8006446 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	603b      	str	r3, [r7, #0]
 80064fa:	4613      	mov	r3, r2
 80064fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064fe:	e02c      	b.n	800655a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d028      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <UART_WaitOnFlagUntilTimeout+0x30>
 800650e:	f7fb fc71 	bl	8001df4 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	429a      	cmp	r2, r3
 800651c:	d21d      	bcs.n	800655a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800652c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e00f      	b.n	800657a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4013      	ands	r3, r2
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	bf0c      	ite	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	2300      	movne	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	429a      	cmp	r2, r3
 8006576:	d0c3      	beq.n	8006500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	b09f      	sub	sp, #124	; 0x7c
 800658a:	af00      	add	r7, sp, #0
 800658c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800658e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659a:	68d9      	ldr	r1, [r3, #12]
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	ea40 0301 	orr.w	r3, r0, r1
 80065a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80065be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065c8:	f021 010c 	bic.w	r1, r1, #12
 80065cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d2:	430b      	orrs	r3, r1
 80065d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e2:	6999      	ldr	r1, [r3, #24]
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	ea40 0301 	orr.w	r3, r0, r1
 80065ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4bc5      	ldr	r3, [pc, #788]	; (8006908 <UART_SetConfig+0x384>)
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d004      	beq.n	8006602 <UART_SetConfig+0x7e>
 80065f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4bc3      	ldr	r3, [pc, #780]	; (800690c <UART_SetConfig+0x388>)
 80065fe:	429a      	cmp	r2, r3
 8006600:	d103      	bne.n	800660a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006602:	f7fd fde7 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
 8006606:	6778      	str	r0, [r7, #116]	; 0x74
 8006608:	e002      	b.n	8006610 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800660a:	f7fd fdcf 	bl	80041ac <HAL_RCC_GetPCLK1Freq>
 800660e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006618:	f040 80b6 	bne.w	8006788 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800661c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800661e:	461c      	mov	r4, r3
 8006620:	f04f 0500 	mov.w	r5, #0
 8006624:	4622      	mov	r2, r4
 8006626:	462b      	mov	r3, r5
 8006628:	1891      	adds	r1, r2, r2
 800662a:	6439      	str	r1, [r7, #64]	; 0x40
 800662c:	415b      	adcs	r3, r3
 800662e:	647b      	str	r3, [r7, #68]	; 0x44
 8006630:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006634:	1912      	adds	r2, r2, r4
 8006636:	eb45 0303 	adc.w	r3, r5, r3
 800663a:	f04f 0000 	mov.w	r0, #0
 800663e:	f04f 0100 	mov.w	r1, #0
 8006642:	00d9      	lsls	r1, r3, #3
 8006644:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006648:	00d0      	lsls	r0, r2, #3
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	1911      	adds	r1, r2, r4
 8006650:	6639      	str	r1, [r7, #96]	; 0x60
 8006652:	416b      	adcs	r3, r5
 8006654:	667b      	str	r3, [r7, #100]	; 0x64
 8006656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	461a      	mov	r2, r3
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	1891      	adds	r1, r2, r2
 8006662:	63b9      	str	r1, [r7, #56]	; 0x38
 8006664:	415b      	adcs	r3, r3
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800666c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006670:	f7f9 fdd6 	bl	8000220 <__aeabi_uldivmod>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4ba5      	ldr	r3, [pc, #660]	; (8006910 <UART_SetConfig+0x38c>)
 800667a:	fba3 2302 	umull	r2, r3, r3, r2
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	011e      	lsls	r6, r3, #4
 8006682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006684:	461c      	mov	r4, r3
 8006686:	f04f 0500 	mov.w	r5, #0
 800668a:	4622      	mov	r2, r4
 800668c:	462b      	mov	r3, r5
 800668e:	1891      	adds	r1, r2, r2
 8006690:	6339      	str	r1, [r7, #48]	; 0x30
 8006692:	415b      	adcs	r3, r3
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800669a:	1912      	adds	r2, r2, r4
 800669c:	eb45 0303 	adc.w	r3, r5, r3
 80066a0:	f04f 0000 	mov.w	r0, #0
 80066a4:	f04f 0100 	mov.w	r1, #0
 80066a8:	00d9      	lsls	r1, r3, #3
 80066aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066ae:	00d0      	lsls	r0, r2, #3
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	1911      	adds	r1, r2, r4
 80066b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80066b8:	416b      	adcs	r3, r5
 80066ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 0300 	mov.w	r3, #0
 80066c6:	1891      	adds	r1, r2, r2
 80066c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80066ca:	415b      	adcs	r3, r3
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066d6:	f7f9 fda3 	bl	8000220 <__aeabi_uldivmod>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4b8c      	ldr	r3, [pc, #560]	; (8006910 <UART_SetConfig+0x38c>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	; 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	3332      	adds	r3, #50	; 0x32
 80066f2:	4a87      	ldr	r2, [pc, #540]	; (8006910 <UART_SetConfig+0x38c>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006700:	441e      	add	r6, r3
 8006702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006704:	4618      	mov	r0, r3
 8006706:	f04f 0100 	mov.w	r1, #0
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	1894      	adds	r4, r2, r2
 8006710:	623c      	str	r4, [r7, #32]
 8006712:	415b      	adcs	r3, r3
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
 8006716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800671a:	1812      	adds	r2, r2, r0
 800671c:	eb41 0303 	adc.w	r3, r1, r3
 8006720:	f04f 0400 	mov.w	r4, #0
 8006724:	f04f 0500 	mov.w	r5, #0
 8006728:	00dd      	lsls	r5, r3, #3
 800672a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800672e:	00d4      	lsls	r4, r2, #3
 8006730:	4622      	mov	r2, r4
 8006732:	462b      	mov	r3, r5
 8006734:	1814      	adds	r4, r2, r0
 8006736:	653c      	str	r4, [r7, #80]	; 0x50
 8006738:	414b      	adcs	r3, r1
 800673a:	657b      	str	r3, [r7, #84]	; 0x54
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	461a      	mov	r2, r3
 8006742:	f04f 0300 	mov.w	r3, #0
 8006746:	1891      	adds	r1, r2, r2
 8006748:	61b9      	str	r1, [r7, #24]
 800674a:	415b      	adcs	r3, r3
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006752:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006756:	f7f9 fd63 	bl	8000220 <__aeabi_uldivmod>
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	4b6c      	ldr	r3, [pc, #432]	; (8006910 <UART_SetConfig+0x38c>)
 8006760:	fba3 1302 	umull	r1, r3, r3, r2
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	2164      	movs	r1, #100	; 0x64
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	3332      	adds	r3, #50	; 0x32
 8006772:	4a67      	ldr	r2, [pc, #412]	; (8006910 <UART_SetConfig+0x38c>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f003 0207 	and.w	r2, r3, #7
 800677e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4432      	add	r2, r6
 8006784:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006786:	e0b9      	b.n	80068fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800678a:	461c      	mov	r4, r3
 800678c:	f04f 0500 	mov.w	r5, #0
 8006790:	4622      	mov	r2, r4
 8006792:	462b      	mov	r3, r5
 8006794:	1891      	adds	r1, r2, r2
 8006796:	6139      	str	r1, [r7, #16]
 8006798:	415b      	adcs	r3, r3
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80067a0:	1912      	adds	r2, r2, r4
 80067a2:	eb45 0303 	adc.w	r3, r5, r3
 80067a6:	f04f 0000 	mov.w	r0, #0
 80067aa:	f04f 0100 	mov.w	r1, #0
 80067ae:	00d9      	lsls	r1, r3, #3
 80067b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b4:	00d0      	lsls	r0, r2, #3
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	eb12 0804 	adds.w	r8, r2, r4
 80067be:	eb43 0905 	adc.w	r9, r3, r5
 80067c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	008b      	lsls	r3, r1, #2
 80067d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067da:	0082      	lsls	r2, r0, #2
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7f9 fd1e 	bl	8000220 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4b49      	ldr	r3, [pc, #292]	; (8006910 <UART_SetConfig+0x38c>)
 80067ea:	fba3 2302 	umull	r2, r3, r3, r2
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	011e      	lsls	r6, r3, #4
 80067f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f4:	4618      	mov	r0, r3
 80067f6:	f04f 0100 	mov.w	r1, #0
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	1894      	adds	r4, r2, r2
 8006800:	60bc      	str	r4, [r7, #8]
 8006802:	415b      	adcs	r3, r3
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800680a:	1812      	adds	r2, r2, r0
 800680c:	eb41 0303 	adc.w	r3, r1, r3
 8006810:	f04f 0400 	mov.w	r4, #0
 8006814:	f04f 0500 	mov.w	r5, #0
 8006818:	00dd      	lsls	r5, r3, #3
 800681a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800681e:	00d4      	lsls	r4, r2, #3
 8006820:	4622      	mov	r2, r4
 8006822:	462b      	mov	r3, r5
 8006824:	1814      	adds	r4, r2, r0
 8006826:	64bc      	str	r4, [r7, #72]	; 0x48
 8006828:	414b      	adcs	r3, r1
 800682a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800682c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	f04f 0100 	mov.w	r1, #0
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	008b      	lsls	r3, r1, #2
 8006840:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006844:	0082      	lsls	r2, r0, #2
 8006846:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800684a:	f7f9 fce9 	bl	8000220 <__aeabi_uldivmod>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4b2f      	ldr	r3, [pc, #188]	; (8006910 <UART_SetConfig+0x38c>)
 8006854:	fba3 1302 	umull	r1, r3, r3, r2
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	2164      	movs	r1, #100	; 0x64
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	3332      	adds	r3, #50	; 0x32
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <UART_SetConfig+0x38c>)
 8006868:	fba2 2303 	umull	r2, r3, r2, r3
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006872:	441e      	add	r6, r3
 8006874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006876:	4618      	mov	r0, r3
 8006878:	f04f 0100 	mov.w	r1, #0
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	1894      	adds	r4, r2, r2
 8006882:	603c      	str	r4, [r7, #0]
 8006884:	415b      	adcs	r3, r3
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	1812      	adds	r2, r2, r0
 800688e:	eb41 0303 	adc.w	r3, r1, r3
 8006892:	f04f 0400 	mov.w	r4, #0
 8006896:	f04f 0500 	mov.w	r5, #0
 800689a:	00dd      	lsls	r5, r3, #3
 800689c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068a0:	00d4      	lsls	r4, r2, #3
 80068a2:	4622      	mov	r2, r4
 80068a4:	462b      	mov	r3, r5
 80068a6:	eb12 0a00 	adds.w	sl, r2, r0
 80068aa:	eb43 0b01 	adc.w	fp, r3, r1
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f04f 0100 	mov.w	r1, #0
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	008b      	lsls	r3, r1, #2
 80068c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068c6:	0082      	lsls	r2, r0, #2
 80068c8:	4650      	mov	r0, sl
 80068ca:	4659      	mov	r1, fp
 80068cc:	f7f9 fca8 	bl	8000220 <__aeabi_uldivmod>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <UART_SetConfig+0x38c>)
 80068d6:	fba3 1302 	umull	r1, r3, r3, r2
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2164      	movs	r1, #100	; 0x64
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	4a09      	ldr	r2, [pc, #36]	; (8006910 <UART_SetConfig+0x38c>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4432      	add	r2, r6
 80068fa:	609a      	str	r2, [r3, #8]
}
 80068fc:	bf00      	nop
 80068fe:	377c      	adds	r7, #124	; 0x7c
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	40011000 	.word	0x40011000
 800690c:	40011400 	.word	0x40011400
 8006910:	51eb851f 	.word	0x51eb851f

08006914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006914:	b084      	sub	sp, #16
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	f107 001c 	add.w	r0, r7, #28
 8006922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	2b01      	cmp	r3, #1
 800692a:	d122      	bne.n	8006972 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d105      	bne.n	8006966 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fac0 	bl	8007eec <USB_CoreReset>
 800696c:	4603      	mov	r3, r0
 800696e:	73fb      	strb	r3, [r7, #15]
 8006970:	e01a      	b.n	80069a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fab4 	bl	8007eec <USB_CoreReset>
 8006984:	4603      	mov	r3, r0
 8006986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
 800699a:	e005      	b.n	80069a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d10b      	bne.n	80069c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f043 0206 	orr.w	r2, r3, #6
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d2:	b004      	add	sp, #16
 80069d4:	4770      	bx	lr
	...

080069d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d165      	bne.n	8006ab8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4a41      	ldr	r2, [pc, #260]	; (8006af4 <USB_SetTurnaroundTime+0x11c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d906      	bls.n	8006a02 <USB_SetTurnaroundTime+0x2a>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4a40      	ldr	r2, [pc, #256]	; (8006af8 <USB_SetTurnaroundTime+0x120>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d202      	bcs.n	8006a02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069fc:	230f      	movs	r3, #15
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	e062      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	4a3c      	ldr	r2, [pc, #240]	; (8006af8 <USB_SetTurnaroundTime+0x120>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d306      	bcc.n	8006a18 <USB_SetTurnaroundTime+0x40>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	; (8006afc <USB_SetTurnaroundTime+0x124>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d202      	bcs.n	8006a18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a12:	230e      	movs	r3, #14
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	e057      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	4a38      	ldr	r2, [pc, #224]	; (8006afc <USB_SetTurnaroundTime+0x124>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d306      	bcc.n	8006a2e <USB_SetTurnaroundTime+0x56>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4a37      	ldr	r2, [pc, #220]	; (8006b00 <USB_SetTurnaroundTime+0x128>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d202      	bcs.n	8006a2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a28:	230d      	movs	r3, #13
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e04c      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4a33      	ldr	r2, [pc, #204]	; (8006b00 <USB_SetTurnaroundTime+0x128>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d306      	bcc.n	8006a44 <USB_SetTurnaroundTime+0x6c>
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4a32      	ldr	r2, [pc, #200]	; (8006b04 <USB_SetTurnaroundTime+0x12c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d802      	bhi.n	8006a44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a3e:	230c      	movs	r3, #12
 8006a40:	617b      	str	r3, [r7, #20]
 8006a42:	e041      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4a2f      	ldr	r2, [pc, #188]	; (8006b04 <USB_SetTurnaroundTime+0x12c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d906      	bls.n	8006a5a <USB_SetTurnaroundTime+0x82>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4a2e      	ldr	r2, [pc, #184]	; (8006b08 <USB_SetTurnaroundTime+0x130>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d802      	bhi.n	8006a5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a54:	230b      	movs	r3, #11
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e036      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4a2a      	ldr	r2, [pc, #168]	; (8006b08 <USB_SetTurnaroundTime+0x130>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d906      	bls.n	8006a70 <USB_SetTurnaroundTime+0x98>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4a29      	ldr	r2, [pc, #164]	; (8006b0c <USB_SetTurnaroundTime+0x134>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d802      	bhi.n	8006a70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a6a:	230a      	movs	r3, #10
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e02b      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4a26      	ldr	r2, [pc, #152]	; (8006b0c <USB_SetTurnaroundTime+0x134>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d906      	bls.n	8006a86 <USB_SetTurnaroundTime+0xae>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4a25      	ldr	r2, [pc, #148]	; (8006b10 <USB_SetTurnaroundTime+0x138>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d202      	bcs.n	8006a86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a80:	2309      	movs	r3, #9
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e020      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4a21      	ldr	r2, [pc, #132]	; (8006b10 <USB_SetTurnaroundTime+0x138>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d306      	bcc.n	8006a9c <USB_SetTurnaroundTime+0xc4>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <USB_SetTurnaroundTime+0x13c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d802      	bhi.n	8006a9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a96:	2308      	movs	r3, #8
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	e015      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <USB_SetTurnaroundTime+0x13c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d906      	bls.n	8006ab2 <USB_SetTurnaroundTime+0xda>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <USB_SetTurnaroundTime+0x140>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d202      	bcs.n	8006ab2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006aac:	2307      	movs	r3, #7
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e00a      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ab2:	2306      	movs	r3, #6
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	e007      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006abe:	2309      	movs	r3, #9
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e001      	b.n	8006ac8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ac4:	2309      	movs	r3, #9
 8006ac6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	029b      	lsls	r3, r3, #10
 8006adc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	00d8acbf 	.word	0x00d8acbf
 8006af8:	00e4e1c0 	.word	0x00e4e1c0
 8006afc:	00f42400 	.word	0x00f42400
 8006b00:	01067380 	.word	0x01067380
 8006b04:	011a499f 	.word	0x011a499f
 8006b08:	01312cff 	.word	0x01312cff
 8006b0c:	014ca43f 	.word	0x014ca43f
 8006b10:	016e3600 	.word	0x016e3600
 8006b14:	01a6ab1f 	.word	0x01a6ab1f
 8006b18:	01e84800 	.word	0x01e84800

08006b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f043 0201 	orr.w	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f023 0201 	bic.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d106      	bne.n	8006b8c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60da      	str	r2, [r3, #12]
 8006b8a:	e00b      	b.n	8006ba4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d106      	bne.n	8006ba0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60da      	str	r2, [r3, #12]
 8006b9e:	e001      	b.n	8006ba4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e003      	b.n	8006bac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ba4:	2032      	movs	r0, #50	; 0x32
 8006ba6:	f7fb f931 	bl	8001e0c <HAL_Delay>

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b086      	sub	sp, #24
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e009      	b.n	8006be8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	3340      	adds	r3, #64	; 0x40
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	3301      	adds	r3, #1
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b0e      	cmp	r3, #14
 8006bec:	d9f2      	bls.n	8006bd4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11c      	bne.n	8006c2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e005      	b.n	8006c3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c40:	461a      	mov	r2, r3
 8006c42:	2300      	movs	r3, #0
 8006c44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c54:	461a      	mov	r2, r3
 8006c56:	680b      	ldr	r3, [r1, #0]
 8006c58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10c      	bne.n	8006c7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c66:	2100      	movs	r1, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f949 	bl	8006f00 <USB_SetDevSpeed>
 8006c6e:	e008      	b.n	8006c82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c70:	2101      	movs	r1, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f944 	bl	8006f00 <USB_SetDevSpeed>
 8006c78:	e003      	b.n	8006c82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c7a:	2103      	movs	r1, #3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f93f 	bl	8006f00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c82:	2110      	movs	r1, #16
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f8f3 	bl	8006e70 <USB_FlushTxFifo>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f911 	bl	8006ebc <USB_FlushRxFifo>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	461a      	mov	r2, r3
 8006cac:	2300      	movs	r3, #0
 8006cae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	2300      	movs	r3, #0
 8006cba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	e043      	b.n	8006d56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce4:	d118      	bne.n	8006d18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	e013      	b.n	8006d2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	e008      	b.n	8006d2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	461a      	mov	r2, r3
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d3b7      	bcc.n	8006cce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e043      	b.n	8006dec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d7a:	d118      	bne.n	8006dae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e013      	b.n	8006dc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	461a      	mov	r2, r3
 8006da6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e008      	b.n	8006dc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	461a      	mov	r2, r3
 8006de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006de4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3301      	adds	r3, #1
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3b7      	bcc.n	8006d64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	f043 0210 	orr.w	r2, r3, #16
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <USB_DevInit+0x2b8>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f043 0208 	orr.w	r2, r3, #8
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d107      	bne.n	8006e5c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e54:	f043 0304 	orr.w	r3, r3, #4
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e68:	b004      	add	sp, #16
 8006e6a:	4770      	bx	lr
 8006e6c:	803c3800 	.word	0x803c3800

08006e70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <USB_FlushTxFifo+0x48>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e006      	b.n	8006eaa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d0f0      	beq.n	8006e8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	00030d40 	.word	0x00030d40

08006ebc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4a09      	ldr	r2, [pc, #36]	; (8006efc <USB_FlushRxFifo+0x40>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e006      	b.n	8006eee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0310 	and.w	r3, r3, #16
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d0f0      	beq.n	8006ece <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	00030d40 	.word	0x00030d40

08006f00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	460b      	mov	r3, r1
 8006f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	68f9      	ldr	r1, [r7, #12]
 8006f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f20:	4313      	orrs	r3, r2
 8006f22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b087      	sub	sp, #28
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 0306 	and.w	r3, r3, #6
 8006f4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]
 8006f56:	e00a      	b.n	8006f6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d002      	beq.n	8006f64 <USB_GetDevSpeed+0x32>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b06      	cmp	r3, #6
 8006f62:	d102      	bne.n	8006f6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f64:	2302      	movs	r3, #2
 8006f66:	75fb      	strb	r3, [r7, #23]
 8006f68:	e001      	b.n	8006f6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f6a:	230f      	movs	r3, #15
 8006f6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d13a      	bne.n	800700e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	69da      	ldr	r2, [r3, #28]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f303 	lsl.w	r3, r1, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d155      	bne.n	800707c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	78db      	ldrb	r3, [r3, #3]
 8006fea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	059b      	lsls	r3, r3, #22
 8006ff2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e036      	b.n	800707c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007014:	69da      	ldr	r2, [r3, #28]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	f003 030f 	and.w	r3, r3, #15
 800701e:	2101      	movs	r1, #1
 8007020:	fa01 f303 	lsl.w	r3, r1, r3
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702c:	4313      	orrs	r3, r2
 800702e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d11a      	bne.n	800707c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	015a      	lsls	r2, r3, #5
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	78db      	ldrb	r3, [r3, #3]
 8007060:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007062:	430b      	orrs	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800707a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d161      	bne.n	800716c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070be:	d11f      	bne.n	8007100 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	2101      	movs	r1, #1
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	b29b      	uxth	r3, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	68f9      	ldr	r1, [r7, #12]
 800711c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007120:	4013      	ands	r3, r2
 8007122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 030f 	and.w	r3, r3, #15
 8007134:	2101      	movs	r1, #1
 8007136:	fa01 f303 	lsl.w	r3, r1, r3
 800713a:	b29b      	uxth	r3, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007144:	4013      	ands	r3, r2
 8007146:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	0159      	lsls	r1, r3, #5
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	440b      	add	r3, r1
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	4619      	mov	r1, r3
 8007164:	4b35      	ldr	r3, [pc, #212]	; (800723c <USB_DeactivateEndpoint+0x1b0>)
 8007166:	4013      	ands	r3, r2
 8007168:	600b      	str	r3, [r1, #0]
 800716a:	e060      	b.n	800722e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800717e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007182:	d11f      	bne.n	80071c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	2101      	movs	r1, #1
 80071d6:	fa01 f303 	lsl.w	r3, r1, r3
 80071da:	041b      	lsls	r3, r3, #16
 80071dc:	43db      	mvns	r3, r3
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e4:	4013      	ands	r3, r2
 80071e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	2101      	movs	r1, #1
 80071fa:	fa01 f303 	lsl.w	r3, r1, r3
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	43db      	mvns	r3, r3
 8007202:	68f9      	ldr	r1, [r7, #12]
 8007204:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007208:	4013      	ands	r3, r2
 800720a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	0159      	lsls	r1, r3, #5
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	440b      	add	r3, r1
 8007222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007226:	4619      	mov	r1, r3
 8007228:	4b05      	ldr	r3, [pc, #20]	; (8007240 <USB_DeactivateEndpoint+0x1b4>)
 800722a:	4013      	ands	r3, r2
 800722c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	ec337800 	.word	0xec337800
 8007240:	eff37800 	.word	0xeff37800

08007244 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	; 0x28
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b01      	cmp	r3, #1
 8007262:	f040 815c 	bne.w	800751e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d132      	bne.n	80072d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800728c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	69fa      	ldr	r2, [r7, #28]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072cc:	0cdb      	lsrs	r3, r3, #19
 80072ce:	04db      	lsls	r3, r3, #19
 80072d0:	6113      	str	r3, [r2, #16]
 80072d2:	e074      	b.n	80073be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	69ba      	ldr	r2, [r7, #24]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ee:	0cdb      	lsrs	r3, r3, #19
 80072f0:	04db      	lsls	r3, r3, #19
 80072f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	6959      	ldr	r1, [r3, #20]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	440b      	add	r3, r1
 8007330:	1e59      	subs	r1, r3, #1
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	fbb1 f3f3 	udiv	r3, r1, r3
 800733a:	04d9      	lsls	r1, r3, #19
 800733c:	4b9d      	ldr	r3, [pc, #628]	; (80075b4 <USB_EPStartXfer+0x370>)
 800733e:	400b      	ands	r3, r1
 8007340:	69b9      	ldr	r1, [r7, #24]
 8007342:	0148      	lsls	r0, r1, #5
 8007344:	69f9      	ldr	r1, [r7, #28]
 8007346:	4401      	add	r1, r0
 8007348:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800734c:	4313      	orrs	r3, r2
 800734e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007366:	69b9      	ldr	r1, [r7, #24]
 8007368:	0148      	lsls	r0, r1, #5
 800736a:	69f9      	ldr	r1, [r7, #28]
 800736c:	4401      	add	r1, r0
 800736e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007372:	4313      	orrs	r3, r2
 8007374:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	78db      	ldrb	r3, [r3, #3]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d11f      	bne.n	80073be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800739c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d14b      	bne.n	800745c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	78db      	ldrb	r3, [r3, #3]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d128      	bne.n	800743a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d110      	bne.n	800741a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	440a      	add	r2, r1
 800740e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	e00f      	b.n	800743a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	69fa      	ldr	r2, [r7, #28]
 800742e:	440a      	add	r2, r1
 8007430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007438:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007454:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	e12f      	b.n	80076bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	0151      	lsls	r1, r2, #5
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	440a      	add	r2, r1
 8007472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007476:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800747a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	78db      	ldrb	r3, [r3, #3]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d015      	beq.n	80074b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8117 	beq.w	80076bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	2101      	movs	r1, #1
 80074a0:	fa01 f303 	lsl.w	r3, r1, r3
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074aa:	4313      	orrs	r3, r2
 80074ac:	634b      	str	r3, [r1, #52]	; 0x34
 80074ae:	e105      	b.n	80076bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d110      	bne.n	80074e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	0151      	lsls	r1, r2, #5
 80074d2:	69fa      	ldr	r2, [r7, #28]
 80074d4:	440a      	add	r2, r1
 80074d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	e00f      	b.n	8007502 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	0151      	lsls	r1, r2, #5
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	440a      	add	r2, r1
 80074f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007500:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	68d9      	ldr	r1, [r3, #12]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	781a      	ldrb	r2, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	b298      	uxth	r0, r3
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4603      	mov	r3, r0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fa2b 	bl	8007972 <USB_WritePacket>
 800751c:	e0ce      	b.n	80076bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	0151      	lsls	r1, r2, #5
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	440a      	add	r2, r1
 8007534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007538:	0cdb      	lsrs	r3, r3, #19
 800753a:	04db      	lsls	r3, r3, #19
 800753c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	69ba      	ldr	r2, [r7, #24]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	440a      	add	r2, r1
 8007554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007558:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800755c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007560:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d126      	bne.n	80075b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007580:	69b9      	ldr	r1, [r7, #24]
 8007582:	0148      	lsls	r0, r1, #5
 8007584:	69f9      	ldr	r1, [r7, #28]
 8007586:	4401      	add	r1, r0
 8007588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800758c:	4313      	orrs	r3, r2
 800758e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075ae:	6113      	str	r3, [r2, #16]
 80075b0:	e036      	b.n	8007620 <USB_EPStartXfer+0x3dc>
 80075b2:	bf00      	nop
 80075b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	695a      	ldr	r2, [r3, #20]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	4413      	add	r3, r2
 80075c2:	1e5a      	subs	r2, r3, #1
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	8afb      	ldrh	r3, [r7, #22]
 80075de:	04d9      	lsls	r1, r3, #19
 80075e0:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <USB_EPStartXfer+0x484>)
 80075e2:	400b      	ands	r3, r1
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	0148      	lsls	r0, r1, #5
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	4401      	add	r1, r0
 80075ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	8af9      	ldrh	r1, [r7, #22]
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007610:	69b9      	ldr	r1, [r7, #24]
 8007612:	0148      	lsls	r0, r1, #5
 8007614:	69f9      	ldr	r1, [r7, #28]
 8007616:	4401      	add	r1, r0
 8007618:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800761c:	4313      	orrs	r3, r2
 800761e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10d      	bne.n	8007642 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	68d9      	ldr	r1, [r3, #12]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763e:	460a      	mov	r2, r1
 8007640:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	78db      	ldrb	r3, [r3, #3]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d128      	bne.n	800769c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007656:	2b00      	cmp	r3, #0
 8007658:	d110      	bne.n	800767c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	69fa      	ldr	r2, [r7, #28]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e00f      	b.n	800769c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	1ff80000 	.word	0x1ff80000

080076cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 80cd 	bne.w	8007888 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d132      	bne.n	800775c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007718:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007734:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007754:	0cdb      	lsrs	r3, r3, #19
 8007756:	04db      	lsls	r3, r3, #19
 8007758:	6113      	str	r3, [r2, #16]
 800775a:	e04e      	b.n	80077fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007776:	0cdb      	lsrs	r3, r3, #19
 8007778:	04db      	lsls	r3, r3, #19
 800777a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007796:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800779a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800779e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d903      	bls.n	80077b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ea:	6939      	ldr	r1, [r7, #16]
 80077ec:	0148      	lsls	r0, r1, #5
 80077ee:	6979      	ldr	r1, [r7, #20]
 80077f0:	4401      	add	r1, r0
 80077f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077f6:	4313      	orrs	r3, r2
 80077f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d11e      	bne.n	800783e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	461a      	mov	r2, r3
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	e092      	b.n	8007964 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800785c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d07e      	beq.n	8007964 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	2101      	movs	r1, #1
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	6979      	ldr	r1, [r7, #20]
 800787e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007882:	4313      	orrs	r3, r2
 8007884:	634b      	str	r3, [r1, #52]	; 0x34
 8007886:	e06d      	b.n	8007964 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a2:	0cdb      	lsrs	r3, r3, #19
 80078a4:	04db      	lsls	r3, r3, #19
 80078a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	691a      	ldr	r2, [r3, #16]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007912:	6939      	ldr	r1, [r7, #16]
 8007914:	0148      	lsls	r0, r1, #5
 8007916:	6979      	ldr	r1, [r7, #20]
 8007918:	4401      	add	r1, r0
 800791a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800791e:	4313      	orrs	r3, r2
 8007920:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d10d      	bne.n	8007944 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68d9      	ldr	r1, [r3, #12]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007940:	460a      	mov	r2, r1
 8007942:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	440a      	add	r2, r1
 800795a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007962:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007972:	b480      	push	{r7}
 8007974:	b089      	sub	sp, #36	; 0x24
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	4611      	mov	r1, r2
 800797e:	461a      	mov	r2, r3
 8007980:	460b      	mov	r3, r1
 8007982:	71fb      	strb	r3, [r7, #7]
 8007984:	4613      	mov	r3, r2
 8007986:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007994:	2b00      	cmp	r3, #0
 8007996:	d11a      	bne.n	80079ce <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007998:	88bb      	ldrh	r3, [r7, #4]
 800799a:	3303      	adds	r3, #3
 800799c:	089b      	lsrs	r3, r3, #2
 800799e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	e00f      	b.n	80079c6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	031a      	lsls	r2, r3, #12
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b2:	461a      	mov	r2, r3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	3304      	adds	r3, #4
 80079be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	3301      	adds	r3, #1
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d3eb      	bcc.n	80079a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3724      	adds	r7, #36	; 0x24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	; 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	3303      	adds	r3, #3
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
 80079fe:	e00b      	b.n	8007a18 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	3301      	adds	r3, #1
 8007a16:	61bb      	str	r3, [r7, #24]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d3ef      	bcc.n	8007a00 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007a20:	69fb      	ldr	r3, [r7, #28]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3724      	adds	r7, #36	; 0x24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	785b      	ldrb	r3, [r3, #1]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d12c      	bne.n	8007aa4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	db12      	blt.n	8007a82 <USB_EPSetStall+0x54>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00f      	beq.n	8007a82 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a80:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	e02b      	b.n	8007afc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	db12      	blt.n	8007adc <USB_EPSetStall+0xae>
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00f      	beq.n	8007adc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ada:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d128      	bne.n	8007b78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	0151      	lsls	r1, r2, #5
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	440a      	add	r2, r1
 8007b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	78db      	ldrb	r3, [r3, #3]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d003      	beq.n	8007b56 <USB_EPClearStall+0x4c>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d138      	bne.n	8007bc8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	0151      	lsls	r1, r2, #5
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	440a      	add	r2, r1
 8007b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	e027      	b.n	8007bc8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	0151      	lsls	r1, r2, #5
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	78db      	ldrb	r3, [r3, #3]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d003      	beq.n	8007ba8 <USB_EPClearStall+0x9e>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d10f      	bne.n	8007bc8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bf8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	011b      	lsls	r3, r3, #4
 8007c06:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c10:	4313      	orrs	r3, r2
 8007c12:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c50:	f023 0302 	bic.w	r3, r3, #2
 8007c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c7e:	f023 0303 	bic.w	r3, r3, #3
 8007c82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c92:	f043 0302 	orr.w	r3, r3, #2
 8007c96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b085      	sub	sp, #20
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	4013      	ands	r3, r2
 8007cee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	0c1b      	lsrs	r3, r3, #16
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	4013      	ands	r3, r2
 8007d22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	b29b      	uxth	r3, r3
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d44:	78fb      	ldrb	r3, [r7, #3]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d62:	68bb      	ldr	r3, [r7, #8]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d92:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007da0:	01db      	lsls	r3, r3, #7
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	f003 0301 	and.w	r3, r3, #1
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e06:	f023 0307 	bic.w	r3, r3, #7
 8007e0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	607a      	str	r2, [r7, #4]
 8007e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	333c      	adds	r3, #60	; 0x3c
 8007e46:	3304      	adds	r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	4a26      	ldr	r2, [pc, #152]	; (8007ee8 <USB_EP0_OutStart+0xb8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d90a      	bls.n	8007e6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e64:	d101      	bne.n	8007e6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e037      	b.n	8007eda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e70:	461a      	mov	r2, r3
 8007e72:	2300      	movs	r3, #0
 8007e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e98:	f043 0318 	orr.w	r3, r3, #24
 8007e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007eb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d10f      	bne.n	8007ed8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007ed6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	4f54300a 	.word	0x4f54300a

08007eec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3301      	adds	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <USB_CoreReset+0x64>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d901      	bls.n	8007f0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e01b      	b.n	8007f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	daf2      	bge.n	8007ef8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	f043 0201 	orr.w	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <USB_CoreReset+0x64>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d901      	bls.n	8007f34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e006      	b.n	8007f42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d0f0      	beq.n	8007f22 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	00030d40 	.word	0x00030d40

08007f54 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t rx_buf[6];
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007f60:	2010      	movs	r0, #16
 8007f62:	f004 fdb7 	bl	800cad4 <USBD_static_malloc>
 8007f66:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d108      	bne.n	8007f80 <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 8007f6e:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <USBD_HID_Init+0x84>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e027      	b.n	8007fd0 <USBD_HID_Init+0x7c>
  }

  pdev->pClassData = (void *)hhid;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7c1b      	ldrb	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2207      	movs	r2, #7
 8007f94:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007f96:	e002      	b.n	8007f9e <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007f9e:	2320      	movs	r3, #32
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	2181      	movs	r1, #129	; 0x81
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f004 fc36 	bl	800c816 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT, This is to get out rumble data */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8007fb0:	2306      	movs	r3, #6
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	2102      	movs	r1, #2
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f004 fc2d 	bl	800c816 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, 1);
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4a07      	ldr	r2, [pc, #28]	; (8007fdc <USBD_HID_Init+0x88>)
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f004 fd16 	bl	800c9f4 <USBD_LL_PrepareReceive>
  hhid->state = HID_IDLE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000ad9 	.word	0x20000ad9
 8007fdc:	20000adc 	.word	0x20000adc

08007fe0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007fec:	2181      	movs	r1, #129	; 0x81
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f004 fc37 	bl	800c862 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008010:	4618      	mov	r0, r3
 8008012:	f004 fd6d 	bl	800caf0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008038:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d104      	bne.n	8008052 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8008048:	4b94      	ldr	r3, [pc, #592]	; (800829c <USBD_HID_Setup+0x274>)
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 800804e:	2303      	movs	r3, #3
 8008050:	e11f      	b.n	8008292 <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	f000 80cd 	beq.w	80081fa <USBD_HID_Setup+0x1d2>
 8008060:	2b40      	cmp	r3, #64	; 0x40
 8008062:	f200 810d 	bhi.w	8008280 <USBD_HID_Setup+0x258>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d045      	beq.n	80080f6 <USBD_HID_Setup+0xce>
 800806a:	2b20      	cmp	r3, #32
 800806c:	f040 8108 	bne.w	8008280 <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	785b      	ldrb	r3, [r3, #1]
 8008074:	3b02      	subs	r3, #2
 8008076:	2b09      	cmp	r3, #9
 8008078:	d835      	bhi.n	80080e6 <USBD_HID_Setup+0xbe>
 800807a:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <USBD_HID_Setup+0x58>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080d7 	.word	0x080080d7
 8008084:	080080b7 	.word	0x080080b7
 8008088:	080080e7 	.word	0x080080e7
 800808c:	080080e7 	.word	0x080080e7
 8008090:	080080e7 	.word	0x080080e7
 8008094:	080080e7 	.word	0x080080e7
 8008098:	080080e7 	.word	0x080080e7
 800809c:	080080e7 	.word	0x080080e7
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080a9 	.word	0x080080a9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	885b      	ldrh	r3, [r3, #2]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	601a      	str	r2, [r3, #0]
          break;
 80080b4:	e01e      	b.n	80080f4 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2201      	movs	r2, #1
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 fac4 	bl	800964a <USBD_CtlSendData>
          break;
 80080c2:	e017      	b.n	80080f4 <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	0a1b      	lsrs	r3, r3, #8
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	605a      	str	r2, [r3, #4]
          break;
 80080d4:	e00e      	b.n	80080f4 <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	3304      	adds	r3, #4
 80080da:	2201      	movs	r2, #1
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fab3 	bl	800964a <USBD_CtlSendData>
          break;
 80080e4:	e006      	b.n	80080f4 <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 fa3d 	bl	8009568 <USBD_CtlError>
          ret = USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	77fb      	strb	r3, [r7, #31]
          break;
 80080f2:	bf00      	nop
      }
      break;
 80080f4:	e0cc      	b.n	8008290 <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	2b0b      	cmp	r3, #11
 80080fc:	d874      	bhi.n	80081e8 <USBD_HID_Setup+0x1c0>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <USBD_HID_Setup+0xdc>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008135 	.word	0x08008135
 8008108:	080081f7 	.word	0x080081f7
 800810c:	080081e9 	.word	0x080081e9
 8008110:	080081e9 	.word	0x080081e9
 8008114:	080081e9 	.word	0x080081e9
 8008118:	080081e9 	.word	0x080081e9
 800811c:	0800815f 	.word	0x0800815f
 8008120:	080081e9 	.word	0x080081e9
 8008124:	080081e9 	.word	0x080081e9
 8008128:	080081e9 	.word	0x080081e9
 800812c:	08008197 	.word	0x08008197
 8008130:	080081c1 	.word	0x080081c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b03      	cmp	r3, #3
 800813e:	d107      	bne.n	8008150 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008140:	f107 030e 	add.w	r3, r7, #14
 8008144:	2202      	movs	r2, #2
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f001 fa7e 	bl	800964a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800814e:	e053      	b.n	80081f8 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fa08 	bl	8009568 <USBD_CtlError>
            ret = USBD_FAIL;
 8008158:	2303      	movs	r3, #3
 800815a:	77fb      	strb	r3, [r7, #31]
          break;
 800815c:	e04c      	b.n	80081f8 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	885b      	ldrh	r3, [r3, #2]
 8008162:	0a1b      	lsrs	r3, r3, #8
 8008164:	b29b      	uxth	r3, r3
 8008166:	2b21      	cmp	r3, #33	; 0x21
 8008168:	d10e      	bne.n	8008188 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800816a:	4b4d      	ldr	r3, [pc, #308]	; (80082a0 <USBD_HID_Setup+0x278>)
 800816c:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	88db      	ldrh	r3, [r3, #6]
 8008172:	2b12      	cmp	r3, #18
 8008174:	bf28      	it	cs
 8008176:	2312      	movcs	r3, #18
 8008178:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800817a:	8afb      	ldrh	r3, [r7, #22]
 800817c:	461a      	mov	r2, r3
 800817e:	6939      	ldr	r1, [r7, #16]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 fa62 	bl	800964a <USBD_CtlSendData>
          break;
 8008186:	e037      	b.n	80081f8 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f9ec 	bl	8009568 <USBD_CtlError>
            ret = USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	77fb      	strb	r3, [r7, #31]
            break;
 8008194:	e030      	b.n	80081f8 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d107      	bne.n	80081b2 <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	3308      	adds	r3, #8
 80081a6:	2201      	movs	r2, #1
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fa4d 	bl	800964a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081b0:	e022      	b.n	80081f8 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f9d7 	bl	8009568 <USBD_CtlError>
            ret = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	77fb      	strb	r3, [r7, #31]
          break;
 80081be:	e01b      	b.n	80081f8 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d106      	bne.n	80081da <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	885b      	ldrh	r3, [r3, #2]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081d8:	e00e      	b.n	80081f8 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 f9c3 	bl	8009568 <USBD_CtlError>
            ret = USBD_FAIL;
 80081e2:	2303      	movs	r3, #3
 80081e4:	77fb      	strb	r3, [r7, #31]
          break;
 80081e6:	e007      	b.n	80081f8 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081e8:	6839      	ldr	r1, [r7, #0]
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 f9bc 	bl	8009568 <USBD_CtlError>
          ret = USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	77fb      	strb	r3, [r7, #31]
          break;
 80081f4:	e000      	b.n	80081f8 <USBD_HID_Setup+0x1d0>
          break;
 80081f6:	bf00      	nop
      }
      break;
 80081f8:	e04a      	b.n	8008290 <USBD_HID_Setup+0x268>
    /*This is for the og xbox, this is the custom vendor request */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 80081fa:	4b2a      	ldr	r3, [pc, #168]	; (80082a4 <USBD_HID_Setup+0x27c>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	3301      	adds	r3, #1
 8008200:	b2da      	uxtb	r2, r3
 8008202:	4b28      	ldr	r3, [pc, #160]	; (80082a4 <USBD_HID_Setup+0x27c>)
 8008204:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	2b06      	cmp	r3, #6
 800820c:	d10f      	bne.n	800822e <USBD_HID_Setup+0x206>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	885b      	ldrh	r3, [r3, #2]
 8008212:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008216:	d10a      	bne.n	800822e <USBD_HID_Setup+0x206>
    		len = 16;
 8008218:	2310      	movs	r3, #16
 800821a:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 800821c:	4b20      	ldr	r3, [pc, #128]	; (80082a0 <USBD_HID_Setup+0x278>)
 800821e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008220:	8afb      	ldrh	r3, [r7, #22]
 8008222:	461a      	mov	r2, r3
 8008224:	6939      	ldr	r1, [r7, #16]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f001 fa0f 	bl	800964a <USBD_CtlSendData>
 800822c:	e027      	b.n	800827e <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d10f      	bne.n	8008256 <USBD_HID_Setup+0x22e>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	885b      	ldrh	r3, [r3, #2]
 800823a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823e:	d10a      	bne.n	8008256 <USBD_HID_Setup+0x22e>
    		len = 20;
 8008240:	2314      	movs	r3, #20
 8008242:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008244:	4b18      	ldr	r3, [pc, #96]	; (80082a8 <USBD_HID_Setup+0x280>)
 8008246:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008248:	8afb      	ldrh	r3, [r7, #22]
 800824a:	461a      	mov	r2, r3
 800824c:	6939      	ldr	r1, [r7, #16]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 f9fb 	bl	800964a <USBD_CtlSendData>
 8008254:	e013      	b.n	800827e <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d117      	bne.n	800828e <USBD_HID_Setup+0x266>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	885b      	ldrh	r3, [r3, #2]
 8008262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008266:	d112      	bne.n	800828e <USBD_HID_Setup+0x266>
    		len = 6;
 8008268:	2306      	movs	r3, #6
 800826a:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 800826c:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <USBD_HID_Setup+0x284>)
 800826e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008270:	8afb      	ldrh	r3, [r7, #22]
 8008272:	461a      	mov	r2, r3
 8008274:	6939      	ldr	r1, [r7, #16]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 f9e7 	bl	800964a <USBD_CtlSendData>
    	}
    break;
 800827c:	e007      	b.n	800828e <USBD_HID_Setup+0x266>
 800827e:	e006      	b.n	800828e <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 f970 	bl	8009568 <USBD_CtlError>
      ret = USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	77fb      	strb	r3, [r7, #31]
      break;
 800828c:	e000      	b.n	8008290 <USBD_HID_Setup+0x268>
    break;
 800828e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008290:	7ffb      	ldrb	r3, [r7, #31]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20000ad9 	.word	0x20000ad9
 80082a0:	20000090 	.word	0x20000090
 80082a4:	20000ad8 	.word	0x20000ad8
 80082a8:	200000ac 	.word	0x200000ac
 80082ac:	200000c0 	.word	0x200000c0

080082b0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e013      	b.n	80082f8 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d10c      	bne.n	80082f6 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	7b1b      	ldrb	r3, [r3, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d108      	bne.n	80082f6 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2201      	movs	r2, #1
 80082e8:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	2181      	movs	r1, #129	; 0x81
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f004 fb5e 	bl	800c9b2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800830e:	4b03      	ldr	r3, [pc, #12]	; (800831c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	20000050 	.word	0x20000050

08008320 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008328:	bf00      	nop
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2220      	movs	r2, #32
 8008344:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008346:	4b03      	ldr	r3, [pc, #12]	; (8008354 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	20000070 	.word	0x20000070

08008358 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800836a:	2200      	movs	r2, #0
 800836c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_Receive(&hUsbDeviceFS.pData, HID_EPOUT_ADDR, rx_buf, 6);
 8008388:	2306      	movs	r3, #6
 800838a:	4a05      	ldr	r2, [pc, #20]	; (80083a0 <USBD_HID_DataOut+0x24>)
 800838c:	2102      	movs	r1, #2
 800838e:	4805      	ldr	r0, [pc, #20]	; (80083a4 <USBD_HID_DataOut+0x28>)
 8008390:	f7fb fa70 	bl	8003874 <HAL_PCD_EP_Receive>
	return USBD_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000adc 	.word	0x20000adc
 80083a4:	20005764 	.word	0x20005764

080083a8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	220a      	movs	r2, #10
 80083b4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80083b6:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	200000a0 	.word	0x200000a0

080083c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083dc:	2303      	movs	r3, #3
 80083de:	e01f      	b.n	8008420 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	79fa      	ldrb	r2, [r7, #7]
 8008412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f004 f997 	bl	800c748 <USBD_LL_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800841e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e016      	b.n	800846e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	f107 020e 	add.w	r2, r7, #14
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
 8008464:	4602      	mov	r2, r0
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b082      	sub	sp, #8
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f004 f9ae 	bl	800c7e0 <USBD_LL_Start>
 8008484:	4603      	mov	r3, r0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80084b0:	2303      	movs	r3, #3
 80084b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	4611      	mov	r1, r2
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	78fa      	ldrb	r2, [r7, #3]
 80084fc:	4611      	mov	r1, r2
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	4798      	blx	r3
  }

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 ffe8 	bl	80094f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008532:	461a      	mov	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2b02      	cmp	r3, #2
 8008546:	d01a      	beq.n	800857e <USBD_LL_SetupStage+0x72>
 8008548:	2b02      	cmp	r3, #2
 800854a:	d822      	bhi.n	8008592 <USBD_LL_SetupStage+0x86>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <USBD_LL_SetupStage+0x4a>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d00a      	beq.n	800856a <USBD_LL_SetupStage+0x5e>
 8008554:	e01d      	b.n	8008592 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa62 	bl	8008a28 <USBD_StdDevReq>
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
      break;
 8008568:	e020      	b.n	80085ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fb1e 	bl	8008bb4 <USBD_StdItfReq>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	e016      	b.n	80085ac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fb5d 	bl	8008c46 <USBD_StdEPReq>
 800858c:	4603      	mov	r3, r0
 800858e:	73fb      	strb	r3, [r7, #15]
      break;
 8008590:	e00c      	b.n	80085ac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008598:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800859c:	b2db      	uxtb	r3, r3
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f004 f97d 	bl	800c8a0 <USBD_LL_StallEP>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73fb      	strb	r3, [r7, #15]
      break;
 80085aa:	bf00      	nop
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b086      	sub	sp, #24
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	460b      	mov	r3, r1
 80085c0:	607a      	str	r2, [r7, #4]
 80085c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d138      	bne.n	800863c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80085d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d14a      	bne.n	8008672 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d913      	bls.n	8008610 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4293      	cmp	r3, r2
 8008600:	bf28      	it	cs
 8008602:	4613      	movcs	r3, r2
 8008604:	461a      	mov	r2, r3
 8008606:	6879      	ldr	r1, [r7, #4]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 f84a 	bl	80096a2 <USBD_CtlContinueRx>
 800860e:	e030      	b.n	8008672 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b03      	cmp	r3, #3
 800861a:	d10b      	bne.n	8008634 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f001 f845 	bl	80096c4 <USBD_CtlSendStatus>
 800863a:	e01a      	b.n	8008672 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b03      	cmp	r3, #3
 8008646:	d114      	bne.n	8008672 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00e      	beq.n	8008672 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	7afa      	ldrb	r2, [r7, #11]
 800865e:	4611      	mov	r1, r2
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	4798      	blx	r3
 8008664:	4603      	mov	r3, r0
 8008666:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	e000      	b.n	8008674 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3718      	adds	r7, #24
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	460b      	mov	r3, r1
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d16b      	bne.n	8008768 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3314      	adds	r3, #20
 8008694:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800869c:	2b02      	cmp	r3, #2
 800869e:	d156      	bne.n	800874e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d914      	bls.n	80086d6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	1ad2      	subs	r2, r2, r3
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	461a      	mov	r2, r3
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 ffdc 	bl	8009680 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c8:	2300      	movs	r3, #0
 80086ca:	2200      	movs	r2, #0
 80086cc:	2100      	movs	r1, #0
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f004 f990 	bl	800c9f4 <USBD_LL_PrepareReceive>
 80086d4:	e03b      	b.n	800874e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	68da      	ldr	r2, [r3, #12]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d11c      	bne.n	800871c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d316      	bcc.n	800871c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d20f      	bcs.n	800871c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 ffbd 	bl	8009680 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f004 f96d 	bl	800c9f4 <USBD_LL_PrepareReceive>
 800871a:	e018      	b.n	800874e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b03      	cmp	r3, #3
 8008726:	d10b      	bne.n	8008740 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008740:	2180      	movs	r1, #128	; 0x80
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f004 f8ac 	bl	800c8a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 ffce 	bl	80096ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d122      	bne.n	800879e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7ff fe98 	bl	800848e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008766:	e01a      	b.n	800879e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b03      	cmp	r3, #3
 8008772:	d114      	bne.n	800879e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00e      	beq.n	800879e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008786:	695b      	ldr	r3, [r3, #20]
 8008788:	7afa      	ldrb	r2, [r7, #11]
 800878a:	4611      	mov	r1, r2
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	4798      	blx	r3
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d001      	beq.n	800879e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	e000      	b.n	80087a0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80087d8:	2303      	movs	r3, #3
 80087da:	e02f      	b.n	800883c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00f      	beq.n	8008806 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d009      	beq.n	8008806 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6852      	ldr	r2, [r2, #4]
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	4611      	mov	r1, r2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f004 f802 	bl	800c816 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2240      	movs	r2, #64	; 0x40
 800881e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008822:	2340      	movs	r3, #64	; 0x40
 8008824:	2200      	movs	r2, #0
 8008826:	2180      	movs	r1, #128	; 0x80
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f003 fff4 	bl	800c816 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2240      	movs	r2, #64	; 0x40
 8008838:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008872:	b2da      	uxtb	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d106      	bne.n	80088b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e012      	b.n	80088fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b03      	cmp	r3, #3
 80088e0:	d10b      	bne.n	80088fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800891a:	2303      	movs	r3, #3
 800891c:	e014      	b.n	8008948 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b03      	cmp	r3, #3
 8008928:	d10d      	bne.n	8008946 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008966:	2303      	movs	r3, #3
 8008968:	e014      	b.n	8008994 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d10d      	bne.n	8008992 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	d007      	beq.n	8008992 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	4611      	mov	r1, r2
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d009      	beq.n	80089e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6852      	ldr	r2, [r2, #4]
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	4611      	mov	r1, r2
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
  }

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	3301      	adds	r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a08:	8a3b      	ldrh	r3, [r7, #16]
 8008a0a:	021b      	lsls	r3, r3, #8
 8008a0c:	b21a      	sxth	r2, r3
 8008a0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	b21b      	sxth	r3, r3
 8008a16:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a18:	89fb      	ldrh	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	371c      	adds	r7, #28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
	...

08008a28 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	2bc1      	cmp	r3, #193	; 0xc1
 8008a3c:	d148      	bne.n	8008ad0 <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	785b      	ldrb	r3, [r3, #1]
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d10f      	bne.n	8008a6e <USBD_StdDevReq+0x46>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008a56:	d10a      	bne.n	8008a6e <USBD_StdDevReq+0x46>
  		len = 16;
 8008a58:	2310      	movs	r3, #16
 8008a5a:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 8008a5c:	4b51      	ldr	r3, [pc, #324]	; (8008ba4 <USBD_StdDevReq+0x17c>)
 8008a5e:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008a60:	89bb      	ldrh	r3, [r7, #12]
 8008a62:	461a      	mov	r2, r3
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fdef 	bl	800964a <USBD_CtlSendData>
 8008a6c:	e026      	b.n	8008abc <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	785b      	ldrb	r3, [r3, #1]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d10f      	bne.n	8008a96 <USBD_StdDevReq+0x6e>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	885b      	ldrh	r3, [r3, #2]
 8008a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a7e:	d10a      	bne.n	8008a96 <USBD_StdDevReq+0x6e>
  		len = 20;
 8008a80:	2314      	movs	r3, #20
 8008a82:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008a84:	4b48      	ldr	r3, [pc, #288]	; (8008ba8 <USBD_StdDevReq+0x180>)
 8008a86:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008a88:	89bb      	ldrh	r3, [r7, #12]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fddb 	bl	800964a <USBD_CtlSendData>
 8008a94:	e012      	b.n	8008abc <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d10e      	bne.n	8008abc <USBD_StdDevReq+0x94>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa6:	d109      	bne.n	8008abc <USBD_StdDevReq+0x94>
  		len = 6;
 8008aa8:	2306      	movs	r3, #6
 8008aaa:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008aac:	4b3f      	ldr	r3, [pc, #252]	; (8008bac <USBD_StdDevReq+0x184>)
 8008aae:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008ab0:	89bb      	ldrh	r3, [r7, #12]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fdc7 	bl	800964a <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]
 8008ace:	e064      	b.n	8008b9a <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ad8:	2b40      	cmp	r3, #64	; 0x40
 8008ada:	d005      	beq.n	8008ae8 <USBD_StdDevReq+0xc0>
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d854      	bhi.n	8008b8a <USBD_StdDevReq+0x162>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <USBD_StdDevReq+0xd4>
 8008ae4:	2b20      	cmp	r3, #32
 8008ae6:	d150      	bne.n	8008b8a <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]
		  break;
 8008afa:	e04e      	b.n	8008b9a <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	785b      	ldrb	r3, [r3, #1]
 8008b00:	2b09      	cmp	r3, #9
 8008b02:	d83c      	bhi.n	8008b7e <USBD_StdDevReq+0x156>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <USBD_StdDevReq+0xe4>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008b75 	.word	0x08008b75
 8008b14:	08008b7f 	.word	0x08008b7f
 8008b18:	08008b6b 	.word	0x08008b6b
 8008b1c:	08008b7f 	.word	0x08008b7f
 8008b20:	08008b3f 	.word	0x08008b3f
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b7f 	.word	0x08008b7f
 8008b2c:	08008b57 	.word	0x08008b57
 8008b30:	08008b49 	.word	0x08008b49
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f9e8 	bl	8008f0c <USBD_GetDescriptor>
			  break;
 8008b3c:	e024      	b.n	8008b88 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fb4d 	bl	80091e0 <USBD_SetAddress>
			  break;
 8008b46:	e01f      	b.n	8008b88 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fb8c 	bl	8009268 <USBD_SetConfig>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
			  break;
 8008b54:	e018      	b.n	8008b88 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fc2b 	bl	80093b4 <USBD_GetConfig>
			  break;
 8008b5e:	e013      	b.n	8008b88 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc5c 	bl	8009420 <USBD_GetStatus>
			  break;
 8008b68:	e00e      	b.n	8008b88 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc8b 	bl	8009488 <USBD_SetFeature>
			  break;
 8008b72:	e009      	b.n	8008b88 <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fc9a 	bl	80094b0 <USBD_ClrFeature>
			  break;
 8008b7c:	e004      	b.n	8008b88 <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fcf1 	bl	8009568 <USBD_CtlError>
			  break;
 8008b86:	bf00      	nop
		  }
		  break;
 8008b88:	e007      	b.n	8008b9a <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 8008b8a:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <USBD_StdDevReq+0x188>)
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fce8 	bl	8009568 <USBD_CtlError>
		  break;
 8008b98:	bf00      	nop
	  }
	}
  return ret;
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	200000c8 	.word	0x200000c8
 8008ba8:	200000d8 	.word	0x200000d8
 8008bac:	200000ec 	.word	0x200000ec
 8008bb0:	20000ae2 	.word	0x20000ae2

08008bb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bca:	2b40      	cmp	r3, #64	; 0x40
 8008bcc:	d005      	beq.n	8008bda <USBD_StdItfReq+0x26>
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d82f      	bhi.n	8008c32 <USBD_StdItfReq+0x7e>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <USBD_StdItfReq+0x26>
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d12b      	bne.n	8008c32 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	3b01      	subs	r3, #1
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d81d      	bhi.n	8008c24 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	889b      	ldrh	r3, [r3, #4]
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d813      	bhi.n	8008c1a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	4798      	blx	r3
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	88db      	ldrh	r3, [r3, #6]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d110      	bne.n	8008c2e <USBD_StdItfReq+0x7a>
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10d      	bne.n	8008c2e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fd56 	bl	80096c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c18:	e009      	b.n	8008c2e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fca3 	bl	8009568 <USBD_CtlError>
          break;
 8008c22:	e004      	b.n	8008c2e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fc9e 	bl	8009568 <USBD_CtlError>
          break;
 8008c2c:	e000      	b.n	8008c30 <USBD_StdItfReq+0x7c>
          break;
 8008c2e:	bf00      	nop
      }
      break;
 8008c30:	e004      	b.n	8008c3c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fc97 	bl	8009568 <USBD_CtlError>
      break;
 8008c3a:	bf00      	nop
  }

  return ret;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	889b      	ldrh	r3, [r3, #4]
 8008c58:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c62:	2b40      	cmp	r3, #64	; 0x40
 8008c64:	d007      	beq.n	8008c76 <USBD_StdEPReq+0x30>
 8008c66:	2b40      	cmp	r3, #64	; 0x40
 8008c68:	f200 8145 	bhi.w	8008ef6 <USBD_StdEPReq+0x2b0>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00c      	beq.n	8008c8a <USBD_StdEPReq+0x44>
 8008c70:	2b20      	cmp	r3, #32
 8008c72:	f040 8140 	bne.w	8008ef6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	4798      	blx	r3
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]
      break;
 8008c88:	e13a      	b.n	8008f00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	785b      	ldrb	r3, [r3, #1]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d007      	beq.n	8008ca2 <USBD_StdEPReq+0x5c>
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	f300 8129 	bgt.w	8008eea <USBD_StdEPReq+0x2a4>
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d07f      	beq.n	8008d9c <USBD_StdEPReq+0x156>
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d03c      	beq.n	8008d1a <USBD_StdEPReq+0xd4>
 8008ca0:	e123      	b.n	8008eea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d002      	beq.n	8008cb4 <USBD_StdEPReq+0x6e>
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d016      	beq.n	8008ce0 <USBD_StdEPReq+0x9a>
 8008cb2:	e02c      	b.n	8008d0e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00d      	beq.n	8008cd6 <USBD_StdEPReq+0x90>
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	2b80      	cmp	r3, #128	; 0x80
 8008cbe:	d00a      	beq.n	8008cd6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f003 fdeb 	bl	800c8a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cca:	2180      	movs	r1, #128	; 0x80
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f003 fde7 	bl	800c8a0 <USBD_LL_StallEP>
 8008cd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cd4:	e020      	b.n	8008d18 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fc45 	bl	8009568 <USBD_CtlError>
              break;
 8008cde:	e01b      	b.n	8008d18 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	885b      	ldrh	r3, [r3, #2]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10e      	bne.n	8008d06 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <USBD_StdEPReq+0xc0>
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	2b80      	cmp	r3, #128	; 0x80
 8008cf2:	d008      	beq.n	8008d06 <USBD_StdEPReq+0xc0>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	88db      	ldrh	r3, [r3, #6]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d104      	bne.n	8008d06 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f003 fdcd 	bl	800c8a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fcdc 	bl	80096c4 <USBD_CtlSendStatus>

              break;
 8008d0c:	e004      	b.n	8008d18 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fc29 	bl	8009568 <USBD_CtlError>
              break;
 8008d16:	bf00      	nop
          }
          break;
 8008d18:	e0ec      	b.n	8008ef4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d002      	beq.n	8008d2c <USBD_StdEPReq+0xe6>
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d016      	beq.n	8008d58 <USBD_StdEPReq+0x112>
 8008d2a:	e030      	b.n	8008d8e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00d      	beq.n	8008d4e <USBD_StdEPReq+0x108>
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b80      	cmp	r3, #128	; 0x80
 8008d36:	d00a      	beq.n	8008d4e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f003 fdaf 	bl	800c8a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d42:	2180      	movs	r1, #128	; 0x80
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f003 fdab 	bl	800c8a0 <USBD_LL_StallEP>
 8008d4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d4c:	e025      	b.n	8008d9a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fc09 	bl	8009568 <USBD_CtlError>
              break;
 8008d56:	e020      	b.n	8008d9a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	885b      	ldrh	r3, [r3, #2]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11b      	bne.n	8008d98 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d004      	beq.n	8008d74 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f003 fdb5 	bl	800c8de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fca5 	bl	80096c4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d8c:	e004      	b.n	8008d98 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fbe9 	bl	8009568 <USBD_CtlError>
              break;
 8008d96:	e000      	b.n	8008d9a <USBD_StdEPReq+0x154>
              break;
 8008d98:	bf00      	nop
          }
          break;
 8008d9a:	e0ab      	b.n	8008ef4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d002      	beq.n	8008dae <USBD_StdEPReq+0x168>
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d032      	beq.n	8008e12 <USBD_StdEPReq+0x1cc>
 8008dac:	e097      	b.n	8008ede <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <USBD_StdEPReq+0x17e>
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b80      	cmp	r3, #128	; 0x80
 8008db8:	d004      	beq.n	8008dc4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fbd3 	bl	8009568 <USBD_CtlError>
                break;
 8008dc2:	e091      	b.n	8008ee8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	da0b      	bge.n	8008de4 <USBD_StdEPReq+0x19e>
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	3310      	adds	r3, #16
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	4413      	add	r3, r2
 8008de0:	3304      	adds	r3, #4
 8008de2:	e00b      	b.n	8008dfc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	4413      	add	r3, r2
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2202      	movs	r2, #2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fc1d 	bl	800964a <USBD_CtlSendData>
              break;
 8008e10:	e06a      	b.n	8008ee8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da11      	bge.n	8008e3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	f003 020f 	and.w	r2, r3, #15
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3324      	adds	r3, #36	; 0x24
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d117      	bne.n	8008e64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fb96 	bl	8009568 <USBD_CtlError>
                  break;
 8008e3c:	e054      	b.n	8008ee8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e54:	881b      	ldrh	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d104      	bne.n	8008e64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fb83 	bl	8009568 <USBD_CtlError>
                  break;
 8008e62:	e041      	b.n	8008ee8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da0b      	bge.n	8008e84 <USBD_StdEPReq+0x23e>
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	3310      	adds	r3, #16
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	4413      	add	r3, r2
 8008e80:	3304      	adds	r3, #4
 8008e82:	e00b      	b.n	8008e9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <USBD_StdEPReq+0x264>
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b80      	cmp	r3, #128	; 0x80
 8008ea8:	d103      	bne.n	8008eb2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	e00e      	b.n	8008ed0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f003 fd30 	bl	800c91c <USBD_LL_IsStallEP>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	e002      	b.n	8008ed0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fbb7 	bl	800964a <USBD_CtlSendData>
              break;
 8008edc:	e004      	b.n	8008ee8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fb41 	bl	8009568 <USBD_CtlError>
              break;
 8008ee6:	bf00      	nop
          }
          break;
 8008ee8:	e004      	b.n	8008ef4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fb3b 	bl	8009568 <USBD_CtlError>
          break;
 8008ef2:	bf00      	nop
      }
      break;
 8008ef4:	e004      	b.n	8008f00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fb35 	bl	8009568 <USBD_CtlError>
      break;
 8008efe:	bf00      	nop
  }

  return ret;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
	...

08008f0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	2b06      	cmp	r3, #6
 8008f2e:	f200 8128 	bhi.w	8009182 <USBD_GetDescriptor+0x276>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <USBD_GetDescriptor+0x2c>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f6d 	.word	0x08008f6d
 8008f40:	08008fad 	.word	0x08008fad
 8008f44:	08009183 	.word	0x08009183
 8008f48:	08009183 	.word	0x08009183
 8008f4c:	08009123 	.word	0x08009123
 8008f50:	0800914f 	.word	0x0800914f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	7c12      	ldrb	r2, [r2, #16]
 8008f60:	f107 0108 	add.w	r1, r7, #8
 8008f64:	4610      	mov	r0, r2
 8008f66:	4798      	blx	r3
 8008f68:	60f8      	str	r0, [r7, #12]
      break;
 8008f6a:	e112      	b.n	8009192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7c1b      	ldrb	r3, [r3, #16]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10d      	bne.n	8008f90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	f107 0208 	add.w	r2, r7, #8
 8008f80:	4610      	mov	r0, r2
 8008f82:	4798      	blx	r3
 8008f84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f8e:	e100      	b.n	8009192 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	f107 0208 	add.w	r2, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	701a      	strb	r2, [r3, #0]
      break;
 8008faa:	e0f2      	b.n	8009192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	885b      	ldrh	r3, [r3, #2]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	f200 80ac 	bhi.w	8009110 <USBD_GetDescriptor+0x204>
 8008fb8:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <USBD_GetDescriptor+0xb4>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	08008fd9 	.word	0x08008fd9
 8008fc4:	0800900d 	.word	0x0800900d
 8008fc8:	08009041 	.word	0x08009041
 8008fcc:	08009075 	.word	0x08009075
 8008fd0:	080090a9 	.word	0x080090a9
 8008fd4:	080090dd 	.word	0x080090dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	7c12      	ldrb	r2, [r2, #16]
 8008ff0:	f107 0108 	add.w	r1, r7, #8
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffa:	e091      	b.n	8009120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fab2 	bl	8009568 <USBD_CtlError>
            err++;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	3301      	adds	r3, #1
 8009008:	72fb      	strb	r3, [r7, #11]
          break;
 800900a:	e089      	b.n	8009120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902e:	e077      	b.n	8009120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa98 	bl	8009568 <USBD_CtlError>
            err++;
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	3301      	adds	r3, #1
 800903c:	72fb      	strb	r3, [r7, #11]
          break;
 800903e:	e06f      	b.n	8009120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009062:	e05d      	b.n	8009120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa7e 	bl	8009568 <USBD_CtlError>
            err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
          break;
 8009072:	e055      	b.n	8009120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009096:	e043      	b.n	8009120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa64 	bl	8009568 <USBD_CtlError>
            err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
          break;
 80090a6:	e03b      	b.n	8009120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ca:	e029      	b.n	8009120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa4a 	bl	8009568 <USBD_CtlError>
            err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
          break;
 80090da:	e021      	b.n	8009120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	7c12      	ldrb	r2, [r2, #16]
 80090f4:	f107 0108 	add.w	r1, r7, #8
 80090f8:	4610      	mov	r0, r2
 80090fa:	4798      	blx	r3
 80090fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090fe:	e00f      	b.n	8009120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa30 	bl	8009568 <USBD_CtlError>
            err++;
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	3301      	adds	r3, #1
 800910c:	72fb      	strb	r3, [r7, #11]
          break;
 800910e:	e007      	b.n	8009120 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa28 	bl	8009568 <USBD_CtlError>
          err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800911e:	bf00      	nop
      }
      break;
 8009120:	e037      	b.n	8009192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7c1b      	ldrb	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009132:	f107 0208 	add.w	r2, r7, #8
 8009136:	4610      	mov	r0, r2
 8009138:	4798      	blx	r3
 800913a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800913c:	e029      	b.n	8009192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fa11 	bl	8009568 <USBD_CtlError>
        err++;
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	3301      	adds	r3, #1
 800914a:	72fb      	strb	r3, [r7, #11]
      break;
 800914c:	e021      	b.n	8009192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7c1b      	ldrb	r3, [r3, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10d      	bne.n	8009172 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	f107 0208 	add.w	r2, r7, #8
 8009162:	4610      	mov	r0, r2
 8009164:	4798      	blx	r3
 8009166:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	2207      	movs	r2, #7
 800916e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009170:	e00f      	b.n	8009192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f9f7 	bl	8009568 <USBD_CtlError>
        err++;
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	3301      	adds	r3, #1
 800917e:	72fb      	strb	r3, [r7, #11]
      break;
 8009180:	e007      	b.n	8009192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9ef 	bl	8009568 <USBD_CtlError>
      err++;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	3301      	adds	r3, #1
 800918e:	72fb      	strb	r3, [r7, #11]
      break;
 8009190:	bf00      	nop
  }

  if (err != 0U)
 8009192:	7afb      	ldrb	r3, [r7, #11]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11e      	bne.n	80091d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	88db      	ldrh	r3, [r3, #6]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d016      	beq.n	80091ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091a0:	893b      	ldrh	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00e      	beq.n	80091c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	88da      	ldrh	r2, [r3, #6]
 80091aa:	893b      	ldrh	r3, [r7, #8]
 80091ac:	4293      	cmp	r3, r2
 80091ae:	bf28      	it	cs
 80091b0:	4613      	movcs	r3, r2
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091b6:	893b      	ldrh	r3, [r7, #8]
 80091b8:	461a      	mov	r2, r3
 80091ba:	68f9      	ldr	r1, [r7, #12]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fa44 	bl	800964a <USBD_CtlSendData>
 80091c2:	e009      	b.n	80091d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9ce 	bl	8009568 <USBD_CtlError>
 80091cc:	e004      	b.n	80091d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa78 	bl	80096c4 <USBD_CtlSendStatus>
 80091d4:	e000      	b.n	80091d8 <USBD_GetDescriptor+0x2cc>
    return;
 80091d6:	bf00      	nop
  }
}
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop

080091e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	889b      	ldrh	r3, [r3, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d131      	bne.n	8009256 <USBD_SetAddress+0x76>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12d      	bne.n	8009256 <USBD_SetAddress+0x76>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	885b      	ldrh	r3, [r3, #2]
 80091fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009200:	d829      	bhi.n	8009256 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	885b      	ldrh	r3, [r3, #2]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b03      	cmp	r3, #3
 8009218:	d104      	bne.n	8009224 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f9a3 	bl	8009568 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009222:	e01d      	b.n	8009260 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	7bfa      	ldrb	r2, [r7, #15]
 8009228:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800922c:	7bfb      	ldrb	r3, [r7, #15]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f003 fb9f 	bl	800c974 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fa44 	bl	80096c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2202      	movs	r2, #2
 8009246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924a:	e009      	b.n	8009260 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	e004      	b.n	8009260 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f985 	bl	8009568 <USBD_CtlError>
  }
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	885b      	ldrh	r3, [r3, #2]
 800927a:	b2da      	uxtb	r2, r3
 800927c:	4b4c      	ldr	r3, [pc, #304]	; (80093b0 <USBD_SetConfig+0x148>)
 800927e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009280:	4b4b      	ldr	r3, [pc, #300]	; (80093b0 <USBD_SetConfig+0x148>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d905      	bls.n	8009294 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f96c 	bl	8009568 <USBD_CtlError>
    return USBD_FAIL;
 8009290:	2303      	movs	r3, #3
 8009292:	e088      	b.n	80093a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b02      	cmp	r3, #2
 800929e:	d002      	beq.n	80092a6 <USBD_SetConfig+0x3e>
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d025      	beq.n	80092f0 <USBD_SetConfig+0x88>
 80092a4:	e071      	b.n	800938a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80092a6:	4b42      	ldr	r3, [pc, #264]	; (80093b0 <USBD_SetConfig+0x148>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01c      	beq.n	80092e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80092ae:	4b40      	ldr	r3, [pc, #256]	; (80093b0 <USBD_SetConfig+0x148>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092b8:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <USBD_SetConfig+0x148>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff f8f0 	bl	80084a4 <USBD_SetClassConfig>
 80092c4:	4603      	mov	r3, r0
 80092c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f949 	bl	8009568 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092d6:	e065      	b.n	80093a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9f3 	bl	80096c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2203      	movs	r2, #3
 80092e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092e6:	e05d      	b.n	80093a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f9eb 	bl	80096c4 <USBD_CtlSendStatus>
      break;
 80092ee:	e059      	b.n	80093a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092f0:	4b2f      	ldr	r3, [pc, #188]	; (80093b0 <USBD_SetConfig+0x148>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d112      	bne.n	800931e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009300:	4b2b      	ldr	r3, [pc, #172]	; (80093b0 <USBD_SetConfig+0x148>)
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800930a:	4b29      	ldr	r3, [pc, #164]	; (80093b0 <USBD_SetConfig+0x148>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7ff f8e3 	bl	80084dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9d4 	bl	80096c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800931c:	e042      	b.n	80093a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800931e:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <USBD_SetConfig+0x148>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d02a      	beq.n	8009382 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff f8d1 	bl	80084dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800933a:	4b1d      	ldr	r3, [pc, #116]	; (80093b0 <USBD_SetConfig+0x148>)
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <USBD_SetConfig+0x148>)
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7ff f8aa 	bl	80084a4 <USBD_SetClassConfig>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00f      	beq.n	800937a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f903 	bl	8009568 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff f8b6 	bl	80084dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009378:	e014      	b.n	80093a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f9a2 	bl	80096c4 <USBD_CtlSendStatus>
      break;
 8009380:	e010      	b.n	80093a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f99e 	bl	80096c4 <USBD_CtlSendStatus>
      break;
 8009388:	e00c      	b.n	80093a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8eb 	bl	8009568 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009392:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <USBD_SetConfig+0x148>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff f89f 	bl	80084dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	73fb      	strb	r3, [r7, #15]
      break;
 80093a2:	bf00      	nop
  }

  return ret;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000ae3 	.word	0x20000ae3

080093b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	88db      	ldrh	r3, [r3, #6]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d004      	beq.n	80093d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f8cd 	bl	8009568 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093ce:	e023      	b.n	8009418 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	dc02      	bgt.n	80093e2 <USBD_GetConfig+0x2e>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	dc03      	bgt.n	80093e8 <USBD_GetConfig+0x34>
 80093e0:	e015      	b.n	800940e <USBD_GetConfig+0x5a>
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d00b      	beq.n	80093fe <USBD_GetConfig+0x4a>
 80093e6:	e012      	b.n	800940e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3308      	adds	r3, #8
 80093f2:	2201      	movs	r2, #1
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f927 	bl	800964a <USBD_CtlSendData>
        break;
 80093fc:	e00c      	b.n	8009418 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	2201      	movs	r2, #1
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f91f 	bl	800964a <USBD_CtlSendData>
        break;
 800940c:	e004      	b.n	8009418 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f8a9 	bl	8009568 <USBD_CtlError>
        break;
 8009416:	bf00      	nop
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009430:	b2db      	uxtb	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	2b02      	cmp	r3, #2
 8009436:	d81e      	bhi.n	8009476 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	88db      	ldrh	r3, [r3, #6]
 800943c:	2b02      	cmp	r3, #2
 800943e:	d004      	beq.n	800944a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f890 	bl	8009568 <USBD_CtlError>
        break;
 8009448:	e01a      	b.n	8009480 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009456:	2b00      	cmp	r3, #0
 8009458:	d005      	beq.n	8009466 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f043 0202 	orr.w	r2, r3, #2
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	330c      	adds	r3, #12
 800946a:	2202      	movs	r2, #2
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f8eb 	bl	800964a <USBD_CtlSendData>
      break;
 8009474:	e004      	b.n	8009480 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f875 	bl	8009568 <USBD_CtlError>
      break;
 800947e:	bf00      	nop
  }
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	885b      	ldrh	r3, [r3, #2]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d106      	bne.n	80094a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f90e 	bl	80096c4 <USBD_CtlSendStatus>
  }
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	3b01      	subs	r3, #1
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d80b      	bhi.n	80094e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	885b      	ldrh	r3, [r3, #2]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d10c      	bne.n	80094ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f8f3 	bl	80096c4 <USBD_CtlSendStatus>
      }
      break;
 80094de:	e004      	b.n	80094ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f840 	bl	8009568 <USBD_CtlError>
      break;
 80094e8:	e000      	b.n	80094ec <USBD_ClrFeature+0x3c>
      break;
 80094ea:	bf00      	nop
  }
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	781a      	ldrb	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3301      	adds	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff fa63 	bl	80089ea <SWAPBYTE>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3301      	adds	r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff fa56 	bl	80089ea <SWAPBYTE>
 800953e:	4603      	mov	r3, r0
 8009540:	461a      	mov	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3301      	adds	r3, #1
 800954a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	3301      	adds	r3, #1
 8009550:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff fa49 	bl	80089ea <SWAPBYTE>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	80da      	strh	r2, [r3, #6]
}
 8009560:	bf00      	nop
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009572:	2180      	movs	r1, #128	; 0x80
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f003 f993 	bl	800c8a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800957a:	2100      	movs	r1, #0
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f003 f98f 	bl	800c8a0 <USBD_LL_StallEP>
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d036      	beq.n	800960e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095a4:	6938      	ldr	r0, [r7, #16]
 80095a6:	f000 f836 	bl	8009616 <USBD_GetLen>
 80095aa:	4603      	mov	r3, r0
 80095ac:	3301      	adds	r3, #1
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4413      	add	r3, r2
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	7812      	ldrb	r2, [r2, #0]
 80095c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	3301      	adds	r3, #1
 80095c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	68ba      	ldr	r2, [r7, #8]
 80095ce:	4413      	add	r3, r2
 80095d0:	2203      	movs	r2, #3
 80095d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	3301      	adds	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095da:	e013      	b.n	8009604 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	693a      	ldr	r2, [r7, #16]
 80095e4:	7812      	ldrb	r2, [r2, #0]
 80095e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	3301      	adds	r3, #1
 80095ec:	613b      	str	r3, [r7, #16]
    idx++;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	3301      	adds	r3, #1
 80095f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	4413      	add	r3, r2
 80095fa:	2200      	movs	r2, #0
 80095fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	3301      	adds	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e7      	bne.n	80095dc <USBD_GetString+0x52>
 800960c:	e000      	b.n	8009610 <USBD_GetString+0x86>
    return;
 800960e:	bf00      	nop
  }
}
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009616:	b480      	push	{r7}
 8009618:	b085      	sub	sp, #20
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009626:	e005      	b.n	8009634 <USBD_GetLen+0x1e>
  {
    len++;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	3301      	adds	r3, #1
 800962c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	3301      	adds	r3, #1
 8009632:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f5      	bne.n	8009628 <USBD_GetLen+0x12>
  }

  return len;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
 8009652:	60b9      	str	r1, [r7, #8]
 8009654:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2202      	movs	r2, #2
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	2100      	movs	r1, #0
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f003 f99e 	bl	800c9b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	2100      	movs	r1, #0
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f003 f98d 	bl	800c9b2 <USBD_LL_Transmit>

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	2100      	movs	r1, #0
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f003 f99d 	bl	800c9f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2204      	movs	r2, #4
 80096d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096d4:	2300      	movs	r3, #0
 80096d6:	2200      	movs	r2, #0
 80096d8:	2100      	movs	r1, #0
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f003 f969 	bl	800c9b2 <USBD_LL_Transmit>

  return USBD_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2205      	movs	r2, #5
 80096f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096fa:	2300      	movs	r3, #0
 80096fc:	2200      	movs	r2, #0
 80096fe:	2100      	movs	r1, #0
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f003 f977 	bl	800c9f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <__NVIC_SetPriority>:
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	6039      	str	r1, [r7, #0]
 800971a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800971c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009720:	2b00      	cmp	r3, #0
 8009722:	db0a      	blt.n	800973a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	b2da      	uxtb	r2, r3
 8009728:	490c      	ldr	r1, [pc, #48]	; (800975c <__NVIC_SetPriority+0x4c>)
 800972a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800972e:	0112      	lsls	r2, r2, #4
 8009730:	b2d2      	uxtb	r2, r2
 8009732:	440b      	add	r3, r1
 8009734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009738:	e00a      	b.n	8009750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	b2da      	uxtb	r2, r3
 800973e:	4908      	ldr	r1, [pc, #32]	; (8009760 <__NVIC_SetPriority+0x50>)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	f003 030f 	and.w	r3, r3, #15
 8009746:	3b04      	subs	r3, #4
 8009748:	0112      	lsls	r2, r2, #4
 800974a:	b2d2      	uxtb	r2, r2
 800974c:	440b      	add	r3, r1
 800974e:	761a      	strb	r2, [r3, #24]
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	e000e100 	.word	0xe000e100
 8009760:	e000ed00 	.word	0xe000ed00

08009764 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009768:	4b05      	ldr	r3, [pc, #20]	; (8009780 <SysTick_Handler+0x1c>)
 800976a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800976c:	f001 fcfe 	bl	800b16c <xTaskGetSchedulerState>
 8009770:	4603      	mov	r3, r0
 8009772:	2b01      	cmp	r3, #1
 8009774:	d001      	beq.n	800977a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009776:	f002 fae7 	bl	800bd48 <xPortSysTickHandler>
  }
}
 800977a:	bf00      	nop
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	e000e010 	.word	0xe000e010

08009784 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009788:	2100      	movs	r1, #0
 800978a:	f06f 0004 	mvn.w	r0, #4
 800978e:	f7ff ffbf 	bl	8009710 <__NVIC_SetPriority>
#endif
}
 8009792:	bf00      	nop
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800979e:	f3ef 8305 	mrs	r3, IPSR
 80097a2:	603b      	str	r3, [r7, #0]
  return(result);
 80097a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097aa:	f06f 0305 	mvn.w	r3, #5
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	e00c      	b.n	80097cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097b2:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <osKernelInitialize+0x44>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097ba:	4b08      	ldr	r3, [pc, #32]	; (80097dc <osKernelInitialize+0x44>)
 80097bc:	2201      	movs	r2, #1
 80097be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	e002      	b.n	80097cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097cc:	687b      	ldr	r3, [r7, #4]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20000ae4 	.word	0x20000ae4

080097e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e6:	f3ef 8305 	mrs	r3, IPSR
 80097ea:	603b      	str	r3, [r7, #0]
  return(result);
 80097ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80097f2:	f06f 0305 	mvn.w	r3, #5
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	e010      	b.n	800981c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097fa:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <osKernelStart+0x48>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d109      	bne.n	8009816 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009802:	f7ff ffbf 	bl	8009784 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009806:	4b08      	ldr	r3, [pc, #32]	; (8009828 <osKernelStart+0x48>)
 8009808:	2202      	movs	r2, #2
 800980a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800980c:	f001 f866 	bl	800a8dc <vTaskStartScheduler>
      stat = osOK;
 8009810:	2300      	movs	r3, #0
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	e002      	b.n	800981c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009816:	f04f 33ff 	mov.w	r3, #4294967295
 800981a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800981c:	687b      	ldr	r3, [r7, #4]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000ae4 	.word	0x20000ae4

0800982c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b08e      	sub	sp, #56	; 0x38
 8009830:	af04      	add	r7, sp, #16
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983c:	f3ef 8305 	mrs	r3, IPSR
 8009840:	617b      	str	r3, [r7, #20]
  return(result);
 8009842:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009844:	2b00      	cmp	r3, #0
 8009846:	d17e      	bne.n	8009946 <osThreadNew+0x11a>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d07b      	beq.n	8009946 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800984e:	2380      	movs	r3, #128	; 0x80
 8009850:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009852:	2318      	movs	r3, #24
 8009854:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800985a:	f04f 33ff 	mov.w	r3, #4294967295
 800985e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d045      	beq.n	80098f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <osThreadNew+0x48>
        name = attr->name;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d008      	beq.n	800989a <osThreadNew+0x6e>
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	2b38      	cmp	r3, #56	; 0x38
 800988c:	d805      	bhi.n	800989a <osThreadNew+0x6e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <osThreadNew+0x72>
        return (NULL);
 800989a:	2300      	movs	r3, #0
 800989c:	e054      	b.n	8009948 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	089b      	lsrs	r3, r3, #2
 80098ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00e      	beq.n	80098d4 <osThreadNew+0xa8>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b5b      	cmp	r3, #91	; 0x5b
 80098bc:	d90a      	bls.n	80098d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d006      	beq.n	80098d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <osThreadNew+0xa8>
        mem = 1;
 80098ce:	2301      	movs	r3, #1
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	e010      	b.n	80098f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d10c      	bne.n	80098f6 <osThreadNew+0xca>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d108      	bne.n	80098f6 <osThreadNew+0xca>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d104      	bne.n	80098f6 <osThreadNew+0xca>
          mem = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	61bb      	str	r3, [r7, #24]
 80098f0:	e001      	b.n	80098f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d110      	bne.n	800991e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009904:	9202      	str	r2, [sp, #8]
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6a3a      	ldr	r2, [r7, #32]
 8009910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f000 fe0c 	bl	800a530 <xTaskCreateStatic>
 8009918:	4603      	mov	r3, r0
 800991a:	613b      	str	r3, [r7, #16]
 800991c:	e013      	b.n	8009946 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d110      	bne.n	8009946 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	b29a      	uxth	r2, r3
 8009928:	f107 0310 	add.w	r3, r7, #16
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009936:	68f8      	ldr	r0, [r7, #12]
 8009938:	f000 fe57 	bl	800a5ea <xTaskCreate>
 800993c:	4603      	mov	r3, r0
 800993e:	2b01      	cmp	r3, #1
 8009940:	d001      	beq.n	8009946 <osThreadNew+0x11a>
            hTask = NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009946:	693b      	ldr	r3, [r7, #16]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3728      	adds	r7, #40	; 0x28
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009958:	f3ef 8305 	mrs	r3, IPSR
 800995c:	60bb      	str	r3, [r7, #8]
  return(result);
 800995e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <osDelay+0x1c>
    stat = osErrorISR;
 8009964:	f06f 0305 	mvn.w	r3, #5
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	e007      	b.n	800997c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 ff7c 	bl	800a874 <vTaskDelay>
    }
  }

  return (stat);
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4a07      	ldr	r2, [pc, #28]	; (80099b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8009998:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	4a06      	ldr	r2, [pc, #24]	; (80099b8 <vApplicationGetIdleTaskMemory+0x30>)
 800999e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2280      	movs	r2, #128	; 0x80
 80099a4:	601a      	str	r2, [r3, #0]
}
 80099a6:	bf00      	nop
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20000ae8 	.word	0x20000ae8
 80099b8:	20000b44 	.word	0x20000b44

080099bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a07      	ldr	r2, [pc, #28]	; (80099e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80099cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	4a06      	ldr	r2, [pc, #24]	; (80099ec <vApplicationGetTimerTaskMemory+0x30>)
 80099d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099da:	601a      	str	r2, [r3, #0]
}
 80099dc:	bf00      	nop
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	20000d44 	.word	0x20000d44
 80099ec:	20000da0 	.word	0x20000da0

080099f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f103 0208 	add.w	r2, r3, #8
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f04f 32ff 	mov.w	r2, #4294967295
 8009a08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f103 0208 	add.w	r2, r3, #8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f103 0208 	add.w	r2, r3, #8
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a3e:	bf00      	nop
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	601a      	str	r2, [r3, #0]
}
 8009a86:	bf00      	nop
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa8:	d103      	bne.n	8009ab2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	60fb      	str	r3, [r7, #12]
 8009ab0:	e00c      	b.n	8009acc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	e002      	b.n	8009ac0 <vListInsert+0x2e>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d2f6      	bcs.n	8009aba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6892      	ldr	r2, [r2, #8]
 8009b1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6852      	ldr	r2, [r2, #4]
 8009b24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d103      	bne.n	8009b38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	1e5a      	subs	r2, r3, #1
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b82:	f002 f84f 	bl	800bc24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8e:	68f9      	ldr	r1, [r7, #12]
 8009b90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b92:	fb01 f303 	mul.w	r3, r1, r3
 8009b96:	441a      	add	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	68f9      	ldr	r1, [r7, #12]
 8009bb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bb8:	fb01 f303 	mul.w	r3, r1, r3
 8009bbc:	441a      	add	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	22ff      	movs	r2, #255	; 0xff
 8009bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	22ff      	movs	r2, #255	; 0xff
 8009bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d114      	bne.n	8009c02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01a      	beq.n	8009c16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	3310      	adds	r3, #16
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 f903 	bl	800adf0 <xTaskRemoveFromEventList>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d012      	beq.n	8009c16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <xQueueGenericReset+0xcc>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	e009      	b.n	8009c16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3310      	adds	r3, #16
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fef2 	bl	80099f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3324      	adds	r3, #36	; 0x24
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff feed 	bl	80099f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c16:	f002 f835 	bl	800bc84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c1a:	2301      	movs	r3, #1
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	e000ed04 	.word	0xe000ed04

08009c28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08e      	sub	sp, #56	; 0x38
 8009c2c:	af02      	add	r7, sp, #8
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10a      	bne.n	8009c52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <xQueueGenericCreateStatic+0x52>
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <xQueueGenericCreateStatic+0x56>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e000      	b.n	8009c80 <xQueueGenericCreateStatic+0x58>
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	623b      	str	r3, [r7, #32]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <xQueueGenericCreateStatic+0x7e>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <xQueueGenericCreateStatic+0x82>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e000      	b.n	8009cac <xQueueGenericCreateStatic+0x84>
 8009caa:	2300      	movs	r3, #0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	61fb      	str	r3, [r7, #28]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cc6:	2350      	movs	r3, #80	; 0x50
 8009cc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2b50      	cmp	r3, #80	; 0x50
 8009cce:	d00a      	beq.n	8009ce6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	61bb      	str	r3, [r7, #24]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ce6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00d      	beq.n	8009d0e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	4613      	mov	r3, r2
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 f805 	bl	8009d18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3730      	adds	r7, #48	; 0x30
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d103      	bne.n	8009d34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	e002      	b.n	8009d3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d46:	2101      	movs	r1, #1
 8009d48:	69b8      	ldr	r0, [r7, #24]
 8009d4a:	f7ff ff05 	bl	8009b58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08e      	sub	sp, #56	; 0x38
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <xQueueGenericSend+0x32>
	__asm volatile
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d103      	bne.n	8009da0 <xQueueGenericSend+0x40>
 8009d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <xQueueGenericSend+0x44>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <xQueueGenericSend+0x46>
 8009da4:	2300      	movs	r3, #0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <xQueueGenericSend+0x60>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d103      	bne.n	8009dce <xQueueGenericSend+0x6e>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d101      	bne.n	8009dd2 <xQueueGenericSend+0x72>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e000      	b.n	8009dd4 <xQueueGenericSend+0x74>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <xQueueGenericSend+0x8e>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	623b      	str	r3, [r7, #32]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dee:	f001 f9bd 	bl	800b16c <xTaskGetSchedulerState>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <xQueueGenericSend+0x9e>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <xQueueGenericSend+0xa2>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <xQueueGenericSend+0xa4>
 8009e02:	2300      	movs	r3, #0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <xQueueGenericSend+0xbe>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	61fb      	str	r3, [r7, #28]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e1e:	f001 ff01 	bl	800bc24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d302      	bcc.n	8009e34 <xQueueGenericSend+0xd4>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d129      	bne.n	8009e88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e3a:	f000 fa0b 	bl	800a254 <prvCopyDataToQueue>
 8009e3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d010      	beq.n	8009e6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4a:	3324      	adds	r3, #36	; 0x24
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 ffcf 	bl	800adf0 <xTaskRemoveFromEventList>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d013      	beq.n	8009e80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e58:	4b3f      	ldr	r3, [pc, #252]	; (8009f58 <xQueueGenericSend+0x1f8>)
 8009e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	e00a      	b.n	8009e80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d007      	beq.n	8009e80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e70:	4b39      	ldr	r3, [pc, #228]	; (8009f58 <xQueueGenericSend+0x1f8>)
 8009e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e76:	601a      	str	r2, [r3, #0]
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e80:	f001 ff00 	bl	800bc84 <vPortExitCritical>
				return pdPASS;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e063      	b.n	8009f50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d103      	bne.n	8009e96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e8e:	f001 fef9 	bl	800bc84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e05c      	b.n	8009f50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d106      	bne.n	8009eaa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e9c:	f107 0314 	add.w	r3, r7, #20
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 f809 	bl	800aeb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009eaa:	f001 feeb 	bl	800bc84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eae:	f000 fd7b 	bl	800a9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eb2:	f001 feb7 	bl	800bc24 <vPortEnterCritical>
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ebc:	b25b      	sxtb	r3, r3
 8009ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec2:	d103      	bne.n	8009ecc <xQueueGenericSend+0x16c>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed2:	b25b      	sxtb	r3, r3
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed8:	d103      	bne.n	8009ee2 <xQueueGenericSend+0x182>
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ee2:	f001 fecf 	bl	800bc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ee6:	1d3a      	adds	r2, r7, #4
 8009ee8:	f107 0314 	add.w	r3, r7, #20
 8009eec:	4611      	mov	r1, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 fff8 	bl	800aee4 <xTaskCheckForTimeOut>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d124      	bne.n	8009f44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009efc:	f000 faa2 	bl	800a444 <prvIsQueueFull>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d018      	beq.n	8009f38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	3310      	adds	r3, #16
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 ff1e 	bl	800ad50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f16:	f000 fa2d 	bl	800a374 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f1a:	f000 fd53 	bl	800a9c4 <xTaskResumeAll>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f47f af7c 	bne.w	8009e1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f26:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <xQueueGenericSend+0x1f8>)
 8009f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	e772      	b.n	8009e1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f3a:	f000 fa1b 	bl	800a374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f3e:	f000 fd41 	bl	800a9c4 <xTaskResumeAll>
 8009f42:	e76c      	b.n	8009e1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f46:	f000 fa15 	bl	800a374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f4a:	f000 fd3b 	bl	800a9c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3738      	adds	r7, #56	; 0x38
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b090      	sub	sp, #64	; 0x40
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d103      	bne.n	8009f98 <xQueueGenericSendFromISR+0x3c>
 8009f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <xQueueGenericSendFromISR+0x40>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e000      	b.n	8009f9e <xQueueGenericSendFromISR+0x42>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d103      	bne.n	8009fc6 <xQueueGenericSendFromISR+0x6a>
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <xQueueGenericSendFromISR+0x6e>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e000      	b.n	8009fcc <xQueueGenericSendFromISR+0x70>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10a      	bne.n	8009fe6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	623b      	str	r3, [r7, #32]
}
 8009fe2:	bf00      	nop
 8009fe4:	e7fe      	b.n	8009fe4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fe6:	f001 feff 	bl	800bde8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fea:	f3ef 8211 	mrs	r2, BASEPRI
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	61fa      	str	r2, [r7, #28]
 800a000:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a002:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00e:	429a      	cmp	r2, r3
 800a010:	d302      	bcc.n	800a018 <xQueueGenericSendFromISR+0xbc>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d12f      	bne.n	800a078 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	68b9      	ldr	r1, [r7, #8]
 800a02c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a02e:	f000 f911 	bl	800a254 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a032:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	d112      	bne.n	800a062 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	d016      	beq.n	800a072 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fed1 	bl	800adf0 <xTaskRemoveFromEventList>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00e      	beq.n	800a072 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00b      	beq.n	800a072 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e007      	b.n	800a072 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a066:	3301      	adds	r3, #1
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	b25a      	sxtb	r2, r3
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a072:	2301      	movs	r3, #1
 800a074:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a076:	e001      	b.n	800a07c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a078:	2300      	movs	r3, #0
 800a07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a07e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a086:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3740      	adds	r7, #64	; 0x40
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08c      	sub	sp, #48	; 0x30
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xQueueReceive+0x30>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	623b      	str	r3, [r7, #32]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d103      	bne.n	800a0d2 <xQueueReceive+0x3e>
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <xQueueReceive+0x42>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <xQueueReceive+0x44>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueReceive+0x5e>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	61fb      	str	r3, [r7, #28]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0f2:	f001 f83b 	bl	800b16c <xTaskGetSchedulerState>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <xQueueReceive+0x6e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueReceive+0x72>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <xQueueReceive+0x74>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <xQueueReceive+0x8e>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	61bb      	str	r3, [r7, #24]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a122:	f001 fd7f 	bl	800bc24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01f      	beq.n	800a172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a136:	f000 f8f7 	bl	800a328 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	1e5a      	subs	r2, r3, #1
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00f      	beq.n	800a16a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	3310      	adds	r3, #16
 800a14e:	4618      	mov	r0, r3
 800a150:	f000 fe4e 	bl	800adf0 <xTaskRemoveFromEventList>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a15a:	4b3d      	ldr	r3, [pc, #244]	; (800a250 <xQueueReceive+0x1bc>)
 800a15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a16a:	f001 fd8b 	bl	800bc84 <vPortExitCritical>
				return pdPASS;
 800a16e:	2301      	movs	r3, #1
 800a170:	e069      	b.n	800a246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a178:	f001 fd84 	bl	800bc84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a17c:	2300      	movs	r3, #0
 800a17e:	e062      	b.n	800a246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a186:	f107 0310 	add.w	r3, r7, #16
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fe94 	bl	800aeb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a194:	f001 fd76 	bl	800bc84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a198:	f000 fc06 	bl	800a9a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a19c:	f001 fd42 	bl	800bc24 <vPortEnterCritical>
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ac:	d103      	bne.n	800a1b6 <xQueueReceive+0x122>
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1bc:	b25b      	sxtb	r3, r3
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c2:	d103      	bne.n	800a1cc <xQueueReceive+0x138>
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1cc:	f001 fd5a 	bl	800bc84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d0:	1d3a      	adds	r2, r7, #4
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 fe83 	bl	800aee4 <xTaskCheckForTimeOut>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d123      	bne.n	800a22c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e6:	f000 f917 	bl	800a418 <prvIsQueueEmpty>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d017      	beq.n	800a220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	3324      	adds	r3, #36	; 0x24
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fda9 	bl	800ad50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a200:	f000 f8b8 	bl	800a374 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a204:	f000 fbde 	bl	800a9c4 <xTaskResumeAll>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d189      	bne.n	800a122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a20e:	4b10      	ldr	r3, [pc, #64]	; (800a250 <xQueueReceive+0x1bc>)
 800a210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	e780      	b.n	800a122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a222:	f000 f8a7 	bl	800a374 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a226:	f000 fbcd 	bl	800a9c4 <xTaskResumeAll>
 800a22a:	e77a      	b.n	800a122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22e:	f000 f8a1 	bl	800a374 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a232:	f000 fbc7 	bl	800a9c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a238:	f000 f8ee 	bl	800a418 <prvIsQueueEmpty>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f43f af6f 	beq.w	800a122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a246:	4618      	mov	r0, r3
 800a248:	3730      	adds	r7, #48	; 0x30
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a268:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10d      	bne.n	800a28e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d14d      	bne.n	800a316 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 ff92 	bl	800b1a8 <xTaskPriorityDisinherit>
 800a284:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	609a      	str	r2, [r3, #8]
 800a28c:	e043      	b.n	800a316 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d119      	bne.n	800a2c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6858      	ldr	r0, [r3, #4]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	461a      	mov	r2, r3
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	f006 f814 	bl	80102cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ac:	441a      	add	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d32b      	bcc.n	800a316 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	605a      	str	r2, [r3, #4]
 800a2c6:	e026      	b.n	800a316 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	68d8      	ldr	r0, [r3, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	68b9      	ldr	r1, [r7, #8]
 800a2d4:	f005 fffa 	bl	80102cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	68da      	ldr	r2, [r3, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e0:	425b      	negs	r3, r3
 800a2e2:	441a      	add	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68da      	ldr	r2, [r3, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d207      	bcs.n	800a304 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	441a      	add	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b02      	cmp	r3, #2
 800a308:	d105      	bne.n	800a316 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	3b01      	subs	r3, #1
 800a314:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a31e:	697b      	ldr	r3, [r7, #20]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	d018      	beq.n	800a36c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68da      	ldr	r2, [r3, #12]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	441a      	add	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	429a      	cmp	r2, r3
 800a352:	d303      	bcc.n	800a35c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68d9      	ldr	r1, [r3, #12]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	461a      	mov	r2, r3
 800a366:	6838      	ldr	r0, [r7, #0]
 800a368:	f005 ffb0 	bl	80102cc <memcpy>
	}
}
 800a36c:	bf00      	nop
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a37c:	f001 fc52 	bl	800bc24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a386:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a388:	e011      	b.n	800a3ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d012      	beq.n	800a3b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3324      	adds	r3, #36	; 0x24
 800a396:	4618      	mov	r0, r3
 800a398:	f000 fd2a 	bl	800adf0 <xTaskRemoveFromEventList>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3a2:	f000 fe01 	bl	800afa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3a6:	7bfb      	ldrb	r3, [r7, #15]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dce9      	bgt.n	800a38a <prvUnlockQueue+0x16>
 800a3b6:	e000      	b.n	800a3ba <prvUnlockQueue+0x46>
					break;
 800a3b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	22ff      	movs	r2, #255	; 0xff
 800a3be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a3c2:	f001 fc5f 	bl	800bc84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3c6:	f001 fc2d 	bl	800bc24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3d2:	e011      	b.n	800a3f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d012      	beq.n	800a402 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3310      	adds	r3, #16
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 fd05 	bl	800adf0 <xTaskRemoveFromEventList>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3ec:	f000 fddc 	bl	800afa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dce9      	bgt.n	800a3d4 <prvUnlockQueue+0x60>
 800a400:	e000      	b.n	800a404 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a402:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	22ff      	movs	r2, #255	; 0xff
 800a408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a40c:	f001 fc3a 	bl	800bc84 <vPortExitCritical>
}
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a420:	f001 fc00 	bl	800bc24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d102      	bne.n	800a432 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a42c:	2301      	movs	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	e001      	b.n	800a436 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a436:	f001 fc25 	bl	800bc84 <vPortExitCritical>

	return xReturn;
 800a43a:	68fb      	ldr	r3, [r7, #12]
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a44c:	f001 fbea 	bl	800bc24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a458:	429a      	cmp	r2, r3
 800a45a:	d102      	bne.n	800a462 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a45c:	2301      	movs	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	e001      	b.n	800a466 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a466:	f001 fc0d 	bl	800bc84 <vPortExitCritical>

	return xReturn;
 800a46a:	68fb      	ldr	r3, [r7, #12]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	e014      	b.n	800a4ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a484:	4a0f      	ldr	r2, [pc, #60]	; (800a4c4 <vQueueAddToRegistry+0x50>)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10b      	bne.n	800a4a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a490:	490c      	ldr	r1, [pc, #48]	; (800a4c4 <vQueueAddToRegistry+0x50>)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a49a:	4a0a      	ldr	r2, [pc, #40]	; (800a4c4 <vQueueAddToRegistry+0x50>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a4a6:	e006      	b.n	800a4b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b07      	cmp	r3, #7
 800a4b2:	d9e7      	bls.n	800a484 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20005460 	.word	0x20005460

0800a4c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4d8:	f001 fba4 	bl	800bc24 <vPortEnterCritical>
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4e2:	b25b      	sxtb	r3, r3
 800a4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e8:	d103      	bne.n	800a4f2 <vQueueWaitForMessageRestricted+0x2a>
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4f8:	b25b      	sxtb	r3, r3
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d103      	bne.n	800a508 <vQueueWaitForMessageRestricted+0x40>
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a508:	f001 fbbc 	bl	800bc84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	3324      	adds	r3, #36	; 0x24
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	68b9      	ldr	r1, [r7, #8]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 fc3b 	bl	800ad98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a522:	6978      	ldr	r0, [r7, #20]
 800a524:	f7ff ff26 	bl	800a374 <prvUnlockQueue>
	}
 800a528:	bf00      	nop
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08e      	sub	sp, #56	; 0x38
 800a534:	af04      	add	r7, sp, #16
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	623b      	str	r3, [r7, #32]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xTaskCreateStatic+0x46>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	61fb      	str	r3, [r7, #28]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a576:	235c      	movs	r3, #92	; 0x5c
 800a578:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b5c      	cmp	r3, #92	; 0x5c
 800a57e:	d00a      	beq.n	800a596 <xTaskCreateStatic+0x66>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61bb      	str	r3, [r7, #24]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a596:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d01e      	beq.n	800a5dc <xTaskCreateStatic+0xac>
 800a59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d01b      	beq.n	800a5dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	9302      	str	r3, [sp, #8]
 800a5be:	f107 0314 	add.w	r3, r7, #20
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 f850 	bl	800a674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5d6:	f000 f8dd 	bl	800a794 <prvAddNewTaskToReadyList>
 800a5da:	e001      	b.n	800a5e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5e0:	697b      	ldr	r3, [r7, #20]
	}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3728      	adds	r7, #40	; 0x28
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b08c      	sub	sp, #48	; 0x30
 800a5ee:	af04      	add	r7, sp, #16
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	603b      	str	r3, [r7, #0]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f001 fc32 	bl	800be68 <pvPortMalloc>
 800a604:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00e      	beq.n	800a62a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a60c:	205c      	movs	r0, #92	; 0x5c
 800a60e:	f001 fc2b 	bl	800be68 <pvPortMalloc>
 800a612:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a61a:	69fb      	ldr	r3, [r7, #28]
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	631a      	str	r2, [r3, #48]	; 0x30
 800a620:	e005      	b.n	800a62e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a622:	6978      	ldr	r0, [r7, #20]
 800a624:	f001 fcec 	bl	800c000 <vPortFree>
 800a628:	e001      	b.n	800a62e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d017      	beq.n	800a664 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a63c:	88fa      	ldrh	r2, [r7, #6]
 800a63e:	2300      	movs	r3, #0
 800a640:	9303      	str	r3, [sp, #12]
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	9302      	str	r3, [sp, #8]
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 f80e 	bl	800a674 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a658:	69f8      	ldr	r0, [r7, #28]
 800a65a:	f000 f89b 	bl	800a794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a65e:	2301      	movs	r3, #1
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	e002      	b.n	800a66a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a664:	f04f 33ff 	mov.w	r3, #4294967295
 800a668:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a66a:	69bb      	ldr	r3, [r7, #24]
	}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3720      	adds	r7, #32
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	461a      	mov	r2, r3
 800a68c:	21a5      	movs	r1, #165	; 0xa5
 800a68e:	f005 fe2b 	bl	80102e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a69c:	3b01      	subs	r3, #1
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	f023 0307 	bic.w	r3, r3, #7
 800a6aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	617b      	str	r3, [r7, #20]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d01f      	beq.n	800a712 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61fb      	str	r3, [r7, #28]
 800a6d6:	e012      	b.n	800a6fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	4413      	add	r3, r2
 800a6de:	7819      	ldrb	r1, [r3, #0]
 800a6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3334      	adds	r3, #52	; 0x34
 800a6e8:	460a      	mov	r2, r1
 800a6ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d006      	beq.n	800a706 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	2b0f      	cmp	r3, #15
 800a702:	d9e9      	bls.n	800a6d8 <prvInitialiseNewTask+0x64>
 800a704:	e000      	b.n	800a708 <prvInitialiseNewTask+0x94>
			{
				break;
 800a706:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a710:	e003      	b.n	800a71a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	2b37      	cmp	r3, #55	; 0x37
 800a71e:	d901      	bls.n	800a724 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a720:	2337      	movs	r3, #55	; 0x37
 800a722:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a728:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a72e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a732:	2200      	movs	r2, #0
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a738:	3304      	adds	r3, #4
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff f978 	bl	8009a30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	3318      	adds	r3, #24
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff f973 	bl	8009a30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a74e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a752:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a758:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a762:	2200      	movs	r2, #0
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	68f9      	ldr	r1, [r7, #12]
 800a772:	69b8      	ldr	r0, [r7, #24]
 800a774:	f001 f928 	bl	800b9c8 <pxPortInitialiseStack>
 800a778:	4602      	mov	r2, r0
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a788:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a78a:	bf00      	nop
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a79c:	f001 fa42 	bl	800bc24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7a0:	4b2d      	ldr	r3, [pc, #180]	; (800a858 <prvAddNewTaskToReadyList+0xc4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	4a2c      	ldr	r2, [pc, #176]	; (800a858 <prvAddNewTaskToReadyList+0xc4>)
 800a7a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7aa:	4b2c      	ldr	r3, [pc, #176]	; (800a85c <prvAddNewTaskToReadyList+0xc8>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d109      	bne.n	800a7c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7b2:	4a2a      	ldr	r2, [pc, #168]	; (800a85c <prvAddNewTaskToReadyList+0xc8>)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7b8:	4b27      	ldr	r3, [pc, #156]	; (800a858 <prvAddNewTaskToReadyList+0xc4>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d110      	bne.n	800a7e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a7c0:	f000 fc16 	bl	800aff0 <prvInitialiseTaskLists>
 800a7c4:	e00d      	b.n	800a7e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a7c6:	4b26      	ldr	r3, [pc, #152]	; (800a860 <prvAddNewTaskToReadyList+0xcc>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d109      	bne.n	800a7e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a7ce:	4b23      	ldr	r3, [pc, #140]	; (800a85c <prvAddNewTaskToReadyList+0xc8>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d802      	bhi.n	800a7e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a7dc:	4a1f      	ldr	r2, [pc, #124]	; (800a85c <prvAddNewTaskToReadyList+0xc8>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a7e2:	4b20      	ldr	r3, [pc, #128]	; (800a864 <prvAddNewTaskToReadyList+0xd0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	4a1e      	ldr	r2, [pc, #120]	; (800a864 <prvAddNewTaskToReadyList+0xd0>)
 800a7ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7ec:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <prvAddNewTaskToReadyList+0xd0>)
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f8:	4b1b      	ldr	r3, [pc, #108]	; (800a868 <prvAddNewTaskToReadyList+0xd4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d903      	bls.n	800a808 <prvAddNewTaskToReadyList+0x74>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	4a18      	ldr	r2, [pc, #96]	; (800a868 <prvAddNewTaskToReadyList+0xd4>)
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4a15      	ldr	r2, [pc, #84]	; (800a86c <prvAddNewTaskToReadyList+0xd8>)
 800a816:	441a      	add	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7ff f913 	bl	8009a4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a824:	f001 fa2e 	bl	800bc84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a828:	4b0d      	ldr	r3, [pc, #52]	; (800a860 <prvAddNewTaskToReadyList+0xcc>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00e      	beq.n	800a84e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a830:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <prvAddNewTaskToReadyList+0xc8>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d207      	bcs.n	800a84e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <prvAddNewTaskToReadyList+0xdc>)
 800a840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	20001674 	.word	0x20001674
 800a85c:	200011a0 	.word	0x200011a0
 800a860:	20001680 	.word	0x20001680
 800a864:	20001690 	.word	0x20001690
 800a868:	2000167c 	.word	0x2000167c
 800a86c:	200011a4 	.word	0x200011a4
 800a870:	e000ed04 	.word	0xe000ed04

0800a874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d017      	beq.n	800a8b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a886:	4b13      	ldr	r3, [pc, #76]	; (800a8d4 <vTaskDelay+0x60>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00a      	beq.n	800a8a4 <vTaskDelay+0x30>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	60bb      	str	r3, [r7, #8]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a8a4:	f000 f880 	bl	800a9a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fcea 	bl	800b284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8b0:	f000 f888 	bl	800a9c4 <xTaskResumeAll>
 800a8b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d107      	bne.n	800a8cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a8bc:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <vTaskDelay+0x64>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8cc:	bf00      	nop
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	2000169c 	.word	0x2000169c
 800a8d8:	e000ed04 	.word	0xe000ed04

0800a8dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08a      	sub	sp, #40	; 0x28
 800a8e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a8ea:	463a      	mov	r2, r7
 800a8ec:	1d39      	adds	r1, r7, #4
 800a8ee:	f107 0308 	add.w	r3, r7, #8
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7ff f848 	bl	8009988 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	9202      	str	r2, [sp, #8]
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	2300      	movs	r3, #0
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	2300      	movs	r3, #0
 800a908:	460a      	mov	r2, r1
 800a90a:	4921      	ldr	r1, [pc, #132]	; (800a990 <vTaskStartScheduler+0xb4>)
 800a90c:	4821      	ldr	r0, [pc, #132]	; (800a994 <vTaskStartScheduler+0xb8>)
 800a90e:	f7ff fe0f 	bl	800a530 <xTaskCreateStatic>
 800a912:	4603      	mov	r3, r0
 800a914:	4a20      	ldr	r2, [pc, #128]	; (800a998 <vTaskStartScheduler+0xbc>)
 800a916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a918:	4b1f      	ldr	r3, [pc, #124]	; (800a998 <vTaskStartScheduler+0xbc>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a920:	2301      	movs	r3, #1
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e001      	b.n	800a92a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d102      	bne.n	800a936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a930:	f000 fcfc 	bl	800b32c <xTimerCreateTimerTask>
 800a934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d116      	bne.n	800a96a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	613b      	str	r3, [r7, #16]
}
 800a94e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a950:	4b12      	ldr	r3, [pc, #72]	; (800a99c <vTaskStartScheduler+0xc0>)
 800a952:	f04f 32ff 	mov.w	r2, #4294967295
 800a956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a958:	4b11      	ldr	r3, [pc, #68]	; (800a9a0 <vTaskStartScheduler+0xc4>)
 800a95a:	2201      	movs	r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a95e:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <vTaskStartScheduler+0xc8>)
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a964:	f001 f8bc 	bl	800bae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a968:	e00e      	b.n	800a988 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a970:	d10a      	bne.n	800a988 <vTaskStartScheduler+0xac>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	60fb      	str	r3, [r7, #12]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <vTaskStartScheduler+0xaa>
}
 800a988:	bf00      	nop
 800a98a:	3718      	adds	r7, #24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	080103bc 	.word	0x080103bc
 800a994:	0800afc1 	.word	0x0800afc1
 800a998:	20001698 	.word	0x20001698
 800a99c:	20001694 	.word	0x20001694
 800a9a0:	20001680 	.word	0x20001680
 800a9a4:	20001678 	.word	0x20001678

0800a9a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a9ac:	4b04      	ldr	r3, [pc, #16]	; (800a9c0 <vTaskSuspendAll+0x18>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	4a03      	ldr	r2, [pc, #12]	; (800a9c0 <vTaskSuspendAll+0x18>)
 800a9b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a9b6:	bf00      	nop
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	2000169c 	.word	0x2000169c

0800a9c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9d2:	4b42      	ldr	r3, [pc, #264]	; (800aadc <xTaskResumeAll+0x118>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	603b      	str	r3, [r7, #0]
}
 800a9ec:	bf00      	nop
 800a9ee:	e7fe      	b.n	800a9ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a9f0:	f001 f918 	bl	800bc24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9f4:	4b39      	ldr	r3, [pc, #228]	; (800aadc <xTaskResumeAll+0x118>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	4a38      	ldr	r2, [pc, #224]	; (800aadc <xTaskResumeAll+0x118>)
 800a9fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9fe:	4b37      	ldr	r3, [pc, #220]	; (800aadc <xTaskResumeAll+0x118>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d162      	bne.n	800aacc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa06:	4b36      	ldr	r3, [pc, #216]	; (800aae0 <xTaskResumeAll+0x11c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d05e      	beq.n	800aacc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa0e:	e02f      	b.n	800aa70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa10:	4b34      	ldr	r3, [pc, #208]	; (800aae4 <xTaskResumeAll+0x120>)
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3318      	adds	r3, #24
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff f871 	bl	8009b04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3304      	adds	r3, #4
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7ff f86c 	bl	8009b04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa30:	4b2d      	ldr	r3, [pc, #180]	; (800aae8 <xTaskResumeAll+0x124>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d903      	bls.n	800aa40 <xTaskResumeAll+0x7c>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <xTaskResumeAll+0x124>)
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	4613      	mov	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4a27      	ldr	r2, [pc, #156]	; (800aaec <xTaskResumeAll+0x128>)
 800aa4e:	441a      	add	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3304      	adds	r3, #4
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7fe fff7 	bl	8009a4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa60:	4b23      	ldr	r3, [pc, #140]	; (800aaf0 <xTaskResumeAll+0x12c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d302      	bcc.n	800aa70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa6a:	4b22      	ldr	r3, [pc, #136]	; (800aaf4 <xTaskResumeAll+0x130>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa70:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <xTaskResumeAll+0x120>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1cb      	bne.n	800aa10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa7e:	f000 fb55 	bl	800b12c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa82:	4b1d      	ldr	r3, [pc, #116]	; (800aaf8 <xTaskResumeAll+0x134>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d010      	beq.n	800aab0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa8e:	f000 f847 	bl	800ab20 <xTaskIncrementTick>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa98:	4b16      	ldr	r3, [pc, #88]	; (800aaf4 <xTaskResumeAll+0x130>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1f1      	bne.n	800aa8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aaaa:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <xTaskResumeAll+0x134>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aab0:	4b10      	ldr	r3, [pc, #64]	; (800aaf4 <xTaskResumeAll+0x130>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d009      	beq.n	800aacc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aab8:	2301      	movs	r3, #1
 800aaba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <xTaskResumeAll+0x138>)
 800aabe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aacc:	f001 f8da 	bl	800bc84 <vPortExitCritical>

	return xAlreadyYielded;
 800aad0:	68bb      	ldr	r3, [r7, #8]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	2000169c 	.word	0x2000169c
 800aae0:	20001674 	.word	0x20001674
 800aae4:	20001634 	.word	0x20001634
 800aae8:	2000167c 	.word	0x2000167c
 800aaec:	200011a4 	.word	0x200011a4
 800aaf0:	200011a0 	.word	0x200011a0
 800aaf4:	20001688 	.word	0x20001688
 800aaf8:	20001684 	.word	0x20001684
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab06:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <xTaskGetTickCount+0x1c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab0c:	687b      	ldr	r3, [r7, #4]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	370c      	adds	r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	20001678 	.word	0x20001678

0800ab20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab2a:	4b4f      	ldr	r3, [pc, #316]	; (800ac68 <xTaskIncrementTick+0x148>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	f040 808f 	bne.w	800ac52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab34:	4b4d      	ldr	r3, [pc, #308]	; (800ac6c <xTaskIncrementTick+0x14c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab3c:	4a4b      	ldr	r2, [pc, #300]	; (800ac6c <xTaskIncrementTick+0x14c>)
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d120      	bne.n	800ab8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab48:	4b49      	ldr	r3, [pc, #292]	; (800ac70 <xTaskIncrementTick+0x150>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <xTaskIncrementTick+0x48>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab56:	f383 8811 	msr	BASEPRI, r3
 800ab5a:	f3bf 8f6f 	isb	sy
 800ab5e:	f3bf 8f4f 	dsb	sy
 800ab62:	603b      	str	r3, [r7, #0]
}
 800ab64:	bf00      	nop
 800ab66:	e7fe      	b.n	800ab66 <xTaskIncrementTick+0x46>
 800ab68:	4b41      	ldr	r3, [pc, #260]	; (800ac70 <xTaskIncrementTick+0x150>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	4b41      	ldr	r3, [pc, #260]	; (800ac74 <xTaskIncrementTick+0x154>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a3f      	ldr	r2, [pc, #252]	; (800ac70 <xTaskIncrementTick+0x150>)
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	4a3f      	ldr	r2, [pc, #252]	; (800ac74 <xTaskIncrementTick+0x154>)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <xTaskIncrementTick+0x158>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	4a3d      	ldr	r2, [pc, #244]	; (800ac78 <xTaskIncrementTick+0x158>)
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	f000 fad1 	bl	800b12c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab8a:	4b3c      	ldr	r3, [pc, #240]	; (800ac7c <xTaskIncrementTick+0x15c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d349      	bcc.n	800ac28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab94:	4b36      	ldr	r3, [pc, #216]	; (800ac70 <xTaskIncrementTick+0x150>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9e:	4b37      	ldr	r3, [pc, #220]	; (800ac7c <xTaskIncrementTick+0x15c>)
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295
 800aba4:	601a      	str	r2, [r3, #0]
					break;
 800aba6:	e03f      	b.n	800ac28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aba8:	4b31      	ldr	r3, [pc, #196]	; (800ac70 <xTaskIncrementTick+0x150>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d203      	bcs.n	800abc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abc0:	4a2e      	ldr	r2, [pc, #184]	; (800ac7c <xTaskIncrementTick+0x15c>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800abc6:	e02f      	b.n	800ac28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	3304      	adds	r3, #4
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe ff99 	bl	8009b04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d004      	beq.n	800abe4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	3318      	adds	r3, #24
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe ff90 	bl	8009b04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	4b25      	ldr	r3, [pc, #148]	; (800ac80 <xTaskIncrementTick+0x160>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d903      	bls.n	800abf8 <xTaskIncrementTick+0xd8>
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4a22      	ldr	r2, [pc, #136]	; (800ac80 <xTaskIncrementTick+0x160>)
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <xTaskIncrementTick+0x164>)
 800ac06:	441a      	add	r2, r3
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fe ff1b 	bl	8009a4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac18:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <xTaskIncrementTick+0x168>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d3b8      	bcc.n	800ab94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac22:	2301      	movs	r3, #1
 800ac24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac26:	e7b5      	b.n	800ab94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac28:	4b17      	ldr	r3, [pc, #92]	; (800ac88 <xTaskIncrementTick+0x168>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	4915      	ldr	r1, [pc, #84]	; (800ac84 <xTaskIncrementTick+0x164>)
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	440b      	add	r3, r1
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d901      	bls.n	800ac44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ac40:	2301      	movs	r3, #1
 800ac42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ac44:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <xTaskIncrementTick+0x16c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d007      	beq.n	800ac5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	617b      	str	r3, [r7, #20]
 800ac50:	e004      	b.n	800ac5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ac52:	4b0f      	ldr	r3, [pc, #60]	; (800ac90 <xTaskIncrementTick+0x170>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3301      	adds	r3, #1
 800ac58:	4a0d      	ldr	r2, [pc, #52]	; (800ac90 <xTaskIncrementTick+0x170>)
 800ac5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ac5c:	697b      	ldr	r3, [r7, #20]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	2000169c 	.word	0x2000169c
 800ac6c:	20001678 	.word	0x20001678
 800ac70:	2000162c 	.word	0x2000162c
 800ac74:	20001630 	.word	0x20001630
 800ac78:	2000168c 	.word	0x2000168c
 800ac7c:	20001694 	.word	0x20001694
 800ac80:	2000167c 	.word	0x2000167c
 800ac84:	200011a4 	.word	0x200011a4
 800ac88:	200011a0 	.word	0x200011a0
 800ac8c:	20001688 	.word	0x20001688
 800ac90:	20001684 	.word	0x20001684

0800ac94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac9a:	4b28      	ldr	r3, [pc, #160]	; (800ad3c <vTaskSwitchContext+0xa8>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d003      	beq.n	800acaa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aca2:	4b27      	ldr	r3, [pc, #156]	; (800ad40 <vTaskSwitchContext+0xac>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aca8:	e041      	b.n	800ad2e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800acaa:	4b25      	ldr	r3, [pc, #148]	; (800ad40 <vTaskSwitchContext+0xac>)
 800acac:	2200      	movs	r2, #0
 800acae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acb0:	4b24      	ldr	r3, [pc, #144]	; (800ad44 <vTaskSwitchContext+0xb0>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	e010      	b.n	800acda <vTaskSwitchContext+0x46>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10a      	bne.n	800acd4 <vTaskSwitchContext+0x40>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	607b      	str	r3, [r7, #4]
}
 800acd0:	bf00      	nop
 800acd2:	e7fe      	b.n	800acd2 <vTaskSwitchContext+0x3e>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	60fb      	str	r3, [r7, #12]
 800acda:	491b      	ldr	r1, [pc, #108]	; (800ad48 <vTaskSwitchContext+0xb4>)
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4613      	mov	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	440b      	add	r3, r1
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d0e4      	beq.n	800acb8 <vTaskSwitchContext+0x24>
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4a13      	ldr	r2, [pc, #76]	; (800ad48 <vTaskSwitchContext+0xb4>)
 800acfa:	4413      	add	r3, r2
 800acfc:	60bb      	str	r3, [r7, #8]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	605a      	str	r2, [r3, #4]
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	3308      	adds	r3, #8
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d104      	bne.n	800ad1e <vTaskSwitchContext+0x8a>
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	605a      	str	r2, [r3, #4]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	4a09      	ldr	r2, [pc, #36]	; (800ad4c <vTaskSwitchContext+0xb8>)
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	4a06      	ldr	r2, [pc, #24]	; (800ad44 <vTaskSwitchContext+0xb0>)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6013      	str	r3, [r2, #0]
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	2000169c 	.word	0x2000169c
 800ad40:	20001688 	.word	0x20001688
 800ad44:	2000167c 	.word	0x2000167c
 800ad48:	200011a4 	.word	0x200011a4
 800ad4c:	200011a0 	.word	0x200011a0

0800ad50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10a      	bne.n	800ad76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	60fb      	str	r3, [r7, #12]
}
 800ad72:	bf00      	nop
 800ad74:	e7fe      	b.n	800ad74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad76:	4b07      	ldr	r3, [pc, #28]	; (800ad94 <vTaskPlaceOnEventList+0x44>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3318      	adds	r3, #24
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7fe fe87 	bl	8009a92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad84:	2101      	movs	r1, #1
 800ad86:	6838      	ldr	r0, [r7, #0]
 800ad88:	f000 fa7c 	bl	800b284 <prvAddCurrentTaskToDelayedList>
}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	200011a0 	.word	0x200011a0

0800ad98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b086      	sub	sp, #24
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	617b      	str	r3, [r7, #20]
}
 800adbc:	bf00      	nop
 800adbe:	e7fe      	b.n	800adbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800adc0:	4b0a      	ldr	r3, [pc, #40]	; (800adec <vTaskPlaceOnEventListRestricted+0x54>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3318      	adds	r3, #24
 800adc6:	4619      	mov	r1, r3
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7fe fe3e 	bl	8009a4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800add4:	f04f 33ff 	mov.w	r3, #4294967295
 800add8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	68b8      	ldr	r0, [r7, #8]
 800adde:	f000 fa51 	bl	800b284 <prvAddCurrentTaskToDelayedList>
	}
 800ade2:	bf00      	nop
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	200011a0 	.word	0x200011a0

0800adf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60fb      	str	r3, [r7, #12]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	3318      	adds	r3, #24
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe fe6f 	bl	8009b04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae26:	4b1e      	ldr	r3, [pc, #120]	; (800aea0 <xTaskRemoveFromEventList+0xb0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d11d      	bne.n	800ae6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	3304      	adds	r3, #4
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7fe fe66 	bl	8009b04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3c:	4b19      	ldr	r3, [pc, #100]	; (800aea4 <xTaskRemoveFromEventList+0xb4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d903      	bls.n	800ae4c <xTaskRemoveFromEventList+0x5c>
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae48:	4a16      	ldr	r2, [pc, #88]	; (800aea4 <xTaskRemoveFromEventList+0xb4>)
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae50:	4613      	mov	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4a13      	ldr	r2, [pc, #76]	; (800aea8 <xTaskRemoveFromEventList+0xb8>)
 800ae5a:	441a      	add	r2, r3
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	3304      	adds	r3, #4
 800ae60:	4619      	mov	r1, r3
 800ae62:	4610      	mov	r0, r2
 800ae64:	f7fe fdf1 	bl	8009a4a <vListInsertEnd>
 800ae68:	e005      	b.n	800ae76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	3318      	adds	r3, #24
 800ae6e:	4619      	mov	r1, r3
 800ae70:	480e      	ldr	r0, [pc, #56]	; (800aeac <xTaskRemoveFromEventList+0xbc>)
 800ae72:	f7fe fdea 	bl	8009a4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <xTaskRemoveFromEventList+0xc0>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d905      	bls.n	800ae90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <xTaskRemoveFromEventList+0xc4>)
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e001      	b.n	800ae94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae94:	697b      	ldr	r3, [r7, #20]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	2000169c 	.word	0x2000169c
 800aea4:	2000167c 	.word	0x2000167c
 800aea8:	200011a4 	.word	0x200011a4
 800aeac:	20001634 	.word	0x20001634
 800aeb0:	200011a0 	.word	0x200011a0
 800aeb4:	20001688 	.word	0x20001688

0800aeb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aec0:	4b06      	ldr	r3, [pc, #24]	; (800aedc <vTaskInternalSetTimeOutState+0x24>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <vTaskInternalSetTimeOutState+0x28>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	605a      	str	r2, [r3, #4]
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	2000168c 	.word	0x2000168c
 800aee0:	20001678 	.word	0x20001678

0800aee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	613b      	str	r3, [r7, #16]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10a      	bne.n	800af26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	f383 8811 	msr	BASEPRI, r3
 800af18:	f3bf 8f6f 	isb	sy
 800af1c:	f3bf 8f4f 	dsb	sy
 800af20:	60fb      	str	r3, [r7, #12]
}
 800af22:	bf00      	nop
 800af24:	e7fe      	b.n	800af24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800af26:	f000 fe7d 	bl	800bc24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af2a:	4b1d      	ldr	r3, [pc, #116]	; (800afa0 <xTaskCheckForTimeOut+0xbc>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af42:	d102      	bne.n	800af4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af44:	2300      	movs	r3, #0
 800af46:	61fb      	str	r3, [r7, #28]
 800af48:	e023      	b.n	800af92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	4b15      	ldr	r3, [pc, #84]	; (800afa4 <xTaskCheckForTimeOut+0xc0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	429a      	cmp	r2, r3
 800af54:	d007      	beq.n	800af66 <xTaskCheckForTimeOut+0x82>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d302      	bcc.n	800af66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	61fb      	str	r3, [r7, #28]
 800af64:	e015      	b.n	800af92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d20b      	bcs.n	800af88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	1ad2      	subs	r2, r2, r3
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7ff ff9b 	bl	800aeb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af82:	2300      	movs	r3, #0
 800af84:	61fb      	str	r3, [r7, #28]
 800af86:	e004      	b.n	800af92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2200      	movs	r2, #0
 800af8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af8e:	2301      	movs	r3, #1
 800af90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af92:	f000 fe77 	bl	800bc84 <vPortExitCritical>

	return xReturn;
 800af96:	69fb      	ldr	r3, [r7, #28]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20001678 	.word	0x20001678
 800afa4:	2000168c 	.word	0x2000168c

0800afa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800afa8:	b480      	push	{r7}
 800afaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800afac:	4b03      	ldr	r3, [pc, #12]	; (800afbc <vTaskMissedYield+0x14>)
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
}
 800afb2:	bf00      	nop
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	20001688 	.word	0x20001688

0800afc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800afc8:	f000 f852 	bl	800b070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afcc:	4b06      	ldr	r3, [pc, #24]	; (800afe8 <prvIdleTask+0x28>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d9f9      	bls.n	800afc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <prvIdleTask+0x2c>)
 800afd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afe4:	e7f0      	b.n	800afc8 <prvIdleTask+0x8>
 800afe6:	bf00      	nop
 800afe8:	200011a4 	.word	0x200011a4
 800afec:	e000ed04 	.word	0xe000ed04

0800aff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aff6:	2300      	movs	r3, #0
 800aff8:	607b      	str	r3, [r7, #4]
 800affa:	e00c      	b.n	800b016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4a12      	ldr	r2, [pc, #72]	; (800b050 <prvInitialiseTaskLists+0x60>)
 800b008:	4413      	add	r3, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fcf0 	bl	80099f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3301      	adds	r3, #1
 800b014:	607b      	str	r3, [r7, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b37      	cmp	r3, #55	; 0x37
 800b01a:	d9ef      	bls.n	800affc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b01c:	480d      	ldr	r0, [pc, #52]	; (800b054 <prvInitialiseTaskLists+0x64>)
 800b01e:	f7fe fce7 	bl	80099f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b022:	480d      	ldr	r0, [pc, #52]	; (800b058 <prvInitialiseTaskLists+0x68>)
 800b024:	f7fe fce4 	bl	80099f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b028:	480c      	ldr	r0, [pc, #48]	; (800b05c <prvInitialiseTaskLists+0x6c>)
 800b02a:	f7fe fce1 	bl	80099f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b02e:	480c      	ldr	r0, [pc, #48]	; (800b060 <prvInitialiseTaskLists+0x70>)
 800b030:	f7fe fcde 	bl	80099f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b034:	480b      	ldr	r0, [pc, #44]	; (800b064 <prvInitialiseTaskLists+0x74>)
 800b036:	f7fe fcdb 	bl	80099f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b03a:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <prvInitialiseTaskLists+0x78>)
 800b03c:	4a05      	ldr	r2, [pc, #20]	; (800b054 <prvInitialiseTaskLists+0x64>)
 800b03e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b040:	4b0a      	ldr	r3, [pc, #40]	; (800b06c <prvInitialiseTaskLists+0x7c>)
 800b042:	4a05      	ldr	r2, [pc, #20]	; (800b058 <prvInitialiseTaskLists+0x68>)
 800b044:	601a      	str	r2, [r3, #0]
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200011a4 	.word	0x200011a4
 800b054:	20001604 	.word	0x20001604
 800b058:	20001618 	.word	0x20001618
 800b05c:	20001634 	.word	0x20001634
 800b060:	20001648 	.word	0x20001648
 800b064:	20001660 	.word	0x20001660
 800b068:	2000162c 	.word	0x2000162c
 800b06c:	20001630 	.word	0x20001630

0800b070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b076:	e019      	b.n	800b0ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b078:	f000 fdd4 	bl	800bc24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07c:	4b10      	ldr	r3, [pc, #64]	; (800b0c0 <prvCheckTasksWaitingTermination+0x50>)
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3304      	adds	r3, #4
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fd3b 	bl	8009b04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b08e:	4b0d      	ldr	r3, [pc, #52]	; (800b0c4 <prvCheckTasksWaitingTermination+0x54>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3b01      	subs	r3, #1
 800b094:	4a0b      	ldr	r2, [pc, #44]	; (800b0c4 <prvCheckTasksWaitingTermination+0x54>)
 800b096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <prvCheckTasksWaitingTermination+0x58>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4a0a      	ldr	r2, [pc, #40]	; (800b0c8 <prvCheckTasksWaitingTermination+0x58>)
 800b0a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b0a2:	f000 fdef 	bl	800bc84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f810 	bl	800b0cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <prvCheckTasksWaitingTermination+0x58>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e1      	bne.n	800b078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20001648 	.word	0x20001648
 800b0c4:	20001674 	.word	0x20001674
 800b0c8:	2000165c 	.word	0x2000165c

0800b0cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d108      	bne.n	800b0f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f000 ff8c 	bl	800c000 <vPortFree>
				vPortFree( pxTCB );
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 ff89 	bl	800c000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0ee:	e018      	b.n	800b122 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d103      	bne.n	800b102 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 ff80 	bl	800c000 <vPortFree>
	}
 800b100:	e00f      	b.n	800b122 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d00a      	beq.n	800b122 <prvDeleteTCB+0x56>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	60fb      	str	r3, [r7, #12]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <prvDeleteTCB+0x54>
	}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b132:	4b0c      	ldr	r3, [pc, #48]	; (800b164 <prvResetNextTaskUnblockTime+0x38>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d104      	bne.n	800b146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <prvResetNextTaskUnblockTime+0x3c>)
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295
 800b142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b144:	e008      	b.n	800b158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b146:	4b07      	ldr	r3, [pc, #28]	; (800b164 <prvResetNextTaskUnblockTime+0x38>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685b      	ldr	r3, [r3, #4]
 800b154:	4a04      	ldr	r2, [pc, #16]	; (800b168 <prvResetNextTaskUnblockTime+0x3c>)
 800b156:	6013      	str	r3, [r2, #0]
}
 800b158:	bf00      	nop
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr
 800b164:	2000162c 	.word	0x2000162c
 800b168:	20001694 	.word	0x20001694

0800b16c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b172:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <xTaskGetSchedulerState+0x34>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d102      	bne.n	800b180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b17a:	2301      	movs	r3, #1
 800b17c:	607b      	str	r3, [r7, #4]
 800b17e:	e008      	b.n	800b192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b180:	4b08      	ldr	r3, [pc, #32]	; (800b1a4 <xTaskGetSchedulerState+0x38>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b188:	2302      	movs	r3, #2
 800b18a:	607b      	str	r3, [r7, #4]
 800b18c:	e001      	b.n	800b192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b18e:	2300      	movs	r3, #0
 800b190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b192:	687b      	ldr	r3, [r7, #4]
	}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	20001680 	.word	0x20001680
 800b1a4:	2000169c 	.word	0x2000169c

0800b1a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d056      	beq.n	800b26c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1be:	4b2e      	ldr	r3, [pc, #184]	; (800b278 <xTaskPriorityDisinherit+0xd0>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d00a      	beq.n	800b1de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	60fb      	str	r3, [r7, #12]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	60bb      	str	r3, [r7, #8]
}
 800b1f8:	bf00      	nop
 800b1fa:	e7fe      	b.n	800b1fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b200:	1e5a      	subs	r2, r3, #1
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20e:	429a      	cmp	r2, r3
 800b210:	d02c      	beq.n	800b26c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b216:	2b00      	cmp	r3, #0
 800b218:	d128      	bne.n	800b26c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	3304      	adds	r3, #4
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fc70 	bl	8009b04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b230:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23c:	4b0f      	ldr	r3, [pc, #60]	; (800b27c <xTaskPriorityDisinherit+0xd4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	429a      	cmp	r2, r3
 800b242:	d903      	bls.n	800b24c <xTaskPriorityDisinherit+0xa4>
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	4a0c      	ldr	r2, [pc, #48]	; (800b27c <xTaskPriorityDisinherit+0xd4>)
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <xTaskPriorityDisinherit+0xd8>)
 800b25a:	441a      	add	r2, r3
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	3304      	adds	r3, #4
 800b260:	4619      	mov	r1, r3
 800b262:	4610      	mov	r0, r2
 800b264:	f7fe fbf1 	bl	8009a4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b26c:	697b      	ldr	r3, [r7, #20]
	}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	200011a0 	.word	0x200011a0
 800b27c:	2000167c 	.word	0x2000167c
 800b280:	200011a4 	.word	0x200011a4

0800b284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b28e:	4b21      	ldr	r3, [pc, #132]	; (800b314 <prvAddCurrentTaskToDelayedList+0x90>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b294:	4b20      	ldr	r3, [pc, #128]	; (800b318 <prvAddCurrentTaskToDelayedList+0x94>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3304      	adds	r3, #4
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fc32 	bl	8009b04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d10a      	bne.n	800b2be <prvAddCurrentTaskToDelayedList+0x3a>
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d007      	beq.n	800b2be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2ae:	4b1a      	ldr	r3, [pc, #104]	; (800b318 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4819      	ldr	r0, [pc, #100]	; (800b31c <prvAddCurrentTaskToDelayedList+0x98>)
 800b2b8:	f7fe fbc7 	bl	8009a4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2bc:	e026      	b.n	800b30c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2c6:	4b14      	ldr	r3, [pc, #80]	; (800b318 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d209      	bcs.n	800b2ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2d6:	4b12      	ldr	r3, [pc, #72]	; (800b320 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	4b0f      	ldr	r3, [pc, #60]	; (800b318 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	f7fe fbd5 	bl	8009a92 <vListInsert>
}
 800b2e8:	e010      	b.n	800b30c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2ea:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	4b0a      	ldr	r3, [pc, #40]	; (800b318 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4610      	mov	r0, r2
 800b2f8:	f7fe fbcb 	bl	8009a92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	429a      	cmp	r2, r3
 800b304:	d202      	bcs.n	800b30c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b306:	4a08      	ldr	r2, [pc, #32]	; (800b328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6013      	str	r3, [r2, #0]
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	20001678 	.word	0x20001678
 800b318:	200011a0 	.word	0x200011a0
 800b31c:	20001660 	.word	0x20001660
 800b320:	20001630 	.word	0x20001630
 800b324:	2000162c 	.word	0x2000162c
 800b328:	20001694 	.word	0x20001694

0800b32c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	; 0x28
 800b330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b332:	2300      	movs	r3, #0
 800b334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b336:	f000 fb07 	bl	800b948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b33a:	4b1c      	ldr	r3, [pc, #112]	; (800b3ac <xTimerCreateTimerTask+0x80>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d021      	beq.n	800b386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b346:	2300      	movs	r3, #0
 800b348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b34a:	1d3a      	adds	r2, r7, #4
 800b34c:	f107 0108 	add.w	r1, r7, #8
 800b350:	f107 030c 	add.w	r3, r7, #12
 800b354:	4618      	mov	r0, r3
 800b356:	f7fe fb31 	bl	80099bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	9202      	str	r2, [sp, #8]
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	2302      	movs	r3, #2
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	2300      	movs	r3, #0
 800b36a:	460a      	mov	r2, r1
 800b36c:	4910      	ldr	r1, [pc, #64]	; (800b3b0 <xTimerCreateTimerTask+0x84>)
 800b36e:	4811      	ldr	r0, [pc, #68]	; (800b3b4 <xTimerCreateTimerTask+0x88>)
 800b370:	f7ff f8de 	bl	800a530 <xTaskCreateStatic>
 800b374:	4603      	mov	r3, r0
 800b376:	4a10      	ldr	r2, [pc, #64]	; (800b3b8 <xTimerCreateTimerTask+0x8c>)
 800b378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b37a:	4b0f      	ldr	r3, [pc, #60]	; (800b3b8 <xTimerCreateTimerTask+0x8c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b382:	2301      	movs	r3, #1
 800b384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	613b      	str	r3, [r7, #16]
}
 800b39e:	bf00      	nop
 800b3a0:	e7fe      	b.n	800b3a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3a2:	697b      	ldr	r3, [r7, #20]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	200016d0 	.word	0x200016d0
 800b3b0:	080103c4 	.word	0x080103c4
 800b3b4:	0800b4f1 	.word	0x0800b4f1
 800b3b8:	200016d4 	.word	0x200016d4

0800b3bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08a      	sub	sp, #40	; 0x28
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10a      	bne.n	800b3ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	623b      	str	r3, [r7, #32]
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3ea:	4b1a      	ldr	r3, [pc, #104]	; (800b454 <xTimerGenericCommand+0x98>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d02a      	beq.n	800b448 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b05      	cmp	r3, #5
 800b402:	dc18      	bgt.n	800b436 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b404:	f7ff feb2 	bl	800b16c <xTaskGetSchedulerState>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d109      	bne.n	800b422 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b40e:	4b11      	ldr	r3, [pc, #68]	; (800b454 <xTimerGenericCommand+0x98>)
 800b410:	6818      	ldr	r0, [r3, #0]
 800b412:	f107 0110 	add.w	r1, r7, #16
 800b416:	2300      	movs	r3, #0
 800b418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b41a:	f7fe fca1 	bl	8009d60 <xQueueGenericSend>
 800b41e:	6278      	str	r0, [r7, #36]	; 0x24
 800b420:	e012      	b.n	800b448 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b422:	4b0c      	ldr	r3, [pc, #48]	; (800b454 <xTimerGenericCommand+0x98>)
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f107 0110 	add.w	r1, r7, #16
 800b42a:	2300      	movs	r3, #0
 800b42c:	2200      	movs	r2, #0
 800b42e:	f7fe fc97 	bl	8009d60 <xQueueGenericSend>
 800b432:	6278      	str	r0, [r7, #36]	; 0x24
 800b434:	e008      	b.n	800b448 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b436:	4b07      	ldr	r3, [pc, #28]	; (800b454 <xTimerGenericCommand+0x98>)
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	f107 0110 	add.w	r1, r7, #16
 800b43e:	2300      	movs	r3, #0
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	f7fe fd8b 	bl	8009f5c <xQueueGenericSendFromISR>
 800b446:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3728      	adds	r7, #40	; 0x28
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	200016d0 	.word	0x200016d0

0800b458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af02      	add	r7, sp, #8
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b462:	4b22      	ldr	r3, [pc, #136]	; (800b4ec <prvProcessExpiredTimer+0x94>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	3304      	adds	r3, #4
 800b470:	4618      	mov	r0, r3
 800b472:	f7fe fb47 	bl	8009b04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b47c:	f003 0304 	and.w	r3, r3, #4
 800b480:	2b00      	cmp	r3, #0
 800b482:	d022      	beq.n	800b4ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	699a      	ldr	r2, [r3, #24]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	18d1      	adds	r1, r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	6978      	ldr	r0, [r7, #20]
 800b492:	f000 f8d1 	bl	800b638 <prvInsertTimerInActiveList>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01f      	beq.n	800b4dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b49c:	2300      	movs	r3, #0
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	6978      	ldr	r0, [r7, #20]
 800b4a8:	f7ff ff88 	bl	800b3bc <xTimerGenericCommand>
 800b4ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d113      	bne.n	800b4dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	60fb      	str	r3, [r7, #12]
}
 800b4c6:	bf00      	nop
 800b4c8:	e7fe      	b.n	800b4c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4d0:	f023 0301 	bic.w	r3, r3, #1
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	6978      	ldr	r0, [r7, #20]
 800b4e2:	4798      	blx	r3
}
 800b4e4:	bf00      	nop
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	200016c8 	.word	0x200016c8

0800b4f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4f8:	f107 0308 	add.w	r3, r7, #8
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 f857 	bl	800b5b0 <prvGetNextExpireTime>
 800b502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4619      	mov	r1, r3
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f803 	bl	800b514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b50e:	f000 f8d5 	bl	800b6bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b512:	e7f1      	b.n	800b4f8 <prvTimerTask+0x8>

0800b514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b51e:	f7ff fa43 	bl	800a9a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b522:	f107 0308 	add.w	r3, r7, #8
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f866 	bl	800b5f8 <prvSampleTimeNow>
 800b52c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d130      	bne.n	800b596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <prvProcessTimerOrBlockTask+0x3c>
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d806      	bhi.n	800b550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b542:	f7ff fa3f 	bl	800a9c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b546:	68f9      	ldr	r1, [r7, #12]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff ff85 	bl	800b458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b54e:	e024      	b.n	800b59a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d008      	beq.n	800b568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b556:	4b13      	ldr	r3, [pc, #76]	; (800b5a4 <prvProcessTimerOrBlockTask+0x90>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d101      	bne.n	800b564 <prvProcessTimerOrBlockTask+0x50>
 800b560:	2301      	movs	r3, #1
 800b562:	e000      	b.n	800b566 <prvProcessTimerOrBlockTask+0x52>
 800b564:	2300      	movs	r3, #0
 800b566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b568:	4b0f      	ldr	r3, [pc, #60]	; (800b5a8 <prvProcessTimerOrBlockTask+0x94>)
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	4619      	mov	r1, r3
 800b576:	f7fe ffa7 	bl	800a4c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b57a:	f7ff fa23 	bl	800a9c4 <xTaskResumeAll>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10a      	bne.n	800b59a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b584:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <prvProcessTimerOrBlockTask+0x98>)
 800b586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	f3bf 8f6f 	isb	sy
}
 800b594:	e001      	b.n	800b59a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b596:	f7ff fa15 	bl	800a9c4 <xTaskResumeAll>
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	200016cc 	.word	0x200016cc
 800b5a8:	200016d0 	.word	0x200016d0
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5b8:	4b0e      	ldr	r3, [pc, #56]	; (800b5f4 <prvGetNextExpireTime+0x44>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d101      	bne.n	800b5c6 <prvGetNextExpireTime+0x16>
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	e000      	b.n	800b5c8 <prvGetNextExpireTime+0x18>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d105      	bne.n	800b5e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5d4:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <prvGetNextExpireTime+0x44>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	e001      	b.n	800b5e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	200016c8 	.word	0x200016c8

0800b5f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b600:	f7ff fa7e 	bl	800ab00 <xTaskGetTickCount>
 800b604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b606:	4b0b      	ldr	r3, [pc, #44]	; (800b634 <prvSampleTimeNow+0x3c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d205      	bcs.n	800b61c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b610:	f000 f936 	bl	800b880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	601a      	str	r2, [r3, #0]
 800b61a:	e002      	b.n	800b622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b622:	4a04      	ldr	r2, [pc, #16]	; (800b634 <prvSampleTimeNow+0x3c>)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b628:	68fb      	ldr	r3, [r7, #12]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	200016d8 	.word	0x200016d8

0800b638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d812      	bhi.n	800b684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	1ad2      	subs	r2, r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d302      	bcc.n	800b672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b66c:	2301      	movs	r3, #1
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	e01b      	b.n	800b6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b672:	4b10      	ldr	r3, [pc, #64]	; (800b6b4 <prvInsertTimerInActiveList+0x7c>)
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3304      	adds	r3, #4
 800b67a:	4619      	mov	r1, r3
 800b67c:	4610      	mov	r0, r2
 800b67e:	f7fe fa08 	bl	8009a92 <vListInsert>
 800b682:	e012      	b.n	800b6aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d206      	bcs.n	800b69a <prvInsertTimerInActiveList+0x62>
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	429a      	cmp	r2, r3
 800b692:	d302      	bcc.n	800b69a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b694:	2301      	movs	r3, #1
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	e007      	b.n	800b6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b69a:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <prvInsertTimerInActiveList+0x80>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3304      	adds	r3, #4
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	f7fe f9f4 	bl	8009a92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6aa:	697b      	ldr	r3, [r7, #20]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	200016cc 	.word	0x200016cc
 800b6b8:	200016c8 	.word	0x200016c8

0800b6bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08e      	sub	sp, #56	; 0x38
 800b6c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6c2:	e0ca      	b.n	800b85a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	da18      	bge.n	800b6fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6ca:	1d3b      	adds	r3, r7, #4
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10a      	bne.n	800b6ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	61fb      	str	r3, [r7, #28]
}
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f2:	6850      	ldr	r0, [r2, #4]
 800b6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f6:	6892      	ldr	r2, [r2, #8]
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f2c0 80aa 	blt.w	800b858 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d004      	beq.n	800b71a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	3304      	adds	r3, #4
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe f9f5 	bl	8009b04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b71a:	463b      	mov	r3, r7
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff ff6b 	bl	800b5f8 <prvSampleTimeNow>
 800b722:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b09      	cmp	r3, #9
 800b728:	f200 8097 	bhi.w	800b85a <prvProcessReceivedCommands+0x19e>
 800b72c:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <prvProcessReceivedCommands+0x78>)
 800b72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b732:	bf00      	nop
 800b734:	0800b75d 	.word	0x0800b75d
 800b738:	0800b75d 	.word	0x0800b75d
 800b73c:	0800b75d 	.word	0x0800b75d
 800b740:	0800b7d1 	.word	0x0800b7d1
 800b744:	0800b7e5 	.word	0x0800b7e5
 800b748:	0800b82f 	.word	0x0800b82f
 800b74c:	0800b75d 	.word	0x0800b75d
 800b750:	0800b75d 	.word	0x0800b75d
 800b754:	0800b7d1 	.word	0x0800b7d1
 800b758:	0800b7e5 	.word	0x0800b7e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b762:	f043 0301 	orr.w	r3, r3, #1
 800b766:	b2da      	uxtb	r2, r3
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	18d1      	adds	r1, r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b77c:	f7ff ff5c 	bl	800b638 <prvInsertTimerInActiveList>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d069      	beq.n	800b85a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b78c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d05e      	beq.n	800b85a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	441a      	add	r2, r3
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ae:	f7ff fe05 	bl	800b3bc <xTimerGenericCommand>
 800b7b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d14f      	bne.n	800b85a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7be:	f383 8811 	msr	BASEPRI, r3
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	f3bf 8f4f 	dsb	sy
 800b7ca:	61bb      	str	r3, [r7, #24]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7d6:	f023 0301 	bic.w	r3, r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b7e2:	e03a      	b.n	800b85a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ea:	f043 0301 	orr.w	r3, r3, #1
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	617b      	str	r3, [r7, #20]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81c:	699a      	ldr	r2, [r3, #24]
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	18d1      	adds	r1, r2, r3
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b828:	f7ff ff06 	bl	800b638 <prvInsertTimerInActiveList>
					break;
 800b82c:	e015      	b.n	800b85a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d103      	bne.n	800b844 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b83e:	f000 fbdf 	bl	800c000 <vPortFree>
 800b842:	e00a      	b.n	800b85a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b84a:	f023 0301 	bic.w	r3, r3, #1
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b856:	e000      	b.n	800b85a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b85a:	4b08      	ldr	r3, [pc, #32]	; (800b87c <prvProcessReceivedCommands+0x1c0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	1d39      	adds	r1, r7, #4
 800b860:	2200      	movs	r2, #0
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fc16 	bl	800a094 <xQueueReceive>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f47f af2a 	bne.w	800b6c4 <prvProcessReceivedCommands+0x8>
	}
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	3730      	adds	r7, #48	; 0x30
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	200016d0 	.word	0x200016d0

0800b880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b886:	e048      	b.n	800b91a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b888:	4b2d      	ldr	r3, [pc, #180]	; (800b940 <prvSwitchTimerLists+0xc0>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b892:	4b2b      	ldr	r3, [pc, #172]	; (800b940 <prvSwitchTimerLists+0xc0>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe f92f 	bl	8009b04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d02e      	beq.n	800b91a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d90e      	bls.n	800b8ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8da:	4b19      	ldr	r3, [pc, #100]	; (800b940 <prvSwitchTimerLists+0xc0>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	f7fe f8d4 	bl	8009a92 <vListInsert>
 800b8ea:	e016      	b.n	800b91a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f7ff fd60 	bl	800b3bc <xTimerGenericCommand>
 800b8fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10a      	bne.n	800b91a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	f383 8811 	msr	BASEPRI, r3
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	603b      	str	r3, [r7, #0]
}
 800b916:	bf00      	nop
 800b918:	e7fe      	b.n	800b918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <prvSwitchTimerLists+0xc0>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1b1      	bne.n	800b888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b924:	4b06      	ldr	r3, [pc, #24]	; (800b940 <prvSwitchTimerLists+0xc0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b92a:	4b06      	ldr	r3, [pc, #24]	; (800b944 <prvSwitchTimerLists+0xc4>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a04      	ldr	r2, [pc, #16]	; (800b940 <prvSwitchTimerLists+0xc0>)
 800b930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b932:	4a04      	ldr	r2, [pc, #16]	; (800b944 <prvSwitchTimerLists+0xc4>)
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	6013      	str	r3, [r2, #0]
}
 800b938:	bf00      	nop
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	200016c8 	.word	0x200016c8
 800b944:	200016cc 	.word	0x200016cc

0800b948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b94e:	f000 f969 	bl	800bc24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b952:	4b15      	ldr	r3, [pc, #84]	; (800b9a8 <prvCheckForValidListAndQueue+0x60>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d120      	bne.n	800b99c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b95a:	4814      	ldr	r0, [pc, #80]	; (800b9ac <prvCheckForValidListAndQueue+0x64>)
 800b95c:	f7fe f848 	bl	80099f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b960:	4813      	ldr	r0, [pc, #76]	; (800b9b0 <prvCheckForValidListAndQueue+0x68>)
 800b962:	f7fe f845 	bl	80099f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b966:	4b13      	ldr	r3, [pc, #76]	; (800b9b4 <prvCheckForValidListAndQueue+0x6c>)
 800b968:	4a10      	ldr	r2, [pc, #64]	; (800b9ac <prvCheckForValidListAndQueue+0x64>)
 800b96a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b96c:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <prvCheckForValidListAndQueue+0x70>)
 800b96e:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <prvCheckForValidListAndQueue+0x68>)
 800b970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b972:	2300      	movs	r3, #0
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	4b11      	ldr	r3, [pc, #68]	; (800b9bc <prvCheckForValidListAndQueue+0x74>)
 800b978:	4a11      	ldr	r2, [pc, #68]	; (800b9c0 <prvCheckForValidListAndQueue+0x78>)
 800b97a:	2110      	movs	r1, #16
 800b97c:	200a      	movs	r0, #10
 800b97e:	f7fe f953 	bl	8009c28 <xQueueGenericCreateStatic>
 800b982:	4603      	mov	r3, r0
 800b984:	4a08      	ldr	r2, [pc, #32]	; (800b9a8 <prvCheckForValidListAndQueue+0x60>)
 800b986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b988:	4b07      	ldr	r3, [pc, #28]	; (800b9a8 <prvCheckForValidListAndQueue+0x60>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d005      	beq.n	800b99c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <prvCheckForValidListAndQueue+0x60>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	490b      	ldr	r1, [pc, #44]	; (800b9c4 <prvCheckForValidListAndQueue+0x7c>)
 800b996:	4618      	mov	r0, r3
 800b998:	f7fe fd6c 	bl	800a474 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b99c:	f000 f972 	bl	800bc84 <vPortExitCritical>
}
 800b9a0:	bf00      	nop
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	200016d0 	.word	0x200016d0
 800b9ac:	200016a0 	.word	0x200016a0
 800b9b0:	200016b4 	.word	0x200016b4
 800b9b4:	200016c8 	.word	0x200016c8
 800b9b8:	200016cc 	.word	0x200016cc
 800b9bc:	2000177c 	.word	0x2000177c
 800b9c0:	200016dc 	.word	0x200016dc
 800b9c4:	080103cc 	.word	0x080103cc

0800b9c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	3b04      	subs	r3, #4
 800b9d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3b04      	subs	r3, #4
 800b9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f023 0201 	bic.w	r2, r3, #1
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3b04      	subs	r3, #4
 800b9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9f8:	4a0c      	ldr	r2, [pc, #48]	; (800ba2c <pxPortInitialiseStack+0x64>)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3b14      	subs	r3, #20
 800ba02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3b04      	subs	r3, #4
 800ba0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f06f 0202 	mvn.w	r2, #2
 800ba16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	3b20      	subs	r3, #32
 800ba1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	0800ba31 	.word	0x0800ba31

0800ba30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba3a:	4b12      	ldr	r3, [pc, #72]	; (800ba84 <prvTaskExitError+0x54>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba42:	d00a      	beq.n	800ba5a <prvTaskExitError+0x2a>
	__asm volatile
 800ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba48:	f383 8811 	msr	BASEPRI, r3
 800ba4c:	f3bf 8f6f 	isb	sy
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	60fb      	str	r3, [r7, #12]
}
 800ba56:	bf00      	nop
 800ba58:	e7fe      	b.n	800ba58 <prvTaskExitError+0x28>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	60bb      	str	r3, [r7, #8]
}
 800ba6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba6e:	bf00      	nop
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d0fc      	beq.n	800ba70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba76:	bf00      	nop
 800ba78:	bf00      	nop
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	200000f4 	.word	0x200000f4
	...

0800ba90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <pxCurrentTCBConst2>)
 800ba92:	6819      	ldr	r1, [r3, #0]
 800ba94:	6808      	ldr	r0, [r1, #0]
 800ba96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba9a:	f380 8809 	msr	PSP, r0
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f04f 0000 	mov.w	r0, #0
 800baa6:	f380 8811 	msr	BASEPRI, r0
 800baaa:	4770      	bx	lr
 800baac:	f3af 8000 	nop.w

0800bab0 <pxCurrentTCBConst2>:
 800bab0:	200011a0 	.word	0x200011a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bab4:	bf00      	nop
 800bab6:	bf00      	nop

0800bab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bab8:	4808      	ldr	r0, [pc, #32]	; (800badc <prvPortStartFirstTask+0x24>)
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	6800      	ldr	r0, [r0, #0]
 800babe:	f380 8808 	msr	MSP, r0
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f380 8814 	msr	CONTROL, r0
 800baca:	b662      	cpsie	i
 800bacc:	b661      	cpsie	f
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	df00      	svc	0
 800bad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bada:	bf00      	nop
 800badc:	e000ed08 	.word	0xe000ed08

0800bae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bae6:	4b46      	ldr	r3, [pc, #280]	; (800bc00 <xPortStartScheduler+0x120>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a46      	ldr	r2, [pc, #280]	; (800bc04 <xPortStartScheduler+0x124>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d10a      	bne.n	800bb06 <xPortStartScheduler+0x26>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	613b      	str	r3, [r7, #16]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb06:	4b3e      	ldr	r3, [pc, #248]	; (800bc00 <xPortStartScheduler+0x120>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a3f      	ldr	r2, [pc, #252]	; (800bc08 <xPortStartScheduler+0x128>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d10a      	bne.n	800bb26 <xPortStartScheduler+0x46>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	60fb      	str	r3, [r7, #12]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb26:	4b39      	ldr	r3, [pc, #228]	; (800bc0c <xPortStartScheduler+0x12c>)
 800bb28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	22ff      	movs	r2, #255	; 0xff
 800bb36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	4b31      	ldr	r3, [pc, #196]	; (800bc10 <xPortStartScheduler+0x130>)
 800bb4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb4e:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb50:	2207      	movs	r2, #7
 800bb52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb54:	e009      	b.n	800bb6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb56:	4b2f      	ldr	r3, [pc, #188]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	4a2d      	ldr	r2, [pc, #180]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb6a:	78fb      	ldrb	r3, [r7, #3]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb72:	2b80      	cmp	r3, #128	; 0x80
 800bb74:	d0ef      	beq.n	800bb56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb76:	4b27      	ldr	r3, [pc, #156]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f1c3 0307 	rsb	r3, r3, #7
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d00a      	beq.n	800bb98 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	60bb      	str	r3, [r7, #8]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb98:	4b1e      	ldr	r3, [pc, #120]	; (800bc14 <xPortStartScheduler+0x134>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	021b      	lsls	r3, r3, #8
 800bb9e:	4a1d      	ldr	r2, [pc, #116]	; (800bc14 <xPortStartScheduler+0x134>)
 800bba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bba2:	4b1c      	ldr	r3, [pc, #112]	; (800bc14 <xPortStartScheduler+0x134>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbaa:	4a1a      	ldr	r2, [pc, #104]	; (800bc14 <xPortStartScheduler+0x134>)
 800bbac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bbb6:	4b18      	ldr	r3, [pc, #96]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a17      	ldr	r2, [pc, #92]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbc2:	4b15      	ldr	r3, [pc, #84]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a14      	ldr	r2, [pc, #80]	; (800bc18 <xPortStartScheduler+0x138>)
 800bbc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbce:	f000 f8dd 	bl	800bd8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbd2:	4b12      	ldr	r3, [pc, #72]	; (800bc1c <xPortStartScheduler+0x13c>)
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbd8:	f000 f8fc 	bl	800bdd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbdc:	4b10      	ldr	r3, [pc, #64]	; (800bc20 <xPortStartScheduler+0x140>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a0f      	ldr	r2, [pc, #60]	; (800bc20 <xPortStartScheduler+0x140>)
 800bbe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbe8:	f7ff ff66 	bl	800bab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbec:	f7ff f852 	bl	800ac94 <vTaskSwitchContext>
	prvTaskExitError();
 800bbf0:	f7ff ff1e 	bl	800ba30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3718      	adds	r7, #24
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	e000ed00 	.word	0xe000ed00
 800bc04:	410fc271 	.word	0x410fc271
 800bc08:	410fc270 	.word	0x410fc270
 800bc0c:	e000e400 	.word	0xe000e400
 800bc10:	200017cc 	.word	0x200017cc
 800bc14:	200017d0 	.word	0x200017d0
 800bc18:	e000ed20 	.word	0xe000ed20
 800bc1c:	200000f4 	.word	0x200000f4
 800bc20:	e000ef34 	.word	0xe000ef34

0800bc24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	607b      	str	r3, [r7, #4]
}
 800bc3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <vPortEnterCritical+0x58>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3301      	adds	r3, #1
 800bc44:	4a0d      	ldr	r2, [pc, #52]	; (800bc7c <vPortEnterCritical+0x58>)
 800bc46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc48:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <vPortEnterCritical+0x58>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d10f      	bne.n	800bc70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc50:	4b0b      	ldr	r3, [pc, #44]	; (800bc80 <vPortEnterCritical+0x5c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00a      	beq.n	800bc70 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	603b      	str	r3, [r7, #0]
}
 800bc6c:	bf00      	nop
 800bc6e:	e7fe      	b.n	800bc6e <vPortEnterCritical+0x4a>
	}
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	200000f4 	.word	0x200000f4
 800bc80:	e000ed04 	.word	0xe000ed04

0800bc84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc8a:	4b12      	ldr	r3, [pc, #72]	; (800bcd4 <vPortExitCritical+0x50>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <vPortExitCritical+0x24>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	607b      	str	r3, [r7, #4]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bca8:	4b0a      	ldr	r3, [pc, #40]	; (800bcd4 <vPortExitCritical+0x50>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	4a09      	ldr	r2, [pc, #36]	; (800bcd4 <vPortExitCritical+0x50>)
 800bcb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bcb2:	4b08      	ldr	r3, [pc, #32]	; (800bcd4 <vPortExitCritical+0x50>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <vPortExitCritical+0x42>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f383 8811 	msr	BASEPRI, r3
}
 800bcc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcc6:	bf00      	nop
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	200000f4 	.word	0x200000f4
	...

0800bce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bce0:	f3ef 8009 	mrs	r0, PSP
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <pxCurrentTCBConst>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	f01e 0f10 	tst.w	lr, #16
 800bcf0:	bf08      	it	eq
 800bcf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfa:	6010      	str	r0, [r2, #0]
 800bcfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd04:	f380 8811 	msr	BASEPRI, r0
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f7fe ffc0 	bl	800ac94 <vTaskSwitchContext>
 800bd14:	f04f 0000 	mov.w	r0, #0
 800bd18:	f380 8811 	msr	BASEPRI, r0
 800bd1c:	bc09      	pop	{r0, r3}
 800bd1e:	6819      	ldr	r1, [r3, #0]
 800bd20:	6808      	ldr	r0, [r1, #0]
 800bd22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd26:	f01e 0f10 	tst.w	lr, #16
 800bd2a:	bf08      	it	eq
 800bd2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd30:	f380 8809 	msr	PSP, r0
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	f3af 8000 	nop.w

0800bd40 <pxCurrentTCBConst>:
 800bd40:	200011a0 	.word	0x200011a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop

0800bd48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd62:	f7fe fedd 	bl	800ab20 <xTaskIncrementTick>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd6c:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <xPortSysTickHandler+0x40>)
 800bd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	2300      	movs	r3, #0
 800bd76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	f383 8811 	msr	BASEPRI, r3
}
 800bd7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	e000ed04 	.word	0xe000ed04

0800bd8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd90:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd96:	4b0b      	ldr	r3, [pc, #44]	; (800bdc4 <vPortSetupTimerInterrupt+0x38>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <vPortSetupTimerInterrupt+0x3c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a0a      	ldr	r2, [pc, #40]	; (800bdcc <vPortSetupTimerInterrupt+0x40>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	099b      	lsrs	r3, r3, #6
 800bda8:	4a09      	ldr	r2, [pc, #36]	; (800bdd0 <vPortSetupTimerInterrupt+0x44>)
 800bdaa:	3b01      	subs	r3, #1
 800bdac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdae:	4b04      	ldr	r3, [pc, #16]	; (800bdc0 <vPortSetupTimerInterrupt+0x34>)
 800bdb0:	2207      	movs	r2, #7
 800bdb2:	601a      	str	r2, [r3, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	e000e010 	.word	0xe000e010
 800bdc4:	e000e018 	.word	0xe000e018
 800bdc8:	20000004 	.word	0x20000004
 800bdcc:	10624dd3 	.word	0x10624dd3
 800bdd0:	e000e014 	.word	0xe000e014

0800bdd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bde4 <vPortEnableVFP+0x10>
 800bdd8:	6801      	ldr	r1, [r0, #0]
 800bdda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdde:	6001      	str	r1, [r0, #0]
 800bde0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bde2:	bf00      	nop
 800bde4:	e000ed88 	.word	0xe000ed88

0800bde8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdee:	f3ef 8305 	mrs	r3, IPSR
 800bdf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	2b0f      	cmp	r3, #15
 800bdf8:	d914      	bls.n	800be24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdfa:	4a17      	ldr	r2, [pc, #92]	; (800be58 <vPortValidateInterruptPriority+0x70>)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be04:	4b15      	ldr	r3, [pc, #84]	; (800be5c <vPortValidateInterruptPriority+0x74>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	7afa      	ldrb	r2, [r7, #11]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d20a      	bcs.n	800be24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	607b      	str	r3, [r7, #4]
}
 800be20:	bf00      	nop
 800be22:	e7fe      	b.n	800be22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be24:	4b0e      	ldr	r3, [pc, #56]	; (800be60 <vPortValidateInterruptPriority+0x78>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be2c:	4b0d      	ldr	r3, [pc, #52]	; (800be64 <vPortValidateInterruptPriority+0x7c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d90a      	bls.n	800be4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	603b      	str	r3, [r7, #0]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <vPortValidateInterruptPriority+0x60>
	}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	e000e3f0 	.word	0xe000e3f0
 800be5c:	200017cc 	.word	0x200017cc
 800be60:	e000ed0c 	.word	0xe000ed0c
 800be64:	200017d0 	.word	0x200017d0

0800be68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	; 0x28
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be74:	f7fe fd98 	bl	800a9a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be78:	4b5b      	ldr	r3, [pc, #364]	; (800bfe8 <pvPortMalloc+0x180>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be80:	f000 f920 	bl	800c0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be84:	4b59      	ldr	r3, [pc, #356]	; (800bfec <pvPortMalloc+0x184>)
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4013      	ands	r3, r2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f040 8093 	bne.w	800bfb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01d      	beq.n	800bed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be98:	2208      	movs	r2, #8
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4413      	add	r3, r2
 800be9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d014      	beq.n	800bed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f023 0307 	bic.w	r3, r3, #7
 800beb0:	3308      	adds	r3, #8
 800beb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f003 0307 	and.w	r3, r3, #7
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00a      	beq.n	800bed4 <pvPortMalloc+0x6c>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	617b      	str	r3, [r7, #20]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d06e      	beq.n	800bfb8 <pvPortMalloc+0x150>
 800beda:	4b45      	ldr	r3, [pc, #276]	; (800bff0 <pvPortMalloc+0x188>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d869      	bhi.n	800bfb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bee4:	4b43      	ldr	r3, [pc, #268]	; (800bff4 <pvPortMalloc+0x18c>)
 800bee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bee8:	4b42      	ldr	r3, [pc, #264]	; (800bff4 <pvPortMalloc+0x18c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beee:	e004      	b.n	800befa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d903      	bls.n	800bf0c <pvPortMalloc+0xa4>
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1f1      	bne.n	800bef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf0c:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <pvPortMalloc+0x180>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d050      	beq.n	800bfb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2208      	movs	r2, #8
 800bf1c:	4413      	add	r3, r2
 800bf1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	1ad2      	subs	r2, r2, r3
 800bf30:	2308      	movs	r3, #8
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d91f      	bls.n	800bf78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <pvPortMalloc+0xf8>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	613b      	str	r3, [r7, #16]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	1ad2      	subs	r2, r2, r3
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf72:	69b8      	ldr	r0, [r7, #24]
 800bf74:	f000 f908 	bl	800c188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf78:	4b1d      	ldr	r3, [pc, #116]	; (800bff0 <pvPortMalloc+0x188>)
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	4a1b      	ldr	r2, [pc, #108]	; (800bff0 <pvPortMalloc+0x188>)
 800bf84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf86:	4b1a      	ldr	r3, [pc, #104]	; (800bff0 <pvPortMalloc+0x188>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	4b1b      	ldr	r3, [pc, #108]	; (800bff8 <pvPortMalloc+0x190>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d203      	bcs.n	800bf9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf92:	4b17      	ldr	r3, [pc, #92]	; (800bff0 <pvPortMalloc+0x188>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <pvPortMalloc+0x190>)
 800bf98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <pvPortMalloc+0x184>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	431a      	orrs	r2, r3
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bfae:	4b13      	ldr	r3, [pc, #76]	; (800bffc <pvPortMalloc+0x194>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	4a11      	ldr	r2, [pc, #68]	; (800bffc <pvPortMalloc+0x194>)
 800bfb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfb8:	f7fe fd04 	bl	800a9c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <pvPortMalloc+0x174>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	60fb      	str	r3, [r7, #12]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <pvPortMalloc+0x172>
	return pvReturn;
 800bfdc:	69fb      	ldr	r3, [r7, #28]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3728      	adds	r7, #40	; 0x28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	200053dc 	.word	0x200053dc
 800bfec:	200053f0 	.word	0x200053f0
 800bff0:	200053e0 	.word	0x200053e0
 800bff4:	200053d4 	.word	0x200053d4
 800bff8:	200053e4 	.word	0x200053e4
 800bffc:	200053e8 	.word	0x200053e8

0800c000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d04d      	beq.n	800c0ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c012:	2308      	movs	r3, #8
 800c014:	425b      	negs	r3, r3
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	4413      	add	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	4b24      	ldr	r3, [pc, #144]	; (800c0b8 <vPortFree+0xb8>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4013      	ands	r3, r2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <vPortFree+0x44>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	60fb      	str	r3, [r7, #12]
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00a      	beq.n	800c062 <vPortFree+0x62>
	__asm volatile
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	60bb      	str	r3, [r7, #8]
}
 800c05e:	bf00      	nop
 800c060:	e7fe      	b.n	800c060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <vPortFree+0xb8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01e      	beq.n	800c0ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d11a      	bne.n	800c0ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	4b0e      	ldr	r3, [pc, #56]	; (800c0b8 <vPortFree+0xb8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	43db      	mvns	r3, r3
 800c082:	401a      	ands	r2, r3
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c088:	f7fe fc8e 	bl	800a9a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <vPortFree+0xbc>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4413      	add	r3, r2
 800c096:	4a09      	ldr	r2, [pc, #36]	; (800c0bc <vPortFree+0xbc>)
 800c098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c09a:	6938      	ldr	r0, [r7, #16]
 800c09c:	f000 f874 	bl	800c188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <vPortFree+0xc0>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4a06      	ldr	r2, [pc, #24]	; (800c0c0 <vPortFree+0xc0>)
 800c0a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0aa:	f7fe fc8b 	bl	800a9c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0ae:	bf00      	nop
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	200053f0 	.word	0x200053f0
 800c0bc:	200053e0 	.word	0x200053e0
 800c0c0:	200053ec 	.word	0x200053ec

0800c0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0d0:	4b27      	ldr	r3, [pc, #156]	; (800c170 <prvHeapInit+0xac>)
 800c0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f003 0307 	and.w	r3, r3, #7
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00c      	beq.n	800c0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3307      	adds	r3, #7
 800c0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0307 	bic.w	r3, r3, #7
 800c0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	4a1f      	ldr	r2, [pc, #124]	; (800c170 <prvHeapInit+0xac>)
 800c0f4:	4413      	add	r3, r2
 800c0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0fc:	4a1d      	ldr	r2, [pc, #116]	; (800c174 <prvHeapInit+0xb0>)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c102:	4b1c      	ldr	r3, [pc, #112]	; (800c174 <prvHeapInit+0xb0>)
 800c104:	2200      	movs	r2, #0
 800c106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	4413      	add	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c110:	2208      	movs	r2, #8
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	1a9b      	subs	r3, r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f023 0307 	bic.w	r3, r3, #7
 800c11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	4a15      	ldr	r2, [pc, #84]	; (800c178 <prvHeapInit+0xb4>)
 800c124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c126:	4b14      	ldr	r3, [pc, #80]	; (800c178 <prvHeapInit+0xb4>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2200      	movs	r2, #0
 800c12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c12e:	4b12      	ldr	r3, [pc, #72]	; (800c178 <prvHeapInit+0xb4>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2200      	movs	r2, #0
 800c134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c144:	4b0c      	ldr	r3, [pc, #48]	; (800c178 <prvHeapInit+0xb4>)
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <prvHeapInit+0xb8>)
 800c152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	4a09      	ldr	r2, [pc, #36]	; (800c180 <prvHeapInit+0xbc>)
 800c15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c15c:	4b09      	ldr	r3, [pc, #36]	; (800c184 <prvHeapInit+0xc0>)
 800c15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c162:	601a      	str	r2, [r3, #0]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	200017d4 	.word	0x200017d4
 800c174:	200053d4 	.word	0x200053d4
 800c178:	200053dc 	.word	0x200053dc
 800c17c:	200053e4 	.word	0x200053e4
 800c180:	200053e0 	.word	0x200053e0
 800c184:	200053f0 	.word	0x200053f0

0800c188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c190:	4b28      	ldr	r3, [pc, #160]	; (800c234 <prvInsertBlockIntoFreeList+0xac>)
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e002      	b.n	800c19c <prvInsertBlockIntoFreeList+0x14>
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d8f7      	bhi.n	800c196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d108      	bne.n	800c1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	441a      	add	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	441a      	add	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d118      	bne.n	800c210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b15      	ldr	r3, [pc, #84]	; (800c238 <prvInsertBlockIntoFreeList+0xb0>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d00d      	beq.n	800c206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	441a      	add	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	e008      	b.n	800c218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c206:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <prvInsertBlockIntoFreeList+0xb0>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e003      	b.n	800c218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d002      	beq.n	800c226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c226:	bf00      	nop
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	200053d4 	.word	0x200053d4
 800c238:	200053dc 	.word	0x200053dc

0800c23c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c240:	2201      	movs	r2, #1
 800c242:	4912      	ldr	r1, [pc, #72]	; (800c28c <MX_USB_DEVICE_Init+0x50>)
 800c244:	4812      	ldr	r0, [pc, #72]	; (800c290 <MX_USB_DEVICE_Init+0x54>)
 800c246:	f7fc f8bf 	bl	80083c8 <USBD_Init>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800c250:	4b10      	ldr	r3, [pc, #64]	; (800c294 <MX_USB_DEVICE_Init+0x58>)
 800c252:	2201      	movs	r2, #1
 800c254:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800c256:	f7f4 fc09 	bl	8000a6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c25a:	490f      	ldr	r1, [pc, #60]	; (800c298 <MX_USB_DEVICE_Init+0x5c>)
 800c25c:	480c      	ldr	r0, [pc, #48]	; (800c290 <MX_USB_DEVICE_Init+0x54>)
 800c25e:	f7fc f8e3 	bl	8008428 <USBD_RegisterClass>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d004      	beq.n	800c272 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800c268:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <MX_USB_DEVICE_Init+0x58>)
 800c26a:	2201      	movs	r2, #1
 800c26c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800c26e:	f7f4 fbfd 	bl	8000a6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c272:	4807      	ldr	r0, [pc, #28]	; (800c290 <MX_USB_DEVICE_Init+0x54>)
 800c274:	f7fc f8ff 	bl	8008476 <USBD_Start>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d004      	beq.n	800c288 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800c27e:	4b05      	ldr	r3, [pc, #20]	; (800c294 <MX_USB_DEVICE_Init+0x58>)
 800c280:	2201      	movs	r2, #1
 800c282:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800c284:	f7f4 fbf2 	bl	8000a6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c288:	bf00      	nop
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200000f8 	.word	0x200000f8
 800c290:	200054a0 	.word	0x200054a0
 800c294:	200053f4 	.word	0x200053f4
 800c298:	20000018 	.word	0x20000018

0800c29c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	6039      	str	r1, [r7, #0]
 800c2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2212      	movs	r2, #18
 800c2ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c2ae:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	20000114 	.word	0x20000114

0800c2c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	6039      	str	r1, [r7, #0]
 800c2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c2d2:	4b03      	ldr	r3, [pc, #12]	; (800c2e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	370c      	adds	r7, #12
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	20000128 	.word	0x20000128

0800c2e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2f0:	79fb      	ldrb	r3, [r7, #7]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d105      	bne.n	800c302 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	4907      	ldr	r1, [pc, #28]	; (800c318 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2fa:	4808      	ldr	r0, [pc, #32]	; (800c31c <USBD_FS_ProductStrDescriptor+0x38>)
 800c2fc:	f7fd f945 	bl	800958a <USBD_GetString>
 800c300:	e004      	b.n	800c30c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	4904      	ldr	r1, [pc, #16]	; (800c318 <USBD_FS_ProductStrDescriptor+0x34>)
 800c306:	4805      	ldr	r0, [pc, #20]	; (800c31c <USBD_FS_ProductStrDescriptor+0x38>)
 800c308:	f7fd f93f 	bl	800958a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c30c:	4b02      	ldr	r3, [pc, #8]	; (800c318 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20005770 	.word	0x20005770
 800c31c:	080103d4 	.word	0x080103d4

0800c320 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	4603      	mov	r3, r0
 800c328:	6039      	str	r1, [r7, #0]
 800c32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	4904      	ldr	r1, [pc, #16]	; (800c340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c330:	4804      	ldr	r0, [pc, #16]	; (800c344 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c332:	f7fd f92a 	bl	800958a <USBD_GetString>
  return USBD_StrDesc;
 800c336:	4b02      	ldr	r3, [pc, #8]	; (800c340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	20005770 	.word	0x20005770
 800c344:	080103ec 	.word	0x080103ec

0800c348 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	221a      	movs	r2, #26
 800c358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c35a:	f000 f843 	bl	800c3e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c35e:	4b02      	ldr	r3, [pc, #8]	; (800c368 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	2000012c 	.word	0x2000012c

0800c36c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	6039      	str	r1, [r7, #0]
 800c376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d105      	bne.n	800c38a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	4907      	ldr	r1, [pc, #28]	; (800c3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c382:	4808      	ldr	r0, [pc, #32]	; (800c3a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c384:	f7fd f901 	bl	800958a <USBD_GetString>
 800c388:	e004      	b.n	800c394 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	4904      	ldr	r1, [pc, #16]	; (800c3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c38e:	4805      	ldr	r0, [pc, #20]	; (800c3a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c390:	f7fd f8fb 	bl	800958a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c394:	4b02      	ldr	r3, [pc, #8]	; (800c3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c396:	4618      	mov	r0, r3
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20005770 	.word	0x20005770
 800c3a4:	08010400 	.word	0x08010400

0800c3a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	6039      	str	r1, [r7, #0]
 800c3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c3b4:	79fb      	ldrb	r3, [r7, #7]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	4907      	ldr	r1, [pc, #28]	; (800c3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3be:	4808      	ldr	r0, [pc, #32]	; (800c3e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3c0:	f7fd f8e3 	bl	800958a <USBD_GetString>
 800c3c4:	e004      	b.n	800c3d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	4904      	ldr	r1, [pc, #16]	; (800c3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3ca:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3cc:	f7fd f8dd 	bl	800958a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20005770 	.word	0x20005770
 800c3e0:	0801040c 	.word	0x0801040c

0800c3e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3ea:	4b0f      	ldr	r3, [pc, #60]	; (800c428 <Get_SerialNum+0x44>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c3f0:	4b0e      	ldr	r3, [pc, #56]	; (800c42c <Get_SerialNum+0x48>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	; (800c430 <Get_SerialNum+0x4c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	4413      	add	r3, r2
 800c402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d009      	beq.n	800c41e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c40a:	2208      	movs	r2, #8
 800c40c:	4909      	ldr	r1, [pc, #36]	; (800c434 <Get_SerialNum+0x50>)
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f000 f814 	bl	800c43c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c414:	2204      	movs	r2, #4
 800c416:	4908      	ldr	r1, [pc, #32]	; (800c438 <Get_SerialNum+0x54>)
 800c418:	68b8      	ldr	r0, [r7, #8]
 800c41a:	f000 f80f 	bl	800c43c <IntToUnicode>
  }
}
 800c41e:	bf00      	nop
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	1fff7a10 	.word	0x1fff7a10
 800c42c:	1fff7a14 	.word	0x1fff7a14
 800c430:	1fff7a18 	.word	0x1fff7a18
 800c434:	2000012e 	.word	0x2000012e
 800c438:	2000013e 	.word	0x2000013e

0800c43c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b087      	sub	sp, #28
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	60b9      	str	r1, [r7, #8]
 800c446:	4613      	mov	r3, r2
 800c448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c44e:	2300      	movs	r3, #0
 800c450:	75fb      	strb	r3, [r7, #23]
 800c452:	e027      	b.n	800c4a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	0f1b      	lsrs	r3, r3, #28
 800c458:	2b09      	cmp	r3, #9
 800c45a:	d80b      	bhi.n	800c474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	0f1b      	lsrs	r3, r3, #28
 800c460:	b2da      	uxtb	r2, r3
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4619      	mov	r1, r3
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	440b      	add	r3, r1
 800c46c:	3230      	adds	r2, #48	; 0x30
 800c46e:	b2d2      	uxtb	r2, r2
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	e00a      	b.n	800c48a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	0f1b      	lsrs	r3, r3, #28
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4619      	mov	r1, r3
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	440b      	add	r3, r1
 800c484:	3237      	adds	r2, #55	; 0x37
 800c486:	b2d2      	uxtb	r2, r2
 800c488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	3301      	adds	r3, #1
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	4413      	add	r3, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	75fb      	strb	r3, [r7, #23]
 800c4a4:	7dfa      	ldrb	r2, [r7, #23]
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d3d3      	bcc.n	800c454 <IntToUnicode+0x18>
  }
}
 800c4ac:	bf00      	nop
 800c4ae:	bf00      	nop
 800c4b0:	371c      	adds	r7, #28
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
	...

0800c4bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4c4:	f107 0314 	add.w	r3, r7, #20
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	605a      	str	r2, [r3, #4]
 800c4ce:	609a      	str	r2, [r3, #8]
 800c4d0:	60da      	str	r2, [r3, #12]
 800c4d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c4dc:	d13a      	bne.n	800c554 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4de:	2300      	movs	r3, #0
 800c4e0:	613b      	str	r3, [r7, #16]
 800c4e2:	4b1e      	ldr	r3, [pc, #120]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e6:	4a1d      	ldr	r2, [pc, #116]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c4e8:	f043 0301 	orr.w	r3, r3, #1
 800c4ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c4ee:	4b1b      	ldr	r3, [pc, #108]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c4fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c4fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c500:	2302      	movs	r3, #2
 800c502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c504:	2300      	movs	r3, #0
 800c506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c508:	2303      	movs	r3, #3
 800c50a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c50c:	230a      	movs	r3, #10
 800c50e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c510:	f107 0314 	add.w	r3, r7, #20
 800c514:	4619      	mov	r1, r3
 800c516:	4812      	ldr	r0, [pc, #72]	; (800c560 <HAL_PCD_MspInit+0xa4>)
 800c518:	f7f5 fd7e 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c51c:	4b0f      	ldr	r3, [pc, #60]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	4a0e      	ldr	r2, [pc, #56]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c526:	6353      	str	r3, [r2, #52]	; 0x34
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c530:	4a0a      	ldr	r2, [pc, #40]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c536:	6453      	str	r3, [r2, #68]	; 0x44
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <HAL_PCD_MspInit+0xa0>)
 800c53a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c544:	2200      	movs	r2, #0
 800c546:	2105      	movs	r1, #5
 800c548:	2043      	movs	r0, #67	; 0x43
 800c54a:	f7f5 fd3b 	bl	8001fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c54e:	2043      	movs	r0, #67	; 0x43
 800c550:	f7f5 fd54 	bl	8001ffc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c554:	bf00      	nop
 800c556:	3728      	adds	r7, #40	; 0x28
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	40023800 	.word	0x40023800
 800c560:	40020000 	.word	0x40020000

0800c564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c578:	4619      	mov	r1, r3
 800c57a:	4610      	mov	r0, r2
 800c57c:	f7fb ffc6 	bl	800850c <USBD_LL_SetupStage>
}
 800c580:	bf00      	nop
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	460b      	mov	r3, r1
 800c592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c59a:	78fa      	ldrb	r2, [r7, #3]
 800c59c:	6879      	ldr	r1, [r7, #4]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	1a9b      	subs	r3, r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	440b      	add	r3, r1
 800c5a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	78fb      	ldrb	r3, [r7, #3]
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	f7fc f800 	bl	80085b6 <USBD_LL_DataOutStage>
}
 800c5b6:	bf00      	nop
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c5d0:	78fa      	ldrb	r2, [r7, #3]
 800c5d2:	6879      	ldr	r1, [r7, #4]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	1a9b      	subs	r3, r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	440b      	add	r3, r1
 800c5de:	3348      	adds	r3, #72	; 0x48
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	78fb      	ldrb	r3, [r7, #3]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f7fc f849 	bl	800867c <USBD_LL_DataInStage>
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}

0800c5f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b082      	sub	sp, #8
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c600:	4618      	mov	r0, r3
 800c602:	f7fc f95d 	bl	80088c0 <USBD_LL_SOF>
}
 800c606:	bf00      	nop
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c616:	2301      	movs	r3, #1
 800c618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c622:	2300      	movs	r3, #0
 800c624:	73fb      	strb	r3, [r7, #15]
 800c626:	e008      	b.n	800c63a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d102      	bne.n	800c636 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c630:	2301      	movs	r3, #1
 800c632:	73fb      	strb	r3, [r7, #15]
 800c634:	e001      	b.n	800c63a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c636:	f7f4 fa19 	bl	8000a6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c640:	7bfa      	ldrb	r2, [r7, #15]
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f7fc f8fd 	bl	8008844 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c650:	4618      	mov	r0, r3
 800c652:	f7fc f8a9 	bl	80087a8 <USBD_LL_Reset>
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fc f8f8 	bl	8008864 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c686:	f043 0301 	orr.w	r3, r3, #1
 800c68a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a1b      	ldr	r3, [r3, #32]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d005      	beq.n	800c6a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c694:	4b04      	ldr	r3, [pc, #16]	; (800c6a8 <HAL_PCD_SuspendCallback+0x48>)
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	4a03      	ldr	r2, [pc, #12]	; (800c6a8 <HAL_PCD_SuspendCallback+0x48>)
 800c69a:	f043 0306 	orr.w	r3, r3, #6
 800c69e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	e000ed00 	.word	0xe000ed00

0800c6ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fc f8e8 	bl	8008890 <USBD_LL_Resume>
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6da:	78fa      	ldrb	r2, [r7, #3]
 800c6dc:	4611      	mov	r1, r2
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fc f936 	bl	8008950 <USBD_LL_IsoOUTIncomplete>
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c6fe:	78fa      	ldrb	r2, [r7, #3]
 800c700:	4611      	mov	r1, r2
 800c702:	4618      	mov	r0, r3
 800c704:	f7fc f8fe 	bl	8008904 <USBD_LL_IsoINIncomplete>
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fc f93c 	bl	800899c <USBD_LL_DevConnected>
}
 800c724:	bf00      	nop
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fc f939 	bl	80089b2 <USBD_LL_DevDisconnected>
}
 800c740:	bf00      	nop
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d13c      	bne.n	800c7d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c758:	4a20      	ldr	r2, [pc, #128]	; (800c7dc <USBD_LL_Init+0x94>)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a1e      	ldr	r2, [pc, #120]	; (800c7dc <USBD_LL_Init+0x94>)
 800c764:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c768:	4b1c      	ldr	r3, [pc, #112]	; (800c7dc <USBD_LL_Init+0x94>)
 800c76a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c76e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c770:	4b1a      	ldr	r3, [pc, #104]	; (800c7dc <USBD_LL_Init+0x94>)
 800c772:	2206      	movs	r2, #6
 800c774:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c776:	4b19      	ldr	r3, [pc, #100]	; (800c7dc <USBD_LL_Init+0x94>)
 800c778:	2202      	movs	r2, #2
 800c77a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c77c:	4b17      	ldr	r3, [pc, #92]	; (800c7dc <USBD_LL_Init+0x94>)
 800c77e:	2200      	movs	r2, #0
 800c780:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c782:	4b16      	ldr	r3, [pc, #88]	; (800c7dc <USBD_LL_Init+0x94>)
 800c784:	2202      	movs	r2, #2
 800c786:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c788:	4b14      	ldr	r3, [pc, #80]	; (800c7dc <USBD_LL_Init+0x94>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c78e:	4b13      	ldr	r3, [pc, #76]	; (800c7dc <USBD_LL_Init+0x94>)
 800c790:	2200      	movs	r2, #0
 800c792:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c794:	4b11      	ldr	r3, [pc, #68]	; (800c7dc <USBD_LL_Init+0x94>)
 800c796:	2200      	movs	r2, #0
 800c798:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c79a:	4b10      	ldr	r3, [pc, #64]	; (800c7dc <USBD_LL_Init+0x94>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c7a0:	4b0e      	ldr	r3, [pc, #56]	; (800c7dc <USBD_LL_Init+0x94>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c7a6:	480d      	ldr	r0, [pc, #52]	; (800c7dc <USBD_LL_Init+0x94>)
 800c7a8:	f7f6 fa57 	bl	8002c5a <HAL_PCD_Init>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c7b2:	f7f4 f95b 	bl	8000a6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c7b6:	2180      	movs	r1, #128	; 0x80
 800c7b8:	4808      	ldr	r0, [pc, #32]	; (800c7dc <USBD_LL_Init+0x94>)
 800c7ba:	f7f7 fbd0 	bl	8003f5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c7be:	2240      	movs	r2, #64	; 0x40
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	4806      	ldr	r0, [pc, #24]	; (800c7dc <USBD_LL_Init+0x94>)
 800c7c4:	f7f7 fb84 	bl	8003ed0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c7c8:	2280      	movs	r2, #128	; 0x80
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	4803      	ldr	r0, [pc, #12]	; (800c7dc <USBD_LL_Init+0x94>)
 800c7ce:	f7f7 fb7f 	bl	8003ed0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	20005970 	.word	0x20005970

0800c7e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7f6 fb53 	bl	8002ea2 <HAL_PCD_Start>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f97e 	bl	800cb04 <USBD_Get_USB_Status>
 800c808:	4603      	mov	r3, r0
 800c80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	4608      	mov	r0, r1
 800c820:	4611      	mov	r1, r2
 800c822:	461a      	mov	r2, r3
 800c824:	4603      	mov	r3, r0
 800c826:	70fb      	strb	r3, [r7, #3]
 800c828:	460b      	mov	r3, r1
 800c82a:	70bb      	strb	r3, [r7, #2]
 800c82c:	4613      	mov	r3, r2
 800c82e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c83e:	78bb      	ldrb	r3, [r7, #2]
 800c840:	883a      	ldrh	r2, [r7, #0]
 800c842:	78f9      	ldrb	r1, [r7, #3]
 800c844:	f7f6 ff64 	bl	8003710 <HAL_PCD_EP_Open>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 f958 	bl	800cb04 <USBD_Get_USB_Status>
 800c854:	4603      	mov	r3, r0
 800c856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c858:	7bbb      	ldrb	r3, [r7, #14]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7f6 ffad 	bl	80037e0 <HAL_PCD_EP_Close>
 800c886:	4603      	mov	r3, r0
 800c888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c88a:	7bfb      	ldrb	r3, [r7, #15]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 f939 	bl	800cb04 <USBD_Get_USB_Status>
 800c892:	4603      	mov	r3, r0
 800c894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c896:	7bbb      	ldrb	r3, [r7, #14]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8ba:	78fa      	ldrb	r2, [r7, #3]
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7f7 f86d 	bl	800399e <HAL_PCD_EP_SetStall>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 f91a 	bl	800cb04 <USBD_Get_USB_Status>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8f8:	78fa      	ldrb	r2, [r7, #3]
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f7 f8b2 	bl	8003a66 <HAL_PCD_EP_ClrStall>
 800c902:	4603      	mov	r3, r0
 800c904:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c906:	7bfb      	ldrb	r3, [r7, #15]
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 f8fb 	bl	800cb04 <USBD_Get_USB_Status>
 800c90e:	4603      	mov	r3, r0
 800c910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c912:	7bbb      	ldrb	r3, [r7, #14]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	460b      	mov	r3, r1
 800c926:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c92e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c934:	2b00      	cmp	r3, #0
 800c936:	da0b      	bge.n	800c950 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c93e:	68f9      	ldr	r1, [r7, #12]
 800c940:	4613      	mov	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	440b      	add	r3, r1
 800c94a:	333e      	adds	r3, #62	; 0x3e
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	e00b      	b.n	800c968 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c956:	68f9      	ldr	r1, [r7, #12]
 800c958:	4613      	mov	r3, r2
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	1a9b      	subs	r3, r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	440b      	add	r3, r1
 800c962:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c966:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3714      	adds	r7, #20
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr

0800c974 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	460b      	mov	r3, r1
 800c97e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c980:	2300      	movs	r3, #0
 800c982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c98e:	78fa      	ldrb	r2, [r7, #3]
 800c990:	4611      	mov	r1, r2
 800c992:	4618      	mov	r0, r3
 800c994:	f7f6 fe97 	bl	80036c6 <HAL_PCD_SetAddress>
 800c998:	4603      	mov	r3, r0
 800c99a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f8b0 	bl	800cb04 <USBD_Get_USB_Status>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b086      	sub	sp, #24
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	60f8      	str	r0, [r7, #12]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c9d0:	7af9      	ldrb	r1, [r7, #11]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	f7f6 ff98 	bl	800390a <HAL_PCD_EP_Transmit>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 f88f 	bl	800cb04 <USBD_Get_USB_Status>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	607a      	str	r2, [r7, #4]
 800c9fe:	603b      	str	r3, [r7, #0]
 800ca00:	460b      	mov	r3, r1
 800ca02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca12:	7af9      	ldrb	r1, [r7, #11]
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	f7f6 ff2c 	bl	8003874 <HAL_PCD_EP_Receive>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca20:	7dfb      	ldrb	r3, [r7, #23]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f000 f86e 	bl	800cb04 <USBD_Get_USB_Status>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
	...

0800ca38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d002      	beq.n	800ca50 <HAL_PCDEx_LPM_Callback+0x18>
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d01f      	beq.n	800ca8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ca4e:	e03b      	b.n	800cac8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d007      	beq.n	800ca68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800ca58:	f7f4 f814 	bl	8000a84 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca5c:	4b1c      	ldr	r3, [pc, #112]	; (800cad0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	4a1b      	ldr	r2, [pc, #108]	; (800cad0 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca62:	f023 0306 	bic.w	r3, r3, #6
 800ca66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca7a:	f023 0301 	bic.w	r3, r3, #1
 800ca7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fb ff02 	bl	8008890 <USBD_LL_Resume>
    break;
 800ca8c:	e01c      	b.n	800cac8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	6812      	ldr	r2, [r2, #0]
 800ca9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800caa0:	f043 0301 	orr.w	r3, r3, #1
 800caa4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800caac:	4618      	mov	r0, r3
 800caae:	f7fb fed9 	bl	8008864 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6a1b      	ldr	r3, [r3, #32]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d005      	beq.n	800cac6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800caba:	4b05      	ldr	r3, [pc, #20]	; (800cad0 <HAL_PCDEx_LPM_Callback+0x98>)
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	4a04      	ldr	r2, [pc, #16]	; (800cad0 <HAL_PCDEx_LPM_Callback+0x98>)
 800cac0:	f043 0306 	orr.w	r3, r3, #6
 800cac4:	6113      	str	r3, [r2, #16]
    break;
 800cac6:	bf00      	nop
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	e000ed00 	.word	0xe000ed00

0800cad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cadc:	4b03      	ldr	r3, [pc, #12]	; (800caec <USBD_static_malloc+0x18>)
}
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	200053f8 	.word	0x200053f8

0800caf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]

}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d817      	bhi.n	800cb48 <USBD_Get_USB_Status+0x44>
 800cb18:	a201      	add	r2, pc, #4	; (adr r2, 800cb20 <USBD_Get_USB_Status+0x1c>)
 800cb1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1e:	bf00      	nop
 800cb20:	0800cb31 	.word	0x0800cb31
 800cb24:	0800cb37 	.word	0x0800cb37
 800cb28:	0800cb3d 	.word	0x0800cb3d
 800cb2c:	0800cb43 	.word	0x0800cb43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
    break;
 800cb34:	e00b      	b.n	800cb4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb36:	2303      	movs	r3, #3
 800cb38:	73fb      	strb	r3, [r7, #15]
    break;
 800cb3a:	e008      	b.n	800cb4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb40:	e005      	b.n	800cb4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb42:	2303      	movs	r3, #3
 800cb44:	73fb      	strb	r3, [r7, #15]
    break;
 800cb46:	e002      	b.n	800cb4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb48:	2303      	movs	r3, #3
 800cb4a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb4c:	bf00      	nop
  }
  return usb_status;
 800cb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <_ZN15USBDeviceConfig12ResetHubPortEh>:
                return 0;
        }

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
                return;
        } // Note used for hubs only!
 800cb5c:	4770      	bx	lr

0800cb5e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:
                return false;
        }

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
                return true;
        }
 800cb5e:	2001      	movs	r0, #1
 800cb60:	4770      	bx	lr

0800cb62 <_ZN3BTD10GetAddressEv>:
        };
 800cb62:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 800cb66:	4770      	bx	lr

0800cb68 <_ZN3BTD7isReadyEv>:
        };
 800cb68:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
 800cb6c:	4770      	bx	lr

0800cb6e <_ZN3BTD10DEVCLASSOKEh>:
        };
 800cb6e:	29e0      	cmp	r1, #224	; 0xe0
 800cb70:	bf14      	ite	ne
 800cb72:	2000      	movne	r0, #0
 800cb74:	2001      	moveq	r0, #1
 800cb76:	4770      	bx	lr

0800cb78 <_ZN3BTD8VIDPIDOKEtt>:
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800cb78:	f640 235c 	movw	r3, #2652	; 0xa5c
 800cb7c:	4299      	cmp	r1, r3
 800cb7e:	d019      	beq.n	800cbb4 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800cb80:	f240 530d 	movw	r3, #1293	; 0x50d
 800cb84:	4299      	cmp	r1, r3
 800cb86:	d01e      	beq.n	800cbc6 <_ZN3BTD8VIDPIDOKEtt+0x4e>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800cb88:	6943      	ldr	r3, [r0, #20]
 800cb8a:	b90b      	cbnz	r3, 800cb90 <_ZN3BTD8VIDPIDOKEtt+0x18>
 800cb8c:	8b03      	ldrh	r3, [r0, #24]
 800cb8e:	b31b      	cbz	r3, 800cbd8 <_ZN3BTD8VIDPIDOKEtt+0x60>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800cb90:	f240 534c 	movw	r3, #1356	; 0x54c
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d121      	bne.n	800cbdc <_ZN3BTD8VIDPIDOKEtt+0x64>
 800cb98:	f5b2 7f1a 	cmp.w	r2, #616	; 0x268
 800cb9c:	d020      	beq.n	800cbe0 <_ZN3BTD8VIDPIDOKEtt+0x68>
 800cb9e:	f240 432f 	movw	r3, #1071	; 0x42f
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d01e      	beq.n	800cbe4 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800cba6:	f240 30d5 	movw	r0, #981	; 0x3d5
 800cbaa:	4282      	cmp	r2, r0
 800cbac:	bf14      	ite	ne
 800cbae:	2000      	movne	r0, #0
 800cbb0:	2001      	moveq	r0, #1
 800cbb2:	4770      	bx	lr
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800cbb4:	f242 13e8 	movw	r3, #8680	; 0x21e8
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d00b      	beq.n	800cbd4 <_ZN3BTD8VIDPIDOKEtt+0x5c>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800cbbc:	6943      	ldr	r3, [r0, #20]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d0e4      	beq.n	800cb8c <_ZN3BTD8VIDPIDOKEtt+0x14>
                return false;
 800cbc2:	2000      	movs	r0, #0
        };
 800cbc4:	4770      	bx	lr
                        return true;
 800cbc6:	f240 605a 	movw	r0, #1626	; 0x65a
 800cbca:	4282      	cmp	r2, r0
 800cbcc:	bf14      	ite	ne
 800cbce:	2000      	movne	r0, #0
 800cbd0:	2001      	moveq	r0, #1
 800cbd2:	4770      	bx	lr
 800cbd4:	2001      	movs	r0, #1
 800cbd6:	4770      	bx	lr
                return false;
 800cbd8:	2000      	movs	r0, #0
 800cbda:	4770      	bx	lr
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4770      	bx	lr
                                return true;
 800cbe0:	2001      	movs	r0, #1
 800cbe2:	4770      	bx	lr
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	4770      	bx	lr

0800cbe8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        bPollEnable = false; // Don't start polling before dongle is connected
        simple_pairing_supported = false;
}

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800cbe8:	9a01      	ldr	r2, [sp, #4]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800cbea:	bb23      	cbnz	r3, 800cc36 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x4e>
                return;

        bConfNum = conf;
 800cbec:	f880 105d 	strb.w	r1, [r0, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cbf0:	78d3      	ldrb	r3, [r2, #3]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d01e      	beq.n	800cc38 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x50>
                index = BTD_EVENT_PIPE;
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d11b      	bne.n	800cc36 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x4e>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800cbfe:	f992 1002 	ldrsb.w	r1, [r2, #2]
 800cc02:	2900      	cmp	r1, #0
 800cc04:	bfa8      	it	ge
 800cc06:	2303      	movge	r3, #3
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800cc08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cc0c:	4403      	add	r3, r0
 800cc0e:	7891      	ldrb	r1, [r2, #2]
 800cc10:	f001 010f 	and.w	r1, r1, #15
 800cc14:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800cc18:	8891      	ldrh	r1, [r2, #4]
 800cc1a:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800cc1e:	7993      	ldrb	r3, [r2, #6]
 800cc20:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 800cc24:	429a      	cmp	r2, r3
                pollInterval = pep->bInterval;
 800cc26:	bf38      	it	cc
 800cc28:	f880 3078 	strbcc.w	r3, [r0, #120]	; 0x78
        bNumEP++;
 800cc2c:	f890 305e 	ldrb.w	r3, [r0, #94]	; 0x5e
 800cc30:	3301      	adds	r3, #1
 800cc32:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
}
 800cc36:	4770      	bx	lr
        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800cc38:	f992 3002 	ldrsb.w	r3, [r2, #2]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dafa      	bge.n	800cc36 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x4e>
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800cc40:	f890 1056 	ldrb.w	r1, [r0, #86]	; 0x56
 800cc44:	2301      	movs	r3, #1
 800cc46:	f363 0187 	bfi	r1, r3, #2, #6
 800cc4a:	f880 1056 	strb.w	r1, [r0, #86]	; 0x56
 800cc4e:	e7db      	b.n	800cc08 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x20>

0800cc50 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800cc50:	f1a0 0004 	sub.w	r0, r0, #4
 800cc54:	f7ff bfc8 	b.w	800cbe8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800cc58 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:
        valParser.Initialize(&theBuffer);
        theSkipper.Initialize(&theBuffer);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	4604      	mov	r4, r0
        uint16_t cntdn = (uint16_t)len;
 800cc60:	f8ad 100e 	strh.w	r1, [sp, #14]
        uint8_t *p = (uint8_t*)pbuf;
 800cc64:	9202      	str	r2, [sp, #8]
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
                                                return false;
                        }
                        theBuffer.pValue = varBuffer;
 800cc66:	f100 0620 	add.w	r6, r0, #32
                                        isGoodInterface = true;
 800cc6a:	2701      	movs	r7, #1
 800cc6c:	463d      	mov	r5, r7
 800cc6e:	e054      	b.n	800cd1a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xc2>
                        theBuffer.valueSize = 2;
 800cc70:	2302      	movs	r3, #2
 800cc72:	7223      	strb	r3, [r4, #8]
        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
                pBuf = (uint8_t*)pbuf->pValue;
 800cc74:	f8d4 2009 	ldr.w	r2, [r4, #9]
 800cc78:	6122      	str	r2, [r4, #16]
                countDown = valueSize = pbuf->valueSize;
 800cc7a:	7563      	strb	r3, [r4, #21]
 800cc7c:	7523      	strb	r3, [r4, #20]
                        stateParseDescr = 1;
 800cc7e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800cc82:	f10d 020e 	add.w	r2, sp, #14
 800cc86:	a902      	add	r1, sp, #8
 800cc88:	f104 0010 	add.w	r0, r4, #16
 800cc8c:	f003 fab4 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800cc90:	b370      	cbz	r0, 800ccf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800cc92:	f8d4 3009 	ldr.w	r3, [r4, #9]
 800cc96:	781a      	ldrb	r2, [r3, #0]
 800cc98:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800cc9c:	785b      	ldrb	r3, [r3, #1]
 800cc9e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
                        theBuffer.pValue = varBuffer + 2;
 800cca2:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800cca6:	f8c4 3009 	str.w	r3, [r4, #9]
 800ccaa:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800ccae:	2b04      	cmp	r3, #4
                                        isGoodInterface = false;
 800ccb0:	bf04      	itt	eq
 800ccb2:	2300      	moveq	r3, #0
 800ccb4:	f884 3033 	strbeq.w	r3, [r4, #51]	; 0x33
                        theBuffer.valueSize = dscrLen - 2;
 800ccb8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800ccbc:	3b02      	subs	r3, #2
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	7223      	strb	r3, [r4, #8]
                pBuf = (uint8_t*)pbuf->pValue;
 800ccc2:	f8d4 2009 	ldr.w	r2, [r4, #9]
 800ccc6:	6122      	str	r2, [r4, #16]
                countDown = valueSize = pbuf->valueSize;
 800ccc8:	7563      	strb	r3, [r4, #21]
 800ccca:	7523      	strb	r3, [r4, #20]
                        stateParseDescr = 4;
 800cccc:	2304      	movs	r3, #4
 800ccce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                        switch(dscrType) {
 800ccd2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	d034      	beq.n	800cd44 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xec>
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	d05e      	beq.n	800cd9c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x144>
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d009      	beq.n	800ccf6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x9e>
                pBuf = (uint8_t*)pbuf->pValue;
                countDown = 0;
        };

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
                switch(nStage) {
 800cce2:	7f23      	ldrb	r3, [r4, #28]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d078      	beq.n	800cdda <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x182>
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d07b      	beq.n	800cde4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18c>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800ccec:	8be3      	ldrh	r3, [r4, #30]
 800ccee:	b17b      	cbz	r3, 800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
}
 800ccf0:	b004      	add	sp, #16
 800ccf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                        if(!valParser.Parse(pp, pcntdn))
 800ccf6:	f10d 020e 	add.w	r2, sp, #14
 800ccfa:	a902      	add	r1, sp, #8
 800ccfc:	f104 0010 	add.w	r0, r4, #16
 800cd00:	f003 fa7a 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d0f3      	beq.n	800ccf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                                        confValue = ucd->bConfigurationValue;
 800cd08:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cd0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        theBuffer.pValue = varBuffer;
 800cd10:	f8c4 6009 	str.w	r6, [r4, #9]
                        stateParseDescr = 0;
 800cd14:	2300      	movs	r3, #0
 800cd16:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        while(cntdn)
 800cd1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0e6      	beq.n	800ccf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800cd22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	d8f7      	bhi.n	800cd1a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xc2>
 800cd2a:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xd8>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cc71 	.word	0x0800cc71
 800cd34:	0800cc83 	.word	0x0800cc83
 800cd38:	0800cca3 	.word	0x0800cca3
 800cd3c:	0800ccab 	.word	0x0800ccab
 800cd40:	0800ccd3 	.word	0x0800ccd3
                                        if(!valParser.Parse(pp, pcntdn))
 800cd44:	f10d 020e 	add.w	r2, sp, #14
 800cd48:	a902      	add	r1, sp, #8
 800cd4a:	f104 0010 	add.w	r0, r4, #16
 800cd4e:	f003 fa53 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d0cc      	beq.n	800ccf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800cd56:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cd5a:	2be0      	cmp	r3, #224	; 0xe0
 800cd5c:	d1d8      	bne.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800cd5e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d1d4      	bne.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        if(UseOr) {
 800cd66:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cd6a:	b193      	cbz	r3, 800cd92 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x13a>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800cd6c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d0cd      	beq.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        isGoodInterface = true;
 800cd74:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800cd78:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800cd7c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800cd80:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800cd84:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800cd88:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800cd8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                                        break;
 800cd90:	e7be      	b.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800cd92:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d1ba      	bne.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
 800cd9a:	e7eb      	b.n	800cd74 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x11c>
                                        if(!valParser.Parse(pp, pcntdn))
 800cd9c:	f10d 020e 	add.w	r2, sp, #14
 800cda0:	a902      	add	r1, sp, #8
 800cda2:	f104 0010 	add.w	r0, r4, #16
 800cda6:	f003 fa27 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d0a0      	beq.n	800ccf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                                        if(isGoodInterface)
 800cdae:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0ac      	beq.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                                if(theXtractor)
 800cdb6:	6860      	ldr	r0, [r4, #4]
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d0a9      	beq.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800cdbc:	6803      	ldr	r3, [r0, #0]
 800cdbe:	9601      	str	r6, [sp, #4]
 800cdc0:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800cdc4:	9200      	str	r2, [sp, #0]
 800cdc6:	f8d3 8000 	ldr.w	r8, [r3]
 800cdca:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800cdce:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800cdd2:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800cdd6:	47c0      	blx	r8
 800cdd8:	e79a      	b.n	800cd10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800cdda:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800cdde:	3b02      	subs	r3, #2
                        case 0:
                                countDown = bytes_to_skip;
 800cde0:	83e3      	strh	r3, [r4, #30]
                                nStage++;
 800cde2:	7727      	strb	r7, [r4, #28]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800cde4:	8be3      	ldrh	r3, [r4, #30]
 800cde6:	b183      	cbz	r3, 800ce0a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1b2>
 800cde8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800cdec:	9902      	ldr	r1, [sp, #8]
 800cdee:	2000      	movs	r0, #0
 800cdf0:	b172      	cbz	r2, 800ce10 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1b8>
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	83e3      	strh	r3, [r4, #30]
 800cdf8:	3101      	adds	r1, #1
 800cdfa:	3a01      	subs	r2, #1
 800cdfc:	b292      	uxth	r2, r2
 800cdfe:	4628      	mov	r0, r5
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d1f5      	bne.n	800cdf0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x198>
 800ce04:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ce08:	9102      	str	r1, [sp, #8]

                                if(!countDown)
                                        nStage = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	7723      	strb	r3, [r4, #28]
 800ce0e:	e76d      	b.n	800ccec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x94>
 800ce10:	b118      	cbz	r0, 800ce1a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1c2>
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ce18:	9102      	str	r1, [sp, #8]
                                if(!countDown)
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f47f af66 	bne.w	800ccec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x94>
 800ce20:	e7f3      	b.n	800ce0a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1b2>
 800ce22:	bf00      	nop

0800ce24 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800ce24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	4604      	mov	r4, r0
        uint16_t cntdn = (uint16_t)len;
 800ce2c:	f8ad 100e 	strh.w	r1, [sp, #14]
        uint8_t *p = (uint8_t*)pbuf;
 800ce30:	9202      	str	r2, [sp, #8]
                        theBuffer.pValue = varBuffer;
 800ce32:	f100 0620 	add.w	r6, r0, #32
                                        isGoodInterface = true;
 800ce36:	2701      	movs	r7, #1
 800ce38:	463d      	mov	r5, r7
 800ce3a:	e054      	b.n	800cee6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xc2>
                        theBuffer.valueSize = 2;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	7223      	strb	r3, [r4, #8]
                pBuf = (uint8_t*)pbuf->pValue;
 800ce40:	f8d4 2009 	ldr.w	r2, [r4, #9]
 800ce44:	6122      	str	r2, [r4, #16]
                countDown = valueSize = pbuf->valueSize;
 800ce46:	7563      	strb	r3, [r4, #21]
 800ce48:	7523      	strb	r3, [r4, #20]
                        stateParseDescr = 1;
 800ce4a:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800ce4e:	f10d 020e 	add.w	r2, sp, #14
 800ce52:	a902      	add	r1, sp, #8
 800ce54:	f104 0010 	add.w	r0, r4, #16
 800ce58:	f003 f9ce 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ce5c:	b370      	cbz	r0, 800cebc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800ce5e:	f8d4 3009 	ldr.w	r3, [r4, #9]
 800ce62:	781a      	ldrb	r2, [r3, #0]
 800ce64:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
                        theBuffer.pValue = varBuffer + 2;
 800ce6e:	f104 0322 	add.w	r3, r4, #34	; 0x22
 800ce72:	f8c4 3009 	str.w	r3, [r4, #9]
 800ce76:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800ce7a:	2b04      	cmp	r3, #4
                                        isGoodInterface = false;
 800ce7c:	bf04      	itt	eq
 800ce7e:	2300      	moveq	r3, #0
 800ce80:	f884 3033 	strbeq.w	r3, [r4, #51]	; 0x33
                        theBuffer.valueSize = dscrLen - 2;
 800ce84:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800ce88:	3b02      	subs	r3, #2
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	7223      	strb	r3, [r4, #8]
                pBuf = (uint8_t*)pbuf->pValue;
 800ce8e:	f8d4 2009 	ldr.w	r2, [r4, #9]
 800ce92:	6122      	str	r2, [r4, #16]
                countDown = valueSize = pbuf->valueSize;
 800ce94:	7563      	strb	r3, [r4, #21]
 800ce96:	7523      	strb	r3, [r4, #20]
                        stateParseDescr = 4;
 800ce98:	2304      	movs	r3, #4
 800ce9a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                        switch(dscrType) {
 800ce9e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	d034      	beq.n	800cf10 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xec>
 800cea6:	2b05      	cmp	r3, #5
 800cea8:	d05e      	beq.n	800cf68 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x144>
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d009      	beq.n	800cec2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x9e>
                switch(nStage) {
 800ceae:	7f23      	ldrb	r3, [r4, #28]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d078      	beq.n	800cfa6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x182>
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d07b      	beq.n	800cfb0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18c>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800ceb8:	8be3      	ldrh	r3, [r4, #30]
 800ceba:	b17b      	cbz	r3, 800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
}
 800cebc:	b004      	add	sp, #16
 800cebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                        if(!valParser.Parse(pp, pcntdn))
 800cec2:	f10d 020e 	add.w	r2, sp, #14
 800cec6:	a902      	add	r1, sp, #8
 800cec8:	f104 0010 	add.w	r0, r4, #16
 800cecc:	f003 f994 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d0f3      	beq.n	800cebc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                                        confValue = ucd->bConfigurationValue;
 800ced4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ced8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                        theBuffer.pValue = varBuffer;
 800cedc:	f8c4 6009 	str.w	r6, [r4, #9]
                        stateParseDescr = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        while(cntdn)
 800cee6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d0e6      	beq.n	800cebc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800ceee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	d8f7      	bhi.n	800cee6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xc2>
 800cef6:	a201      	add	r2, pc, #4	; (adr r2, 800cefc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xd8>)
 800cef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefc:	0800ce3d 	.word	0x0800ce3d
 800cf00:	0800ce4f 	.word	0x0800ce4f
 800cf04:	0800ce6f 	.word	0x0800ce6f
 800cf08:	0800ce77 	.word	0x0800ce77
 800cf0c:	0800ce9f 	.word	0x0800ce9f
                                        if(!valParser.Parse(pp, pcntdn))
 800cf10:	f10d 020e 	add.w	r2, sp, #14
 800cf14:	a902      	add	r1, sp, #8
 800cf16:	f104 0010 	add.w	r0, r4, #16
 800cf1a:	f003 f96d 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d0cc      	beq.n	800cebc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800cf22:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cf26:	2bff      	cmp	r3, #255	; 0xff
 800cf28:	d1d8      	bne.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800cf2a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d1d4      	bne.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        if(UseOr) {
 800cf32:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cf36:	b193      	cbz	r3, 800cf5e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x13a>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800cf38:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d0cd      	beq.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        isGoodInterface = true;
 800cf40:	f884 7033 	strb.w	r7, [r4, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800cf44:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800cf48:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800cf4c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800cf50:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800cf54:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800cf58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
                                        break;
 800cf5c:	e7be      	b.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800cf5e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d1ba      	bne.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
 800cf66:	e7eb      	b.n	800cf40 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x11c>
                                        if(!valParser.Parse(pp, pcntdn))
 800cf68:	f10d 020e 	add.w	r2, sp, #14
 800cf6c:	a902      	add	r1, sp, #8
 800cf6e:	f104 0010 	add.w	r0, r4, #16
 800cf72:	f003 f941 	bl	80101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d0a0      	beq.n	800cebc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x98>
                                        if(isGoodInterface)
 800cf7a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0ac      	beq.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                                if(theXtractor)
 800cf82:	6860      	ldr	r0, [r4, #4]
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d0a9      	beq.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800cf88:	6803      	ldr	r3, [r0, #0]
 800cf8a:	9601      	str	r6, [sp, #4]
 800cf8c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800cf90:	9200      	str	r2, [sp, #0]
 800cf92:	f8d3 8000 	ldr.w	r8, [r3]
 800cf96:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800cf9a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800cf9e:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800cfa2:	47c0      	blx	r8
 800cfa4:	e79a      	b.n	800cedc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0xb8>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800cfa6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800cfaa:	3b02      	subs	r3, #2
                                countDown = bytes_to_skip;
 800cfac:	83e3      	strh	r3, [r4, #30]
                                nStage++;
 800cfae:	7727      	strb	r7, [r4, #28]
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800cfb0:	8be3      	ldrh	r3, [r4, #30]
 800cfb2:	b183      	cbz	r3, 800cfd6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1b2>
 800cfb4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800cfb8:	9902      	ldr	r1, [sp, #8]
 800cfba:	2000      	movs	r0, #0
 800cfbc:	b172      	cbz	r2, 800cfdc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1b8>
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	83e3      	strh	r3, [r4, #30]
 800cfc4:	3101      	adds	r1, #1
 800cfc6:	3a01      	subs	r2, #1
 800cfc8:	b292      	uxth	r2, r2
 800cfca:	4628      	mov	r0, r5
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f5      	bne.n	800cfbc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x198>
 800cfd0:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cfd4:	9102      	str	r1, [sp, #8]
                                        nStage = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	7723      	strb	r3, [r4, #28]
 800cfda:	e76d      	b.n	800ceb8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x94>
 800cfdc:	b118      	cbz	r0, 800cfe6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1c2>
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cfe4:	9102      	str	r1, [sp, #8]
                                if(!countDown)
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f47f af66 	bne.w	800ceb8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x94>
 800cfec:	e7f3      	b.n	800cfd6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x1b2>
 800cfee:	bf00      	nop

0800cff0 <_ZN3BTD10InitializeEv>:
void BTD::Initialize() {
 800cff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff2:	4604      	mov	r4, r0
 800cff4:	4601      	mov	r1, r0
 800cff6:	2300      	movs	r3, #0
                epInfo[i].epAddr = 0;
 800cff8:	461e      	mov	r6, r3
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800cffa:	f04f 0e08 	mov.w	lr, #8
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800cffe:	f04f 0c0f 	mov.w	ip, #15
 800d002:	2701      	movs	r7, #1
 800d004:	e030      	b.n	800d068 <_ZN3BTD10InitializeEv+0x78>
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800d006:	42b5      	cmp	r5, r6
 800d008:	d007      	beq.n	800d01a <_ZN3BTD10InitializeEv+0x2a>
                if(btService[i])
 800d00a:	f855 0b04 	ldr.w	r0, [r5], #4
 800d00e:	2800      	cmp	r0, #0
 800d010:	d0f9      	beq.n	800d006 <_ZN3BTD10InitializeEv+0x16>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800d012:	6803      	ldr	r3, [r0, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	4798      	blx	r3
 800d018:	e7f5      	b.n	800d006 <_ZN3BTD10InitializeEv+0x16>
        connectToWii = false;
 800d01a:	2300      	movs	r3, #0
 800d01c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        incomingWii = false;
 800d020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        connectToHIDDevice = false;
 800d024:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        incomingHIDDevice = false;
 800d028:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
        incomingPSController = false;
 800d02c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800d030:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800d034:	2201      	movs	r2, #1
 800d036:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800d03a:	6623      	str	r3, [r4, #96]	; 0x60
        pollInterval = 0;
 800d03c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800d040:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        simple_pairing_supported = false;
 800d044:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
}
 800d048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800d04a:	f881 e052 	strb.w	lr, [r1, #82]	; 0x52
                epInfo[i].bmSndToggle = 0;
 800d04e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d052:	4422      	add	r2, r4
 800d054:	f892 0053 	ldrb.w	r0, [r2, #83]	; 0x53
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800d058:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800d05c:	f36c 0087 	bfi	r0, ip, #2, #6
 800d060:	f882 0053 	strb.w	r0, [r2, #83]	; 0x53
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800d064:	3301      	adds	r3, #1
 800d066:	3103      	adds	r1, #3
                epInfo[i].epAddr = 0;
 800d068:	f881 6051 	strb.w	r6, [r1, #81]	; 0x51
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800d06c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 800d070:	d0eb      	beq.n	800d04a <_ZN3BTD10InitializeEv+0x5a>
 800d072:	f881 6052 	strb.w	r6, [r1, #82]	; 0x52
                epInfo[i].bmSndToggle = 0;
 800d076:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d07a:	4420      	add	r0, r4
 800d07c:	f890 5053 	ldrb.w	r5, [r0, #83]	; 0x53
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800d080:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800d084:	f367 0587 	bfi	r5, r7, #2, #6
 800d088:	f880 5053 	strb.w	r5, [r0, #83]	; 0x53
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800d08c:	3201      	adds	r2, #1
 800d08e:	b2d2      	uxtb	r2, r2
 800d090:	2a03      	cmp	r2, #3
 800d092:	d9e7      	bls.n	800d064 <_ZN3BTD10InitializeEv+0x74>
 800d094:	f104 0564 	add.w	r5, r4, #100	; 0x64
 800d098:	f104 0674 	add.w	r6, r4, #116	; 0x74
 800d09c:	e7b5      	b.n	800d00a <_ZN3BTD10InitializeEv+0x1a>
	...

0800d0a0 <_ZN3BTDC1EP3USB>:
BTD::BTD(USB *p) :
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	4604      	mov	r4, r0
bPollEnable(false) // Don't start polling before dongle is connected
 800d0a4:	4b1a      	ldr	r3, [pc, #104]	; (800d110 <_ZN3BTDC1EP3USB+0x70>)
 800d0a6:	f103 0208 	add.w	r2, r3, #8
 800d0aa:	6002      	str	r2, [r0, #0]
 800d0ac:	333c      	adds	r3, #60	; 0x3c
 800d0ae:	6043      	str	r3, [r0, #4]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800d0b6:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800d0ba:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 800d0be:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
 800d0c2:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
 800d0c6:	64c1      	str	r1, [r0, #76]	; 0x4c
 800d0c8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f880 205e 	strb.w	r2, [r0, #94]	; 0x5e
 800d0d2:	6603      	str	r3, [r0, #96]	; 0x60
 800d0d4:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 800d0d8:	f880 3079 	strb.w	r3, [r0, #121]	; 0x79
 800d0dc:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
                btService[i] = NULL;
 800d0e0:	6643      	str	r3, [r0, #100]	; 0x64
 800d0e2:	6683      	str	r3, [r0, #104]	; 0x68
 800d0e4:	66c3      	str	r3, [r0, #108]	; 0x6c
 800d0e6:	6703      	str	r3, [r0, #112]	; 0x70
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800d0e8:	f7ff ff82 	bl	800cff0 <_ZN3BTD10InitializeEv>
        if(pUsb) // Register in USB subsystem
 800d0ec:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800d0ee:	b14d      	cbz	r5, 800d104 <_ZN3BTDC1EP3USB+0x64>
        AddressPool& GetAddressPool() {
                return (AddressPool&)addrPool;
        };

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d0f0:	f105 0274 	add.w	r2, r5, #116	; 0x74
 800d0f4:	2300      	movs	r3, #0
                        if(!devConfig[i]) {
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800d0fc:	b121      	cbz	r1, 800d108 <_ZN3BTDC1EP3USB+0x68>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d0fe:	3301      	adds	r3, #1
 800d100:	2b10      	cmp	r3, #16
 800d102:	d1f8      	bne.n	800d0f6 <_ZN3BTDC1EP3USB+0x56>
}
 800d104:	4620      	mov	r0, r4
 800d106:	bd38      	pop	{r3, r4, r5, pc}
                                devConfig[i] = pdev;
 800d108:	301e      	adds	r0, #30
 800d10a:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
                                return 0;
 800d10e:	e7f9      	b.n	800d104 <_ZN3BTDC1EP3USB+0x64>
 800d110:	08011458 	.word	0x08011458

0800d114 <_ZN3BTD15ConfigureDeviceEhhb>:
uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d118:	b088      	sub	sp, #32
 800d11a:	4604      	mov	r4, r0
 800d11c:	460e      	mov	r6, r1
 800d11e:	4617      	mov	r7, r2
 800d120:	4699      	mov	r9, r3
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800d122:	f7ff ff65 	bl	800cff0 <_ZN3BTD10InitializeEv>
        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800d126:	f8d4 804c 	ldr.w	r8, [r4, #76]	; 0x4c
        if(bAddress) { // Check if address has already been assigned to an instance
 800d12a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 800d12e:	2800      	cmp	r0, #0
 800d130:	d157      	bne.n	800d1e2 <_ZN3BTD15ConfigureDeviceEhhb+0xce>
        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800d132:	f8d8 3000 	ldr.w	r3, [r8]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2100      	movs	r1, #0
 800d13a:	4640      	mov	r0, r8
 800d13c:	4798      	blx	r3
        if(!p) {
 800d13e:	4605      	mov	r5, r0
 800d140:	2800      	cmp	r0, #0
 800d142:	d050      	beq.n	800d1e6 <_ZN3BTD15ConfigureDeviceEhhb+0xd2>
        if(!p->epinfo) {
 800d144:	f8d0 a000 	ldr.w	sl, [r0]
 800d148:	f1ba 0f00 	cmp.w	sl, #0
 800d14c:	d04d      	beq.n	800d1ea <_ZN3BTD15ConfigureDeviceEhhb+0xd6>
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800d14e:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800d152:	6003      	str	r3, [r0, #0]
        p->lowspeed = lowspeed;
 800d154:	f880 9006 	strb.w	r9, [r0, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800d158:	ab03      	add	r3, sp, #12
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	2312      	movs	r3, #18
 800d15e:	2200      	movs	r2, #0
 800d160:	4611      	mov	r1, r2
 800d162:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d164:	f002 fd02 	bl	800fb6c <_ZN3USB11getDevDescrEhhtPh>
        p->epinfo = oldep_ptr; // Restore p->epinfo
 800d168:	f8c5 a000 	str.w	sl, [r5]
        if(rcode)
 800d16c:	4605      	mov	r5, r0
 800d16e:	bb18      	cbnz	r0, 800d1b8 <_ZN3BTD15ConfigureDeviceEhhb+0xa4>
        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800d170:	f8d8 3000 	ldr.w	r3, [r8]
 800d174:	685d      	ldr	r5, [r3, #4]
 800d176:	463b      	mov	r3, r7
 800d178:	2200      	movs	r2, #0
 800d17a:	4631      	mov	r1, r6
 800d17c:	4640      	mov	r0, r8
 800d17e:	47a8      	blx	r5
 800d180:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        if(!bAddress) {
 800d184:	b398      	cbz	r0, 800d1ee <_ZN3BTD15ConfigureDeviceEhhb+0xda>
        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800d186:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d18a:	2b09      	cmp	r3, #9
 800d18c:	d01d      	beq.n	800d1ca <_ZN3BTD15ConfigureDeviceEhhb+0xb6>
        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800d18e:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800d192:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800d196:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d19a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        VID = udd->idVendor;
 800d19e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d1a2:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
        PID = udd->idProduct;
 800d1a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800d1aa:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800d1ae:	25e0      	movs	r5, #224	; 0xe0
};
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	b008      	add	sp, #32
 800d1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                rcode = USB_ERROR_FailGetDevDescr;
 800d1b8:	280d      	cmp	r0, #13
 800d1ba:	bf0c      	ite	eq
 800d1bc:	4605      	moveq	r5, r0
 800d1be:	25e1      	movne	r5, #225	; 0xe1
        Release();
 800d1c0:	6823      	ldr	r3, [r4, #0]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	4798      	blx	r3
        return rcode;
 800d1c8:	e7f2      	b.n	800d1b0 <_ZN3BTD15ConfigureDeviceEhhb+0x9c>
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d1d2:	f002 fd19 	bl	800fc08 <_ZN3USB7setAddrEhhh>
        Release();
 800d1d6:	6823      	ldr	r3, [r4, #0]
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	4620      	mov	r0, r4
 800d1dc:	4798      	blx	r3
        return rcode;
 800d1de:	25d1      	movs	r5, #209	; 0xd1
 800d1e0:	e7e6      	b.n	800d1b0 <_ZN3BTD15ConfigureDeviceEhhb+0x9c>
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800d1e2:	25d9      	movs	r5, #217	; 0xd9
 800d1e4:	e7e4      	b.n	800d1b0 <_ZN3BTD15ConfigureDeviceEhhb+0x9c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800d1e6:	25d6      	movs	r5, #214	; 0xd6
 800d1e8:	e7e2      	b.n	800d1b0 <_ZN3BTD15ConfigureDeviceEhhb+0x9c>
                return USB_ERROR_EPINFO_IS_NULL;
 800d1ea:	25d7      	movs	r5, #215	; 0xd7
 800d1ec:	e7e0      	b.n	800d1b0 <_ZN3BTD15ConfigureDeviceEhhb+0x9c>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800d1ee:	25d4      	movs	r5, #212	; 0xd4
 800d1f0:	e7de      	b.n	800d1b0 <_ZN3BTD15ConfigureDeviceEhhb+0x9c>

0800d1f2 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800d1f2:	b510      	push	{r4, lr}
 800d1f4:	4604      	mov	r4, r0
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800d1f6:	f7ff fefb 	bl	800cff0 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800d1fa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d1fc:	6803      	ldr	r3, [r0, #0]
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800d204:	4798      	blx	r3
        return 0;
}
 800d206:	2000      	movs	r0, #0
 800d208:	bd10      	pop	{r4, pc}

0800d20a <_ZN3BTD14ACL_event_taskEv>:
                default:
                        break;
        }
}

void BTD::ACL_event_task() {
 800d20a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20c:	b085      	sub	sp, #20
 800d20e:	4604      	mov	r4, r0
        uint16_t length = BULK_MAXPKTSIZE;
 800d210:	2340      	movs	r3, #64	; 0x40
 800d212:	f8ad 300e 	strh.w	r3, [sp, #14]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800d216:	f100 06c9 	add.w	r6, r0, #201	; 0xc9
 800d21a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	9600      	str	r6, [sp, #0]
 800d222:	f10d 030e 	add.w	r3, sp, #14
 800d226:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
 800d22a:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800d22e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d230:	f002 faa9 	bl	800f786 <_ZN3USB10inTransferEhhPtPhh>

        if(!rcode) { // Check for errors
 800d234:	b118      	cbz	r0, 800d23e <_ZN3BTD14ACL_event_taskEv+0x34>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d236:	f104 0564 	add.w	r5, r4, #100	; 0x64
 800d23a:	3474      	adds	r4, #116	; 0x74
 800d23c:	e015      	b.n	800d26a <_ZN3BTD14ACL_event_taskEv+0x60>
                if(length > 0) { // Check if any data was read
 800d23e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d0f7      	beq.n	800d236 <_ZN3BTD14ACL_event_taskEv+0x2c>
 800d246:	f104 0564 	add.w	r5, r4, #100	; 0x64
 800d24a:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800d24e:	e001      	b.n	800d254 <_ZN3BTD14ACL_event_taskEv+0x4a>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800d250:	42bd      	cmp	r5, r7
 800d252:	d0f0      	beq.n	800d236 <_ZN3BTD14ACL_event_taskEv+0x2c>
                                if(btService[i])
 800d254:	f855 0b04 	ldr.w	r0, [r5], #4
 800d258:	2800      	cmp	r0, #0
 800d25a:	d0f9      	beq.n	800d250 <_ZN3BTD14ACL_event_taskEv+0x46>
                                        btService[i]->ACLData(l2capinbuf);
 800d25c:	6803      	ldr	r3, [r0, #0]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4631      	mov	r1, r6
 800d262:	4798      	blx	r3
 800d264:	e7f4      	b.n	800d250 <_ZN3BTD14ACL_event_taskEv+0x46>
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800d266:	42a5      	cmp	r5, r4
 800d268:	d007      	beq.n	800d27a <_ZN3BTD14ACL_event_taskEv+0x70>
                if(btService[i])
 800d26a:	f855 0b04 	ldr.w	r0, [r5], #4
 800d26e:	2800      	cmp	r0, #0
 800d270:	d0f9      	beq.n	800d266 <_ZN3BTD14ACL_event_taskEv+0x5c>
                        btService[i]->Run();
 800d272:	6803      	ldr	r3, [r0, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	4798      	blx	r3
 800d278:	e7f5      	b.n	800d266 <_ZN3BTD14ACL_event_taskEv+0x5c>
}
 800d27a:	b005      	add	sp, #20
 800d27c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d27e <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800d27e:	b500      	push	{lr}
 800d280:	b089      	sub	sp, #36	; 0x24
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800d282:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d286:	f023 0301 	bic.w	r3, r3, #1
 800d28a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800d28e:	2300      	movs	r3, #0
 800d290:	9307      	str	r3, [sp, #28]
 800d292:	9106      	str	r1, [sp, #24]
 800d294:	9205      	str	r2, [sp, #20]
 800d296:	9204      	str	r2, [sp, #16]
 800d298:	9303      	str	r3, [sp, #12]
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	9301      	str	r3, [sp, #4]
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	2320      	movs	r3, #32
 800d2a2:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 800d2a6:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800d2aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d2ac:	f002 fba7 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800d2b0:	b009      	add	sp, #36	; 0x24
 800d2b2:	f85d fb04 	ldr.w	pc, [sp], #4

0800d2b6 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800d2b6:	b510      	push	{r4, lr}
 800d2b8:	4601      	mov	r1, r0
        hci_event_flag = 0; // Clear all the flags
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800d2c6:	240c      	movs	r4, #12
 800d2c8:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800d2cc:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800d2d0:	3189      	adds	r1, #137	; 0x89
 800d2d2:	f7ff ffd4 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d2d6:	bd10      	pop	{r4, pc}

0800d2d8 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800d2d8:	b508      	push	{r3, lr}
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800d2da:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d2de:	f023 0310 	bic.w	r3, r3, #16
 800d2e2:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800d2e6:	231a      	movs	r3, #26
 800d2e8:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800d2ec:	230c      	movs	r3, #12
 800d2ee:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        if(btdName != NULL)
 800d2f8:	68c3      	ldr	r3, [r0, #12]
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	bf14      	ite	ne
 800d2fe:	2303      	movne	r3, #3
 800d300:	2302      	moveq	r3, #2
 800d302:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800d306:	2204      	movs	r2, #4
 800d308:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800d30c:	f7ff ffb7 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d310:	bd08      	pop	{r3, pc}

0800d312 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800d312:	b508      	push	{r3, lr}
 800d314:	4601      	mov	r1, r0
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800d316:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d31a:	f023 0320 	bic.w	r3, r3, #32
 800d31e:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800d322:	2309      	movs	r3, #9
 800d324:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800d328:	2310      	movs	r3, #16
 800d32a:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800d32e:	2300      	movs	r3, #0
 800d330:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800d334:	2203      	movs	r2, #3
 800d336:	3189      	adds	r1, #137	; 0x89
 800d338:	f7ff ffa1 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d33c:	bd08      	pop	{r3, pc}

0800d33e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800d33e:	b508      	push	{r3, lr}
 800d340:	4601      	mov	r1, r0
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800d342:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d34a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800d34e:	2301      	movs	r3, #1
 800d350:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800d354:	2310      	movs	r3, #16
 800d356:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800d35a:	2300      	movs	r3, #0
 800d35c:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800d360:	2203      	movs	r2, #3
 800d362:	3189      	adds	r1, #137	; 0x89
 800d364:	f7ff ff8b 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d368:	bd08      	pop	{r3, pc}

0800d36a <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800d36a:	b510      	push	{r4, lr}
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d36c:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
 800d370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d374:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800d378:	2204      	movs	r2, #4
 800d37a:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800d37e:	2410      	movs	r4, #16
 800d380:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800d384:	2401      	movs	r4, #1
 800d386:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
        hcibuf[3] = page_number;
 800d38a:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800d38e:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800d392:	f7ff ff74 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d396:	bd10      	pop	{r4, pc}

0800d398 <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800d398:	b508      	push	{r3, lr}
 800d39a:	4601      	mov	r1, r0
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800d39c:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d3a0:	f023 0302 	bic.w	r3, r3, #2
 800d3a4:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800d3a8:	2309      	movs	r3, #9
 800d3aa:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d3ae:	2304      	movs	r3, #4
 800d3b0:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800d3b4:	2307      	movs	r3, #7
 800d3b6:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d3ba:	7f03      	ldrb	r3, [r0, #28]
 800d3bc:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d3c0:	7f43      	ldrb	r3, [r0, #29]
 800d3c2:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d3c6:	7f83      	ldrb	r3, [r0, #30]
 800d3c8:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d3cc:	7fc3      	ldrb	r3, [r0, #31]
 800d3ce:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d3d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d3d6:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d3da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d3de:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800d3e8:	220a      	movs	r2, #10
 800d3ea:	3189      	adds	r1, #137	; 0x89
 800d3ec:	f7ff ff47 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d3f0:	bd08      	pop	{r3, pc}

0800d3f2 <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800d3f2:	b508      	push	{r3, lr}
 800d3f4:	4601      	mov	r1, r0
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800d3f6:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d3fa:	f023 0308 	bic.w	r3, r3, #8
 800d3fe:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800d402:	2319      	movs	r3, #25
 800d404:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d408:	2304      	movs	r3, #4
 800d40a:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800d40e:	230a      	movs	r3, #10
 800d410:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d414:	7f03      	ldrb	r3, [r0, #28]
 800d416:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d41a:	7f43      	ldrb	r3, [r0, #29]
 800d41c:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d420:	7f83      	ldrb	r3, [r0, #30]
 800d422:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d426:	7fc3      	ldrb	r3, [r0, #31]
 800d428:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d42c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d430:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d434:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d438:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800d43c:	2301      	movs	r3, #1
 800d43e:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800d442:	2300      	movs	r3, #0
 800d444:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800d448:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800d44c:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800d450:	220d      	movs	r2, #13
 800d452:	3189      	adds	r1, #137	; 0x89
 800d454:	f7ff ff13 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d458:	bd08      	pop	{r3, pc}

0800d45a <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800d45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45c:	4607      	mov	r7, r0
 800d45e:	460e      	mov	r6, r1
        hcibuf[0] = 0x13; // HCI OCF = 13
 800d460:	2313      	movs	r3, #19
 800d462:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800d466:	230c      	movs	r3, #12
 800d468:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800d46c:	4608      	mov	r0, r1
 800d46e:	f7f2 fecf 	bl	8000210 <strlen>
 800d472:	3001      	adds	r0, #1
 800d474:	f887 008b 	strb.w	r0, [r7, #139]	; 0x8b
 800d478:	2400      	movs	r4, #0
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800d47a:	b2e5      	uxtb	r5, r4
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7f2 fec7 	bl	8000210 <strlen>
 800d482:	1c63      	adds	r3, r4, #1
 800d484:	42a8      	cmp	r0, r5
 800d486:	d906      	bls.n	800d496 <_ZN3BTD20hci_write_local_nameEPKc+0x3c>
                hcibuf[i + 3] = name[i];
 800d488:	5d72      	ldrb	r2, [r6, r5]
 800d48a:	fa57 f484 	uxtab	r4, r7, r4
 800d48e:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
        for(i = 0; i < strlen(name); i++)
 800d492:	461c      	mov	r4, r3
 800d494:	e7f1      	b.n	800d47a <_ZN3BTD20hci_write_local_nameEPKc+0x20>
        hcibuf[i + 3] = 0x00; // End of string
 800d496:	fa57 f484 	uxtab	r4, r7, r4
 800d49a:	2300      	movs	r3, #0
 800d49c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c

        HCI_Command(hcibuf, 4 + strlen(name));
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7f2 feb5 	bl	8000210 <strlen>
 800d4a6:	1d02      	adds	r2, r0, #4
 800d4a8:	b292      	uxth	r2, r2
 800d4aa:	f107 0189 	add.w	r1, r7, #137	; 0x89
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	f7ff fee5 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4b6 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800d4b6:	b508      	push	{r3, lr}
 800d4b8:	4601      	mov	r1, r0
        hcibuf[0] = 0x01; // HCI OCF = 01
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800d4c0:	230c      	movs	r3, #12
 800d4c2:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800d4c6:	2308      	movs	r3, #8
 800d4c8:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800d4cc:	23ff      	movs	r3, #255	; 0xff
 800d4ce:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800d4d2:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800d4d6:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800d4da:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800d4de:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800d4e2:	221f      	movs	r2, #31
 800d4e4:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800d4e8:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
        hcibuf[10] = 0x00;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800d4f2:	220b      	movs	r2, #11
 800d4f4:	3189      	adds	r1, #137	; 0x89
 800d4f6:	f7ff fec2 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d4fa:	bd08      	pop	{r3, pc}

0800d4fc <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800d4fc:	b508      	push	{r3, lr}
        hcibuf[0] = 0x56; // HCI OCF = 56
 800d4fe:	2256      	movs	r2, #86	; 0x56
 800d500:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800d504:	220c      	movs	r2, #12
 800d506:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800d50a:	2201      	movs	r2, #1
 800d50c:	f880 208b 	strb.w	r2, [r0, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800d510:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800d514:	2204      	movs	r2, #4
 800d516:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800d51a:	f7ff feb0 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d51e:	bd08      	pop	{r3, pc}

0800d520 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800d520:	b508      	push	{r3, lr}
 800d522:	4601      	mov	r1, r0
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800d524:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800d528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d52c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
        hcibuf[0] = 0x01;
 800d530:	2301      	movs	r3, #1
 800d532:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d536:	2304      	movs	r3, #4
 800d538:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800d53c:	2305      	movs	r3, #5
 800d53e:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800d542:	2333      	movs	r3, #51	; 0x33
 800d544:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800d548:	238b      	movs	r3, #139	; 0x8b
 800d54a:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800d54e:	239e      	movs	r3, #158	; 0x9e
 800d550:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800d554:	2330      	movs	r3, #48	; 0x30
 800d556:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800d55a:	230a      	movs	r3, #10
 800d55c:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800d560:	2208      	movs	r2, #8
 800d562:	3189      	adds	r1, #137	; 0x89
 800d564:	f7ff fe8b 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d568:	bd08      	pop	{r3, pc}

0800d56a <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800d56a:	b508      	push	{r3, lr}
 800d56c:	4601      	mov	r1, r0
        hcibuf[0] = 0x02;
 800d56e:	2302      	movs	r3, #2
 800d570:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d574:	2304      	movs	r3, #4
 800d576:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800d57a:	2300      	movs	r3, #0
 800d57c:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800d580:	2203      	movs	r2, #3
 800d582:	3189      	adds	r1, #137	; 0x89
 800d584:	f7ff fe7b 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d588:	bd08      	pop	{r3, pc}

0800d58a <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect() {
        hci_connect(disc_bdaddr); // Use last discovered device
}

void BTD::hci_connect(uint8_t *bdaddr) {
 800d58a:	b508      	push	{r3, lr}
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800d58c:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
 800d590:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800d594:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800d598:	2205      	movs	r2, #5
 800d59a:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d59e:	2204      	movs	r2, #4
 800d5a0:	f880 208a 	strb.w	r2, [r0, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800d5a4:	220d      	movs	r2, #13
 800d5a6:	f880 208b 	strb.w	r2, [r0, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800d5aa:	780a      	ldrb	r2, [r1, #0]
 800d5ac:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800d5b0:	784a      	ldrb	r2, [r1, #1]
 800d5b2:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800d5b6:	788a      	ldrb	r2, [r1, #2]
 800d5b8:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800d5bc:	78ca      	ldrb	r2, [r1, #3]
 800d5be:	f880 208f 	strb.w	r2, [r0, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800d5c2:	790a      	ldrb	r2, [r1, #4]
 800d5c4:	f880 2090 	strb.w	r2, [r0, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800d5c8:	794a      	ldrb	r2, [r1, #5]
 800d5ca:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800d5ce:	2218      	movs	r2, #24
 800d5d0:	f880 2092 	strb.w	r2, [r0, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800d5d4:	22cc      	movs	r2, #204	; 0xcc
 800d5d6:	f880 2093 	strb.w	r2, [r0, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800d5e6:	f880 2096 	strb.w	r2, [r0, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800d5ea:	f880 2097 	strb.w	r2, [r0, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800d5ee:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800d5f2:	2210      	movs	r2, #16
 800d5f4:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800d5f8:	f7ff fe41 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d5fc:	bd08      	pop	{r3, pc}

0800d5fe <_ZN3BTD11hci_connectEv>:
void BTD::hci_connect() {
 800d5fe:	b508      	push	{r3, lr}
        hci_connect(disc_bdaddr); // Use last discovered device
 800d600:	f100 011c 	add.w	r1, r0, #28
 800d604:	f7ff ffc1 	bl	800d58a <_ZN3BTD11hci_connectEPh>
}
 800d608:	bd08      	pop	{r3, pc}

0800d60a <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800d60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60e:	4604      	mov	r4, r0
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800d610:	230d      	movs	r3, #13
 800d612:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d616:	2304      	movs	r3, #4
 800d618:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800d61c:	2317      	movs	r3, #23
 800d61e:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d622:	7f03      	ldrb	r3, [r0, #28]
 800d624:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d628:	7f43      	ldrb	r3, [r0, #29]
 800d62a:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d62e:	7f83      	ldrb	r3, [r0, #30]
 800d630:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d634:	7fc3      	ldrb	r3, [r0, #31]
 800d636:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d63a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d63e:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d642:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d646:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
        if(pairWithWii) {
 800d64a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d64e:	b35b      	cbz	r3, 800d6a8 <_ZN3BTD26hci_pin_code_request_replyEv+0x9e>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800d650:	2306      	movs	r3, #6
 800d652:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
                if(pairWiiUsingSync) {
 800d656:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 800d65a:	b1d3      	cbz	r3, 800d692 <_ZN3BTD26hci_pin_code_request_replyEv+0x88>
 800d65c:	f100 0314 	add.w	r3, r0, #20
 800d660:	f100 011a 	add.w	r1, r0, #26
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800d664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d668:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                        for(uint8_t i = 0; i < 6; i++)
 800d66c:	428b      	cmp	r3, r1
 800d66e:	d1f9      	bne.n	800d664 <_ZN3BTD26hci_pin_code_request_replyEv+0x5a>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
                }
                for(uint8_t i = 16; i < 26; i++)
 800d670:	f104 0398 	add.w	r3, r4, #152	; 0x98
 800d674:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
                        hcibuf[i] = 0x00; // The rest should be 0
 800d678:	2200      	movs	r2, #0
 800d67a:	f803 2f01 	strb.w	r2, [r3, #1]!
                for(uint8_t i = 16; i < 26; i++)
 800d67e:	4299      	cmp	r1, r3
 800d680:	d1fb      	bne.n	800d67a <_ZN3BTD26hci_pin_code_request_replyEv+0x70>
                        hcibuf[i + 10] = btdPin[i];
                for(; i < 16; i++)
                        hcibuf[i + 10] = 0x00; // The rest should be 0
        }

        HCI_Command(hcibuf, 26);
 800d682:	221a      	movs	r2, #26
 800d684:	f104 0189 	add.w	r1, r4, #137	; 0x89
 800d688:	4620      	mov	r0, r4
 800d68a:	f7ff fdf8 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d692:	f100 031c 	add.w	r3, r0, #28
 800d696:	f100 0122 	add.w	r1, r0, #34	; 0x22
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800d69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d69e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
                        for(uint8_t i = 0; i < 6; i++)
 800d6a2:	428b      	cmp	r3, r1
 800d6a4:	d1f9      	bne.n	800d69a <_ZN3BTD26hci_pin_code_request_replyEv+0x90>
 800d6a6:	e7e3      	b.n	800d670 <_ZN3BTD26hci_pin_code_request_replyEv+0x66>
                hcibuf[9] = strlen(btdPin); // Length of pin
 800d6a8:	6907      	ldr	r7, [r0, #16]
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	f7f2 fdb0 	bl	8000210 <strlen>
 800d6b0:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
 800d6b4:	2500      	movs	r5, #0
 800d6b6:	b2ee      	uxtb	r6, r5
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800d6b8:	46b0      	mov	r8, r6
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	f7f2 fda8 	bl	8000210 <strlen>
 800d6c0:	1c6b      	adds	r3, r5, #1
 800d6c2:	42b0      	cmp	r0, r6
 800d6c4:	d906      	bls.n	800d6d4 <_ZN3BTD26hci_pin_code_request_replyEv+0xca>
                        hcibuf[i + 10] = btdPin[i];
 800d6c6:	5dba      	ldrb	r2, [r7, r6]
 800d6c8:	fa54 f585 	uxtab	r5, r4, r5
 800d6cc:	f885 2093 	strb.w	r2, [r5, #147]	; 0x93
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800d6d0:	461d      	mov	r5, r3
 800d6d2:	e7f0      	b.n	800d6b6 <_ZN3BTD26hci_pin_code_request_replyEv+0xac>
                for(; i < 16; i++)
 800d6d4:	2e0f      	cmp	r6, #15
 800d6d6:	d8d4      	bhi.n	800d682 <_ZN3BTD26hci_pin_code_request_replyEv+0x78>
 800d6d8:	f106 0392 	add.w	r3, r6, #146	; 0x92
 800d6dc:	4423      	add	r3, r4
 800d6de:	f104 0293 	add.w	r2, r4, #147	; 0x93
 800d6e2:	4490      	add	r8, r2
 800d6e4:	f1c6 060f 	rsb	r6, r6, #15
 800d6e8:	fa58 f686 	uxtab	r6, r8, r6
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
                for(; i < 16; i++)
 800d6f2:	42b3      	cmp	r3, r6
 800d6f4:	d1fb      	bne.n	800d6ee <_ZN3BTD26hci_pin_code_request_replyEv+0xe4>
 800d6f6:	e7c4      	b.n	800d682 <_ZN3BTD26hci_pin_code_request_replyEv+0x78>

0800d6f8 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800d6f8:	b508      	push	{r3, lr}
 800d6fa:	4601      	mov	r1, r0
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800d6fc:	230e      	movs	r3, #14
 800d6fe:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d702:	2304      	movs	r3, #4
 800d704:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800d708:	2306      	movs	r3, #6
 800d70a:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d70e:	7f03      	ldrb	r3, [r0, #28]
 800d710:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d714:	7f43      	ldrb	r3, [r0, #29]
 800d716:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d71a:	7f83      	ldrb	r3, [r0, #30]
 800d71c:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d720:	7fc3      	ldrb	r3, [r0, #31]
 800d722:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d726:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d72a:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d72e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d732:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800d736:	2209      	movs	r2, #9
 800d738:	3189      	adds	r1, #137	; 0x89
 800d73a:	f7ff fda0 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d73e:	bd08      	pop	{r3, pc}

0800d740 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800d740:	b508      	push	{r3, lr}
 800d742:	4601      	mov	r1, r0
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800d744:	230c      	movs	r3, #12
 800d746:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d74a:	2304      	movs	r3, #4
 800d74c:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800d750:	2306      	movs	r3, #6
 800d752:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d756:	7f03      	ldrb	r3, [r0, #28]
 800d758:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d75c:	7f43      	ldrb	r3, [r0, #29]
 800d75e:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d762:	7f83      	ldrb	r3, [r0, #30]
 800d764:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d768:	7fc3      	ldrb	r3, [r0, #31]
 800d76a:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d76e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d772:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d776:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d77a:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800d77e:	2209      	movs	r2, #9
 800d780:	3189      	adds	r1, #137	; 0x89
 800d782:	f7ff fd7c 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d786:	bd08      	pop	{r3, pc}

0800d788 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800d788:	b508      	push	{r3, lr}
 800d78a:	4601      	mov	r1, r0
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800d78c:	232b      	movs	r3, #43	; 0x2b
 800d78e:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d792:	2304      	movs	r3, #4
 800d794:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800d798:	2309      	movs	r3, #9
 800d79a:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d79e:	7f03      	ldrb	r3, [r0, #28]
 800d7a0:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d7a4:	7f43      	ldrb	r3, [r0, #29]
 800d7a6:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d7aa:	7f83      	ldrb	r3, [r0, #30]
 800d7ac:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d7b0:	7fc3      	ldrb	r3, [r0, #31]
 800d7b2:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d7b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d7ba:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d7be:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d7c2:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800d7d2:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800d7d6:	220c      	movs	r2, #12
 800d7d8:	3189      	adds	r1, #137	; 0x89
 800d7da:	f7ff fd50 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d7de:	bd08      	pop	{r3, pc}

0800d7e0 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800d7e0:	b508      	push	{r3, lr}
 800d7e2:	4601      	mov	r1, r0
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800d7e4:	232c      	movs	r3, #44	; 0x2c
 800d7e6:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d7ea:	2304      	movs	r3, #4
 800d7ec:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800d7f0:	2306      	movs	r3, #6
 800d7f2:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800d7f6:	7f03      	ldrb	r3, [r0, #28]
 800d7f8:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800d7fc:	7f43      	ldrb	r3, [r0, #29]
 800d7fe:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800d802:	7f83      	ldrb	r3, [r0, #30]
 800d804:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800d808:	7fc3      	ldrb	r3, [r0, #31]
 800d80a:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800d80e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d812:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800d816:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d81a:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800d81e:	2209      	movs	r2, #9
 800d820:	3189      	adds	r1, #137	; 0x89
 800d822:	f7ff fd2c 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d826:	bd08      	pop	{r3, pc}

0800d828 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800d828:	b508      	push	{r3, lr}
 800d82a:	4601      	mov	r1, r0
        hcibuf[0] = 0x11; // HCI OCF = 11
 800d82c:	2311      	movs	r3, #17
 800d82e:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d832:	2304      	movs	r3, #4
 800d834:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800d838:	2302      	movs	r3, #2
 800d83a:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800d83e:	8b43      	ldrh	r3, [r0, #26]
 800d840:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800d844:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d848:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800d84c:	2205      	movs	r2, #5
 800d84e:	3189      	adds	r1, #137	; 0x89
 800d850:	f7ff fd15 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d854:	bd08      	pop	{r3, pc}

0800d856 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800d856:	b510      	push	{r4, lr}
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800d858:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
 800d85c:	f022 0204 	bic.w	r2, r2, #4
 800d860:	f8a0 2086 	strh.w	r2, [r0, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800d864:	2206      	movs	r2, #6
 800d866:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800d86a:	2404      	movs	r4, #4
 800d86c:	f880 408a 	strb.w	r4, [r0, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800d870:	2403      	movs	r4, #3
 800d872:	f880 408b 	strb.w	r4, [r0, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800d876:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800d87a:	f3c1 2103 	ubfx	r1, r1, #8, #4
 800d87e:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800d882:	2113      	movs	r1, #19
 800d884:	f880 108e 	strb.w	r1, [r0, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800d888:	f100 0189 	add.w	r1, r0, #137	; 0x89
 800d88c:	f7ff fcf7 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800d890:	bd10      	pop	{r4, pc}

0800d892 <_ZN3BTD14HCI_event_taskEv>:
void BTD::HCI_event_task() {
 800d892:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d894:	b085      	sub	sp, #20
 800d896:	4604      	mov	r4, r0
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	f8ad 300e 	strh.w	r3, [sp, #14]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800d89e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800d8a2:	9301      	str	r3, [sp, #4]
 800d8a4:	f100 0389 	add.w	r3, r0, #137	; 0x89
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	f10d 030e 	add.w	r3, sp, #14
 800d8ae:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800d8b2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800d8b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800d8b8:	f001 ff65 	bl	800f786 <_ZN3USB10inTransferEhhPtPhh>
        if(!rcode || rcode == hrNAK) { // Check for errors
 800d8bc:	f010 0ffb 	tst.w	r0, #251	; 0xfb
 800d8c0:	f040 809e 	bne.w	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                switch(hcibuf[0]) { // Switch on event type
 800d8c4:	f894 3089 	ldrb.w	r3, [r4, #137]	; 0x89
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	2b32      	cmp	r3, #50	; 0x32
 800d8cc:	f200 8098 	bhi.w	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
 800d8d0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d8d4:	00980079 	.word	0x00980079
 800d8d8:	014d010d 	.word	0x014d010d
 800d8dc:	018a0128 	.word	0x018a0128
 800d8e0:	00960136 	.word	0x00960136
 800d8e4:	00960096 	.word	0x00960096
 800d8e8:	00960096 	.word	0x00960096
 800d8ec:	00330096 	.word	0x00330096
 800d8f0:	00960096 	.word	0x00960096
 800d8f4:	00960096 	.word	0x00960096
 800d8f8:	00960096 	.word	0x00960096
 800d8fc:	01750096 	.word	0x01750096
 800d900:	00960186 	.word	0x00960186
 800d904:	00960096 	.word	0x00960096
 800d908:	00960096 	.word	0x00960096
 800d90c:	00960096 	.word	0x00960096
 800d910:	00960096 	.word	0x00960096
 800d914:	00960096 	.word	0x00960096
 800d918:	00960096 	.word	0x00960096
 800d91c:	00960096 	.word	0x00960096
 800d920:	00960096 	.word	0x00960096
 800d924:	00960096 	.word	0x00960096
 800d928:	00960096 	.word	0x00960096
 800d92c:	00960096 	.word	0x00960096
 800d930:	00960096 	.word	0x00960096
 800d934:	009601ad 	.word	0x009601ad
 800d938:	01b1      	.short	0x01b1
                                if(!hcibuf[5]) { // Check if command succeeded
 800d93a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d15e      	bne.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800d942:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800d946:	f043 0201 	orr.w	r2, r3, #1
 800d94a:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800d94e:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 800d952:	f241 0101 	movw	r1, #4097	; 0x1001
 800d956:	428a      	cmp	r2, r1
 800d958:	d016      	beq.n	800d988 <_ZN3BTD14HCI_event_taskEv+0xf6>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800d95a:	f241 0104 	movw	r1, #4100	; 0x1004
 800d95e:	428a      	cmp	r2, r1
 800d960:	d01b      	beq.n	800d99a <_ZN3BTD14HCI_event_taskEv+0x108>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800d962:	f241 0109 	movw	r1, #4105	; 0x1009
 800d966:	428a      	cmp	r2, r1
 800d968:	d14a      	bne.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
 800d96a:	f104 0214 	add.w	r2, r4, #20
 800d96e:	f104 001a 	add.w	r0, r4, #26
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800d972:	f892 107b 	ldrb.w	r1, [r2, #123]	; 0x7b
 800d976:	f802 1b01 	strb.w	r1, [r2], #1
                                                for(uint8_t i = 0; i < 6; i++)
 800d97a:	4282      	cmp	r2, r0
 800d97c:	d1f9      	bne.n	800d972 <_ZN3BTD14HCI_event_taskEv+0xe0>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800d97e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800d982:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 800d986:	e03b      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800d988:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
 800d98c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800d990:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800d994:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 800d998:	e032      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800d99a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d99e:	d10b      	bne.n	800d9b8 <_ZN3BTD14HCI_event_taskEv+0x126>
                                                        if(hcibuf[6] == 0) { // Page 0
 800d9a0:	f894 208f 	ldrb.w	r2, [r4, #143]	; 0x8f
 800d9a4:	b942      	cbnz	r2, 800d9b8 <_ZN3BTD14HCI_event_taskEv+0x126>
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800d9a6:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 800d9aa:	f012 0f08 	tst.w	r2, #8
                                                                        simple_pairing_supported = true;
 800d9ae:	bf14      	ite	ne
 800d9b0:	2201      	movne	r2, #1
                                                                        simple_pairing_supported = false;
 800d9b2:	2200      	moveq	r2, #0
 800d9b4:	f884 2079 	strb.w	r2, [r4, #121]	; 0x79
                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800d9b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 800d9c4:	e01c      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800d9c6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800d9ca:	2b04      	cmp	r3, #4
 800d9cc:	d913      	bls.n	800d9f6 <_ZN3BTD14HCI_event_taskEv+0x164>
 800d9ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d9d2:	b913      	cbnz	r3, 800d9da <_ZN3BTD14HCI_event_taskEv+0x148>
 800d9d4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800d9d8:	b16b      	cbz	r3, 800d9f6 <_ZN3BTD14HCI_event_taskEv+0x164>
                                        inquiry_counter = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
                                        connectToWii = false;
 800d9e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
                                        pairWithWii = false;
 800d9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
                                        connectToHIDDevice = false;
 800d9e8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800d9ec:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800d9f0:	230a      	movs	r3, #10
 800d9f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
                                inquiry_counter++;
 800d9f6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
}
 800da00:	b005      	add	sp, #20
 800da02:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800da04:	f894 708b 	ldrb.w	r7, [r4, #139]	; 0x8b
 800da08:	2f00      	cmp	r7, #0
 800da0a:	d0f9      	beq.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800da0c:	00fb      	lsls	r3, r7, #3
 800da0e:	b2db      	uxtb	r3, r3
                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800da10:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
 800da14:	2100      	movs	r1, #0
 800da16:	e02e      	b.n	800da76 <_ZN3BTD14HCI_event_taskEv+0x1e4>
 800da18:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
 800da1c:	2305      	movs	r3, #5
 800da1e:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
 800da22:	2300      	movs	r3, #0
 800da24:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800da28:	2301      	movs	r3, #1
 800da2a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800da2e:	b2c9      	uxtb	r1, r1
 800da30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800da34:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800da38:	338c      	adds	r3, #140	; 0x8c
 800da3a:	f104 021c 	add.w	r2, r4, #28
 800da3e:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800da42:	f813 1b01 	ldrb.w	r1, [r3], #1
 800da46:	f802 1b01 	strb.w	r1, [r2], #1
                                                        for(uint8_t j = 0; j < 6; j++)
 800da4a:	4282      	cmp	r2, r0
 800da4c:	d1f9      	bne.n	800da42 <_ZN3BTD14HCI_event_taskEv+0x1b0>
                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800da4e:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800da52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da56:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
                                                        break;
 800da5a:	e7d1      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800da5c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800da60:	b11a      	cbz	r2, 800da6a <_ZN3BTD14HCI_event_taskEv+0x1d8>
 800da62:	f000 020f 	and.w	r2, r0, #15
 800da66:	2a05      	cmp	r2, #5
 800da68:	d01a      	beq.n	800daa0 <_ZN3BTD14HCI_event_taskEv+0x20e>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800da6a:	3101      	adds	r1, #1
 800da6c:	3303      	adds	r3, #3
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	b2ca      	uxtb	r2, r1
 800da72:	4297      	cmp	r7, r2
 800da74:	d934      	bls.n	800dae0 <_ZN3BTD14HCI_event_taskEv+0x24e>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800da76:	18e2      	adds	r2, r4, r3
 800da78:	f892 608d 	ldrb.w	r6, [r2, #141]	; 0x8d
 800da7c:	f892 008e 	ldrb.w	r0, [r2, #142]	; 0x8e
 800da80:	f892 508f 	ldrb.w	r5, [r2, #143]	; 0x8f
                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800da84:	f1bc 0f00 	cmp.w	ip, #0
 800da88:	d0e8      	beq.n	800da5c <_ZN3BTD14HCI_event_taskEv+0x1ca>
 800da8a:	2d00      	cmp	r5, #0
 800da8c:	d1e6      	bne.n	800da5c <_ZN3BTD14HCI_event_taskEv+0x1ca>
 800da8e:	2805      	cmp	r0, #5
 800da90:	d1e4      	bne.n	800da5c <_ZN3BTD14HCI_event_taskEv+0x1ca>
 800da92:	f016 0f0c 	tst.w	r6, #12
 800da96:	d1bf      	bne.n	800da18 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800da98:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800da9c:	2a00      	cmp	r2, #0
 800da9e:	d0e4      	beq.n	800da6a <_ZN3BTD14HCI_event_taskEv+0x1d8>
 800daa0:	f016 0fc8 	tst.w	r6, #200	; 0xc8
 800daa4:	d0e1      	beq.n	800da6a <_ZN3BTD14HCI_event_taskEv+0x1d8>
 800daa6:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
 800daaa:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
 800daae:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800dab2:	b2c9      	uxtb	r1, r1
 800dab4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800dab8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800dabc:	338c      	adds	r3, #140	; 0x8c
 800dabe:	f104 021c 	add.w	r2, r4, #28
 800dac2:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dac6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800daca:	f802 1b01 	strb.w	r1, [r2], #1
                                                        for(uint8_t j = 0; j < 6; j++)
 800dace:	4290      	cmp	r0, r2
 800dad0:	d1f9      	bne.n	800dac6 <_ZN3BTD14HCI_event_taskEv+0x234>
                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800dad2:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800dad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dada:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
                                                        break;
 800dade:	e78f      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
 800dae0:	f884 607e 	strb.w	r6, [r4, #126]	; 0x7e
 800dae4:	f884 007f 	strb.w	r0, [r4, #127]	; 0x7f
 800dae8:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
 800daec:	e788      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800daee:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800daf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800daf6:	f8a4 2086 	strh.w	r2, [r4, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800dafa:	f894 208b 	ldrb.w	r2, [r4, #139]	; 0x8b
 800dafe:	b96a      	cbnz	r2, 800db1c <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800db00:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
 800db04:	0212      	lsls	r2, r2, #8
 800db06:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800db0a:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
 800db0e:	430a      	orrs	r2, r1
 800db10:	8362      	strh	r2, [r4, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800db12:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800db16:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 800db1a:	e771      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800db1c:	2306      	movs	r3, #6
 800db1e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800db22:	e76d      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                if(!hcibuf[2]) { // Check if disconnected OK
 800db24:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f47f af69 	bne.w	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800db2e:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800db32:	f023 0302 	bic.w	r3, r3, #2
 800db36:	f043 0304 	orr.w	r3, r3, #4
 800db3a:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 800db3e:	e75f      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                if(!hcibuf[2]) { // Check if reading is OK
 800db40:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800db44:	2b00      	cmp	r3, #0
 800db46:	f47f af5b 	bne.w	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
 800db4a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800db4e:	f104 013f 	add.w	r1, r4, #63	; 0x3f
                                                remote_name[i] = hcibuf[9 + i];
 800db52:	f893 2071 	ldrb.w	r2, [r3, #113]	; 0x71
 800db56:	f803 2f01 	strb.w	r2, [r3, #1]!
                                                if(remote_name[i] == '\0') // End of string
 800db5a:	b10a      	cbz	r2, 800db60 <_ZN3BTD14HCI_event_taskEv+0x2ce>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800db5c:	428b      	cmp	r3, r1
 800db5e:	d1f8      	bne.n	800db52 <_ZN3BTD14HCI_event_taskEv+0x2c0>
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800db60:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800db64:	f043 0308 	orr.w	r3, r3, #8
 800db68:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
 800db6c:	e748      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
 800db6e:	f104 031c 	add.w	r3, r4, #28
 800db72:	f104 0122 	add.w	r1, r4, #34	; 0x22
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800db76:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800db7a:	f803 2b01 	strb.w	r2, [r3], #1
                                for(uint8_t i = 0; i < 6; i++)
 800db7e:	428b      	cmp	r3, r1
 800db80:	d1f9      	bne.n	800db76 <_ZN3BTD14HCI_event_taskEv+0x2e4>
                                        classOfDevice[i] = hcibuf[i + 8];
 800db82:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 800db86:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
 800db8a:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800db8e:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
 800db92:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
 800db96:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800db9a:	f003 030f 	and.w	r3, r3, #15
 800db9e:	2b05      	cmp	r3, #5
 800dba0:	d006      	beq.n	800dbb0 <_ZN3BTD14HCI_event_taskEv+0x31e>
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800dba2:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800dba6:	f043 0310 	orr.w	r3, r3, #16
 800dbaa:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
                                break;
 800dbae:	e727      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800dbb0:	f012 0fc8 	tst.w	r2, #200	; 0xc8
                                        incomingHIDDevice = true;
 800dbb4:	bf1c      	itt	ne
 800dbb6:	2301      	movne	r3, #1
 800dbb8:	f884 3047 	strbne.w	r3, [r4, #71]	; 0x47
 800dbbc:	e7f1      	b.n	800dba2 <_ZN3BTD14HCI_event_taskEv+0x310>
                                if(pairWithWii) {
 800dbbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dbc2:	b92b      	cbnz	r3, 800dbd0 <_ZN3BTD14HCI_event_taskEv+0x33e>
                                } else if(btdPin != NULL) {
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	b13b      	cbz	r3, 800dbd8 <_ZN3BTD14HCI_event_taskEv+0x346>
                                        hci_pin_code_request_reply();
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f7ff fd1e 	bl	800d60a <_ZN3BTD26hci_pin_code_request_replyEv>
 800dbce:	e717      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        hci_pin_code_request_reply();
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f7ff fd1a 	bl	800d60a <_ZN3BTD26hci_pin_code_request_replyEv>
 800dbd6:	e713      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        hci_pin_code_negative_request_reply();
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f7ff fd8d 	bl	800d6f8 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
 800dbde:	e70f      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                hci_link_key_request_negative_reply();
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f7ff fdad 	bl	800d740 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800dbe6:	e70b      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                if(!hcibuf[2]) { // Check if pairing was successful
 800dbe8:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800dbec:	b9bb      	cbnz	r3, 800dc1e <_ZN3BTD14HCI_event_taskEv+0x38c>
                                        if(pairWithWii && !connectToWii) {
 800dbee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dbf2:	b133      	cbz	r3, 800dc02 <_ZN3BTD14HCI_event_taskEv+0x370>
 800dbf4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800dbf8:	b91b      	cbnz	r3, 800dc02 <_ZN3BTD14HCI_event_taskEv+0x370>
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dc00:	e6fe      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800dc02:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f43f aefa 	beq.w	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
 800dc0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f47f aef5 	bne.w	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800dc16:	2301      	movs	r3, #1
 800dc18:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800dc1c:	e6f0      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                        hci_disconnect(hci_handle);
 800dc1e:	8b61      	ldrh	r1, [r4, #26]
 800dc20:	4620      	mov	r0, r4
 800dc22:	f7ff fe18 	bl	800d856 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800dc26:	2310      	movs	r3, #16
 800dc28:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dc2c:	e6e8      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                hci_io_capability_request_reply();
 800dc2e:	4620      	mov	r0, r4
 800dc30:	f7ff fdaa 	bl	800d788 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800dc34:	e6e4      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>
                                hci_user_confirmation_request_reply();
 800dc36:	4620      	mov	r0, r4
 800dc38:	f7ff fdd2 	bl	800d7e0 <_ZN3BTD35hci_user_confirmation_request_replyEv>
}
 800dc3c:	e6e0      	b.n	800da00 <_ZN3BTD14HCI_event_taskEv+0x16e>

0800dc3e <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800dc3e:	b508      	push	{r3, lr}
 800dc40:	4601      	mov	r1, r0
        hcibuf[0] = 0x24; // HCI OCF = 24
 800dc42:	2324      	movs	r3, #36	; 0x24
 800dc44:	f880 3089 	strb.w	r3, [r0, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800dc48:	230c      	movs	r3, #12
 800dc4a:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800dc4e:	2303      	movs	r3, #3
 800dc50:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800dc54:	2304      	movs	r3, #4
 800dc56:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800dc5a:	2308      	movs	r3, #8
 800dc5c:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800dc60:	2300      	movs	r3, #0
 800dc62:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800dc66:	2206      	movs	r2, #6
 800dc68:	3189      	adds	r1, #137	; 0x89
 800dc6a:	f7ff fb08 	bl	800d27e <_ZN3BTD11HCI_CommandEPht>
}
 800dc6e:	bd08      	pop	{r3, pc}

0800dc70 <_ZN3BTD8HCI_taskEv>:
void BTD::HCI_task() {
 800dc70:	b570      	push	{r4, r5, r6, lr}
 800dc72:	4604      	mov	r4, r0
        switch(hci_state) {
 800dc74:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800dc78:	2b13      	cmp	r3, #19
 800dc7a:	d81f      	bhi.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
 800dc7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dc80:	00280014 	.word	0x00280014
 800dc84:	005c0051 	.word	0x005c0051
 800dc88:	00820067 	.word	0x00820067
 800dc8c:	00cf00be 	.word	0x00cf00be
 800dc90:	00f400e5 	.word	0x00f400e5
 800dc94:	01220106 	.word	0x01220106
 800dc98:	01990137 	.word	0x01990137
 800dc9c:	01af001e 	.word	0x01af001e
 800dca0:	009501c0 	.word	0x009501c0
 800dca4:	00b400a8 	.word	0x00b400a8
                        hci_counter++;
 800dca8:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 800dcac:	3301      	adds	r3, #1
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800dcb4:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d300      	bcc.n	800dcbe <_ZN3BTD8HCI_taskEv+0x4e>
}
 800dcbc:	bd70      	pop	{r4, r5, r6, pc}
                                hci_reset();
 800dcbe:	f7ff fafa 	bl	800d2b6 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
                                hci_counter = 0;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
 800dcce:	e7f5      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        hci_counter++;
 800dcd0:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800dcdc:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
 800dce0:	f012 0f01 	tst.w	r2, #1
 800dce4:	d114      	bne.n	800dd10 <_ZN3BTD8HCI_taskEv+0xa0>
                        } else if(hci_counter > hci_num_reset_loops) {
 800dce6:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d9e6      	bls.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_num_reset_loops *= 10;
 800dcee:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	b29b      	uxth	r3, r3
                                if(hci_num_reset_loops > 2000)
 800dcf6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
                                        hci_num_reset_loops = 2000;
 800dcfa:	bf88      	it	hi
 800dcfc:	f44f 63fa 	movhi.w	r3, #2000	; 0x7d0
 800dd00:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800dd04:	2300      	movs	r3, #0
 800dd06:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                                hci_counter = 0;
 800dd0a:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
 800dd0e:	e7d5      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_counter = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
                                hci_state = HCI_CLASS_STATE;
 800dd16:	2302      	movs	r3, #2
 800dd18:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                                hci_write_class_of_device();
 800dd1c:	f7ff ff8f 	bl	800dc3e <_ZN3BTD25hci_write_class_of_deviceEv>
 800dd20:	e7cc      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800dd22:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800dd26:	f013 0f01 	tst.w	r3, #1
 800dd2a:	d0c7      	beq.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_state = HCI_BDADDR_STATE;
 800dd2c:	2303      	movs	r3, #3
 800dd2e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
                                hci_read_bdaddr();
 800dd32:	f7ff faee 	bl	800d312 <_ZN3BTD15hci_read_bdaddrEv>
 800dd36:	e7c1      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800dd38:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800dd3c:	f013 0f20 	tst.w	r3, #32
 800dd40:	d0bc      	beq.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_read_local_version_information();
 800dd42:	f7ff fafc 	bl	800d33e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800dd46:	2304      	movs	r3, #4
 800dd48:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dd4c:	e7b6      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800dd4e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800dd52:	f013 0f40 	tst.w	r3, #64	; 0x40
 800dd56:	d0b1      	beq.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                if(btdName != NULL) {
 800dd58:	68c1      	ldr	r1, [r0, #12]
 800dd5a:	b129      	cbz	r1, 800dd68 <_ZN3BTD8HCI_taskEv+0xf8>
                                        hci_write_local_name(btdName);
 800dd5c:	f7ff fb7d 	bl	800d45a <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800dd60:	2305      	movs	r3, #5
 800dd62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dd66:	e7a9      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                } else if(useSimplePairing) {
 800dd68:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800dd6c:	b91b      	cbnz	r3, 800dd76 <_ZN3BTD8HCI_taskEv+0x106>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800dd6e:	2306      	movs	r3, #6
 800dd70:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800dd74:	e7a2      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800dd76:	2100      	movs	r1, #0
 800dd78:	f7ff faf7 	bl	800d36a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800dd7c:	2311      	movs	r3, #17
 800dd7e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dd82:	e79b      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800dd84:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800dd88:	f013 0f01 	tst.w	r3, #1
 800dd8c:	d096      	beq.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                if(useSimplePairing) {
 800dd8e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800dd92:	b91b      	cbnz	r3, 800dd9c <_ZN3BTD8HCI_taskEv+0x12c>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800dd94:	2306      	movs	r3, #6
 800dd96:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800dd9a:	e78f      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	f7ff fae4 	bl	800d36a <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800dda2:	2311      	movs	r3, #17
 800dda4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dda8:	e788      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800ddaa:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800ddae:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ddb2:	d083      	beq.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                if(simple_pairing_supported) {
 800ddb4:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 800ddb8:	b91b      	cbnz	r3, 800ddc2 <_ZN3BTD8HCI_taskEv+0x152>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ddba:	2306      	movs	r3, #6
 800ddbc:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800ddc0:	e77c      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                        hci_write_simple_pairing_mode(true);
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	f7ff fb9a 	bl	800d4fc <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800ddc8:	2312      	movs	r3, #18
 800ddca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800ddce:	e775      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ddd0:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800ddd4:	f013 0f01 	tst.w	r3, #1
 800ddd8:	f43f af70 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_set_event_mask();
 800dddc:	f7ff fb6b 	bl	800d4b6 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800dde0:	2313      	movs	r3, #19
 800dde2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dde6:	e769      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800dde8:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800ddec:	f013 0f01 	tst.w	r3, #1
 800ddf0:	f43f af64 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ddf4:	2306      	movs	r3, #6
 800ddf6:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800ddfa:	e75f      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800ddfc:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800de00:	b913      	cbnz	r3, 800de08 <_ZN3BTD8HCI_taskEv+0x198>
 800de02:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800de06:	b133      	cbz	r3, 800de16 <_ZN3BTD8HCI_taskEv+0x1a6>
                                hci_inquiry();
 800de08:	4620      	mov	r0, r4
 800de0a:	f7ff fb89 	bl	800d520 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800de0e:	2307      	movs	r3, #7
 800de10:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800de14:	e752      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800de16:	230a      	movs	r3, #10
 800de18:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800de1c:	e74e      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800de1e:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800de22:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de26:	f43f af49 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_inquiry_cancel(); // Stop inquiry
 800de2a:	f7ff fb9e 	bl	800d56a <_ZN3BTD18hci_inquiry_cancelEv>
                                if(checkRemoteName) {
 800de2e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800de32:	b91b      	cbnz	r3, 800de3c <_ZN3BTD8HCI_taskEv+0x1cc>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800de34:	2308      	movs	r3, #8
 800de36:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800de3a:	e73f      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800de3c:	4620      	mov	r0, r4
 800de3e:	f7ff fad8 	bl	800d3f2 <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800de42:	230c      	movs	r3, #12
 800de44:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800de48:	e738      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800de4a:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800de4e:	f013 0f01 	tst.w	r3, #1
 800de52:	f43f af33 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                checkRemoteName = false;
 800de56:	2300      	movs	r3, #0
 800de58:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
                                hci_connect();
 800de5c:	f7ff fbcf 	bl	800d5fe <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800de60:	2309      	movs	r3, #9
 800de62:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800de66:	e729      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800de68:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800de6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 800de70:	f43f af24 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800de74:	f013 0f02 	tst.w	r3, #2
 800de78:	d005      	beq.n	800de86 <_ZN3BTD8HCI_taskEv+0x216>
                                        hci_authentication_request(); // This will start the pairing with the device
 800de7a:	f7ff fcd5 	bl	800d828 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800de7e:	230a      	movs	r3, #10
 800de80:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800de84:	e71a      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                        hci_connect(); // Try to connect one more time
 800de86:	f7ff fbba 	bl	800d5fe <_ZN3BTD11hci_connectEv>
 800de8a:	e717      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800de8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800de90:	2b00      	cmp	r3, #0
 800de92:	f47f af13 	bne.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
 800de96:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f47f af0e 	bne.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
 800dea0:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f47f af09 	bne.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
 800deaa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800deae:	2b00      	cmp	r3, #0
 800deb0:	f47f af04 	bne.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_write_scan_enable();
 800deb4:	f7ff fa10 	bl	800d2d8 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800deb8:	2301      	movs	r3, #1
 800deba:	7223      	strb	r3, [r4, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800debc:	230b      	movs	r3, #11
 800debe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dec2:	e6fb      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800dec4:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800dec8:	f013 0f10 	tst.w	r3, #16
 800decc:	d107      	bne.n	800dede <_ZN3BTD8HCI_taskEv+0x26e>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800dece:	f013 0f04 	tst.w	r3, #4
 800ded2:	f43f aef3 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_state = HCI_DISCONNECT_STATE;
 800ded6:	2310      	movs	r3, #16
 800ded8:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800dedc:	e6ee      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                waitingForConnection = false;
 800dede:	2300      	movs	r3, #0
 800dee0:	7203      	strb	r3, [r0, #8]
                                hci_remote_name();
 800dee2:	f7ff fa86 	bl	800d3f2 <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800dee6:	230c      	movs	r3, #12
 800dee8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800deec:	e6e6      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800deee:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800def2:	f013 0f08 	tst.w	r3, #8
 800def6:	f43f aee1 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800defa:	f100 0522 	add.w	r5, r0, #34	; 0x22
 800defe:	2208      	movs	r2, #8
 800df00:	4954      	ldr	r1, [pc, #336]	; (800e054 <_ZN3BTD8HCI_taskEv+0x3e4>)
 800df02:	4628      	mov	r0, r5
 800df04:	f002 fa3c 	bl	8010380 <strncmp>
 800df08:	b990      	cbnz	r0, 800df30 <_ZN3BTD8HCI_taskEv+0x2c0>
                                        incomingWii = true;
 800df0a:	2301      	movs	r3, #1
 800df0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
                                        motionPlusInside = false;
 800df10:	2300      	movs	r3, #0
 800df12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
                                        wiiUProController = false;
 800df16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800df1a:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800df1e:	2216      	movs	r2, #22
 800df20:	494d      	ldr	r1, [pc, #308]	; (800e058 <_ZN3BTD8HCI_taskEv+0x3e8>)
 800df22:	4628      	mov	r0, r5
 800df24:	f002 fa2c 	bl	8010380 <strncmp>
 800df28:	b9c0      	cbnz	r0, 800df5c <_ZN3BTD8HCI_taskEv+0x2ec>
                                                motionPlusInside = true;
 800df2a:	2301      	movs	r3, #1
 800df2c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800df30:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800df34:	b92b      	cbnz	r3, 800df42 <_ZN3BTD8HCI_taskEv+0x2d2>
 800df36:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
 800df3a:	f242 5308 	movw	r3, #9480	; 0x2508
 800df3e:	429a      	cmp	r2, r3
 800df40:	d025      	beq.n	800df8e <_ZN3BTD8HCI_taskEv+0x31e>
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800df42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800df46:	b913      	cbnz	r3, 800df4e <_ZN3BTD8HCI_taskEv+0x2de>
 800df48:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800df4c:	b353      	cbz	r3, 800dfa4 <_ZN3BTD8HCI_taskEv+0x334>
 800df4e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 800df52:	b33b      	cbz	r3, 800dfa4 <_ZN3BTD8HCI_taskEv+0x334>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800df54:	2308      	movs	r3, #8
 800df56:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800df5a:	e6af      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800df5c:	2216      	movs	r2, #22
 800df5e:	493f      	ldr	r1, [pc, #252]	; (800e05c <_ZN3BTD8HCI_taskEv+0x3ec>)
 800df60:	4628      	mov	r0, r5
 800df62:	f002 fa0d 	bl	8010380 <strncmp>
 800df66:	b938      	cbnz	r0, 800df78 <_ZN3BTD8HCI_taskEv+0x308>
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800df68:	2301      	movs	r3, #1
 800df6a:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
 800df6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800df72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df76:	e7db      	b.n	800df30 <_ZN3BTD8HCI_taskEv+0x2c0>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800df78:	2213      	movs	r2, #19
 800df7a:	4939      	ldr	r1, [pc, #228]	; (800e060 <_ZN3BTD8HCI_taskEv+0x3f0>)
 800df7c:	4628      	mov	r0, r5
 800df7e:	f002 f9ff 	bl	8010380 <strncmp>
 800df82:	2800      	cmp	r0, #0
 800df84:	d1d4      	bne.n	800df30 <_ZN3BTD8HCI_taskEv+0x2c0>
                                                pairWiiUsingSync = true;
 800df86:	2301      	movs	r3, #1
 800df88:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
 800df8c:	e7d0      	b.n	800df30 <_ZN3BTD8HCI_taskEv+0x2c0>
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800df8e:	2213      	movs	r2, #19
 800df90:	4934      	ldr	r1, [pc, #208]	; (800e064 <_ZN3BTD8HCI_taskEv+0x3f4>)
 800df92:	4628      	mov	r0, r5
 800df94:	f002 f9f4 	bl	8010380 <strncmp>
 800df98:	2800      	cmp	r0, #0
 800df9a:	d1d2      	bne.n	800df42 <_ZN3BTD8HCI_taskEv+0x2d2>
                                        incomingPSController = true;
 800df9c:	2301      	movs	r3, #1
 800df9e:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
 800dfa2:	e7ce      	b.n	800df42 <_ZN3BTD8HCI_taskEv+0x2d2>
                                        hci_accept_connection();
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7ff f9f7 	bl	800d398 <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800dfaa:	230d      	movs	r3, #13
 800dfac:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dfb0:	e684      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800dfb2:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800dfb6:	f013 0f02 	tst.w	r3, #2
 800dfba:	f43f ae7f 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                if(incomingPSController)
 800dfbe:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800dfc2:	b113      	cbz	r3, 800dfca <_ZN3BTD8HCI_taskEv+0x35a>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
                                l2capConnectionClaimed = false;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	7263      	strb	r3, [r4, #9]
                                sdpConnectionClaimed = false;
 800dfce:	72a3      	strb	r3, [r4, #10]
                                rfcommConnectionClaimed = false;
 800dfd0:	72e3      	strb	r3, [r4, #11]
                                hci_event_flag = 0;
 800dfd2:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800dfd6:	230f      	movs	r3, #15
 800dfd8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
 800dfdc:	e66e      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        hci_counter++;
 800dfde:	f8b0 3082 	ldrh.w	r3, [r0, #130]	; 0x82
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	b29b      	uxth	r3, r3
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800dfe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfea:	d802      	bhi.n	800dff2 <_ZN3BTD8HCI_taskEv+0x382>
                        hci_counter++;
 800dfec:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
 800dff0:	e664      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_counter = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	f8a0 3082 	strh.w	r3, [r0, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800dff8:	230a      	movs	r3, #10
 800dffa:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
 800dffe:	e65d      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800e000:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
 800e004:	f013 0f04 	tst.w	r3, #4
 800e008:	f43f ae58 	beq.w	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
                                hci_event_flag = 0; // Clear all flags
 800e00c:	2500      	movs	r5, #0
 800e00e:	f8a0 5086 	strh.w	r5, [r0, #134]	; 0x86
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800e012:	2640      	movs	r6, #64	; 0x40
 800e014:	4632      	mov	r2, r6
 800e016:	4629      	mov	r1, r5
 800e018:	3089      	adds	r0, #137	; 0x89
 800e01a:	f002 f965 	bl	80102e8 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800e01e:	4632      	mov	r2, r6
 800e020:	4629      	mov	r1, r5
 800e022:	f104 00c9 	add.w	r0, r4, #201	; 0xc9
 800e026:	f002 f95f 	bl	80102e8 <memset>
                                connectToWii = incomingWii = pairWithWii = false;
 800e02a:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
 800e02e:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
 800e032:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800e036:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
 800e03a:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
 800e03e:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800e042:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
                                incomingPSController = false;
 800e046:	f884 507d 	strb.w	r5, [r4, #125]	; 0x7d
                                hci_state = HCI_SCANNING_STATE;
 800e04a:	230a      	movs	r3, #10
 800e04c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800e050:	e634      	b.n	800dcbc <_ZN3BTD8HCI_taskEv+0x4c>
 800e052:	bf00      	nop
 800e054:	080113dc 	.word	0x080113dc
 800e058:	080113e8 	.word	0x080113e8
 800e05c:	08011400 	.word	0x08011400
 800e060:	08011418 	.word	0x08011418
 800e064:	0801142c 	.word	0x0801142c

0800e068 <_ZN3BTD4PollEv>:
        if(!bPollEnable)
 800e068:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 800e06c:	b90b      	cbnz	r3, 800e072 <_ZN3BTD4PollEv+0xa>
}
 800e06e:	2000      	movs	r0, #0
 800e070:	4770      	bx	lr
uint8_t BTD::Poll() {
 800e072:	b510      	push	{r4, lr}
 800e074:	4604      	mov	r4, r0
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e076:	f7f3 febd 	bl	8001df4 <HAL_GetTick>
 800e07a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800e07c:	1ac0      	subs	r0, r0, r3
 800e07e:	2800      	cmp	r0, #0
 800e080:	da01      	bge.n	800e086 <_ZN3BTD4PollEv+0x1e>
}
 800e082:	2000      	movs	r0, #0
 800e084:	bd10      	pop	{r4, pc}
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e086:	f7f3 feb5 	bl	8001df4 <HAL_GetTick>
 800e08a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 800e08e:	4403      	add	r3, r0
 800e090:	6623      	str	r3, [r4, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e092:	4620      	mov	r0, r4
 800e094:	f7ff fbfd 	bl	800d892 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e098:	4620      	mov	r0, r4
 800e09a:	f7ff fde9 	bl	800dc70 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f7ff f8b3 	bl	800d20a <_ZN3BTD14ACL_event_taskEv>
 800e0a4:	e7ed      	b.n	800e082 <_ZN3BTD4PollEv+0x1a>

0800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800e0a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af02      	add	r7, sp, #8
        uint8_t buf[8 + nbytes];
 800e0ac:	f103 040f 	add.w	r4, r3, #15
 800e0b0:	f404 74fc 	and.w	r4, r4, #504	; 0x1f8
 800e0b4:	ebad 0d04 	sub.w	sp, sp, r4
 800e0b8:	ae02      	add	r6, sp, #8
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800e0ba:	f88d 1008 	strb.w	r1, [sp, #8]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800e0be:	f3c1 2103 	ubfx	r1, r1, #8, #4
 800e0c2:	f041 0120 	orr.w	r1, r1, #32
 800e0c6:	7071      	strb	r1, [r6, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800e0c8:	1d19      	adds	r1, r3, #4
 800e0ca:	70b1      	strb	r1, [r6, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800e0cc:	1209      	asrs	r1, r1, #8
 800e0ce:	70f1      	strb	r1, [r6, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800e0d0:	7133      	strb	r3, [r6, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	7171      	strb	r1, [r6, #5]
        buf[6] = channelLow;
 800e0d6:	7e39      	ldrb	r1, [r7, #24]
 800e0d8:	71b1      	strb	r1, [r6, #6]
        buf[7] = channelHigh;
 800e0da:	7f39      	ldrb	r1, [r7, #28]
 800e0dc:	71f1      	strb	r1, [r6, #7]

        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	b153      	cbz	r3, 800e0f8 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x52>
 800e0e2:	1e51      	subs	r1, r2, #1
 800e0e4:	1df4      	adds	r4, r6, #7
 800e0e6:	1e5d      	subs	r5, r3, #1
 800e0e8:	fa12 f585 	uxtah	r5, r2, r5
                buf[8 + i] = data[i];
 800e0ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e0f0:	f804 2f01 	strb.w	r2, [r4, #1]!
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800e0f4:	42a9      	cmp	r1, r5
 800e0f6:	d1f9      	bne.n	800e0ec <_ZN3BTD13L2CAP_CommandEtPhhhh+0x46>

        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800e0f8:	9600      	str	r6, [sp, #0]
 800e0fa:	3308      	adds	r3, #8
 800e0fc:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
 800e100:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800e104:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e106:	f001 fc5f 	bl	800f9c8 <_ZN3USB11outTransferEhhtPh>
        if(rcode) {
 800e10a:	b910      	cbnz	r0, 800e112 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x6c>
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
}
 800e10c:	3704      	adds	r7, #4
 800e10e:	46bd      	mov	sp, r7
 800e110:	bdf0      	pop	{r4, r5, r6, r7, pc}
                delay(100); // This small delay prevents it from overflowing if it fails
 800e112:	2064      	movs	r0, #100	; 0x64
 800e114:	f7f3 fe7a 	bl	8001e0c <HAL_Delay>
}
 800e118:	e7f8      	b.n	800e10c <_ZN3BTD13L2CAP_CommandEtPhhhh+0x66>

0800e11a <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800e11a:	b570      	push	{r4, r5, r6, lr}
 800e11c:	b082      	sub	sp, #8
 800e11e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800e122:	2602      	movs	r6, #2
 800e124:	f880 6109 	strb.w	r6, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e128:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e12c:	2204      	movs	r2, #4
 800e12e:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e132:	2200      	movs	r2, #0
 800e134:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800e138:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800e13c:	122d      	asrs	r5, r5, #8
 800e13e:	f880 510e 	strb.w	r5, [r0, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e142:	781d      	ldrb	r5, [r3, #0]
 800e144:	f880 510f 	strb.w	r5, [r0, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e148:	785b      	ldrb	r3, [r3, #1]
 800e14a:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e14e:	9201      	str	r2, [sp, #4]
 800e150:	2301      	movs	r3, #1
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	2308      	movs	r3, #8
 800e156:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e15a:	f7ff ffa4 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e15e:	b002      	add	sp, #8
 800e160:	bd70      	pop	{r4, r5, r6, pc}

0800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800e162:	b570      	push	{r4, r5, r6, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	9d06      	ldr	r5, [sp, #24]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800e168:	2603      	movs	r6, #3
 800e16a:	f880 6109 	strb.w	r6, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e16e:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e172:	2208      	movs	r2, #8
 800e174:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e178:	2200      	movs	r2, #0
 800e17a:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e17e:	781e      	ldrb	r6, [r3, #0]
 800e180:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e184:	785b      	ldrb	r3, [r3, #1]
 800e186:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800e18a:	782b      	ldrb	r3, [r5, #0]
 800e18c:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e190:	786b      	ldrb	r3, [r5, #1]
 800e192:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800e196:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e19a:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e19e:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800e1a2:	f880 2113 	strb.w	r2, [r0, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e1a6:	f880 2114 	strb.w	r2, [r0, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e1aa:	9201      	str	r2, [sp, #4]
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	230c      	movs	r3, #12
 800e1b2:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e1b6:	f7ff ff76 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e1ba:	b002      	add	sp, #8
 800e1bc:	bd70      	pop	{r4, r5, r6, pc}

0800e1be <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800e1be:	b530      	push	{r4, r5, lr}
 800e1c0:	b083      	sub	sp, #12
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800e1c2:	2504      	movs	r5, #4
 800e1c4:	f880 5109 	strb.w	r5, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e1c8:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e1cc:	2208      	movs	r2, #8
 800e1ce:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800e1d8:	781d      	ldrb	r5, [r3, #0]
 800e1da:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e1de:	785b      	ldrb	r3, [r3, #1]
 800e1e0:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800e1e4:	f880 210f 	strb.w	r2, [r0, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e1e8:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f880 3111 	strb.w	r3, [r0, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800e1f2:	2502      	movs	r5, #2
 800e1f4:	f880 5112 	strb.w	r5, [r0, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800e1f8:	25ff      	movs	r5, #255	; 0xff
 800e1fa:	f880 5113 	strb.w	r5, [r0, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800e1fe:	f880 5114 	strb.w	r5, [r0, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e202:	9201      	str	r2, [sp, #4]
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	230c      	movs	r3, #12
 800e208:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e20c:	f7ff ff4b 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e210:	b003      	add	sp, #12
 800e212:	bd30      	pop	{r4, r5, pc}

0800e214 <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	b082      	sub	sp, #8
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800e218:	2505      	movs	r5, #5
 800e21a:	f880 5109 	strb.w	r5, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e21e:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800e222:	220a      	movs	r2, #10
 800e224:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e228:	2200      	movs	r2, #0
 800e22a:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800e22e:	781d      	ldrb	r5, [r3, #0]
 800e230:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800e234:	785b      	ldrb	r3, [r3, #1]
 800e236:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800e23a:	f880 210f 	strb.w	r2, [r0, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800e23e:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800e242:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e246:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800e24a:	2301      	movs	r3, #1
 800e24c:	f880 3113 	strb.w	r3, [r0, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800e250:	2502      	movs	r5, #2
 800e252:	f880 5114 	strb.w	r5, [r0, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800e256:	26a0      	movs	r6, #160	; 0xa0
 800e258:	f880 6115 	strb.w	r6, [r0, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800e25c:	f880 5116 	strb.w	r5, [r0, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800e260:	9201      	str	r2, [sp, #4]
 800e262:	9300      	str	r3, [sp, #0]
 800e264:	230e      	movs	r3, #14
 800e266:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e26a:	f7ff ff1c 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e26e:	b002      	add	sp, #8
 800e270:	bd70      	pop	{r4, r5, r6, pc}

0800e272 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800e272:	b570      	push	{r4, r5, r6, lr}
 800e274:	b082      	sub	sp, #8
 800e276:	9d06      	ldr	r5, [sp, #24]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800e278:	2606      	movs	r6, #6
 800e27a:	f880 6109 	strb.w	r6, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e27e:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e282:	2204      	movs	r2, #4
 800e284:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e288:	2200      	movs	r2, #0
 800e28a:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800e28e:	781e      	ldrb	r6, [r3, #0]
 800e290:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e294:	785b      	ldrb	r3, [r3, #1]
 800e296:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800e29a:	782b      	ldrb	r3, [r5, #0]
 800e29c:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e2a0:	786b      	ldrb	r3, [r5, #1]
 800e2a2:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e2a6:	9201      	str	r2, [sp, #4]
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	2308      	movs	r3, #8
 800e2ae:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e2b2:	f7ff fef8 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e2b6:	b002      	add	sp, #8
 800e2b8:	bd70      	pop	{r4, r5, r6, pc}

0800e2ba <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800e2ba:	b570      	push	{r4, r5, r6, lr}
 800e2bc:	b082      	sub	sp, #8
 800e2be:	9d06      	ldr	r5, [sp, #24]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800e2c0:	2607      	movs	r6, #7
 800e2c2:	f880 6109 	strb.w	r6, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e2c6:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800e2ca:	2204      	movs	r2, #4
 800e2cc:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800e2d6:	781e      	ldrb	r6, [r3, #0]
 800e2d8:	f880 610d 	strb.w	r6, [r0, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800e2dc:	785b      	ldrb	r3, [r3, #1]
 800e2de:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800e2e2:	782b      	ldrb	r3, [r5, #0]
 800e2e4:	f880 310f 	strb.w	r3, [r0, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800e2e8:	786b      	ldrb	r3, [r5, #1]
 800e2ea:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800e2ee:	9201      	str	r2, [sp, #4]
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	2308      	movs	r3, #8
 800e2f6:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e2fa:	f7ff fed4 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e2fe:	b002      	add	sp, #8
 800e300:	bd70      	pop	{r4, r5, r6, pc}

0800e302 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800e302:	b530      	push	{r4, r5, lr}
 800e304:	b083      	sub	sp, #12
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800e306:	250b      	movs	r5, #11
 800e308:	f880 5109 	strb.w	r5, [r0, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800e30c:	f880 210a 	strb.w	r2, [r0, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800e310:	2208      	movs	r2, #8
 800e312:	f880 210b 	strb.w	r2, [r0, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800e316:	2200      	movs	r2, #0
 800e318:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800e31c:	f880 310d 	strb.w	r3, [r0, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800e320:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800e324:	f880 310e 	strb.w	r3, [r0, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800e328:	f880 210f 	strb.w	r2, [r0, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800e32c:	f880 2110 	strb.w	r2, [r0, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800e330:	f880 2111 	strb.w	r2, [r0, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800e334:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800e338:	f880 2113 	strb.w	r2, [r0, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800e33c:	f880 2114 	strb.w	r2, [r0, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800e340:	9201      	str	r2, [sp, #4]
 800e342:	2301      	movs	r3, #1
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	230c      	movs	r3, #12
 800e348:	f200 1209 	addw	r2, r0, #265	; 0x109
 800e34c:	f7ff feab 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e350:	b003      	add	sp, #12
 800e352:	bd30      	pop	{r4, r5, pc}

0800e354 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800e354:	b510      	push	{r4, lr}
 800e356:	b08a      	sub	sp, #40	; 0x28
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800e358:	2301      	movs	r3, #1
 800e35a:	f88d 3020 	strb.w	r3, [sp, #32]
        buf[1] = 0x00;
 800e35e:	2300      	movs	r3, #0
 800e360:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21

        for(uint8_t i = 0; i < 6; i++)
 800e364:	1d8b      	adds	r3, r1, #6
 800e366:	f10d 0221 	add.w	r2, sp, #33	; 0x21
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800e36a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e36e:	f802 4f01 	strb.w	r4, [r2, #1]!
        for(uint8_t i = 0; i < 6; i++)
 800e372:	428b      	cmp	r3, r1
 800e374:	d1f9      	bne.n	800e36a <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800e376:	2300      	movs	r3, #0
 800e378:	9307      	str	r3, [sp, #28]
 800e37a:	aa08      	add	r2, sp, #32
 800e37c:	9206      	str	r2, [sp, #24]
 800e37e:	2208      	movs	r2, #8
 800e380:	9205      	str	r2, [sp, #20]
 800e382:	9204      	str	r2, [sp, #16]
 800e384:	9303      	str	r3, [sp, #12]
 800e386:	2303      	movs	r3, #3
 800e388:	9302      	str	r3, [sp, #8]
 800e38a:	23f5      	movs	r3, #245	; 0xf5
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	2309      	movs	r3, #9
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	2321      	movs	r3, #33	; 0x21
 800e394:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 800e398:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800e39c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e39e:	f001 fb2e 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800e3a2:	b00a      	add	sp, #40	; 0x28
 800e3a4:	bd10      	pop	{r4, pc}

0800e3a6 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800e3a6:	b510      	push	{r4, lr}
 800e3a8:	b08c      	sub	sp, #48	; 0x30
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800e3aa:	2305      	movs	r3, #5
 800e3ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        buf[7] = 0x10;
 800e3b0:	2310      	movs	r3, #16
 800e3b2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        buf[8] = 0x01;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        buf[9] = 0x02;
 800e3bc:	2302      	movs	r3, #2
 800e3be:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
        buf[10] = 0x12;
 800e3c2:	2312      	movs	r3, #18
 800e3c4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

        for(uint8_t i = 0; i < 6; i++)
 800e3c8:	1e4b      	subs	r3, r1, #1
 800e3ca:	aa09      	add	r2, sp, #36	; 0x24
 800e3cc:	1d4c      	adds	r4, r1, #5
                buf[i + 1] = bdaddr[i];
 800e3ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e3d2:	f802 1f01 	strb.w	r1, [r2, #1]!
        for(uint8_t i = 0; i < 6; i++)
 800e3d6:	42a3      	cmp	r3, r4
 800e3d8:	d1f9      	bne.n	800e3ce <_ZN3BTD13setMoveBdaddrEPh+0x28>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800e3da:	2300      	movs	r3, #0
 800e3dc:	9307      	str	r3, [sp, #28]
 800e3de:	aa09      	add	r2, sp, #36	; 0x24
 800e3e0:	9206      	str	r2, [sp, #24]
 800e3e2:	220b      	movs	r2, #11
 800e3e4:	9205      	str	r2, [sp, #20]
 800e3e6:	9204      	str	r2, [sp, #16]
 800e3e8:	9303      	str	r3, [sp, #12]
 800e3ea:	2303      	movs	r3, #3
 800e3ec:	9302      	str	r3, [sp, #8]
 800e3ee:	2305      	movs	r3, #5
 800e3f0:	9301      	str	r3, [sp, #4]
 800e3f2:	2309      	movs	r3, #9
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	2321      	movs	r3, #33	; 0x21
 800e3f8:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 800e3fc:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800e400:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e402:	f001 fafc 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800e406:	b00c      	add	sp, #48	; 0x30
 800e408:	bd10      	pop	{r4, pc}
	...

0800e40c <_ZN3BTD4InitEhhb>:
uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	b093      	sub	sp, #76	; 0x4c
 800e412:	4604      	mov	r4, r0
 800e414:	461f      	mov	r7, r3
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800e416:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
        epInfo[1].epAddr = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
        AddressPool &addrPool = pUsb->GetAddressPool();
 800e420:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800e422:	682b      	ldr	r3, [r5, #0]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 800e42a:	4628      	mov	r0, r5
 800e42c:	4798      	blx	r3
        if(!p) {
 800e42e:	2800      	cmp	r0, #0
 800e430:	f000 8116 	beq.w	800e660 <_ZN3BTD4InitEhhb+0x254>
 800e434:	4680      	mov	r8, r0
        delay(300); // Assign new address to the device
 800e436:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e43a:	f7f3 fce7 	bl	8001e0c <HAL_Delay>
        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800e43e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800e442:	2200      	movs	r2, #0
 800e444:	4611      	mov	r1, r2
 800e446:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e448:	f001 fbde 	bl	800fc08 <_ZN3USB7setAddrEhhh>
        if(rcode) {
 800e44c:	4683      	mov	fp, r0
 800e44e:	bb38      	cbnz	r0, 800e4a0 <_ZN3BTD4InitEhhb+0x94>
        p->lowspeed = false;
 800e450:	2300      	movs	r3, #0
 800e452:	f888 3006 	strb.w	r3, [r8, #6]
        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800e456:	682b      	ldr	r3, [r5, #0]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e45e:	4628      	mov	r0, r5
 800e460:	4798      	blx	r3
        if(!p) {
 800e462:	2800      	cmp	r0, #0
 800e464:	f000 80ff 	beq.w	800e666 <_ZN3BTD4InitEhhb+0x25a>
        p->lowspeed = lowspeed;
 800e468:	7187      	strb	r7, [r0, #6]
        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800e46a:	f104 0a51 	add.w	sl, r4, #81	; 0x51
 800e46e:	4653      	mov	r3, sl
 800e470:	2201      	movs	r2, #1
 800e472:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e476:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e478:	f000 ffb0 	bl	800f3dc <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
        if(rcode)
 800e47c:	4683      	mov	fp, r0
 800e47e:	b990      	cbnz	r0, 800e4a6 <_ZN3BTD4InitEhhb+0x9a>
        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800e480:	f8b4 2076 	ldrh.w	r2, [r4, #118]	; 0x76
 800e484:	f240 534c 	movw	r3, #1356	; 0x54c
 800e488:	429a      	cmp	r2, r3
 800e48a:	d014      	beq.n	800e4b6 <_ZN3BTD4InitEhhb+0xaa>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800e48c:	2e00      	cmp	r6, #0
 800e48e:	f000 80b5 	beq.w	800e5fc <_ZN3BTD4InitEhhb+0x1f0>
 800e492:	2500      	movs	r5, #0
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800e494:	4f75      	ldr	r7, [pc, #468]	; (800e66c <_ZN3BTD4InitEhhb+0x260>)
UseOr(false) {
 800e496:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800e674 <_ZN3BTD4InitEhhb+0x268>
 800e49a:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800e678 <_ZN3BTD4InitEhhb+0x26c>
 800e49e:	e082      	b.n	800e5a6 <_ZN3BTD4InitEhhb+0x19a>
                p->lowspeed = false;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f888 3006 	strb.w	r3, [r8, #6]
        Release();
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	4798      	blx	r3
}
 800e4ae:	4658      	mov	r0, fp
 800e4b0:	b013      	add	sp, #76	; 0x4c
 800e4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800e4b6:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 800e4ba:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e4be:	d007      	beq.n	800e4d0 <_ZN3BTD4InitEhhb+0xc4>
 800e4c0:	f240 422f 	movw	r2, #1071	; 0x42f
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d003      	beq.n	800e4d0 <_ZN3BTD4InitEhhb+0xc4>
 800e4c8:	f240 32d5 	movw	r2, #981	; 0x3d5
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d1dd      	bne.n	800e48c <_ZN3BTD4InitEhhb+0x80>
                delay(100);
 800e4d0:	2064      	movs	r0, #100	; 0x64
 800e4d2:	f7f3 fc9b 	bl	8001e0c <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800e4dc:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e4e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e4e2:	f001 fba8 	bl	800fc36 <_ZN3USB7setConfEhhh>
                if(rcode)
 800e4e6:	4683      	mov	fp, r0
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	d1dc      	bne.n	800e4a6 <_ZN3BTD4InitEhhb+0x9a>
                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800e4ec:	6963      	ldr	r3, [r4, #20]
 800e4ee:	b90b      	cbnz	r3, 800e4f4 <_ZN3BTD4InitEhhb+0xe8>
 800e4f0:	8b23      	ldrh	r3, [r4, #24]
 800e4f2:	b16b      	cbz	r3, 800e510 <_ZN3BTD4InitEhhb+0x104>
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800e4f4:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 800e4f8:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800e4fc:	d003      	beq.n	800e506 <_ZN3BTD4InitEhhb+0xfa>
 800e4fe:	f240 422f 	movw	r2, #1071	; 0x42f
 800e502:	4293      	cmp	r3, r2
 800e504:	d11a      	bne.n	800e53c <_ZN3BTD4InitEhhb+0x130>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800e506:	f104 0114 	add.w	r1, r4, #20
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7ff ff22 	bl	800e354 <_ZN3BTD9setBdaddrEPh>
                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800e510:	2300      	movs	r3, #0
 800e512:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800e516:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e51a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e51c:	f001 fb8b 	bl	800fc36 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e520:	2300      	movs	r3, #0
 800e522:	461a      	mov	r2, r3
 800e524:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e528:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e52a:	f001 fb6d 	bl	800fc08 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	4620      	mov	r0, r4
 800e534:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800e536:	f04f 0bd1 	mov.w	fp, #209	; 0xd1
 800e53a:	e7b8      	b.n	800e4ae <_ZN3BTD4InitEhhb+0xa2>
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800e53c:	f104 0114 	add.w	r1, r4, #20
 800e540:	4620      	mov	r0, r4
 800e542:	f7ff ff30 	bl	800e3a6 <_ZN3BTD13setMoveBdaddrEPh>
 800e546:	e7e3      	b.n	800e510 <_ZN3BTD4InitEhhb+0x104>
 800e548:	f8cd 900c 	str.w	r9, [sp, #12]
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800e54c:	1d22      	adds	r2, r4, #4
 800e54e:	9204      	str	r2, [sp, #16]
        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800e550:	2200      	movs	r2, #0
 800e552:	f88d 2014 	strb.w	r2, [sp, #20]
        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800e556:	f88d 2020 	strb.w	r2, [sp, #32]
 800e55a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800e55e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800e562:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e566:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 800e56a:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
 800e56e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800e572:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        theBuffer.pValue = varBuffer;
 800e576:	a90b      	add	r1, sp, #44	; 0x2c
 800e578:	f8cd 1015 	str.w	r1, [sp, #21]
                pBuf = (uint8_t*)pbuf->pValue;
 800e57c:	9107      	str	r1, [sp, #28]
                pBuf = (uint8_t*)pbuf->pValue;
 800e57e:	9109      	str	r1, [sp, #36]	; 0x24
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800e580:	a903      	add	r1, sp, #12
 800e582:	9100      	str	r1, [sp, #0]
 800e584:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e588:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e58a:	f001 fb17 	bl	800fbbc <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800e58e:	4683      	mov	fp, r0
                        if(rcode) // Check error code
 800e590:	f1bb 0f00 	cmp.w	fp, #0
 800e594:	d187      	bne.n	800e4a6 <_ZN3BTD4InitEhhb+0x9a>
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800e596:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800e59a:	2a03      	cmp	r2, #3
 800e59c:	d832      	bhi.n	800e604 <_ZN3BTD4InitEhhb+0x1f8>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800e59e:	3501      	adds	r5, #1
 800e5a0:	b2eb      	uxtb	r3, r5
 800e5a2:	42b3      	cmp	r3, r6
 800e5a4:	d252      	bcs.n	800e64c <_ZN3BTD4InitEhhb+0x240>
 800e5a6:	b2eb      	uxtb	r3, r5
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800e5a8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800e5aa:	42ba      	cmp	r2, r7
 800e5ac:	d0cc      	beq.n	800e548 <_ZN3BTD4InitEhhb+0x13c>
 800e5ae:	4542      	cmp	r2, r8
 800e5b0:	d0ca      	beq.n	800e548 <_ZN3BTD4InitEhhb+0x13c>
UseOr(false) {
 800e5b2:	4a2f      	ldr	r2, [pc, #188]	; (800e670 <_ZN3BTD4InitEhhb+0x264>)
 800e5b4:	9203      	str	r2, [sp, #12]
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800e5b6:	1d22      	adds	r2, r4, #4
 800e5b8:	9204      	str	r2, [sp, #16]
        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f88d 2014 	strb.w	r2, [sp, #20]
        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800e5c0:	f88d 2020 	strb.w	r2, [sp, #32]
 800e5c4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800e5c8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 800e5cc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800e5d0:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
 800e5d4:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
 800e5d8:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800e5dc:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
        theBuffer.pValue = varBuffer;
 800e5e0:	a90b      	add	r1, sp, #44	; 0x2c
 800e5e2:	f8cd 1015 	str.w	r1, [sp, #21]
                pBuf = (uint8_t*)pbuf->pValue;
 800e5e6:	9107      	str	r1, [sp, #28]
                pBuf = (uint8_t*)pbuf->pValue;
 800e5e8:	9109      	str	r1, [sp, #36]	; 0x24
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800e5ea:	a903      	add	r1, sp, #12
 800e5ec:	9100      	str	r1, [sp, #0]
 800e5ee:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e5f2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e5f4:	f001 fae2 	bl	800fbbc <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800e5f8:	4683      	mov	fp, r0
 800e5fa:	e7c9      	b.n	800e590 <_ZN3BTD4InitEhhb+0x184>
                if(bNumEP < BTD_MAX_ENDPOINTS)
 800e5fc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800e600:	2a03      	cmp	r2, #3
 800e602:	d923      	bls.n	800e64c <_ZN3BTD4InitEhhb+0x240>
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800e604:	4653      	mov	r3, sl
 800e606:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e60a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e60c:	f000 fee6 	bl	800f3dc <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
                if(rcode)
 800e610:	4683      	mov	fp, r0
 800e612:	2800      	cmp	r0, #0
 800e614:	f47f af47 	bne.w	800e4a6 <_ZN3BTD4InitEhhb+0x9a>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800e618:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800e61c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800e620:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e624:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e626:	f001 fb06 	bl	800fc36 <_ZN3USB7setConfEhhh>
                if(rcode)
 800e62a:	4683      	mov	fp, r0
 800e62c:	2800      	cmp	r0, #0
 800e62e:	f47f af3a 	bne.w	800e4a6 <_ZN3BTD4InitEhhb+0x9a>
                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800e632:	2364      	movs	r3, #100	; 0x64
 800e634:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
                hci_counter = 0;
 800e638:	2300      	movs	r3, #0
 800e63a:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800e63e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
                waitingForConnection = false;
 800e642:	7223      	strb	r3, [r4, #8]
                bPollEnable = true;
 800e644:	2301      	movs	r3, #1
 800e646:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        return 0; // Successful configuration
 800e64a:	e730      	b.n	800e4ae <_ZN3BTD4InitEhhb+0xa2>
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e64c:	2300      	movs	r3, #0
 800e64e:	461a      	mov	r2, r3
 800e650:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 800e654:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e656:	f001 fad7 	bl	800fc08 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800e65a:	f04f 0bd1 	mov.w	fp, #209	; 0xd1
 800e65e:	e722      	b.n	800e4a6 <_ZN3BTD4InitEhhb+0x9a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e660:	f04f 0bd6 	mov.w	fp, #214	; 0xd6
 800e664:	e723      	b.n	800e4ae <_ZN3BTD4InitEhhb+0xa2>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e666:	f04f 0bd6 	mov.w	fp, #214	; 0xd6
 800e66a:	e720      	b.n	800e4ae <_ZN3BTD4InitEhhb+0xa2>
 800e66c:	0a5c21e8 	.word	0x0a5c21e8
 800e670:	08011454 	.word	0x08011454
 800e674:	08011448 	.word	0x08011448
 800e678:	050d065a 	.word	0x050d065a

0800e67c <_ZN5BTHID14ParseBTHIDDataEhPh>:
        };
 800e67c:	4770      	bx	lr

0800e67e <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
                return;
        };
 800e67e:	4770      	bx	lr

0800e680 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
                return;
        }
 800e680:	4770      	bx	lr

0800e682 <_ZN5BTHID5ResetEv>:
        interrupt_dcid[1] = 0x00;

        Reset();
}

void BTHID::Reset() {
 800e682:	b508      	push	{r3, lr}
        connected = false;
 800e684:	2200      	movs	r2, #0
 800e686:	7542      	strb	r2, [r0, #21]
        activeConnection = false;
 800e688:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
        SDPConnected = false;
 800e68c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800e690:	6102      	str	r2, [r0, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800e692:	210a      	movs	r1, #10
 800e694:	7681      	strb	r1, [r0, #26]
        l2cap_state = L2CAP_WAIT;
 800e696:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
        ResetBTHID();
 800e69a:	6803      	ldr	r3, [r0, #0]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	4798      	blx	r3
}
 800e6a0:	bd08      	pop	{r3, pc}

0800e6a2 <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800e6a2:	b510      	push	{r4, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	4604      	mov	r4, r0
        if(SDPConnected)
 800e6a8:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800e6ac:	b9bb      	cbnz	r3, 800e6de <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800e6ae:	7d22      	ldrb	r2, [r4, #20]
 800e6b0:	3201      	adds	r2, #1
 800e6b2:	b2d2      	uxtb	r2, r2
 800e6b4:	7522      	strb	r2, [r4, #20]
 800e6b6:	f104 036d 	add.w	r3, r4, #109	; 0x6d
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	f104 0318 	add.w	r3, r4, #24
 800e6c0:	89a1      	ldrh	r1, [r4, #12]
 800e6c2:	68a0      	ldr	r0, [r4, #8]
 800e6c4:	f7ff fdd5 	bl	800e272 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	689b      	ldr	r3, [r3, #8]
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800e6d0:	230e      	movs	r3, #14
 800e6d2:	76a3      	strb	r3, [r4, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800e6d4:	2309      	movs	r3, #9
 800e6d6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
 800e6da:	b002      	add	sp, #8
 800e6dc:	bd10      	pop	{r4, pc}
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800e6de:	7d02      	ldrb	r2, [r0, #20]
 800e6e0:	3201      	adds	r2, #1
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	7502      	strb	r2, [r0, #20]
 800e6e6:	f100 036f 	add.w	r3, r0, #111	; 0x6f
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	f100 031b 	add.w	r3, r0, #27
 800e6f0:	8981      	ldrh	r1, [r0, #12]
 800e6f2:	6880      	ldr	r0, [r0, #8]
 800e6f4:	f7ff fdbd 	bl	800e272 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
 800e6f8:	e7d9      	b.n	800e6ae <_ZN5BTHID10disconnectEv+0xc>

0800e6fa <_ZN5BTHID3RunEv>:
                        break;
        }
}

void BTHID::Run() {
        switch(l2cap_state) {
 800e6fa:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d14f      	bne.n	800e7a2 <_ZN5BTHID3RunEv+0xa8>
void BTHID::Run() {
 800e702:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e704:	b083      	sub	sp, #12
 800e706:	4604      	mov	r4, r0
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800e708:	6880      	ldr	r0, [r0, #8]
 800e70a:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800e70e:	b133      	cbz	r3, 800e71e <_ZN5BTHID3RunEv+0x24>
 800e710:	7a43      	ldrb	r3, [r0, #9]
 800e712:	b923      	cbnz	r3, 800e71e <_ZN5BTHID3RunEv+0x24>
 800e714:	7d63      	ldrb	r3, [r4, #21]
 800e716:	b913      	cbnz	r3, 800e71e <_ZN5BTHID3RunEv+0x24>
 800e718:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800e71c:	b12b      	cbz	r3, 800e72a <_ZN5BTHID3RunEv+0x30>
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
                                l2cap_event_flag = 0; // Reset flags
                                identifier = 0;
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800e71e:	6923      	ldr	r3, [r4, #16]
 800e720:	f013 0f01 	tst.w	r3, #1
 800e724:	d115      	bne.n	800e752 <_ZN5BTHID3RunEv+0x58>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
        }
}
 800e726:	b003      	add	sp, #12
 800e728:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                pBtd->l2capConnectionClaimed = true;
 800e72a:	2301      	movs	r3, #1
 800e72c:	7243      	strb	r3, [r0, #9]
                                activeConnection = true;
 800e72e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800e732:	68a0      	ldr	r0, [r4, #8]
 800e734:	8b41      	ldrh	r1, [r0, #26]
 800e736:	81a1      	strh	r1, [r4, #12]
                                l2cap_event_flag = 0; // Reset flags
 800e738:	2200      	movs	r2, #0
 800e73a:	6122      	str	r2, [r4, #16]
                                identifier = 0;
 800e73c:	7522      	strb	r2, [r4, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800e73e:	2311      	movs	r3, #17
 800e740:	9300      	str	r3, [sp, #0]
 800e742:	f104 036b 	add.w	r3, r4, #107	; 0x6b
 800e746:	f7ff fce8 	bl	800e11a <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800e74a:	2302      	movs	r3, #2
 800e74c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800e750:	e7e9      	b.n	800e726 <_ZN5BTHID3RunEv+0x2c>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800e752:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800e756:	f104 0516 	add.w	r5, r4, #22
 800e75a:	2601      	movs	r6, #1
 800e75c:	9601      	str	r6, [sp, #4]
 800e75e:	9500      	str	r5, [sp, #0]
 800e760:	463b      	mov	r3, r7
 800e762:	7d22      	ldrb	r2, [r4, #20]
 800e764:	89a1      	ldrh	r1, [r4, #12]
 800e766:	f7ff fcfc 	bl	800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e76a:	4630      	mov	r0, r6
 800e76c:	f7f3 fb4e 	bl	8001e0c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800e770:	2300      	movs	r3, #0
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	9500      	str	r5, [sp, #0]
 800e776:	463b      	mov	r3, r7
 800e778:	7d22      	ldrb	r2, [r4, #20]
 800e77a:	89a1      	ldrh	r1, [r4, #12]
 800e77c:	68a0      	ldr	r0, [r4, #8]
 800e77e:	f7ff fcf0 	bl	800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e782:	7d23      	ldrb	r3, [r4, #20]
 800e784:	4433      	add	r3, r6
 800e786:	7523      	strb	r3, [r4, #20]
                                delay(1);
 800e788:	4630      	mov	r0, r6
 800e78a:	f7f3 fb3f 	bl	8001e0c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800e78e:	462b      	mov	r3, r5
 800e790:	7d22      	ldrb	r2, [r4, #20]
 800e792:	89a1      	ldrh	r1, [r4, #12]
 800e794:	68a0      	ldr	r0, [r4, #8]
 800e796:	f7ff fd12 	bl	800e1be <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800e79a:	2304      	movs	r3, #4
 800e79c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
 800e7a0:	e7c1      	b.n	800e726 <_ZN5BTHID3RunEv+0x2c>
 800e7a2:	4770      	bx	lr

0800e7a4 <_ZN5BTHIDC1EP3BTDbPKc>:
BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a6:	4604      	mov	r4, r0
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800e7a8:	4817      	ldr	r0, [pc, #92]	; (800e808 <_ZN5BTHIDC1EP3BTDbPKc+0x64>)
 800e7aa:	6020      	str	r0, [r4, #0]
 800e7ac:	60a1      	str	r1, [r4, #8]
                if(pBtd)
 800e7ae:	b141      	cbz	r1, 800e7c2 <_ZN5BTHIDC1EP3BTDbPKc+0x1e>
 800e7b0:	f101 0564 	add.w	r5, r1, #100	; 0x64
 800e7b4:	2000      	movs	r0, #0
                        if(!btService[i]) {
 800e7b6:	f855 6b04 	ldr.w	r6, [r5], #4
 800e7ba:	b306      	cbz	r6, 800e7fe <_ZN5BTHIDC1EP3BTDbPKc+0x5a>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800e7bc:	3001      	adds	r0, #1
 800e7be:	2804      	cmp	r0, #4
 800e7c0:	d1f9      	bne.n	800e7b6 <_ZN5BTHIDC1EP3BTDbPKc+0x12>
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800e7c2:	4812      	ldr	r0, [pc, #72]	; (800e80c <_ZN5BTHIDC1EP3BTDbPKc+0x68>)
 800e7c4:	6020      	str	r0, [r4, #0]
 800e7c6:	2000      	movs	r0, #0
 800e7c8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
                pRptParser[i] = NULL;
 800e7cc:	6220      	str	r0, [r4, #32]
 800e7ce:	6260      	str	r0, [r4, #36]	; 0x24
        pBtd->pairWithHIDDevice = pair;
 800e7d0:	f881 2048 	strb.w	r2, [r1, #72]	; 0x48
        pBtd->btdPin = pin;
 800e7d4:	610b      	str	r3, [r1, #16]
        sdp_dcid[0] = 0x50; // 0x0050
 800e7d6:	2350      	movs	r3, #80	; 0x50
 800e7d8:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800e7dc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800e7e0:	2370      	movs	r3, #112	; 0x70
 800e7e2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800e7e6:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800e7ea:	2371      	movs	r3, #113	; 0x71
 800e7ec:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800e7f0:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
        Reset();
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f7ff ff44 	bl	800e682 <_ZN5BTHID5ResetEv>
}
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                btService[i] = pService;
 800e7fe:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 800e802:	667c      	str	r4, [r7, #100]	; 0x64
                                return i; // Return ID
 800e804:	e7dd      	b.n	800e7c2 <_ZN5BTHIDC1EP3BTDbPKc+0x1e>
 800e806:	bf00      	nop
 800e808:	080114a0 	.word	0x080114a0
 800e80c:	080114bc 	.word	0x080114bc

0800e810 <_ZN5BTHID8SDP_taskEv>:
void BTHID::SDP_task() {
 800e810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e812:	b083      	sub	sp, #12
 800e814:	4604      	mov	r4, r0
        switch(l2cap_sdp_state) {
 800e816:	7e83      	ldrb	r3, [r0, #26]
 800e818:	2b0b      	cmp	r3, #11
 800e81a:	d048      	beq.n	800e8ae <_ZN5BTHID8SDP_taskEv+0x9e>
 800e81c:	2b0e      	cmp	r3, #14
 800e81e:	d053      	beq.n	800e8c8 <_ZN5BTHID8SDP_taskEv+0xb8>
 800e820:	2b0a      	cmp	r3, #10
 800e822:	d001      	beq.n	800e828 <_ZN5BTHID8SDP_taskEv+0x18>
}
 800e824:	b003      	add	sp, #12
 800e826:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800e828:	6903      	ldr	r3, [r0, #16]
 800e82a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e82e:	d113      	bne.n	800e858 <_ZN5BTHID8SDP_taskEv+0x48>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800e830:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800e834:	d0f6      	beq.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800e836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e83a:	6103      	str	r3, [r0, #16]
                                SDPConnected = false;
 800e83c:	2300      	movs	r3, #0
 800e83e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800e842:	f100 031b 	add.w	r3, r0, #27
 800e846:	9300      	str	r3, [sp, #0]
 800e848:	f100 036f 	add.w	r3, r0, #111	; 0x6f
 800e84c:	7d02      	ldrb	r2, [r0, #20]
 800e84e:	8981      	ldrh	r1, [r0, #12]
 800e850:	6880      	ldr	r0, [r0, #8]
 800e852:	f7ff fd32 	bl	800e2ba <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
 800e856:	e7e5      	b.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800e858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e85c:	6103      	str	r3, [r0, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800e85e:	f100 076f 	add.w	r7, r0, #111	; 0x6f
 800e862:	f100 051b 	add.w	r5, r0, #27
 800e866:	2601      	movs	r6, #1
 800e868:	9601      	str	r6, [sp, #4]
 800e86a:	9500      	str	r5, [sp, #0]
 800e86c:	463b      	mov	r3, r7
 800e86e:	7d02      	ldrb	r2, [r0, #20]
 800e870:	8981      	ldrh	r1, [r0, #12]
 800e872:	6880      	ldr	r0, [r0, #8]
 800e874:	f7ff fc75 	bl	800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e878:	4630      	mov	r0, r6
 800e87a:	f7f3 fac7 	bl	8001e0c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800e87e:	2300      	movs	r3, #0
 800e880:	9301      	str	r3, [sp, #4]
 800e882:	9500      	str	r5, [sp, #0]
 800e884:	463b      	mov	r3, r7
 800e886:	7d22      	ldrb	r2, [r4, #20]
 800e888:	89a1      	ldrh	r1, [r4, #12]
 800e88a:	68a0      	ldr	r0, [r4, #8]
 800e88c:	f7ff fc69 	bl	800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e890:	7d23      	ldrb	r3, [r4, #20]
 800e892:	4433      	add	r3, r6
 800e894:	7523      	strb	r3, [r4, #20]
                                delay(1);
 800e896:	4630      	mov	r0, r6
 800e898:	f7f3 fab8 	bl	8001e0c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800e89c:	462b      	mov	r3, r5
 800e89e:	7d22      	ldrb	r2, [r4, #20]
 800e8a0:	89a1      	ldrh	r1, [r4, #12]
 800e8a2:	68a0      	ldr	r0, [r4, #8]
 800e8a4:	f7ff fc8b 	bl	800e1be <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800e8a8:	230b      	movs	r3, #11
 800e8aa:	76a3      	strb	r3, [r4, #26]
 800e8ac:	e7ba      	b.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800e8ae:	6903      	ldr	r3, [r0, #16]
 800e8b0:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e8b4:	d0b6      	beq.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800e8b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e8ba:	6103      	str	r3, [r0, #16]
                                SDPConnected = true;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800e8c2:	230a      	movs	r3, #10
 800e8c4:	7683      	strb	r3, [r0, #26]
 800e8c6:	e7ad      	b.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800e8c8:	6903      	ldr	r3, [r0, #16]
 800e8ca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800e8ce:	d0a9      	beq.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>
                                pBtd->hci_disconnect(hci_handle);
 800e8d0:	8981      	ldrh	r1, [r0, #12]
 800e8d2:	6880      	ldr	r0, [r0, #8]
 800e8d4:	f7fe ffbf 	bl	800d856 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800e8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8dc:	81a3      	strh	r3, [r4, #12]
                                Reset();
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	4798      	blx	r3
}
 800e8e6:	e79d      	b.n	800e824 <_ZN5BTHID8SDP_taskEv+0x14>

0800e8e8 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800e8e8:	b500      	push	{lr}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	4613      	mov	r3, r2
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800e8ee:	7f02      	ldrb	r2, [r0, #28]
 800e8f0:	9201      	str	r2, [sp, #4]
 800e8f2:	7ec2      	ldrb	r2, [r0, #27]
 800e8f4:	9200      	str	r2, [sp, #0]
 800e8f6:	460a      	mov	r2, r1
 800e8f8:	8981      	ldrh	r1, [r0, #12]
 800e8fa:	6880      	ldr	r0, [r0, #8]
 800e8fc:	f7ff fbd3 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e900:	b003      	add	sp, #12
 800e902:	f85d fb04 	ldr.w	pc, [sp], #4

0800e906 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800e906:	b510      	push	{r4, lr}
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800e908:	2407      	movs	r4, #7
 800e90a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800e90e:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800e912:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800e916:	2200      	movs	r2, #0
 800e918:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800e91c:	2105      	movs	r1, #5
 800e91e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800e922:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800e926:	2102      	movs	r1, #2
 800e928:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800e92c:	2135      	movs	r1, #53	; 0x35
 800e92e:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800e932:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800e936:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800e93a:	220a      	movs	r2, #10
 800e93c:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800e940:	f7ff ffd2 	bl	800e8e8 <_ZN5BTHID11SDP_CommandEPhh>
}
 800e944:	bd10      	pop	{r4, pc}

0800e946 <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800e946:	b500      	push	{lr}
 800e948:	b085      	sub	sp, #20
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800e94a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800e94e:	2b01      	cmp	r3, #1
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800e950:	bf84      	itt	hi
 800e952:	2300      	movhi	r3, #0
 800e954:	f880 3068 	strbhi.w	r3, [r0, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800e958:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800e95c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e960:	f88d 300f 	strb.w	r3, [sp, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800e964:	7dc3      	ldrb	r3, [r0, #23]
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	7d83      	ldrb	r3, [r0, #22]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	2301      	movs	r3, #1
 800e96e:	f10d 020f 	add.w	r2, sp, #15
 800e972:	8981      	ldrh	r1, [r0, #12]
 800e974:	6880      	ldr	r0, [r0, #8]
 800e976:	f7ff fb96 	bl	800e0a6 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800e97a:	b005      	add	sp, #20
 800e97c:	f85d fb04 	ldr.w	pc, [sp], #4

0800e980 <_ZN5BTHID10L2CAP_taskEv>:
void BTHID::L2CAP_task() {
 800e980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e982:	b083      	sub	sp, #12
 800e984:	4604      	mov	r4, r0
        switch(l2cap_state) {
 800e986:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800e98a:	3b02      	subs	r3, #2
 800e98c:	2b07      	cmp	r3, #7
 800e98e:	d809      	bhi.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
 800e990:	e8df f003 	tbb	[pc, r3]
 800e994:	a3044f3d 	.word	0xa3044f3d
 800e998:	8d7a6810 	.word	0x8d7a6810
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800e99c:	6903      	ldr	r3, [r0, #16]
 800e99e:	f013 0f02 	tst.w	r3, #2
 800e9a2:	d101      	bne.n	800e9a8 <_ZN5BTHID10L2CAP_taskEv+0x28>
}
 800e9a4:	b003      	add	sp, #12
 800e9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800e9a8:	f7ff ffcd 	bl	800e946 <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800e9ac:	2306      	movs	r3, #6
 800e9ae:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800e9b2:	e7f7      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800e9b4:	6903      	ldr	r3, [r0, #16]
 800e9b6:	f013 0f10 	tst.w	r3, #16
 800e9ba:	d0f3      	beq.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800e9bc:	f100 076d 	add.w	r7, r0, #109	; 0x6d
 800e9c0:	f100 0518 	add.w	r5, r0, #24
 800e9c4:	2601      	movs	r6, #1
 800e9c6:	9601      	str	r6, [sp, #4]
 800e9c8:	9500      	str	r5, [sp, #0]
 800e9ca:	463b      	mov	r3, r7
 800e9cc:	7d02      	ldrb	r2, [r0, #20]
 800e9ce:	8981      	ldrh	r1, [r0, #12]
 800e9d0:	6880      	ldr	r0, [r0, #8]
 800e9d2:	f7ff fbc6 	bl	800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	f7f3 fa18 	bl	8001e0c <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800e9dc:	2300      	movs	r3, #0
 800e9de:	9301      	str	r3, [sp, #4]
 800e9e0:	9500      	str	r5, [sp, #0]
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	7d22      	ldrb	r2, [r4, #20]
 800e9e6:	89a1      	ldrh	r1, [r4, #12]
 800e9e8:	68a0      	ldr	r0, [r4, #8]
 800e9ea:	f7ff fbba 	bl	800e162 <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800e9ee:	7d23      	ldrb	r3, [r4, #20]
 800e9f0:	4433      	add	r3, r6
 800e9f2:	7523      	strb	r3, [r4, #20]
                                delay(1);
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f7f3 fa09 	bl	8001e0c <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800e9fa:	462b      	mov	r3, r5
 800e9fc:	7d22      	ldrb	r2, [r4, #20]
 800e9fe:	89a1      	ldrh	r1, [r4, #12]
 800ea00:	68a0      	ldr	r0, [r4, #8]
 800ea02:	f7ff fbdc 	bl	800e1be <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800ea06:	2308      	movs	r3, #8
 800ea08:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800ea0c:	e7ca      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800ea0e:	6903      	ldr	r3, [r0, #16]
 800ea10:	f013 0f04 	tst.w	r3, #4
 800ea14:	d0c6      	beq.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                identifier++;
 800ea16:	7d02      	ldrb	r2, [r0, #20]
 800ea18:	3201      	adds	r2, #1
 800ea1a:	b2d2      	uxtb	r2, r2
 800ea1c:	7502      	strb	r2, [r0, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800ea1e:	f100 0316 	add.w	r3, r0, #22
 800ea22:	8981      	ldrh	r1, [r0, #12]
 800ea24:	6880      	ldr	r0, [r0, #8]
 800ea26:	f7ff fbca 	bl	800e1be <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800ea2a:	2303      	movs	r3, #3
 800ea2c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800ea30:	e7b8      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800ea32:	6903      	ldr	r3, [r0, #16]
 800ea34:	f013 0f02 	tst.w	r3, #2
 800ea38:	d0b4      	beq.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800ea3a:	f7ff ff84 	bl	800e946 <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800ea3e:	2001      	movs	r0, #1
 800ea40:	f7f3 f9e4 	bl	8001e0c <HAL_Delay>
                                identifier++;
 800ea44:	7d22      	ldrb	r2, [r4, #20]
 800ea46:	3201      	adds	r2, #1
 800ea48:	b2d2      	uxtb	r2, r2
 800ea4a:	7522      	strb	r2, [r4, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800ea4c:	2313      	movs	r3, #19
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	f104 036d 	add.w	r3, r4, #109	; 0x6d
 800ea54:	89a1      	ldrh	r1, [r4, #12]
 800ea56:	68a0      	ldr	r0, [r4, #8]
 800ea58:	f7ff fb5f 	bl	800e11a <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800ea5c:	2307      	movs	r3, #7
 800ea5e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800ea62:	e79f      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800ea64:	6903      	ldr	r3, [r0, #16]
 800ea66:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ea6a:	d09b      	beq.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                identifier++;
 800ea6c:	7d02      	ldrb	r2, [r0, #20]
 800ea6e:	3201      	adds	r2, #1
 800ea70:	b2d2      	uxtb	r2, r2
 800ea72:	7502      	strb	r2, [r0, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800ea74:	f100 0318 	add.w	r3, r0, #24
 800ea78:	8981      	ldrh	r1, [r0, #12]
 800ea7a:	6880      	ldr	r0, [r0, #8]
 800ea7c:	f7ff fb9f 	bl	800e1be <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800ea80:	2308      	movs	r3, #8
 800ea82:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800ea86:	e78d      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800ea88:	6903      	ldr	r3, [r0, #16]
 800ea8a:	f013 0f20 	tst.w	r3, #32
 800ea8e:	d089      	beq.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                pBtd->connectToHIDDevice = false;
 800ea90:	6882      	ldr	r2, [r0, #8]
 800ea92:	2300      	movs	r3, #0
 800ea94:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800ea98:	6882      	ldr	r2, [r0, #8]
 800ea9a:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
                                connected = true;
 800ea9e:	2501      	movs	r5, #1
 800eaa0:	7545      	strb	r5, [r0, #21]
                                onInit();
 800eaa2:	6803      	ldr	r3, [r0, #0]
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800eaa8:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
 800eaac:	e77a      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800eaae:	6903      	ldr	r3, [r0, #16]
 800eab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eab4:	f43f af76 	beq.w	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                identifier++;
 800eab8:	7d02      	ldrb	r2, [r0, #20]
 800eaba:	3201      	adds	r2, #1
 800eabc:	b2d2      	uxtb	r2, r2
 800eabe:	7502      	strb	r2, [r0, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800eac0:	f100 036b 	add.w	r3, r0, #107	; 0x6b
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	f100 0316 	add.w	r3, r0, #22
 800eaca:	8981      	ldrh	r1, [r0, #12]
 800eacc:	6880      	ldr	r0, [r0, #8]
 800eace:	f7ff fbd0 	bl	800e272 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800ead2:	2305      	movs	r3, #5
 800ead4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800ead8:	e764      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800eada:	6903      	ldr	r3, [r0, #16]
 800eadc:	f013 0f08 	tst.w	r3, #8
 800eae0:	f43f af60 	beq.w	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>
                                pBtd->hci_disconnect(hci_handle);
 800eae4:	8981      	ldrh	r1, [r0, #12]
 800eae6:	6880      	ldr	r0, [r0, #8]
 800eae8:	f7fe feb5 	bl	800d856 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800eaec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaf0:	81a3      	strh	r3, [r4, #12]
                                l2cap_event_flag = 0; // Reset flags
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	6123      	str	r3, [r4, #16]
                                l2cap_state = L2CAP_WAIT;
 800eaf6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
 800eafa:	e753      	b.n	800e9a4 <_ZN5BTHID10L2CAP_taskEv+0x24>

0800eafc <_ZN5BTHID7ACLDataEPh>:
void BTHID::ACLData(uint8_t* l2capinbuf) {
 800eafc:	b570      	push	{r4, r5, r6, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	4604      	mov	r4, r0
 800eb02:	460d      	mov	r5, r1
        if(!connected) {
 800eb04:	7d43      	ldrb	r3, [r0, #21]
 800eb06:	b913      	cbnz	r3, 800eb0e <_ZN5BTHID7ACLDataEPh+0x12>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800eb08:	7a0b      	ldrb	r3, [r1, #8]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d014      	beq.n	800eb38 <_ZN5BTHID7ACLDataEPh+0x3c>
        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800eb0e:	68a3      	ldr	r3, [r4, #8]
 800eb10:	7a5a      	ldrb	r2, [r3, #9]
 800eb12:	b952      	cbnz	r2, 800eb2a <_ZN5BTHID7ACLDataEPh+0x2e>
 800eb14:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800eb18:	b13a      	cbz	r2, 800eb2a <_ZN5BTHID7ACLDataEPh+0x2e>
 800eb1a:	7d62      	ldrb	r2, [r4, #21]
 800eb1c:	b92a      	cbnz	r2, 800eb2a <_ZN5BTHID7ACLDataEPh+0x2e>
 800eb1e:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 800eb22:	b912      	cbnz	r2, 800eb2a <_ZN5BTHID7ACLDataEPh+0x2e>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800eb24:	7a2a      	ldrb	r2, [r5, #8]
 800eb26:	2a02      	cmp	r2, #2
 800eb28:	d018      	beq.n	800eb5c <_ZN5BTHID7ACLDataEPh+0x60>
        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800eb2a:	89a1      	ldrh	r1, [r4, #12]
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800eb2c:	782a      	ldrb	r2, [r5, #0]
 800eb2e:	b2cb      	uxtb	r3, r1
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d027      	beq.n	800eb84 <_ZN5BTHID7ACLDataEPh+0x88>
}
 800eb34:	b002      	add	sp, #8
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800eb38:	7b4a      	ldrb	r2, [r1, #13]
 800eb3a:	7b0b      	ldrb	r3, [r1, #12]
 800eb3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d1e4      	bne.n	800eb0e <_ZN5BTHID7ACLDataEPh+0x12>
 800eb44:	6883      	ldr	r3, [r0, #8]
 800eb46:	7a9a      	ldrb	r2, [r3, #10]
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	d1e0      	bne.n	800eb0e <_ZN5BTHID7ACLDataEPh+0x12>
                                pBtd->sdpConnectionClaimed = true;
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800eb50:	6883      	ldr	r3, [r0, #8]
 800eb52:	8b5b      	ldrh	r3, [r3, #26]
 800eb54:	8183      	strh	r3, [r0, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800eb56:	230a      	movs	r3, #10
 800eb58:	7683      	strb	r3, [r0, #26]
 800eb5a:	e7d8      	b.n	800eb0e <_ZN5BTHID7ACLDataEPh+0x12>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800eb5c:	7b69      	ldrb	r1, [r5, #13]
 800eb5e:	7b2a      	ldrb	r2, [r5, #12]
 800eb60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800eb64:	2a11      	cmp	r2, #17
 800eb66:	d1e0      	bne.n	800eb2a <_ZN5BTHID7ACLDataEPh+0x2e>
                                pBtd->incomingHIDDevice = false;
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800eb6e:	68a1      	ldr	r1, [r4, #8]
 800eb70:	2301      	movs	r3, #1
 800eb72:	724b      	strb	r3, [r1, #9]
                                activeConnection = true;
 800eb74:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800eb78:	68a3      	ldr	r3, [r4, #8]
 800eb7a:	8b5b      	ldrh	r3, [r3, #26]
 800eb7c:	81a3      	strh	r3, [r4, #12]
                                l2cap_state = L2CAP_WAIT;
 800eb7e:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
 800eb82:	e7d2      	b.n	800eb2a <_ZN5BTHID7ACLDataEPh+0x2e>
 800eb84:	786a      	ldrb	r2, [r5, #1]
 800eb86:	120b      	asrs	r3, r1, #8
 800eb88:	f043 0320 	orr.w	r3, r3, #32
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d1d1      	bne.n	800eb34 <_ZN5BTHID7ACLDataEPh+0x38>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800eb90:	79ab      	ldrb	r3, [r5, #6]
 800eb92:	79ea      	ldrb	r2, [r5, #7]
 800eb94:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
 800eb98:	2801      	cmp	r0, #1
 800eb9a:	d015      	beq.n	800ebc8 <_ZN5BTHID7ACLDataEPh+0xcc>
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800eb9c:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 800eba0:	4299      	cmp	r1, r3
 800eba2:	f000 8181 	beq.w	800eea8 <_ZN5BTHID7ACLDataEPh+0x3ac>
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800eba6:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 800ebaa:	4299      	cmp	r1, r3
 800ebac:	f000 81d0 	beq.w	800ef50 <_ZN5BTHID7ACLDataEPh+0x454>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800ebb0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800ebb4:	4299      	cmp	r1, r3
 800ebb6:	f000 8202 	beq.w	800efbe <_ZN5BTHID7ACLDataEPh+0x4c2>
                SDP_task();
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f7ff fe28 	bl	800e810 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f7ff fedd 	bl	800e980 <_ZN5BTHID10L2CAP_taskEv>
}
 800ebc6:	e7b5      	b.n	800eb34 <_ZN5BTHID7ACLDataEPh+0x38>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800ebc8:	7a2b      	ldrb	r3, [r5, #8]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d0f5      	beq.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d018      	beq.n	800ec04 <_ZN5BTHID7ACLDataEPh+0x108>
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d061      	beq.n	800ec9a <_ZN5BTHID7ACLDataEPh+0x19e>
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800ebd6:	2b05      	cmp	r3, #5
 800ebd8:	f000 808a 	beq.w	800ecf0 <_ZN5BTHID7ACLDataEPh+0x1f4>
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800ebdc:	2b04      	cmp	r3, #4
 800ebde:	f000 80c0 	beq.w	800ed62 <_ZN5BTHID7ACLDataEPh+0x266>
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800ebe2:	2b06      	cmp	r3, #6
 800ebe4:	f000 80f0 	beq.w	800edc8 <_ZN5BTHID7ACLDataEPh+0x2cc>
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800ebe8:	2b07      	cmp	r3, #7
 800ebea:	f000 8130 	beq.w	800ee4e <_ZN5BTHID7ACLDataEPh+0x352>
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800ebee:	2b0a      	cmp	r3, #10
 800ebf0:	d1e3      	bne.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                identifier = l2capinbuf[9];
 800ebf2:	7a6a      	ldrb	r2, [r5, #9]
 800ebf4:	7522      	strb	r2, [r4, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800ebf6:	7b6b      	ldrb	r3, [r5, #13]
 800ebf8:	9300      	str	r3, [sp, #0]
 800ebfa:	7b2b      	ldrb	r3, [r5, #12]
 800ebfc:	68a0      	ldr	r0, [r4, #8]
 800ebfe:	f7ff fb80 	bl	800e302 <_ZN3BTD26l2cap_information_responseEthhh>
 800ec02:	e7da      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800ec04:	7c6a      	ldrb	r2, [r5, #17]
 800ec06:	7c2b      	ldrb	r3, [r5, #16]
 800ec08:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800ec0c:	d1d5      	bne.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
 800ec0e:	7cea      	ldrb	r2, [r5, #19]
 800ec10:	7cab      	ldrb	r3, [r5, #18]
 800ec12:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800ec16:	d1d0      	bne.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800ec18:	7bab      	ldrb	r3, [r5, #14]
 800ec1a:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d017      	beq.n	800ec52 <_ZN5BTHID7ACLDataEPh+0x156>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800ec22:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d027      	beq.n	800ec7a <_ZN5BTHID7ACLDataEPh+0x17e>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800ec2a:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d1c3      	bne.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
 800ec32:	7bea      	ldrb	r2, [r5, #15]
 800ec34:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d1be      	bne.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                                identifier = l2capinbuf[9];
 800ec3c:	7a6b      	ldrb	r3, [r5, #9]
 800ec3e:	7523      	strb	r3, [r4, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800ec40:	7b2b      	ldrb	r3, [r5, #12]
 800ec42:	7623      	strb	r3, [r4, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800ec44:	7b6b      	ldrb	r3, [r5, #13]
 800ec46:	7663      	strb	r3, [r4, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800ec48:	6923      	ldr	r3, [r4, #16]
 800ec4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	e7b3      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800ec52:	7be8      	ldrb	r0, [r5, #15]
 800ec54:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800ec58:	4290      	cmp	r0, r2
 800ec5a:	d1e2      	bne.n	800ec22 <_ZN5BTHID7ACLDataEPh+0x126>
                                                identifier = l2capinbuf[9];
 800ec5c:	7a6b      	ldrb	r3, [r5, #9]
 800ec5e:	7523      	strb	r3, [r4, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800ec60:	7b2a      	ldrb	r2, [r5, #12]
 800ec62:	76e2      	strb	r2, [r4, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800ec64:	7b6a      	ldrb	r2, [r5, #13]
 800ec66:	7722      	strb	r2, [r4, #28]
                                                identifier++;
 800ec68:	3301      	adds	r3, #1
 800ec6a:	b2da      	uxtb	r2, r3
 800ec6c:	7522      	strb	r2, [r4, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800ec6e:	f104 031b 	add.w	r3, r4, #27
 800ec72:	68a0      	ldr	r0, [r4, #8]
 800ec74:	f7ff faa3 	bl	800e1be <_ZN3BTD20l2cap_config_requestEthPh>
 800ec78:	e79f      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800ec7a:	7be9      	ldrb	r1, [r5, #15]
 800ec7c:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800ec80:	4291      	cmp	r1, r2
 800ec82:	d1d2      	bne.n	800ec2a <_ZN5BTHID7ACLDataEPh+0x12e>
                                                identifier = l2capinbuf[9];
 800ec84:	7a6b      	ldrb	r3, [r5, #9]
 800ec86:	7523      	strb	r3, [r4, #20]
                                                control_scid[0] = l2capinbuf[12];
 800ec88:	7b2b      	ldrb	r3, [r5, #12]
 800ec8a:	75a3      	strb	r3, [r4, #22]
                                                control_scid[1] = l2capinbuf[13];
 800ec8c:	7b6b      	ldrb	r3, [r5, #13]
 800ec8e:	75e3      	strb	r3, [r4, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	f043 0304 	orr.w	r3, r3, #4
 800ec96:	6123      	str	r3, [r4, #16]
 800ec98:	e78f      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800ec9a:	7b6a      	ldrb	r2, [r5, #13]
 800ec9c:	7b2b      	ldrb	r3, [r5, #12]
 800ec9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d00e      	beq.n	800ecc4 <_ZN5BTHID7ACLDataEPh+0x1c8>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800eca6:	2b11      	cmp	r3, #17
 800eca8:	d017      	beq.n	800ecda <_ZN5BTHID7ACLDataEPh+0x1de>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800ecaa:	2b13      	cmp	r3, #19
 800ecac:	d185      	bne.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        identifier = l2capinbuf[9];
 800ecae:	7a6b      	ldrb	r3, [r5, #9]
 800ecb0:	7523      	strb	r3, [r4, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800ecb2:	7bab      	ldrb	r3, [r5, #14]
 800ecb4:	7623      	strb	r3, [r4, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800ecb6:	7beb      	ldrb	r3, [r5, #15]
 800ecb8:	7663      	strb	r3, [r4, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800ecba:	6923      	ldr	r3, [r4, #16]
 800ecbc:	f043 0310 	orr.w	r3, r3, #16
 800ecc0:	6123      	str	r3, [r4, #16]
 800ecc2:	e77a      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        identifier = l2capinbuf[9];
 800ecc4:	7a6b      	ldrb	r3, [r5, #9]
 800ecc6:	7523      	strb	r3, [r4, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800ecc8:	7bab      	ldrb	r3, [r5, #14]
 800ecca:	76e3      	strb	r3, [r4, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800eccc:	7beb      	ldrb	r3, [r5, #15]
 800ecce:	7723      	strb	r3, [r4, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecd6:	6123      	str	r3, [r4, #16]
 800ecd8:	e76f      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        identifier = l2capinbuf[9];
 800ecda:	7a6b      	ldrb	r3, [r5, #9]
 800ecdc:	7523      	strb	r3, [r4, #20]
                                        control_scid[0] = l2capinbuf[14];
 800ecde:	7bab      	ldrb	r3, [r5, #14]
 800ece0:	75a3      	strb	r3, [r4, #22]
                                        control_scid[1] = l2capinbuf[15];
 800ece2:	7beb      	ldrb	r3, [r5, #15]
 800ece4:	75e3      	strb	r3, [r4, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	f043 0301 	orr.w	r3, r3, #1
 800ecec:	6123      	str	r3, [r4, #16]
 800ecee:	e764      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800ecf0:	7c6a      	ldrb	r2, [r5, #17]
 800ecf2:	7c2b      	ldrb	r3, [r5, #16]
 800ecf4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800ecf8:	f47f af5f 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ecfc:	7b2b      	ldrb	r3, [r5, #12]
 800ecfe:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d015      	beq.n	800ed32 <_ZN5BTHID7ACLDataEPh+0x236>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ed06:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d01d      	beq.n	800ed4a <_ZN5BTHID7ACLDataEPh+0x24e>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800ed0e:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800ed12:	429a      	cmp	r2, r3
 800ed14:	f47f af51 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
 800ed18:	7b6a      	ldrb	r2, [r5, #13]
 800ed1a:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	f47f af4b 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                                identifier = l2capinbuf[9];
 800ed24:	7a6b      	ldrb	r3, [r5, #9]
 800ed26:	7523      	strb	r3, [r4, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800ed28:	6923      	ldr	r3, [r4, #16]
 800ed2a:	f043 0320 	orr.w	r3, r3, #32
 800ed2e:	6123      	str	r3, [r4, #16]
 800ed30:	e743      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ed32:	7b69      	ldrb	r1, [r5, #13]
 800ed34:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800ed38:	4291      	cmp	r1, r2
 800ed3a:	d1e4      	bne.n	800ed06 <_ZN5BTHID7ACLDataEPh+0x20a>
                                                identifier = l2capinbuf[9];
 800ed3c:	7a6b      	ldrb	r3, [r5, #9]
 800ed3e:	7523      	strb	r3, [r4, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed46:	6123      	str	r3, [r4, #16]
 800ed48:	e737      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ed4a:	7b69      	ldrb	r1, [r5, #13]
 800ed4c:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800ed50:	4291      	cmp	r1, r2
 800ed52:	d1dc      	bne.n	800ed0e <_ZN5BTHID7ACLDataEPh+0x212>
                                                identifier = l2capinbuf[9];
 800ed54:	7a6b      	ldrb	r3, [r5, #9]
 800ed56:	7523      	strb	r3, [r4, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800ed58:	6923      	ldr	r3, [r4, #16]
 800ed5a:	f043 0302 	orr.w	r3, r3, #2
 800ed5e:	6123      	str	r3, [r4, #16]
 800ed60:	e72b      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ed62:	7b2b      	ldrb	r3, [r5, #12]
 800ed64:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d015      	beq.n	800ed98 <_ZN5BTHID7ACLDataEPh+0x29c>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ed6c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d01d      	beq.n	800edb0 <_ZN5BTHID7ACLDataEPh+0x2b4>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800ed74:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	f47f af1e 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
 800ed7e:	7b6a      	ldrb	r2, [r5, #13]
 800ed80:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 800ed84:	429a      	cmp	r2, r3
 800ed86:	f47f af18 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800ed8a:	f104 0318 	add.w	r3, r4, #24
 800ed8e:	7a6a      	ldrb	r2, [r5, #9]
 800ed90:	68a0      	ldr	r0, [r4, #8]
 800ed92:	f7ff fa3f 	bl	800e214 <_ZN3BTD21l2cap_config_responseEthPh>
 800ed96:	e710      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ed98:	7b68      	ldrb	r0, [r5, #13]
 800ed9a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800ed9e:	4290      	cmp	r0, r2
 800eda0:	d1e4      	bne.n	800ed6c <_ZN5BTHID7ACLDataEPh+0x270>
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800eda2:	f104 031b 	add.w	r3, r4, #27
 800eda6:	7a6a      	ldrb	r2, [r5, #9]
 800eda8:	68a0      	ldr	r0, [r4, #8]
 800edaa:	f7ff fa33 	bl	800e214 <_ZN3BTD21l2cap_config_responseEthPh>
 800edae:	e704      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800edb0:	7b68      	ldrb	r0, [r5, #13]
 800edb2:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800edb6:	4290      	cmp	r0, r2
 800edb8:	d1dc      	bne.n	800ed74 <_ZN5BTHID7ACLDataEPh+0x278>
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800edba:	f104 0316 	add.w	r3, r4, #22
 800edbe:	7a6a      	ldrb	r2, [r5, #9]
 800edc0:	68a0      	ldr	r0, [r4, #8]
 800edc2:	f7ff fa27 	bl	800e214 <_ZN3BTD21l2cap_config_responseEthPh>
 800edc6:	e6f8      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800edc8:	7b2b      	ldrb	r3, [r5, #12]
 800edca:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800edce:	429a      	cmp	r2, r3
 800edd0:	d01d      	beq.n	800ee0e <_ZN5BTHID7ACLDataEPh+0x312>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800edd2:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d025      	beq.n	800ee26 <_ZN5BTHID7ACLDataEPh+0x32a>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800edda:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800edde:	429a      	cmp	r2, r3
 800ede0:	f47f aeeb 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
 800ede4:	7b6a      	ldrb	r2, [r5, #13]
 800ede6:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 800edea:	429a      	cmp	r2, r3
 800edec:	f47f aee5 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        identifier = l2capinbuf[9];
 800edf0:	7a6a      	ldrb	r2, [r5, #9]
 800edf2:	7522      	strb	r2, [r4, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800edf4:	f104 0318 	add.w	r3, r4, #24
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	f104 036d 	add.w	r3, r4, #109	; 0x6d
 800edfe:	68a0      	ldr	r0, [r4, #8]
 800ee00:	f7ff fa5b 	bl	800e2ba <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	4620      	mov	r0, r4
 800ee0a:	4798      	blx	r3
 800ee0c:	e6d5      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800ee0e:	7b68      	ldrb	r0, [r5, #13]
 800ee10:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 800ee14:	4290      	cmp	r0, r2
 800ee16:	d1dc      	bne.n	800edd2 <_ZN5BTHID7ACLDataEPh+0x2d6>
                                        identifier = l2capinbuf[9];
 800ee18:	7a6b      	ldrb	r3, [r5, #9]
 800ee1a:	7523      	strb	r3, [r4, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ee22:	6123      	str	r3, [r4, #16]
 800ee24:	e6c9      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800ee26:	7b68      	ldrb	r0, [r5, #13]
 800ee28:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800ee2c:	4290      	cmp	r0, r2
 800ee2e:	d1d4      	bne.n	800edda <_ZN5BTHID7ACLDataEPh+0x2de>
                                        identifier = l2capinbuf[9];
 800ee30:	7a6a      	ldrb	r2, [r5, #9]
 800ee32:	7522      	strb	r2, [r4, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800ee34:	f104 0316 	add.w	r3, r4, #22
 800ee38:	9300      	str	r3, [sp, #0]
 800ee3a:	f104 036b 	add.w	r3, r4, #107	; 0x6b
 800ee3e:	68a0      	ldr	r0, [r4, #8]
 800ee40:	f7ff fa3b 	bl	800e2ba <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ee44:	6823      	ldr	r3, [r4, #0]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	4620      	mov	r0, r4
 800ee4a:	4798      	blx	r3
 800ee4c:	e6b5      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800ee4e:	7b2b      	ldrb	r3, [r5, #12]
 800ee50:	7ee2      	ldrb	r2, [r4, #27]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d012      	beq.n	800ee7c <_ZN5BTHID7ACLDataEPh+0x380>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800ee56:	7da2      	ldrb	r2, [r4, #22]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d01a      	beq.n	800ee92 <_ZN5BTHID7ACLDataEPh+0x396>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800ee5c:	7e22      	ldrb	r2, [r4, #24]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	f47f aeab 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
 800ee64:	7b6a      	ldrb	r2, [r5, #13]
 800ee66:	7e63      	ldrb	r3, [r4, #25]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	f47f aea6 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                        identifier = l2capinbuf[9];
 800ee6e:	7a6b      	ldrb	r3, [r5, #9]
 800ee70:	7523      	strb	r3, [r4, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800ee72:	6923      	ldr	r3, [r4, #16]
 800ee74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee78:	6123      	str	r3, [r4, #16]
 800ee7a:	e69e      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800ee7c:	7b69      	ldrb	r1, [r5, #13]
 800ee7e:	7f22      	ldrb	r2, [r4, #28]
 800ee80:	4291      	cmp	r1, r2
 800ee82:	d1e8      	bne.n	800ee56 <_ZN5BTHID7ACLDataEPh+0x35a>
                                        identifier = l2capinbuf[9];
 800ee84:	7a6b      	ldrb	r3, [r5, #9]
 800ee86:	7523      	strb	r3, [r4, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee8e:	6123      	str	r3, [r4, #16]
 800ee90:	e693      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800ee92:	7b69      	ldrb	r1, [r5, #13]
 800ee94:	7de2      	ldrb	r2, [r4, #23]
 800ee96:	4291      	cmp	r1, r2
 800ee98:	d1e0      	bne.n	800ee5c <_ZN5BTHID7ACLDataEPh+0x360>
                                        identifier = l2capinbuf[9];
 800ee9a:	7a6b      	ldrb	r3, [r5, #9]
 800ee9c:	7523      	strb	r3, [r4, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800ee9e:	6923      	ldr	r3, [r4, #16]
 800eea0:	f043 0308 	orr.w	r3, r3, #8
 800eea4:	6123      	str	r3, [r4, #16]
 800eea6:	e688      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800eea8:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 800eeac:	4291      	cmp	r1, r2
 800eeae:	f47f ae7a 	bne.w	800eba6 <_ZN5BTHID7ACLDataEPh+0xaa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800eeb2:	7a2b      	ldrb	r3, [r5, #8]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d00a      	beq.n	800eece <_ZN5BTHID7ACLDataEPh+0x3d2>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800eeb8:	2b04      	cmp	r3, #4
 800eeba:	d028      	beq.n	800ef0e <_ZN5BTHID7ACLDataEPh+0x412>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800eebc:	2b06      	cmp	r3, #6
 800eebe:	f47f ae7c 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800eec2:	7aaa      	ldrb	r2, [r5, #10]
 800eec4:	7a69      	ldrb	r1, [r5, #9]
 800eec6:	4620      	mov	r0, r4
 800eec8:	f7ff fd1d 	bl	800e906 <_ZN5BTHID19serviceNotSupportedEhh>
 800eecc:	e675      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800eece:	2303      	movs	r3, #3
 800eed0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800eed4:	7a6b      	ldrb	r3, [r5, #9]
 800eed6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800eeda:	7aab      	ldrb	r3, [r5, #10]
 800eedc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800eee0:	2300      	movs	r3, #0
 800eee2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800eee6:	2205      	movs	r2, #5
 800eee8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800eeec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800eef0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800eef4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800eef8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                                l2capoutbuf[9] = 0x00; // No continuation state
 800eefc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                                SDP_Command(l2capoutbuf, 10);
 800ef00:	220a      	movs	r2, #10
 800ef02:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800ef06:	4620      	mov	r0, r4
 800ef08:	f7ff fcee 	bl	800e8e8 <_ZN5BTHID11SDP_CommandEPhh>
 800ef0c:	e655      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800ef0e:	2205      	movs	r2, #5
 800ef10:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800ef14:	7a6b      	ldrb	r3, [r5, #9]
 800ef16:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800ef1a:	7aab      	ldrb	r3, [r5, #10]
 800ef1c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800ef20:	2300      	movs	r3, #0
 800ef22:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800ef26:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800ef2a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800ef2e:	2202      	movs	r2, #2
 800ef30:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800ef34:	2235      	movs	r2, #53	; 0x35
 800ef36:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800ef3a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
                                l2capoutbuf[9] = 0x00; // No continuation state
 800ef3e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
                                SDP_Command(l2capoutbuf, 10);
 800ef42:	220a      	movs	r2, #10
 800ef44:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7ff fccd 	bl	800e8e8 <_ZN5BTHID11SDP_CommandEPhh>
 800ef4e:	e634      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800ef50:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
 800ef54:	4291      	cmp	r1, r2
 800ef56:	f47f ae2b 	bne.w	800ebb0 <_ZN5BTHID7ACLDataEPh+0xb4>
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800ef5a:	7a2b      	ldrb	r3, [r5, #8]
 800ef5c:	2ba1      	cmp	r3, #161	; 0xa1
 800ef5e:	f47f ae2c 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800ef62:	f7f2 ff47 	bl	8001df4 <HAL_GetTick>
 800ef66:	6760      	str	r0, [r4, #116]	; 0x74
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800ef68:	792e      	ldrb	r6, [r5, #4]
 800ef6a:	1e71      	subs	r1, r6, #1
 800ef6c:	6823      	ldr	r3, [r4, #0]
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	f105 0209 	add.w	r2, r5, #9
 800ef74:	b2c9      	uxtb	r1, r1
 800ef76:	4620      	mov	r0, r4
 800ef78:	4798      	blx	r3
                                switch(l2capinbuf[9]) { // Report ID
 800ef7a:	7a6b      	ldrb	r3, [r5, #9]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d010      	beq.n	800efa2 <_ZN5BTHID7ACLDataEPh+0x4a6>
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	f47f ae1a 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800ef86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f43f ae16 	beq.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800ef8e:	1eb3      	subs	r3, r6, #2
 800ef90:	6802      	ldr	r2, [r0, #0]
 800ef92:	350a      	adds	r5, #10
 800ef94:	9500      	str	r5, [sp, #0]
 800ef96:	6815      	ldr	r5, [r2, #0]
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	47a8      	blx	r5
 800efa0:	e60b      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800efa2:	6a20      	ldr	r0, [r4, #32]
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f43f ae08 	beq.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800efaa:	1eb3      	subs	r3, r6, #2
 800efac:	6802      	ldr	r2, [r0, #0]
 800efae:	350a      	adds	r5, #10
 800efb0:	9500      	str	r5, [sp, #0]
 800efb2:	6815      	ldr	r5, [r2, #0]
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2200      	movs	r2, #0
 800efb8:	4621      	mov	r1, r4
 800efba:	47a8      	blx	r5
 800efbc:	e5fd      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800efbe:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800efc2:	4293      	cmp	r3, r2
 800efc4:	f47f adf9 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800efc8:	7a2b      	ldrb	r3, [r5, #8]
 800efca:	2ba3      	cmp	r3, #163	; 0xa3
 800efcc:	f47f adf5 	bne.w	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800efd0:	7929      	ldrb	r1, [r5, #4]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800efd2:	3901      	subs	r1, #1
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	699b      	ldr	r3, [r3, #24]
 800efd8:	f105 0209 	add.w	r2, r5, #9
 800efdc:	b2c9      	uxtb	r1, r1
 800efde:	4620      	mov	r0, r4
 800efe0:	4798      	blx	r3
 800efe2:	e5ea      	b.n	800ebba <_ZN5BTHID7ACLDataEPh+0xbe>

0800efe4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
        switch (b) {
 800efe4:	2903      	cmp	r1, #3
 800efe6:	d82c      	bhi.n	800f042 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x5e>
 800efe8:	e8df f001 	tbb	[pc, r1]
 800efec:	21170d02 	.word	0x21170d02
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800eff0:	7a03      	ldrb	r3, [r0, #8]
 800eff2:	f003 020f 	and.w	r2, r3, #15
 800eff6:	2a07      	cmp	r2, #7
 800eff8:	d025      	beq.n	800f046 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x62>
 800effa:	f013 0f0e 	tst.w	r3, #14
 800effe:	bf0c      	ite	eq
 800f000:	2001      	moveq	r0, #1
 800f002:	2000      	movne	r0, #0
 800f004:	4770      	bx	lr
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800f006:	7a00      	ldrb	r0, [r0, #8]
 800f008:	f000 000f 	and.w	r0, r0, #15
 800f00c:	3801      	subs	r0, #1
 800f00e:	b2c0      	uxtb	r0, r0
 800f010:	2802      	cmp	r0, #2
 800f012:	bf8c      	ite	hi
 800f014:	2000      	movhi	r0, #0
 800f016:	2001      	movls	r0, #1
 800f018:	4770      	bx	lr
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800f01a:	7a00      	ldrb	r0, [r0, #8]
 800f01c:	f000 000f 	and.w	r0, r0, #15
 800f020:	3803      	subs	r0, #3
 800f022:	b2c0      	uxtb	r0, r0
 800f024:	2802      	cmp	r0, #2
 800f026:	bf8c      	ite	hi
 800f028:	2000      	movhi	r0, #0
 800f02a:	2001      	movls	r0, #1
 800f02c:	4770      	bx	lr
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800f02e:	7a00      	ldrb	r0, [r0, #8]
 800f030:	f000 000f 	and.w	r0, r0, #15
 800f034:	3805      	subs	r0, #5
 800f036:	b2c0      	uxtb	r0, r0
 800f038:	2802      	cmp	r0, #2
 800f03a:	bf8c      	ite	hi
 800f03c:	2000      	movhi	r0, #0
 800f03e:	2001      	movls	r0, #1
 800f040:	4770      	bx	lr
bool PS4Parser::checkDpad(ButtonEnum b) {
 800f042:	2000      	movs	r0, #0
 800f044:	4770      	bx	lr
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800f046:	2001      	movs	r0, #1
                default:
                        return false;
        }
}
 800f048:	4770      	bx	lr
	...

0800f04c <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800f04c:	b508      	push	{r3, lr}
        if (b <= LEFT) // Dpad
 800f04e:	2903      	cmp	r1, #3
 800f050:	d802      	bhi.n	800f058 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0xc>
                return checkDpad(b);
 800f052:	f7ff ffc7 	bl	800efe4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
}
 800f056:	bd08      	pop	{r3, pc}
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800f058:	6880      	ldr	r0, [r0, #8]
 800f05a:	f3c0 0017 	ubfx	r0, r0, #0, #24
 800f05e:	4b03      	ldr	r3, [pc, #12]	; (800f06c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>)
 800f060:	5c5b      	ldrb	r3, [r3, r1]
 800f062:	40d8      	lsrs	r0, r3
 800f064:	f000 0001 	and.w	r0, r0, #1
 800f068:	e7f5      	b.n	800f056 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0xa>
 800f06a:	bf00      	nop
 800f06c:	080114e0 	.word	0x080114e0

0800f070 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800f070:	4b0a      	ldr	r3, [pc, #40]	; (800f09c <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x2c>)
 800f072:	5c5a      	ldrb	r2, [r3, r1]
 800f074:	2301      	movs	r3, #1
 800f076:	4093      	lsls	r3, r2
        bool click = buttonClickState.val & mask;
 800f078:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 800f07c:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800f080:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
        buttonClickState.val &= ~mask; // Clear "click" event
 800f084:	ea22 0103 	bic.w	r1, r2, r3
 800f088:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
 800f08c:	0a09      	lsrs	r1, r1, #8
 800f08e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        bool click = buttonClickState.val & mask;
 800f092:	421a      	tst	r2, r3
        return click;
}
 800f094:	bf14      	ite	ne
 800f096:	2001      	movne	r0, #1
 800f098:	2000      	moveq	r0, #0
 800f09a:	4770      	bx	lr
 800f09c:	080114e0 	.word	0x080114e0

0800f0a0 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
        if (b == L2) // These are the only analog buttons on the controller
 800f0a0:	2908      	cmp	r1, #8
 800f0a2:	d004      	beq.n	800f0ae <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0xe>
                return ps4Data.trigger[0];
        else if (b == R2)
 800f0a4:	2909      	cmp	r1, #9
                return ps4Data.trigger[1];
 800f0a6:	bf0c      	ite	eq
 800f0a8:	7b00      	ldrbeq	r0, [r0, #12]
        return 0;
 800f0aa:	2000      	movne	r0, #0
}
 800f0ac:	4770      	bx	lr
                return ps4Data.trigger[0];
 800f0ae:	7ac0      	ldrb	r0, [r0, #11]
 800f0b0:	4770      	bx	lr

0800f0b2 <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
        return ps4Data.hatValue[(uint8_t)a];
 800f0b2:	4408      	add	r0, r1
}
 800f0b4:	7900      	ldrb	r0, [r0, #4]
 800f0b6:	4770      	bx	lr

0800f0b8 <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	4604      	mov	r4, r0
        if (len > 1 && buf)  {
 800f0bc:	2901      	cmp	r1, #1
 800f0be:	d95b      	bls.n	800f178 <_ZN9PS4Parser5ParseEhPh+0xc0>
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	2a00      	cmp	r2, #0
 800f0c4:	d058      	beq.n	800f178 <_ZN9PS4Parser5ParseEhPh+0xc0>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800f0c6:	7813      	ldrb	r3, [r2, #0]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d00d      	beq.n	800f0e8 <_ZN9PS4Parser5ParseEhPh+0x30>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800f0cc:	2b11      	cmp	r3, #17
 800f0ce:	d15c      	bne.n	800f18a <_ZN9PS4Parser5ParseEhPh+0xd2>
                        if (len < 4) {
 800f0d0:	2903      	cmp	r1, #3
 800f0d2:	d95a      	bls.n	800f18a <_ZN9PS4Parser5ParseEhPh+0xd2>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800f0d4:	1ecb      	subs	r3, r1, #3
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	2a3c      	cmp	r2, #60	; 0x3c
 800f0da:	bf28      	it	cs
 800f0dc:	223c      	movcs	r2, #60	; 0x3c
 800f0de:	1cc1      	adds	r1, r0, #3
 800f0e0:	1d20      	adds	r0, r4, #4
 800f0e2:	f001 f8f3 	bl	80102cc <memcpy>
 800f0e6:	e008      	b.n	800f0fa <_ZN9PS4Parser5ParseEhPh+0x42>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800f0e8:	1e4b      	subs	r3, r1, #1
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	2a3c      	cmp	r2, #60	; 0x3c
 800f0ee:	bf28      	it	cs
 800f0f0:	223c      	movcs	r2, #60	; 0x3c
 800f0f2:	1c41      	adds	r1, r0, #1
 800f0f4:	1d20      	adds	r0, r4, #4
 800f0f6:	f001 f8e9 	bl	80102cc <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800f0fa:	68a2      	ldr	r2, [r4, #8]
 800f0fc:	f3c2 0217 	ubfx	r2, r2, #0, #24
 800f100:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f102:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800f106:	429a      	cmp	r2, r3
 800f108:	d036      	beq.n	800f178 <_ZN9PS4Parser5ParseEhPh+0xc0>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800f10a:	ea22 0303 	bic.w	r3, r2, r3
 800f10e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f112:	0a1b      	lsrs	r3, r3, #8
 800f114:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800f118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f11a:	f362 0317 	bfi	r3, r2, #0, #24
 800f11e:	6423      	str	r3, [r4, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
                        if (checkDpad(UP))
 800f120:	2100      	movs	r1, #0
 800f122:	4620      	mov	r0, r4
 800f124:	f7ff ff5e 	bl	800efe4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800f128:	4606      	mov	r6, r0
                        uint8_t newDpad = 0;
 800f12a:	4605      	mov	r5, r0
                                newDpad |= 1 << UP;
                        if (checkDpad(RIGHT))
 800f12c:	2101      	movs	r1, #1
 800f12e:	4620      	mov	r0, r4
 800f130:	f7ff ff58 	bl	800efe4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800f134:	b110      	cbz	r0, 800f13c <_ZN9PS4Parser5ParseEhPh+0x84>
                                newDpad |= 1 << RIGHT;
 800f136:	f046 0502 	orr.w	r5, r6, #2
 800f13a:	b2ed      	uxtb	r5, r5
                        if (checkDpad(DOWN))
 800f13c:	2102      	movs	r1, #2
 800f13e:	4620      	mov	r0, r4
 800f140:	f7ff ff50 	bl	800efe4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800f144:	b110      	cbz	r0, 800f14c <_ZN9PS4Parser5ParseEhPh+0x94>
                                newDpad |= 1 << DOWN;
 800f146:	f045 0504 	orr.w	r5, r5, #4
 800f14a:	b2ed      	uxtb	r5, r5
                        if (checkDpad(LEFT))
 800f14c:	2103      	movs	r1, #3
 800f14e:	4620      	mov	r0, r4
 800f150:	f7ff ff48 	bl	800efe4 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800f154:	b110      	cbz	r0, 800f15c <_ZN9PS4Parser5ParseEhPh+0xa4>
                                newDpad |= 1 << LEFT;
 800f156:	f045 0508 	orr.w	r5, r5, #8
 800f15a:	b2ed      	uxtb	r5, r5
                        if (newDpad != oldDpad) {
 800f15c:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800f160:	42ab      	cmp	r3, r5
 800f162:	d009      	beq.n	800f178 <_ZN9PS4Parser5ParseEhPh+0xc0>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800f164:	ea25 0303 	bic.w	r3, r5, r3
 800f168:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f16c:	f363 0203 	bfi	r2, r3, #0, #4
 800f170:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
                                oldDpad = newDpad;
 800f174:	f884 504e 	strb.w	r5, [r4, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800f178:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 800f17c:	b12b      	cbz	r3, 800f18a <_ZN9PS4Parser5ParseEhPh+0xd2>
                sendOutputReport(&ps4Output); // Send output report
 800f17e:	4621      	mov	r1, r4
 800f180:	f851 3b46 	ldr.w	r3, [r1], #70
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4620      	mov	r0, r4
 800f188:	4798      	blx	r3
}
 800f18a:	bd70      	pop	{r4, r5, r6, pc}

0800f18c <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800f18c:	b410      	push	{r4}
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
                ps4Data.hatValue[i] = 127; // Center value
 800f18e:	237f      	movs	r3, #127	; 0x7f
 800f190:	7103      	strb	r3, [r0, #4]
 800f192:	7143      	strb	r3, [r0, #5]
 800f194:	7183      	strb	r3, [r0, #6]
 800f196:	71c3      	strb	r3, [r0, #7]
        ps4Data.btn.val = 0;
 800f198:	6881      	ldr	r1, [r0, #8]
 800f19a:	f36f 0117 	bfc	r1, #0, #24
 800f19e:	6081      	str	r1, [r0, #8]
        oldButtonState.val = 0;
 800f1a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800f1a2:	f36f 0217 	bfc	r2, #0, #24
 800f1a6:	6402      	str	r2, [r0, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
                ps4Data.trigger[i] = 0;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	72c3      	strb	r3, [r0, #11]
 800f1ac:	7303      	strb	r3, [r0, #12]
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800f1ae:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
 800f1b2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f1b6:	f880 4026 	strb.w	r4, [r0, #38]	; 0x26
 800f1ba:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800f1be:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f1c2:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800f1c6:	f890 402f 	ldrb.w	r4, [r0, #47]	; 0x2f
 800f1ca:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f1ce:	f880 402f 	strb.w	r4, [r0, #47]	; 0x2f
 800f1d2:	f890 4033 	ldrb.w	r4, [r0, #51]	; 0x33
 800f1d6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f1da:	f880 4033 	strb.w	r4, [r0, #51]	; 0x33
 800f1de:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 800f1e2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f1e6:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
 800f1ea:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800f1ee:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800f1f2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800f1f6:	2408      	movs	r4, #8
 800f1f8:	f364 0103 	bfi	r1, r4, #0, #4
 800f1fc:	7201      	strb	r1, [r0, #8]
        oldButtonState.dpad = DPAD_OFF;
 800f1fe:	4611      	mov	r1, r2
 800f200:	f364 0103 	bfi	r1, r4, #0, #4
 800f204:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
        buttonClickState.dpad = 0;
 800f208:	f3c2 6207 	ubfx	r2, r2, #24, #8
 800f20c:	f363 0203 	bfi	r2, r3, #0, #4
 800f210:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        oldDpad = 0;
 800f214:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800f218:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800f21c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800f220:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
 800f224:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
 800f228:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800f22c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 800f230:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800f234:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
};
 800f238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f23c:	4770      	bx	lr

0800f23e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:
        };

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
                if(!addr)
 800f23e:	b169      	cbz	r1, 800f25c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x1e>
        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800f240:	b430      	push	{r4, r5}
 800f242:	460c      	mov	r4, r1
 800f244:	4602      	mov	r2, r0
                if(!addr)
 800f246:	2301      	movs	r3, #1
 800f248:	b2dd      	uxtb	r5, r3
                        if(thePool[i].address.devAddress == address)
 800f24a:	7cd1      	ldrb	r1, [r2, #19]
 800f24c:	42a1      	cmp	r1, r4
 800f24e:	d007      	beq.n	800f260 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x22>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f250:	3301      	adds	r3, #1
 800f252:	3207      	adds	r2, #7
 800f254:	2b10      	cmp	r3, #16
 800f256:	d1f7      	bne.n	800f248 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0xa>
                        return thePool;

                uint8_t index = FindAddressIndex(addr);

                return (!index) ? NULL : thePool + index;
 800f258:	2000      	movs	r0, #0
 800f25a:	e007      	b.n	800f26c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x2e>
                        return thePool;
 800f25c:	3008      	adds	r0, #8
        };
 800f25e:	4770      	bx	lr
                return (!index) ? NULL : thePool + index;
 800f260:	b135      	cbz	r5, 800f270 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x32>
 800f262:	3008      	adds	r0, #8
 800f264:	b2db      	uxtb	r3, r3
 800f266:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f26a:	4418      	add	r0, r3
        };
 800f26c:	bc30      	pop	{r4, r5}
 800f26e:	4770      	bx	lr
                return (!index) ? NULL : thePool + index;
 800f270:	2000      	movs	r0, #0
 800f272:	e7fb      	b.n	800f26c <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x2e>

0800f274 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
                if(_parent.bmReserved || port > 7)
 800f274:	f011 0f80 	tst.w	r1, #128	; 0x80
 800f278:	d146      	bne.n	800f308 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x94>
        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f27a:	b4f0      	push	{r4, r5, r6, r7}
 800f27c:	4607      	mov	r7, r0
                if(_parent.bmReserved || port > 7)
 800f27e:	2b07      	cmp	r3, #7
 800f280:	d844      	bhi.n	800f30c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x98>
                        //if(parent > 127 || port > 7)
                        return 0;

                if(is_hub && hubCounter == 7)
 800f282:	b112      	cbz	r2, 800f28a <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x16>
 800f284:	79c0      	ldrb	r0, [r0, #7]
 800f286:	2807      	cmp	r0, #7
 800f288:	d043      	beq.n	800f312 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9e>
 800f28a:	463d      	mov	r5, r7
        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f28c:	2401      	movs	r4, #1
 800f28e:	b2e0      	uxtb	r0, r4
                        if(thePool[i].address.devAddress == address)
 800f290:	7cee      	ldrb	r6, [r5, #19]
 800f292:	b12e      	cbz	r6, 800f2a0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x2c>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f294:	3401      	adds	r4, #1
 800f296:	3507      	adds	r5, #7
 800f298:	2c10      	cmp	r4, #16
 800f29a:	d1f8      	bne.n	800f28e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x1a>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);

                if(!index) // if empty entry is not found
                        return 0;
 800f29c:	2000      	movs	r0, #0
 800f29e:	e036      	b.n	800f30e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                if(!index) // if empty entry is not found
 800f2a0:	b3a8      	cbz	r0, 800f30e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>

                if(_parent.devAddress == 0) {
 800f2a2:	b1a9      	cbz	r1, 800f2d0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>

                        return thePool[index].address.devAddress;
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f2a4:	f04f 0500 	mov.w	r5, #0
                addr.bmParent = _parent.bmAddress;
 800f2a8:	f3c1 0102 	ubfx	r1, r1, #0, #3
 800f2ac:	f361 05c5 	bfi	r5, r1, #3, #3
                if(is_hub) {
 800f2b0:	b32a      	cbz	r2, 800f2fe <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x8a>
                        addr.bmHub = 1;
 800f2b2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
                        addr.bmAddress = ++hubCounter;
 800f2b6:	79fb      	ldrb	r3, [r7, #7]
 800f2b8:	3301      	adds	r3, #1
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	71fb      	strb	r3, [r7, #7]
 800f2be:	f363 0502 	bfi	r5, r3, #0, #3
                } else {
                        addr.bmHub = 0;
                        addr.bmAddress = port;
                }
                thePool[index].address = addr;
 800f2c2:	b2e4      	uxtb	r4, r4
 800f2c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800f2c8:	443c      	add	r4, r7
 800f2ca:	7325      	strb	r5, [r4, #12]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f2cc:	b2e8      	uxtb	r0, r5
 800f2ce:	e01e      	b.n	800f30e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        if(is_hub) {
 800f2d0:	b172      	cbz	r2, 800f2f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x7c>
                                thePool[index].address.devAddress = 0x41;
 800f2d2:	b2e3      	uxtb	r3, r4
 800f2d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f2d8:	443b      	add	r3, r7
 800f2da:	2241      	movs	r2, #65	; 0x41
 800f2dc:	731a      	strb	r2, [r3, #12]
                                hubCounter++;
 800f2de:	79fb      	ldrb	r3, [r7, #7]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	71fb      	strb	r3, [r7, #7]
                        return thePool[index].address.devAddress;
 800f2e4:	b2e4      	uxtb	r4, r4
 800f2e6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800f2ea:	4427      	add	r7, r4
 800f2ec:	7b38      	ldrb	r0, [r7, #12]
 800f2ee:	e00e      	b.n	800f30e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                                thePool[index].address.devAddress = 1;
 800f2f0:	b2e3      	uxtb	r3, r4
 800f2f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f2f6:	443b      	add	r3, r7
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	731a      	strb	r2, [r3, #12]
 800f2fc:	e7f2      	b.n	800f2e4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x70>
                        addr.bmHub = 0;
 800f2fe:	f36f 1586 	bfc	r5, #6, #1
                        addr.bmAddress = port;
 800f302:	f363 0502 	bfi	r5, r3, #0, #3
 800f306:	e7dc      	b.n	800f2c2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x4e>
                        return 0;
 800f308:	2000      	movs	r0, #0
        };
 800f30a:	4770      	bx	lr
                        return 0;
 800f30c:	2000      	movs	r0, #0
        };
 800f30e:	bcf0      	pop	{r4, r5, r6, r7}
 800f310:	4770      	bx	lr
                        return 0;
 800f312:	2000      	movs	r0, #0
 800f314:	e7fb      	b.n	800f30e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
	...

0800f318 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800f318:	b4f0      	push	{r4, r5, r6, r7}
        AddressPoolImpl() : hubCounter(0) {
 800f31a:	4b16      	ldr	r3, [pc, #88]	; (800f374 <_ZN3USBC1Ev+0x5c>)
 800f31c:	6003      	str	r3, [r0, #0]
 800f31e:	2300      	movs	r3, #0
 800f320:	71c3      	strb	r3, [r0, #7]
                thePool[index].address.devAddress = 0;
 800f322:	7303      	strb	r3, [r0, #12]
                thePool[index].epcount = 1;
 800f324:	2201      	movs	r2, #1
 800f326:	7342      	strb	r2, [r0, #13]
                thePool[index].lowspeed = 0;
 800f328:	7383      	strb	r3, [r0, #14]
                thePool[index].epinfo = &dev0ep;
 800f32a:	1d05      	adds	r5, r0, #4
 800f32c:	6085      	str	r5, [r0, #8]
                dev0ep.epAddr = 0;
 800f32e:	7103      	strb	r3, [r0, #4]
                dev0ep.maxPktSize = 8;
 800f330:	2308      	movs	r3, #8
 800f332:	7143      	strb	r3, [r0, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800f334:	7983      	ldrb	r3, [r0, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800f336:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800f33a:	210f      	movs	r1, #15
 800f33c:	f361 0387 	bfi	r3, r1, #2, #6
 800f340:	7183      	strb	r3, [r0, #6]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f342:	4603      	mov	r3, r0
 800f344:	f100 0769 	add.w	r7, r0, #105	; 0x69
                thePool[index].address.devAddress = 0;
 800f348:	2400      	movs	r4, #0
                thePool[index].epcount = 1;
 800f34a:	4616      	mov	r6, r2
                thePool[index].address.devAddress = 0;
 800f34c:	74dc      	strb	r4, [r3, #19]
                thePool[index].epcount = 1;
 800f34e:	751e      	strb	r6, [r3, #20]
                thePool[index].lowspeed = 0;
 800f350:	755c      	strb	r4, [r3, #21]
                thePool[index].epinfo = &dev0ep;
 800f352:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 800f356:	4401      	add	r1, r0
 800f358:	608d      	str	r5, [r1, #8]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f35a:	3201      	adds	r2, #1
 800f35c:	3307      	adds	r3, #7
 800f35e:	42bb      	cmp	r3, r7
 800f360:	d1f4      	bne.n	800f34c <_ZN3USBC1Ev+0x34>
 800f362:	2300      	movs	r3, #0
 800f364:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800f368:	4b03      	ldr	r3, [pc, #12]	; (800f378 <_ZN3USBC1Ev+0x60>)
 800f36a:	2211      	movs	r2, #17
 800f36c:	701a      	strb	r2, [r3, #0]
        init();
}
 800f36e:	bcf0      	pop	{r4, r5, r6, r7}
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	080114fc 	.word	0x080114fc
 800f378:	2000540c 	.word	0x2000540c

0800f37c <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800f37c:	b470      	push	{r4, r5, r6}
                if(!addr)
 800f37e:	b169      	cbz	r1, 800f39c <_ZN3USB14getEpInfoEntryEhh+0x20>
 800f380:	460d      	mov	r5, r1
 800f382:	4601      	mov	r1, r0
 800f384:	2301      	movs	r3, #1
 800f386:	b2de      	uxtb	r6, r3
                        if(thePool[i].address.devAddress == address)
 800f388:	7ccc      	ldrb	r4, [r1, #19]
 800f38a:	42ac      	cmp	r4, r5
 800f38c:	d009      	beq.n	800f3a2 <_ZN3USB14getEpInfoEntryEhh+0x26>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f38e:	3301      	adds	r3, #1
 800f390:	3107      	adds	r1, #7
 800f392:	2b10      	cmp	r3, #16
 800f394:	d1f7      	bne.n	800f386 <_ZN3USB14getEpInfoEntryEhh+0xa>
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);

        if(!p || !p->epinfo)
                return NULL;
 800f396:	2000      	movs	r0, #0
                        return pep;

                pep++;
        }
        return NULL;
}
 800f398:	bc70      	pop	{r4, r5, r6}
 800f39a:	4770      	bx	lr
                        return thePool;
 800f39c:	f100 0308 	add.w	r3, r0, #8
 800f3a0:	e005      	b.n	800f3ae <_ZN3USB14getEpInfoEntryEhh+0x32>
                return (!index) ? NULL : thePool + index;
 800f3a2:	b1be      	cbz	r6, 800f3d4 <_ZN3USB14getEpInfoEntryEhh+0x58>
 800f3a4:	3008      	adds	r0, #8
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f3ac:	4403      	add	r3, r0
        if(!p || !p->epinfo)
 800f3ae:	6818      	ldr	r0, [r3, #0]
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d0f1      	beq.n	800f398 <_ZN3USB14getEpInfoEntryEhh+0x1c>
        for(uint8_t i = 0; i < p->epcount; i++) {
 800f3b4:	795b      	ldrb	r3, [r3, #5]
 800f3b6:	b17b      	cbz	r3, 800f3d8 <_ZN3USB14getEpInfoEntryEhh+0x5c>
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	3301      	adds	r3, #1
 800f3be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f3c2:	4403      	add	r3, r0
                if((pep)->epAddr == ep)
 800f3c4:	7801      	ldrb	r1, [r0, #0]
 800f3c6:	4291      	cmp	r1, r2
 800f3c8:	d0e6      	beq.n	800f398 <_ZN3USB14getEpInfoEntryEhh+0x1c>
                pep++;
 800f3ca:	3003      	adds	r0, #3
        for(uint8_t i = 0; i < p->epcount; i++) {
 800f3cc:	4298      	cmp	r0, r3
 800f3ce:	d1f9      	bne.n	800f3c4 <_ZN3USB14getEpInfoEntryEhh+0x48>
        return NULL;
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e7e1      	b.n	800f398 <_ZN3USB14getEpInfoEntryEhh+0x1c>
                return NULL;
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	e7df      	b.n	800f398 <_ZN3USB14getEpInfoEntryEhh+0x1c>
        return NULL;
 800f3d8:	2000      	movs	r0, #0
 800f3da:	e7dd      	b.n	800f398 <_ZN3USB14getEpInfoEntryEhh+0x1c>

0800f3dc <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
        if(!eprecord_ptr)
 800f3dc:	b1eb      	cbz	r3, 800f41a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x3e>
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800f3de:	b4f0      	push	{r4, r5, r6, r7}
 800f3e0:	461f      	mov	r7, r3
                if(!addr)
 800f3e2:	b159      	cbz	r1, 800f3fc <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x20>
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	b2de      	uxtb	r6, r3
                        if(thePool[i].address.devAddress == address)
 800f3ea:	7ce5      	ldrb	r5, [r4, #19]
 800f3ec:	428d      	cmp	r5, r1
 800f3ee:	d008      	beq.n	800f402 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x26>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	3407      	adds	r4, #7
 800f3f4:	2b10      	cmp	r3, #16
 800f3f6:	d1f7      	bne.n	800f3e8 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0xc>
                return USB_ERROR_INVALID_ARGUMENT;

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);

        if(!p)
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800f3f8:	20d6      	movs	r0, #214	; 0xd6
 800f3fa:	e00c      	b.n	800f416 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x3a>
                        return thePool;
 800f3fc:	f100 0308 	add.w	r3, r0, #8
 800f400:	e005      	b.n	800f40e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x32>
                return (!index) ? NULL : thePool + index;
 800f402:	b166      	cbz	r6, 800f41e <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x42>
 800f404:	3008      	adds	r0, #8
 800f406:	b2db      	uxtb	r3, r3
 800f408:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f40c:	4403      	add	r3, r0

        p->address.devAddress = addr;
 800f40e:	7119      	strb	r1, [r3, #4]
        p->epinfo = eprecord_ptr;
 800f410:	601f      	str	r7, [r3, #0]
        p->epcount = epcount;
 800f412:	715a      	strb	r2, [r3, #5]

        return 0;
 800f414:	2000      	movs	r0, #0
}
 800f416:	bcf0      	pop	{r4, r5, r6, r7}
 800f418:	4770      	bx	lr
                return USB_ERROR_INVALID_ARGUMENT;
 800f41a:	20d8      	movs	r0, #216	; 0xd8
}
 800f41c:	4770      	bx	lr
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800f41e:	20d6      	movs	r0, #214	; 0xd6
 800f420:	e7f9      	b.n	800f416 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x3a>

0800f422 <_ZN3USB13AttemptConfigEhhhb>:
                return rcode;
        }
        return 0;
};

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800f422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f426:	b083      	sub	sp, #12
 800f428:	4683      	mov	fp, r0
 800f42a:	4616      	mov	r6, r2
 800f42c:	461f      	mov	r7, r3
 800f42e:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
 800f432:	2500      	movs	r5, #0
 800f434:	eb00 0881 	add.w	r8, r0, r1, lsl #2
        } else if(rcode)
                return rcode;

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
                delay(100);
 800f438:	f04f 0a64 	mov.w	sl, #100	; 0x64
                        devConfig[parent]->ResetHubPort(port);
 800f43c:	f102 031e 	add.w	r3, r2, #30
 800f440:	9301      	str	r3, [sp, #4]
 800f442:	e028      	b.n	800f496 <_ZN3USB13AttemptConfigEhhhb+0x74>
                if(parent == 0) {
 800f444:	b13e      	cbz	r6, 800f456 <_ZN3USB13AttemptConfigEhhhb+0x34>
                        devConfig[parent]->ResetHubPort(port);
 800f446:	9b01      	ldr	r3, [sp, #4]
 800f448:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 800f44c:	6803      	ldr	r3, [r0, #0]
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	4639      	mov	r1, r7
 800f452:	4798      	blx	r3
 800f454:	e00e      	b.n	800f474 <_ZN3USB13AttemptConfigEhhhb+0x52>
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800f456:	2201      	movs	r2, #1
 800f458:	21e8      	movs	r1, #232	; 0xe8
 800f45a:	4658      	mov	r0, fp
 800f45c:	f7f1 fcf4 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800f460:	2066      	movs	r0, #102	; 0x66
 800f462:	f7f2 fcd3 	bl	8001e0c <HAL_Delay>
 800f466:	e005      	b.n	800f474 <_ZN3USB13AttemptConfigEhhhb+0x52>
                delay(100);
 800f468:	4650      	mov	r0, sl
 800f46a:	f7f2 fccf 	bl	8001e0c <HAL_Delay>
                goto again;
 800f46e:	e011      	b.n	800f494 <_ZN3USB13AttemptConfigEhhhb+0x72>
        } else if(rcode)
 800f470:	2800      	cmp	r0, #0
 800f472:	d13b      	bne.n	800f4ec <_ZN3USB13AttemptConfigEhhhb+0xca>
        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800f474:	f8d8 0078 	ldr.w	r0, [r8, #120]	; 0x78
 800f478:	6803      	ldr	r3, [r0, #0]
 800f47a:	681c      	ldr	r4, [r3, #0]
 800f47c:	464b      	mov	r3, r9
 800f47e:	463a      	mov	r2, r7
 800f480:	4631      	mov	r1, r6
 800f482:	47a0      	blx	r4
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800f484:	280d      	cmp	r0, #13
 800f486:	d11a      	bne.n	800f4be <_ZN3USB13AttemptConfigEhhhb+0x9c>
 800f488:	b2eb      	uxtb	r3, r5
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d81b      	bhi.n	800f4c6 <_ZN3USB13AttemptConfigEhhhb+0xa4>
                delay(100);
 800f48e:	4650      	mov	r0, sl
 800f490:	f7f2 fcbc 	bl	8001e0c <HAL_Delay>
                retries++;
                goto again;
 800f494:	3501      	adds	r5, #1
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800f496:	f8d8 0078 	ldr.w	r0, [r8, #120]	; 0x78
 800f49a:	6803      	ldr	r3, [r0, #0]
 800f49c:	685c      	ldr	r4, [r3, #4]
 800f49e:	464b      	mov	r3, r9
 800f4a0:	463a      	mov	r2, r7
 800f4a2:	4631      	mov	r1, r6
 800f4a4:	47a0      	blx	r4
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800f4a6:	28e0      	cmp	r0, #224	; 0xe0
 800f4a8:	d0cc      	beq.n	800f444 <_ZN3USB13AttemptConfigEhhhb+0x22>
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800f4aa:	280d      	cmp	r0, #13
 800f4ac:	d1e0      	bne.n	800f470 <_ZN3USB13AttemptConfigEhhhb+0x4e>
 800f4ae:	b2eb      	uxtb	r3, r5
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d9d9      	bls.n	800f468 <_ZN3USB13AttemptConfigEhhhb+0x46>
 800f4b4:	4604      	mov	r4, r0
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
                }
        }
        return rcode;
}
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	b003      	add	sp, #12
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4be:	4604      	mov	r4, r0
        if(rcode) {
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d0f8      	beq.n	800f4b6 <_ZN3USB13AttemptConfigEhhhb+0x94>
 800f4c4:	e000      	b.n	800f4c8 <_ZN3USB13AttemptConfigEhhhb+0xa6>
 800f4c6:	4604      	mov	r4, r0
                if(parent == 0) {
 800f4c8:	b13e      	cbz	r6, 800f4da <_ZN3USB13AttemptConfigEhhhb+0xb8>
                        devConfig[parent]->ResetHubPort(port);
 800f4ca:	361e      	adds	r6, #30
 800f4cc:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 800f4d0:	6803      	ldr	r3, [r0, #0]
 800f4d2:	695b      	ldr	r3, [r3, #20]
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	4798      	blx	r3
 800f4d8:	e7ed      	b.n	800f4b6 <_ZN3USB13AttemptConfigEhhhb+0x94>
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800f4da:	2201      	movs	r2, #1
 800f4dc:	21e8      	movs	r1, #232	; 0xe8
 800f4de:	4658      	mov	r0, fp
 800f4e0:	f7f1 fcb2 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800f4e4:	2066      	movs	r0, #102	; 0x66
 800f4e6:	f7f2 fc91 	bl	8001e0c <HAL_Delay>
 800f4ea:	e7e4      	b.n	800f4b6 <_ZN3USB13AttemptConfigEhhhb+0x94>
 800f4ec:	4604      	mov	r4, r0
 800f4ee:	e7e2      	b.n	800f4b6 <_ZN3USB13AttemptConfigEhhhb+0x94>

0800f4f0 <_ZN3USB11dispatchPktEhht>:
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800f4f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	468b      	mov	fp, r1
 800f4f8:	4617      	mov	r7, r2
 800f4fa:	469a      	mov	sl, r3
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800f4fc:	f7f2 fc7a 	bl	8001df4 <HAL_GetTick>
 800f500:	f500 559c 	add.w	r5, r0, #4992	; 0x1380
 800f504:	3508      	adds	r5, #8
        uint16_t nak_count = 0;
 800f506:	f04f 0800 	mov.w	r8, #0
        uint8_t retry_count = 0;
 800f50a:	46c1      	mov	r9, r8
        uint8_t rcode = hrSUCCESS;
 800f50c:	4646      	mov	r6, r8
                regWr(rHXFR, (token | ep)); //launch the transfer
 800f50e:	ea4b 0707 	orr.w	r7, fp, r7
 800f512:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800f516:	f7f2 fc6d 	bl	8001df4 <HAL_GetTick>
 800f51a:	1b40      	subs	r0, r0, r5
 800f51c:	2800      	cmp	r0, #0
 800f51e:	da20      	bge.n	800f562 <_ZN3USB11dispatchPktEhht+0x72>
                regWr(rHXFR, (token | ep)); //launch the transfer
 800f520:	463a      	mov	r2, r7
 800f522:	4659      	mov	r1, fp
 800f524:	4620      	mov	r0, r4
 800f526:	f7f1 fc8f 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        tmpdata = regRd(rHIRQ);
 800f52a:	26c8      	movs	r6, #200	; 0xc8
                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800f52c:	f7f2 fc62 	bl	8001df4 <HAL_GetTick>
 800f530:	1b40      	subs	r0, r0, r5
 800f532:	2800      	cmp	r0, #0
 800f534:	da0b      	bge.n	800f54e <_ZN3USB11dispatchPktEhht+0x5e>
                        tmpdata = regRd(rHIRQ);
 800f536:	4631      	mov	r1, r6
 800f538:	4620      	mov	r0, r4
 800f53a:	f7f1 fca7 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
                        if(tmpdata & bmHXFRDNIRQ) {
 800f53e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f542:	d0f3      	beq.n	800f52c <_ZN3USB11dispatchPktEhht+0x3c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800f544:	2280      	movs	r2, #128	; 0x80
 800f546:	21c8      	movs	r1, #200	; 0xc8
 800f548:	4620      	mov	r0, r4
 800f54a:	f7f1 fc7d 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800f54e:	21f8      	movs	r1, #248	; 0xf8
 800f550:	4620      	mov	r0, r4
 800f552:	f7f1 fc9b 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f556:	f000 060f 	and.w	r6, r0, #15
                switch(rcode) {
 800f55a:	2e04      	cmp	r6, #4
 800f55c:	d004      	beq.n	800f568 <_ZN3USB11dispatchPktEhht+0x78>
 800f55e:	2e0e      	cmp	r6, #14
 800f560:	d00c      	beq.n	800f57c <_ZN3USB11dispatchPktEhht+0x8c>
}
 800f562:	4630      	mov	r0, r6
 800f564:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                nak_count++;
 800f568:	f108 0801 	add.w	r8, r8, #1
 800f56c:	fa1f f888 	uxth.w	r8, r8
                                if(nak_limit && (nak_count == nak_limit))
 800f570:	f1ba 0f00 	cmp.w	sl, #0
 800f574:	d0cf      	beq.n	800f516 <_ZN3USB11dispatchPktEhht+0x26>
 800f576:	45d0      	cmp	r8, sl
 800f578:	d1cd      	bne.n	800f516 <_ZN3USB11dispatchPktEhht+0x26>
 800f57a:	e7f2      	b.n	800f562 <_ZN3USB11dispatchPktEhht+0x72>
                                retry_count++;
 800f57c:	f109 0901 	add.w	r9, r9, #1
 800f580:	fa5f f989 	uxtb.w	r9, r9
                                if(retry_count == USB_RETRY_LIMIT)
 800f584:	f1b9 0f03 	cmp.w	r9, #3
 800f588:	d1c5      	bne.n	800f516 <_ZN3USB11dispatchPktEhht+0x26>
 800f58a:	e7ea      	b.n	800f562 <_ZN3USB11dispatchPktEhht+0x72>

0800f58c <_ZN3USB10InTransferEP6EpInfotPtPhh>:
uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800f58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f590:	b087      	sub	sp, #28
 800f592:	4607      	mov	r7, r0
 800f594:	9100      	str	r1, [sp, #0]
 800f596:	9202      	str	r2, [sp, #8]
 800f598:	469a      	mov	sl, r3
 800f59a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f59e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800f5a2:	9301      	str	r3, [sp, #4]
        uint16_t nbytes = *nbytesptr;
 800f5a4:	f8ba 9000 	ldrh.w	r9, [sl]
        uint8_t maxpktsize = pep->maxPktSize;
 800f5a8:	784b      	ldrb	r3, [r1, #1]
 800f5aa:	9303      	str	r3, [sp, #12]
        *nbytesptr = 0;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	f8aa 3000 	strh.w	r3, [sl]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800f5b2:	460a      	mov	r2, r1
 800f5b4:	788b      	ldrb	r3, [r1, #2]
 800f5b6:	f013 0f02 	tst.w	r3, #2
 800f5ba:	bf14      	ite	ne
 800f5bc:	2220      	movne	r2, #32
 800f5be:	2210      	moveq	r2, #16
 800f5c0:	21e8      	movs	r1, #232	; 0xe8
 800f5c2:	f7f1 fc41 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800f5c6:	f04f 0b00 	mov.w	fp, #0
 800f5ca:	e028      	b.n	800f61e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x92>
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800f5cc:	21f8      	movs	r1, #248	; 0xf8
 800f5ce:	4638      	mov	r0, r7
 800f5d0:	f7f1 fc5c 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f5d4:	f080 0010 	eor.w	r0, r0, #16
 800f5d8:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800f5dc:	9a00      	ldr	r2, [sp, #0]
 800f5de:	7893      	ldrb	r3, [r2, #2]
 800f5e0:	f360 0341 	bfi	r3, r0, #1, #1
 800f5e4:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800f5e6:	f013 0f02 	tst.w	r3, #2
 800f5ea:	bf14      	ite	ne
 800f5ec:	2220      	movne	r2, #32
 800f5ee:	2210      	moveq	r2, #16
 800f5f0:	21e8      	movs	r1, #232	; 0xe8
 800f5f2:	4638      	mov	r0, r7
 800f5f4:	f7f1 fc28 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800f5f8:	e011      	b.n	800f61e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x92>
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800f5fa:	21f8      	movs	r1, #248	; 0xf8
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	f7f1 fc45 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f602:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800f606:	9a00      	ldr	r2, [sp, #0]
 800f608:	7893      	ldrb	r3, [r2, #2]
 800f60a:	f360 0341 	bfi	r3, r0, #1, #1
 800f60e:	7093      	strb	r3, [r2, #2]
}
 800f610:	4630      	mov	r0, r6
 800f612:	b007      	add	sp, #28
 800f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        delay(bInterval); // Delay according to polling interval
 800f618:	4618      	mov	r0, r3
 800f61a:	f7f2 fbf7 	bl	8001e0c <HAL_Delay>
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800f61e:	9b02      	ldr	r3, [sp, #8]
 800f620:	9a00      	ldr	r2, [sp, #0]
 800f622:	7812      	ldrb	r2, [r2, #0]
 800f624:	4659      	mov	r1, fp
 800f626:	4638      	mov	r0, r7
 800f628:	f7ff ff62 	bl	800f4f0 <_ZN3USB11dispatchPktEhht>
 800f62c:	4606      	mov	r6, r0
                if(rcode == hrTOGERR) {
 800f62e:	2806      	cmp	r0, #6
 800f630:	d0cc      	beq.n	800f5cc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x40>
                if(rcode) {
 800f632:	2800      	cmp	r0, #0
 800f634:	d1ec      	bne.n	800f610 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x84>
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800f636:	21c8      	movs	r1, #200	; 0xc8
 800f638:	4638      	mov	r0, r7
 800f63a:	f7f1 fc27 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f63e:	f010 0f04 	tst.w	r0, #4
 800f642:	d048      	beq.n	800f6d6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x14a>
                pktsize = regRd(rRCVBC); //number of received bytes
 800f644:	2130      	movs	r1, #48	; 0x30
 800f646:	4638      	mov	r0, r7
 800f648:	f7f1 fc20 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f64c:	4605      	mov	r5, r0
                if(pktsize > nbytes) {
 800f64e:	4548      	cmp	r0, r9
                        pktsize = nbytes;
 800f650:	bfc8      	it	gt
 800f652:	fa5f f589 	uxtbgt.w	r5, r9
                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800f656:	f8ba 4000 	ldrh.w	r4, [sl]
 800f65a:	eba9 0404 	sub.w	r4, r9, r4
 800f65e:	b224      	sxth	r4, r4
                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800f660:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f664:	42ac      	cmp	r4, r5
 800f666:	bfa8      	it	ge
 800f668:	462c      	movge	r4, r5
 800f66a:	2308      	movs	r3, #8
 800f66c:	f88d 3017 	strb.w	r3, [sp, #23]
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 800f670:	465a      	mov	r2, fp
 800f672:	2140      	movs	r1, #64	; 0x40
 800f674:	4819      	ldr	r0, [pc, #100]	; (800f6dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x150>)
 800f676:	f7f2 fe7b 	bl	8002370 <HAL_GPIO_WritePin>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800f67a:	f04f 33ff 	mov.w	r3, #4294967295
 800f67e:	2201      	movs	r2, #1
 800f680:	f10d 0117 	add.w	r1, sp, #23
 800f684:	4816      	ldr	r0, [pc, #88]	; (800f6e0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x154>)
 800f686:	f7f5 fdee 	bl	8005266 <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800f68a:	4622      	mov	r2, r4
 800f68c:	4659      	mov	r1, fp
 800f68e:	4640      	mov	r0, r8
 800f690:	f000 fe2a 	bl	80102e8 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f694:	f04f 33ff 	mov.w	r3, #4294967295
 800f698:	b2e2      	uxtb	r2, r4
 800f69a:	4641      	mov	r1, r8
 800f69c:	4810      	ldr	r0, [pc, #64]	; (800f6e0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x154>)
 800f69e:	f7f5 ff1e 	bl	80054de <HAL_SPI_Receive>
        data_p += nbytes;
 800f6a2:	44a0      	add	r8, r4
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	2140      	movs	r1, #64	; 0x40
 800f6a8:	480c      	ldr	r0, [pc, #48]	; (800f6dc <_ZN3USB10InTransferEP6EpInfotPtPhh+0x150>)
 800f6aa:	f7f2 fe61 	bl	8002370 <HAL_GPIO_WritePin>
                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800f6ae:	2204      	movs	r2, #4
 800f6b0:	21c8      	movs	r1, #200	; 0xc8
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	f7f1 fbc8 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800f6b8:	f8ba 3000 	ldrh.w	r3, [sl]
 800f6bc:	442b      	add	r3, r5
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	f8aa 3000 	strh.w	r3, [sl]
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800f6c4:	9a03      	ldr	r2, [sp, #12]
 800f6c6:	4295      	cmp	r5, r2
 800f6c8:	d397      	bcc.n	800f5fa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6e>
 800f6ca:	454b      	cmp	r3, r9
 800f6cc:	d295      	bcs.n	800f5fa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x6e>
                } else if(bInterval > 0)
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d0a4      	beq.n	800f61e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x92>
 800f6d4:	e7a0      	b.n	800f618 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x8c>
                        rcode = 0xf0; //receive error
 800f6d6:	26f0      	movs	r6, #240	; 0xf0
 800f6d8:	e79a      	b.n	800f610 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x84>
 800f6da:	bf00      	nop
 800f6dc:	40020400 	.word	0x40020400
 800f6e0:	200003e0 	.word	0x200003e0

0800f6e4 <_ZN3USB10SetAddressEhhPP6EpInfoPt>:
uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800f6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e8:	4607      	mov	r7, r0
 800f6ea:	4698      	mov	r8, r3
                if(!addr)
 800f6ec:	460e      	mov	r6, r1
 800f6ee:	b159      	cbz	r1, 800f708 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x24>
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	2101      	movs	r1, #1
 800f6f4:	b2cb      	uxtb	r3, r1
                        if(thePool[i].address.devAddress == address)
 800f6f6:	7ce5      	ldrb	r5, [r4, #19]
 800f6f8:	42b5      	cmp	r5, r6
 800f6fa:	d008      	beq.n	800f70e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f6fc:	3101      	adds	r1, #1
 800f6fe:	3407      	adds	r4, #7
 800f700:	2910      	cmp	r1, #16
 800f702:	d1f7      	bne.n	800f6f4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x10>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800f704:	20d6      	movs	r0, #214	; 0xd6
 800f706:	e033      	b.n	800f770 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x8c>
                        return thePool;
 800f708:	f100 0408 	add.w	r4, r0, #8
 800f70c:	e006      	b.n	800f71c <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x38>
                return (!index) ? NULL : thePool + index;
 800f70e:	b3a3      	cbz	r3, 800f77a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x96>
 800f710:	f107 0408 	add.w	r4, r7, #8
 800f714:	b2c9      	uxtb	r1, r1
 800f716:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800f71a:	440c      	add	r4, r1
        if(!p->epinfo)
 800f71c:	6823      	ldr	r3, [r4, #0]
 800f71e:	b373      	cbz	r3, 800f77e <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x9a>
        *ppep = getEpInfoEntry(addr, ep);
 800f720:	4631      	mov	r1, r6
 800f722:	4638      	mov	r0, r7
 800f724:	f7ff fe2a 	bl	800f37c <_ZN3USB14getEpInfoEntryEhh>
 800f728:	f8c8 0000 	str.w	r0, [r8]
        if(!*ppep)
 800f72c:	b348      	cbz	r0, 800f782 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x9e>
        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800f72e:	7883      	ldrb	r3, [r0, #2]
 800f730:	089b      	lsrs	r3, r3, #2
 800f732:	2b0f      	cmp	r3, #15
 800f734:	bf28      	it	cs
 800f736:	230f      	movcs	r3, #15
 800f738:	461a      	mov	r2, r3
 800f73a:	2301      	movs	r3, #1
 800f73c:	4093      	lsls	r3, r2
        (*nak_limit)--;
 800f73e:	3b01      	subs	r3, #1
 800f740:	9a06      	ldr	r2, [sp, #24]
 800f742:	8013      	strh	r3, [r2, #0]
        regWr(rPERADDR, addr); //set peripheral address
 800f744:	4632      	mov	r2, r6
 800f746:	21e0      	movs	r1, #224	; 0xe0
 800f748:	4638      	mov	r0, r7
 800f74a:	f7f1 fb7d 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        uint8_t mode = regRd(rMODE);
 800f74e:	21d8      	movs	r1, #216	; 0xd8
 800f750:	4638      	mov	r0, r7
 800f752:	f7f1 fb9b 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800f756:	79a3      	ldrb	r3, [r4, #6]
 800f758:	b163      	cbz	r3, 800f774 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x90>
 800f75a:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 800f75e:	4302      	orrs	r2, r0
 800f760:	f042 0202 	orr.w	r2, r2, #2
 800f764:	b2d2      	uxtb	r2, r2
 800f766:	21d8      	movs	r1, #216	; 0xd8
 800f768:	4638      	mov	r0, r7
 800f76a:	f7f1 fb6d 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return 0;
 800f76e:	2000      	movs	r0, #0
}
 800f770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800f774:	f000 02f9 	and.w	r2, r0, #249	; 0xf9
 800f778:	e7f5      	b.n	800f766 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x82>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800f77a:	20d6      	movs	r0, #214	; 0xd6
 800f77c:	e7f8      	b.n	800f770 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x8c>
                return USB_ERROR_EPINFO_IS_NULL;
 800f77e:	20d7      	movs	r0, #215	; 0xd7
 800f780:	e7f6      	b.n	800f770 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x8c>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800f782:	20db      	movs	r0, #219	; 0xdb
 800f784:	e7f4      	b.n	800f770 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x8c>

0800f786 <_ZN3USB10inTransferEhhPtPhh>:
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800f786:	b530      	push	{r4, r5, lr}
 800f788:	b085      	sub	sp, #20
 800f78a:	4605      	mov	r5, r0
 800f78c:	461c      	mov	r4, r3
        EpInfo *pep = NULL;
 800f78e:	2300      	movs	r3, #0
 800f790:	9303      	str	r3, [sp, #12]
        uint16_t nak_limit = 0;
 800f792:	f8ad 300a 	strh.w	r3, [sp, #10]
        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800f796:	f10d 030a 	add.w	r3, sp, #10
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	ab03      	add	r3, sp, #12
 800f79e:	f7ff ffa1 	bl	800f6e4 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
        if(rcode) {
 800f7a2:	b108      	cbz	r0, 800f7a8 <_ZN3USB10inTransferEhhPtPhh+0x22>
}
 800f7a4:	b005      	add	sp, #20
 800f7a6:	bd30      	pop	{r4, r5, pc}
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800f7a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800f7ac:	9301      	str	r3, [sp, #4]
 800f7ae:	9b08      	ldr	r3, [sp, #32]
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	4623      	mov	r3, r4
 800f7b4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f7b8:	9903      	ldr	r1, [sp, #12]
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	f7ff fee6 	bl	800f58c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800f7c0:	e7f0      	b.n	800f7a4 <_ZN3USB10inTransferEhhPtPhh+0x1e>
	...

0800f7c4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	460d      	mov	r5, r1
 800f7ca:	4616      	mov	r6, r2
 800f7cc:	461c      	mov	r4, r3
 800f7ce:	4f11      	ldr	r7, [pc, #68]	; (800f814 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x50>)
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	2140      	movs	r1, #64	; 0x40
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f7f2 fdcb 	bl	8002370 <HAL_GPIO_WritePin>
        uint8_t data = reg | 0x02;
 800f7da:	f045 0502 	orr.w	r5, r5, #2
 800f7de:	f88d 5007 	strb.w	r5, [sp, #7]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800f7e2:	4d0d      	ldr	r5, [pc, #52]	; (800f818 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x54>)
 800f7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f10d 0107 	add.w	r1, sp, #7
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f7f5 fd39 	bl	8005266 <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f7f8:	4632      	mov	r2, r6
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	f7f5 fd32 	bl	8005266 <HAL_SPI_Transmit>
        data_p += nbytes;
 800f802:	4434      	add	r4, r6
 800f804:	2201      	movs	r2, #1
 800f806:	2140      	movs	r1, #64	; 0x40
 800f808:	4638      	mov	r0, r7
 800f80a:	f7f2 fdb1 	bl	8002370 <HAL_GPIO_WritePin>
}
 800f80e:	4620      	mov	r0, r4
 800f810:	b003      	add	sp, #12
 800f812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f814:	40020400 	.word	0x40020400
 800f818:	200003e0 	.word	0x200003e0

0800f81c <_ZN3USB11OutTransferEP6EpInfottPh>:
uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f820:	b087      	sub	sp, #28
 800f822:	9204      	str	r2, [sp, #16]
 800f824:	461d      	mov	r5, r3
 800f826:	9302      	str	r3, [sp, #8]
        uint8_t maxpktsize = pep->maxPktSize;
 800f828:	784a      	ldrb	r2, [r1, #1]
 800f82a:	9203      	str	r2, [sp, #12]
        if(maxpktsize < 1 || maxpktsize > 64)
 800f82c:	1e53      	subs	r3, r2, #1
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	2b3f      	cmp	r3, #63	; 0x3f
 800f832:	f200 80c7 	bhi.w	800f9c4 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800f836:	4604      	mov	r4, r0
 800f838:	468b      	mov	fp, r1
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800f83a:	f7f2 fadb 	bl	8001df4 <HAL_GetTick>
 800f83e:	f500 589c 	add.w	r8, r0, #4992	; 0x1380
 800f842:	f108 0808 	add.w	r8, r8, #8
        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800f846:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800f84a:	f013 0f01 	tst.w	r3, #1
 800f84e:	bf14      	ite	ne
 800f850:	2280      	movne	r2, #128	; 0x80
 800f852:	2240      	moveq	r2, #64	; 0x40
 800f854:	21e8      	movs	r1, #232	; 0xe8
 800f856:	4620      	mov	r0, r4
 800f858:	f7f1 faf6 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(bytes_left) {
 800f85c:	2d00      	cmp	r5, #0
 800f85e:	f000 80af 	beq.w	800f9c0 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a4>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f862:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
                retry_count = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	9300      	str	r3, [sp, #0]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800f86a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f86e:	9a02      	ldr	r2, [sp, #8]
 800f870:	4293      	cmp	r3, r2
 800f872:	bf28      	it	cs
 800f874:	4613      	movcs	r3, r2
 800f876:	9305      	str	r3, [sp, #20]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800f878:	b2de      	uxtb	r6, r3
 800f87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f87c:	4632      	mov	r2, r6
 800f87e:	2110      	movs	r1, #16
 800f880:	4620      	mov	r0, r4
 800f882:	f7ff ff9f 	bl	800f7c4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800f886:	4632      	mov	r2, r6
 800f888:	2138      	movs	r1, #56	; 0x38
 800f88a:	4620      	mov	r0, r4
 800f88c:	f7f1 fadc 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800f890:	f89b 2000 	ldrb.w	r2, [fp]
 800f894:	f042 0220 	orr.w	r2, r2, #32
 800f898:	21f0      	movs	r1, #240	; 0xf0
 800f89a:	4620      	mov	r0, r4
 800f89c:	f7f1 fad4 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f8a0:	4651      	mov	r1, sl
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	f7f1 faf2 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f8a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f8ac:	d0f8      	beq.n	800f8a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x84>
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800f8ae:	2280      	movs	r2, #128	; 0x80
 800f8b0:	4651      	mov	r1, sl
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f7f1 fac8 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800f8b8:	21f8      	movs	r1, #248	; 0xf8
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f7f1 fae6 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800f8c0:	f010 050f 	ands.w	r5, r0, #15
 800f8c4:	d005      	beq.n	800f8d2 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
                nak_count = 0;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	9301      	str	r3, [sp, #4]
                retry_count = 0;
 800f8ca:	9f00      	ldr	r7, [sp, #0]
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800f8cc:	f04f 09f8 	mov.w	r9, #248	; 0xf8
 800f8d0:	e05a      	b.n	800f988 <_ZN3USB11OutTransferEP6EpInfottPh+0x16c>
                bytes_left -= bytes_tosend;
 800f8d2:	9b02      	ldr	r3, [sp, #8]
 800f8d4:	9a05      	ldr	r2, [sp, #20]
 800f8d6:	1a9b      	subs	r3, r3, r2
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	9302      	str	r3, [sp, #8]
                data_p += bytes_tosend;
 800f8dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f8de:	4411      	add	r1, r2
 800f8e0:	9110      	str	r1, [sp, #64]	; 0x40
        while(bytes_left) {
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d1c1      	bne.n	800f86a <_ZN3USB11OutTransferEP6EpInfottPh+0x4e>
 800f8e6:	e05b      	b.n	800f9a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x184>
                                        nak_count++;
 800f8e8:	9b01      	ldr	r3, [sp, #4]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	9301      	str	r3, [sp, #4]
                                        if(nak_limit && (nak_count == nak_limit))
 800f8f0:	9a04      	ldr	r2, [sp, #16]
 800f8f2:	b1f2      	cbz	r2, 800f932 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d11c      	bne.n	800f932 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f8f8:	e052      	b.n	800f9a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x184>
                                        retry_count++;
 800f8fa:	3701      	adds	r7, #1
 800f8fc:	b2ff      	uxtb	r7, r7
                                        if(retry_count == USB_RETRY_LIMIT)
 800f8fe:	2f03      	cmp	r7, #3
 800f900:	d117      	bne.n	800f932 <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800f902:	e04d      	b.n	800f9a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x184>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800f904:	4649      	mov	r1, r9
 800f906:	4620      	mov	r0, r4
 800f908:	f7f1 fac0 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f90c:	f080 0320 	eor.w	r3, r0, #32
 800f910:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f914:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800f918:	f363 0200 	bfi	r2, r3, #0, #1
 800f91c:	f88b 2002 	strb.w	r2, [fp, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800f920:	f012 0f01 	tst.w	r2, #1
 800f924:	bf14      	ite	ne
 800f926:	2280      	movne	r2, #128	; 0x80
 800f928:	2240      	moveq	r2, #64	; 0x40
 800f92a:	21e8      	movs	r1, #232	; 0xe8
 800f92c:	4620      	mov	r0, r4
 800f92e:	f7f1 fa8b 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, 0);
 800f932:	9a00      	ldr	r2, [sp, #0]
 800f934:	2138      	movs	r1, #56	; 0x38
 800f936:	4620      	mov	r0, r4
 800f938:	f7f1 fa86 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800f93c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f93e:	781a      	ldrb	r2, [r3, #0]
 800f940:	2110      	movs	r1, #16
 800f942:	4620      	mov	r0, r4
 800f944:	f7f1 fa80 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800f948:	4632      	mov	r2, r6
 800f94a:	2138      	movs	r1, #56	; 0x38
 800f94c:	4620      	mov	r0, r4
 800f94e:	f7f1 fa7b 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800f952:	f89b 2000 	ldrb.w	r2, [fp]
 800f956:	f042 0220 	orr.w	r2, r2, #32
 800f95a:	21f0      	movs	r1, #240	; 0xf0
 800f95c:	4620      	mov	r0, r4
 800f95e:	f7f1 fa73 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800f962:	4651      	mov	r1, sl
 800f964:	4620      	mov	r0, r4
 800f966:	f7f1 fa91 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f96a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800f96e:	d0f8      	beq.n	800f962 <_ZN3USB11OutTransferEP6EpInfottPh+0x146>
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800f970:	2280      	movs	r2, #128	; 0x80
 800f972:	4651      	mov	r1, sl
 800f974:	4620      	mov	r0, r4
 800f976:	f7f1 fa67 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800f97a:	4649      	mov	r1, r9
 800f97c:	4620      	mov	r0, r4
 800f97e:	f7f1 fa85 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800f982:	f010 050f 	ands.w	r5, r0, #15
 800f986:	d0a4      	beq.n	800f8d2 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
 800f988:	f7f2 fa34 	bl	8001df4 <HAL_GetTick>
 800f98c:	eba0 0008 	sub.w	r0, r0, r8
 800f990:	2800      	cmp	r0, #0
 800f992:	da9e      	bge.n	800f8d2 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
                        switch(rcode) {
 800f994:	2d06      	cmp	r5, #6
 800f996:	d0b5      	beq.n	800f904 <_ZN3USB11OutTransferEP6EpInfottPh+0xe8>
 800f998:	2d0e      	cmp	r5, #14
 800f99a:	d0ae      	beq.n	800f8fa <_ZN3USB11OutTransferEP6EpInfottPh+0xde>
 800f99c:	2d04      	cmp	r5, #4
 800f99e:	d0a3      	beq.n	800f8e8 <_ZN3USB11OutTransferEP6EpInfottPh+0xcc>
        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800f9a0:	21f8      	movs	r1, #248	; 0xf8
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f7f1 fa72 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f9a8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800f9ac:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800f9b0:	f360 0300 	bfi	r3, r0, #0, #1
 800f9b4:	f88b 3002 	strb.w	r3, [fp, #2]
}
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	b007      	add	sp, #28
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t rcode = hrSUCCESS, retry_count;
 800f9c0:	2500      	movs	r5, #0
 800f9c2:	e7ed      	b.n	800f9a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x184>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800f9c4:	25da      	movs	r5, #218	; 0xda
 800f9c6:	e7f7      	b.n	800f9b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>

0800f9c8 <_ZN3USB11outTransferEhhtPh>:
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800f9c8:	b530      	push	{r4, r5, lr}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	461d      	mov	r5, r3
        EpInfo *pep = NULL;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	9303      	str	r3, [sp, #12]
        uint16_t nak_limit = 0;
 800f9d4:	f8ad 300a 	strh.w	r3, [sp, #10]
        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800f9d8:	f10d 030a 	add.w	r3, sp, #10
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	ab03      	add	r3, sp, #12
 800f9e0:	f7ff fe80 	bl	800f6e4 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
        if(rcode)
 800f9e4:	b108      	cbz	r0, 800f9ea <_ZN3USB11outTransferEhhtPh+0x22>
}
 800f9e6:	b005      	add	sp, #20
 800f9e8:	bd30      	pop	{r4, r5, pc}
        return OutTransfer(pep, nak_limit, nbytes, data);
 800f9ea:	9b08      	ldr	r3, [sp, #32]
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	462b      	mov	r3, r5
 800f9f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800f9f4:	9903      	ldr	r1, [sp, #12]
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	f7ff ff10 	bl	800f81c <_ZN3USB11OutTransferEP6EpInfottPh>
 800f9fc:	e7f3      	b.n	800f9e6 <_ZN3USB11outTransferEhhtPh+0x1e>

0800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800f9fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa02:	b08b      	sub	sp, #44	; 0x2c
 800fa04:	4606      	mov	r6, r0
 800fa06:	4692      	mov	sl, r2
 800fa08:	9202      	str	r2, [sp, #8]
 800fa0a:	461d      	mov	r5, r3
 800fa0c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800fa10:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800fa14:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
        EpInfo *pep = NULL;
 800fa16:	2300      	movs	r3, #0
 800fa18:	9306      	str	r3, [sp, #24]
        uint16_t nak_limit = 0;
 800fa1a:	f8ad 3016 	strh.w	r3, [sp, #22]
        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800fa1e:	f10d 0316 	add.w	r3, sp, #22
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	ab06      	add	r3, sp, #24
 800fa26:	f7ff fe5d 	bl	800f6e4 <_ZN3USB10SetAddressEhhPP6EpInfoPt>
        if(rcode)
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	b118      	cbz	r0, 800fa36 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x38>
}
 800fa2e:	4620      	mov	r0, r4
 800fa30:	b00b      	add	sp, #44	; 0x2c
 800fa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800fa36:	f88d 501c 	strb.w	r5, [sp, #28]
        setup_pkt.bRequest = bRequest;
 800fa3a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800fa3e:	f88d 301d 	strb.w	r3, [sp, #29]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800fa42:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800fa46:	f88d 301e 	strb.w	r3, [sp, #30]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800fa4a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800fa4e:	f88d 301f 	strb.w	r3, [sp, #31]
        setup_pkt.wIndex = wInd;
 800fa52:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800fa56:	f8ad 3020 	strh.w	r3, [sp, #32]
        setup_pkt.wLength = total;
 800fa5a:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800fa5e:	ab07      	add	r3, sp, #28
 800fa60:	2208      	movs	r2, #8
 800fa62:	2120      	movs	r1, #32
 800fa64:	4630      	mov	r0, r6
 800fa66:	f7ff fead 	bl	800f7c4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800fa6a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fa6e:	4652      	mov	r2, sl
 800fa70:	2110      	movs	r1, #16
 800fa72:	4630      	mov	r0, r6
 800fa74:	f7ff fd3c 	bl	800f4f0 <_ZN3USB11dispatchPktEhht>
        if(rcode) //return HRSLT if not zero
 800fa78:	4604      	mov	r4, r0
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d1d7      	bne.n	800fa2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x30>
 800fa7e:	b26d      	sxtb	r5, r5
        if(dataptr != NULL) //data stage, if present
 800fa80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d060      	beq.n	800fb48 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                if(direction) //IN transfer
 800fa86:	2d00      	cmp	r5, #0
 800fa88:	da4a      	bge.n	800fb20 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x122>
                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800fa8a:	9a06      	ldr	r2, [sp, #24]
 800fa8c:	7893      	ldrb	r3, [r2, #2]
 800fa8e:	f043 0302 	orr.w	r3, r3, #2
 800fa92:	7093      	strb	r3, [r2, #2]
                        while(left) {
 800fa94:	f1b9 0f00 	cmp.w	r9, #0
 800fa98:	d040      	beq.n	800fb1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x11e>
                        uint16_t left = total;
 800fa9a:	464d      	mov	r5, r9
                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800fa9c:	f04f 0b00 	mov.w	fp, #0
 800faa0:	46b2      	mov	sl, r6
 800faa2:	f8cd 900c 	str.w	r9, [sp, #12]
 800faa6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800faa8:	e015      	b.n	800fad6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xd8>
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800faaa:	21f8      	movs	r1, #248	; 0xf8
 800faac:	4650      	mov	r0, sl
 800faae:	f7f1 f9ed 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 800fab2:	9b06      	ldr	r3, [sp, #24]
 800fab4:	f080 0020 	eor.w	r0, r0, #32
 800fab8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800fabc:	789a      	ldrb	r2, [r3, #2]
 800fabe:	f360 0241 	bfi	r2, r0, #1, #1
 800fac2:	709a      	strb	r2, [r3, #2]
                                        continue;
 800fac4:	e005      	b.n	800fad2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xd4>
                                left -= read;
 800fac6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800faca:	1aed      	subs	r5, r5, r3
 800facc:	b2ad      	uxth	r5, r5
                                if(read < nbytes)
 800face:	4543      	cmp	r3, r8
 800fad0:	d323      	bcc.n	800fb1a <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x11c>
                        while(left) {
 800fad2:	2d00      	cmp	r5, #0
 800fad4:	d044      	beq.n	800fb60 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x162>
                                uint16_t read = nbytes;
 800fad6:	f8ad 8014 	strh.w	r8, [sp, #20]
                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800fada:	f8cd b004 	str.w	fp, [sp, #4]
 800fade:	9600      	str	r6, [sp, #0]
 800fae0:	ab05      	add	r3, sp, #20
 800fae2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fae6:	9906      	ldr	r1, [sp, #24]
 800fae8:	4650      	mov	r0, sl
 800faea:	f7ff fd4f 	bl	800f58c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800faee:	4604      	mov	r4, r0
                                if(rcode == hrTOGERR) {
 800faf0:	2806      	cmp	r0, #6
 800faf2:	d0da      	beq.n	800faaa <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xac>
                                if(rcode)
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d19a      	bne.n	800fa2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x30>
                                if(!rcode && p)
 800faf8:	2f00      	cmp	r7, #0
 800fafa:	d0e4      	beq.n	800fac6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xc8>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	f8d3 9000 	ldr.w	r9, [r3]
 800fb02:	9b03      	ldr	r3, [sp, #12]
 800fb04:	1b5b      	subs	r3, r3, r5
 800fb06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800fb0a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800fb0e:	4632      	mov	r2, r6
 800fb10:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800fb14:	4638      	mov	r0, r7
 800fb16:	47c8      	blx	r9
 800fb18:	e7d5      	b.n	800fac6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xc8>
 800fb1a:	4656      	mov	r6, sl
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800fb1c:	21a0      	movs	r1, #160	; 0xa0
 800fb1e:	e017      	b.n	800fb50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x152>
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800fb20:	9a06      	ldr	r2, [sp, #24]
 800fb22:	7893      	ldrb	r3, [r2, #2]
 800fb24:	f043 0301 	orr.w	r3, r3, #1
 800fb28:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800fb2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	4643      	mov	r3, r8
 800fb30:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800fb34:	9906      	ldr	r1, [sp, #24]
 800fb36:	4630      	mov	r0, r6
 800fb38:	f7ff fe70 	bl	800f81c <_ZN3USB11OutTransferEP6EpInfottPh>
                if(rcode) //return error
 800fb3c:	4604      	mov	r4, r0
 800fb3e:	2800      	cmp	r0, #0
 800fb40:	f47f af75 	bne.w	800fa2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x30>
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800fb44:	2180      	movs	r1, #128	; 0x80
 800fb46:	e003      	b.n	800fb50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x152>
 800fb48:	2d00      	cmp	r5, #0
 800fb4a:	bfb4      	ite	lt
 800fb4c:	21a0      	movlt	r1, #160	; 0xa0
 800fb4e:	2180      	movge	r1, #128	; 0x80
 800fb50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800fb54:	9a02      	ldr	r2, [sp, #8]
 800fb56:	4630      	mov	r0, r6
 800fb58:	f7ff fcca 	bl	800f4f0 <_ZN3USB11dispatchPktEhht>
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	e766      	b.n	800fa2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x30>
 800fb60:	4656      	mov	r6, sl
                if(rcode) //return error
 800fb62:	2c00      	cmp	r4, #0
 800fb64:	f47f af63 	bne.w	800fa2e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x30>
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800fb68:	21a0      	movs	r1, #160	; 0xa0
 800fb6a:	e7f1      	b.n	800fb50 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x152>

0800fb6c <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800fb6c:	b530      	push	{r4, r5, lr}
 800fb6e:	b089      	sub	sp, #36	; 0x24
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800fb70:	2400      	movs	r4, #0
 800fb72:	9407      	str	r4, [sp, #28]
 800fb74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb76:	9506      	str	r5, [sp, #24]
 800fb78:	9305      	str	r3, [sp, #20]
 800fb7a:	9304      	str	r3, [sp, #16]
 800fb7c:	9403      	str	r4, [sp, #12]
 800fb7e:	2301      	movs	r3, #1
 800fb80:	9302      	str	r3, [sp, #8]
 800fb82:	9401      	str	r4, [sp, #4]
 800fb84:	2306      	movs	r3, #6
 800fb86:	9300      	str	r3, [sp, #0]
 800fb88:	2380      	movs	r3, #128	; 0x80
 800fb8a:	f7ff ff38 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800fb8e:	b009      	add	sp, #36	; 0x24
 800fb90:	bd30      	pop	{r4, r5, pc}

0800fb92 <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800fb92:	b530      	push	{r4, r5, lr}
 800fb94:	b089      	sub	sp, #36	; 0x24
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800fb96:	2400      	movs	r4, #0
 800fb98:	9407      	str	r4, [sp, #28]
 800fb9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fb9c:	9506      	str	r5, [sp, #24]
 800fb9e:	9305      	str	r3, [sp, #20]
 800fba0:	9304      	str	r3, [sp, #16]
 800fba2:	9403      	str	r4, [sp, #12]
 800fba4:	2302      	movs	r3, #2
 800fba6:	9302      	str	r3, [sp, #8]
 800fba8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	2306      	movs	r3, #6
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	2380      	movs	r3, #128	; 0x80
 800fbb4:	f7ff ff23 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800fbb8:	b009      	add	sp, #36	; 0x24
 800fbba:	bd30      	pop	{r4, r5, pc}

0800fbbc <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800fbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbbe:	b099      	sub	sp, #100	; 0x64
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	460e      	mov	r6, r1
 800fbc4:	4617      	mov	r7, r2
 800fbc6:	461c      	mov	r4, r3
        const uint8_t bufSize = 64;
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800fbc8:	ab08      	add	r3, sp, #32
 800fbca:	9301      	str	r3, [sp, #4]
 800fbcc:	9400      	str	r4, [sp, #0]
 800fbce:	2309      	movs	r3, #9
 800fbd0:	f7ff ffdf 	bl	800fb92 <_ZN3USB12getConfDescrEhhthPh>

        if(ret)
 800fbd4:	b108      	cbz	r0, 800fbda <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x1e>
        uint16_t total = ucd->wTotalLength;

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
}
 800fbd6:	b019      	add	sp, #100	; 0x64
 800fbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800fbda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fbdc:	9307      	str	r3, [sp, #28]
 800fbde:	ab08      	add	r3, sp, #32
 800fbe0:	9306      	str	r3, [sp, #24]
 800fbe2:	2340      	movs	r3, #64	; 0x40
 800fbe4:	9305      	str	r3, [sp, #20]
 800fbe6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800fbea:	9304      	str	r3, [sp, #16]
 800fbec:	2300      	movs	r3, #0
 800fbee:	9303      	str	r3, [sp, #12]
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	9302      	str	r3, [sp, #8]
 800fbf4:	9401      	str	r4, [sp, #4]
 800fbf6:	2306      	movs	r3, #6
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	2380      	movs	r3, #128	; 0x80
 800fbfc:	463a      	mov	r2, r7
 800fbfe:	4631      	mov	r1, r6
 800fc00:	4628      	mov	r0, r5
 800fc02:	f7ff fefc 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800fc06:	e7e6      	b.n	800fbd6 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x1a>

0800fc08 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800fc08:	b510      	push	{r4, lr}
 800fc0a:	b088      	sub	sp, #32
 800fc0c:	461c      	mov	r4, r3
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800fc0e:	2300      	movs	r3, #0
 800fc10:	9307      	str	r3, [sp, #28]
 800fc12:	9306      	str	r3, [sp, #24]
 800fc14:	9305      	str	r3, [sp, #20]
 800fc16:	9304      	str	r3, [sp, #16]
 800fc18:	9303      	str	r3, [sp, #12]
 800fc1a:	9302      	str	r3, [sp, #8]
 800fc1c:	9401      	str	r4, [sp, #4]
 800fc1e:	2405      	movs	r4, #5
 800fc20:	9400      	str	r4, [sp, #0]
 800fc22:	f7ff feec 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800fc26:	4604      	mov	r4, r0
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800fc28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800fc2c:	f7f2 f8ee 	bl	8001e0c <HAL_Delay>
        return rcode;
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800fc30:	4620      	mov	r0, r4
 800fc32:	b008      	add	sp, #32
 800fc34:	bd10      	pop	{r4, pc}

0800fc36 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800fc36:	b510      	push	{r4, lr}
 800fc38:	b088      	sub	sp, #32
 800fc3a:	461c      	mov	r4, r3
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	9307      	str	r3, [sp, #28]
 800fc40:	9306      	str	r3, [sp, #24]
 800fc42:	9305      	str	r3, [sp, #20]
 800fc44:	9304      	str	r3, [sp, #16]
 800fc46:	9303      	str	r3, [sp, #12]
 800fc48:	9302      	str	r3, [sp, #8]
 800fc4a:	9401      	str	r4, [sp, #4]
 800fc4c:	2409      	movs	r4, #9
 800fc4e:	9400      	str	r4, [sp, #0]
 800fc50:	f7ff fed5 	bl	800f9fe <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800fc54:	b008      	add	sp, #32
 800fc56:	bd10      	pop	{r4, pc}

0800fc58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
                if(index == 0)
 800fc58:	b3a1      	cbz	r1, 800fcc4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x6c>
        void FreeAddressByIndex(uint8_t index) {
 800fc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	460f      	mov	r7, r1
                UsbDeviceAddress uda = thePool[index].address;
 800fc60:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800fc64:	4403      	add	r3, r0
 800fc66:	7b1b      	ldrb	r3, [r3, #12]
 800fc68:	f003 0607 	and.w	r6, r3, #7
                if(uda.bmHub == 1) {
 800fc6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fc70:	d01d      	beq.n	800fcae <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x56>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800fc72:	2401      	movs	r4, #1
 800fc74:	e004      	b.n	800fc80 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x28>
 800fc76:	b1a4      	cbz	r4, 800fca2 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x4a>
                                FreeAddressByIndex(i);
 800fc78:	4621      	mov	r1, r4
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f7ff ffec 	bl	800fc58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800fc80:	1e63      	subs	r3, r4, #1
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b0f      	cmp	r3, #15
 800fc86:	bf28      	it	cs
 800fc88:	2401      	movcs	r4, #1
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800fc8a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800fc8e:	442b      	add	r3, r5
 800fc90:	7b1b      	ldrb	r3, [r3, #12]
 800fc92:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800fc96:	42b3      	cmp	r3, r6
 800fc98:	d0ed      	beq.n	800fc76 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x1e>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800fc9a:	3401      	adds	r4, #1
 800fc9c:	b2e4      	uxtb	r4, r4
 800fc9e:	2c0f      	cmp	r4, #15
 800fca0:	d9f3      	bls.n	800fc8a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x32>
                        if(hubCounter == uda.bmAddress)
 800fca2:	79eb      	ldrb	r3, [r5, #7]
 800fca4:	42b3      	cmp	r3, r6
                                hubCounter--;
 800fca6:	bf04      	itt	eq
 800fca8:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800fcac:	71eb      	strbeq	r3, [r5, #7]
                thePool[index].address.devAddress = 0;
 800fcae:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800fcb2:	442f      	add	r7, r5
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	733b      	strb	r3, [r7, #12]
                thePool[index].epcount = 1;
 800fcb8:	2201      	movs	r2, #1
 800fcba:	737a      	strb	r2, [r7, #13]
                thePool[index].lowspeed = 0;
 800fcbc:	73bb      	strb	r3, [r7, #14]
                thePool[index].epinfo = &dev0ep;
 800fcbe:	3504      	adds	r5, #4
 800fcc0:	60bd      	str	r5, [r7, #8]
        }
 800fcc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcc4:	4770      	bx	lr

0800fcc6 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800fcc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc8:	4606      	mov	r6, r0
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800fcca:	2941      	cmp	r1, #65	; 0x41
 800fccc:	d00a      	beq.n	800fce4 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1e>
 800fcce:	4602      	mov	r2, r0
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	b2dc      	uxtb	r4, r3
                        if(thePool[i].address.devAddress == address)
 800fcd4:	7cd0      	ldrb	r0, [r2, #19]
 800fcd6:	4288      	cmp	r0, r1
 800fcd8:	d019      	beq.n	800fd0e <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x48>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800fcda:	3301      	adds	r3, #1
 800fcdc:	3207      	adds	r2, #7
 800fcde:	2b10      	cmp	r3, #16
 800fce0:	d1f7      	bne.n	800fcd2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0xc>
 800fce2:	e047      	b.n	800fd74 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0xae>
 800fce4:	4603      	mov	r3, r0
 800fce6:	f100 0769 	add.w	r7, r0, #105	; 0x69
                if(addr == 0x41) {
 800fcea:	2201      	movs	r2, #1
                thePool[index].address.devAddress = 0;
 800fcec:	2000      	movs	r0, #0
                thePool[index].epcount = 1;
 800fcee:	4615      	mov	r5, r2
                thePool[index].epinfo = &dev0ep;
 800fcf0:	1d34      	adds	r4, r6, #4
                thePool[index].address.devAddress = 0;
 800fcf2:	74d8      	strb	r0, [r3, #19]
                thePool[index].epcount = 1;
 800fcf4:	751d      	strb	r5, [r3, #20]
                thePool[index].lowspeed = 0;
 800fcf6:	7558      	strb	r0, [r3, #21]
                thePool[index].epinfo = &dev0ep;
 800fcf8:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 800fcfc:	4431      	add	r1, r6
 800fcfe:	608c      	str	r4, [r1, #8]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800fd00:	3201      	adds	r2, #1
 800fd02:	3307      	adds	r3, #7
 800fd04:	42bb      	cmp	r3, r7
 800fd06:	d1f4      	bne.n	800fcf2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x2c>
                hubCounter = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	71f3      	strb	r3, [r6, #7]
                        InitAllAddresses();
                        return;
 800fd0c:	e032      	b.n	800fd74 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0xae>
                if(index == 0)
 800fd0e:	b38c      	cbz	r4, 800fd74 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0xae>
 800fd10:	b2dd      	uxtb	r5, r3
                UsbDeviceAddress uda = thePool[index].address;
 800fd12:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800fd16:	4433      	add	r3, r6
 800fd18:	7b1b      	ldrb	r3, [r3, #12]
 800fd1a:	f003 0707 	and.w	r7, r3, #7
                if(uda.bmHub == 1) {
 800fd1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fd22:	d01d      	beq.n	800fd60 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x9a>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800fd24:	2401      	movs	r4, #1
 800fd26:	e004      	b.n	800fd32 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x6c>
 800fd28:	b1a4      	cbz	r4, 800fd54 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x8e>
                                FreeAddressByIndex(i);
 800fd2a:	4621      	mov	r1, r4
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7ff ff93 	bl	800fc58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800fd32:	1e63      	subs	r3, r4, #1
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b0f      	cmp	r3, #15
 800fd38:	bf28      	it	cs
 800fd3a:	2401      	movcs	r4, #1
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800fd3c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800fd40:	4433      	add	r3, r6
 800fd42:	7b1b      	ldrb	r3, [r3, #12]
 800fd44:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800fd48:	42bb      	cmp	r3, r7
 800fd4a:	d0ed      	beq.n	800fd28 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x62>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800fd4c:	3401      	adds	r4, #1
 800fd4e:	b2e4      	uxtb	r4, r4
 800fd50:	2c0f      	cmp	r4, #15
 800fd52:	d9f3      	bls.n	800fd3c <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x76>
                        if(hubCounter == uda.bmAddress)
 800fd54:	79f3      	ldrb	r3, [r6, #7]
 800fd56:	42bb      	cmp	r3, r7
                                hubCounter--;
 800fd58:	bf04      	itt	eq
 800fd5a:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800fd5e:	71f3      	strbeq	r3, [r6, #7]
                thePool[index].address.devAddress = 0;
 800fd60:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800fd64:	4433      	add	r3, r6
 800fd66:	2200      	movs	r2, #0
 800fd68:	731a      	strb	r2, [r3, #12]
                thePool[index].epcount = 1;
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	7359      	strb	r1, [r3, #13]
                thePool[index].lowspeed = 0;
 800fd6e:	739a      	strb	r2, [r3, #14]
                thePool[index].epinfo = &dev0ep;
 800fd70:	3604      	adds	r6, #4
 800fd72:	609e      	str	r6, [r3, #8]
                }
                uint8_t index = FindAddressIndex(addr);
                FreeAddressByIndex(index);
        };
 800fd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd76 <_ZN3USB17DefaultAddressingEhhb>:
uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800fd76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd7a:	4605      	mov	r5, r0
        if(!p0->epinfo)
 800fd7c:	6880      	ldr	r0, [r0, #8]
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	f000 80a4 	beq.w	800fecc <_ZN3USB17DefaultAddressingEhhb+0x156>
        p0->lowspeed = (lowspeed) ? true : false;
 800fd84:	73ab      	strb	r3, [r5, #14]
                if(_parent.bmReserved || port > 7)
 800fd86:	f011 0f80 	tst.w	r1, #128	; 0x80
 800fd8a:	d10c      	bne.n	800fda6 <_ZN3USB17DefaultAddressingEhhb+0x30>
 800fd8c:	2a07      	cmp	r2, #7
 800fd8e:	d80a      	bhi.n	800fda6 <_ZN3USB17DefaultAddressingEhhb+0x30>
 800fd90:	462e      	mov	r6, r5
 800fd92:	4628      	mov	r0, r5
 800fd94:	2401      	movs	r4, #1
 800fd96:	fa5f fc84 	uxtb.w	ip, r4
                        if(thePool[i].address.devAddress == address)
 800fd9a:	7cc7      	ldrb	r7, [r0, #19]
 800fd9c:	b12f      	cbz	r7, 800fdaa <_ZN3USB17DefaultAddressingEhhb+0x34>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800fd9e:	3401      	adds	r4, #1
 800fda0:	3007      	adds	r0, #7
 800fda2:	2c10      	cmp	r4, #16
 800fda4:	d1f7      	bne.n	800fd96 <_ZN3USB17DefaultAddressingEhhb+0x20>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800fda6:	27d4      	movs	r7, #212	; 0xd4
 800fda8:	e037      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
                if(!index) // if empty entry is not found
 800fdaa:	f1bc 0f00 	cmp.w	ip, #0
 800fdae:	d0fa      	beq.n	800fda6 <_ZN3USB17DefaultAddressingEhhb+0x30>
                if(_parent.devAddress == 0) {
 800fdb0:	b1e9      	cbz	r1, 800fdee <_ZN3USB17DefaultAddressingEhhb+0x78>
                addr.devAddress = 0; // Ensure all bits are zero
 800fdb2:	2700      	movs	r7, #0
 800fdb4:	4638      	mov	r0, r7
                addr.bmParent = _parent.bmAddress;
 800fdb6:	f3c1 0102 	ubfx	r1, r1, #0, #3
 800fdba:	f361 00c5 	bfi	r0, r1, #3, #3
                        addr.bmHub = 0;
 800fdbe:	f367 1086 	bfi	r0, r7, #6, #1
                        addr.bmAddress = port;
 800fdc2:	f362 0002 	bfi	r0, r2, #0, #3
                thePool[index].address = addr;
 800fdc6:	b2e4      	uxtb	r4, r4
 800fdc8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800fdcc:	442c      	add	r4, r5
 800fdce:	7320      	strb	r0, [r4, #12]
                return thePool[index].address.devAddress;
 800fdd0:	b2c4      	uxtb	r4, r0
        if(!bAddress)
 800fdd2:	2c00      	cmp	r4, #0
 800fdd4:	d07c      	beq.n	800fed0 <_ZN3USB17DefaultAddressingEhhb+0x15a>
                        return thePool[index].address.devAddress;
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	2201      	movs	r2, #1
 800fdda:	b2d7      	uxtb	r7, r2
                        if(thePool[i].address.devAddress == address)
 800fddc:	7cc8      	ldrb	r0, [r1, #19]
 800fdde:	42a0      	cmp	r0, r4
 800fde0:	d00c      	beq.n	800fdfc <_ZN3USB17DefaultAddressingEhhb+0x86>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800fde2:	3201      	adds	r2, #1
 800fde4:	3107      	adds	r1, #7
 800fde6:	2a10      	cmp	r2, #16
 800fde8:	d1f7      	bne.n	800fdda <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800fdea:	27d6      	movs	r7, #214	; 0xd6
 800fdec:	e015      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
                                thePool[index].address.devAddress = 1;
 800fdee:	b2e4      	uxtb	r4, r4
 800fdf0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800fdf4:	192a      	adds	r2, r5, r4
 800fdf6:	2401      	movs	r4, #1
 800fdf8:	7314      	strb	r4, [r2, #12]
        if(!bAddress)
 800fdfa:	e7ec      	b.n	800fdd6 <_ZN3USB17DefaultAddressingEhhb+0x60>
                return (!index) ? NULL : thePool + index;
 800fdfc:	2f00      	cmp	r7, #0
 800fdfe:	d069      	beq.n	800fed4 <_ZN3USB17DefaultAddressingEhhb+0x15e>
 800fe00:	b2d2      	uxtb	r2, r2
        p->lowspeed = lowspeed;
 800fe02:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fe06:	442a      	add	r2, r5
 800fe08:	7393      	strb	r3, [r2, #14]
        rcode = setAddr(0, 0, bAddress);
 800fe0a:	4623      	mov	r3, r4
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	4611      	mov	r1, r2
 800fe10:	4628      	mov	r0, r5
 800fe12:	f7ff fef9 	bl	800fc08 <_ZN3USB7setAddrEhhh>
        if(rcode) {
 800fe16:	4607      	mov	r7, r0
 800fe18:	b910      	cbnz	r0, 800fe20 <_ZN3USB17DefaultAddressingEhhb+0xaa>
};
 800fe1a:	4638      	mov	r0, r7
 800fe1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(addr == 0x41) {
 800fe20:	2c41      	cmp	r4, #65	; 0x41
 800fe22:	d009      	beq.n	800fe38 <_ZN3USB17DefaultAddressingEhhb+0xc2>
 800fe24:	2301      	movs	r3, #1
 800fe26:	b2d9      	uxtb	r1, r3
                        if(thePool[i].address.devAddress == address)
 800fe28:	7cf2      	ldrb	r2, [r6, #19]
 800fe2a:	42a2      	cmp	r2, r4
 800fe2c:	d018      	beq.n	800fe60 <_ZN3USB17DefaultAddressingEhhb+0xea>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800fe2e:	3301      	adds	r3, #1
 800fe30:	3607      	adds	r6, #7
 800fe32:	2b10      	cmp	r3, #16
 800fe34:	d1f7      	bne.n	800fe26 <_ZN3USB17DefaultAddressingEhhb+0xb0>
 800fe36:	e7f0      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
 800fe38:	f105 0c69 	add.w	ip, r5, #105	; 0x69
                if(addr == 0x41) {
 800fe3c:	2301      	movs	r3, #1
                thePool[index].address.devAddress = 0;
 800fe3e:	2100      	movs	r1, #0
                thePool[index].epcount = 1;
 800fe40:	461c      	mov	r4, r3
                thePool[index].epinfo = &dev0ep;
 800fe42:	1d28      	adds	r0, r5, #4
                thePool[index].address.devAddress = 0;
 800fe44:	74f1      	strb	r1, [r6, #19]
                thePool[index].epcount = 1;
 800fe46:	7534      	strb	r4, [r6, #20]
                thePool[index].lowspeed = 0;
 800fe48:	7571      	strb	r1, [r6, #21]
                thePool[index].epinfo = &dev0ep;
 800fe4a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800fe4e:	442a      	add	r2, r5
 800fe50:	6090      	str	r0, [r2, #8]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800fe52:	3301      	adds	r3, #1
 800fe54:	3607      	adds	r6, #7
 800fe56:	4566      	cmp	r6, ip
 800fe58:	d1f4      	bne.n	800fe44 <_ZN3USB17DefaultAddressingEhhb+0xce>
                hubCounter = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	71eb      	strb	r3, [r5, #7]
                        return;
 800fe5e:	e7dc      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
                if(index == 0)
 800fe60:	2900      	cmp	r1, #0
 800fe62:	d0da      	beq.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
 800fe64:	b2de      	uxtb	r6, r3
                UsbDeviceAddress uda = thePool[index].address;
 800fe66:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
 800fe6a:	442b      	add	r3, r5
 800fe6c:	7b1b      	ldrb	r3, [r3, #12]
 800fe6e:	f003 0807 	and.w	r8, r3, #7
                if(uda.bmHub == 1) {
 800fe72:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fe76:	d01e      	beq.n	800feb6 <_ZN3USB17DefaultAddressingEhhb+0x140>
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800fe78:	46a9      	mov	r9, r5
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800fe7a:	2401      	movs	r4, #1
 800fe7c:	e004      	b.n	800fe88 <_ZN3USB17DefaultAddressingEhhb+0x112>
 800fe7e:	b1a4      	cbz	r4, 800feaa <_ZN3USB17DefaultAddressingEhhb+0x134>
                                FreeAddressByIndex(i);
 800fe80:	4621      	mov	r1, r4
 800fe82:	4648      	mov	r0, r9
 800fe84:	f7ff fee8 	bl	800fc58 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800fe88:	1e63      	subs	r3, r4, #1
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	2b0f      	cmp	r3, #15
 800fe8e:	bf28      	it	cs
 800fe90:	2401      	movcs	r4, #1
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800fe92:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800fe96:	442b      	add	r3, r5
 800fe98:	7b1b      	ldrb	r3, [r3, #12]
 800fe9a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800fe9e:	4543      	cmp	r3, r8
 800fea0:	d0ed      	beq.n	800fe7e <_ZN3USB17DefaultAddressingEhhb+0x108>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800fea2:	3401      	adds	r4, #1
 800fea4:	b2e4      	uxtb	r4, r4
 800fea6:	2c0f      	cmp	r4, #15
 800fea8:	d9f3      	bls.n	800fe92 <_ZN3USB17DefaultAddressingEhhb+0x11c>
                        if(hubCounter == uda.bmAddress)
 800feaa:	79eb      	ldrb	r3, [r5, #7]
 800feac:	4543      	cmp	r3, r8
                                hubCounter--;
 800feae:	bf04      	itt	eq
 800feb0:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800feb4:	71eb      	strbeq	r3, [r5, #7]
                thePool[index].address.devAddress = 0;
 800feb6:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800feba:	19ab      	adds	r3, r5, r6
 800febc:	2200      	movs	r2, #0
 800febe:	731a      	strb	r2, [r3, #12]
                thePool[index].epcount = 1;
 800fec0:	2101      	movs	r1, #1
 800fec2:	7359      	strb	r1, [r3, #13]
                thePool[index].lowspeed = 0;
 800fec4:	739a      	strb	r2, [r3, #14]
                thePool[index].epinfo = &dev0ep;
 800fec6:	3504      	adds	r5, #4
 800fec8:	609d      	str	r5, [r3, #8]
 800feca:	e7a6      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
                return USB_ERROR_EPINFO_IS_NULL;
 800fecc:	27d7      	movs	r7, #215	; 0xd7
 800fece:	e7a4      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800fed0:	27d4      	movs	r7, #212	; 0xd4
 800fed2:	e7a2      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800fed4:	27d6      	movs	r7, #214	; 0xd6
 800fed6:	e7a0      	b.n	800fe1a <_ZN3USB17DefaultAddressingEhhb+0xa4>

0800fed8 <_ZN3USB11ConfiguringEhhb>:
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800fed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fedc:	b08f      	sub	sp, #60	; 0x3c
 800fede:	4681      	mov	r9, r0
 800fee0:	9103      	str	r1, [sp, #12]
 800fee2:	9204      	str	r2, [sp, #16]
 800fee4:	461e      	mov	r6, r3
 800fee6:	9305      	str	r3, [sp, #20]
        epInfo.epAddr = 0;
 800fee8:	2100      	movs	r1, #0
 800feea:	f88d 1020 	strb.w	r1, [sp, #32]
        epInfo.maxPktSize = 8;
 800feee:	2308      	movs	r3, #8
 800fef0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        epInfo.bmSndToggle = 0;
 800fef4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800fef8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800fefc:	220f      	movs	r2, #15
 800fefe:	f362 0387 	bfi	r3, r2, #2, #6
 800ff02:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        p = addrPool.GetUsbDevicePtr(0);
 800ff06:	6803      	ldr	r3, [r0, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4798      	blx	r3
        if(!p) {
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	f000 8090 	beq.w	8010032 <_ZN3USB11ConfiguringEhhb+0x15a>
 800ff12:	4604      	mov	r4, r0
        oldep_ptr = p->epinfo;
 800ff14:	6805      	ldr	r5, [r0, #0]
        p->epinfo = &epInfo;
 800ff16:	ab08      	add	r3, sp, #32
 800ff18:	6003      	str	r3, [r0, #0]
        p->lowspeed = lowspeed;
 800ff1a:	7186      	strb	r6, [r0, #6]
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800ff1c:	ab09      	add	r3, sp, #36	; 0x24
 800ff1e:	9300      	str	r3, [sp, #0]
 800ff20:	2312      	movs	r3, #18
 800ff22:	2200      	movs	r2, #0
 800ff24:	4611      	mov	r1, r2
 800ff26:	4648      	mov	r0, r9
 800ff28:	f7ff fe20 	bl	800fb6c <_ZN3USB11getDevDescrEhhtPh>
        p->epinfo = oldep_ptr;
 800ff2c:	6025      	str	r5, [r4, #0]
        if(rcode) {
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d175      	bne.n	801001e <_ZN3USB11ConfiguringEhhb+0x146>
        uint16_t vid = udd->idVendor;
 800ff32:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800ff36:	9302      	str	r3, [sp, #8]
        uint16_t pid = udd->idProduct;
 800ff38:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800ff3c:	9307      	str	r3, [sp, #28]
        uint8_t klass = udd->bDeviceClass;
 800ff3e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800ff42:	9306      	str	r3, [sp, #24]
        uint8_t subklass = udd->bDeviceSubClass;
 800ff44:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ff48:	f109 0574 	add.w	r5, r9, #116	; 0x74
 800ff4c:	f109 08b4 	add.w	r8, r9, #180	; 0xb4
        uint8_t subklass = udd->bDeviceSubClass;
 800ff50:	462c      	mov	r4, r5
 800ff52:	2600      	movs	r6, #0
 800ff54:	e00c      	b.n	800ff70 <_ZN3USB11ConfiguringEhhb+0x98>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ff56:	9b05      	ldr	r3, [sp, #20]
 800ff58:	9300      	str	r3, [sp, #0]
 800ff5a:	9b04      	ldr	r3, [sp, #16]
 800ff5c:	9a03      	ldr	r2, [sp, #12]
 800ff5e:	4651      	mov	r1, sl
 800ff60:	4648      	mov	r0, r9
 800ff62:	f7ff fa5e 	bl	800f422 <_ZN3USB13AttemptConfigEhhhb>
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ff66:	28d1      	cmp	r0, #209	; 0xd1
 800ff68:	d124      	bne.n	800ffb4 <_ZN3USB11ConfiguringEhhb+0xdc>
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ff6a:	3601      	adds	r6, #1
 800ff6c:	4544      	cmp	r4, r8
 800ff6e:	d024      	beq.n	800ffba <_ZN3USB11ConfiguringEhhb+0xe2>
 800ff70:	fa5f fa86 	uxtb.w	sl, r6
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ff74:	3404      	adds	r4, #4
 800ff76:	6820      	ldr	r0, [r4, #0]
 800ff78:	2800      	cmp	r0, #0
 800ff7a:	d0f6      	beq.n	800ff6a <_ZN3USB11ConfiguringEhhb+0x92>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ff7c:	6803      	ldr	r3, [r0, #0]
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	4798      	blx	r3
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d1f1      	bne.n	800ff6a <_ZN3USB11ConfiguringEhhb+0x92>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800ff86:	6820      	ldr	r0, [r4, #0]
 800ff88:	6803      	ldr	r3, [r0, #0]
 800ff8a:	6a1b      	ldr	r3, [r3, #32]
 800ff8c:	4659      	mov	r1, fp
 800ff8e:	4798      	blx	r3
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0ea      	beq.n	800ff6a <_ZN3USB11ConfiguringEhhb+0x92>
 800ff94:	6820      	ldr	r0, [r4, #0]
 800ff96:	6803      	ldr	r3, [r0, #0]
 800ff98:	699b      	ldr	r3, [r3, #24]
 800ff9a:	9a07      	ldr	r2, [sp, #28]
 800ff9c:	9902      	ldr	r1, [sp, #8]
 800ff9e:	4798      	blx	r3
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d1d8      	bne.n	800ff56 <_ZN3USB11ConfiguringEhhb+0x7e>
 800ffa4:	6820      	ldr	r0, [r4, #0]
 800ffa6:	6803      	ldr	r3, [r0, #0]
 800ffa8:	69db      	ldr	r3, [r3, #28]
 800ffaa:	9906      	ldr	r1, [sp, #24]
 800ffac:	4798      	blx	r3
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d0db      	beq.n	800ff6a <_ZN3USB11ConfiguringEhhb+0x92>
 800ffb2:	e7d0      	b.n	800ff56 <_ZN3USB11ConfiguringEhhb+0x7e>
        if(devConfigIndex < USB_NUMDEVICES) {
 800ffb4:	f1ba 0f0f 	cmp.w	sl, #15
 800ffb8:	d931      	bls.n	801001e <_ZN3USB11ConfiguringEhhb+0x146>
        uint8_t subklass = udd->bDeviceSubClass;
 800ffba:	2400      	movs	r4, #0
 800ffbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ffc0:	e002      	b.n	800ffc8 <_ZN3USB11ConfiguringEhhb+0xf0>
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ffc2:	3401      	adds	r4, #1
 800ffc4:	4545      	cmp	r5, r8
 800ffc6:	d02d      	beq.n	8010024 <_ZN3USB11ConfiguringEhhb+0x14c>
 800ffc8:	b2e7      	uxtb	r7, r4
                if(!devConfig[devConfigIndex]) continue;
 800ffca:	3504      	adds	r5, #4
 800ffcc:	6828      	ldr	r0, [r5, #0]
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0f7      	beq.n	800ffc2 <_ZN3USB11ConfiguringEhhb+0xea>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ffd2:	6803      	ldr	r3, [r0, #0]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	4798      	blx	r3
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d1f2      	bne.n	800ffc2 <_ZN3USB11ConfiguringEhhb+0xea>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ffdc:	6828      	ldr	r0, [r5, #0]
 800ffde:	6803      	ldr	r3, [r0, #0]
 800ffe0:	6a1b      	ldr	r3, [r3, #32]
 800ffe2:	4659      	mov	r1, fp
 800ffe4:	4798      	blx	r3
 800ffe6:	b170      	cbz	r0, 8010006 <_ZN3USB11ConfiguringEhhb+0x12e>
 800ffe8:	6828      	ldr	r0, [r5, #0]
 800ffea:	6803      	ldr	r3, [r0, #0]
 800ffec:	699b      	ldr	r3, [r3, #24]
 800ffee:	4652      	mov	r2, sl
 800fff0:	9902      	ldr	r1, [sp, #8]
 800fff2:	4798      	blx	r3
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d1e4      	bne.n	800ffc2 <_ZN3USB11ConfiguringEhhb+0xea>
 800fff8:	6828      	ldr	r0, [r5, #0]
 800fffa:	6803      	ldr	r3, [r0, #0]
 800fffc:	69db      	ldr	r3, [r3, #28]
 800fffe:	9906      	ldr	r1, [sp, #24]
 8010000:	4798      	blx	r3
 8010002:	2800      	cmp	r0, #0
 8010004:	d1dd      	bne.n	800ffc2 <_ZN3USB11ConfiguringEhhb+0xea>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8010006:	9b05      	ldr	r3, [sp, #20]
 8010008:	9300      	str	r3, [sp, #0]
 801000a:	9b04      	ldr	r3, [sp, #16]
 801000c:	9a03      	ldr	r2, [sp, #12]
 801000e:	4639      	mov	r1, r7
 8010010:	4648      	mov	r0, r9
 8010012:	f7ff fa06 	bl	800f422 <_ZN3USB13AttemptConfigEhhhb>
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8010016:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
 801001a:	2bd1      	cmp	r3, #209	; 0xd1
 801001c:	d0d1      	beq.n	800ffc2 <_ZN3USB11ConfiguringEhhb+0xea>
}
 801001e:	b00f      	add	sp, #60	; 0x3c
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rcode = DefaultAddressing(parent, port, lowspeed);
 8010024:	9b05      	ldr	r3, [sp, #20]
 8010026:	9a04      	ldr	r2, [sp, #16]
 8010028:	9903      	ldr	r1, [sp, #12]
 801002a:	4648      	mov	r0, r9
 801002c:	f7ff fea3 	bl	800fd76 <_ZN3USB17DefaultAddressingEhhb>
        return rcode;
 8010030:	e7f5      	b.n	801001e <_ZN3USB11ConfiguringEhhb+0x146>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8010032:	20d6      	movs	r0, #214	; 0xd6
 8010034:	e7f3      	b.n	801001e <_ZN3USB11ConfiguringEhhb+0x146>
	...

08010038 <_ZN3USB4TaskEv>:
{
 8010038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801003c:	4607      	mov	r7, r0
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 801003e:	2180      	movs	r1, #128	; 0x80
 8010040:	4869      	ldr	r0, [pc, #420]	; (80101e8 <_ZN3USB4TaskEv+0x1b0>)
 8010042:	f7f2 f97d 	bl	8002340 <HAL_GPIO_ReadPin>
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8010046:	b138      	cbz	r0, 8010058 <_ZN3USB4TaskEv+0x20>
                return vbusState;
 8010048:	4b68      	ldr	r3, [pc, #416]	; (80101ec <_ZN3USB4TaskEv+0x1b4>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	2b03      	cmp	r3, #3
 801004e:	d840      	bhi.n	80100d2 <_ZN3USB4TaskEv+0x9a>
 8010050:	e8df f003 	tbb	[pc, r3]
 8010054:	25331319 	.word	0x25331319

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8010058:	21c8      	movs	r1, #200	; 0xc8
 801005a:	4638      	mov	r0, r7
 801005c:	f7f0 ff16 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8010060:	f010 0220 	ands.w	r2, r0, #32
 8010064:	d104      	bne.n	8010070 <_ZN3USB4TaskEv+0x38>
                busprobe();
                HIRQ_sendback |= bmCONDETIRQ;
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 8010066:	21c8      	movs	r1, #200	; 0xc8
 8010068:	4638      	mov	r0, r7
 801006a:	f7f0 feed 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
 801006e:	e7eb      	b.n	8010048 <_ZN3USB4TaskEv+0x10>
                busprobe();
 8010070:	4638      	mov	r0, r7
 8010072:	f7f0 ff37 	bl	8000ee4 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8010076:	2220      	movs	r2, #32
 8010078:	e7f5      	b.n	8010066 <_ZN3USB4TaskEv+0x2e>
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 801007a:	4b5d      	ldr	r3, [pc, #372]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 801007c:	2213      	movs	r2, #19
 801007e:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8010080:	f04f 0800 	mov.w	r8, #0
                        break;
 8010084:	e013      	b.n	80100ae <_ZN3USB4TaskEv+0x76>
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8010086:	4b5a      	ldr	r3, [pc, #360]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801008e:	2b10      	cmp	r3, #16
 8010090:	d022      	beq.n	80100d8 <_ZN3USB4TaskEv+0xa0>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8010092:	4b57      	ldr	r3, [pc, #348]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 8010094:	2211      	movs	r2, #17
 8010096:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8010098:	f04f 0800 	mov.w	r8, #0
 801009c:	e007      	b.n	80100ae <_ZN3USB4TaskEv+0x76>
                return vbusState;
 801009e:	f04f 0801 	mov.w	r8, #1
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80100a2:	4b53      	ldr	r3, [pc, #332]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100aa:	2b10      	cmp	r3, #16
 80100ac:	d008      	beq.n	80100c0 <_ZN3USB4TaskEv+0x88>
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80100ae:	f107 0674 	add.w	r6, r7, #116	; 0x74
 80100b2:	f107 05b4 	add.w	r5, r7, #180	; 0xb4
 80100b6:	4634      	mov	r4, r6
 80100b8:	e013      	b.n	80100e2 <_ZN3USB4TaskEv+0xaa>
        bool lowspeed = false;
 80100ba:	f04f 0800 	mov.w	r8, #0
 80100be:	e7f0      	b.n	80100a2 <_ZN3USB4TaskEv+0x6a>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80100c0:	f7f1 fe98 	bl	8001df4 <HAL_GetTick>
 80100c4:	30c8      	adds	r0, #200	; 0xc8
 80100c6:	4a4b      	ldr	r2, [pc, #300]	; (80101f4 <_ZN3USB4TaskEv+0x1bc>)
 80100c8:	6010      	str	r0, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80100ca:	4b49      	ldr	r3, [pc, #292]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 80100cc:	2220      	movs	r2, #32
 80100ce:	701a      	strb	r2, [r3, #0]
 80100d0:	e7ed      	b.n	80100ae <_ZN3USB4TaskEv+0x76>
 80100d2:	f04f 0800 	mov.w	r8, #0
 80100d6:	e7ea      	b.n	80100ae <_ZN3USB4TaskEv+0x76>
                        lowspeed = false;
 80100d8:	f04f 0800 	mov.w	r8, #0
 80100dc:	e7e7      	b.n	80100ae <_ZN3USB4TaskEv+0x76>
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80100de:	42ac      	cmp	r4, r5
 80100e0:	d007      	beq.n	80100f2 <_ZN3USB4TaskEv+0xba>
                if(devConfig[i])
 80100e2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d0f9      	beq.n	80100de <_ZN3USB4TaskEv+0xa6>
                        rcode = devConfig[i]->Poll();
 80100ea:	6803      	ldr	r3, [r0, #0]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	4798      	blx	r3
 80100f0:	e7f5      	b.n	80100de <_ZN3USB4TaskEv+0xa6>
        switch(usb_task_state) {
 80100f2:	4b3f      	ldr	r3, [pc, #252]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	2b40      	cmp	r3, #64	; 0x40
 80100f8:	d051      	beq.n	801019e <_ZN3USB4TaskEv+0x166>
 80100fa:	d813      	bhi.n	8010124 <_ZN3USB4TaskEv+0xec>
 80100fc:	2b20      	cmp	r3, #32
 80100fe:	d043      	beq.n	8010188 <_ZN3USB4TaskEv+0x150>
 8010100:	2b30      	cmp	r3, #48	; 0x30
 8010102:	d109      	bne.n	8010118 <_ZN3USB4TaskEv+0xe0>
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8010104:	2201      	movs	r2, #1
 8010106:	21e8      	movs	r1, #232	; 0xe8
 8010108:	4638      	mov	r0, r7
 801010a:	f7f0 fe9d 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 801010e:	4b38      	ldr	r3, [pc, #224]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 8010110:	2240      	movs	r2, #64	; 0x40
 8010112:	701a      	strb	r2, [r3, #0]
}
 8010114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch(usb_task_state) {
 8010118:	2b11      	cmp	r3, #17
 801011a:	d1fb      	bne.n	8010114 <_ZN3USB4TaskEv+0xdc>
        bmHubPre = 0;
 801011c:	2300      	movs	r3, #0
 801011e:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8010122:	e025      	b.n	8010170 <_ZN3USB4TaskEv+0x138>
        switch(usb_task_state) {
 8010124:	2b51      	cmp	r3, #81	; 0x51
 8010126:	d050      	beq.n	80101ca <_ZN3USB4TaskEv+0x192>
 8010128:	2b80      	cmp	r3, #128	; 0x80
 801012a:	d10d      	bne.n	8010148 <_ZN3USB4TaskEv+0x110>
                        rcode = Configuring(0, 0, lowspeed);
 801012c:	4643      	mov	r3, r8
 801012e:	2200      	movs	r2, #0
 8010130:	4611      	mov	r1, r2
 8010132:	4638      	mov	r0, r7
 8010134:	f7ff fed0 	bl	800fed8 <_ZN3USB11ConfiguringEhhb>
                        if(rcode) {
 8010138:	2800      	cmp	r0, #0
 801013a:	d051      	beq.n	80101e0 <_ZN3USB4TaskEv+0x1a8>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 801013c:	28d2      	cmp	r0, #210	; 0xd2
 801013e:	d0e9      	beq.n	8010114 <_ZN3USB4TaskEv+0xdc>
                                        usb_task_state = USB_STATE_ERROR;
 8010140:	4b2b      	ldr	r3, [pc, #172]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 8010142:	22a0      	movs	r2, #160	; 0xa0
 8010144:	701a      	strb	r2, [r3, #0]
 8010146:	e7e5      	b.n	8010114 <_ZN3USB4TaskEv+0xdc>
        switch(usb_task_state) {
 8010148:	2b50      	cmp	r3, #80	; 0x50
 801014a:	d1e3      	bne.n	8010114 <_ZN3USB4TaskEv+0xdc>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 801014c:	21c8      	movs	r1, #200	; 0xc8
 801014e:	4638      	mov	r0, r7
 8010150:	f7f0 fe9c 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 8010154:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010158:	d0dc      	beq.n	8010114 <_ZN3USB4TaskEv+0xdc>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 801015a:	4b25      	ldr	r3, [pc, #148]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 801015c:	2251      	movs	r2, #81	; 0x51
 801015e:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8010160:	f7f1 fe48 	bl	8001df4 <HAL_GetTick>
 8010164:	3014      	adds	r0, #20
 8010166:	4a23      	ldr	r2, [pc, #140]	; (80101f4 <_ZN3USB4TaskEv+0x1bc>)
 8010168:	6010      	str	r0, [r2, #0]
 801016a:	e7d3      	b.n	8010114 <_ZN3USB4TaskEv+0xdc>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801016c:	42ae      	cmp	r6, r5
 801016e:	d007      	beq.n	8010180 <_ZN3USB4TaskEv+0x148>
                                if(devConfig[i])
 8010170:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010174:	2800      	cmp	r0, #0
 8010176:	d0f9      	beq.n	801016c <_ZN3USB4TaskEv+0x134>
                                        rcode = devConfig[i]->Release();
 8010178:	6803      	ldr	r3, [r0, #0]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	4798      	blx	r3
 801017e:	e7f5      	b.n	801016c <_ZN3USB4TaskEv+0x134>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8010180:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 8010182:	2212      	movs	r2, #18
 8010184:	701a      	strb	r2, [r3, #0]
                        break;
 8010186:	e7c5      	b.n	8010114 <_ZN3USB4TaskEv+0xdc>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8010188:	f7f1 fe34 	bl	8001df4 <HAL_GetTick>
 801018c:	4b19      	ldr	r3, [pc, #100]	; (80101f4 <_ZN3USB4TaskEv+0x1bc>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	1ac3      	subs	r3, r0, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	dbbe      	blt.n	8010114 <_ZN3USB4TaskEv+0xdc>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8010196:	4b16      	ldr	r3, [pc, #88]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 8010198:	2230      	movs	r2, #48	; 0x30
 801019a:	701a      	strb	r2, [r3, #0]
 801019c:	e7b2      	b.n	8010104 <_ZN3USB4TaskEv+0xcc>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 801019e:	21e8      	movs	r1, #232	; 0xe8
 80101a0:	4638      	mov	r0, r7
 80101a2:	f7f0 fe73 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80101a6:	f010 0f01 	tst.w	r0, #1
 80101aa:	d1b3      	bne.n	8010114 <_ZN3USB4TaskEv+0xdc>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 80101ac:	21d8      	movs	r1, #216	; 0xd8
 80101ae:	4638      	mov	r0, r7
 80101b0:	f7f0 fe6c 	bl	8000e8c <_ZN8MAX3421eI3P102P9E5regRdEh>
 80101b4:	f040 0208 	orr.w	r2, r0, #8
                                regWr(rMODE, tmpdata);
 80101b8:	b2d2      	uxtb	r2, r2
 80101ba:	21d8      	movs	r1, #216	; 0xd8
 80101bc:	4638      	mov	r0, r7
 80101be:	f7f0 fe43 	bl	8000e48 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80101c2:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 80101c4:	2250      	movs	r2, #80	; 0x50
 80101c6:	701a      	strb	r2, [r3, #0]
 80101c8:	e7a4      	b.n	8010114 <_ZN3USB4TaskEv+0xdc>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 80101ca:	f7f1 fe13 	bl	8001df4 <HAL_GetTick>
 80101ce:	4b09      	ldr	r3, [pc, #36]	; (80101f4 <_ZN3USB4TaskEv+0x1bc>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	1ac3      	subs	r3, r0, r3
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	db9d      	blt.n	8010114 <_ZN3USB4TaskEv+0xdc>
 80101d8:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 80101da:	2280      	movs	r2, #128	; 0x80
 80101dc:	701a      	strb	r2, [r3, #0]
 80101de:	e7a5      	b.n	801012c <_ZN3USB4TaskEv+0xf4>
                                usb_task_state = USB_STATE_RUNNING;
 80101e0:	4b03      	ldr	r3, [pc, #12]	; (80101f0 <_ZN3USB4TaskEv+0x1b8>)
 80101e2:	2290      	movs	r2, #144	; 0x90
 80101e4:	701a      	strb	r2, [r3, #0]
}
 80101e6:	e795      	b.n	8010114 <_ZN3USB4TaskEv+0xdc>
 80101e8:	40020800 	.word	0x40020800
 80101ec:	200001cc 	.word	0x200001cc
 80101f0:	2000540c 	.word	0x2000540c
 80101f4:	20005410 	.word	0x20005410

080101f8 <_ZN20MultiByteValueParser5ParseEPPhPt>:
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
        if(!pBuf) {
 80101f8:	6803      	ldr	r3, [r0, #0]
 80101fa:	b1fb      	cbz	r3, 801023c <_ZN20MultiByteValueParser5ParseEPPhPt+0x44>
bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80101fc:	b430      	push	{r4, r5}
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80101fe:	7904      	ldrb	r4, [r0, #4]
 8010200:	b19c      	cbz	r4, 801022a <_ZN20MultiByteValueParser5ParseEPPhPt+0x32>
 8010202:	8813      	ldrh	r3, [r2, #0]
 8010204:	b1b3      	cbz	r3, 8010234 <_ZN20MultiByteValueParser5ParseEPPhPt+0x3c>
                pBuf[valueSize - countDown] = (**pp);
 8010206:	680b      	ldr	r3, [r1, #0]
 8010208:	781d      	ldrb	r5, [r3, #0]
 801020a:	7943      	ldrb	r3, [r0, #5]
 801020c:	1b1b      	subs	r3, r3, r4
 801020e:	6804      	ldr	r4, [r0, #0]
 8010210:	54e5      	strb	r5, [r4, r3]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8010212:	7903      	ldrb	r3, [r0, #4]
 8010214:	3b01      	subs	r3, #1
 8010216:	7103      	strb	r3, [r0, #4]
 8010218:	8813      	ldrh	r3, [r2, #0]
 801021a:	3b01      	subs	r3, #1
 801021c:	8013      	strh	r3, [r2, #0]
 801021e:	680b      	ldr	r3, [r1, #0]
 8010220:	3301      	adds	r3, #1
 8010222:	600b      	str	r3, [r1, #0]
 8010224:	7904      	ldrb	r4, [r0, #4]
 8010226:	2c00      	cmp	r4, #0
 8010228:	d1eb      	bne.n	8010202 <_ZN20MultiByteValueParser5ParseEPPhPt+0xa>

        if(countDown)
                return false;

        countDown = valueSize;
 801022a:	7943      	ldrb	r3, [r0, #5]
 801022c:	7103      	strb	r3, [r0, #4]
        return true;
 801022e:	2001      	movs	r0, #1
}
 8010230:	bc30      	pop	{r4, r5}
 8010232:	4770      	bx	lr
        if(countDown)
 8010234:	2c00      	cmp	r4, #0
 8010236:	d0f8      	beq.n	801022a <_ZN20MultiByteValueParser5ParseEPPhPt+0x32>
                return false;
 8010238:	2000      	movs	r0, #0
 801023a:	e7f9      	b.n	8010230 <_ZN20MultiByteValueParser5ParseEPPhPt+0x38>
                return false;
 801023c:	2000      	movs	r0, #0
}
 801023e:	4770      	bx	lr

08010240 <__cxa_pure_virtual>:
 8010240:	b508      	push	{r3, lr}
 8010242:	f000 f80d 	bl	8010260 <_ZSt9terminatev>

08010246 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010246:	b508      	push	{r3, lr}
 8010248:	4780      	blx	r0
 801024a:	f000 f80e 	bl	801026a <abort>
	...

08010250 <_ZSt13get_terminatev>:
 8010250:	4b02      	ldr	r3, [pc, #8]	; (801025c <_ZSt13get_terminatev+0xc>)
 8010252:	6818      	ldr	r0, [r3, #0]
 8010254:	f3bf 8f5b 	dmb	ish
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	20000148 	.word	0x20000148

08010260 <_ZSt9terminatev>:
 8010260:	b508      	push	{r3, lr}
 8010262:	f7ff fff5 	bl	8010250 <_ZSt13get_terminatev>
 8010266:	f7ff ffee 	bl	8010246 <_ZN10__cxxabiv111__terminateEPFvvE>

0801026a <abort>:
 801026a:	b508      	push	{r3, lr}
 801026c:	2006      	movs	r0, #6
 801026e:	f000 f86b 	bl	8010348 <raise>
 8010272:	2001      	movs	r0, #1
 8010274:	f7f1 fb9a 	bl	80019ac <_exit>

08010278 <__errno>:
 8010278:	4b01      	ldr	r3, [pc, #4]	; (8010280 <__errno+0x8>)
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	2000014c 	.word	0x2000014c

08010284 <__libc_init_array>:
 8010284:	b570      	push	{r4, r5, r6, lr}
 8010286:	4d0d      	ldr	r5, [pc, #52]	; (80102bc <__libc_init_array+0x38>)
 8010288:	4c0d      	ldr	r4, [pc, #52]	; (80102c0 <__libc_init_array+0x3c>)
 801028a:	1b64      	subs	r4, r4, r5
 801028c:	10a4      	asrs	r4, r4, #2
 801028e:	2600      	movs	r6, #0
 8010290:	42a6      	cmp	r6, r4
 8010292:	d109      	bne.n	80102a8 <__libc_init_array+0x24>
 8010294:	4d0b      	ldr	r5, [pc, #44]	; (80102c4 <__libc_init_array+0x40>)
 8010296:	4c0c      	ldr	r4, [pc, #48]	; (80102c8 <__libc_init_array+0x44>)
 8010298:	f000 f884 	bl	80103a4 <_init>
 801029c:	1b64      	subs	r4, r4, r5
 801029e:	10a4      	asrs	r4, r4, #2
 80102a0:	2600      	movs	r6, #0
 80102a2:	42a6      	cmp	r6, r4
 80102a4:	d105      	bne.n	80102b2 <__libc_init_array+0x2e>
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
 80102a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80102ac:	4798      	blx	r3
 80102ae:	3601      	adds	r6, #1
 80102b0:	e7ee      	b.n	8010290 <__libc_init_array+0xc>
 80102b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80102b6:	4798      	blx	r3
 80102b8:	3601      	adds	r6, #1
 80102ba:	e7f2      	b.n	80102a2 <__libc_init_array+0x1e>
 80102bc:	08011570 	.word	0x08011570
 80102c0:	08011570 	.word	0x08011570
 80102c4:	08011570 	.word	0x08011570
 80102c8:	08011578 	.word	0x08011578

080102cc <memcpy>:
 80102cc:	440a      	add	r2, r1
 80102ce:	4291      	cmp	r1, r2
 80102d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80102d4:	d100      	bne.n	80102d8 <memcpy+0xc>
 80102d6:	4770      	bx	lr
 80102d8:	b510      	push	{r4, lr}
 80102da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102e2:	4291      	cmp	r1, r2
 80102e4:	d1f9      	bne.n	80102da <memcpy+0xe>
 80102e6:	bd10      	pop	{r4, pc}

080102e8 <memset>:
 80102e8:	4402      	add	r2, r0
 80102ea:	4603      	mov	r3, r0
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d100      	bne.n	80102f2 <memset+0xa>
 80102f0:	4770      	bx	lr
 80102f2:	f803 1b01 	strb.w	r1, [r3], #1
 80102f6:	e7f9      	b.n	80102ec <memset+0x4>

080102f8 <_raise_r>:
 80102f8:	291f      	cmp	r1, #31
 80102fa:	b538      	push	{r3, r4, r5, lr}
 80102fc:	4604      	mov	r4, r0
 80102fe:	460d      	mov	r5, r1
 8010300:	d904      	bls.n	801030c <_raise_r+0x14>
 8010302:	2316      	movs	r3, #22
 8010304:	6003      	str	r3, [r0, #0]
 8010306:	f04f 30ff 	mov.w	r0, #4294967295
 801030a:	bd38      	pop	{r3, r4, r5, pc}
 801030c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801030e:	b112      	cbz	r2, 8010316 <_raise_r+0x1e>
 8010310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010314:	b94b      	cbnz	r3, 801032a <_raise_r+0x32>
 8010316:	4620      	mov	r0, r4
 8010318:	f000 f830 	bl	801037c <_getpid_r>
 801031c:	462a      	mov	r2, r5
 801031e:	4601      	mov	r1, r0
 8010320:	4620      	mov	r0, r4
 8010322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010326:	f000 b817 	b.w	8010358 <_kill_r>
 801032a:	2b01      	cmp	r3, #1
 801032c:	d00a      	beq.n	8010344 <_raise_r+0x4c>
 801032e:	1c59      	adds	r1, r3, #1
 8010330:	d103      	bne.n	801033a <_raise_r+0x42>
 8010332:	2316      	movs	r3, #22
 8010334:	6003      	str	r3, [r0, #0]
 8010336:	2001      	movs	r0, #1
 8010338:	e7e7      	b.n	801030a <_raise_r+0x12>
 801033a:	2400      	movs	r4, #0
 801033c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010340:	4628      	mov	r0, r5
 8010342:	4798      	blx	r3
 8010344:	2000      	movs	r0, #0
 8010346:	e7e0      	b.n	801030a <_raise_r+0x12>

08010348 <raise>:
 8010348:	4b02      	ldr	r3, [pc, #8]	; (8010354 <raise+0xc>)
 801034a:	4601      	mov	r1, r0
 801034c:	6818      	ldr	r0, [r3, #0]
 801034e:	f7ff bfd3 	b.w	80102f8 <_raise_r>
 8010352:	bf00      	nop
 8010354:	2000014c 	.word	0x2000014c

08010358 <_kill_r>:
 8010358:	b538      	push	{r3, r4, r5, lr}
 801035a:	4d07      	ldr	r5, [pc, #28]	; (8010378 <_kill_r+0x20>)
 801035c:	2300      	movs	r3, #0
 801035e:	4604      	mov	r4, r0
 8010360:	4608      	mov	r0, r1
 8010362:	4611      	mov	r1, r2
 8010364:	602b      	str	r3, [r5, #0]
 8010366:	f7f1 fb11 	bl	800198c <_kill>
 801036a:	1c43      	adds	r3, r0, #1
 801036c:	d102      	bne.n	8010374 <_kill_r+0x1c>
 801036e:	682b      	ldr	r3, [r5, #0]
 8010370:	b103      	cbz	r3, 8010374 <_kill_r+0x1c>
 8010372:	6023      	str	r3, [r4, #0]
 8010374:	bd38      	pop	{r3, r4, r5, pc}
 8010376:	bf00      	nop
 8010378:	20005d78 	.word	0x20005d78

0801037c <_getpid_r>:
 801037c:	f7f1 bafe 	b.w	800197c <_getpid>

08010380 <strncmp>:
 8010380:	b510      	push	{r4, lr}
 8010382:	b16a      	cbz	r2, 80103a0 <strncmp+0x20>
 8010384:	3901      	subs	r1, #1
 8010386:	1884      	adds	r4, r0, r2
 8010388:	f810 3b01 	ldrb.w	r3, [r0], #1
 801038c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010390:	4293      	cmp	r3, r2
 8010392:	d103      	bne.n	801039c <strncmp+0x1c>
 8010394:	42a0      	cmp	r0, r4
 8010396:	d001      	beq.n	801039c <strncmp+0x1c>
 8010398:	2b00      	cmp	r3, #0
 801039a:	d1f5      	bne.n	8010388 <strncmp+0x8>
 801039c:	1a98      	subs	r0, r3, r2
 801039e:	bd10      	pop	{r4, pc}
 80103a0:	4610      	mov	r0, r2
 80103a2:	e7fc      	b.n	801039e <strncmp+0x1e>

080103a4 <_init>:
 80103a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a6:	bf00      	nop
 80103a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103aa:	bc08      	pop	{r3}
 80103ac:	469e      	mov	lr, r3
 80103ae:	4770      	bx	lr

080103b0 <_fini>:
 80103b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b2:	bf00      	nop
 80103b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103b6:	bc08      	pop	{r3}
 80103b8:	469e      	mov	lr, r3
 80103ba:	4770      	bx	lr
