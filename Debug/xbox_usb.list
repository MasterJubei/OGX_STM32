
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016150  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034f4  08016320  08016320  00026320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019814  08019814  000301c4  2**0
                  CONTENTS
  4 .ARM          00000008  08019814  08019814  00029814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801981c  0801981c  000301c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801981c  0801981c  0002981c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019824  08019824  00029824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  08019828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bd4  200001c4  080199ec  000301c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d98  080199ec  00035d98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000638fd  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000091a8  00000000  00000000  00093af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002960  00000000  00000000  0009cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002760  00000000  00000000  0009f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d862  00000000  00000000  000a1d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000325ec  00000000  00000000  000cf5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f870a  00000000  00000000  00101bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fa2b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb84  00000000  00000000  001fa30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c4 	.word	0x200001c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016308 	.word	0x08016308

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c8 	.word	0x200001c8
 800020c:	08016308 	.word	0x08016308

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b96e 	b.w	8000f50 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	468c      	mov	ip, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8083 	bne.w	8000da2 <__udivmoddi4+0x116>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d947      	bls.n	8000d32 <__udivmoddi4+0xa6>
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b142      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca8:	f1c2 0020 	rsb	r0, r2, #32
 8000cac:	fa24 f000 	lsr.w	r0, r4, r0
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	4097      	lsls	r7, r2
 8000cb4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc4:	fa1f fe87 	uxth.w	lr, r7
 8000cc8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 8119 	bcs.w	8000f14 <__udivmoddi4+0x288>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8116 	bls.w	8000f14 <__udivmoddi4+0x288>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	443b      	add	r3, r7
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8105 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f240 8102 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xaa>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d150      	bne.n	8000de0 <__udivmoddi4+0x154>
 8000d3e:	1bcb      	subs	r3, r1, r7
 8000d40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	2601      	movs	r6, #1
 8000d4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4e:	0c21      	lsrs	r1, r4, #16
 8000d50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb08 f30c 	mul.w	r3, r8, ip
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0xe2>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f200 80e9 	bhi.w	8000f40 <__udivmoddi4+0x2b4>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1ac9      	subs	r1, r1, r3
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x10c>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x10a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80d9 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e7bf      	b.n	8000d22 <__udivmoddi4+0x96>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0x12e>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80b1 	beq.w	8000f0e <__udivmoddi4+0x282>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x1cc>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0x140>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80b8 	bhi.w	8000f3c <__udivmoddi4+0x2b0>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0103 	sbc.w	r1, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0a8      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000dda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f603 	lsr.w	r6, r0, r3
 8000de8:	4097      	lsls	r7, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df2:	40d9      	lsrs	r1, r3
 8000df4:	4330      	orrs	r0, r6
 8000df6:	0c03      	lsrs	r3, r0, #16
 8000df8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f108 	mul.w	r1, r6, r8
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x19c>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e1a:	f080 808d 	bcs.w	8000f38 <__udivmoddi4+0x2ac>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 808a 	bls.w	8000f38 <__udivmoddi4+0x2ac>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	443b      	add	r3, r7
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b281      	uxth	r1, r0
 8000e2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb00 f308 	mul.w	r3, r0, r8
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x1c4>
 8000e40:	1879      	adds	r1, r7, r1
 8000e42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e46:	d273      	bcs.n	8000f30 <__udivmoddi4+0x2a4>
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d971      	bls.n	8000f30 <__udivmoddi4+0x2a4>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4439      	add	r1, r7
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e56:	e778      	b.n	8000d4a <__udivmoddi4+0xbe>
 8000e58:	f1c6 0c20 	rsb	ip, r6, #32
 8000e5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e64:	431c      	orrs	r4, r3
 8000e66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e76:	431f      	orrs	r7, r3
 8000e78:	0c3b      	lsrs	r3, r7, #16
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fa1f f884 	uxth.w	r8, r4
 8000e82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	fa02 f206 	lsl.w	r2, r2, r6
 8000e94:	fa00 f306 	lsl.w	r3, r0, r6
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x220>
 8000e9a:	1861      	adds	r1, r4, r1
 8000e9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea0:	d248      	bcs.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea2:	458a      	cmp	sl, r1
 8000ea4:	d946      	bls.n	8000f34 <__udivmoddi4+0x2a8>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4421      	add	r1, r4
 8000eac:	eba1 010a 	sub.w	r1, r1, sl
 8000eb0:	b2bf      	uxth	r7, r7
 8000eb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ebe:	fb00 f808 	mul.w	r8, r0, r8
 8000ec2:	45b8      	cmp	r8, r7
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x24a>
 8000ec6:	19e7      	adds	r7, r4, r7
 8000ec8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ecc:	d22e      	bcs.n	8000f2c <__udivmoddi4+0x2a0>
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d92c      	bls.n	8000f2c <__udivmoddi4+0x2a0>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4427      	add	r7, r4
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	eba7 0708 	sub.w	r7, r7, r8
 8000ede:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee2:	454f      	cmp	r7, r9
 8000ee4:	46c6      	mov	lr, r8
 8000ee6:	4649      	mov	r1, r9
 8000ee8:	d31a      	bcc.n	8000f20 <__udivmoddi4+0x294>
 8000eea:	d017      	beq.n	8000f1c <__udivmoddi4+0x290>
 8000eec:	b15d      	cbz	r5, 8000f06 <__udivmoddi4+0x27a>
 8000eee:	ebb3 020e 	subs.w	r2, r3, lr
 8000ef2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000efa:	40f2      	lsrs	r2, r6
 8000efc:	ea4c 0202 	orr.w	r2, ip, r2
 8000f00:	40f7      	lsrs	r7, r6
 8000f02:	e9c5 2700 	strd	r2, r7, [r5]
 8000f06:	2600      	movs	r6, #0
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e70b      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fd      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f1c:	4543      	cmp	r3, r8
 8000f1e:	d2e5      	bcs.n	8000eec <__udivmoddi4+0x260>
 8000f20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f24:	eb69 0104 	sbc.w	r1, r9, r4
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7df      	b.n	8000eec <__udivmoddi4+0x260>
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	e7d2      	b.n	8000ed6 <__udivmoddi4+0x24a>
 8000f30:	4660      	mov	r0, ip
 8000f32:	e78d      	b.n	8000e50 <__udivmoddi4+0x1c4>
 8000f34:	4681      	mov	r9, r0
 8000f36:	e7b9      	b.n	8000eac <__udivmoddi4+0x220>
 8000f38:	4666      	mov	r6, ip
 8000f3a:	e775      	b.n	8000e28 <__udivmoddi4+0x19c>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	e74a      	b.n	8000dd6 <__udivmoddi4+0x14a>
 8000f40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f44:	4439      	add	r1, r7
 8000f46:	e713      	b.n	8000d70 <__udivmoddi4+0xe4>
 8000f48:	3802      	subs	r0, #2
 8000f4a:	443c      	add	r4, r7
 8000f4c:	e724      	b.n	8000d98 <__udivmoddi4+0x10c>
 8000f4e:	bf00      	nop

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <_ZN5Print5writeEPKc+0x14>
 8000f64:	2300      	movs	r3, #0
 8000f66:	e00d      	b.n	8000f84 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681c      	ldr	r4, [r3, #0]
 8000f70:	6838      	ldr	r0, [r7, #0]
 8000f72:	f7ff f94d 	bl	8000210 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	461a      	mov	r2, r3
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	47a0      	blx	r4
 8000f80:	4603      	mov	r3, r0
 8000f82:	bf00      	nop
    }
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd90      	pop	{r4, r7, pc}

08000f8c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1e5a      	subs	r2, r3, #1
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00e      	beq.n	8000fce <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	4790      	blx	r2
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000fcc:	e7e6      	b.n	8000f9c <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000fce:	697b      	ldr	r3, [r7, #20]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f805 	bl	8000ff4 <_ZN5Print5printEPKc>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  return write(str);
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffa7 	bl	8000f54 <_ZN5Print5writeEPKc>
 8001006:	4603      	mov	r3, r0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
  return write(c);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	78fa      	ldrb	r2, [r7, #3]
 8001024:	4611      	mov	r1, r2
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f805 	bl	8001054 <_ZN5Print5printEli>
 800104a:	4603      	mov	r3, r0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <_ZN5Print5printEli+0x26>
    return write(n);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	4611      	mov	r1, r2
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	4798      	blx	r3
 8001076:	4603      	mov	r3, r0
 8001078:	e029      	b.n	80010ce <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0a      	cmp	r3, #10
 800107e:	d11d      	bne.n	80010bc <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	da12      	bge.n	80010ac <_ZN5Print5printEli+0x58>
      int t = print('-');
 8001086:	212d      	movs	r1, #45	; 0x2d
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ffc1 	bl	8001010 <_ZN5Print5printEc>
 800108e:	4603      	mov	r3, r0
 8001090:	617b      	str	r3, [r7, #20]
      n = -n;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	425b      	negs	r3, r3
 8001096:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	220a      	movs	r2, #10
 800109c:	4619      	mov	r1, r3
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 f819 	bl	80010d6 <_ZN5Print11printNumberEmh>
 80010a4:	4602      	mov	r2, r0
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	4413      	add	r3, r2
 80010aa:	e010      	b.n	80010ce <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	220a      	movs	r2, #10
 80010b0:	4619      	mov	r1, r3
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 f80f 	bl	80010d6 <_ZN5Print11printNumberEmh>
 80010b8:	4603      	mov	r3, r0
 80010ba:	e008      	b.n	80010ce <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	4619      	mov	r1, r3
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 f806 	bl	80010d6 <_ZN5Print11printNumberEmh>
 80010ca:	4603      	mov	r3, r0
 80010cc:	bf00      	nop
  }
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b090      	sub	sp, #64	; 0x40
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	3320      	adds	r3, #32
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 80010ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d801      	bhi.n	80010fc <_ZN5Print11printNumberEmh+0x26>
 80010f8:	230a      	movs	r3, #10
 80010fa:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	fbb2 f3f3 	udiv	r3, r2, r3
 8001108:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 800110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110c:	b2da      	uxtb	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	79f9      	ldrb	r1, [r7, #7]
 8001114:	fb11 f303 	smulbb	r3, r1, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8001120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001124:	2b09      	cmp	r3, #9
 8001126:	d804      	bhi.n	8001132 <_ZN5Print11printNumberEmh+0x5c>
 8001128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800112c:	3330      	adds	r3, #48	; 0x30
 800112e:	b2db      	uxtb	r3, r3
 8001130:	e003      	b.n	800113a <_ZN5Print11printNumberEmh+0x64>
 8001132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001136:	3337      	adds	r3, #55	; 0x37
 8001138:	b2db      	uxtb	r3, r3
 800113a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800113c:	3a01      	subs	r2, #1
 800113e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001142:	7013      	strb	r3, [r2, #0]
  } while(n);
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d000      	beq.n	800114c <_ZN5Print11printNumberEmh+0x76>
  do {
 800114a:	e7d7      	b.n	80010fc <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 800114c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f7ff ff00 	bl	8000f54 <_ZN5Print5writeEPKc>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3740      	adds	r7, #64	; 0x40
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1cf9      	adds	r1, r7, #3
 8001174:	2201      	movs	r2, #1
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	4798      	blx	r3
 800117a:	4603      	mov	r3, r0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6918      	ldr	r0, [r3, #16]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b29a      	uxth	r2, r3
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	6979      	ldr	r1, [r7, #20]
 80011a2:	f006 fe04 	bl	8007dae <HAL_UART_Transmit>
	return size;
 80011a6:	687b      	ldr	r3, [r7, #4]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6918      	ldr	r0, [r3, #16]
 80011bc:	f107 010f 	add.w	r1, r7, #15
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	2201      	movs	r2, #1
 80011c6:	f006 fe84 	bl	8007ed2 <HAL_UART_Receive>
	return data;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	4a06      	ldr	r2, [pc, #24]	; (800123c <_ZN5PrintC1Ev+0x24>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	08016528 	.word	0x08016528

08001240 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffe4 	bl	8001218 <_ZN5PrintC1Ev>
 8001250:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_ZN6StreamC1Ev+0x28>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08016654 	.word	0x08016654

0800126c <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffe1 	bl	8001240 <_ZN6StreamC1Ev>
 800127e:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	611a      	str	r2, [r3, #16]
	};
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08016538 	.word	0x08016538

08001298 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <_ZN2P910SetDirReadEv+0x24>)
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <_ZN2P910SetDirReadEv+0x24>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <_ZN2P910SetDirReadEv+0x24>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	4903      	ldr	r1, [pc, #12]	; (80012bc <_ZN2P910SetDirReadEv+0x24>)
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <_ZN2P910SetDirReadEv+0x28>)
 80012b2:	f002 fc45 	bl	8003b40 <HAL_GPIO_Init>
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001e0 	.word	0x200001e0
 80012c0:	40020800 	.word	0x40020800

080012c4 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	2201      	movs	r2, #1
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <_ZN3P103SetEv+0x14>)
 80012ce:	f002 fde3 	bl	8003e98 <HAL_GPIO_WritePin>
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020400 	.word	0x40020400

080012dc <_ZN3P105ClearEv>:
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <_ZN3P105ClearEv+0x14>)
 80012e6:	f002 fdd7 	bl	8003e98 <HAL_GPIO_WritePin>
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020400 	.word	0x40020400

080012f4 <_ZN3P1011SetDirWriteEv>:
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <_ZN3P1011SetDirWriteEv+0x28>)
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_ZN3P1011SetDirWriteEv+0x28>)
 8001300:	2201      	movs	r2, #1
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <_ZN3P1011SetDirWriteEv+0x28>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <_ZN3P1011SetDirWriteEv+0x28>)
 800130c:	2203      	movs	r2, #3
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	4902      	ldr	r1, [pc, #8]	; (800131c <_ZN3P1011SetDirWriteEv+0x28>)
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <_ZN3P1011SetDirWriteEv+0x2c>)
 8001314:	f002 fc14 	bl	8003b40 <HAL_GPIO_Init>
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200001f4 	.word	0x200001f4
 8001320:	40020400 	.word	0x40020400

08001324 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2206      	movs	r2, #6
 800133e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
                if(pBtd)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ffde 	bl	8001324 <_ZN3BTD11pairWithHIDEv>
        };
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4798      	blx	r3
                OnInitBTHID();
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	331c      	adds	r3, #28
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
        };
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800139a:	b480      	push	{r7}
 800139c:	b085      	sub	sp, #20
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	460b      	mov	r3, r1
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	72fb      	strb	r3, [r7, #11]
                return;
 80013a8:	bf00      	nop
        }
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <_ZN9PS4ParserC1Ev+0x20>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
                Reset();
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f011 fcc6 	bl	8012d54 <_ZN9PS4Parser5ResetEv>
        };
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08016648 	.word	0x08016648

080013d8 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f81c 	bl	8001422 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	2b20      	cmp	r3, #32
 8001402:	d105      	bne.n	8001410 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f80a 	bl	8001422 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 800140e:	e004      	b.n	800141a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8001410:	2200      	movs	r2, #0
 8001412:	21ff      	movs	r1, #255	; 0xff
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f804 	bl	8001422 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
 800142e:	4613      	mov	r3, r2
 8001430:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	78fa      	ldrb	r2, [r7, #3]
 8001436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	78ba      	ldrb	r2, [r7, #2]
 800143e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	4608      	mov	r0, r1
 8001460:	4611      	mov	r1, r2
 8001462:	461a      	mov	r2, r3
 8001464:	4603      	mov	r3, r0
 8001466:	70fb      	strb	r3, [r7, #3]
 8001468:	460b      	mov	r3, r1
 800146a:	70bb      	strb	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	78ba      	ldrb	r2, [r7, #2]
 800147c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	787a      	ldrb	r2, [r7, #1]
 8001484:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	141b      	asrs	r3, r3, #16
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	121b      	asrs	r3, r3, #8
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffcd 	bl	8001456 <_ZN9PS4Parser6setLedEhhh>
        };
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	79fa      	ldrb	r2, [r7, #7]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	f010 fa54 	bl	8011988 <_ZN5BTHIDC1EP3BTDbPKc>
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3378      	adds	r3, #120	; 0x78
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff65 	bl	80013b4 <_ZN9PS4ParserC1Ev>
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3378      	adds	r3, #120	; 0x78
 80014fa:	4618      	mov	r0, r3
 80014fc:	f011 fc2a 	bl	8012d54 <_ZN9PS4Parser5ResetEv>
        };
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	0801660c 	.word	0x0801660c
 8001510:	0801663c 	.word	0x0801663c

08001514 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7d5b      	ldrb	r3, [r3, #21]
        };
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	460b      	mov	r3, r1
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3378      	adds	r3, #120	; 0x78
 800153e:	7af9      	ldrb	r1, [r7, #11]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	f011 fb41 	bl	8012bca <_ZN9PS4Parser5ParseEhPh>
        };
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3378      	adds	r3, #120	; 0x78
 800155c:	4618      	mov	r0, r3
 800155e:	f011 fbf9 	bl	8012d54 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f855 	bl	8001612 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3378      	adds	r3, #120	; 0x78
 8001574:	21ff      	movs	r1, #255	; 0xff
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff90 	bl	800149c <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3378      	adds	r3, #120	; 0x78
 8001590:	4618      	mov	r0, r3
 8001592:	f011 fbdf 	bl	8012d54 <_ZN9PS4Parser5ResetEv>
        };
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 800159e:	b580      	push	{r7, lr}
 80015a0:	b096      	sub	sp, #88	; 0x58
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	224f      	movs	r2, #79	; 0x4f
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f014 fa31 	bl	8015a18 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 80015b6:	2352      	movs	r3, #82	; 0x52
 80015b8:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 80015ba:	2311      	movs	r3, #17
 80015bc:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 80015c2:	23ff      	movs	r3, #255	; 0xff
 80015c4:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	789b      	ldrb	r3, [r3, #2]
 80015d6:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	78db      	ldrb	r3, [r3, #3]
 80015dc:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	791b      	ldrb	r3, [r3, #4]
 80015e2:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	795b      	ldrb	r3, [r3, #5]
 80015e8:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	799b      	ldrb	r3, [r3, #6]
 80015ee:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2200      	movs	r2, #0
 80015f4:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	224f      	movs	r2, #79	; 0x4f
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f81a 	bl	8001638 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8001604:	bf00      	nop
 8001606:	3758      	adds	r7, #88	; 0x58
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 800160c:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8001610:	e7c5      	b.n	800159e <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08001612 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8001612:	b580      	push	{r7, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 800161a:	2343      	movs	r3, #67	; 0x43
 800161c:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 800161e:	2302      	movs	r3, #2
 8001620:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2202      	movs	r2, #2
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f804 	bl	8001638 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b087      	sub	sp, #28
 800163c:	af02      	add	r7, sp, #8
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	4613      	mov	r3, r2
 8001644:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6898      	ldr	r0, [r3, #8]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8999      	ldrh	r1, [r3, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	7d9b      	ldrb	r3, [r3, #22]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	7dd2      	ldrb	r2, [r2, #23]
 8001656:	79fc      	ldrb	r4, [r7, #7]
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4623      	mov	r3, r4
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	f00f fa2e 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001670:	f002 f91e 	bl	80038b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001674:	f000 f8d8 	bl	8001828 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001678:	f000 fa36 	bl	8001ae8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800167c:	f000 fa06 	bl	8001a8c <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001680:	f000 f9c8 	bl	8001a14 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8001684:	f00c fb6a 	bl	800dd5c <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8001688:	f000 f966 	bl	8001958 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 800168c:	f000 f98e 	bl	80019ac <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <main+0x13c>)
 8001692:	4b46      	ldr	r3, [pc, #280]	; (80017ac <main+0x140>)
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	2358      	movs	r3, #88	; 0x58
 800169a:	461a      	mov	r2, r3
 800169c:	f014 f994 	bl	80159c8 <memcpy>
  UART_Handle = huart2;
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <main+0x144>)
 80016a2:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <main+0x148>)
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	2344      	movs	r3, #68	; 0x44
 80016aa:	461a      	mov	r2, r3
 80016ac:	f014 f98c 	bl	80159c8 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 80016b0:	4841      	ldr	r0, [pc, #260]	; (80017b8 <main+0x14c>)
 80016b2:	f006 f8db 	bl	800786c <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 80016b6:	4941      	ldr	r1, [pc, #260]	; (80017bc <main+0x150>)
 80016b8:	4841      	ldr	r0, [pc, #260]	; (80017c0 <main+0x154>)
 80016ba:	f7ff fc8d 	bl	8000fd8 <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq()/1000000;
 80016be:	f004 fafd 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a3f      	ldr	r2, [pc, #252]	; (80017c4 <main+0x158>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <main+0x15c>)
 80016ce:	6013      	str	r3, [r2, #0]
  Serial.print((int)cpu_freq);
 80016d0:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <main+0x15c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	220a      	movs	r2, #10
 80016d6:	4619      	mov	r1, r3
 80016d8:	4839      	ldr	r0, [pc, #228]	; (80017c0 <main+0x154>)
 80016da:	f7ff fcab 	bl	8001034 <_ZN5Print5printEii>
  Serial.print("MHz");
 80016de:	493b      	ldr	r1, [pc, #236]	; (80017cc <main+0x160>)
 80016e0:	4837      	ldr	r0, [pc, #220]	; (80017c0 <main+0x154>)
 80016e2:	f7ff fc87 	bl	8000ff4 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 80016e6:	493a      	ldr	r1, [pc, #232]	; (80017d0 <main+0x164>)
 80016e8:	4835      	ldr	r0, [pc, #212]	; (80017c0 <main+0x154>)
 80016ea:	f7ff fc83 	bl	8000ff4 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <main+0x14c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <main+0x168>)
 80016f8:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 80016fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fe:	f002 f919 	bl	8003934 <HAL_Delay>
  timer_val2 = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <main+0x14c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <main+0x168>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <main+0x16c>)
 8001714:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8001716:	4931      	ldr	r1, [pc, #196]	; (80017dc <main+0x170>)
 8001718:	4829      	ldr	r0, [pc, #164]	; (80017c0 <main+0x154>)
 800171a:	f7ff fc6b 	bl	8000ff4 <_ZN5Print5printEPKc>
  Serial.print((int)timer_val2/10);
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <main+0x16c>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <main+0x174>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	b29b      	uxth	r3, r3
 800172c:	220a      	movs	r2, #10
 800172e:	4619      	mov	r1, r3
 8001730:	4823      	ldr	r0, [pc, #140]	; (80017c0 <main+0x154>)
 8001732:	f7ff fc7f 	bl	8001034 <_ZN5Print5printEii>
  Serial.print(" ms");
 8001736:	492b      	ldr	r1, [pc, #172]	; (80017e4 <main+0x178>)
 8001738:	4821      	ldr	r0, [pc, #132]	; (80017c0 <main+0x154>)
 800173a:	f7ff fc5b 	bl	8000ff4 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;

  Serial.print((int)hal_gettick);
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <main+0x17c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	220a      	movs	r2, #10
 8001744:	4619      	mov	r1, r3
 8001746:	481e      	ldr	r0, [pc, #120]	; (80017c0 <main+0x154>)
 8001748:	f7ff fc74 	bl	8001034 <_ZN5Print5printEii>



  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800174c:	f009 fdb8 	bl	800b2c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <main+0x180>)
 8001752:	2100      	movs	r1, #0
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <main+0x184>)
 8001756:	f009 fdfd 	bl	800b354 <osThreadNew>
 800175a:	4603      	mov	r3, r0
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <main+0x188>)
 800175e:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8001760:	4a25      	ldr	r2, [pc, #148]	; (80017f8 <main+0x18c>)
 8001762:	2100      	movs	r1, #0
 8001764:	4825      	ldr	r0, [pc, #148]	; (80017fc <main+0x190>)
 8001766:	f009 fdf5 	bl	800b354 <osThreadNew>
 800176a:	4603      	mov	r3, r0
 800176c:	4a24      	ldr	r2, [pc, #144]	; (8001800 <main+0x194>)
 800176e:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8001770:	4a24      	ldr	r2, [pc, #144]	; (8001804 <main+0x198>)
 8001772:	2100      	movs	r1, #0
 8001774:	4824      	ldr	r0, [pc, #144]	; (8001808 <main+0x19c>)
 8001776:	f009 fded 	bl	800b354 <osThreadNew>
 800177a:	4603      	mov	r3, r0
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <main+0x1a0>)
 800177e:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8001780:	4a23      	ldr	r2, [pc, #140]	; (8001810 <main+0x1a4>)
 8001782:	2100      	movs	r1, #0
 8001784:	4823      	ldr	r0, [pc, #140]	; (8001814 <main+0x1a8>)
 8001786:	f009 fde5 	bl	800b354 <osThreadNew>
 800178a:	4603      	mov	r3, r0
 800178c:	4a22      	ldr	r2, [pc, #136]	; (8001818 <main+0x1ac>)
 800178e:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8001790:	4a22      	ldr	r2, [pc, #136]	; (800181c <main+0x1b0>)
 8001792:	2100      	movs	r1, #0
 8001794:	4822      	ldr	r0, [pc, #136]	; (8001820 <main+0x1b4>)
 8001796:	f009 fddd 	bl	800b354 <osThreadNew>
 800179a:	4603      	mov	r3, r0
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <main+0x1b8>)
 800179e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80017a0:	f009 fdb2 	bl	800b308 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <main+0x138>
 80017a6:	bf00      	nop
 80017a8:	20000354 	.word	0x20000354
 80017ac:	2000025c 	.word	0x2000025c
 80017b0:	200003ac 	.word	0x200003ac
 80017b4:	200002b4 	.word	0x200002b4
 80017b8:	200002f8 	.word	0x200002f8
 80017bc:	08016358 	.word	0x08016358
 80017c0:	200003f0 	.word	0x200003f0
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	200006a8 	.word	0x200006a8
 80017cc:	08016370 	.word	0x08016370
 80017d0:	08016374 	.word	0x08016374
 80017d4:	200006ac 	.word	0x200006ac
 80017d8:	200006ae 	.word	0x200006ae
 80017dc:	0801637c 	.word	0x0801637c
 80017e0:	cccccccd 	.word	0xcccccccd
 80017e4:	08016390 	.word	0x08016390
 80017e8:	200006b0 	.word	0x200006b0
 80017ec:	08016550 	.word	0x08016550
 80017f0:	08001bd9 	.word	0x08001bd9
 80017f4:	20000340 	.word	0x20000340
 80017f8:	08016574 	.word	0x08016574
 80017fc:	08002241 	.word	0x08002241
 8001800:	20000344 	.word	0x20000344
 8001804:	08016598 	.word	0x08016598
 8001808:	08002269 	.word	0x08002269
 800180c:	20000348 	.word	0x20000348
 8001810:	080165bc 	.word	0x080165bc
 8001814:	080022c1 	.word	0x080022c1
 8001818:	2000034c 	.word	0x2000034c
 800181c:	080165e0 	.word	0x080165e0
 8001820:	080022d1 	.word	0x080022d1
 8001824:	20000350 	.word	0x20000350

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0ac      	sub	sp, #176	; 0xb0
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001832:	2234      	movs	r2, #52	; 0x34
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f014 f8ee 	bl	8015a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	225c      	movs	r2, #92	; 0x5c
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f014 f8df 	bl	8015a18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	4b3c      	ldr	r3, [pc, #240]	; (8001950 <SystemClock_Config+0x128>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a3b      	ldr	r2, [pc, #236]	; (8001950 <SystemClock_Config+0x128>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <SystemClock_Config+0x128>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <SystemClock_Config+0x12c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a35      	ldr	r2, [pc, #212]	; (8001954 <SystemClock_Config+0x12c>)
 8001880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <SystemClock_Config+0x12c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001892:	2301      	movs	r3, #1
 8001894:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800189a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018b2:	23a8      	movs	r3, #168	; 0xa8
 80018b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018be:	2307      	movs	r3, #7
 80018c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018ce:	4618      	mov	r0, r3
 80018d0:	f004 ff36 	bl	8006740 <HAL_RCC_OscConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf14      	ite	ne
 80018da:	2301      	movne	r3, #1
 80018dc:	2300      	moveq	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018e4:	f000 fd0e 	bl	8002304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001900:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001904:	2105      	movs	r1, #5
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f8f2 	bl	8005af0 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	bf14      	ite	ne
 8001912:	2301      	movne	r3, #1
 8001914:	2300      	moveq	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800191c:	f000 fcf2 	bl	8002304 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001924:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001926:	2300      	movs	r3, #0
 8001928:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fa2a 	bl	8005d88 <HAL_RCCEx_PeriphCLKConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001944:	f000 fcde 	bl	8002304 <Error_Handler>
  }
}
 8001948:	bf00      	nop
 800194a:	37b0      	adds	r7, #176	; 0xb0
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000

08001958 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <_ZL13MX_TIM14_Initv+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168/2)*100 -1;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 8001964:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001968:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 8001972:	f242 720f 	movw	r2, #9999	; 0x270f
 8001976:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001984:	4807      	ldr	r0, [pc, #28]	; (80019a4 <_ZL13MX_TIM14_Initv+0x4c>)
 8001986:	f005 ff21 	bl	80077cc <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf14      	ite	ne
 8001990:	2301      	movne	r3, #1
 8001992:	2300      	moveq	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <_ZL13MX_TIM14_Initv+0x46>
  {
    Error_Handler();
 800199a:	f000 fcb3 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002f8 	.word	0x200002f8
 80019a8:	40002000 	.word	0x40002000

080019ac <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019b2:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <_ZL12MX_I2C1_Initv+0x60>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019b8:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <_ZL12MX_I2C1_Initv+0x64>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <_ZL12MX_I2C1_Initv+0x5c>)
 80019ea:	f002 fa6f 	bl	8003ecc <HAL_I2C_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80019fe:	f000 fc81 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000208 	.word	0x20000208
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	00061a80 	.word	0x00061a80

08001a14 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <_ZL12MX_SPI1_Initv+0x74>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a48:	2218      	movs	r2, #24
 8001a4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a60:	220a      	movs	r2, #10
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <_ZL12MX_SPI1_Initv+0x70>)
 8001a66:	f005 f909 	bl	8006c7c <HAL_SPI_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8001a7a:	f000 fc43 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000025c 	.word	0x2000025c
 8001a88:	40013000 	.word	0x40013000

08001a8c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ac4:	f006 f926 	bl	8007d14 <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001ad8:	f000 fc14 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200002b4 	.word	0x200002b4
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b29      	ldr	r3, [pc, #164]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a1a      	ldr	r2, [pc, #104]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <_ZL12MX_GPIO_Initv+0xdc>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <_ZL12MX_GPIO_Initv+0xe0>)
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4812      	ldr	r0, [pc, #72]	; (8001bcc <_ZL12MX_GPIO_Initv+0xe4>)
 8001b84:	f001 ffdc 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b9e:	f001 ffcf 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <_ZL12MX_GPIO_Initv+0xec>)
 8001bb8:	f001 ffc2 	bl	8003b40 <HAL_GPIO_Init>

}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	10210000 	.word	0x10210000
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <_Z10StartGetBTPv>:

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

void StartGetBT(void *argument)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 8001be0:	48ab      	ldr	r0, [pc, #684]	; (8001e90 <_Z10StartGetBTPv+0x2b8>)
 8001be2:	f000 fb9d 	bl	8002320 <_ZN8MAX3421eI3P102P9E4InitEv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <_Z10StartGetBTPv+0x2a>
  		Serial.print(F("\r\nOSC did not start"));
 8001bf8:	49a6      	ldr	r1, [pc, #664]	; (8001e94 <_Z10StartGetBTPv+0x2bc>)
 8001bfa:	48a7      	ldr	r0, [pc, #668]	; (8001e98 <_Z10StartGetBTPv+0x2c0>)
 8001bfc:	f7ff f9ec 	bl	8000fd8 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8001c00:	e7fe      	b.n	8001c00 <_Z10StartGetBTPv+0x28>
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8001c02:	49a6      	ldr	r1, [pc, #664]	; (8001e9c <_Z10StartGetBTPv+0x2c4>)
 8001c04:	48a4      	ldr	r0, [pc, #656]	; (8001e98 <_Z10StartGetBTPv+0x2c0>)
 8001c06:	f7ff f9e7 	bl	8000fd8 <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 8001c0a:	4ba5      	ldr	r3, [pc, #660]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 8001c10:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 8001c16:	4ba2      	ldr	r3, [pc, #648]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 8001c1c:	4ba0      	ldr	r3, [pc, #640]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 8001c22:	4b9f      	ldr	r3, [pc, #636]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 8001c28:	4b9d      	ldr	r3, [pc, #628]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 8001c2e:	4a9c      	ldr	r2, [pc, #624]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001c30:	7993      	ldrb	r3, [r2, #6]
 8001c32:	f36f 0300 	bfc	r3, #0, #1
 8001c36:	7193      	strb	r3, [r2, #6]


  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001c38:	4b9a      	ldr	r3, [pc, #616]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 8001c3e:	4b99      	ldr	r3, [pc, #612]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c40:	2214      	movs	r2, #20
 8001c42:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001c44:	4b97      	ldr	r3, [pc, #604]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001c4a:	4b96      	ldr	r3, [pc, #600]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 8001c50:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001c56:	4b93      	ldr	r3, [pc, #588]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001c5c:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 8001c62:	4b90      	ldr	r3, [pc, #576]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001c68:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 8001c6e:	4b8d      	ldr	r3, [pc, #564]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001c74:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001c7a:	4b8a      	ldr	r3, [pc, #552]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 8001c80:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001c86:	4b87      	ldr	r3, [pc, #540]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001c8c:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	825a      	strh	r2, [r3, #18]
  ssd1306_TestAll();
 8001c92:	f001 fdd3 	bl	800383c <ssd1306_TestAll>
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}

		Usb.Task();
 8001c96:	487e      	ldr	r0, [pc, #504]	; (8001e90 <_Z10StartGetBTPv+0x2b8>)
 8001c98:	f011 fd9a 	bl	80137d0 <_ZN3USB4TaskEv>
		if (PS4.connected()) {
 8001c9c:	4882      	ldr	r0, [pc, #520]	; (8001ea8 <_Z10StartGetBTPv+0x2d0>)
 8001c9e:	f7ff fc39 	bl	8001514 <_ZN5PS4BT9connectedEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8296 	beq.w	80021d6 <_Z10StartGetBTPv+0x5fe>
			ps4_connected = 1;
 8001caa:	4b80      	ldr	r3, [pc, #512]	; (8001eac <_Z10StartGetBTPv+0x2d4>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	701a      	strb	r2, [r3, #0]
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	487f      	ldr	r0, [pc, #508]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001cb4:	f010 ff79 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b7d      	ldr	r3, [pc, #500]	; (8001eb4 <_Z10StartGetBTPv+0x2dc>)
 8001cbe:	701a      	strb	r2, [r3, #0]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	487b      	ldr	r0, [pc, #492]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001cc4:	f010 ff71 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b7a      	ldr	r3, [pc, #488]	; (8001eb8 <_Z10StartGetBTPv+0x2e0>)
 8001cce:	701a      	strb	r2, [r3, #0]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4877      	ldr	r0, [pc, #476]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001cd4:	f010 ff69 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b77      	ldr	r3, [pc, #476]	; (8001ebc <_Z10StartGetBTPv+0x2e4>)
 8001cde:	701a      	strb	r2, [r3, #0]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8001ce0:	2103      	movs	r1, #3
 8001ce2:	4873      	ldr	r0, [pc, #460]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001ce4:	f010 ff61 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b74      	ldr	r3, [pc, #464]	; (8001ec0 <_Z10StartGetBTPv+0x2e8>)
 8001cee:	701a      	strb	r2, [r3, #0]

			/* Let's have a builtin deadzone */
			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117) {// || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001cf0:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <_Z10StartGetBTPv+0x2dc>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b89      	cmp	r3, #137	; 0x89
 8001cf6:	d80b      	bhi.n	8001d10 <_Z10StartGetBTPv+0x138>
 8001cf8:	4b6e      	ldr	r3, [pc, #440]	; (8001eb4 <_Z10StartGetBTPv+0x2dc>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b74      	cmp	r3, #116	; 0x74
 8001cfe:	d907      	bls.n	8001d10 <_Z10StartGetBTPv+0x138>
 8001d00:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <_Z10StartGetBTPv+0x2e0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b89      	cmp	r3, #137	; 0x89
 8001d06:	d803      	bhi.n	8001d10 <_Z10StartGetBTPv+0x138>
 8001d08:	4b6b      	ldr	r3, [pc, #428]	; (8001eb8 <_Z10StartGetBTPv+0x2e0>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b74      	cmp	r3, #116	; 0x74
 8001d0e:	d82d      	bhi.n	8001d6c <_Z10StartGetBTPv+0x194>
				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8001d10:	2100      	movs	r1, #0
 8001d12:	4867      	ldr	r0, [pc, #412]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001d14:	f010 ff49 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	3b80      	subs	r3, #128	; 0x80
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	b25a      	sxtb	r2, r3
 8001d20:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001d22:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8001d24:	2101      	movs	r1, #1
 8001d26:	4862      	ldr	r0, [pc, #392]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001d28:	f010 ff3f 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	3b80      	subs	r3, #128	; 0x80
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	b25a      	sxtb	r2, r3
 8001d34:	4b5a      	ldr	r3, [pc, #360]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001d36:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 8001d38:	4b59      	ldr	r3, [pc, #356]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001d3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001d44:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001d48:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001d52:	81da      	strh	r2, [r3, #14]
				/* The Y axis by default is inverted on the Xbox */
				xboxHID.leftStickY = -xboxHID.leftStickY-128;
 8001d54:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001d56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001d68:	81da      	strh	r2, [r3, #14]
 8001d6a:	e00b      	b.n	8001d84 <_Z10StartGetBTPv+0x1ac>

			} else {
				gameHID.JoyX = 0;
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	709a      	strb	r2, [r3, #2]
				gameHID.JoyY = 0;
 8001d72:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	70da      	strb	r2, [r3, #3]
				xboxHID.leftStickX = 0;
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	819a      	strh	r2, [r3, #12]
				xboxHID.leftStickY = 0;
 8001d7e:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	81da      	strh	r2, [r3, #14]
			}
			if(RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8001d84:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <_Z10StartGetBTPv+0x2e4>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b89      	cmp	r3, #137	; 0x89
 8001d8a:	d80b      	bhi.n	8001da4 <_Z10StartGetBTPv+0x1cc>
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <_Z10StartGetBTPv+0x2e4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b74      	cmp	r3, #116	; 0x74
 8001d92:	d907      	bls.n	8001da4 <_Z10StartGetBTPv+0x1cc>
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <_Z10StartGetBTPv+0x2e8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b89      	cmp	r3, #137	; 0x89
 8001d9a:	d803      	bhi.n	8001da4 <_Z10StartGetBTPv+0x1cc>
 8001d9c:	4b48      	ldr	r3, [pc, #288]	; (8001ec0 <_Z10StartGetBTPv+0x2e8>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b74      	cmp	r3, #116	; 0x74
 8001da2:	d82d      	bhi.n	8001e00 <_Z10StartGetBTPv+0x228>
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8001da4:	2102      	movs	r1, #2
 8001da6:	4842      	ldr	r0, [pc, #264]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001da8:	f010 feff 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001dac:	4603      	mov	r3, r0
 8001dae:	3b80      	subs	r3, #128	; 0x80
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	b25a      	sxtb	r2, r3
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001db6:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001db8:	2103      	movs	r1, #3
 8001dba:	483d      	ldr	r0, [pc, #244]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001dbc:	f010 fef5 	bl	8012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	3b80      	subs	r3, #128	; 0x80
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	b25a      	sxtb	r2, r3
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001dca:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001dce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001dd8:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001ddc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001de6:	825a      	strh	r2, [r3, #18]

				/* The Y axis by default is inverted on the Xbox */
				xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001dea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001dfc:	825a      	strh	r2, [r3, #18]
 8001dfe:	e00b      	b.n	8001e18 <_Z10StartGetBTPv+0x240>

			} else {
				gameHID.Joy2X = 0;
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	711a      	strb	r2, [r3, #4]
				gameHID.Joy2Y = 0;
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	715a      	strb	r2, [r3, #5]
				xboxHID.rightStickX = 0;
 8001e0c:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	821a      	strh	r2, [r3, #16]
				xboxHID.rightStickY = 0;
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	825a      	strh	r2, [r3, #18]
			}

			xboxHID.L = PS4.getAnalogButton(L2);
 8001e18:	2108      	movs	r1, #8
 8001e1a:	4825      	ldr	r0, [pc, #148]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001e1c:	f010 feac 	bl	8012b78 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e26:	729a      	strb	r2, [r3, #10]
			xboxHID.R = PS4.getAnalogButton(R2);
 8001e28:	2109      	movs	r1, #9
 8001e2a:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001e2c:	f010 fea4 	bl	8012b78 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e36:	72da      	strb	r2, [r3, #11]
			gameHID.Joy_LT = xboxHID.L - 128;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e3a:	7a9b      	ldrb	r3, [r3, #10]
 8001e3c:	3b80      	subs	r3, #128	; 0x80
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001e44:	701a      	strb	r2, [r3, #0]
			gameHID.Joy_RT = xboxHID.R - 128;
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e48:	7adb      	ldrb	r3, [r3, #11]
 8001e4a:	3b80      	subs	r3, #128	; 0x80
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	b25a      	sxtb	r2, r3
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001e52:	705a      	strb	r2, [r3, #1]

			//Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8001e54:	2110      	movs	r1, #16
 8001e56:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001e58:	f010 fe4e 	bl	8012af8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <_Z10StartGetBTPv+0x296>
				PS4.disconnect();
 8001e62:	4811      	ldr	r0, [pc, #68]	; (8001ea8 <_Z10StartGetBTPv+0x2d0>)
 8001e64:	f00f fe01 	bl	8011a6a <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <_Z10StartGetBTPv+0x2ec>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
			} else {
				//gameHID.ps4ButtonsTag.button_ps = 0;
				//PS4.disconnect();
			}

			if (PS4.getButtonPress(TRIANGLE)) {
 8001e6e:	210c      	movs	r1, #12
 8001e70:	480f      	ldr	r0, [pc, #60]	; (8001eb0 <_Z10StartGetBTPv+0x2d8>)
 8001e72:	f010 fe19 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d025      	beq.n	8001ec8 <_Z10StartGetBTPv+0x2f0>
				gameHID.ps4ButtonsTag.button_triangle = 1;
 8001e7c:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <_Z10StartGetBTPv+0x2c8>)
 8001e7e:	79d3      	ldrb	r3, [r2, #7]
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0xFF;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_Z10StartGetBTPv+0x2cc>)
 8001e88:	22ff      	movs	r2, #255	; 0xff
 8001e8a:	71da      	strb	r2, [r3, #7]
 8001e8c:	e024      	b.n	8001ed8 <_Z10StartGetBTPv+0x300>
 8001e8e:	bf00      	nop
 8001e90:	20000404 	.word	0x20000404
 8001e94:	08016394 	.word	0x08016394
 8001e98:	200003f0 	.word	0x200003f0
 8001e9c:	080163a8 	.word	0x080163a8
 8001ea0:	200006b4 	.word	0x200006b4
 8001ea4:	200006bc 	.word	0x200006bc
 8001ea8:	200005d8 	.word	0x200005d8
 8001eac:	200006a2 	.word	0x200006a2
 8001eb0:	20000650 	.word	0x20000650
 8001eb4:	200006a3 	.word	0x200006a3
 8001eb8:	200006a4 	.word	0x200006a4
 8001ebc:	200006a5 	.word	0x200006a5
 8001ec0:	200006a6 	.word	0x200006a6
 8001ec4:	200006a1 	.word	0x200006a1
			} else {
				gameHID.ps4ButtonsTag.button_triangle = 0;
 8001ec8:	4ab9      	ldr	r2, [pc, #740]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001eca:	79d3      	ldrb	r3, [r2, #7]
 8001ecc:	f36f 0300 	bfc	r3, #0, #1
 8001ed0:	71d3      	strb	r3, [r2, #7]
				xboxHID.Y = 0;
 8001ed2:	4bb8      	ldr	r3, [pc, #736]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	71da      	strb	r2, [r3, #7]
			}

			if (PS4.getButtonPress(CIRCLE)) {
 8001ed8:	210d      	movs	r1, #13
 8001eda:	48b7      	ldr	r0, [pc, #732]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 8001edc:	f010 fde4 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <_Z10StartGetBTPv+0x320>
				gameHID.ps4ButtonsTag.button_circle = 1;
 8001ee6:	4ab2      	ldr	r2, [pc, #712]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001ee8:	7993      	ldrb	r3, [r2, #6]
 8001eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eee:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0xFF;
 8001ef0:	4bb0      	ldr	r3, [pc, #704]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001ef2:	22ff      	movs	r2, #255	; 0xff
 8001ef4:	715a      	strb	r2, [r3, #5]
 8001ef6:	e007      	b.n	8001f08 <_Z10StartGetBTPv+0x330>
			} else {
				gameHID.ps4ButtonsTag.button_circle = 0;
 8001ef8:	4aad      	ldr	r2, [pc, #692]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001efa:	7993      	ldrb	r3, [r2, #6]
 8001efc:	f36f 13c7 	bfc	r3, #7, #1
 8001f00:	7193      	strb	r3, [r2, #6]
				xboxHID.B = 0;
 8001f02:	4bac      	ldr	r3, [pc, #688]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	715a      	strb	r2, [r3, #5]
			}

			if (PS4.getButtonPress(CROSS)) {
 8001f08:	210e      	movs	r1, #14
 8001f0a:	48ab      	ldr	r0, [pc, #684]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 8001f0c:	f010 fdcc 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <_Z10StartGetBTPv+0x350>
				gameHID.ps4ButtonsTag.button_cross = 1;
 8001f16:	4aa6      	ldr	r2, [pc, #664]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001f18:	7993      	ldrb	r3, [r2, #6]
 8001f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f1e:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0xFF;
 8001f20:	4ba4      	ldr	r3, [pc, #656]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f22:	22ff      	movs	r2, #255	; 0xff
 8001f24:	711a      	strb	r2, [r3, #4]
 8001f26:	e007      	b.n	8001f38 <_Z10StartGetBTPv+0x360>
			} else {
				gameHID.ps4ButtonsTag.button_cross = 0;
 8001f28:	4aa1      	ldr	r2, [pc, #644]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001f2a:	7993      	ldrb	r3, [r2, #6]
 8001f2c:	f36f 1386 	bfc	r3, #6, #1
 8001f30:	7193      	strb	r3, [r2, #6]
				xboxHID.A = 0;
 8001f32:	4ba0      	ldr	r3, [pc, #640]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	711a      	strb	r2, [r3, #4]
			}

			if (PS4.getButtonPress(SQUARE)) {
 8001f38:	210f      	movs	r1, #15
 8001f3a:	489f      	ldr	r0, [pc, #636]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 8001f3c:	f010 fdb4 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <_Z10StartGetBTPv+0x380>
				gameHID.ps4ButtonsTag.button_square = 1;
 8001f46:	4a9a      	ldr	r2, [pc, #616]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001f48:	79d3      	ldrb	r3, [r2, #7]
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0xFF;
 8001f50:	4b98      	ldr	r3, [pc, #608]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	719a      	strb	r2, [r3, #6]
 8001f56:	e007      	b.n	8001f68 <_Z10StartGetBTPv+0x390>
			} else {
				gameHID.ps4ButtonsTag.button_square = 0;
 8001f58:	4a95      	ldr	r2, [pc, #596]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001f5a:	79d3      	ldrb	r3, [r2, #7]
 8001f5c:	f36f 0341 	bfc	r3, #1, #1
 8001f60:	71d3      	strb	r3, [r2, #7]
				xboxHID.X = 0;
 8001f62:	4b94      	ldr	r3, [pc, #592]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	719a      	strb	r2, [r3, #6]
			}

			if (PS4.getButtonPress(UP)) {
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4893      	ldr	r0, [pc, #588]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 8001f6c:	f010 fd9c 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <_Z10StartGetBTPv+0x3b8>
				gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001f76:	4a8e      	ldr	r2, [pc, #568]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001f78:	79d3      	ldrb	r3, [r2, #7]
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DUP;
 8001f80:	4b8c      	ldr	r3, [pc, #560]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f82:	789b      	ldrb	r3, [r3, #2]
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b8a      	ldr	r3, [pc, #552]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f8c:	709a      	strb	r2, [r3, #2]
 8001f8e:	e00b      	b.n	8001fa8 <_Z10StartGetBTPv+0x3d0>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8001f90:	4a87      	ldr	r2, [pc, #540]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001f92:	79d3      	ldrb	r3, [r2, #7]
 8001f94:	f36f 0382 	bfc	r3, #2, #1
 8001f98:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001f9a:	4b86      	ldr	r3, [pc, #536]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001f9c:	789b      	ldrb	r3, [r3, #2]
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001fa6:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(RIGHT)) {
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4883      	ldr	r0, [pc, #524]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 8001fac:	f010 fd7c 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <_Z10StartGetBTPv+0x3f8>
				gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001fb8:	79d3      	ldrb	r3, [r2, #7]
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DRIGHT;
 8001fc0:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001fc2:	789b      	ldrb	r3, [r3, #2]
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b7a      	ldr	r3, [pc, #488]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001fcc:	709a      	strb	r2, [r3, #2]
 8001fce:	e00b      	b.n	8001fe8 <_Z10StartGetBTPv+0x410>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8001fd0:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001fd2:	79d3      	ldrb	r3, [r2, #7]
 8001fd4:	f36f 03c3 	bfc	r3, #3, #1
 8001fd8:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	f023 0308 	bic.w	r3, r3, #8
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8001fe6:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(DOWN)) {
 8001fe8:	2102      	movs	r1, #2
 8001fea:	4873      	ldr	r0, [pc, #460]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 8001fec:	f010 fd5c 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <_Z10StartGetBTPv+0x438>
				gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001ff6:	4a6e      	ldr	r2, [pc, #440]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8001ff8:	79d3      	ldrb	r3, [r2, #7]
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DDOWN;
 8002000:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002002:	789b      	ldrb	r3, [r3, #2]
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800200c:	709a      	strb	r2, [r3, #2]
 800200e:	e00b      	b.n	8002028 <_Z10StartGetBTPv+0x450>
			} else {
				gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8002010:	4a67      	ldr	r2, [pc, #412]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002012:	79d3      	ldrb	r3, [r2, #7]
 8002014:	f36f 1345 	bfc	r3, #5, #1
 8002018:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 800201a:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800201c:	789b      	ldrb	r3, [r3, #2]
 800201e:	f023 0302 	bic.w	r3, r3, #2
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002026:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(LEFT)) {
 8002028:	2103      	movs	r1, #3
 800202a:	4863      	ldr	r0, [pc, #396]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 800202c:	f010 fd3c 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <_Z10StartGetBTPv+0x478>
				gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8002036:	4a5e      	ldr	r2, [pc, #376]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002038:	79d3      	ldrb	r3, [r2, #7]
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_DLEFT;
 8002040:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002042:	789b      	ldrb	r3, [r3, #2]
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800204c:	709a      	strb	r2, [r3, #2]
 800204e:	e00b      	b.n	8002068 <_Z10StartGetBTPv+0x490>

			} else {
				gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002052:	79d3      	ldrb	r3, [r2, #7]
 8002054:	f36f 1304 	bfc	r3, #4, #1
 8002058:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 800205a:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800205c:	789b      	ldrb	r3, [r3, #2]
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002066:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(L1)) {
 8002068:	210a      	movs	r1, #10
 800206a:	4853      	ldr	r0, [pc, #332]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 800206c:	f010 fd1c 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d008      	beq.n	8002088 <_Z10StartGetBTPv+0x4b0>
				gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8002076:	4a4e      	ldr	r2, [pc, #312]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002078:	7993      	ldrb	r3, [r2, #6]
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0xFF;
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002082:	22ff      	movs	r2, #255	; 0xff
 8002084:	725a      	strb	r2, [r3, #9]
 8002086:	e007      	b.n	8002098 <_Z10StartGetBTPv+0x4c0>

			} else {
				gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8002088:	4a49      	ldr	r2, [pc, #292]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 800208a:	7993      	ldrb	r3, [r2, #6]
 800208c:	f36f 1345 	bfc	r3, #5, #1
 8002090:	7193      	strb	r3, [r2, #6]
				xboxHID.WHITE = 0;
 8002092:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002094:	2200      	movs	r2, #0
 8002096:	725a      	strb	r2, [r3, #9]
			}

			if (PS4.getButtonPress(L3)) {
 8002098:	2106      	movs	r1, #6
 800209a:	4847      	ldr	r0, [pc, #284]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 800209c:	f010 fd04 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <_Z10StartGetBTPv+0x4e8>
				gameHID.ps4ButtonsTag.button_left_thumb = 1;
 80020a6:	4a42      	ldr	r2, [pc, #264]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 80020a8:	79d3      	ldrb	r3, [r2, #7]
 80020aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020ae:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_LS_BTN;
 80020b0:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80020b2:	789b      	ldrb	r3, [r3, #2]
 80020b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80020bc:	709a      	strb	r2, [r3, #2]
 80020be:	e00b      	b.n	80020d8 <_Z10StartGetBTPv+0x500>
			} else {
				gameHID.ps4ButtonsTag.button_left_thumb = 0;
 80020c0:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 80020c2:	79d3      	ldrb	r3, [r2, #7]
 80020c4:	f36f 1386 	bfc	r3, #6, #1
 80020c8:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80020cc:	789b      	ldrb	r3, [r3, #2]
 80020ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80020d6:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(R1)) {
 80020d8:	210b      	movs	r1, #11
 80020da:	4837      	ldr	r0, [pc, #220]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 80020dc:	f010 fce4 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <_Z10StartGetBTPv+0x520>
				gameHID.ps4ButtonsTag.button_right_trigger = 1;
 80020e6:	4a32      	ldr	r2, [pc, #200]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 80020e8:	7993      	ldrb	r3, [r2, #6]
 80020ea:	f043 0310 	orr.w	r3, r3, #16
 80020ee:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0xFF;
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80020f2:	22ff      	movs	r2, #255	; 0xff
 80020f4:	721a      	strb	r2, [r3, #8]
 80020f6:	e007      	b.n	8002108 <_Z10StartGetBTPv+0x530>
			} else {
				gameHID.ps4ButtonsTag.button_right_trigger = 0;
 80020f8:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 80020fa:	7993      	ldrb	r3, [r2, #6]
 80020fc:	f36f 1304 	bfc	r3, #4, #1
 8002100:	7193      	strb	r3, [r2, #6]
				xboxHID.BLACK = 0;
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002104:	2200      	movs	r2, #0
 8002106:	721a      	strb	r2, [r3, #8]
			}

			if (PS4.getButtonPress(R3)) {
 8002108:	2107      	movs	r1, #7
 800210a:	482b      	ldr	r0, [pc, #172]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 800210c:	f010 fccc 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <_Z10StartGetBTPv+0x558>
				gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002118:	79d3      	ldrb	r3, [r2, #7]
 800211a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211e:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons |= XBOX_RS_BTN;
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800212c:	709a      	strb	r2, [r3, #2]
 800212e:	e00b      	b.n	8002148 <_Z10StartGetBTPv+0x570>
			} else {
				gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8002130:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002132:	79d3      	ldrb	r3, [r2, #7]
 8002134:	f36f 13c7 	bfc	r3, #7, #1
 8002138:	71d3      	strb	r3, [r2, #7]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800213c:	789b      	ldrb	r3, [r3, #2]
 800213e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002146:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(SHARE)) {
 8002148:	2104      	movs	r1, #4
 800214a:	481b      	ldr	r0, [pc, #108]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 800214c:	f010 fcac 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00c      	beq.n	8002170 <_Z10StartGetBTPv+0x598>
				gameHID.ps4ButtonsTag.button_share = 1;
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002158:	7993      	ldrb	r3, [r2, #6]
 800215a:	f043 0308 	orr.w	r3, r3, #8
 800215e:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_BACK_BTN;
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800216c:	709a      	strb	r2, [r3, #2]
 800216e:	e00b      	b.n	8002188 <_Z10StartGetBTPv+0x5b0>
			} else {
				gameHID.ps4ButtonsTag.button_share = 0;
 8002170:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002172:	7993      	ldrb	r3, [r2, #6]
 8002174:	f36f 03c3 	bfc	r3, #3, #1
 8002178:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 800217c:	789b      	ldrb	r3, [r3, #2]
 800217e:	f023 0320 	bic.w	r3, r3, #32
 8002182:	b2da      	uxtb	r2, r3
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 8002186:	709a      	strb	r2, [r3, #2]
			}

			if (PS4.getButtonPress(OPTIONS)) {
 8002188:	2105      	movs	r1, #5
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <_Z10StartGetBTPv+0x5e0>)
 800218c:	f010 fc8c 	bl	8012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <_Z10StartGetBTPv+0x5e4>
				gameHID.ps4ButtonsTag.button_start = 1;
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <_Z10StartGetBTPv+0x5d8>)
 8002198:	7993      	ldrb	r3, [r2, #6]
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons |= XBOX_START_BTN;
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80021a2:	789b      	ldrb	r3, [r3, #2]
 80021a4:	f043 0310 	orr.w	r3, r3, #16
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <_Z10StartGetBTPv+0x5dc>)
 80021ac:	709a      	strb	r2, [r3, #2]
 80021ae:	e034      	b.n	800221a <_Z10StartGetBTPv+0x642>
 80021b0:	200006b4 	.word	0x200006b4
 80021b4:	200006bc 	.word	0x200006bc
 80021b8:	20000650 	.word	0x20000650
			} else {
				gameHID.ps4ButtonsTag.button_start = 0;
 80021bc:	4a19      	ldr	r2, [pc, #100]	; (8002224 <_Z10StartGetBTPv+0x64c>)
 80021be:	7993      	ldrb	r3, [r2, #6]
 80021c0:	f36f 0382 	bfc	r3, #2, #1
 80021c4:	7193      	strb	r3, [r2, #6]
				xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <_Z10StartGetBTPv+0x650>)
 80021c8:	789b      	ldrb	r3, [r3, #2]
 80021ca:	f023 0310 	bic.w	r3, r3, #16
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <_Z10StartGetBTPv+0x650>)
 80021d2:	709a      	strb	r2, [r3, #2]
 80021d4:	e021      	b.n	800221a <_Z10StartGetBTPv+0x642>
			}

		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80021d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021da:	4814      	ldr	r0, [pc, #80]	; (800222c <_Z10StartGetBTPv+0x654>)
 80021dc:	f001 fe44 	bl	8003e68 <HAL_GPIO_ReadPin>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf0c      	ite	eq
 80021e6:	2301      	moveq	r3, #1
 80021e8:	2300      	movne	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d011      	beq.n	8002214 <_Z10StartGetBTPv+0x63c>
			if (!buttonPressed) {
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <_Z10StartGetBTPv+0x658>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	f083 0301 	eor.w	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <_Z10StartGetBTPv+0x634>
				Serial.print(F("\r\nButton Pressed"));
 80021fe:	490d      	ldr	r1, [pc, #52]	; (8002234 <_Z10StartGetBTPv+0x65c>)
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <_Z10StartGetBTPv+0x660>)
 8002202:	f7fe fee9 	bl	8000fd8 <_ZN5Print5printEPK19__FlashStringHelper>
				PS4.pair(); // Start paring routine if user button was just pressed
 8002206:	480d      	ldr	r0, [pc, #52]	; (800223c <_Z10StartGetBTPv+0x664>)
 8002208:	f7ff f8a1 	bl	800134e <_ZN5BTHID4pairEv>
			}
			buttonPressed = true;
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <_Z10StartGetBTPv+0x658>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e002      	b.n	800221a <_Z10StartGetBTPv+0x642>
		} else
			buttonPressed = false;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <_Z10StartGetBTPv+0x658>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 800221a:	2001      	movs	r0, #1
 800221c:	f009 f92c 	bl	800b478 <osDelay>
		Usb.Task();
 8002220:	e539      	b.n	8001c96 <_Z10StartGetBTPv+0xbe>
 8002222:	bf00      	nop
 8002224:	200006b4 	.word	0x200006b4
 8002228:	200006bc 	.word	0x200006bc
 800222c:	40020800 	.word	0x40020800
 8002230:	200006a0 	.word	0x200006a0
 8002234:	080163c8 	.word	0x080163c8
 8002238:	200003f0 	.word	0x200003f0
 800223c:	200005d8 	.word	0x200005d8

08002240 <_Z12StartSendUSBPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
	MX_USB_DEVICE_Init();
 8002248:	f00b fd88 	bl	800dd5c <MX_USB_DEVICE_Init>
#endif

#if OG_XBOX_SETUP
	//Serial.print(xboxHID.leftStickX);

	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 800224c:	2214      	movs	r2, #20
 800224e:	4904      	ldr	r1, [pc, #16]	; (8002260 <_Z12StartSendUSBPv+0x20>)
 8002250:	4804      	ldr	r0, [pc, #16]	; (8002264 <_Z12StartSendUSBPv+0x24>)
 8002252:	f007 fdc1 	bl	8009dd8 <USBD_HID_SendReport>
#endif
    osDelay(1);
 8002256:	2001      	movs	r0, #1
 8002258:	f009 f90e 	bl	800b478 <osDelay>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 800225c:	e7f6      	b.n	800224c <_Z12StartSendUSBPv+0xc>
 800225e:	bf00      	nop
 8002260:	200006bc 	.word	0x200006bc
 8002264:	200054b0 	.word	0x200054b0

08002268 <_Z19StartControllerJoinPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for(;;)
  {
	if(PS4.connected() && !rumble_once) {
 8002270:	4810      	ldr	r0, [pc, #64]	; (80022b4 <_Z19StartControllerJoinPv+0x4c>)
 8002272:	f7ff f94f 	bl	8001514 <_ZN5PS4BT9connectedEv>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <_Z19StartControllerJoinPv+0x20>
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <_Z19StartControllerJoinPv+0x50>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <_Z19StartControllerJoinPv+0x20>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <_Z19StartControllerJoinPv+0x22>
 8002288:	2300      	movs	r3, #0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <_Z19StartControllerJoinPv+0x42>
	  PS4.setRumbleOn(RumbleLow);
 800228e:	2120      	movs	r1, #32
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <_Z19StartControllerJoinPv+0x54>)
 8002292:	f7ff f8ae 	bl	80013f2 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
	  osDelay(500);
 8002296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800229a:	f009 f8ed 	bl	800b478 <osDelay>
	  PS4.setRumbleOff();
 800229e:	4807      	ldr	r0, [pc, #28]	; (80022bc <_Z19StartControllerJoinPv+0x54>)
 80022a0:	f7ff f89a 	bl	80013d8 <_ZN9PS4Parser12setRumbleOffEv>
	  rumble_once = 1;
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <_Z19StartControllerJoinPv+0x50>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
	}
	osDelay(1);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f009 f8e4 	bl	800b478 <osDelay>
	if(PS4.connected() && !rumble_once) {
 80022b0:	e7de      	b.n	8002270 <_Z19StartControllerJoinPv+0x8>
 80022b2:	bf00      	nop
 80022b4:	200005d8 	.word	0x200005d8
 80022b8:	200006a1 	.word	0x200006a1
 80022bc:	20000650 	.word	0x20000650

080022c0 <_Z16StartButtonPressPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f009 f8d5 	bl	800b478 <osDelay>
 80022ce:	e7fb      	b.n	80022c8 <_Z16StartButtonPressPv+0x8>

080022d0 <_Z14StartUpdateLCDPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80022d8:	2001      	movs	r0, #1
 80022da:	f009 f8cd 	bl	800b478 <osDelay>
 80022de:	e7fb      	b.n	80022d8 <_Z14StartUpdateLCDPv+0x8>

080022e0 <HAL_TIM_PeriodElapsedCallback>:
  }
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022f2:	f001 faff 	bl	80038f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40001c00 	.word	0x40001c00

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	Serial.print("\r\nSomething went wrong!");
 8002308:	4903      	ldr	r1, [pc, #12]	; (8002318 <Error_Handler+0x14>)
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <Error_Handler+0x18>)
 800230c:	f7fe fe72 	bl	8000ff4 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	e7fe      	b.n	8002314 <Error_Handler+0x10>
 8002316:	bf00      	nop
 8002318:	080163dc 	.word	0x080163dc
 800231c:	200003f0 	.word	0x200003f0

08002320 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8002328:	f7fe ffe4 	bl	80012f4 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 800232c:	f7fe ffca 	bl	80012c4 <_ZN3P103SetEv>
        spi::init();
 8002330:	f000 f845 	bl	80023be <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8002334:	f7fe ffb0 	bl	8001298 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8002338:	2218      	movs	r2, #24
 800233a:	2188      	movs	r1, #136	; 0x88
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f845 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f864 	bl	8002410 <_ZN8MAX3421eI3P102P9E5resetEv>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	e02b      	b.n	80023b6 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 800235e:	22c1      	movs	r2, #193	; 0xc1
 8002360:	21d8      	movs	r1, #216	; 0xd8
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f832 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8002368:	2260      	movs	r2, #96	; 0x60
 800236a:	21d0      	movs	r1, #208	; 0xd0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f82d 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8002372:	2204      	movs	r2, #4
 8002374:	21e8      	movs	r1, #232	; 0xe8
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f828 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 800237c:	21e8      	movs	r1, #232	; 0xe8
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f876 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d000      	beq.n	800239a <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8002398:	e7f0      	b.n	800237c <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f88a 	bl	80024b4 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 80023a0:	2220      	movs	r2, #32
 80023a2:	21c8      	movs	r1, #200	; 0xc8
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f811 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80023aa:	2201      	movs	r2, #1
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f80c 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
        }
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80023dc:	f7fe ff7e 	bl	80012dc <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80023ea:	78bb      	ldrb	r3, [r7, #2]
 80023ec:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80023ee:	f107 010c 	add.w	r1, r7, #12
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	2202      	movs	r2, #2
 80023f8:	4804      	ldr	r0, [pc, #16]	; (800240c <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80023fa:	f004 fcc8 	bl	8006d8e <HAL_SPI_Transmit>
        SPI_SS::Set();
 80023fe:	f7fe ff61 	bl	80012c4 <_ZN3P103SetEv>
        return;
 8002402:	bf00      	nop
};
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000354 	.word	0x20000354

08002410 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 800241c:	2220      	movs	r2, #32
 800241e:	2178      	movs	r1, #120	; 0x78
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffd3 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8002426:	2200      	movs	r2, #0
 8002428:	2178      	movs	r1, #120	; 0x78
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffce 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	3301      	adds	r3, #1
 8002434:	81fb      	strh	r3, [r7, #14]
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00f      	beq.n	8002466 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8002446:	2168      	movs	r1, #104	; 0x68
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f811 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800244e:	4603      	mov	r3, r0
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d100      	bne.n	8002464 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8002462:	e7e5      	b.n	8002430 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8002464:	bf00      	nop
        return ( i);
 8002466:	89fb      	ldrh	r3, [r7, #14]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 800247c:	f7fe ff2e 	bl	80012dc <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8002480:	1cf9      	adds	r1, r7, #3
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	2201      	movs	r2, #1
 8002488:	4809      	ldr	r0, [pc, #36]	; (80024b0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800248a:	f004 fc80 	bl	8006d8e <HAL_SPI_Transmit>
        uint8_t rv = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8002492:	f107 010f 	add.w	r1, r7, #15
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	2201      	movs	r2, #1
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 800249e:	f004 fdb2 	bl	8007006 <HAL_SPI_Receive>
        SPI_SS::Set();
 80024a2:	f7fe ff0f 	bl	80012c4 <_ZN3P103SetEv>
        return (rv);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000354 	.word	0x20000354

080024b4 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80024bc:	21f8      	movs	r1, #248	; 0xf8
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ffd6 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ce:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2bc0      	cmp	r3, #192	; 0xc0
 80024d4:	d04a      	beq.n	800256c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80024d6:	2bc0      	cmp	r3, #192	; 0xc0
 80024d8:	dc55      	bgt.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d006      	beq.n	80024ec <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	dc51      	bgt.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d046      	beq.n	8002574 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d020      	beq.n	800252c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80024ea:	e04c      	b.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80024ec:	21d8      	movs	r1, #216	; 0xd8
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffbe 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002508:	22c9      	movs	r2, #201	; 0xc9
 800250a:	21d8      	movs	r1, #216	; 0xd8
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff5d 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002514:	2202      	movs	r2, #2
 8002516:	701a      	strb	r2, [r3, #0]
                        break;
 8002518:	e035      	b.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800251a:	22cb      	movs	r2, #203	; 0xcb
 800251c:	21d8      	movs	r1, #216	; 0xd8
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff54 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002526:	2203      	movs	r2, #3
 8002528:	701a      	strb	r2, [r3, #0]
                        break;
 800252a:	e02c      	b.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800252c:	21d8      	movs	r1, #216	; 0xd8
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ff9e 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002534:	4603      	mov	r3, r0
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002548:	22cb      	movs	r2, #203	; 0xcb
 800254a:	21d8      	movs	r1, #216	; 0xd8
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff3d 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002554:	2203      	movs	r2, #3
 8002556:	701a      	strb	r2, [r3, #0]
                        break;
 8002558:	e015      	b.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800255a:	22c9      	movs	r2, #201	; 0xc9
 800255c:	21d8      	movs	r1, #216	; 0xd8
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff34 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002566:	2202      	movs	r2, #2
 8002568:	701a      	strb	r2, [r3, #0]
                        break;
 800256a:	e00c      	b.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
                        break;
 8002572:	e008      	b.n	8002586 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 8002574:	22d1      	movs	r2, #209	; 0xd1
 8002576:	21d8      	movs	r1, #216	; 0xd8
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff27 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
                        break;
 8002584:	bf00      	nop
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200006d0 	.word	0x200006d0

08002594 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d110      	bne.n	80025d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80025ae:	490a      	ldr	r1, [pc, #40]	; (80025d8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80025b0:	480a      	ldr	r0, [pc, #40]	; (80025dc <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80025b2:	f7fe fe5b 	bl	800126c <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80025b6:	480a      	ldr	r0, [pc, #40]	; (80025e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80025b8:	f010 fc6a 	bl	8012e90 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80025bc:	4908      	ldr	r1, [pc, #32]	; (80025e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80025be:	4809      	ldr	r0, [pc, #36]	; (80025e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80025c0:	f00c fa6a 	bl	800ea98 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	4906      	ldr	r1, [pc, #24]	; (80025e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80025cc:	f7fe ff7a 	bl	80014c4 <_ZN5PS4BTC1EP3BTDbPKc>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200002b4 	.word	0x200002b4
 80025dc:	200003f0 	.word	0x200003f0
 80025e0:	20000404 	.word	0x20000404
 80025e4:	200004c0 	.word	0x200004c0
 80025e8:	080163f4 	.word	0x080163f4
 80025ec:	200005d8 	.word	0x200005d8

080025f0 <_GLOBAL__sub_I_hi2c1>:
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025f8:	2001      	movs	r0, #1
 80025fa:	f7ff ffcb 	bl	8002594 <_Z41__static_initialization_and_destruction_0ii>
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_MspInit+0x54>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a11      	ldr	r2, [pc, #68]	; (8002654 <HAL_MspInit+0x54>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_MspInit+0x54>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_MspInit+0x54>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_MspInit+0x54>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_MspInit+0x54>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	210f      	movs	r1, #15
 8002642:	f06f 0001 	mvn.w	r0, #1
 8002646:	f001 fa51 	bl	8003aec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800

08002658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_I2C_MspInit+0x84>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12c      	bne.n	80026d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002696:	f44f 7340 	mov.w	r3, #768	; 0x300
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800269c:	2312      	movs	r3, #18
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026a8:	2304      	movs	r3, #4
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	480c      	ldr	r0, [pc, #48]	; (80026e4 <HAL_I2C_MspInit+0x8c>)
 80026b4:	f001 fa44 	bl	8003b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 80026c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026c6:	6413      	str	r3, [r2, #64]	; 0x40
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_I2C_MspInit+0x88>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40005400 	.word	0x40005400
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020400 	.word	0x40020400

080026e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_SPI_MspInit+0x84>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d12b      	bne.n	8002762 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_SPI_MspInit+0x88>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_SPI_MspInit+0x88>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_SPI_MspInit+0x88>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002742:	23e0      	movs	r3, #224	; 0xe0
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274e:	2303      	movs	r3, #3
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002752:	2305      	movs	r3, #5
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <HAL_SPI_MspInit+0x8c>)
 800275e:	f001 f9ef 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40013000 	.word	0x40013000
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000

08002778 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <HAL_TIM_Base_MspInit+0x48>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d115      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_TIM_Base_MspInit+0x4c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2105      	movs	r1, #5
 80027aa:	202d      	movs	r0, #45	; 0x2d
 80027ac:	f001 f99e 	bl	8003aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80027b0:	202d      	movs	r0, #45	; 0x2d
 80027b2:	f001 f9b7 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40002000 	.word	0x40002000
 80027c4:	40023800 	.word	0x40023800

080027c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_UART_MspInit+0x84>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d12b      	bne.n	8002842 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_UART_MspInit+0x88>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a17      	ldr	r2, [pc, #92]	; (8002850 <HAL_UART_MspInit+0x88>)
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_UART_MspInit+0x88>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_UART_MspInit+0x88>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_UART_MspInit+0x88>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_UART_MspInit+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002822:	230c      	movs	r3, #12
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002832:	2307      	movs	r3, #7
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <HAL_UART_MspInit+0x8c>)
 800283e:	f001 f97f 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40004400 	.word	0x40004400
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000

08002858 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	202c      	movs	r0, #44	; 0x2c
 800286e:	f001 f93d 	bl	8003aec <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002872:	202c      	movs	r0, #44	; 0x2c
 8002874:	f001 f956 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_InitTick+0xa4>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_InitTick+0xa4>)
 8002882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_InitTick+0xa4>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002894:	f107 0210 	add.w	r2, r7, #16
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fa40 	bl	8005d24 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80028a4:	f003 fa16 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 80028a8:	4603      	mov	r3, r0
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_InitTick+0xa8>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	3b01      	subs	r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_InitTick+0xac>)
 80028be:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_InitTick+0xb0>)
 80028c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_InitTick+0xac>)
 80028c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028c8:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <HAL_InitTick+0xac>)
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_InitTick+0xac>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_InitTick+0xac>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 80028dc:	4809      	ldr	r0, [pc, #36]	; (8002904 <HAL_InitTick+0xac>)
 80028de:	f004 ff75 	bl	80077cc <HAL_TIM_Base_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 80028e8:	4806      	ldr	r0, [pc, #24]	; (8002904 <HAL_InitTick+0xac>)
 80028ea:	f004 ffbf 	bl	800786c <HAL_TIM_Base_Start_IT>
 80028ee:	4603      	mov	r3, r0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	431bde83 	.word	0x431bde83
 8002904:	20005424 	.word	0x20005424
 8002908:	40001c00 	.word	0x40001c00

0800290c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <NMI_Handler+0x4>

08002912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <HardFault_Handler+0x4>

08002918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <MemManage_Handler+0x4>

0800291e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	e7fe      	b.n	8002928 <UsageFault_Handler+0x4>

0800292a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800293e:	f005 f805 	bl	800794c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20005424 	.word	0x20005424

0800294c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002950:	4802      	ldr	r0, [pc, #8]	; (800295c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002952:	f004 fffb 	bl	800794c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200002f8 	.word	0x200002f8

08002960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <OTG_FS_IRQHandler+0x10>)
 8002966:	f002 f863 	bl	8004a30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20005980 	.word	0x20005980

08002974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_kill>:

int _kill(int pid, int sig)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800298e:	f012 fff1 	bl	8015974 <__errno>
 8002992:	4603      	mov	r3, r0
 8002994:	2216      	movs	r2, #22
 8002996:	601a      	str	r2, [r3, #0]
	return -1;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_exit>:

void _exit (int status)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ffe7 	bl	8002984 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029b6:	e7fe      	b.n	80029b6 <_exit+0x12>

080029b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <_sbrk+0x5c>)
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <_sbrk+0x60>)
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029cc:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <_sbrk+0x64>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_sbrk+0x64>)
 80029d6:	4a12      	ldr	r2, [pc, #72]	; (8002a20 <_sbrk+0x68>)
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <_sbrk+0x64>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d207      	bcs.n	80029f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e8:	f012 ffc4 	bl	8015974 <__errno>
 80029ec:	4603      	mov	r3, r0
 80029ee:	220c      	movs	r2, #12
 80029f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	e009      	b.n	8002a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <_sbrk+0x64>)
 8002a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20020000 	.word	0x20020000
 8002a18:	00000400 	.word	0x00000400
 8002a1c:	200006d4 	.word	0x200006d4
 8002a20:	20005d98 	.word	0x20005d98

08002a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <SystemInit+0x28>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <SystemInit+0x28>)
 8002a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SystemInit+0x28>)
 8002a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a56:	e003      	b.n	8002a60 <LoopCopyDataInit>

08002a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a5e:	3104      	adds	r1, #4

08002a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a60:	480b      	ldr	r0, [pc, #44]	; (8002a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a68:	d3f6      	bcc.n	8002a58 <CopyDataInit>
  ldr  r2, =_sbss
 8002a6a:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a6c:	e002      	b.n	8002a74 <LoopFillZerobss>

08002a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a70:	f842 3b04 	str.w	r3, [r2], #4

08002a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a78:	d3f9      	bcc.n	8002a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a7a:	f7ff ffd3 	bl	8002a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7e:	f012 ff7f 	bl	8015980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a82:	f7fe fdf3 	bl	800166c <main>
  bx  lr    
 8002a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a8c:	08019828 	.word	0x08019828
  ldr  r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a94:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8002a98:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8002a9c:	20005d98 	.word	0x20005d98

08002aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aa0:	e7fe      	b.n	8002aa0 <ADC_IRQHandler>

08002aa2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af04      	add	r7, sp, #16
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2301      	movs	r3, #1
 8002aca:	2200      	movs	r2, #0
 8002acc:	2178      	movs	r1, #120	; 0x78
 8002ace:	4803      	ldr	r0, [pc, #12]	; (8002adc <ssd1306_WriteCommand+0x2c>)
 8002ad0:	f001 fb40 	bl	8004154 <HAL_I2C_Mem_Write>
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000208 	.word	0x20000208

08002ae0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af04      	add	r7, sp, #16
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f04f 32ff 	mov.w	r2, #4294967295
 8002af2:	9202      	str	r2, [sp, #8]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2301      	movs	r3, #1
 8002afc:	2240      	movs	r2, #64	; 0x40
 8002afe:	2178      	movs	r1, #120	; 0x78
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <ssd1306_WriteData+0x30>)
 8002b02:	f001 fb27 	bl	8004154 <HAL_I2C_Mem_Write>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000208 	.word	0x20000208

08002b14 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b18:	f7ff ffc3 	bl	8002aa2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	f000 ff09 	bl	8003934 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b22:	2000      	movs	r0, #0
 8002b24:	f000 fcaa 	bl	800347c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b28:	2020      	movs	r0, #32
 8002b2a:	f7ff ffc1 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff ffbe 	bl	8002ab0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b34:	20b0      	movs	r0, #176	; 0xb0
 8002b36:	f7ff ffbb 	bl	8002ab0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b3a:	20c8      	movs	r0, #200	; 0xc8
 8002b3c:	f7ff ffb8 	bl	8002ab0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff ffb5 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b46:	2010      	movs	r0, #16
 8002b48:	f7ff ffb2 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b4c:	2040      	movs	r0, #64	; 0x40
 8002b4e:	f7ff ffaf 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b52:	20ff      	movs	r0, #255	; 0xff
 8002b54:	f000 fc7e 	bl	8003454 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b58:	20a1      	movs	r0, #161	; 0xa1
 8002b5a:	f7ff ffa9 	bl	8002ab0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002b5e:	20a6      	movs	r0, #166	; 0xa6
 8002b60:	f7ff ffa6 	bl	8002ab0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002b64:	20a8      	movs	r0, #168	; 0xa8
 8002b66:	f7ff ffa3 	bl	8002ab0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002b6a:	203f      	movs	r0, #63	; 0x3f
 8002b6c:	f7ff ffa0 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b70:	20a4      	movs	r0, #164	; 0xa4
 8002b72:	f7ff ff9d 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b76:	20d3      	movs	r0, #211	; 0xd3
 8002b78:	f7ff ff9a 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff ff97 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b82:	20d5      	movs	r0, #213	; 0xd5
 8002b84:	f7ff ff94 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002b88:	20f0      	movs	r0, #240	; 0xf0
 8002b8a:	f7ff ff91 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002b8e:	20d9      	movs	r0, #217	; 0xd9
 8002b90:	f7ff ff8e 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002b94:	2022      	movs	r0, #34	; 0x22
 8002b96:	f7ff ff8b 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002b9a:	20da      	movs	r0, #218	; 0xda
 8002b9c:	f7ff ff88 	bl	8002ab0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002ba0:	2012      	movs	r0, #18
 8002ba2:	f7ff ff85 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002ba6:	20db      	movs	r0, #219	; 0xdb
 8002ba8:	f7ff ff82 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bac:	2020      	movs	r0, #32
 8002bae:	f7ff ff7f 	bl	8002ab0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bb2:	208d      	movs	r0, #141	; 0x8d
 8002bb4:	f7ff ff7c 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bb8:	2014      	movs	r0, #20
 8002bba:	f7ff ff79 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f000 fc5c 	bl	800347c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black_);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 f80f 	bl	8002be8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002bca:	f000 f831 	bl	8002c30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <ssd1306_Init+0xd0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <ssd1306_Init+0xd0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002bda:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <ssd1306_Init+0xd0>)
 8002bdc:	2201      	movs	r2, #1
 8002bde:	715a      	strb	r2, [r3, #5]
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000ad8 	.word	0x20000ad8

08002be8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e00d      	b.n	8002c14 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <ssd1306_Fill+0x1a>
 8002bfe:	2100      	movs	r1, #0
 8002c00:	e000      	b.n	8002c04 <ssd1306_Fill+0x1c>
 8002c02:	21ff      	movs	r1, #255	; 0xff
 8002c04:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <ssd1306_Fill+0x44>)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	460a      	mov	r2, r1
 8002c0c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	3301      	adds	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1a:	d3ed      	bcc.n	8002bf8 <ssd1306_Fill+0x10>
    }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200006d8 	.word	0x200006d8

08002c30 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	e016      	b.n	8002c6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	3b50      	subs	r3, #80	; 0x50
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff34 	bl	8002ab0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff ff31 	bl	8002ab0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002c4e:	2010      	movs	r0, #16
 8002c50:	f7ff ff2e 	bl	8002ab0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	01db      	lsls	r3, r3, #7
 8002c58:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <ssd1306_UpdateScreen+0x4c>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff3e 	bl	8002ae0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3301      	adds	r3, #1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9e5      	bls.n	8002c3c <ssd1306_UpdateScreen+0xc>
    }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200006d8 	.word	0x200006d8

08002c80 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	71bb      	strb	r3, [r7, #6]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db48      	blt.n	8002d2c <ssd1306_DrawPixel+0xac>
 8002c9a:	79bb      	ldrb	r3, [r7, #6]
 8002c9c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c9e:	d845      	bhi.n	8002d2c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <ssd1306_DrawPixel+0xb8>)
 8002ca2:	791b      	ldrb	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8002ca8:	797b      	ldrb	r3, [r7, #5]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 8002cb6:	797b      	ldrb	r3, [r7, #5]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d11a      	bne.n	8002cf2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	79bb      	ldrb	r3, [r7, #6]
 8002cc0:	08db      	lsrs	r3, r3, #3
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	01db      	lsls	r3, r3, #7
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <ssd1306_DrawPixel+0xbc>)
 8002ccc:	5cd3      	ldrb	r3, [r2, r3]
 8002cce:	b25a      	sxtb	r2, r3
 8002cd0:	79bb      	ldrb	r3, [r7, #6]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cdc:	b25b      	sxtb	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b259      	sxtb	r1, r3
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	4413      	add	r3, r2
 8002cea:	b2c9      	uxtb	r1, r1
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <ssd1306_DrawPixel+0xbc>)
 8002cee:	54d1      	strb	r1, [r2, r3]
 8002cf0:	e01d      	b.n	8002d2e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cf2:	79fa      	ldrb	r2, [r7, #7]
 8002cf4:	79bb      	ldrb	r3, [r7, #6]
 8002cf6:	08db      	lsrs	r3, r3, #3
 8002cf8:	b2d8      	uxtb	r0, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	01db      	lsls	r3, r3, #7
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <ssd1306_DrawPixel+0xbc>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	b25a      	sxtb	r2, r3
 8002d06:	79bb      	ldrb	r3, [r7, #6]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b259      	sxtb	r1, r3
 8002d1c:	79fa      	ldrb	r2, [r7, #7]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	01db      	lsls	r3, r3, #7
 8002d22:	4413      	add	r3, r2
 8002d24:	b2c9      	uxtb	r1, r1
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <ssd1306_DrawPixel+0xbc>)
 8002d28:	54d1      	strb	r1, [r2, r3]
 8002d2a:	e000      	b.n	8002d2e <ssd1306_DrawPixel+0xae>
        return;
 8002d2c:	bf00      	nop
    }
}
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000ad8 	.word	0x20000ad8
 8002d3c:	200006d8 	.word	0x200006d8

08002d40 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4604      	mov	r4, r0
 8002d48:	1d38      	adds	r0, r7, #4
 8002d4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4623      	mov	r3, r4
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	4613      	mov	r3, r2
 8002d56:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b1f      	cmp	r3, #31
 8002d5c:	d902      	bls.n	8002d64 <ssd1306_WriteChar+0x24>
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b7e      	cmp	r3, #126	; 0x7e
 8002d62:	d901      	bls.n	8002d68 <ssd1306_WriteChar+0x28>
        return 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e06d      	b.n	8002e44 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	793b      	ldrb	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	dc06      	bgt.n	8002d84 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002d76:	4b35      	ldr	r3, [pc, #212]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002d78:	885b      	ldrh	r3, [r3, #2]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	797b      	ldrb	r3, [r7, #5]
 8002d7e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	dd01      	ble.n	8002d88 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e05d      	b.n	8002e44 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e04c      	b.n	8002e28 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	3b20      	subs	r3, #32
 8002d94:	7979      	ldrb	r1, [r7, #5]
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	440b      	add	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	e034      	b.n	8002e18 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d012      	beq.n	8002de4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002dce:	885b      	ldrh	r3, [r3, #2]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	7bba      	ldrb	r2, [r7, #14]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7ff ff4f 	bl	8002c80 <ssd1306_DrawPixel>
 8002de2:	e016      	b.n	8002e12 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	b2d8      	uxtb	r0, r3
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002df4:	885b      	ldrh	r3, [r3, #2]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2d9      	uxtb	r1, r3
 8002e00:	7bbb      	ldrb	r3, [r7, #14]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f7ff ff37 	bl	8002c80 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	793b      	ldrb	r3, [r7, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d3c5      	bcc.n	8002dae <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	797b      	ldrb	r3, [r7, #5]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d3ad      	bcc.n	8002d8e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	793b      	ldrb	r3, [r7, #4]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <ssd1306_WriteChar+0x10c>)
 8002e40:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3724      	adds	r7, #36	; 0x24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	20000ad8 	.word	0x20000ad8

08002e50 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	1d38      	adds	r0, r7, #4
 8002e5a:	e880 0006 	stmia.w	r0, {r1, r2}
 8002e5e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002e60:	e012      	b.n	8002e88 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	7818      	ldrb	r0, [r3, #0]
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	1d3a      	adds	r2, r7, #4
 8002e6a:	ca06      	ldmia	r2, {r1, r2}
 8002e6c:	f7ff ff68 	bl	8002d40 <ssd1306_WriteChar>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d002      	beq.n	8002e82 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	e008      	b.n	8002e94 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e8      	bne.n	8002e62 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	781b      	ldrb	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <ssd1306_SetCursor+0x2c>)
 8002eb2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002eb4:	79bb      	ldrb	r3, [r7, #6]
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <ssd1306_SetCursor+0x2c>)
 8002eba:	805a      	strh	r2, [r3, #2]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	20000ad8 	.word	0x20000ad8

08002ecc <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b089      	sub	sp, #36	; 0x24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4623      	mov	r3, r4
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71bb      	strb	r3, [r7, #6]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	717b      	strb	r3, [r7, #5]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8002eea:	797a      	ldrb	r2, [r7, #5]
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bfb8      	it	lt
 8002ef4:	425b      	neglt	r3, r3
 8002ef6:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8002ef8:	793a      	ldrb	r2, [r7, #4]
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bfb8      	it	lt
 8002f02:	425b      	neglt	r3, r3
 8002f04:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	797b      	ldrb	r3, [r7, #5]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d201      	bcs.n	8002f12 <ssd1306_Line+0x46>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e001      	b.n	8002f16 <ssd1306_Line+0x4a>
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002f18:	79ba      	ldrb	r2, [r7, #6]
 8002f1a:	793b      	ldrb	r3, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d201      	bcs.n	8002f24 <ssd1306_Line+0x58>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e001      	b.n	8002f28 <ssd1306_Line+0x5c>
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8002f32:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002f36:	7939      	ldrb	r1, [r7, #4]
 8002f38:	797b      	ldrb	r3, [r7, #5]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fea0 	bl	8002c80 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8002f40:	e024      	b.n	8002f8c <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8002f42:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002f46:	79b9      	ldrb	r1, [r7, #6]
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe98 	bl	8002c80 <ssd1306_DrawPixel>
    error2 = error * 2;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	425b      	negs	r3, r3
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	dd08      	ble.n	8002f72 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	4413      	add	r3, r2
 8002f70:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	da08      	bge.n	8002f8c <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	4413      	add	r3, r2
 8002f80:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	79bb      	ldrb	r3, [r7, #6]
 8002f88:	4413      	add	r3, r2
 8002f8a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8002f8c:	79fa      	ldrb	r2, [r7, #7]
 8002f8e:	797b      	ldrb	r3, [r7, #5]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1d6      	bne.n	8002f42 <ssd1306_Line+0x76>
 8002f94:	79ba      	ldrb	r2, [r7, #6]
 8002f96:	793b      	ldrb	r3, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1d2      	bne.n	8002f42 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8002f9c:	bf00      	nop
}
 8002f9e:	3724      	adds	r7, #36	; 0x24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}

08002fa4 <ssd1306_Polyline>:
//Draw polyline
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02a      	beq.n	8003010 <ssd1306_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 8002fba:	2301      	movs	r3, #1
 8002fbc:	81fb      	strh	r3, [r7, #14]
 8002fbe:	e022      	b.n	8003006 <ssd1306_Polyline+0x62>
      ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	7818      	ldrb	r0, [r3, #0]
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	7859      	ldrb	r1, [r3, #1]
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781c      	ldrb	r4, [r3, #0]
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	785a      	ldrb	r2, [r3, #1]
 8002ff4:	787b      	ldrb	r3, [r7, #1]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	f7ff ff66 	bl	8002ecc <ssd1306_Line>
    for(i = 1; i < par_size; i++){
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	3301      	adds	r3, #1
 8003004:	81fb      	strh	r3, [r7, #14]
 8003006:	89fa      	ldrh	r2, [r7, #14]
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	429a      	cmp	r2, r3
 800300c:	d3d8      	bcc.n	8002fc0 <ssd1306_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 800300e:	bf00      	nop
 8003010:	bf00      	nop
}
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	bd90      	pop	{r4, r7, pc}

08003018 <ssd1306_DegToRad>:
/*Convert Degrees to Radians*/
static float ssd1306_DegToRad(float par_deg) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fd fab0 	bl	8000588 <__aeabi_f2d>
 8003028:	a30e      	add	r3, pc, #56	; (adr r3, 8003064 <ssd1306_DegToRad+0x4c>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd fb03 	bl	8000638 <__aeabi_dmul>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <ssd1306_DegToRad+0x48>)
 8003040:	f7fd fc24 	bl	800088c <__aeabi_ddiv>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f7fd fdb6 	bl	8000bbc <__aeabi_d2f>
 8003050:	4603      	mov	r3, r0
 8003052:	ee07 3a90 	vmov	s15, r3
}
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40668000 	.word	0x40668000
 8003064:	51eb851f 	.word	0x51eb851f
 8003068:	40091eb8 	.word	0x40091eb8

0800306c <ssd1306_NormalizeTo0_360>:
/*Normalize degree to [0;360]*/
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800307c:	d802      	bhi.n	8003084 <ssd1306_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	81fb      	strh	r3, [r7, #14]
 8003082:	e013      	b.n	80030ac <ssd1306_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	08da      	lsrs	r2, r3, #3
 8003088:	490c      	ldr	r1, [pc, #48]	; (80030bc <ssd1306_NormalizeTo0_360+0x50>)
 800308a:	fba1 1202 	umull	r1, r2, r1, r2
 800308e:	0892      	lsrs	r2, r2, #2
 8003090:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003094:	fb01 f202 	mul.w	r2, r1, r2
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <ssd1306_NormalizeTo0_360+0x3a>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	e001      	b.n	80030aa <ssd1306_NormalizeTo0_360+0x3e>
 80030a6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80030aa:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 80030ac:	89fb      	ldrh	r3, [r7, #14]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	16c16c17 	.word	0x16c16c17

080030c0 <ssd1306_DrawArc>:
/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80030c0:	b5b0      	push	{r4, r5, r7, lr}
 80030c2:	b08a      	sub	sp, #40	; 0x28
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	4604      	mov	r4, r0
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	71fb      	strb	r3, [r7, #7]
 80030d2:	4603      	mov	r3, r0
 80030d4:	71bb      	strb	r3, [r7, #6]
 80030d6:	460b      	mov	r3, r1
 80030d8:	717b      	strb	r3, [r7, #5]
 80030da:	4613      	mov	r3, r2
 80030dc:	807b      	strh	r3, [r7, #2]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80030e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ffbf 	bl	800306c <ssd1306_NormalizeTo0_360>
 80030ee:	4603      	mov	r3, r0
 80030f0:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ffb9 	bl	800306c <ssd1306_NormalizeTo0_360>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a74      	ldr	r2, [pc, #464]	; (80032d0 <ssd1306_DrawArc+0x210>)
 80030fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003102:	1092      	asrs	r2, r2, #2
 8003104:	17db      	asrs	r3, r3, #31
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	4a6f      	ldr	r2, [pc, #444]	; (80032d4 <ssd1306_DrawArc+0x214>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003138:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 800313c:	e0be      	b.n	80032bc <ssd1306_DrawArc+0x1fc>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	ee07 3a90 	vmov	s15, r3
 8003144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003148:	edd7 7a03 	vldr	s15, [r7, #12]
 800314c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003150:	eeb0 0a67 	vmov.f32	s0, s15
 8003154:	f7ff ff60 	bl	8003018 <ssd1306_DegToRad>
 8003158:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 800315c:	69b8      	ldr	r0, [r7, #24]
 800315e:	f7fd fa13 	bl	8000588 <__aeabi_f2d>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	ec43 2b10 	vmov	d0, r2, r3
 800316a:	f011 fbc5 	bl	80148f8 <sin>
 800316e:	ec55 4b10 	vmov	r4, r5, d0
 8003172:	797b      	ldrb	r3, [r7, #5]
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f9f5 	bl	8000564 <__aeabi_i2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4620      	mov	r0, r4
 8003180:	4629      	mov	r1, r5
 8003182:	f7fd fa59 	bl	8000638 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	f7fd fced 	bl	8000b6c <__aeabi_d2iz>
 8003192:	4603      	mov	r3, r0
 8003194:	b25b      	sxtb	r3, r3
 8003196:	b2da      	uxtb	r2, r3
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	4413      	add	r3, r2
 800319c:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 800319e:	69b8      	ldr	r0, [r7, #24]
 80031a0:	f7fd f9f2 	bl	8000588 <__aeabi_f2d>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	ec43 2b10 	vmov	d0, r2, r3
 80031ac:	f011 fb54 	bl	8014858 <cos>
 80031b0:	ec55 4b10 	vmov	r4, r5, d0
 80031b4:	797b      	ldrb	r3, [r7, #5]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd f9d4 	bl	8000564 <__aeabi_i2d>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4620      	mov	r0, r4
 80031c2:	4629      	mov	r1, r5
 80031c4:	f7fd fa38 	bl	8000638 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fccc 	bl	8000b6c <__aeabi_d2iz>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	79bb      	ldrb	r3, [r7, #6]
 80031dc:	4413      	add	r3, r2
 80031de:	72bb      	strb	r3, [r7, #10]
        count++;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	3301      	adds	r3, #1
 80031e4:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments)
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d00f      	beq.n	800320e <ssd1306_DrawArc+0x14e>
        {
            rad = ssd1306_DegToRad(count*approx_degree);
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003200:	eeb0 0a67 	vmov.f32	s0, s15
 8003204:	f7ff ff08 	bl	8003018 <ssd1306_DegToRad>
 8003208:	ed87 0a06 	vstr	s0, [r7, #24]
 800320c:	e00a      	b.n	8003224 <ssd1306_DrawArc+0x164>
        }
        else
        {            
            rad = ssd1306_DegToRad(loc_sweep);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003218:	eeb0 0a67 	vmov.f32	s0, s15
 800321c:	f7ff fefc 	bl	8003018 <ssd1306_DegToRad>
 8003220:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 8003224:	69b8      	ldr	r0, [r7, #24]
 8003226:	f7fd f9af 	bl	8000588 <__aeabi_f2d>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	ec43 2b10 	vmov	d0, r2, r3
 8003232:	f011 fb61 	bl	80148f8 <sin>
 8003236:	ec55 4b10 	vmov	r4, r5, d0
 800323a:	797b      	ldrb	r3, [r7, #5]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f991 	bl	8000564 <__aeabi_i2d>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f7fd f9f5 	bl	8000638 <__aeabi_dmul>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fc89 	bl	8000b6c <__aeabi_d2iz>
 800325a:	4603      	mov	r3, r0
 800325c:	b25b      	sxtb	r3, r3
 800325e:	b2da      	uxtb	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	4413      	add	r3, r2
 8003264:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8003266:	69b8      	ldr	r0, [r7, #24]
 8003268:	f7fd f98e 	bl	8000588 <__aeabi_f2d>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	ec43 2b10 	vmov	d0, r2, r3
 8003274:	f011 faf0 	bl	8014858 <cos>
 8003278:	ec55 4b10 	vmov	r4, r5, d0
 800327c:	797b      	ldrb	r3, [r7, #5]
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f970 	bl	8000564 <__aeabi_i2d>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fd f9d4 	bl	8000638 <__aeabi_dmul>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fc68 	bl	8000b6c <__aeabi_d2iz>
 800329c:	4603      	mov	r3, r0
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	4413      	add	r3, r2
 80032a6:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80032a8:	7a3c      	ldrb	r4, [r7, #8]
 80032aa:	7a7a      	ldrb	r2, [r7, #9]
 80032ac:	7ab9      	ldrb	r1, [r7, #10]
 80032ae:	7af8      	ldrb	r0, [r7, #11]
 80032b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	4623      	mov	r3, r4
 80032b8:	f7ff fe08 	bl	8002ecc <ssd1306_Line>
    while(count < approx_segments)
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f4ff af3c 	bcc.w	800313e <ssd1306_DrawArc+0x7e>
    }
    
    return;
 80032c6:	bf00      	nop
}
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	66666667 	.word	0x66666667
 80032d4:	16c16c17 	.word	0x16c16c17

080032d8 <ssd1306_DrawCircle>:
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4604      	mov	r4, r0
 80032e0:	4608      	mov	r0, r1
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4623      	mov	r3, r4
 80032e8:	71fb      	strb	r3, [r7, #7]
 80032ea:	4603      	mov	r3, r0
 80032ec:	71bb      	strb	r3, [r7, #6]
 80032ee:	460b      	mov	r3, r1
 80032f0:	717b      	strb	r3, [r7, #5]
 80032f2:	4613      	mov	r3, r2
 80032f4:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 80032f6:	797b      	ldrb	r3, [r7, #5]
 80032f8:	425b      	negs	r3, r3
 80032fa:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8003300:	797b      	ldrb	r3, [r7, #5]
 8003302:	f1c3 0301 	rsb	r3, r3, #1
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	2b00      	cmp	r3, #0
 8003310:	db65      	blt.n	80033de <ssd1306_DrawCircle+0x106>
 8003312:	79bb      	ldrb	r3, [r7, #6]
 8003314:	2b3f      	cmp	r3, #63	; 0x3f
 8003316:	d862      	bhi.n	80033de <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	79fa      	ldrb	r2, [r7, #7]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	b2d8      	uxtb	r0, r3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	79bb      	ldrb	r3, [r7, #6]
 8003328:	4413      	add	r3, r2
 800332a:	b2db      	uxtb	r3, r3
 800332c:	793a      	ldrb	r2, [r7, #4]
 800332e:	4619      	mov	r1, r3
 8003330:	f7ff fca6 	bl	8002c80 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	4413      	add	r3, r2
 800333c:	b2d8      	uxtb	r0, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	79bb      	ldrb	r3, [r7, #6]
 8003344:	4413      	add	r3, r2
 8003346:	b2db      	uxtb	r3, r3
 8003348:	793a      	ldrb	r2, [r7, #4]
 800334a:	4619      	mov	r1, r3
 800334c:	f7ff fc98 	bl	8002c80 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	b2da      	uxtb	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	4413      	add	r3, r2
 8003358:	b2d8      	uxtb	r0, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	79ba      	ldrb	r2, [r7, #6]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	793a      	ldrb	r2, [r7, #4]
 8003366:	4619      	mov	r1, r3
 8003368:	f7ff fc8a 	bl	8002c80 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	79fa      	ldrb	r2, [r7, #7]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	b2d8      	uxtb	r0, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	79ba      	ldrb	r2, [r7, #6]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	793a      	ldrb	r2, [r7, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	f7ff fc7c 	bl	8002c80 <ssd1306_DrawPixel>
        e2 = err;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	dc13      	bgt.n	80033bc <ssd1306_DrawCircle+0xe4>
            y++;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3301      	adds	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	3301      	adds	r3, #1
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	425b      	negs	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d105      	bne.n	80033bc <ssd1306_DrawCircle+0xe4>
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dc01      	bgt.n	80033bc <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dd08      	ble.n	80033d6 <ssd1306_DrawCircle+0xfe>
          x++;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3301      	adds	r3, #1
 80033c8:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	3301      	adds	r3, #1
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	dd9d      	ble.n	8003318 <ssd1306_DrawCircle+0x40>

    return;
 80033dc:	e000      	b.n	80033e0 <ssd1306_DrawCircle+0x108>
    return;
 80033de:	bf00      	nop
}
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd90      	pop	{r4, r7, pc}

080033e6 <ssd1306_DrawRectangle>:

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80033e6:	b590      	push	{r4, r7, lr}
 80033e8:	b085      	sub	sp, #20
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	4604      	mov	r4, r0
 80033ee:	4608      	mov	r0, r1
 80033f0:	4611      	mov	r1, r2
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	71fb      	strb	r3, [r7, #7]
 80033f8:	4603      	mov	r3, r0
 80033fa:	71bb      	strb	r3, [r7, #6]
 80033fc:	460b      	mov	r3, r1
 80033fe:	717b      	strb	r3, [r7, #5]
 8003400:	4613      	mov	r3, r2
 8003402:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8003404:	79bc      	ldrb	r4, [r7, #6]
 8003406:	797a      	ldrb	r2, [r7, #5]
 8003408:	79b9      	ldrb	r1, [r7, #6]
 800340a:	79f8      	ldrb	r0, [r7, #7]
 800340c:	7e3b      	ldrb	r3, [r7, #24]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	4623      	mov	r3, r4
 8003412:	f7ff fd5b 	bl	8002ecc <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8003416:	793c      	ldrb	r4, [r7, #4]
 8003418:	797a      	ldrb	r2, [r7, #5]
 800341a:	79b9      	ldrb	r1, [r7, #6]
 800341c:	7978      	ldrb	r0, [r7, #5]
 800341e:	7e3b      	ldrb	r3, [r7, #24]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4623      	mov	r3, r4
 8003424:	f7ff fd52 	bl	8002ecc <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8003428:	793c      	ldrb	r4, [r7, #4]
 800342a:	79fa      	ldrb	r2, [r7, #7]
 800342c:	7939      	ldrb	r1, [r7, #4]
 800342e:	7978      	ldrb	r0, [r7, #5]
 8003430:	7e3b      	ldrb	r3, [r7, #24]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4623      	mov	r3, r4
 8003436:	f7ff fd49 	bl	8002ecc <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800343a:	79bc      	ldrb	r4, [r7, #6]
 800343c:	79fa      	ldrb	r2, [r7, #7]
 800343e:	7939      	ldrb	r1, [r7, #4]
 8003440:	79f8      	ldrb	r0, [r7, #7]
 8003442:	7e3b      	ldrb	r3, [r7, #24]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4623      	mov	r3, r4
 8003448:	f7ff fd40 	bl	8002ecc <ssd1306_Line>

  return;
 800344c:	bf00      	nop
}
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800345e:	2381      	movs	r3, #129	; 0x81
 8003460:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb23 	bl	8002ab0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fb1f 	bl	8002ab0 <ssd1306_WriteCommand>
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800348c:	23af      	movs	r3, #175	; 0xaf
 800348e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <ssd1306_SetDisplayOn+0x38>)
 8003492:	2201      	movs	r2, #1
 8003494:	719a      	strb	r2, [r3, #6]
 8003496:	e004      	b.n	80034a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003498:	23ae      	movs	r3, #174	; 0xae
 800349a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <ssd1306_SetDisplayOn+0x38>)
 800349e:	2200      	movs	r2, #0
 80034a0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fb03 	bl	8002ab0 <ssd1306_WriteCommand>
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000ad8 	.word	0x20000ad8

080034b8 <ssd1306_TestBorder>:
#include <string.h>
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"

void ssd1306_TestBorder() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black_);
 80034be:	2000      	movs	r0, #0
 80034c0:	f7ff fb92 	bl	8002be8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80034c4:	f000 fa2a 	bl	800391c <HAL_GetTick>
 80034c8:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black_);
 80034d6:	7bb9      	ldrb	r1, [r7, #14]
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2200      	movs	r2, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fbcf 	bl	8002c80 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 80034e2:	7bbb      	ldrb	r3, [r7, #14]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <ssd1306_TestBorder+0x3e>
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b7e      	cmp	r3, #126	; 0x7e
 80034ec:	d803      	bhi.n	80034f6 <ssd1306_TestBorder+0x3e>
            x++;
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	e016      	b.n	8003524 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	2b7f      	cmp	r3, #127	; 0x7f
 80034fa:	d106      	bne.n	800350a <ssd1306_TestBorder+0x52>
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003500:	d803      	bhi.n	800350a <ssd1306_TestBorder+0x52>
            y++;
 8003502:	7bbb      	ldrb	r3, [r7, #14]
 8003504:	3301      	adds	r3, #1
 8003506:	73bb      	strb	r3, [r7, #14]
 8003508:	e00c      	b.n	8003524 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2b3f      	cmp	r3, #63	; 0x3f
 800350e:	d106      	bne.n	800351e <ssd1306_TestBorder+0x66>
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <ssd1306_TestBorder+0x66>
            x--;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	3b01      	subs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
 800351c:	e002      	b.n	8003524 <ssd1306_TestBorder+0x6c>
        else
            y--;
 800351e:	7bbb      	ldrb	r3, [r7, #14]
 8003520:	3b01      	subs	r3, #1
 8003522:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White_);
 8003524:	7bb9      	ldrb	r1, [r7, #14]
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2201      	movs	r2, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fba8 	bl	8002c80 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8003530:	f7ff fb7e 	bl	8002c30 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8003534:	2005      	movs	r0, #5
 8003536:	f000 f9fd 	bl	8003934 <HAL_Delay>
        end = HAL_GetTick();
 800353a:	f000 f9ef 	bl	800391c <HAL_GetTick>
 800353e:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800354a:	d3c4      	bcc.n	80034d6 <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 800354c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003550:	f000 f9f0 	bl	8003934 <HAL_Delay>
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <ssd1306_TestFonts>:

void ssd1306_TestFonts() {
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black_);
 8003560:	2000      	movs	r0, #0
 8003562:	f7ff fb41 	bl	8002be8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 0);
 8003566:	2100      	movs	r1, #0
 8003568:	2002      	movs	r0, #2
 800356a:	f7ff fc97 	bl	8002e9c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White_);
 800356e:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <ssd1306_TestFonts+0x64>)
 8003570:	2301      	movs	r3, #1
 8003572:	ca06      	ldmia	r2, {r1, r2}
 8003574:	4813      	ldr	r0, [pc, #76]	; (80035c4 <ssd1306_TestFonts+0x68>)
 8003576:	f7ff fc6b 	bl	8002e50 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26);
 800357a:	211a      	movs	r1, #26
 800357c:	2002      	movs	r0, #2
 800357e:	f7ff fc8d 	bl	8002e9c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White_);
 8003582:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <ssd1306_TestFonts+0x6c>)
 8003584:	2301      	movs	r3, #1
 8003586:	ca06      	ldmia	r2, {r1, r2}
 8003588:	4810      	ldr	r0, [pc, #64]	; (80035cc <ssd1306_TestFonts+0x70>)
 800358a:	f7ff fc61 	bl	8002e50 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18);
 800358e:	212c      	movs	r1, #44	; 0x2c
 8003590:	2002      	movs	r0, #2
 8003592:	f7ff fc83 	bl	8002e9c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White_);
 8003596:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <ssd1306_TestFonts+0x74>)
 8003598:	2301      	movs	r3, #1
 800359a:	ca06      	ldmia	r2, {r1, r2}
 800359c:	480d      	ldr	r0, [pc, #52]	; (80035d4 <ssd1306_TestFonts+0x78>)
 800359e:	f7ff fc57 	bl	8002e50 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 26+18+10);
 80035a2:	2136      	movs	r1, #54	; 0x36
 80035a4:	2002      	movs	r0, #2
 80035a6:	f7ff fc79 	bl	8002e9c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White_);
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <ssd1306_TestFonts+0x7c>)
 80035ac:	2301      	movs	r3, #1
 80035ae:	ca06      	ldmia	r2, {r1, r2}
 80035b0:	480a      	ldr	r0, [pc, #40]	; (80035dc <ssd1306_TestFonts+0x80>)
 80035b2:	f7ff fc4d 	bl	8002e50 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80035b6:	f7ff fb3b 	bl	8002c30 <ssd1306_UpdateScreen>
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2000001c 	.word	0x2000001c
 80035c4:	080163fc 	.word	0x080163fc
 80035c8:	20000014 	.word	0x20000014
 80035cc:	08016408 	.word	0x08016408
 80035d0:	2000000c 	.word	0x2000000c
 80035d4:	08016414 	.word	0x08016414
 80035d8:	20000004 	.word	0x20000004
 80035dc:	08016420 	.word	0x08016420

080035e0 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b098      	sub	sp, #96	; 0x60
 80035e4:	af00      	add	r7, sp, #0
    ssd1306_Fill(White_);
 80035e6:	2001      	movs	r0, #1
 80035e8:	f7ff fafe 	bl	8002be8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80035ec:	f000 f996 	bl	800391c <HAL_GetTick>
 80035f0:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 80035f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f4:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80035fa:	4a3e      	ldr	r2, [pc, #248]	; (80036f4 <ssd1306_TestFPS+0x114>)
 80035fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003600:	ca07      	ldmia	r2, {r0, r1, r2}
 8003602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8003606:	2100      	movs	r1, #0
 8003608:	2002      	movs	r0, #2
 800360a:	f7ff fc47 	bl	8002e9c <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black_);
 800360e:	4a3a      	ldr	r2, [pc, #232]	; (80036f8 <ssd1306_TestFPS+0x118>)
 8003610:	2300      	movs	r3, #0
 8003612:	ca06      	ldmia	r2, {r1, r2}
 8003614:	4839      	ldr	r0, [pc, #228]	; (80036fc <ssd1306_TestFPS+0x11c>)
 8003616:	f7ff fc1b 	bl	8002e50 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 800361a:	2112      	movs	r1, #18
 800361c:	2002      	movs	r0, #2
 800361e:	f7ff fc3d 	bl	8002e9c <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black_);
 8003622:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <ssd1306_TestFPS+0x118>)
 8003624:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003628:	2300      	movs	r3, #0
 800362a:	ca06      	ldmia	r2, {r1, r2}
 800362c:	f7ff fc10 	bl	8002e50 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8003630:	f7ff fafe 	bl	8002c30 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8003634:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003638:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 800363c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003640:	3301      	adds	r3, #1
 8003642:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003646:	220a      	movs	r2, #10
 8003648:	4619      	mov	r1, r3
 800364a:	f012 f9cb 	bl	80159e4 <memmove>
        message[sizeof(message)-2] = ch;
 800364e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003652:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8003656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003658:	3301      	adds	r3, #1
 800365a:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 800365c:	f000 f95e 	bl	800391c <HAL_GetTick>
 8003660:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8003662:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	f241 3287 	movw	r2, #4999	; 0x1387
 800366c:	4293      	cmp	r3, r2
 800366e:	d9d4      	bls.n	800361a <ssd1306_TestFPS+0x3a>
   
    HAL_Delay(1000);
 8003670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003674:	f000 f95e 	bl	8003934 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8003678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003682:	ee17 0a90 	vmov	r0, s15
 8003686:	f7fc ff7f 	bl	8000588 <__aeabi_f2d>
 800368a:	4604      	mov	r4, r0
 800368c:	460d      	mov	r5, r1
 800368e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff55 	bl	8000544 <__aeabi_ui2d>
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <ssd1306_TestFPS+0x120>)
 80036a0:	f7fd f8f4 	bl	800088c <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4620      	mov	r0, r4
 80036aa:	4629      	mov	r1, r5
 80036ac:	f7fd f8ee 	bl	800088c <__aeabi_ddiv>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd fa58 	bl	8000b6c <__aeabi_d2iz>
 80036bc:	4603      	mov	r3, r0
 80036be:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 80036c0:	1d38      	adds	r0, r7, #4
 80036c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <ssd1306_TestFPS+0x124>)
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	f012 faac 	bl	8015c24 <sniprintf>
   
    ssd1306_Fill(White_);
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7ff fa8b 	bl	8002be8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 80036d2:	2102      	movs	r1, #2
 80036d4:	2002      	movs	r0, #2
 80036d6:	f7ff fbe1 	bl	8002e9c <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black_);
 80036da:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <ssd1306_TestFPS+0x118>)
 80036dc:	1d38      	adds	r0, r7, #4
 80036de:	2300      	movs	r3, #0
 80036e0:	ca06      	ldmia	r2, {r1, r2}
 80036e2:	f7ff fbb5 	bl	8002e50 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80036e6:	f7ff faa3 	bl	8002c30 <ssd1306_UpdateScreen>
}
 80036ea:	bf00      	nop
 80036ec:	3760      	adds	r7, #96	; 0x60
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	08016440 	.word	0x08016440
 80036f8:	20000014 	.word	0x20000014
 80036fc:	0801642c 	.word	0x0801642c
 8003700:	408f4000 	.word	0x408f4000
 8003704:	08016438 	.word	0x08016438

08003708 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White_);
 800370e:	2301      	movs	r3, #1
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	233f      	movs	r3, #63	; 0x3f
 8003714:	227f      	movs	r2, #127	; 0x7f
 8003716:	2101      	movs	r1, #1
 8003718:	2001      	movs	r0, #1
 800371a:	f7ff fbd7 	bl	8002ecc <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White_);
 800371e:	2301      	movs	r3, #1
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	233f      	movs	r3, #63	; 0x3f
 8003724:	2201      	movs	r2, #1
 8003726:	2101      	movs	r1, #1
 8003728:	207f      	movs	r0, #127	; 0x7f
 800372a:	f7ff fbcf 	bl	8002ecc <ssd1306_Line>
  ssd1306_UpdateScreen();
 800372e:	f7ff fa7f 	bl	8002c30 <ssd1306_UpdateScreen>
  return;
 8003732:	bf00      	nop
}
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b085      	sub	sp, #20
 800373c:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	e028      	b.n	8003796 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White_);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4413      	add	r3, r2
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	b2d8      	uxtb	r0, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4413      	add	r3, r2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3301      	adds	r3, #1
 8003762:	b2d9      	uxtb	r1, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	0092      	lsls	r2, r2, #2
 800376c:	4413      	add	r3, r2
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8003774:	b2da      	uxtb	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461c      	mov	r4, r3
 800377c:	00a4      	lsls	r4, r4, #2
 800377e:	4423      	add	r3, r4
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2401      	movs	r4, #1
 800378a:	9400      	str	r4, [sp, #0]
 800378c:	f7ff fe2b 	bl	80033e6 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d9d3      	bls.n	8003744 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 800379c:	f7ff fa48 	bl	8002c30 <ssd1306_UpdateScreen>
  return;
 80037a0:	bf00      	nop
}
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd90      	pop	{r4, r7, pc}

080037a8 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	e010      	b.n	80037d6 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20* delta+30, 15, 10, White_);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	331e      	adds	r3, #30
 80037c4:	b2d8      	uxtb	r0, r3
 80037c6:	2301      	movs	r3, #1
 80037c8:	220a      	movs	r2, #10
 80037ca:	210f      	movs	r1, #15
 80037cc:	f7ff fd84 	bl	80032d8 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d9eb      	bls.n	80037b4 <ssd1306_TestCircle+0xc>
  }
  ssd1306_UpdateScreen();
 80037dc:	f7ff fa28 	bl	8002c30 <ssd1306_UpdateScreen>
  return;
 80037e0:	bf00      	nop
}
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White_);
 80037ee:	2301      	movs	r3, #1
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2314      	movs	r3, #20
 80037fa:	221e      	movs	r2, #30
 80037fc:	211e      	movs	r1, #30
 80037fe:	201e      	movs	r0, #30
 8003800:	f7ff fc5e 	bl	80030c0 <ssd1306_DrawArc>
  ssd1306_UpdateScreen();
 8003804:	f7ff fa14 	bl	8002c30 <ssd1306_UpdateScreen>
  return;
 8003808:	bf00      	nop
}
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <ssd1306_TestPolyline+0x28>)
 8003818:	463c      	mov	r4, r7
 800381a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800381c:	c407      	stmia	r4!, {r0, r1, r2}
 800381e:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White_);
 8003820:	463b      	mov	r3, r7
 8003822:	2201      	movs	r2, #1
 8003824:	2107      	movs	r1, #7
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fbbc 	bl	8002fa4 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 800382c:	f7ff fa00 	bl	8002c30 <ssd1306_UpdateScreen>
  return;
 8003830:	bf00      	nop
}
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bd90      	pop	{r4, r7, pc}
 8003838:	0801644c 	.word	0x0801644c

0800383c <ssd1306_TestAll>:

void ssd1306_TestAll() {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8003840:	f7ff f968 	bl	8002b14 <ssd1306_Init>
    ssd1306_TestFPS();
 8003844:	f7ff fecc 	bl	80035e0 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8003848:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800384c:	f000 f872 	bl	8003934 <HAL_Delay>
    ssd1306_TestBorder();
 8003850:	f7ff fe32 	bl	80034b8 <ssd1306_TestBorder>
    ssd1306_TestFonts();
 8003854:	f7ff fe82 	bl	800355c <ssd1306_TestFonts>
    HAL_Delay(3000);
 8003858:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800385c:	f000 f86a 	bl	8003934 <HAL_Delay>
    ssd1306_Fill(Black_);
 8003860:	2000      	movs	r0, #0
 8003862:	f7ff f9c1 	bl	8002be8 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8003866:	f7ff ff67 	bl	8003738 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800386a:	f7ff ff4d 	bl	8003708 <ssd1306_TestLine>
    HAL_Delay(3000);
 800386e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003872:	f000 f85f 	bl	8003934 <HAL_Delay>
    ssd1306_Fill(Black_);
 8003876:	2000      	movs	r0, #0
 8003878:	f7ff f9b6 	bl	8002be8 <ssd1306_Fill>
    ssd1306_TestPolyline();
 800387c:	f7ff ffc8 	bl	8003810 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8003880:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003884:	f000 f856 	bl	8003934 <HAL_Delay>
    ssd1306_Fill(Black_);
 8003888:	2000      	movs	r0, #0
 800388a:	f7ff f9ad 	bl	8002be8 <ssd1306_Fill>
    ssd1306_TestArc();
 800388e:	f7ff ffab 	bl	80037e8 <ssd1306_TestArc>
    HAL_Delay(3000);
 8003892:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003896:	f000 f84d 	bl	8003934 <HAL_Delay>
    ssd1306_Fill(Black_);
 800389a:	2000      	movs	r0, #0
 800389c:	f7ff f9a4 	bl	8002be8 <ssd1306_Fill>
    ssd1306_TestCircle();
 80038a0:	f7ff ff82 	bl	80037a8 <ssd1306_TestCircle>
    HAL_Delay(3000);
 80038a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80038a8:	f000 f844 	bl	8003934 <HAL_Delay>
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_Init+0x40>)
 80038ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_Init+0x40>)
 80038c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_Init+0x40>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_Init+0x40>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d8:	2003      	movs	r0, #3
 80038da:	f000 f8fc 	bl	8003ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038de:	2000      	movs	r0, #0
 80038e0:	f7fe ffba 	bl	8002858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e4:	f7fe fe8c 	bl	8002600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023c00 	.word	0x40023c00

080038f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_IncTick+0x20>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_IncTick+0x24>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4413      	add	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_IncTick+0x24>)
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000028 	.word	0x20000028
 8003918:	2000546c 	.word	0x2000546c

0800391c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return uwTick;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_GetTick+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000546c 	.word	0x2000546c

08003934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff ffee 	bl	800391c <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d005      	beq.n	800395a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_Delay+0x44>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800395a:	bf00      	nop
 800395c:	f7ff ffde 	bl	800391c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d8f7      	bhi.n	800395c <HAL_Delay+0x28>
  {
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000028 	.word	0x20000028

0800397c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003998:	4013      	ands	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ae:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	60d3      	str	r3, [r2, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <__NVIC_GetPriorityGrouping+0x18>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	f003 0307 	and.w	r3, r3, #7
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	db0b      	blt.n	8003a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	f003 021f 	and.w	r2, r3, #31
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <__NVIC_EnableIRQ+0x38>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2001      	movs	r0, #1
 8003a02:	fa00 f202 	lsl.w	r2, r0, r2
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e100 	.word	0xe000e100

08003a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	db0a      	blt.n	8003a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	490c      	ldr	r1, [pc, #48]	; (8003a68 <__NVIC_SetPriority+0x4c>)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a44:	e00a      	b.n	8003a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4908      	ldr	r1, [pc, #32]	; (8003a6c <__NVIC_SetPriority+0x50>)
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	3b04      	subs	r3, #4
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	440b      	add	r3, r1
 8003a5a:	761a      	strb	r2, [r3, #24]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000e100 	.word	0xe000e100
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f1c3 0307 	rsb	r3, r3, #7
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	bf28      	it	cs
 8003a8e:	2304      	movcs	r3, #4
 8003a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d902      	bls.n	8003aa0 <NVIC_EncodePriority+0x30>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3b03      	subs	r3, #3
 8003a9e:	e000      	b.n	8003aa2 <NVIC_EncodePriority+0x32>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	43d9      	mvns	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	4313      	orrs	r3, r2
         );
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ff4c 	bl	800397c <__NVIC_SetPriorityGrouping>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afe:	f7ff ff61 	bl	80039c4 <__NVIC_GetPriorityGrouping>
 8003b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f7ff ffb1 	bl	8003a70 <NVIC_EncodePriority>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff80 	bl	8003a1c <__NVIC_SetPriority>
}
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff54 	bl	80039e0 <__NVIC_EnableIRQ>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e165      	b.n	8003e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	f040 8154 	bne.w	8003e22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d005      	beq.n	8003b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d130      	bne.n	8003bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 0201 	and.w	r2, r3, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d017      	beq.n	8003c30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d123      	bne.n	8003c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220f      	movs	r2, #15
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	08da      	lsrs	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3208      	adds	r2, #8
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0203 	and.w	r2, r3, #3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80ae 	beq.w	8003e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <HAL_GPIO_Init+0x300>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4a5c      	ldr	r2, [pc, #368]	; (8003e40 <HAL_GPIO_Init+0x300>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <HAL_GPIO_Init+0x300>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ce2:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_GPIO_Init+0x304>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4f      	ldr	r2, [pc, #316]	; (8003e48 <HAL_GPIO_Init+0x308>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d025      	beq.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <HAL_GPIO_Init+0x30c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01f      	beq.n	8003d56 <HAL_GPIO_Init+0x216>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <HAL_GPIO_Init+0x310>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d019      	beq.n	8003d52 <HAL_GPIO_Init+0x212>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4c      	ldr	r2, [pc, #304]	; (8003e54 <HAL_GPIO_Init+0x314>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d013      	beq.n	8003d4e <HAL_GPIO_Init+0x20e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <HAL_GPIO_Init+0x318>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00d      	beq.n	8003d4a <HAL_GPIO_Init+0x20a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <HAL_GPIO_Init+0x31c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <HAL_GPIO_Init+0x206>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a49      	ldr	r2, [pc, #292]	; (8003e60 <HAL_GPIO_Init+0x320>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d101      	bne.n	8003d42 <HAL_GPIO_Init+0x202>
 8003d3e:	2306      	movs	r3, #6
 8003d40:	e00c      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d42:	2307      	movs	r3, #7
 8003d44:	e00a      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d46:	2305      	movs	r3, #5
 8003d48:	e008      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e004      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_GPIO_Init+0x21c>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	f002 0203 	and.w	r2, r2, #3
 8003d62:	0092      	lsls	r2, r2, #2
 8003d64:	4093      	lsls	r3, r2
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d6c:	4935      	ldr	r1, [pc, #212]	; (8003e44 <HAL_GPIO_Init+0x304>)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	3302      	adds	r3, #2
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d7a:	4b3a      	ldr	r3, [pc, #232]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d9e:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003da4:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dc8:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dce:	4b25      	ldr	r3, [pc, #148]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	43db      	mvns	r3, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e1c:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3301      	adds	r3, #1
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b0f      	cmp	r3, #15
 8003e2c:	f67f ae96 	bls.w	8003b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3724      	adds	r7, #36	; 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40020000 	.word	0x40020000
 8003e4c:	40020400 	.word	0x40020400
 8003e50:	40020800 	.word	0x40020800
 8003e54:	40020c00 	.word	0x40020c00
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40021400 	.word	0x40021400
 8003e60:	40021800 	.word	0x40021800
 8003e64:	40013c00 	.word	0x40013c00

08003e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e001      	b.n	8003e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	041a      	lsls	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e12b      	b.n	8004136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fbb0 	bl	8002658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f30:	f001 fed0 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4a81      	ldr	r2, [pc, #516]	; (8004140 <HAL_I2C_Init+0x274>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d807      	bhi.n	8003f50 <HAL_I2C_Init+0x84>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a80      	ldr	r2, [pc, #512]	; (8004144 <HAL_I2C_Init+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf94      	ite	ls
 8003f48:	2301      	movls	r3, #1
 8003f4a:	2300      	movhi	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e006      	b.n	8003f5e <HAL_I2C_Init+0x92>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a7d      	ldr	r2, [pc, #500]	; (8004148 <HAL_I2C_Init+0x27c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bf94      	ite	ls
 8003f58:	2301      	movls	r3, #1
 8003f5a:	2300      	movhi	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0e7      	b.n	8004136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a78      	ldr	r2, [pc, #480]	; (800414c <HAL_I2C_Init+0x280>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0c9b      	lsrs	r3, r3, #18
 8003f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a6a      	ldr	r2, [pc, #424]	; (8004140 <HAL_I2C_Init+0x274>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d802      	bhi.n	8003fa0 <HAL_I2C_Init+0xd4>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	e009      	b.n	8003fb4 <HAL_I2C_Init+0xe8>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a69      	ldr	r2, [pc, #420]	; (8004150 <HAL_I2C_Init+0x284>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	495c      	ldr	r1, [pc, #368]	; (8004140 <HAL_I2C_Init+0x274>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d819      	bhi.n	8004008 <HAL_I2C_Init+0x13c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e59      	subs	r1, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fe8:	400b      	ands	r3, r1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_I2C_Init+0x138>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e59      	subs	r1, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004002:	e051      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004004:	2304      	movs	r3, #4
 8004006:	e04f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <HAL_I2C_Init+0x168>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e012      	b.n	800405a <HAL_I2C_Init+0x18e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	fbb0 f3f3 	udiv	r3, r0, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Init+0x196>
 800405e:	2301      	movs	r3, #1
 8004060:	e022      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <HAL_I2C_Init+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e58      	subs	r0, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	440b      	add	r3, r1
 8004078:	fbb0 f3f3 	udiv	r3, r0, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	e00f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	0099      	lsls	r1, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6809      	ldr	r1, [r1, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6911      	ldr	r1, [r2, #16]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	4311      	orrs	r1, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	000186a0 	.word	0x000186a0
 8004144:	001e847f 	.word	0x001e847f
 8004148:	003d08ff 	.word	0x003d08ff
 800414c:	431bde83 	.word	0x431bde83
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	461a      	mov	r2, r3
 8004162:	4603      	mov	r3, r0
 8004164:	817b      	strh	r3, [r7, #10]
 8004166:	460b      	mov	r3, r1
 8004168:	813b      	strh	r3, [r7, #8]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800416e:	f7ff fbd5 	bl	800391c <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	f040 80d9 	bne.w	8004334 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2319      	movs	r3, #25
 8004188:	2201      	movs	r2, #1
 800418a:	496d      	ldr	r1, [pc, #436]	; (8004340 <HAL_I2C_Mem_Write+0x1ec>)
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f971 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
 800419a:	e0cc      	b.n	8004336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_I2C_Mem_Write+0x56>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e0c5      	b.n	8004336 <HAL_I2C_Mem_Write+0x1e2>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d007      	beq.n	80041d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2221      	movs	r2, #33	; 0x21
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2240      	movs	r2, #64	; 0x40
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a4d      	ldr	r2, [pc, #308]	; (8004344 <HAL_I2C_Mem_Write+0x1f0>)
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004212:	88f8      	ldrh	r0, [r7, #6]
 8004214:	893a      	ldrh	r2, [r7, #8]
 8004216:	8979      	ldrh	r1, [r7, #10]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4603      	mov	r3, r0
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f890 	bl	8004348 <I2C_RequestMemoryWrite>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d052      	beq.n	80042d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e081      	b.n	8004336 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f9f2 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b04      	cmp	r3, #4
 8004248:	d107      	bne.n	800425a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e06b      	b.n	8004336 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b04      	cmp	r3, #4
 800429a:	d11b      	bne.n	80042d4 <HAL_I2C_Mem_Write+0x180>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d017      	beq.n	80042d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1aa      	bne.n	8004232 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f9de 	bl	80046a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d107      	bne.n	8004304 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e016      	b.n	8004336 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	00100002 	.word	0x00100002
 8004344:	ffff0000 	.word	0xffff0000

08004348 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4603      	mov	r3, r0
 8004358:	817b      	strh	r3, [r7, #10]
 800435a:	460b      	mov	r3, r1
 800435c:	813b      	strh	r3, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2200      	movs	r2, #0
 800437a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f878 	bl	8004474 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004398:	d103      	bne.n	80043a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e05f      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	492d      	ldr	r1, [pc, #180]	; (8004470 <I2C_RequestMemoryWrite+0x128>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f8b0 	bl	8004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e04c      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f91a 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d107      	bne.n	800440a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e02b      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e021      	b.n	8004464 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004420:	893b      	ldrh	r3, [r7, #8]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f8f4 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d107      	bne.n	8004456 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e005      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445a:	893b      	ldrh	r3, [r7, #8]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	00010002 	.word	0x00010002

08004474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004484:	e025      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d021      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7ff fa45 	bl	800391c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d116      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f043 0220 	orr.w	r2, r3, #32
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e023      	b.n	800451a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d10d      	bne.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	43da      	mvns	r2, r3
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4013      	ands	r3, r2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	e00c      	b.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	43da      	mvns	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4013      	ands	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf0c      	ite	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	2300      	movne	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	429a      	cmp	r2, r3
 8004516:	d0b6      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004530:	e051      	b.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d123      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800455a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e046      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d021      	beq.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004592:	f7ff f9c3 	bl	800391c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d302      	bcc.n	80045a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d116      	bne.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f043 0220 	orr.w	r2, r3, #32
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e020      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10c      	bne.n	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e00b      	b.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d18d      	bne.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	e02d      	b.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f878 	bl	8004724 <I2C_IsAcknowledgeFailed>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e02d      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d021      	beq.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7ff f969 	bl	800391c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d116      	bne.n	800468a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e007      	b.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d1ca      	bne.n	800462e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046ae:	e02d      	b.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f837 	bl	8004724 <I2C_IsAcknowledgeFailed>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e02d      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d021      	beq.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c8:	f7ff f928 	bl	800391c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e007      	b.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d1ca      	bne.n	80046b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d11b      	bne.n	8004774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004784:	b08f      	sub	sp, #60	; 0x3c
 8004786:	af0a      	add	r7, sp, #40	; 0x28
 8004788:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e116      	b.n	80049c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f009 fc14 	bl	800dfdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2203      	movs	r2, #3
 80047b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f003 ff47 	bl	8008666 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	687e      	ldr	r6, [r7, #4]
 80047e0:	466d      	mov	r5, sp
 80047e2:	f106 0410 	add.w	r4, r6, #16
 80047e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80047f6:	1d33      	adds	r3, r6, #4
 80047f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047fa:	6838      	ldr	r0, [r7, #0]
 80047fc:	f003 fe1e 	bl	800843c <USB_CoreInit>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e0d7      	b.n	80049c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f003 ff35 	bl	8008688 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	e04a      	b.n	80048ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	333d      	adds	r3, #61	; 0x3d
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	333c      	adds	r3, #60	; 0x3c
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	b298      	uxth	r0, r3
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	3342      	adds	r3, #66	; 0x42
 8004860:	4602      	mov	r2, r0
 8004862:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	333f      	adds	r3, #63	; 0x3f
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3344      	adds	r3, #68	; 0x44
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800488c:	7bfa      	ldrb	r2, [r7, #15]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	3348      	adds	r3, #72	; 0x48
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048a0:	7bfa      	ldrb	r2, [r7, #15]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	3350      	adds	r3, #80	; 0x50
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	3301      	adds	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
 80048ba:	7bfa      	ldrb	r2, [r7, #15]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3af      	bcc.n	8004824 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e044      	b.n	8004954 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048e0:	7bfa      	ldrb	r2, [r7, #15]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004938:	7bfa      	ldrb	r2, [r7, #15]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	3301      	adds	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
 8004954:	7bfa      	ldrb	r2, [r7, #15]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d3b5      	bcc.n	80048ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	687e      	ldr	r6, [r7, #4]
 8004966:	466d      	mov	r5, sp
 8004968:	f106 0410 	add.w	r4, r6, #16
 800496c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800496e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004974:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004978:	e885 0003 	stmia.w	r5, {r0, r1}
 800497c:	1d33      	adds	r3, r6, #4
 800497e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004980:	6838      	ldr	r0, [r7, #0]
 8004982:	f003 feab 	bl	80086dc <USB_DevInit>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e014      	b.n	80049c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f001 f879 	bl	8005aa8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f004 fee6 	bl	800978c <USB_DevDisconnect>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_PCD_Start+0x1c>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e020      	b.n	8004a28 <HAL_PCD_Start+0x5e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d109      	bne.n	8004a0a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d005      	beq.n	8004a0a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f003 fe18 	bl	8008644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f004 fe96 	bl	800974a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a30:	b590      	push	{r4, r7, lr}
 8004a32:	b08d      	sub	sp, #52	; 0x34
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f004 ff54 	bl	80098f4 <USB_GetMode>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 83ca 	bne.w	80051e8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f004 feb8 	bl	80097ce <USB_ReadInterrupts>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 83c0 	beq.w	80051e6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f004 feaf 	bl	80097ce <USB_ReadInterrupts>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d107      	bne.n	8004a8a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695a      	ldr	r2, [r3, #20]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f002 0202 	and.w	r2, r2, #2
 8004a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 fe9d 	bl	80097ce <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d161      	bne.n	8004b62 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0210 	bic.w	r2, r2, #16
 8004aac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 020f 	and.w	r2, r3, #15
 8004aba:	4613      	mov	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	4413      	add	r3, r2
 8004aca:	3304      	adds	r3, #4
 8004acc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	0c5b      	lsrs	r3, r3, #17
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d124      	bne.n	8004b24 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d035      	beq.n	8004b52 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	6a38      	ldr	r0, [r7, #32]
 8004afa:	f004 fd03 	bl	8009504 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b0a:	441a      	add	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b1c:	441a      	add	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	619a      	str	r2, [r3, #24]
 8004b22:	e016      	b.n	8004b52 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	0c5b      	lsrs	r3, r3, #17
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d110      	bne.n	8004b52 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b36:	2208      	movs	r2, #8
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6a38      	ldr	r0, [r7, #32]
 8004b3c:	f004 fce2 	bl	8009504 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b4c:	441a      	add	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0210 	orr.w	r2, r2, #16
 8004b60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f004 fe31 	bl	80097ce <USB_ReadInterrupts>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b76:	d16e      	bne.n	8004c56 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f004 fe37 	bl	80097f4 <USB_ReadDevAllOutEpInterrupt>
 8004b86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b88:	e062      	b.n	8004c50 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d057      	beq.n	8004c44 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f004 fe5c 	bl	800985c <USB_ReadDevOutEPInterrupt>
 8004ba4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00c      	beq.n	8004bca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fdc5 	bl	8005754 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00c      	beq.n	8004bee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2308      	movs	r3, #8
 8004be4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 febf 	bl	800596c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	461a      	mov	r2, r3
 8004c06:	2310      	movs	r3, #16
 8004c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0320 	and.w	r3, r3, #32
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	2320      	movs	r3, #32
 8004c24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d009      	beq.n	8004c44 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	3301      	adds	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d199      	bne.n	8004b8a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f004 fdb7 	bl	80097ce <USB_ReadInterrupts>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c6a:	f040 80c0 	bne.w	8004dee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 fdd8 	bl	8009828 <USB_ReadDevAllInEpInterrupt>
 8004c78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c7e:	e0b2      	b.n	8004de6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80a7 	beq.w	8004dda <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f004 fdfe 	bl	8009898 <USB_ReadDevInEPInterrupt>
 8004c9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d057      	beq.n	8004d58 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	2201      	movs	r2, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69f9      	ldr	r1, [r7, #28]
 8004cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc8:	4013      	ands	r3, r2
 8004cca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2301      	movs	r3, #1
 8004cdc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d132      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3348      	adds	r3, #72	; 0x48
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4403      	add	r3, r0
 8004d06:	3344      	adds	r3, #68	; 0x44
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4419      	add	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4403      	add	r3, r0
 8004d1a:	3348      	adds	r3, #72	; 0x48
 8004d1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d113      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x31c>
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3350      	adds	r3, #80	; 0x50
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d44:	461a      	mov	r2, r3
 8004d46:	2101      	movs	r1, #1
 8004d48:	f004 fe06 	bl	8009958 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f009 f9c3 	bl	800e0de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2308      	movs	r3, #8
 8004d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da6:	461a      	mov	r2, r3
 8004da8:	2340      	movs	r3, #64	; 0x40
 8004daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fc30 	bl	800563a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3301      	adds	r3, #1
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f af49 	bne.w	8004c80 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f004 fceb 	bl	80097ce <USB_ReadInterrupts>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e02:	d122      	bne.n	8004e4a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d108      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f009 fb93 	bl	800e558 <HAL_PCDEx_LPM_Callback>
 8004e32:	e002      	b.n	8004e3a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f009 f9c9 	bl	800e1cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f004 fcbd 	bl	80097ce <USB_ReadInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e5e:	d112      	bne.n	8004e86 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f009 f985 	bl	800e180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004e84:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f004 fc9f 	bl	80097ce <USB_ReadInterrupts>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9a:	d121      	bne.n	8004ee0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004eaa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d111      	bne.n	8004eda <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	f003 020f 	and.w	r2, r3, #15
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f009 fb40 	bl	800e558 <HAL_PCDEx_LPM_Callback>
 8004ed8:	e002      	b.n	8004ee0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f009 f950 	bl	800e180 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f004 fc72 	bl	80097ce <USB_ReadInterrupts>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	f040 80c7 	bne.w	8005086 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2110      	movs	r1, #16
 8004f12:	4618      	mov	r0, r3
 8004f14:	f003 fd40 	bl	8008998 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1c:	e056      	b.n	8004fcc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f42:	0151      	lsls	r1, r2, #5
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	440a      	add	r2, r1
 8004f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f50:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f96:	0151      	lsls	r1, r2, #5
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	440a      	add	r2, r1
 8004f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	3301      	adds	r3, #1
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d3a3      	bcc.n	8004f1e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004fe8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d016      	beq.n	8005020 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005002:	f043 030b 	orr.w	r3, r3, #11
 8005006:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005018:	f043 030b 	orr.w	r3, r3, #11
 800501c:	6453      	str	r3, [r2, #68]	; 0x44
 800501e:	e015      	b.n	800504c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005032:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005036:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005046:	f043 030b 	orr.w	r3, r3, #11
 800504a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800505e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005070:	461a      	mov	r2, r3
 8005072:	f004 fc71 	bl	8009958 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fb9f 	bl	80097ce <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509a:	d124      	bne.n	80050e6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 fc35 	bl	8009910 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f003 fcd5 	bl	8008a5a <USB_GetDevSpeed>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681c      	ldr	r4, [r3, #0]
 80050bc:	f000 fdfe 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 80050c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	4620      	mov	r0, r4
 80050cc:	f003 fa18 	bl	8008500 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f009 f82c 	bl	800e12e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80050e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f004 fb6f 	bl	80097ce <USB_ReadInterrupts>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d10a      	bne.n	8005110 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f009 f809 	bl	800e112 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f002 0208 	and.w	r2, r2, #8
 800510e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f004 fb5a 	bl	80097ce <USB_ReadInterrupts>
 800511a:	4603      	mov	r3, r0
 800511c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005124:	d10f      	bne.n	8005146 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	b2db      	uxtb	r3, r3
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f009 f86b 	bl	800e20c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f004 fb3f 	bl	80097ce <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800515a:	d10f      	bne.n	800517c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f009 f83e 	bl	800e1e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800517a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f004 fb24 	bl	80097ce <USB_ReadInterrupts>
 8005186:	4603      	mov	r3, r0
 8005188:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d10a      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f009 f84c 	bl	800e230 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80051a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f004 fb0e 	bl	80097ce <USB_ReadInterrupts>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d115      	bne.n	80051e8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f009 f83c 	bl	800e24c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6859      	ldr	r1, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
 80051e4:	e000      	b.n	80051e8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80051e6:	bf00      	nop
    }
  }
}
 80051e8:	3734      	adds	r7, #52	; 0x34
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd90      	pop	{r4, r7, pc}

080051ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_PCD_SetAddress+0x1a>
 8005204:	2302      	movs	r3, #2
 8005206:	e013      	b.n	8005230 <HAL_PCD_SetAddress+0x42>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	4611      	mov	r1, r2
 8005220:	4618      	mov	r0, r3
 8005222:	f004 fa6c 	bl	80096fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	70fb      	strb	r3, [r7, #3]
 800524a:	460b      	mov	r3, r1
 800524c:	803b      	strh	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800525a:	2b00      	cmp	r3, #0
 800525c:	da0f      	bge.n	800527e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	4613      	mov	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	3338      	adds	r3, #56	; 0x38
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4413      	add	r3, r2
 8005272:	3304      	adds	r3, #4
 8005274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	705a      	strb	r2, [r3, #1]
 800527c:	e00f      	b.n	800529e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	f003 020f 	and.w	r2, r3, #15
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	3304      	adds	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052aa:	883a      	ldrh	r2, [r7, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	78ba      	ldrb	r2, [r7, #2]
 80052b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052c8:	78bb      	ldrb	r3, [r7, #2]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d102      	bne.n	80052d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_PCD_EP_Open+0xaa>
 80052de:	2302      	movs	r3, #2
 80052e0:	e00e      	b.n	8005300 <HAL_PCD_EP_Open+0xc8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f003 fbd7 	bl	8008aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80052fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005318:	2b00      	cmp	r3, #0
 800531a:	da0f      	bge.n	800533c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	f003 020f 	and.w	r2, r3, #15
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	3338      	adds	r3, #56	; 0x38
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	4413      	add	r3, r2
 8005330:	3304      	adds	r3, #4
 8005332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	705a      	strb	r2, [r3, #1]
 800533a:	e00f      	b.n	800535c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 020f 	and.w	r2, r3, #15
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	3304      	adds	r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_PCD_EP_Close+0x6e>
 8005372:	2302      	movs	r3, #2
 8005374:	e00e      	b.n	8005394 <HAL_PCD_EP_Close+0x8c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	4618      	mov	r0, r3
 8005386:	f003 fc15 	bl	8008bb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	460b      	mov	r3, r1
 80053aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ac:	7afb      	ldrb	r3, [r7, #11]
 80053ae:	f003 020f 	and.w	r2, r3, #15
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	3304      	adds	r3, #4
 80053c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2200      	movs	r2, #0
 80053dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d102      	bne.n	80053f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053f8:	7afb      	ldrb	r3, [r7, #11]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	6979      	ldr	r1, [r7, #20]
 8005410:	f003 fef0 	bl	80091f4 <USB_EP0StartXfer>
 8005414:	e008      	b.n	8005428 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	f003 fca2 	bl	8008d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	460b      	mov	r3, r1
 8005440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	3338      	adds	r3, #56	; 0x38
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2201      	movs	r2, #1
 8005470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005472:	7afb      	ldrb	r3, [r7, #11]
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	b2da      	uxtb	r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	f003 fea6 	bl	80091f4 <USB_EP0StartXfer>
 80054a8:	e008      	b.n	80054bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	f003 fc58 	bl	8008d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d901      	bls.n	80054e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e050      	b.n	8005586 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	da0f      	bge.n	800550c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	f003 020f 	and.w	r2, r3, #15
 80054f2:	4613      	mov	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	3338      	adds	r3, #56	; 0x38
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	705a      	strb	r2, [r3, #1]
 800550a:	e00d      	b.n	8005528 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	4613      	mov	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4413      	add	r3, r2
 800551e:	3304      	adds	r3, #4
 8005520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_PCD_EP_SetStall+0x82>
 8005544:	2302      	movs	r3, #2
 8005546:	e01e      	b.n	8005586 <HAL_PCD_EP_SetStall+0xc0>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68f9      	ldr	r1, [r7, #12]
 8005556:	4618      	mov	r0, r3
 8005558:	f003 fffd 	bl	8009556 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	b2d9      	uxtb	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005576:	461a      	mov	r2, r3
 8005578:	f004 f9ee 	bl	8009958 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	f003 020f 	and.w	r2, r3, #15
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d901      	bls.n	80055ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e042      	b.n	8005632 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da0f      	bge.n	80055d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	3338      	adds	r3, #56	; 0x38
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	3304      	adds	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	705a      	strb	r2, [r3, #1]
 80055d2:	e00f      	b.n	80055f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	3304      	adds	r3, #4
 80055ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_PCD_EP_ClrStall+0x86>
 8005610:	2302      	movs	r3, #2
 8005612:	e00e      	b.n	8005632 <HAL_PCD_EP_ClrStall+0xa4>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68f9      	ldr	r1, [r7, #12]
 8005622:	4618      	mov	r0, r3
 8005624:	f004 f805 	bl	8009632 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08a      	sub	sp, #40	; 0x28
 800563e:	af02      	add	r7, sp, #8
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	3338      	adds	r3, #56	; 0x38
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	3304      	adds	r3, #4
 8005660:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	429a      	cmp	r2, r3
 800566c:	d901      	bls.n	8005672 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e06c      	b.n	800574c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	429a      	cmp	r2, r3
 8005686:	d902      	bls.n	800568e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3303      	adds	r3, #3
 8005692:	089b      	lsrs	r3, r3, #2
 8005694:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005696:	e02b      	b.n	80056f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d902      	bls.n	80056b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	3303      	adds	r3, #3
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68d9      	ldr	r1, [r3, #12]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4603      	mov	r3, r0
 80056d2:	6978      	ldr	r0, [r7, #20]
 80056d4:	f003 fee1 	bl	800949a <USB_WritePacket>

    ep->xfer_buff  += len;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	441a      	add	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	441a      	add	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	429a      	cmp	r2, r3
 8005704:	d809      	bhi.n	800571a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800570e:	429a      	cmp	r2, r3
 8005710:	d203      	bcs.n	800571a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1be      	bne.n	8005698 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	429a      	cmp	r2, r3
 8005724:	d811      	bhi.n	800574a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	2201      	movs	r2, #1
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	43db      	mvns	r3, r3
 8005740:	6939      	ldr	r1, [r7, #16]
 8005742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005746:	4013      	ands	r3, r2
 8005748:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	333c      	adds	r3, #60	; 0x3c
 800576c:	3304      	adds	r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b01      	cmp	r3, #1
 8005788:	f040 80a0 	bne.w	80058cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d015      	beq.n	80057c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4a72      	ldr	r2, [pc, #456]	; (8005964 <PCD_EP_OutXfrComplete_int+0x210>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f240 80dd 	bls.w	800595a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80d7 	beq.w	800595a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	461a      	mov	r2, r3
 80057ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057be:	6093      	str	r3, [r2, #8]
 80057c0:	e0cb      	b.n	800595a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d009      	beq.n	80057e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	2320      	movs	r3, #32
 80057dc:	6093      	str	r3, [r2, #8]
 80057de:	e0bc      	b.n	800595a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 80b7 	bne.w	800595a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4a5d      	ldr	r2, [pc, #372]	; (8005964 <PCD_EP_OutXfrComplete_int+0x210>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d90f      	bls.n	8005814 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	461a      	mov	r2, r3
 800580c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005810:	6093      	str	r3, [r2, #8]
 8005812:	e0a2      	b.n	800595a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005826:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	0159      	lsls	r1, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	440b      	add	r3, r1
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800583a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4403      	add	r3, r0
 800584a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800584e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4613      	mov	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4403      	add	r3, r0
 8005872:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4419      	add	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	1a9b      	subs	r3, r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4403      	add	r3, r0
 8005888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800588c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d114      	bne.n	80058be <PCD_EP_OutXfrComplete_int+0x16a>
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058b6:	461a      	mov	r2, r3
 80058b8:	2101      	movs	r1, #1
 80058ba:	f004 f84d 	bl	8009958 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f008 fbef 	bl	800e0a8 <HAL_PCD_DataOutStageCallback>
 80058ca:	e046      	b.n	800595a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a26      	ldr	r2, [pc, #152]	; (8005968 <PCD_EP_OutXfrComplete_int+0x214>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d124      	bne.n	800591e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	461a      	mov	r2, r3
 80058ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f0:	6093      	str	r3, [r2, #8]
 80058f2:	e032      	b.n	800595a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	2320      	movs	r3, #32
 800590e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f008 fbc6 	bl	800e0a8 <HAL_PCD_DataOutStageCallback>
 800591c:	e01d      	b.n	800595a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d114      	bne.n	800594e <PCD_EP_OutXfrComplete_int+0x1fa>
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	4613      	mov	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d108      	bne.n	800594e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005946:	461a      	mov	r2, r3
 8005948:	2100      	movs	r1, #0
 800594a:	f004 f805 	bl	8009958 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f008 fba7 	bl	800e0a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	4f54300a 	.word	0x4f54300a
 8005968:	4f54310a 	.word	0x4f54310a

0800596c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	333c      	adds	r3, #60	; 0x3c
 8005984:	3304      	adds	r3, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a15      	ldr	r2, [pc, #84]	; (80059f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d90e      	bls.n	80059c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	461a      	mov	r2, r3
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f008 fb5f 	bl	800e084 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d90c      	bls.n	80059e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d108      	bne.n	80059e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059e0:	461a      	mov	r2, r3
 80059e2:	2101      	movs	r1, #1
 80059e4:	f003 ffb8 	bl	8009958 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	4f54300a 	.word	0x4f54300a

080059f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
 8005a04:	4613      	mov	r3, r2
 8005a06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a16:	883b      	ldrh	r3, [r7, #0]
 8005a18:	0419      	lsls	r1, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28
 8005a24:	e028      	b.n	8005a78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a34:	2300      	movs	r3, #0
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e00d      	b.n	8005a56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	3340      	adds	r3, #64	; 0x40
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	3301      	adds	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
 8005a56:	7bfa      	ldrb	r2, [r7, #15]
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d3ec      	bcc.n	8005a3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a60:	883b      	ldrh	r3, [r7, #0]
 8005a62:	0418      	lsls	r0, r3, #16
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6819      	ldr	r1, [r3, #0]
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	4302      	orrs	r2, r0
 8005a70:	3340      	adds	r3, #64	; 0x40
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ada:	f043 0303 	orr.w	r3, r3, #3
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0cc      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b68      	ldr	r3, [pc, #416]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 030f 	and.w	r3, r3, #15
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d90c      	bls.n	8005b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b12:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b63      	ldr	r3, [pc, #396]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0b8      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d020      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b44:	4b59      	ldr	r3, [pc, #356]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4a58      	ldr	r2, [pc, #352]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b5c:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	4a52      	ldr	r2, [pc, #328]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b68:	4b50      	ldr	r3, [pc, #320]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	494d      	ldr	r1, [pc, #308]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d044      	beq.n	8005c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d119      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e07f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d003      	beq.n	8005bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bae:	4b3f      	ldr	r3, [pc, #252]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e06f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbe:	4b3b      	ldr	r3, [pc, #236]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e067      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bce:	4b37      	ldr	r3, [pc, #220]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f023 0203 	bic.w	r2, r3, #3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4934      	ldr	r1, [pc, #208]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be0:	f7fd fe9c 	bl	800391c <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005be6:	e00a      	b.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be8:	f7fd fe98 	bl	800391c <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e04f      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 020c 	and.w	r2, r3, #12
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1eb      	bne.n	8005be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d20c      	bcs.n	8005c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b22      	ldr	r3, [pc, #136]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e032      	b.n	8005c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c44:	4b19      	ldr	r3, [pc, #100]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4916      	ldr	r1, [pc, #88]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0308 	and.w	r3, r3, #8
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d009      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	490e      	ldr	r1, [pc, #56]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c76:	f000 fbb1 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	490a      	ldr	r1, [pc, #40]	; (8005cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c88:	5ccb      	ldrb	r3, [r1, r3]
 8005c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fc fdde 	bl	8002858 <HAL_InitTick>

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023c00 	.word	0x40023c00
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	0801666c 	.word	0x0801666c
 8005cb4:	20000000 	.word	0x20000000
 8005cb8:	20000024 	.word	0x20000024

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000000 	.word	0x20000000

08005cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cd8:	f7ff fff0 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	0a9b      	lsrs	r3, r3, #10
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	4903      	ldr	r1, [pc, #12]	; (8005cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	0801667c 	.word	0x0801667c

08005cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d00:	f7ff ffdc 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0b5b      	lsrs	r3, r3, #13
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	4903      	ldr	r1, [pc, #12]	; (8005d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	0801667c 	.word	0x0801667c

08005d24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	220f      	movs	r2, #15
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d34:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0203 	and.w	r2, r3, #3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <HAL_RCC_GetClockConfig+0x5c>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	08db      	lsrs	r3, r3, #3
 8005d5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <HAL_RCC_GetClockConfig+0x60>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 020f 	and.w	r2, r3, #15
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800
 8005d84:	40023c00 	.word	0x40023c00

08005d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08c      	sub	sp, #48	; 0x30
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d010      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005dc0:	4b6f      	ldr	r3, [pc, #444]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	496c      	ldr	r1, [pc, #432]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8005dde:	2301      	movs	r3, #1
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d010      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005dee:	4b64      	ldr	r3, [pc, #400]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	4960      	ldr	r1, [pc, #384]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d017      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1c:	4b58      	ldr	r3, [pc, #352]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	4955      	ldr	r1, [pc, #340]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e58:	4b49      	ldr	r3, [pc, #292]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	4946      	ldr	r1, [pc, #280]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e76:	d101      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0320 	and.w	r3, r3, #32
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 808a 	beq.w	8005faa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	4b39      	ldr	r3, [pc, #228]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	4a38      	ldr	r2, [pc, #224]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea6:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eb2:	4b34      	ldr	r3, [pc, #208]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ebe:	f7fd fd2d 	bl	800391c <HAL_GetTick>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd fd29 	bl	800391c <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e278      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed8:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ee4:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02f      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d028      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f02:	4b1f      	ldr	r3, [pc, #124]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f0c:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f1e:	4b18      	ldr	r3, [pc, #96]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d114      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fd fcf7 	bl	800391c <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f32:	f7fd fcf3 	bl	800391c <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e240      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f48:	4b0d      	ldr	r3, [pc, #52]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0ee      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f60:	d114      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	4902      	ldr	r1, [pc, #8]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]
 8005f7c:	e00c      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40007000 	.word	0x40007000
 8005f88:	42470e40 	.word	0x42470e40
 8005f8c:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4a49      	ldr	r2, [pc, #292]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f96:	6093      	str	r3, [r2, #8]
 8005f98:	4b47      	ldr	r3, [pc, #284]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005f9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa4:	4944      	ldr	r1, [pc, #272]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005fbe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005fcc:	4b3a      	ldr	r3, [pc, #232]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fda:	4937      	ldr	r1, [pc, #220]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fee:	4b32      	ldr	r3, [pc, #200]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffc:	492e      	ldr	r1, [pc, #184]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d011      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006010:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006016:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	4926      	ldr	r1, [pc, #152]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800602e:	d101      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006030:	2301      	movs	r3, #1
 8006032:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006040:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	491a      	ldr	r1, [pc, #104]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605e:	2b00      	cmp	r3, #0
 8006060:	d011      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006068:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	4911      	ldr	r1, [pc, #68]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006080:	d101      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006082:	2301      	movs	r3, #1
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d005      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006094:	f040 80ff 	bne.w	8006296 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006098:	4b09      	ldr	r3, [pc, #36]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800609e:	f7fd fc3d 	bl	800391c <HAL_GetTick>
 80060a2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a4:	e00e      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060a6:	f7fd fc39 	bl	800391c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d907      	bls.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e188      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80060b8:	40023800 	.word	0x40023800
 80060bc:	424711e0 	.word	0x424711e0
 80060c0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060c4:	4b7e      	ldr	r3, [pc, #504]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ea      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d028      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d124      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80060f8:	4b71      	ldr	r3, [pc, #452]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	3301      	adds	r3, #1
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800610a:	4b6d      	ldr	r3, [pc, #436]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800610c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006110:	0e1b      	lsrs	r3, r3, #24
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	431a      	orrs	r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
 800612c:	431a      	orrs	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	071b      	lsls	r3, r3, #28
 800613a:	4961      	ldr	r1, [pc, #388]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d004      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006160:	2b00      	cmp	r3, #0
 8006162:	d035      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800616c:	d130      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800616e:	4b54      	ldr	r3, [pc, #336]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	3301      	adds	r3, #1
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006180:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	019b      	lsls	r3, r3, #6
 8006198:	431a      	orrs	r2, r3
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	3b01      	subs	r3, #1
 80061a0:	041b      	lsls	r3, r3, #16
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	061b      	lsls	r3, r3, #24
 80061aa:	431a      	orrs	r2, r3
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	071b      	lsls	r3, r3, #28
 80061b0:	4943      	ldr	r1, [pc, #268]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061b8:	4b41      	ldr	r3, [pc, #260]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061be:	f023 021f 	bic.w	r2, r3, #31
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	3b01      	subs	r3, #1
 80061c8:	493d      	ldr	r1, [pc, #244]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d029      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e4:	d124      	bne.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	3301      	adds	r3, #1
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061f8:	4b31      	ldr	r3, [pc, #196]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	019b      	lsls	r3, r3, #6
 8006210:	431a      	orrs	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	3b01      	subs	r3, #1
 800621a:	041b      	lsls	r3, r3, #16
 800621c:	431a      	orrs	r2, r3
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	061b      	lsls	r3, r3, #24
 8006222:	431a      	orrs	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	071b      	lsls	r3, r3, #28
 8006228:	4925      	ldr	r1, [pc, #148]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006238:	2b00      	cmp	r3, #0
 800623a:	d016      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	3b01      	subs	r3, #1
 8006250:	041b      	lsls	r3, r3, #16
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	061b      	lsls	r3, r3, #24
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	071b      	lsls	r3, r3, #28
 8006262:	4917      	ldr	r1, [pc, #92]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006264:	4313      	orrs	r3, r2
 8006266:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800626a:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006270:	f7fd fb54 	bl	800391c <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006278:	f7fd fb50 	bl	800391c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e09f      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	2b01      	cmp	r3, #1
 800629a:	f040 8095 	bne.w	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800629e:	4b0a      	ldr	r3, [pc, #40]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062a4:	f7fd fb3a 	bl	800391c <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062aa:	e00f      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80062ac:	f7fd fb36 	bl	800391c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d908      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e085      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80062be:	bf00      	nop
 80062c0:	40023800 	.word	0x40023800
 80062c4:	42470068 	.word	0x42470068
 80062c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d8:	d0e8      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0304 	and.w	r3, r3, #4
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02b      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d127      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006302:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	3301      	adds	r3, #1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699a      	ldr	r2, [r3, #24]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69db      	ldr	r3, [r3, #28]
 800631c:	019b      	lsls	r3, r3, #6
 800631e:	431a      	orrs	r2, r3
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	085b      	lsrs	r3, r3, #1
 8006324:	3b01      	subs	r3, #1
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	4928      	ldr	r1, [pc, #160]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006338:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800633a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800633e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006346:	3b01      	subs	r3, #1
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	4922      	ldr	r1, [pc, #136]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01d      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006366:	d118      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006368:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	0e1b      	lsrs	r3, r3, #24
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	019b      	lsls	r3, r3, #6
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	4910      	ldr	r1, [pc, #64]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800639a:	4b0f      	ldr	r3, [pc, #60]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063a0:	f7fd fabc 	bl	800391c <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80063a8:	f7fd fab8 	bl	800391c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e007      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c6:	d1ef      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3730      	adds	r7, #48	; 0x30
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	40023800 	.word	0x40023800
 80063d8:	42470070 	.word	0x42470070

080063dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e0:	b088      	sub	sp, #32
 80063e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f8:	4bce      	ldr	r3, [pc, #824]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b0c      	cmp	r3, #12
 8006402:	f200 818d 	bhi.w	8006720 <HAL_RCC_GetSysClockFreq+0x344>
 8006406:	a201      	add	r2, pc, #4	; (adr r2, 800640c <HAL_RCC_GetSysClockFreq+0x30>)
 8006408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640c:	08006441 	.word	0x08006441
 8006410:	08006721 	.word	0x08006721
 8006414:	08006721 	.word	0x08006721
 8006418:	08006721 	.word	0x08006721
 800641c:	08006447 	.word	0x08006447
 8006420:	08006721 	.word	0x08006721
 8006424:	08006721 	.word	0x08006721
 8006428:	08006721 	.word	0x08006721
 800642c:	0800644d 	.word	0x0800644d
 8006430:	08006721 	.word	0x08006721
 8006434:	08006721 	.word	0x08006721
 8006438:	08006721 	.word	0x08006721
 800643c:	080065c1 	.word	0x080065c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006440:	4bbd      	ldr	r3, [pc, #756]	; (8006738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006442:	61bb      	str	r3, [r7, #24]
       break;
 8006444:	e16f      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006446:	4bbd      	ldr	r3, [pc, #756]	; (800673c <HAL_RCC_GetSysClockFreq+0x360>)
 8006448:	61bb      	str	r3, [r7, #24]
      break;
 800644a:	e16c      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800644c:	4bb9      	ldr	r3, [pc, #740]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006454:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006456:	4bb7      	ldr	r3, [pc, #732]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d053      	beq.n	800650a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006462:	4bb4      	ldr	r3, [pc, #720]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	ea02 0400 	and.w	r4, r2, r0
 800647a:	603c      	str	r4, [r7, #0]
 800647c:	400b      	ands	r3, r1
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	014b      	lsls	r3, r1, #5
 8006492:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006496:	0142      	lsls	r2, r0, #5
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	4623      	mov	r3, r4
 800649e:	1ac0      	subs	r0, r0, r3
 80064a0:	462b      	mov	r3, r5
 80064a2:	eb61 0103 	sbc.w	r1, r1, r3
 80064a6:	f04f 0200 	mov.w	r2, #0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	018b      	lsls	r3, r1, #6
 80064b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064b4:	0182      	lsls	r2, r0, #6
 80064b6:	1a12      	subs	r2, r2, r0
 80064b8:	eb63 0301 	sbc.w	r3, r3, r1
 80064bc:	f04f 0000 	mov.w	r0, #0
 80064c0:	f04f 0100 	mov.w	r1, #0
 80064c4:	00d9      	lsls	r1, r3, #3
 80064c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ca:	00d0      	lsls	r0, r2, #3
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4621      	mov	r1, r4
 80064d2:	1852      	adds	r2, r2, r1
 80064d4:	4629      	mov	r1, r5
 80064d6:	eb43 0101 	adc.w	r1, r3, r1
 80064da:	460b      	mov	r3, r1
 80064dc:	f04f 0000 	mov.w	r0, #0
 80064e0:	f04f 0100 	mov.w	r1, #0
 80064e4:	0259      	lsls	r1, r3, #9
 80064e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80064ea:	0250      	lsls	r0, r2, #9
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	f7fa fbae 	bl	8000c5c <__aeabi_uldivmod>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	4613      	mov	r3, r2
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	e04c      	b.n	80065a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800650a:	4b8a      	ldr	r3, [pc, #552]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	099b      	lsrs	r3, r3, #6
 8006510:	461a      	mov	r2, r3
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800651a:	f04f 0100 	mov.w	r1, #0
 800651e:	ea02 0a00 	and.w	sl, r2, r0
 8006522:	ea03 0b01 	and.w	fp, r3, r1
 8006526:	4650      	mov	r0, sl
 8006528:	4659      	mov	r1, fp
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	014b      	lsls	r3, r1, #5
 8006534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006538:	0142      	lsls	r2, r0, #5
 800653a:	4610      	mov	r0, r2
 800653c:	4619      	mov	r1, r3
 800653e:	ebb0 000a 	subs.w	r0, r0, sl
 8006542:	eb61 010b 	sbc.w	r1, r1, fp
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	018b      	lsls	r3, r1, #6
 8006550:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006554:	0182      	lsls	r2, r0, #6
 8006556:	1a12      	subs	r2, r2, r0
 8006558:	eb63 0301 	sbc.w	r3, r3, r1
 800655c:	f04f 0000 	mov.w	r0, #0
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	00d9      	lsls	r1, r3, #3
 8006566:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800656a:	00d0      	lsls	r0, r2, #3
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	eb12 020a 	adds.w	r2, r2, sl
 8006574:	eb43 030b 	adc.w	r3, r3, fp
 8006578:	f04f 0000 	mov.w	r0, #0
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	0299      	lsls	r1, r3, #10
 8006582:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006586:	0290      	lsls	r0, r2, #10
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	461a      	mov	r2, r3
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	f7fa fb60 	bl	8000c5c <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4613      	mov	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065a4:	4b63      	ldr	r3, [pc, #396]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	0c1b      	lsrs	r3, r3, #16
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	3301      	adds	r3, #1
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065bc:	61bb      	str	r3, [r7, #24]
      break;
 80065be:	e0b2      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065c0:	4b5c      	ldr	r3, [pc, #368]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ca:	4b5a      	ldr	r3, [pc, #360]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d04d      	beq.n	8006672 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d6:	4b57      	ldr	r3, [pc, #348]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	461a      	mov	r2, r3
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065e6:	f04f 0100 	mov.w	r1, #0
 80065ea:	ea02 0800 	and.w	r8, r2, r0
 80065ee:	ea03 0901 	and.w	r9, r3, r1
 80065f2:	4640      	mov	r0, r8
 80065f4:	4649      	mov	r1, r9
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	014b      	lsls	r3, r1, #5
 8006600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006604:	0142      	lsls	r2, r0, #5
 8006606:	4610      	mov	r0, r2
 8006608:	4619      	mov	r1, r3
 800660a:	ebb0 0008 	subs.w	r0, r0, r8
 800660e:	eb61 0109 	sbc.w	r1, r1, r9
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	018b      	lsls	r3, r1, #6
 800661c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006620:	0182      	lsls	r2, r0, #6
 8006622:	1a12      	subs	r2, r2, r0
 8006624:	eb63 0301 	sbc.w	r3, r3, r1
 8006628:	f04f 0000 	mov.w	r0, #0
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	00d9      	lsls	r1, r3, #3
 8006632:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006636:	00d0      	lsls	r0, r2, #3
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	eb12 0208 	adds.w	r2, r2, r8
 8006640:	eb43 0309 	adc.w	r3, r3, r9
 8006644:	f04f 0000 	mov.w	r0, #0
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	0259      	lsls	r1, r3, #9
 800664e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006652:	0250      	lsls	r0, r2, #9
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	461a      	mov	r2, r3
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	f7fa fafa 	bl	8000c5c <__aeabi_uldivmod>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4613      	mov	r3, r2
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e04a      	b.n	8006708 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006672:	4b30      	ldr	r3, [pc, #192]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	461a      	mov	r2, r3
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006682:	f04f 0100 	mov.w	r1, #0
 8006686:	ea02 0400 	and.w	r4, r2, r0
 800668a:	ea03 0501 	and.w	r5, r3, r1
 800668e:	4620      	mov	r0, r4
 8006690:	4629      	mov	r1, r5
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	014b      	lsls	r3, r1, #5
 800669c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80066a0:	0142      	lsls	r2, r0, #5
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	1b00      	subs	r0, r0, r4
 80066a8:	eb61 0105 	sbc.w	r1, r1, r5
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	018b      	lsls	r3, r1, #6
 80066b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066ba:	0182      	lsls	r2, r0, #6
 80066bc:	1a12      	subs	r2, r2, r0
 80066be:	eb63 0301 	sbc.w	r3, r3, r1
 80066c2:	f04f 0000 	mov.w	r0, #0
 80066c6:	f04f 0100 	mov.w	r1, #0
 80066ca:	00d9      	lsls	r1, r3, #3
 80066cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066d0:	00d0      	lsls	r0, r2, #3
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	1912      	adds	r2, r2, r4
 80066d8:	eb45 0303 	adc.w	r3, r5, r3
 80066dc:	f04f 0000 	mov.w	r0, #0
 80066e0:	f04f 0100 	mov.w	r1, #0
 80066e4:	0299      	lsls	r1, r3, #10
 80066e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80066ea:	0290      	lsls	r0, r2, #10
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4610      	mov	r0, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	f7fa faae 	bl	8000c5c <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4613      	mov	r3, r2
 8006706:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <HAL_RCC_GetSysClockFreq+0x358>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	0f1b      	lsrs	r3, r3, #28
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	61bb      	str	r3, [r7, #24]
      break;
 800671e:	e002      	b.n	8006726 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006722:	61bb      	str	r3, [r7, #24]
      break;
 8006724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006726:	69bb      	ldr	r3, [r7, #24]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3720      	adds	r7, #32
 800672c:	46bd      	mov	sp, r7
 800672e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006732:	bf00      	nop
 8006734:	40023800 	.word	0x40023800
 8006738:	00f42400 	.word	0x00f42400
 800673c:	007a1200 	.word	0x007a1200

08006740 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e28d      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8083 	beq.w	8006866 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006760:	4b94      	ldr	r3, [pc, #592]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f003 030c 	and.w	r3, r3, #12
 8006768:	2b04      	cmp	r3, #4
 800676a:	d019      	beq.n	80067a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800676c:	4b91      	ldr	r3, [pc, #580]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006774:	2b08      	cmp	r3, #8
 8006776:	d106      	bne.n	8006786 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006778:	4b8e      	ldr	r3, [pc, #568]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006784:	d00c      	beq.n	80067a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006786:	4b8b      	ldr	r3, [pc, #556]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800678e:	2b0c      	cmp	r3, #12
 8006790:	d112      	bne.n	80067b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006792:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800679e:	d10b      	bne.n	80067b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a0:	4b84      	ldr	r3, [pc, #528]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d05b      	beq.n	8006864 <HAL_RCC_OscConfig+0x124>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d157      	bne.n	8006864 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e25a      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d106      	bne.n	80067d0 <HAL_RCC_OscConfig+0x90>
 80067c2:	4b7c      	ldr	r3, [pc, #496]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a7b      	ldr	r2, [pc, #492]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e01d      	b.n	800680c <HAL_RCC_OscConfig+0xcc>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0xb4>
 80067da:	4b76      	ldr	r3, [pc, #472]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a75      	ldr	r2, [pc, #468]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b73      	ldr	r3, [pc, #460]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a72      	ldr	r2, [pc, #456]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0xcc>
 80067f4:	4b6f      	ldr	r3, [pc, #444]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a6e      	ldr	r2, [pc, #440]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80067fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b6c      	ldr	r3, [pc, #432]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6b      	ldr	r2, [pc, #428]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006814:	f7fd f882 	bl	800391c <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800681c:	f7fd f87e 	bl	800391c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	; 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e21f      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800682e:	4b61      	ldr	r3, [pc, #388]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0xdc>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fd f86e 	bl	800391c <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006844:	f7fd f86a 	bl	800391c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	; 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e20b      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006856:	4b57      	ldr	r3, [pc, #348]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x104>
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d06f      	beq.n	8006952 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006872:	4b50      	ldr	r3, [pc, #320]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b00      	cmp	r3, #0
 800687c:	d017      	beq.n	80068ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800687e:	4b4d      	ldr	r3, [pc, #308]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006886:	2b08      	cmp	r3, #8
 8006888:	d105      	bne.n	8006896 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800688a:	4b4a      	ldr	r3, [pc, #296]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006896:	4b47      	ldr	r3, [pc, #284]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800689e:	2b0c      	cmp	r3, #12
 80068a0:	d11c      	bne.n	80068dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068a2:	4b44      	ldr	r3, [pc, #272]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d116      	bne.n	80068dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ae:	4b41      	ldr	r3, [pc, #260]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_RCC_OscConfig+0x186>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e1d3      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c6:	4b3b      	ldr	r3, [pc, #236]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4937      	ldr	r1, [pc, #220]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	e03a      	b.n	8006952 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068e4:	4b34      	ldr	r3, [pc, #208]	; (80069b8 <HAL_RCC_OscConfig+0x278>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ea:	f7fd f817 	bl	800391c <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068f2:	f7fd f813 	bl	800391c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e1b4      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006904:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4925      	ldr	r1, [pc, #148]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
 8006924:	e015      	b.n	8006952 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006926:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <HAL_RCC_OscConfig+0x278>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc fff6 	bl	800391c <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006934:	f7fc fff2 	bl	800391c <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e193      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006946:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d036      	beq.n	80069cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006966:	4b15      	ldr	r3, [pc, #84]	; (80069bc <HAL_RCC_OscConfig+0x27c>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fc ffd6 	bl	800391c <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006974:	f7fc ffd2 	bl	800391c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e173      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_RCC_OscConfig+0x274>)
 8006988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x234>
 8006992:	e01b      	b.n	80069cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006994:	4b09      	ldr	r3, [pc, #36]	; (80069bc <HAL_RCC_OscConfig+0x27c>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699a:	f7fc ffbf 	bl	800391c <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a0:	e00e      	b.n	80069c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069a2:	f7fc ffbb 	bl	800391c <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d907      	bls.n	80069c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e15c      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
 80069b4:	40023800 	.word	0x40023800
 80069b8:	42470000 	.word	0x42470000
 80069bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c0:	4b8a      	ldr	r3, [pc, #552]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 80069c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1ea      	bne.n	80069a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8097 	beq.w	8006b08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069de:	4b83      	ldr	r3, [pc, #524]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10f      	bne.n	8006a0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ea:	2300      	movs	r3, #0
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	4a7e      	ldr	r2, [pc, #504]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 80069f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f8:	6413      	str	r3, [r2, #64]	; 0x40
 80069fa:	4b7c      	ldr	r3, [pc, #496]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a02:	60bb      	str	r3, [r7, #8]
 8006a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0a:	4b79      	ldr	r3, [pc, #484]	; (8006bf0 <HAL_RCC_OscConfig+0x4b0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d118      	bne.n	8006a48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a16:	4b76      	ldr	r3, [pc, #472]	; (8006bf0 <HAL_RCC_OscConfig+0x4b0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a75      	ldr	r2, [pc, #468]	; (8006bf0 <HAL_RCC_OscConfig+0x4b0>)
 8006a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a22:	f7fc ff7b 	bl	800391c <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2a:	f7fc ff77 	bl	800391c <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e118      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3c:	4b6c      	ldr	r3, [pc, #432]	; (8006bf0 <HAL_RCC_OscConfig+0x4b0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCC_OscConfig+0x31e>
 8006a50:	4b66      	ldr	r3, [pc, #408]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a54:	4a65      	ldr	r2, [pc, #404]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a5c:	e01c      	b.n	8006a98 <HAL_RCC_OscConfig+0x358>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d10c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x340>
 8006a66:	4b61      	ldr	r3, [pc, #388]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	4a60      	ldr	r2, [pc, #384]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	6713      	str	r3, [r2, #112]	; 0x70
 8006a72:	4b5e      	ldr	r3, [pc, #376]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	4a5d      	ldr	r2, [pc, #372]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a78:	f043 0301 	orr.w	r3, r3, #1
 8006a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7e:	e00b      	b.n	8006a98 <HAL_RCC_OscConfig+0x358>
 8006a80:	4b5a      	ldr	r3, [pc, #360]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	4a59      	ldr	r2, [pc, #356]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a8c:	4b57      	ldr	r3, [pc, #348]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	4a56      	ldr	r2, [pc, #344]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006a92:	f023 0304 	bic.w	r3, r3, #4
 8006a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d015      	beq.n	8006acc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa0:	f7fc ff3c 	bl	800391c <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fc ff38 	bl	800391c <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e0d7      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	4b4b      	ldr	r3, [pc, #300]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0ee      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x368>
 8006aca:	e014      	b.n	8006af6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006acc:	f7fc ff26 	bl	800391c <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ad4:	f7fc ff22 	bl	800391c <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e0c1      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aea:	4b40      	ldr	r3, [pc, #256]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1ee      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006afc:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	4a3a      	ldr	r2, [pc, #232]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80ad 	beq.w	8006c6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b12:	4b36      	ldr	r3, [pc, #216]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d060      	beq.n	8006be0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d145      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b26:	4b33      	ldr	r3, [pc, #204]	; (8006bf4 <HAL_RCC_OscConfig+0x4b4>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2c:	f7fc fef6 	bl	800391c <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b34:	f7fc fef2 	bl	800391c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e093      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	019b      	lsls	r3, r3, #6
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	061b      	lsls	r3, r3, #24
 8006b76:	431a      	orrs	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	071b      	lsls	r3, r3, #28
 8006b7e:	491b      	ldr	r1, [pc, #108]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <HAL_RCC_OscConfig+0x4b4>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8a:	f7fc fec7 	bl	800391c <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b92:	f7fc fec3 	bl	800391c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e064      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba4:	4b11      	ldr	r3, [pc, #68]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f0      	beq.n	8006b92 <HAL_RCC_OscConfig+0x452>
 8006bb0:	e05c      	b.n	8006c6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb2:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <HAL_RCC_OscConfig+0x4b4>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fc feb0 	bl	800391c <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc0:	f7fc feac 	bl	800391c <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e04d      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <HAL_RCC_OscConfig+0x4ac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f0      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x480>
 8006bde:	e045      	b.n	8006c6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d107      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e040      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40007000 	.word	0x40007000
 8006bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bf8:	4b1f      	ldr	r3, [pc, #124]	; (8006c78 <HAL_RCC_OscConfig+0x538>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d030      	beq.n	8006c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d129      	bne.n	8006c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d122      	bne.n	8006c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c28:	4013      	ands	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d119      	bne.n	8006c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	3b01      	subs	r3, #1
 8006c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d10f      	bne.n	8006c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e000      	b.n	8006c6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40023800 	.word	0x40023800

08006c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e07b      	b.n	8006d86 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d108      	bne.n	8006ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c9e:	d009      	beq.n	8006cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	61da      	str	r2, [r3, #28]
 8006ca6:	e005      	b.n	8006cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb fd0a 	bl	80026e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d38:	ea42 0103 	orr.w	r1, r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	0c1b      	lsrs	r3, r3, #16
 8006d52:	f003 0104 	and.w	r1, r3, #4
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	f003 0210 	and.w	r2, r3, #16
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d74:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b088      	sub	sp, #32
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	60f8      	str	r0, [r7, #12]
 8006d96:	60b9      	str	r1, [r7, #8]
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_SPI_Transmit+0x22>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e126      	b.n	8006ffe <HAL_SPI_Transmit+0x270>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006db8:	f7fc fdb0 	bl	800391c <HAL_GetTick>
 8006dbc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d002      	beq.n	8006dd4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dd2:	e10b      	b.n	8006fec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <HAL_SPI_Transmit+0x52>
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d102      	bne.n	8006de6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006de4:	e102      	b.n	8006fec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2203      	movs	r2, #3
 8006dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	88fa      	ldrh	r2, [r7, #6]
 8006dfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	88fa      	ldrh	r2, [r7, #6]
 8006e04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2c:	d10f      	bne.n	8006e4e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b40      	cmp	r3, #64	; 0x40
 8006e5a:	d007      	beq.n	8006e6c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e74:	d14b      	bne.n	8006f0e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Transmit+0xf6>
 8006e7e:	8afb      	ldrh	r3, [r7, #22]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d13e      	bne.n	8006f02 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	881a      	ldrh	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	1c9a      	adds	r2, r3, #2
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ea8:	e02b      	b.n	8006f02 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d112      	bne.n	8006ede <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	881a      	ldrh	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	1c9a      	adds	r2, r3, #2
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	86da      	strh	r2, [r3, #54]	; 0x36
 8006edc:	e011      	b.n	8006f02 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ede:	f7fc fd1d 	bl	800391c <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d803      	bhi.n	8006ef6 <HAL_SPI_Transmit+0x168>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_Transmit+0x16e>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f00:	e074      	b.n	8006fec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1ce      	bne.n	8006eaa <HAL_SPI_Transmit+0x11c>
 8006f0c:	e04c      	b.n	8006fa8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_SPI_Transmit+0x18e>
 8006f16:	8afb      	ldrh	r3, [r7, #22]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d140      	bne.n	8006f9e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f42:	e02c      	b.n	8006f9e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d113      	bne.n	8006f7a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	7812      	ldrb	r2, [r2, #0]
 8006f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f78:	e011      	b.n	8006f9e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f7a:	f7fc fccf 	bl	800391c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d803      	bhi.n	8006f92 <HAL_SPI_Transmit+0x204>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d102      	bne.n	8006f98 <HAL_SPI_Transmit+0x20a>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f9c:	e026      	b.n	8006fec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1cd      	bne.n	8006f44 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fbcb 	bl	8007748 <SPI_EndRxTxTransaction>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e000      	b.n	8006fec <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007022:	d112      	bne.n	800704a <HAL_SPI_Receive+0x44>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10e      	bne.n	800704a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2204      	movs	r2, #4
 8007030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007034:	88fa      	ldrh	r2, [r7, #6]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4613      	mov	r3, r2
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	68b9      	ldr	r1, [r7, #8]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f8f1 	bl	8007228 <HAL_SPI_TransmitReceive>
 8007046:	4603      	mov	r3, r0
 8007048:	e0ea      	b.n	8007220 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_SPI_Receive+0x52>
 8007054:	2302      	movs	r3, #2
 8007056:	e0e3      	b.n	8007220 <HAL_SPI_Receive+0x21a>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007060:	f7fc fc5c 	bl	800391c <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	d002      	beq.n	8007078 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007072:	2302      	movs	r3, #2
 8007074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007076:	e0ca      	b.n	800720e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_SPI_Receive+0x7e>
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007088:	e0c1      	b.n	800720e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2204      	movs	r2, #4
 800708e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	88fa      	ldrh	r2, [r7, #6]
 80070a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	88fa      	ldrh	r2, [r7, #6]
 80070a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070d0:	d10f      	bne.n	80070f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fc:	2b40      	cmp	r3, #64	; 0x40
 80070fe:	d007      	beq.n	8007110 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800710e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d162      	bne.n	80071de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007118:	e02e      	b.n	8007178 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b01      	cmp	r3, #1
 8007126:	d115      	bne.n	8007154 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f103 020c 	add.w	r2, r3, #12
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	7812      	ldrb	r2, [r2, #0]
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007148:	b29b      	uxth	r3, r3
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007152:	e011      	b.n	8007178 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007154:	f7fc fbe2 	bl	800391c <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	429a      	cmp	r2, r3
 8007162:	d803      	bhi.n	800716c <HAL_SPI_Receive+0x166>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d102      	bne.n	8007172 <HAL_SPI_Receive+0x16c>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007176:	e04a      	b.n	800720e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1cb      	bne.n	800711a <HAL_SPI_Receive+0x114>
 8007182:	e031      	b.n	80071e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d113      	bne.n	80071ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	b292      	uxth	r2, r2
 800719e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a4:	1c9a      	adds	r2, r3, #2
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071b8:	e011      	b.n	80071de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ba:	f7fc fbaf 	bl	800391c <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d803      	bhi.n	80071d2 <HAL_SPI_Receive+0x1cc>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d102      	bne.n	80071d8 <HAL_SPI_Receive+0x1d2>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071dc:	e017      	b.n	800720e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1cd      	bne.n	8007184 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fa45 	bl	800767c <SPI_EndRxTransaction>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
 800720a:	e000      	b.n	800720e <HAL_SPI_Receive+0x208>
  }

error :
 800720c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08c      	sub	sp, #48	; 0x30
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007236:	2301      	movs	r3, #1
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26>
 800724a:	2302      	movs	r3, #2
 800724c:	e18a      	b.n	8007564 <HAL_SPI_TransmitReceive+0x33c>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007256:	f7fc fb61 	bl	800391c <HAL_GetTick>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800726c:	887b      	ldrh	r3, [r7, #2]
 800726e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007274:	2b01      	cmp	r3, #1
 8007276:	d00f      	beq.n	8007298 <HAL_SPI_TransmitReceive+0x70>
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727e:	d107      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x68>
 8007288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800728c:	2b04      	cmp	r3, #4
 800728e:	d003      	beq.n	8007298 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007290:	2302      	movs	r3, #2
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007296:	e15b      	b.n	8007550 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <HAL_SPI_TransmitReceive+0x82>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <HAL_SPI_TransmitReceive+0x82>
 80072a4:	887b      	ldrh	r3, [r7, #2]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072b0:	e14e      	b.n	8007550 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d003      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2205      	movs	r2, #5
 80072c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	887a      	ldrh	r2, [r7, #2]
 80072d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	887a      	ldrh	r2, [r7, #2]
 80072dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	887a      	ldrh	r2, [r7, #2]
 80072e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	887a      	ldrh	r2, [r7, #2]
 80072ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	d007      	beq.n	800731a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007322:	d178      	bne.n	8007416 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_SPI_TransmitReceive+0x10a>
 800732c:	8b7b      	ldrh	r3, [r7, #26]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d166      	bne.n	8007400 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007336:	881a      	ldrh	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	1c9a      	adds	r2, r3, #2
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007356:	e053      	b.n	8007400 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b02      	cmp	r3, #2
 8007364:	d11b      	bne.n	800739e <HAL_SPI_TransmitReceive+0x176>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <HAL_SPI_TransmitReceive+0x176>
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	2b01      	cmp	r3, #1
 8007374:	d113      	bne.n	800739e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	881a      	ldrh	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	1c9a      	adds	r2, r3, #2
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29a      	uxth	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d119      	bne.n	80073e0 <HAL_SPI_TransmitReceive+0x1b8>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d014      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	b292      	uxth	r2, r2
 80073c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	1c9a      	adds	r2, r3, #2
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073dc:	2301      	movs	r3, #1
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073e0:	f7fc fa9c 	bl	800391c <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d807      	bhi.n	8007400 <HAL_SPI_TransmitReceive+0x1d8>
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f6:	d003      	beq.n	8007400 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073fe:	e0a7      	b.n	8007550 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1a6      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x130>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800740e:	b29b      	uxth	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1a1      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x130>
 8007414:	e07c      	b.n	8007510 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_TransmitReceive+0x1fc>
 800741e:	8b7b      	ldrh	r3, [r7, #26]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d16b      	bne.n	80074fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	7812      	ldrb	r2, [r2, #0]
 8007430:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800744a:	e057      	b.n	80074fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d11c      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x26c>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d017      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x26c>
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d114      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	7812      	ldrb	r2, [r2, #0]
 8007476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	1c5a      	adds	r2, r3, #1
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d119      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x2ae>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d014      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074d6:	f7fc fa21 	bl	800391c <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d803      	bhi.n	80074ee <HAL_SPI_TransmitReceive+0x2c6>
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d102      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x2cc>
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d103      	bne.n	80074fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074fa:	e029      	b.n	8007550 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007500:	b29b      	uxth	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1a2      	bne.n	800744c <HAL_SPI_TransmitReceive+0x224>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d19d      	bne.n	800744c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f917 	bl	8007748 <SPI_EndRxTxTransaction>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d006      	beq.n	800752e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800752c:	e010      	b.n	8007550 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	e000      	b.n	8007550 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800754e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007564:	4618      	mov	r0, r3
 8007566:	3730      	adds	r7, #48	; 0x30
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	4613      	mov	r3, r2
 800757a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800757c:	f7fc f9ce 	bl	800391c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4413      	add	r3, r2
 800758a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800758c:	f7fc f9c6 	bl	800391c <HAL_GetTick>
 8007590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007592:	4b39      	ldr	r3, [pc, #228]	; (8007678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	015b      	lsls	r3, r3, #5
 8007598:	0d1b      	lsrs	r3, r3, #20
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	fb02 f303 	mul.w	r3, r2, r3
 80075a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075a2:	e054      	b.n	800764e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d050      	beq.n	800764e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075ac:	f7fc f9b6 	bl	800391c <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d902      	bls.n	80075c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d13d      	bne.n	800763e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075da:	d111      	bne.n	8007600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	d004      	beq.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ee:	d107      	bne.n	8007600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007608:	d10f      	bne.n	800762a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e017      	b.n	800766e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3b01      	subs	r3, #1
 800764c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4013      	ands	r3, r2
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	429a      	cmp	r2, r3
 800766a:	d19b      	bne.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000000 	.word	0x20000000

0800767c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007690:	d111      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d004      	beq.n	80076a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a4:	d107      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076be:	d12a      	bne.n	8007716 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c8:	d012      	beq.n	80076f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff49 	bl	800756c <SPI_WaitFlagStateUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02d      	beq.n	800773c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e026      	b.n	800773e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	2101      	movs	r1, #1
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff ff36 	bl	800756c <SPI_WaitFlagStateUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01a      	beq.n	800773c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	f043 0220 	orr.w	r2, r3, #32
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e013      	b.n	800773e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	2101      	movs	r1, #1
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff ff23 	bl	800756c <SPI_WaitFlagStateUntilTimeout>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e000      	b.n	800773e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <SPI_EndRxTxTransaction+0x7c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <SPI_EndRxTxTransaction+0x80>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	0d5b      	lsrs	r3, r3, #21
 8007760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007772:	d112      	bne.n	800779a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fef4 	bl	800756c <SPI_WaitFlagStateUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d016      	beq.n	80077b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	f043 0220 	orr.w	r2, r3, #32
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e00f      	b.n	80077ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d0f2      	beq.n	800779a <SPI_EndRxTxTransaction+0x52>
 80077b4:	e000      	b.n	80077b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80077b6:	bf00      	nop
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000000 	.word	0x20000000
 80077c8:	165e9f81 	.word	0x165e9f81

080077cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e041      	b.n	8007862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fa ffc0 	bl	8002778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f000 f9ce 	bl	8007bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d001      	beq.n	8007884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e04e      	b.n	8007922 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0201 	orr.w	r2, r2, #1
 800789a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a23      	ldr	r2, [pc, #140]	; (8007930 <HAL_TIM_Base_Start_IT+0xc4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d022      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d01d      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1f      	ldr	r2, [pc, #124]	; (8007934 <HAL_TIM_Base_Start_IT+0xc8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d018      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1e      	ldr	r2, [pc, #120]	; (8007938 <HAL_TIM_Base_Start_IT+0xcc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d013      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a1c      	ldr	r2, [pc, #112]	; (800793c <HAL_TIM_Base_Start_IT+0xd0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00e      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <HAL_TIM_Base_Start_IT+0xd4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d009      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a19      	ldr	r2, [pc, #100]	; (8007944 <HAL_TIM_Base_Start_IT+0xd8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_TIM_Base_Start_IT+0x80>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a18      	ldr	r2, [pc, #96]	; (8007948 <HAL_TIM_Base_Start_IT+0xdc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d111      	bne.n	8007910 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d010      	beq.n	8007920 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0201 	orr.w	r2, r2, #1
 800790c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790e:	e007      	b.n	8007920 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f042 0201 	orr.w	r2, r2, #1
 800791e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	40010000 	.word	0x40010000
 8007934:	40000400 	.word	0x40000400
 8007938:	40000800 	.word	0x40000800
 800793c:	40000c00 	.word	0x40000c00
 8007940:	40010400 	.word	0x40010400
 8007944:	40014000 	.word	0x40014000
 8007948:	40001800 	.word	0x40001800

0800794c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b02      	cmp	r3, #2
 8007960:	d122      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b02      	cmp	r3, #2
 800796e:	d11b      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0202 	mvn.w	r2, #2
 8007978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8ee 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 8007994:	e005      	b.n	80079a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 f8e0 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f8f1 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d122      	bne.n	80079fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d11b      	bne.n	80079fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0204 	mvn.w	r2, #4
 80079cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f8c4 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 80079e8:	e005      	b.n	80079f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f8b6 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8c7 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d122      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d11b      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0208 	mvn.w	r2, #8
 8007a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2204      	movs	r2, #4
 8007a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f89a 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f88c 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f89d 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d122      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b10      	cmp	r3, #16
 8007a6a:	d11b      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0210 	mvn.w	r2, #16
 8007a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2208      	movs	r2, #8
 8007a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f870 	bl	8007b70 <HAL_TIM_IC_CaptureCallback>
 8007a90:	e005      	b.n	8007a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f862 	bl	8007b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f873 	bl	8007b84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d10e      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d107      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0201 	mvn.w	r2, #1
 8007ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fa fc08 	bl	80022e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b80      	cmp	r3, #128	; 0x80
 8007adc:	d10e      	bne.n	8007afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae8:	2b80      	cmp	r3, #128	; 0x80
 8007aea:	d107      	bne.n	8007afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f902 	bl	8007d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b40      	cmp	r3, #64	; 0x40
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f838 	bl	8007b98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d10e      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0220 	mvn.w	r2, #32
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8cc 	bl	8007cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a40      	ldr	r2, [pc, #256]	; (8007cc0 <TIM_Base_SetConfig+0x114>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d013      	beq.n	8007bec <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bca:	d00f      	beq.n	8007bec <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a3d      	ldr	r2, [pc, #244]	; (8007cc4 <TIM_Base_SetConfig+0x118>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00b      	beq.n	8007bec <TIM_Base_SetConfig+0x40>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a3c      	ldr	r2, [pc, #240]	; (8007cc8 <TIM_Base_SetConfig+0x11c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a3b      	ldr	r2, [pc, #236]	; (8007ccc <TIM_Base_SetConfig+0x120>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3a      	ldr	r2, [pc, #232]	; (8007cd0 <TIM_Base_SetConfig+0x124>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d108      	bne.n	8007bfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2f      	ldr	r2, [pc, #188]	; (8007cc0 <TIM_Base_SetConfig+0x114>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d02b      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c0c:	d027      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2c      	ldr	r2, [pc, #176]	; (8007cc4 <TIM_Base_SetConfig+0x118>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d023      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2b      	ldr	r2, [pc, #172]	; (8007cc8 <TIM_Base_SetConfig+0x11c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d01f      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a2a      	ldr	r2, [pc, #168]	; (8007ccc <TIM_Base_SetConfig+0x120>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01b      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a29      	ldr	r2, [pc, #164]	; (8007cd0 <TIM_Base_SetConfig+0x124>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d017      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a28      	ldr	r2, [pc, #160]	; (8007cd4 <TIM_Base_SetConfig+0x128>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a27      	ldr	r2, [pc, #156]	; (8007cd8 <TIM_Base_SetConfig+0x12c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00f      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a26      	ldr	r2, [pc, #152]	; (8007cdc <TIM_Base_SetConfig+0x130>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00b      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a25      	ldr	r2, [pc, #148]	; (8007ce0 <TIM_Base_SetConfig+0x134>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d007      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a24      	ldr	r2, [pc, #144]	; (8007ce4 <TIM_Base_SetConfig+0x138>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d003      	beq.n	8007c5e <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a23      	ldr	r2, [pc, #140]	; (8007ce8 <TIM_Base_SetConfig+0x13c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d108      	bne.n	8007c70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a0a      	ldr	r2, [pc, #40]	; (8007cc0 <TIM_Base_SetConfig+0x114>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_Base_SetConfig+0xf8>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a0c      	ldr	r2, [pc, #48]	; (8007cd0 <TIM_Base_SetConfig+0x124>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d103      	bne.n	8007cac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	615a      	str	r2, [r3, #20]
}
 8007cb2:	bf00      	nop
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40010000 	.word	0x40010000
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	40000800 	.word	0x40000800
 8007ccc:	40000c00 	.word	0x40000c00
 8007cd0:	40010400 	.word	0x40010400
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	40014800 	.word	0x40014800
 8007ce0:	40001800 	.word	0x40001800
 8007ce4:	40001c00 	.word	0x40001c00
 8007ce8:	40002000 	.word	0x40002000

08007cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e03f      	b.n	8007da6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fa fd44 	bl	80027c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2224      	movs	r2, #36	; 0x24
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9a7 	bl	80080ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695a      	ldr	r2, [r3, #20]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b08a      	sub	sp, #40	; 0x28
 8007db2:	af02      	add	r7, sp, #8
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	603b      	str	r3, [r7, #0]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d17c      	bne.n	8007ec8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_UART_Transmit+0x2c>
 8007dd4:	88fb      	ldrh	r3, [r7, #6]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e075      	b.n	8007eca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_UART_Transmit+0x3e>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e06e      	b.n	8007eca <HAL_UART_Transmit+0x11c>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2221      	movs	r2, #33	; 0x21
 8007dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e02:	f7fb fd8b 	bl	800391c <HAL_GetTick>
 8007e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	88fa      	ldrh	r2, [r7, #6]
 8007e0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	88fa      	ldrh	r2, [r7, #6]
 8007e12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1c:	d108      	bne.n	8007e30 <HAL_UART_Transmit+0x82>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e003      	b.n	8007e38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007e40:	e02a      	b.n	8007e98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2180      	movs	r1, #128	; 0x80
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f8e2 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e036      	b.n	8007eca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	3302      	adds	r3, #2
 8007e76:	61bb      	str	r3, [r7, #24]
 8007e78:	e007      	b.n	8007e8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1cf      	bne.n	8007e42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2140      	movs	r1, #64	; 0x40
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 f8b2 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e006      	b.n	8007eca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e000      	b.n	8007eca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007ec8:	2302      	movs	r3, #2
  }
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b08a      	sub	sp, #40	; 0x28
 8007ed6:	af02      	add	r7, sp, #8
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	603b      	str	r3, [r7, #0]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	f040 808c 	bne.w	800800c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <HAL_UART_Receive+0x2e>
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e084      	b.n	800800e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_UART_Receive+0x40>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e07d      	b.n	800800e <HAL_UART_Receive+0x13c>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2222      	movs	r2, #34	; 0x22
 8007f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f2e:	f7fb fcf5 	bl	800391c <HAL_GetTick>
 8007f32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	88fa      	ldrh	r2, [r7, #6]
 8007f38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f48:	d108      	bne.n	8007f5c <HAL_UART_Receive+0x8a>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d104      	bne.n	8007f5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	e003      	b.n	8007f64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007f6c:	e043      	b.n	8007ff6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2200      	movs	r2, #0
 8007f76:	2120      	movs	r1, #32
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f84c 	bl	8008016 <UART_WaitOnFlagUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e042      	b.n	800800e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	61bb      	str	r3, [r7, #24]
 8007fa6:	e01f      	b.n	8007fe8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb0:	d007      	beq.n	8007fc2 <HAL_UART_Receive+0xf0>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <HAL_UART_Receive+0xfe>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e008      	b.n	8007fe2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1b6      	bne.n	8007f6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3720      	adds	r7, #32
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	4613      	mov	r3, r2
 8008024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008026:	e02c      	b.n	8008082 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d028      	beq.n	8008082 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <UART_WaitOnFlagUntilTimeout+0x30>
 8008036:	f7fb fc71 	bl	800391c <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	429a      	cmp	r2, r3
 8008044:	d21d      	bcs.n	8008082 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008054:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	695a      	ldr	r2, [r3, #20]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0201 	bic.w	r2, r2, #1
 8008064:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e00f      	b.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4013      	ands	r3, r2
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	bf0c      	ite	eq
 8008092:	2301      	moveq	r3, #1
 8008094:	2300      	movne	r3, #0
 8008096:	b2db      	uxtb	r3, r3
 8008098:	461a      	mov	r2, r3
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	429a      	cmp	r2, r3
 800809e:	d0c3      	beq.n	8008028 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	b09f      	sub	sp, #124	; 0x7c
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c2:	68d9      	ldr	r1, [r3, #12]
 80080c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	ea40 0301 	orr.w	r3, r0, r1
 80080cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	431a      	orrs	r2, r3
 80080de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80080e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080f0:	f021 010c 	bic.w	r1, r1, #12
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080fa:	430b      	orrs	r3, r1
 80080fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	6999      	ldr	r1, [r3, #24]
 800810c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	ea40 0301 	orr.w	r3, r0, r1
 8008114:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4bc5      	ldr	r3, [pc, #788]	; (8008430 <UART_SetConfig+0x384>)
 800811c:	429a      	cmp	r2, r3
 800811e:	d004      	beq.n	800812a <UART_SetConfig+0x7e>
 8008120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	4bc3      	ldr	r3, [pc, #780]	; (8008434 <UART_SetConfig+0x388>)
 8008126:	429a      	cmp	r2, r3
 8008128:	d103      	bne.n	8008132 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800812a:	f7fd fde7 	bl	8005cfc <HAL_RCC_GetPCLK2Freq>
 800812e:	6778      	str	r0, [r7, #116]	; 0x74
 8008130:	e002      	b.n	8008138 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008132:	f7fd fdcf 	bl	8005cd4 <HAL_RCC_GetPCLK1Freq>
 8008136:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008140:	f040 80b6 	bne.w	80082b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008146:	461c      	mov	r4, r3
 8008148:	f04f 0500 	mov.w	r5, #0
 800814c:	4622      	mov	r2, r4
 800814e:	462b      	mov	r3, r5
 8008150:	1891      	adds	r1, r2, r2
 8008152:	6439      	str	r1, [r7, #64]	; 0x40
 8008154:	415b      	adcs	r3, r3
 8008156:	647b      	str	r3, [r7, #68]	; 0x44
 8008158:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800815c:	1912      	adds	r2, r2, r4
 800815e:	eb45 0303 	adc.w	r3, r5, r3
 8008162:	f04f 0000 	mov.w	r0, #0
 8008166:	f04f 0100 	mov.w	r1, #0
 800816a:	00d9      	lsls	r1, r3, #3
 800816c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008170:	00d0      	lsls	r0, r2, #3
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	1911      	adds	r1, r2, r4
 8008178:	6639      	str	r1, [r7, #96]	; 0x60
 800817a:	416b      	adcs	r3, r5
 800817c:	667b      	str	r3, [r7, #100]	; 0x64
 800817e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	461a      	mov	r2, r3
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	1891      	adds	r1, r2, r2
 800818a:	63b9      	str	r1, [r7, #56]	; 0x38
 800818c:	415b      	adcs	r3, r3
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008194:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008198:	f7f8 fd60 	bl	8000c5c <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4ba5      	ldr	r3, [pc, #660]	; (8008438 <UART_SetConfig+0x38c>)
 80081a2:	fba3 2302 	umull	r2, r3, r3, r2
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	011e      	lsls	r6, r3, #4
 80081aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ac:	461c      	mov	r4, r3
 80081ae:	f04f 0500 	mov.w	r5, #0
 80081b2:	4622      	mov	r2, r4
 80081b4:	462b      	mov	r3, r5
 80081b6:	1891      	adds	r1, r2, r2
 80081b8:	6339      	str	r1, [r7, #48]	; 0x30
 80081ba:	415b      	adcs	r3, r3
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34
 80081be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081c2:	1912      	adds	r2, r2, r4
 80081c4:	eb45 0303 	adc.w	r3, r5, r3
 80081c8:	f04f 0000 	mov.w	r0, #0
 80081cc:	f04f 0100 	mov.w	r1, #0
 80081d0:	00d9      	lsls	r1, r3, #3
 80081d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081d6:	00d0      	lsls	r0, r2, #3
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	1911      	adds	r1, r2, r4
 80081de:	65b9      	str	r1, [r7, #88]	; 0x58
 80081e0:	416b      	adcs	r3, r5
 80081e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	461a      	mov	r2, r3
 80081ea:	f04f 0300 	mov.w	r3, #0
 80081ee:	1891      	adds	r1, r2, r2
 80081f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80081f2:	415b      	adcs	r3, r3
 80081f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081fe:	f7f8 fd2d 	bl	8000c5c <__aeabi_uldivmod>
 8008202:	4602      	mov	r2, r0
 8008204:	460b      	mov	r3, r1
 8008206:	4b8c      	ldr	r3, [pc, #560]	; (8008438 <UART_SetConfig+0x38c>)
 8008208:	fba3 1302 	umull	r1, r3, r3, r2
 800820c:	095b      	lsrs	r3, r3, #5
 800820e:	2164      	movs	r1, #100	; 0x64
 8008210:	fb01 f303 	mul.w	r3, r1, r3
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	3332      	adds	r3, #50	; 0x32
 800821a:	4a87      	ldr	r2, [pc, #540]	; (8008438 <UART_SetConfig+0x38c>)
 800821c:	fba2 2303 	umull	r2, r3, r2, r3
 8008220:	095b      	lsrs	r3, r3, #5
 8008222:	005b      	lsls	r3, r3, #1
 8008224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008228:	441e      	add	r6, r3
 800822a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800822c:	4618      	mov	r0, r3
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	1894      	adds	r4, r2, r2
 8008238:	623c      	str	r4, [r7, #32]
 800823a:	415b      	adcs	r3, r3
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
 800823e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008242:	1812      	adds	r2, r2, r0
 8008244:	eb41 0303 	adc.w	r3, r1, r3
 8008248:	f04f 0400 	mov.w	r4, #0
 800824c:	f04f 0500 	mov.w	r5, #0
 8008250:	00dd      	lsls	r5, r3, #3
 8008252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008256:	00d4      	lsls	r4, r2, #3
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	1814      	adds	r4, r2, r0
 800825e:	653c      	str	r4, [r7, #80]	; 0x50
 8008260:	414b      	adcs	r3, r1
 8008262:	657b      	str	r3, [r7, #84]	; 0x54
 8008264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	461a      	mov	r2, r3
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	1891      	adds	r1, r2, r2
 8008270:	61b9      	str	r1, [r7, #24]
 8008272:	415b      	adcs	r3, r3
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800827a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800827e:	f7f8 fced 	bl	8000c5c <__aeabi_uldivmod>
 8008282:	4602      	mov	r2, r0
 8008284:	460b      	mov	r3, r1
 8008286:	4b6c      	ldr	r3, [pc, #432]	; (8008438 <UART_SetConfig+0x38c>)
 8008288:	fba3 1302 	umull	r1, r3, r3, r2
 800828c:	095b      	lsrs	r3, r3, #5
 800828e:	2164      	movs	r1, #100	; 0x64
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	3332      	adds	r3, #50	; 0x32
 800829a:	4a67      	ldr	r2, [pc, #412]	; (8008438 <UART_SetConfig+0x38c>)
 800829c:	fba2 2303 	umull	r2, r3, r2, r3
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	f003 0207 	and.w	r2, r3, #7
 80082a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4432      	add	r2, r6
 80082ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082ae:	e0b9      	b.n	8008424 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b2:	461c      	mov	r4, r3
 80082b4:	f04f 0500 	mov.w	r5, #0
 80082b8:	4622      	mov	r2, r4
 80082ba:	462b      	mov	r3, r5
 80082bc:	1891      	adds	r1, r2, r2
 80082be:	6139      	str	r1, [r7, #16]
 80082c0:	415b      	adcs	r3, r3
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082c8:	1912      	adds	r2, r2, r4
 80082ca:	eb45 0303 	adc.w	r3, r5, r3
 80082ce:	f04f 0000 	mov.w	r0, #0
 80082d2:	f04f 0100 	mov.w	r1, #0
 80082d6:	00d9      	lsls	r1, r3, #3
 80082d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082dc:	00d0      	lsls	r0, r2, #3
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	eb12 0804 	adds.w	r8, r2, r4
 80082e6:	eb43 0905 	adc.w	r9, r3, r5
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f04f 0100 	mov.w	r1, #0
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	008b      	lsls	r3, r1, #2
 80082fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008302:	0082      	lsls	r2, r0, #2
 8008304:	4640      	mov	r0, r8
 8008306:	4649      	mov	r1, r9
 8008308:	f7f8 fca8 	bl	8000c5c <__aeabi_uldivmod>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4b49      	ldr	r3, [pc, #292]	; (8008438 <UART_SetConfig+0x38c>)
 8008312:	fba3 2302 	umull	r2, r3, r3, r2
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	011e      	lsls	r6, r3, #4
 800831a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800831c:	4618      	mov	r0, r3
 800831e:	f04f 0100 	mov.w	r1, #0
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	1894      	adds	r4, r2, r2
 8008328:	60bc      	str	r4, [r7, #8]
 800832a:	415b      	adcs	r3, r3
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008332:	1812      	adds	r2, r2, r0
 8008334:	eb41 0303 	adc.w	r3, r1, r3
 8008338:	f04f 0400 	mov.w	r4, #0
 800833c:	f04f 0500 	mov.w	r5, #0
 8008340:	00dd      	lsls	r5, r3, #3
 8008342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008346:	00d4      	lsls	r4, r2, #3
 8008348:	4622      	mov	r2, r4
 800834a:	462b      	mov	r3, r5
 800834c:	1814      	adds	r4, r2, r0
 800834e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008350:	414b      	adcs	r3, r1
 8008352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	4618      	mov	r0, r3
 800835a:	f04f 0100 	mov.w	r1, #0
 800835e:	f04f 0200 	mov.w	r2, #0
 8008362:	f04f 0300 	mov.w	r3, #0
 8008366:	008b      	lsls	r3, r1, #2
 8008368:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800836c:	0082      	lsls	r2, r0, #2
 800836e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008372:	f7f8 fc73 	bl	8000c5c <__aeabi_uldivmod>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4b2f      	ldr	r3, [pc, #188]	; (8008438 <UART_SetConfig+0x38c>)
 800837c:	fba3 1302 	umull	r1, r3, r3, r2
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	2164      	movs	r1, #100	; 0x64
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	3332      	adds	r3, #50	; 0x32
 800838e:	4a2a      	ldr	r2, [pc, #168]	; (8008438 <UART_SetConfig+0x38c>)
 8008390:	fba2 2303 	umull	r2, r3, r2, r3
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800839a:	441e      	add	r6, r3
 800839c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800839e:	4618      	mov	r0, r3
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	1894      	adds	r4, r2, r2
 80083aa:	603c      	str	r4, [r7, #0]
 80083ac:	415b      	adcs	r3, r3
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b4:	1812      	adds	r2, r2, r0
 80083b6:	eb41 0303 	adc.w	r3, r1, r3
 80083ba:	f04f 0400 	mov.w	r4, #0
 80083be:	f04f 0500 	mov.w	r5, #0
 80083c2:	00dd      	lsls	r5, r3, #3
 80083c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083c8:	00d4      	lsls	r4, r2, #3
 80083ca:	4622      	mov	r2, r4
 80083cc:	462b      	mov	r3, r5
 80083ce:	eb12 0a00 	adds.w	sl, r2, r0
 80083d2:	eb43 0b01 	adc.w	fp, r3, r1
 80083d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	4618      	mov	r0, r3
 80083dc:	f04f 0100 	mov.w	r1, #0
 80083e0:	f04f 0200 	mov.w	r2, #0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	008b      	lsls	r3, r1, #2
 80083ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083ee:	0082      	lsls	r2, r0, #2
 80083f0:	4650      	mov	r0, sl
 80083f2:	4659      	mov	r1, fp
 80083f4:	f7f8 fc32 	bl	8000c5c <__aeabi_uldivmod>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <UART_SetConfig+0x38c>)
 80083fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	2164      	movs	r1, #100	; 0x64
 8008406:	fb01 f303 	mul.w	r3, r1, r3
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	3332      	adds	r3, #50	; 0x32
 8008410:	4a09      	ldr	r2, [pc, #36]	; (8008438 <UART_SetConfig+0x38c>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4432      	add	r2, r6
 8008422:	609a      	str	r2, [r3, #8]
}
 8008424:	bf00      	nop
 8008426:	377c      	adds	r7, #124	; 0x7c
 8008428:	46bd      	mov	sp, r7
 800842a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842e:	bf00      	nop
 8008430:	40011000 	.word	0x40011000
 8008434:	40011400 	.word	0x40011400
 8008438:	51eb851f 	.word	0x51eb851f

0800843c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800843c:	b084      	sub	sp, #16
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	f107 001c 	add.w	r0, r7, #28
 800844a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2b01      	cmp	r3, #1
 8008452:	d122      	bne.n	800849a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800847c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800847e:	2b01      	cmp	r3, #1
 8008480:	d105      	bne.n	800848e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fac0 	bl	8009a14 <USB_CoreReset>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e01a      	b.n	80084d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fab4 	bl	8009a14 <USB_CoreReset>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	639a      	str	r2, [r3, #56]	; 0x38
 80084c2:	e005      	b.n	80084d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d10b      	bne.n	80084ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f043 0206 	orr.w	r2, r3, #6
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f043 0220 	orr.w	r2, r3, #32
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084fa:	b004      	add	sp, #16
 80084fc:	4770      	bx	lr
	...

08008500 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d165      	bne.n	80085e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4a41      	ldr	r2, [pc, #260]	; (800861c <USB_SetTurnaroundTime+0x11c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d906      	bls.n	800852a <USB_SetTurnaroundTime+0x2a>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4a40      	ldr	r2, [pc, #256]	; (8008620 <USB_SetTurnaroundTime+0x120>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d202      	bcs.n	800852a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008524:	230f      	movs	r3, #15
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e062      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4a3c      	ldr	r2, [pc, #240]	; (8008620 <USB_SetTurnaroundTime+0x120>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d306      	bcc.n	8008540 <USB_SetTurnaroundTime+0x40>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4a3b      	ldr	r2, [pc, #236]	; (8008624 <USB_SetTurnaroundTime+0x124>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d202      	bcs.n	8008540 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800853a:	230e      	movs	r3, #14
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e057      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4a38      	ldr	r2, [pc, #224]	; (8008624 <USB_SetTurnaroundTime+0x124>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d306      	bcc.n	8008556 <USB_SetTurnaroundTime+0x56>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4a37      	ldr	r2, [pc, #220]	; (8008628 <USB_SetTurnaroundTime+0x128>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d202      	bcs.n	8008556 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008550:	230d      	movs	r3, #13
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e04c      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	4a33      	ldr	r2, [pc, #204]	; (8008628 <USB_SetTurnaroundTime+0x128>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d306      	bcc.n	800856c <USB_SetTurnaroundTime+0x6c>
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4a32      	ldr	r2, [pc, #200]	; (800862c <USB_SetTurnaroundTime+0x12c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d802      	bhi.n	800856c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008566:	230c      	movs	r3, #12
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	e041      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4a2f      	ldr	r2, [pc, #188]	; (800862c <USB_SetTurnaroundTime+0x12c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d906      	bls.n	8008582 <USB_SetTurnaroundTime+0x82>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4a2e      	ldr	r2, [pc, #184]	; (8008630 <USB_SetTurnaroundTime+0x130>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d802      	bhi.n	8008582 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800857c:	230b      	movs	r3, #11
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	e036      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4a2a      	ldr	r2, [pc, #168]	; (8008630 <USB_SetTurnaroundTime+0x130>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d906      	bls.n	8008598 <USB_SetTurnaroundTime+0x98>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4a29      	ldr	r2, [pc, #164]	; (8008634 <USB_SetTurnaroundTime+0x134>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d802      	bhi.n	8008598 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008592:	230a      	movs	r3, #10
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	e02b      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4a26      	ldr	r2, [pc, #152]	; (8008634 <USB_SetTurnaroundTime+0x134>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d906      	bls.n	80085ae <USB_SetTurnaroundTime+0xae>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4a25      	ldr	r2, [pc, #148]	; (8008638 <USB_SetTurnaroundTime+0x138>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d202      	bcs.n	80085ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085a8:	2309      	movs	r3, #9
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	e020      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4a21      	ldr	r2, [pc, #132]	; (8008638 <USB_SetTurnaroundTime+0x138>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d306      	bcc.n	80085c4 <USB_SetTurnaroundTime+0xc4>
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	4a20      	ldr	r2, [pc, #128]	; (800863c <USB_SetTurnaroundTime+0x13c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d802      	bhi.n	80085c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085be:	2308      	movs	r3, #8
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e015      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4a1d      	ldr	r2, [pc, #116]	; (800863c <USB_SetTurnaroundTime+0x13c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d906      	bls.n	80085da <USB_SetTurnaroundTime+0xda>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4a1c      	ldr	r2, [pc, #112]	; (8008640 <USB_SetTurnaroundTime+0x140>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d202      	bcs.n	80085da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085d4:	2307      	movs	r3, #7
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e00a      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085da:	2306      	movs	r3, #6
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	e007      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085e6:	2309      	movs	r3, #9
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e001      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085ec:	2309      	movs	r3, #9
 80085ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008608:	431a      	orrs	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	00d8acbf 	.word	0x00d8acbf
 8008620:	00e4e1c0 	.word	0x00e4e1c0
 8008624:	00f42400 	.word	0x00f42400
 8008628:	01067380 	.word	0x01067380
 800862c:	011a499f 	.word	0x011a499f
 8008630:	01312cff 	.word	0x01312cff
 8008634:	014ca43f 	.word	0x014ca43f
 8008638:	016e3600 	.word	0x016e3600
 800863c:	01a6ab1f 	.word	0x01a6ab1f
 8008640:	01e84800 	.word	0x01e84800

08008644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f043 0201 	orr.w	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d106      	bne.n	80086b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	60da      	str	r2, [r3, #12]
 80086b2:	e00b      	b.n	80086cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	e001      	b.n	80086cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e003      	b.n	80086d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80086cc:	2032      	movs	r0, #50	; 0x32
 80086ce:	f7fb f931 	bl	8003934 <HAL_Delay>

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086dc:	b084      	sub	sp, #16
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80086ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	e009      	b.n	8008710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	3340      	adds	r3, #64	; 0x40
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	2200      	movs	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	3301      	adds	r3, #1
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b0e      	cmp	r3, #14
 8008714:	d9f2      	bls.n	80086fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d11c      	bne.n	8008756 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872a:	f043 0302 	orr.w	r3, r3, #2
 800872e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	e005      	b.n	8008762 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008768:	461a      	mov	r2, r3
 800876a:	2300      	movs	r3, #0
 800876c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008774:	4619      	mov	r1, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800877c:	461a      	mov	r2, r3
 800877e:	680b      	ldr	r3, [r1, #0]
 8008780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10c      	bne.n	80087a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d104      	bne.n	8008798 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800878e:	2100      	movs	r1, #0
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f949 	bl	8008a28 <USB_SetDevSpeed>
 8008796:	e008      	b.n	80087aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008798:	2101      	movs	r1, #1
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f944 	bl	8008a28 <USB_SetDevSpeed>
 80087a0:	e003      	b.n	80087aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087a2:	2103      	movs	r1, #3
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f93f 	bl	8008a28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087aa:	2110      	movs	r1, #16
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f8f3 	bl	8008998 <USB_FlushTxFifo>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f911 	bl	80089e4 <USB_FlushRxFifo>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d2:	461a      	mov	r2, r3
 80087d4:	2300      	movs	r3, #0
 80087d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087de:	461a      	mov	r2, r3
 80087e0:	2300      	movs	r3, #0
 80087e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ea:	461a      	mov	r2, r3
 80087ec:	2300      	movs	r3, #0
 80087ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087f0:	2300      	movs	r3, #0
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	e043      	b.n	800887e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800880c:	d118      	bne.n	8008840 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008820:	461a      	mov	r2, r3
 8008822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	e013      	b.n	8008852 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008836:	461a      	mov	r2, r3
 8008838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e008      	b.n	8008852 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	461a      	mov	r2, r3
 800884e:	2300      	movs	r3, #0
 8008850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	015a      	lsls	r2, r3, #5
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4413      	add	r3, r2
 800885a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885e:	461a      	mov	r2, r3
 8008860:	2300      	movs	r3, #0
 8008862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	461a      	mov	r2, r3
 8008872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3301      	adds	r3, #1
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	429a      	cmp	r2, r3
 8008884:	d3b7      	bcc.n	80087f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
 800888a:	e043      	b.n	8008914 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800889e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a2:	d118      	bne.n	80088d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	e013      	b.n	80088e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	461a      	mov	r2, r3
 80088ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	e008      	b.n	80088e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e2:	461a      	mov	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f4:	461a      	mov	r2, r3
 80088f6:	2300      	movs	r3, #0
 80088f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008906:	461a      	mov	r2, r3
 8008908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800890c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	429a      	cmp	r2, r3
 800891a:	d3b7      	bcc.n	800888c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800892a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800893c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	2b00      	cmp	r3, #0
 8008942:	d105      	bne.n	8008950 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	f043 0210 	orr.w	r2, r3, #16
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699a      	ldr	r2, [r3, #24]
 8008954:	4b0f      	ldr	r3, [pc, #60]	; (8008994 <USB_DevInit+0x2b8>)
 8008956:	4313      	orrs	r3, r2
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f043 0208 	orr.w	r2, r3, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800896e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008970:	2b01      	cmp	r3, #1
 8008972:	d107      	bne.n	8008984 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800897c:	f043 0304 	orr.w	r3, r3, #4
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008984:	7dfb      	ldrb	r3, [r7, #23]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008990:	b004      	add	sp, #16
 8008992:	4770      	bx	lr
 8008994:	803c3800 	.word	0x803c3800

08008998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	019b      	lsls	r3, r3, #6
 80089aa:	f043 0220 	orr.w	r2, r3, #32
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3301      	adds	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <USB_FlushTxFifo+0x48>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d901      	bls.n	80089c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e006      	b.n	80089d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d0f0      	beq.n	80089b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	00030d40 	.word	0x00030d40

080089e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2210      	movs	r2, #16
 80089f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <USB_FlushRxFifo+0x40>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d901      	bls.n	8008a08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e006      	b.n	8008a16 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d0f0      	beq.n	80089f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	00030d40 	.word	0x00030d40

08008a28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f003 0306 	and.w	r3, r3, #6
 8008a72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]
 8008a7e:	e00a      	b.n	8008a96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d002      	beq.n	8008a8c <USB_GetDevSpeed+0x32>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b06      	cmp	r3, #6
 8008a8a:	d102      	bne.n	8008a92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	75fb      	strb	r3, [r7, #23]
 8008a90:	e001      	b.n	8008a96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a92:	230f      	movs	r3, #15
 8008a94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	371c      	adds	r7, #28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d13a      	bne.n	8008b36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	69da      	ldr	r2, [r3, #28]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d155      	bne.n	8008ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	78db      	ldrb	r3, [r3, #3]
 8008b12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	059b      	lsls	r3, r3, #22
 8008b1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	e036      	b.n	8008ba4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3c:	69da      	ldr	r2, [r3, #28]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	2101      	movs	r1, #1
 8008b48:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4c:	041b      	lsls	r3, r3, #16
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d11a      	bne.n	8008ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	78db      	ldrb	r3, [r3, #3]
 8008b88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d161      	bne.n	8008c94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be6:	d11f      	bne.n	8008c28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	2101      	movs	r1, #1
 8008c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	43db      	mvns	r3, r3
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c48:	4013      	ands	r3, r2
 8008c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	43db      	mvns	r3, r3
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	0159      	lsls	r1, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	440b      	add	r3, r1
 8008c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4b35      	ldr	r3, [pc, #212]	; (8008d64 <USB_DeactivateEndpoint+0x1b0>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]
 8008c92:	e060      	b.n	8008d56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008caa:	d11f      	bne.n	8008cec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008d02:	041b      	lsls	r3, r3, #16
 8008d04:	43db      	mvns	r3, r3
 8008d06:	68f9      	ldr	r1, [r7, #12]
 8008d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 030f 	and.w	r3, r3, #15
 8008d20:	2101      	movs	r1, #1
 8008d22:	fa01 f303 	lsl.w	r3, r1, r3
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	68f9      	ldr	r1, [r7, #12]
 8008d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d30:	4013      	ands	r3, r2
 8008d32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	0159      	lsls	r1, r3, #5
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	440b      	add	r3, r1
 8008d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <USB_DeactivateEndpoint+0x1b4>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	ec337800 	.word	0xec337800
 8008d68:	eff37800 	.word	0xeff37800

08008d6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af02      	add	r7, sp, #8
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	785b      	ldrb	r3, [r3, #1]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	f040 815c 	bne.w	8009046 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d132      	bne.n	8008dfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	0151      	lsls	r1, r2, #5
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	440a      	add	r2, r1
 8008dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008db4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	0151      	lsls	r1, r2, #5
 8008dcc:	69fa      	ldr	r2, [r7, #28]
 8008dce:	440a      	add	r2, r1
 8008dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	0151      	lsls	r1, r2, #5
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	440a      	add	r2, r1
 8008df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df4:	0cdb      	lsrs	r3, r3, #19
 8008df6:	04db      	lsls	r3, r3, #19
 8008df8:	6113      	str	r3, [r2, #16]
 8008dfa:	e074      	b.n	8008ee6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e16:	0cdb      	lsrs	r3, r3, #19
 8008e18:	04db      	lsls	r3, r3, #19
 8008e1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4c:	691a      	ldr	r2, [r3, #16]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6959      	ldr	r1, [r3, #20]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	440b      	add	r3, r1
 8008e58:	1e59      	subs	r1, r3, #1
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e62:	04d9      	lsls	r1, r3, #19
 8008e64:	4b9d      	ldr	r3, [pc, #628]	; (80090dc <USB_EPStartXfer+0x370>)
 8008e66:	400b      	ands	r3, r1
 8008e68:	69b9      	ldr	r1, [r7, #24]
 8008e6a:	0148      	lsls	r0, r1, #5
 8008e6c:	69f9      	ldr	r1, [r7, #28]
 8008e6e:	4401      	add	r1, r0
 8008e70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e74:	4313      	orrs	r3, r2
 8008e76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e8e:	69b9      	ldr	r1, [r7, #24]
 8008e90:	0148      	lsls	r0, r1, #5
 8008e92:	69f9      	ldr	r1, [r7, #28]
 8008e94:	4401      	add	r1, r0
 8008e96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	78db      	ldrb	r3, [r3, #3]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d11f      	bne.n	8008ee6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	0151      	lsls	r1, r2, #5
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	440a      	add	r2, r1
 8008ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ec4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	0151      	lsls	r1, r2, #5
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	440a      	add	r2, r1
 8008edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ee4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ee6:	79fb      	ldrb	r3, [r7, #7]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d14b      	bne.n	8008f84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d009      	beq.n	8008f08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	461a      	mov	r2, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	78db      	ldrb	r3, [r3, #3]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d128      	bne.n	8008f62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d110      	bne.n	8008f42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	69fa      	ldr	r2, [r7, #28]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	e00f      	b.n	8008f62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	0151      	lsls	r1, r2, #5
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	440a      	add	r2, r1
 8008f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	0151      	lsls	r1, r2, #5
 8008f74:	69fa      	ldr	r2, [r7, #28]
 8008f76:	440a      	add	r2, r1
 8008f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e12f      	b.n	80091e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	0151      	lsls	r1, r2, #5
 8008f96:	69fa      	ldr	r2, [r7, #28]
 8008f98:	440a      	add	r2, r1
 8008f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008fa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	78db      	ldrb	r3, [r3, #3]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d015      	beq.n	8008fd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8117 	beq.w	80091e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fcc:	69f9      	ldr	r1, [r7, #28]
 8008fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	634b      	str	r3, [r1, #52]	; 0x34
 8008fd6:	e105      	b.n	80091e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d110      	bne.n	800900a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	015a      	lsls	r2, r3, #5
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	4413      	add	r3, r2
 8008ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69ba      	ldr	r2, [r7, #24]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	e00f      	b.n	800902a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	69ba      	ldr	r2, [r7, #24]
 800901a:	0151      	lsls	r1, r2, #5
 800901c:	69fa      	ldr	r2, [r7, #28]
 800901e:	440a      	add	r2, r1
 8009020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009028:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	68d9      	ldr	r1, [r3, #12]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	781a      	ldrb	r2, [r3, #0]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	b298      	uxth	r0, r3
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4603      	mov	r3, r0
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f000 fa2b 	bl	800949a <USB_WritePacket>
 8009044:	e0ce      	b.n	80091e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	0151      	lsls	r1, r2, #5
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	440a      	add	r2, r1
 800905c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009060:	0cdb      	lsrs	r3, r3, #19
 8009062:	04db      	lsls	r3, r3, #19
 8009064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009080:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009084:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009088:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d126      	bne.n	80090e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090a8:	69b9      	ldr	r1, [r7, #24]
 80090aa:	0148      	lsls	r0, r1, #5
 80090ac:	69f9      	ldr	r1, [r7, #28]
 80090ae:	4401      	add	r1, r0
 80090b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090b4:	4313      	orrs	r3, r2
 80090b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090d6:	6113      	str	r3, [r2, #16]
 80090d8:	e036      	b.n	8009148 <USB_EPStartXfer+0x3dc>
 80090da:	bf00      	nop
 80090dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	4413      	add	r3, r2
 80090ea:	1e5a      	subs	r2, r3, #1
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	8afb      	ldrh	r3, [r7, #22]
 8009106:	04d9      	lsls	r1, r3, #19
 8009108:	4b39      	ldr	r3, [pc, #228]	; (80091f0 <USB_EPStartXfer+0x484>)
 800910a:	400b      	ands	r3, r1
 800910c:	69b9      	ldr	r1, [r7, #24]
 800910e:	0148      	lsls	r0, r1, #5
 8009110:	69f9      	ldr	r1, [r7, #28]
 8009112:	4401      	add	r1, r0
 8009114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009118:	4313      	orrs	r3, r2
 800911a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	8af9      	ldrh	r1, [r7, #22]
 8009130:	fb01 f303 	mul.w	r3, r1, r3
 8009134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009138:	69b9      	ldr	r1, [r7, #24]
 800913a:	0148      	lsls	r0, r1, #5
 800913c:	69f9      	ldr	r1, [r7, #28]
 800913e:	4401      	add	r1, r0
 8009140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009144:	4313      	orrs	r3, r2
 8009146:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d10d      	bne.n	800916a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d009      	beq.n	800916a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	68d9      	ldr	r1, [r3, #12]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	4413      	add	r3, r2
 8009162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009166:	460a      	mov	r2, r1
 8009168:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	78db      	ldrb	r3, [r3, #3]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d128      	bne.n	80091c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917e:	2b00      	cmp	r3, #0
 8009180:	d110      	bne.n	80091a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	e00f      	b.n	80091c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	0151      	lsls	r1, r2, #5
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	440a      	add	r2, r1
 80091da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3720      	adds	r7, #32
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	1ff80000 	.word	0x1ff80000

080091f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	785b      	ldrb	r3, [r3, #1]
 8009210:	2b01      	cmp	r3, #1
 8009212:	f040 80cd 	bne.w	80093b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d132      	bne.n	8009284 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	0151      	lsls	r1, r2, #5
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	440a      	add	r2, r1
 8009234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800923c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	440a      	add	r2, r1
 8009278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927c:	0cdb      	lsrs	r3, r3, #19
 800927e:	04db      	lsls	r3, r3, #19
 8009280:	6113      	str	r3, [r2, #16]
 8009282:	e04e      	b.n	8009322 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	0151      	lsls	r1, r2, #5
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	440a      	add	r2, r1
 800929a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929e:	0cdb      	lsrs	r3, r3, #19
 80092a0:	04db      	lsls	r3, r3, #19
 80092a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	695a      	ldr	r2, [r3, #20]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d903      	bls.n	80092dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	0151      	lsls	r1, r2, #5
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	440a      	add	r2, r1
 80092f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009308:	691a      	ldr	r2, [r3, #16]
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009312:	6939      	ldr	r1, [r7, #16]
 8009314:	0148      	lsls	r0, r1, #5
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	4401      	add	r1, r0
 800931a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800931e:	4313      	orrs	r3, r2
 8009320:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d11e      	bne.n	8009366 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800933c:	461a      	mov	r2, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800935e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	e092      	b.n	800948c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009384:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d07e      	beq.n	800948c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	2101      	movs	r1, #1
 80093a0:	fa01 f303 	lsl.w	r3, r1, r3
 80093a4:	6979      	ldr	r1, [r7, #20]
 80093a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093aa:	4313      	orrs	r3, r2
 80093ac:	634b      	str	r3, [r1, #52]	; 0x34
 80093ae:	e06d      	b.n	800948c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	015a      	lsls	r2, r3, #5
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	4413      	add	r3, r2
 80093b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	0151      	lsls	r1, r2, #5
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	440a      	add	r2, r1
 80093c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ca:	0cdb      	lsrs	r3, r3, #19
 80093cc:	04db      	lsls	r3, r3, #19
 80093ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	0151      	lsls	r1, r2, #5
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	440a      	add	r2, r1
 800941a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	691a      	ldr	r2, [r3, #16]
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800943a:	6939      	ldr	r1, [r7, #16]
 800943c:	0148      	lsls	r0, r1, #5
 800943e:	6979      	ldr	r1, [r7, #20]
 8009440:	4401      	add	r1, r0
 8009442:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009446:	4313      	orrs	r3, r2
 8009448:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d10d      	bne.n	800946c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	68d9      	ldr	r1, [r3, #12]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009468:	460a      	mov	r2, r1
 800946a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	0151      	lsls	r1, r2, #5
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	440a      	add	r2, r1
 8009482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800948a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800949a:	b480      	push	{r7}
 800949c:	b089      	sub	sp, #36	; 0x24
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	4611      	mov	r1, r2
 80094a6:	461a      	mov	r2, r3
 80094a8:	460b      	mov	r3, r1
 80094aa:	71fb      	strb	r3, [r7, #7]
 80094ac:	4613      	mov	r3, r2
 80094ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80094b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d11a      	bne.n	80094f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094c0:	88bb      	ldrh	r3, [r7, #4]
 80094c2:	3303      	adds	r3, #3
 80094c4:	089b      	lsrs	r3, r3, #2
 80094c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094c8:	2300      	movs	r3, #0
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	e00f      	b.n	80094ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	031a      	lsls	r2, r3, #12
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094da:	461a      	mov	r2, r3
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	3304      	adds	r3, #4
 80094e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	3301      	adds	r3, #1
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d3eb      	bcc.n	80094ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3724      	adds	r7, #36	; 0x24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009504:	b480      	push	{r7}
 8009506:	b089      	sub	sp, #36	; 0x24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	3303      	adds	r3, #3
 800951e:	089b      	lsrs	r3, r3, #2
 8009520:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009522:	2300      	movs	r3, #0
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	e00b      	b.n	8009540 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	601a      	str	r2, [r3, #0]
    pDest++;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	3304      	adds	r3, #4
 8009538:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	3301      	adds	r3, #1
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	69ba      	ldr	r2, [r7, #24]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	429a      	cmp	r2, r3
 8009546:	d3ef      	bcc.n	8009528 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009548:	69fb      	ldr	r3, [r7, #28]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3724      	adds	r7, #36	; 0x24
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009556:	b480      	push	{r7}
 8009558:	b085      	sub	sp, #20
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d12c      	bne.n	80095cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	db12      	blt.n	80095aa <USB_EPSetStall+0x54>
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00f      	beq.n	80095aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4413      	add	r3, r2
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	0151      	lsls	r1, r2, #5
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	440a      	add	r2, r1
 80095a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	0151      	lsls	r1, r2, #5
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	440a      	add	r2, r1
 80095c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	e02b      	b.n	8009624 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	db12      	blt.n	8009604 <USB_EPSetStall+0xae>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00f      	beq.n	8009604 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	0151      	lsls	r1, r2, #5
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	440a      	add	r2, r1
 80095fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009602:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800961e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009632:	b480      	push	{r7}
 8009634:	b085      	sub	sp, #20
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	2b01      	cmp	r3, #1
 800964c:	d128      	bne.n	80096a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	015a      	lsls	r2, r3, #5
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4413      	add	r3, r2
 8009656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	0151      	lsls	r1, r2, #5
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	440a      	add	r2, r1
 8009664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800966c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	2b03      	cmp	r3, #3
 8009674:	d003      	beq.n	800967e <USB_EPClearStall+0x4c>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	78db      	ldrb	r3, [r3, #3]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d138      	bne.n	80096f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	0151      	lsls	r1, r2, #5
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	440a      	add	r2, r1
 8009694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	e027      	b.n	80096f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	78db      	ldrb	r3, [r3, #3]
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d003      	beq.n	80096d0 <USB_EPClearStall+0x9e>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	78db      	ldrb	r3, [r3, #3]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d10f      	bne.n	80096f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800971c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009720:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009732:	68f9      	ldr	r1, [r7, #12]
 8009734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009738:	4313      	orrs	r3, r2
 800973a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3714      	adds	r7, #20
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009764:	f023 0303 	bic.w	r3, r3, #3
 8009768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009778:	f023 0302 	bic.w	r3, r3, #2
 800977c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097ba:	f043 0302 	orr.w	r3, r3, #2
 80097be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4013      	ands	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097e6:	68fb      	ldr	r3, [r7, #12]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4013      	ands	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	0c1b      	lsrs	r3, r3, #16
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009844:	69db      	ldr	r3, [r3, #28]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	4013      	ands	r3, r2
 800984a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	b29b      	uxth	r3, r3
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	4013      	ands	r3, r2
 8009888:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800988a:	68bb      	ldr	r3, [r7, #8]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	fa22 f303 	lsr.w	r3, r2, r3
 80098c8:	01db      	lsls	r3, r3, #7
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4013      	ands	r3, r2
 80098e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098e6:	68bb      	ldr	r3, [r7, #8]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	371c      	adds	r7, #28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	f003 0301 	and.w	r3, r3, #1
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800992e:	f023 0307 	bic.w	r3, r3, #7
 8009932:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009946:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
	...

08009958 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	460b      	mov	r3, r1
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	333c      	adds	r3, #60	; 0x3c
 800996e:	3304      	adds	r3, #4
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	4a26      	ldr	r2, [pc, #152]	; (8009a10 <USB_EP0_OutStart+0xb8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d90a      	bls.n	8009992 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800998c:	d101      	bne.n	8009992 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	e037      	b.n	8009a02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009998:	461a      	mov	r2, r3
 800999a:	2300      	movs	r3, #0
 800999c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c0:	f043 0318 	orr.w	r3, r3, #24
 80099c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80099d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10f      	bne.n	8009a00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e6:	461a      	mov	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80099fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	4f54300a 	.word	0x4f54300a

08009a14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4a13      	ldr	r2, [pc, #76]	; (8009a78 <USB_CoreReset+0x64>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d901      	bls.n	8009a32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e01b      	b.n	8009a6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	daf2      	bge.n	8009a20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	f043 0201 	orr.w	r2, r3, #1
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a09      	ldr	r2, [pc, #36]	; (8009a78 <USB_CoreReset+0x64>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d901      	bls.n	8009a5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e006      	b.n	8009a6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d0f0      	beq.n	8009a4a <USB_CoreReset+0x36>

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	00030d40 	.word	0x00030d40

08009a7c <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t rx_buf[6];
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009a88:	2010      	movs	r0, #16
 8009a8a:	f004 fdb3 	bl	800e5f4 <USBD_static_malloc>
 8009a8e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d108      	bne.n	8009aa8 <USBD_HID_Init+0x2c>
  {
	  usb_failed = 1;
 8009a96:	4b1a      	ldr	r3, [pc, #104]	; (8009b00 <USBD_HID_Init+0x84>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	701a      	strb	r2, [r3, #0]
    pdev->pClassData = NULL;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e027      	b.n	8009af8 <USBD_HID_Init+0x7c>
  }

  pdev->pClassData = (void *)hhid;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	7c1b      	ldrb	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <USBD_HID_Init+0x44>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2207      	movs	r2, #7
 8009abc:	875a      	strh	r2, [r3, #58]	; 0x3a
 8009abe:	e002      	b.n	8009ac6 <USBD_HID_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2204      	movs	r2, #4
 8009ac4:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	2203      	movs	r2, #3
 8009aca:	2181      	movs	r1, #129	; 0x81
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f004 fc32 	bl	800e336 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT, This is to get out rumble data */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8009ad8:	2306      	movs	r3, #6
 8009ada:	2203      	movs	r2, #3
 8009adc:	2102      	movs	r1, #2
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f004 fc29 	bl	800e336 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, rx_buf, 1);
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	4a07      	ldr	r2, [pc, #28]	; (8009b04 <USBD_HID_Init+0x88>)
 8009ae8:	2102      	movs	r1, #2
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f004 fd12 	bl	800e514 <USBD_LL_PrepareReceive>
  hhid->state = HID_IDLE;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2200      	movs	r2, #0
 8009af4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000ae1 	.word	0x20000ae1
 8009b04:	20000ae4 	.word	0x20000ae4

08009b08 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8009b14:	2181      	movs	r1, #129	; 0x81
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f004 fc33 	bl	800e382 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d009      	beq.n	8009b46 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f004 fd69 	bl	800e610 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b088      	sub	sp, #32
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b60:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d104      	bne.n	8009b7a <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8009b70:	4b94      	ldr	r3, [pc, #592]	; (8009dc4 <USBD_HID_Setup+0x274>)
 8009b72:	2201      	movs	r2, #1
 8009b74:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e11f      	b.n	8009dba <USBD_HID_Setup+0x26a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b82:	2b40      	cmp	r3, #64	; 0x40
 8009b84:	f000 80cd 	beq.w	8009d22 <USBD_HID_Setup+0x1d2>
 8009b88:	2b40      	cmp	r3, #64	; 0x40
 8009b8a:	f200 810d 	bhi.w	8009da8 <USBD_HID_Setup+0x258>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d045      	beq.n	8009c1e <USBD_HID_Setup+0xce>
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	f040 8108 	bne.w	8009da8 <USBD_HID_Setup+0x258>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	3b02      	subs	r3, #2
 8009b9e:	2b09      	cmp	r3, #9
 8009ba0:	d835      	bhi.n	8009c0e <USBD_HID_Setup+0xbe>
 8009ba2:	a201      	add	r2, pc, #4	; (adr r2, 8009ba8 <USBD_HID_Setup+0x58>)
 8009ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba8:	08009bff 	.word	0x08009bff
 8009bac:	08009bdf 	.word	0x08009bdf
 8009bb0:	08009c0f 	.word	0x08009c0f
 8009bb4:	08009c0f 	.word	0x08009c0f
 8009bb8:	08009c0f 	.word	0x08009c0f
 8009bbc:	08009c0f 	.word	0x08009c0f
 8009bc0:	08009c0f 	.word	0x08009c0f
 8009bc4:	08009c0f 	.word	0x08009c0f
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009bd1 	.word	0x08009bd1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	885b      	ldrh	r3, [r3, #2]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	601a      	str	r2, [r3, #0]
          break;
 8009bdc:	e01e      	b.n	8009c1c <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2201      	movs	r2, #1
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fac4 	bl	800b172 <USBD_CtlSendData>
          break;
 8009bea:	e017      	b.n	8009c1c <USBD_HID_Setup+0xcc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	885b      	ldrh	r3, [r3, #2]
 8009bf0:	0a1b      	lsrs	r3, r3, #8
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	605a      	str	r2, [r3, #4]
          break;
 8009bfc:	e00e      	b.n	8009c1c <USBD_HID_Setup+0xcc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	3304      	adds	r3, #4
 8009c02:	2201      	movs	r2, #1
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f001 fab3 	bl	800b172 <USBD_CtlSendData>
          break;
 8009c0c:	e006      	b.n	8009c1c <USBD_HID_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 fa3d 	bl	800b090 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c16:	2303      	movs	r3, #3
 8009c18:	77fb      	strb	r3, [r7, #31]
          break;
 8009c1a:	bf00      	nop
      }
      break;
 8009c1c:	e0cc      	b.n	8009db8 <USBD_HID_Setup+0x268>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	785b      	ldrb	r3, [r3, #1]
 8009c22:	2b0b      	cmp	r3, #11
 8009c24:	d874      	bhi.n	8009d10 <USBD_HID_Setup+0x1c0>
 8009c26:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <USBD_HID_Setup+0xdc>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c5d 	.word	0x08009c5d
 8009c30:	08009d1f 	.word	0x08009d1f
 8009c34:	08009d11 	.word	0x08009d11
 8009c38:	08009d11 	.word	0x08009d11
 8009c3c:	08009d11 	.word	0x08009d11
 8009c40:	08009d11 	.word	0x08009d11
 8009c44:	08009c87 	.word	0x08009c87
 8009c48:	08009d11 	.word	0x08009d11
 8009c4c:	08009d11 	.word	0x08009d11
 8009c50:	08009d11 	.word	0x08009d11
 8009c54:	08009cbf 	.word	0x08009cbf
 8009c58:	08009ce9 	.word	0x08009ce9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d107      	bne.n	8009c78 <USBD_HID_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c68:	f107 030e 	add.w	r3, r7, #14
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 fa7e 	bl	800b172 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c76:	e053      	b.n	8009d20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fa08 	bl	800b090 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c80:	2303      	movs	r3, #3
 8009c82:	77fb      	strb	r3, [r7, #31]
          break;
 8009c84:	e04c      	b.n	8009d20 <USBD_HID_Setup+0x1d0>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b21      	cmp	r3, #33	; 0x21
 8009c90:	d10e      	bne.n	8009cb0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8009c92:	4b4d      	ldr	r3, [pc, #308]	; (8009dc8 <USBD_HID_Setup+0x278>)
 8009c94:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	88db      	ldrh	r3, [r3, #6]
 8009c9a:	2b12      	cmp	r3, #18
 8009c9c:	bf28      	it	cs
 8009c9e:	2312      	movcs	r3, #18
 8009ca0:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ca2:	8afb      	ldrh	r3, [r7, #22]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	6939      	ldr	r1, [r7, #16]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 fa62 	bl	800b172 <USBD_CtlSendData>
          break;
 8009cae:	e037      	b.n	8009d20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 f9ec 	bl	800b090 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	77fb      	strb	r3, [r7, #31]
            break;
 8009cbc:	e030      	b.n	8009d20 <USBD_HID_Setup+0x1d0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d107      	bne.n	8009cda <USBD_HID_Setup+0x18a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fa4d 	bl	800b172 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cd8:	e022      	b.n	8009d20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f9d7 	bl	800b090 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	77fb      	strb	r3, [r7, #31]
          break;
 8009ce6:	e01b      	b.n	8009d20 <USBD_HID_Setup+0x1d0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d106      	bne.n	8009d02 <USBD_HID_Setup+0x1b2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	885b      	ldrh	r3, [r3, #2]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d00:	e00e      	b.n	8009d20 <USBD_HID_Setup+0x1d0>
            USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 f9c3 	bl	800b090 <USBD_CtlError>
            ret = USBD_FAIL;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	77fb      	strb	r3, [r7, #31]
          break;
 8009d0e:	e007      	b.n	8009d20 <USBD_HID_Setup+0x1d0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 f9bc 	bl	800b090 <USBD_CtlError>
          ret = USBD_FAIL;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	77fb      	strb	r3, [r7, #31]
          break;
 8009d1c:	e000      	b.n	8009d20 <USBD_HID_Setup+0x1d0>
          break;
 8009d1e:	bf00      	nop
      }
      break;
 8009d20:	e04a      	b.n	8009db8 <USBD_HID_Setup+0x268>
    /*This is for the og xbox, this is the custom vendor request */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8009d22:	4b2a      	ldr	r3, [pc, #168]	; (8009dcc <USBD_HID_Setup+0x27c>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	3301      	adds	r3, #1
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	4b28      	ldr	r3, [pc, #160]	; (8009dcc <USBD_HID_Setup+0x27c>)
 8009d2c:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	785b      	ldrb	r3, [r3, #1]
 8009d32:	2b06      	cmp	r3, #6
 8009d34:	d10f      	bne.n	8009d56 <USBD_HID_Setup+0x206>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	885b      	ldrh	r3, [r3, #2]
 8009d3a:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8009d3e:	d10a      	bne.n	8009d56 <USBD_HID_Setup+0x206>
    		len = 16;
 8009d40:	2310      	movs	r3, #16
 8009d42:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8009d44:	4b20      	ldr	r3, [pc, #128]	; (8009dc8 <USBD_HID_Setup+0x278>)
 8009d46:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009d48:	8afb      	ldrh	r3, [r7, #22]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6939      	ldr	r1, [r7, #16]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 fa0f 	bl	800b172 <USBD_CtlSendData>
 8009d54:	e027      	b.n	8009da6 <USBD_HID_Setup+0x256>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d10f      	bne.n	8009d7e <USBD_HID_Setup+0x22e>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	885b      	ldrh	r3, [r3, #2]
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d10a      	bne.n	8009d7e <USBD_HID_Setup+0x22e>
    		len = 20;
 8009d68:	2314      	movs	r3, #20
 8009d6a:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8009d6c:	4b18      	ldr	r3, [pc, #96]	; (8009dd0 <USBD_HID_Setup+0x280>)
 8009d6e:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009d70:	8afb      	ldrh	r3, [r7, #22]
 8009d72:	461a      	mov	r2, r3
 8009d74:	6939      	ldr	r1, [r7, #16]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 f9fb 	bl	800b172 <USBD_CtlSendData>
 8009d7c:	e013      	b.n	8009da6 <USBD_HID_Setup+0x256>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	785b      	ldrb	r3, [r3, #1]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d117      	bne.n	8009db6 <USBD_HID_Setup+0x266>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	885b      	ldrh	r3, [r3, #2]
 8009d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d8e:	d112      	bne.n	8009db6 <USBD_HID_Setup+0x266>
    		len = 6;
 8009d90:	2306      	movs	r3, #6
 8009d92:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8009d94:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <USBD_HID_Setup+0x284>)
 8009d96:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8009d98:	8afb      	ldrh	r3, [r7, #22]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6939      	ldr	r1, [r7, #16]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f001 f9e7 	bl	800b172 <USBD_CtlSendData>
    	}
    break;
 8009da4:	e007      	b.n	8009db6 <USBD_HID_Setup+0x266>
 8009da6:	e006      	b.n	8009db6 <USBD_HID_Setup+0x266>


    default:
      USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 f970 	bl	800b090 <USBD_CtlError>
      ret = USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	77fb      	strb	r3, [r7, #31]
      break;
 8009db4:	e000      	b.n	8009db8 <USBD_HID_Setup+0x268>
    break;
 8009db6:	bf00      	nop
  }

  return (uint8_t)ret;
 8009db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000ae1 	.word	0x20000ae1
 8009dc8:	200000a4 	.word	0x200000a4
 8009dcc:	20000ae0 	.word	0x20000ae0
 8009dd0:	200000c0 	.word	0x200000c0
 8009dd4:	200000d4 	.word	0x200000d4

08009dd8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dec:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e013      	b.n	8009e20 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d10c      	bne.n	8009e1e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	7b1b      	ldrb	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d108      	bne.n	8009e1e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8009e12:	88fb      	ldrh	r3, [r7, #6]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	2181      	movs	r1, #129	; 0x81
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f004 fb5a 	bl	800e4d2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2220      	movs	r2, #32
 8009e34:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8009e36:	4b03      	ldr	r3, [pc, #12]	; (8009e44 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr
 8009e44:	20000064 	.word	0x20000064

08009e48 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8009e50:	bf00      	nop
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
	...

08009e60 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8009e6e:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	20000084 	.word	0x20000084

08009e80 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e92:	2200      	movs	r2, #0
 8009e94:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70fb      	strb	r3, [r7, #3]
    HAL_PCD_EP_Receive(&hUsbDeviceFS.pData, HID_EPOUT_ADDR, rx_buf, 6);
 8009eb0:	2306      	movs	r3, #6
 8009eb2:	4a05      	ldr	r2, [pc, #20]	; (8009ec8 <USBD_HID_DataOut+0x24>)
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4805      	ldr	r0, [pc, #20]	; (8009ecc <USBD_HID_DataOut+0x28>)
 8009eb8:	f7fb fa70 	bl	800539c <HAL_PCD_EP_Receive>
	return USBD_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20000ae4 	.word	0x20000ae4
 8009ecc:	20005774 	.word	0x20005774

08009ed0 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	220a      	movs	r2, #10
 8009edc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8009ede:	4b03      	ldr	r3, [pc, #12]	; (8009eec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	200000b4 	.word	0x200000b4

08009ef0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	4613      	mov	r3, r2
 8009efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e01f      	b.n	8009f48 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d003      	beq.n	8009f2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	79fa      	ldrb	r2, [r7, #7]
 8009f3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f004 f993 	bl	800e268 <USBD_LL_Init>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e016      	b.n	8009f96 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	683a      	ldr	r2, [r7, #0]
 8009f6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	f107 020e 	add.w	r2, r7, #14
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f004 f9aa 	bl	800e300 <USBD_LL_Start>
 8009fac:	4603      	mov	r3, r0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	78fa      	ldrb	r2, [r7, #3]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a016:	2b00      	cmp	r3, #0
 800a018:	d007      	beq.n	800a02a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	4611      	mov	r1, r2
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	4798      	blx	r3
  }

  return USBD_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 ffe8 	bl	800b01c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a05a:	461a      	mov	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a068:	f003 031f 	and.w	r3, r3, #31
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d01a      	beq.n	800a0a6 <USBD_LL_SetupStage+0x72>
 800a070:	2b02      	cmp	r3, #2
 800a072:	d822      	bhi.n	800a0ba <USBD_LL_SetupStage+0x86>
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <USBD_LL_SetupStage+0x4a>
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d00a      	beq.n	800a092 <USBD_LL_SetupStage+0x5e>
 800a07c:	e01d      	b.n	800a0ba <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fa62 	bl	800a550 <USBD_StdDevReq>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]
      break;
 800a090:	e020      	b.n	800a0d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fb1e 	bl	800a6dc <USBD_StdItfReq>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a4:	e016      	b.n	800a0d4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb5d 	bl	800a76e <USBD_StdEPReq>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0b8:	e00c      	b.n	800a0d4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f004 f979 	bl	800e3c0 <USBD_LL_StallEP>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0d2:	bf00      	nop
  }

  return ret;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b086      	sub	sp, #24
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d138      	bne.n	800a164 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a100:	2b03      	cmp	r3, #3
 800a102:	d14a      	bne.n	800a19a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d913      	bls.n	800a138 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	1ad2      	subs	r2, r2, r3
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	4293      	cmp	r3, r2
 800a128:	bf28      	it	cs
 800a12a:	4613      	movcs	r3, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f001 f84a 	bl	800b1ca <USBD_CtlContinueRx>
 800a136:	e030      	b.n	800a19a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b03      	cmp	r3, #3
 800a142:	d10b      	bne.n	800a15c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f001 f845 	bl	800b1ec <USBD_CtlSendStatus>
 800a162:	e01a      	b.n	800a19a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d114      	bne.n	800a19a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00e      	beq.n	800a19a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	7afa      	ldrb	r2, [r7, #11]
 800a186:	4611      	mov	r1, r2
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	4798      	blx	r3
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a196:	7dfb      	ldrb	r3, [r7, #23]
 800a198:	e000      	b.n	800a19c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d16b      	bne.n	800a290 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3314      	adds	r3, #20
 800a1bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d156      	bne.n	800a276 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d914      	bls.n	800a1fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	689a      	ldr	r2, [r3, #8]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	1ad2      	subs	r2, r2, r3
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 ffdc 	bl	800b1a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f004 f98c 	bl	800e514 <USBD_LL_PrepareReceive>
 800a1fc:	e03b      	b.n	800a276 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	429a      	cmp	r2, r3
 800a208:	d11c      	bne.n	800a244 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a212:	429a      	cmp	r2, r3
 800a214:	d316      	bcc.n	800a244 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a220:	429a      	cmp	r2, r3
 800a222:	d20f      	bcs.n	800a244 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a224:	2200      	movs	r2, #0
 800a226:	2100      	movs	r1, #0
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 ffbd 	bl	800b1a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a236:	2300      	movs	r3, #0
 800a238:	2200      	movs	r2, #0
 800a23a:	2100      	movs	r1, #0
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f004 f969 	bl	800e514 <USBD_LL_PrepareReceive>
 800a242:	e018      	b.n	800a276 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d10b      	bne.n	800a268 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a268:	2180      	movs	r1, #128	; 0x80
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f004 f8a8 	bl	800e3c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 ffce 	bl	800b212 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d122      	bne.n	800a2c6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f7ff fe98 	bl	8009fb6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a28e:	e01a      	b.n	800a2c6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d114      	bne.n	800a2c6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00e      	beq.n	800a2c6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	7afa      	ldrb	r2, [r7, #11]
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	4798      	blx	r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	e000      	b.n	800a2c8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a300:	2303      	movs	r3, #3
 800a302:	e02f      	b.n	800a364 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00f      	beq.n	800a32e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d009      	beq.n	800a32e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	6852      	ldr	r2, [r2, #4]
 800a326:	b2d2      	uxtb	r2, r2
 800a328:	4611      	mov	r1, r2
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a32e:	2340      	movs	r3, #64	; 0x40
 800a330:	2200      	movs	r2, #0
 800a332:	2100      	movs	r1, #0
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f003 fffe 	bl	800e336 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2240      	movs	r2, #64	; 0x40
 800a346:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a34a:	2340      	movs	r3, #64	; 0x40
 800a34c:	2200      	movs	r2, #0
 800a34e:	2180      	movs	r1, #128	; 0x80
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f003 fff0 	bl	800e336 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2240      	movs	r2, #64	; 0x40
 800a360:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d106      	bne.n	800a3da <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e012      	b.n	800a424 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a404:	b2db      	uxtb	r3, r3
 800a406:	2b03      	cmp	r3, #3
 800a408:	d10b      	bne.n	800a422 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d005      	beq.n	800a422 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	e014      	b.n	800a470 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d10d      	bne.n	800a46e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	78fa      	ldrb	r2, [r7, #3]
 800a468:	4611      	mov	r1, r2
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d101      	bne.n	800a492 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a48e:	2303      	movs	r3, #3
 800a490:	e014      	b.n	800a4bc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d10d      	bne.n	800a4ba <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	78fa      	ldrb	r2, [r7, #3]
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d009      	beq.n	800a508 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6852      	ldr	r2, [r2, #4]
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	4611      	mov	r1, r2
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
  }

  return USBD_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a512:	b480      	push	{r7}
 800a514:	b087      	sub	sp, #28
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	3301      	adds	r3, #1
 800a528:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a530:	8a3b      	ldrh	r3, [r7, #16]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	b21a      	sxth	r2, r3
 800a536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	b21b      	sxth	r3, r3
 800a53e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a540:	89fb      	ldrh	r3, [r7, #14]
}
 800a542:	4618      	mov	r0, r3
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]


  if(req->bmRequest == 0xC1) {
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2bc1      	cmp	r3, #193	; 0xc1
 800a564:	d148      	bne.n	800a5f8 <USBD_StdDevReq+0xa8>
	  uint16_t len = 0;
 800a566:	2300      	movs	r3, #0
 800a568:	81bb      	strh	r3, [r7, #12]
	  uint8_t *pbuf = NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	60bb      	str	r3, [r7, #8]
  	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	2b06      	cmp	r3, #6
 800a574:	d10f      	bne.n	800a596 <USBD_StdDevReq+0x46>
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	885b      	ldrh	r3, [r3, #2]
 800a57a:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 800a57e:	d10a      	bne.n	800a596 <USBD_StdDevReq+0x46>
  		len = 16;
 800a580:	2310      	movs	r3, #16
 800a582:	81bb      	strh	r3, [r7, #12]
  		pbuf = USBD_HID_Desc;
 800a584:	4b51      	ldr	r3, [pc, #324]	; (800a6cc <USBD_StdDevReq+0x17c>)
 800a586:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 800a588:	89bb      	ldrh	r3, [r7, #12]
 800a58a:	461a      	mov	r2, r3
 800a58c:	68b9      	ldr	r1, [r7, #8]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fdef 	bl	800b172 <USBD_CtlSendData>
 800a594:	e026      	b.n	800a5e4 <USBD_StdDevReq+0x94>
  	}
  	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d10f      	bne.n	800a5be <USBD_StdDevReq+0x6e>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	885b      	ldrh	r3, [r3, #2]
 800a5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a6:	d10a      	bne.n	800a5be <USBD_StdDevReq+0x6e>
  		len = 20;
 800a5a8:	2314      	movs	r3, #20
 800a5aa:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_IN;
 800a5ac:	4b48      	ldr	r3, [pc, #288]	; (800a6d0 <USBD_StdDevReq+0x180>)
 800a5ae:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 800a5b0:	89bb      	ldrh	r3, [r7, #12]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fddb 	bl	800b172 <USBD_CtlSendData>
 800a5bc:	e012      	b.n	800a5e4 <USBD_StdDevReq+0x94>
  	}
  	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d10e      	bne.n	800a5e4 <USBD_StdDevReq+0x94>
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	885b      	ldrh	r3, [r3, #2]
 800a5ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ce:	d109      	bne.n	800a5e4 <USBD_StdDevReq+0x94>
  		len = 6;
 800a5d0:	2306      	movs	r3, #6
 800a5d2:	81bb      	strh	r3, [r7, #12]
  		pbuf = DUKE_HID_CAPABILITIES_OUT;
 800a5d4:	4b3f      	ldr	r3, [pc, #252]	; (800a6d4 <USBD_StdDevReq+0x184>)
 800a5d6:	60bb      	str	r3, [r7, #8]
  		(void)USBD_CtlSendData(pdev, pbuf, len);
 800a5d8:	89bb      	ldrh	r3, [r7, #12]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fdc7 	bl	800b172 <USBD_CtlSendData>
  	}
	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	4798      	blx	r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	73fb      	strb	r3, [r7, #15]
 800a5f6:	e064      	b.n	800a6c2 <USBD_StdDevReq+0x172>


  } else {
	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d005      	beq.n	800a610 <USBD_StdDevReq+0xc0>
 800a604:	2b40      	cmp	r3, #64	; 0x40
 800a606:	d854      	bhi.n	800a6b2 <USBD_StdDevReq+0x162>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00b      	beq.n	800a624 <USBD_StdDevReq+0xd4>
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	d150      	bne.n	800a6b2 <USBD_StdDevReq+0x162>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	4798      	blx	r3
 800a61e:	4603      	mov	r3, r0
 800a620:	73fb      	strb	r3, [r7, #15]
		  break;
 800a622:	e04e      	b.n	800a6c2 <USBD_StdDevReq+0x172>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	785b      	ldrb	r3, [r3, #1]
 800a628:	2b09      	cmp	r3, #9
 800a62a:	d83c      	bhi.n	800a6a6 <USBD_StdDevReq+0x156>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <USBD_StdDevReq+0xe4>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a6a7 	.word	0x0800a6a7
 800a640:	0800a693 	.word	0x0800a693
 800a644:	0800a6a7 	.word	0x0800a6a7
 800a648:	0800a667 	.word	0x0800a667
 800a64c:	0800a65d 	.word	0x0800a65d
 800a650:	0800a6a7 	.word	0x0800a6a7
 800a654:	0800a67f 	.word	0x0800a67f
 800a658:	0800a671 	.word	0x0800a671
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f9e8 	bl	800aa34 <USBD_GetDescriptor>
			  break;
 800a664:	e024      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fb4d 	bl	800ad08 <USBD_SetAddress>
			  break;
 800a66e:	e01f      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fb8c 	bl	800ad90 <USBD_SetConfig>
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
			  break;
 800a67c:	e018      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fc2b 	bl	800aedc <USBD_GetConfig>
			  break;
 800a686:	e013      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fc5c 	bl	800af48 <USBD_GetStatus>
			  break;
 800a690:	e00e      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc8b 	bl	800afb0 <USBD_SetFeature>
			  break;
 800a69a:	e009      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fc9a 	bl	800afd8 <USBD_ClrFeature>
			  break;
 800a6a4:	e004      	b.n	800a6b0 <USBD_StdDevReq+0x160>

			default:
			  USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fcf1 	bl	800b090 <USBD_CtlError>
			  break;
 800a6ae:	bf00      	nop
		  }
		  break;
 800a6b0:	e007      	b.n	800a6c2 <USBD_StdDevReq+0x172>

		default:
		  unknown_bmrequest = 1;
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <USBD_StdDevReq+0x188>)
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fce8 	bl	800b090 <USBD_CtlError>
		  break;
 800a6c0:	bf00      	nop
	  }
	}
  return ret;
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	200000dc 	.word	0x200000dc
 800a6d0:	200000ec 	.word	0x200000ec
 800a6d4:	20000100 	.word	0x20000100
 800a6d8:	20000aea 	.word	0x20000aea

0800a6dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6f2:	2b40      	cmp	r3, #64	; 0x40
 800a6f4:	d005      	beq.n	800a702 <USBD_StdItfReq+0x26>
 800a6f6:	2b40      	cmp	r3, #64	; 0x40
 800a6f8:	d82f      	bhi.n	800a75a <USBD_StdItfReq+0x7e>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <USBD_StdItfReq+0x26>
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	d12b      	bne.n	800a75a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d81d      	bhi.n	800a74c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	889b      	ldrh	r3, [r3, #4]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b01      	cmp	r3, #1
 800a718:	d813      	bhi.n	800a742 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	4798      	blx	r3
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	88db      	ldrh	r3, [r3, #6]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d110      	bne.n	800a756 <USBD_StdItfReq+0x7a>
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10d      	bne.n	800a756 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fd56 	bl	800b1ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a740:	e009      	b.n	800a756 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fca3 	bl	800b090 <USBD_CtlError>
          break;
 800a74a:	e004      	b.n	800a756 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fc9e 	bl	800b090 <USBD_CtlError>
          break;
 800a754:	e000      	b.n	800a758 <USBD_StdItfReq+0x7c>
          break;
 800a756:	bf00      	nop
      }
      break;
 800a758:	e004      	b.n	800a764 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a75a:	6839      	ldr	r1, [r7, #0]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fc97 	bl	800b090 <USBD_CtlError>
      break;
 800a762:	bf00      	nop
  }

  return ret;
 800a764:	7bfb      	ldrb	r3, [r7, #15]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b084      	sub	sp, #16
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	889b      	ldrh	r3, [r3, #4]
 800a780:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a78a:	2b40      	cmp	r3, #64	; 0x40
 800a78c:	d007      	beq.n	800a79e <USBD_StdEPReq+0x30>
 800a78e:	2b40      	cmp	r3, #64	; 0x40
 800a790:	f200 8145 	bhi.w	800aa1e <USBD_StdEPReq+0x2b0>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <USBD_StdEPReq+0x44>
 800a798:	2b20      	cmp	r3, #32
 800a79a:	f040 8140 	bne.w	800aa1e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b0:	e13a      	b.n	800aa28 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	2b03      	cmp	r3, #3
 800a7b8:	d007      	beq.n	800a7ca <USBD_StdEPReq+0x5c>
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	f300 8129 	bgt.w	800aa12 <USBD_StdEPReq+0x2a4>
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d07f      	beq.n	800a8c4 <USBD_StdEPReq+0x156>
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d03c      	beq.n	800a842 <USBD_StdEPReq+0xd4>
 800a7c8:	e123      	b.n	800aa12 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d002      	beq.n	800a7dc <USBD_StdEPReq+0x6e>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d016      	beq.n	800a808 <USBD_StdEPReq+0x9a>
 800a7da:	e02c      	b.n	800a836 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00d      	beq.n	800a7fe <USBD_StdEPReq+0x90>
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	2b80      	cmp	r3, #128	; 0x80
 800a7e6:	d00a      	beq.n	800a7fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f003 fde7 	bl	800e3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7f2:	2180      	movs	r1, #128	; 0x80
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f003 fde3 	bl	800e3c0 <USBD_LL_StallEP>
 800a7fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7fc:	e020      	b.n	800a840 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc45 	bl	800b090 <USBD_CtlError>
              break;
 800a806:	e01b      	b.n	800a840 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	885b      	ldrh	r3, [r3, #2]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10e      	bne.n	800a82e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00b      	beq.n	800a82e <USBD_StdEPReq+0xc0>
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	2b80      	cmp	r3, #128	; 0x80
 800a81a:	d008      	beq.n	800a82e <USBD_StdEPReq+0xc0>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	88db      	ldrh	r3, [r3, #6]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f003 fdc9 	bl	800e3c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fcdc 	bl	800b1ec <USBD_CtlSendStatus>

              break;
 800a834:	e004      	b.n	800a840 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fc29 	bl	800b090 <USBD_CtlError>
              break;
 800a83e:	bf00      	nop
          }
          break;
 800a840:	e0ec      	b.n	800aa1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d002      	beq.n	800a854 <USBD_StdEPReq+0xe6>
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d016      	beq.n	800a880 <USBD_StdEPReq+0x112>
 800a852:	e030      	b.n	800a8b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00d      	beq.n	800a876 <USBD_StdEPReq+0x108>
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b80      	cmp	r3, #128	; 0x80
 800a85e:	d00a      	beq.n	800a876 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f003 fdab 	bl	800e3c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a86a:	2180      	movs	r1, #128	; 0x80
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f003 fda7 	bl	800e3c0 <USBD_LL_StallEP>
 800a872:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a874:	e025      	b.n	800a8c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a876:	6839      	ldr	r1, [r7, #0]
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fc09 	bl	800b090 <USBD_CtlError>
              break;
 800a87e:	e020      	b.n	800a8c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	885b      	ldrh	r3, [r3, #2]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d11b      	bne.n	800a8c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d004      	beq.n	800a89c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f003 fdb1 	bl	800e3fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fca5 	bl	800b1ec <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a8b4:	e004      	b.n	800a8c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fbe9 	bl	800b090 <USBD_CtlError>
              break;
 800a8be:	e000      	b.n	800a8c2 <USBD_StdEPReq+0x154>
              break;
 800a8c0:	bf00      	nop
          }
          break;
 800a8c2:	e0ab      	b.n	800aa1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d002      	beq.n	800a8d6 <USBD_StdEPReq+0x168>
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d032      	beq.n	800a93a <USBD_StdEPReq+0x1cc>
 800a8d4:	e097      	b.n	800aa06 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <USBD_StdEPReq+0x17e>
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	2b80      	cmp	r3, #128	; 0x80
 800a8e0:	d004      	beq.n	800a8ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fbd3 	bl	800b090 <USBD_CtlError>
                break;
 800a8ea:	e091      	b.n	800aa10 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da0b      	bge.n	800a90c <USBD_StdEPReq+0x19e>
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4413      	add	r3, r2
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	3310      	adds	r3, #16
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	4413      	add	r3, r2
 800a908:	3304      	adds	r3, #4
 800a90a:	e00b      	b.n	800a924 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a912:	4613      	mov	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	4413      	add	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	4413      	add	r3, r2
 800a922:	3304      	adds	r3, #4
 800a924:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2202      	movs	r2, #2
 800a930:	4619      	mov	r1, r3
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fc1d 	bl	800b172 <USBD_CtlSendData>
              break;
 800a938:	e06a      	b.n	800aa10 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a93a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	da11      	bge.n	800a966 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	f003 020f 	and.w	r2, r3, #15
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	4613      	mov	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	440b      	add	r3, r1
 800a954:	3324      	adds	r3, #36	; 0x24
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d117      	bne.n	800a98c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fb96 	bl	800b090 <USBD_CtlError>
                  break;
 800a964:	e054      	b.n	800aa10 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	f003 020f 	and.w	r2, r3, #15
 800a96c:	6879      	ldr	r1, [r7, #4]
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	440b      	add	r3, r1
 800a978:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d104      	bne.n	800a98c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a982:	6839      	ldr	r1, [r7, #0]
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fb83 	bl	800b090 <USBD_CtlError>
                  break;
 800a98a:	e041      	b.n	800aa10 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a98c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a990:	2b00      	cmp	r3, #0
 800a992:	da0b      	bge.n	800a9ac <USBD_StdEPReq+0x23e>
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	3310      	adds	r3, #16
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	e00b      	b.n	800a9c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <USBD_StdEPReq+0x264>
 800a9cc:	7bbb      	ldrb	r3, [r7, #14]
 800a9ce:	2b80      	cmp	r3, #128	; 0x80
 800a9d0:	d103      	bne.n	800a9da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	e00e      	b.n	800a9f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	4619      	mov	r1, r3
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f003 fd2c 	bl	800e43c <USBD_LL_IsStallEP>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	e002      	b.n	800a9f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fbb7 	bl	800b172 <USBD_CtlSendData>
              break;
 800aa04:	e004      	b.n	800aa10 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fb41 	bl	800b090 <USBD_CtlError>
              break;
 800aa0e:	bf00      	nop
          }
          break;
 800aa10:	e004      	b.n	800aa1c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fb3b 	bl	800b090 <USBD_CtlError>
          break;
 800aa1a:	bf00      	nop
      }
      break;
 800aa1c:	e004      	b.n	800aa28 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fb35 	bl	800b090 <USBD_CtlError>
      break;
 800aa26:	bf00      	nop
  }

  return ret;
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	885b      	ldrh	r3, [r3, #2]
 800aa4e:	0a1b      	lsrs	r3, r3, #8
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	2b06      	cmp	r3, #6
 800aa56:	f200 8128 	bhi.w	800acaa <USBD_GetDescriptor+0x276>
 800aa5a:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <USBD_GetDescriptor+0x2c>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aa7d 	.word	0x0800aa7d
 800aa64:	0800aa95 	.word	0x0800aa95
 800aa68:	0800aad5 	.word	0x0800aad5
 800aa6c:	0800acab 	.word	0x0800acab
 800aa70:	0800acab 	.word	0x0800acab
 800aa74:	0800ac4b 	.word	0x0800ac4b
 800aa78:	0800ac77 	.word	0x0800ac77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	7c12      	ldrb	r2, [r2, #16]
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
 800aa90:	60f8      	str	r0, [r7, #12]
      break;
 800aa92:	e112      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7c1b      	ldrb	r3, [r3, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10d      	bne.n	800aab8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa4:	f107 0208 	add.w	r2, r7, #8
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
 800aaac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	2202      	movs	r2, #2
 800aab4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aab6:	e100      	b.n	800acba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	f107 0208 	add.w	r2, r7, #8
 800aac4:	4610      	mov	r0, r2
 800aac6:	4798      	blx	r3
 800aac8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3301      	adds	r3, #1
 800aace:	2202      	movs	r2, #2
 800aad0:	701a      	strb	r2, [r3, #0]
      break;
 800aad2:	e0f2      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	885b      	ldrh	r3, [r3, #2]
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b05      	cmp	r3, #5
 800aadc:	f200 80ac 	bhi.w	800ac38 <USBD_GetDescriptor+0x204>
 800aae0:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <USBD_GetDescriptor+0xb4>)
 800aae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae6:	bf00      	nop
 800aae8:	0800ab01 	.word	0x0800ab01
 800aaec:	0800ab35 	.word	0x0800ab35
 800aaf0:	0800ab69 	.word	0x0800ab69
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800abd1 	.word	0x0800abd1
 800aafc:	0800ac05 	.word	0x0800ac05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	7c12      	ldrb	r2, [r2, #16]
 800ab18:	f107 0108 	add.w	r1, r7, #8
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	4798      	blx	r3
 800ab20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab22:	e091      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fab2 	bl	800b090 <USBD_CtlError>
            err++;
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	72fb      	strb	r3, [r7, #11]
          break;
 800ab32:	e089      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab56:	e077      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa98 	bl	800b090 <USBD_CtlError>
            err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
          break;
 800ab66:	e06f      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	7c12      	ldrb	r2, [r2, #16]
 800ab80:	f107 0108 	add.w	r1, r7, #8
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8a:	e05d      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa7e 	bl	800b090 <USBD_CtlError>
            err++;
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	3301      	adds	r3, #1
 800ab98:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9a:	e055      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abbe:	e043      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa64 	bl	800b090 <USBD_CtlError>
            err++;
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	3301      	adds	r3, #1
 800abcc:	72fb      	strb	r3, [r7, #11]
          break;
 800abce:	e03b      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abf2:	e029      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa4a 	bl	800b090 <USBD_CtlError>
            err++;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3301      	adds	r3, #1
 800ac00:	72fb      	strb	r3, [r7, #11]
          break;
 800ac02:	e021      	b.n	800ac48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7c12      	ldrb	r2, [r2, #16]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac26:	e00f      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa30 	bl	800b090 <USBD_CtlError>
            err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
          break;
 800ac36:	e007      	b.n	800ac48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f000 fa28 	bl	800b090 <USBD_CtlError>
          err++;
 800ac40:	7afb      	ldrb	r3, [r7, #11]
 800ac42:	3301      	adds	r3, #1
 800ac44:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ac46:	bf00      	nop
      }
      break;
 800ac48:	e037      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	7c1b      	ldrb	r3, [r3, #16]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d109      	bne.n	800ac66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5a:	f107 0208 	add.w	r2, r7, #8
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4798      	blx	r3
 800ac62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac64:	e029      	b.n	800acba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fa11 	bl	800b090 <USBD_CtlError>
        err++;
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	3301      	adds	r3, #1
 800ac72:	72fb      	strb	r3, [r7, #11]
      break;
 800ac74:	e021      	b.n	800acba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7c1b      	ldrb	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10d      	bne.n	800ac9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	f107 0208 	add.w	r2, r7, #8
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	4798      	blx	r3
 800ac8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	3301      	adds	r3, #1
 800ac94:	2207      	movs	r2, #7
 800ac96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac98:	e00f      	b.n	800acba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f9f7 	bl	800b090 <USBD_CtlError>
        err++;
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	3301      	adds	r3, #1
 800aca6:	72fb      	strb	r3, [r7, #11]
      break;
 800aca8:	e007      	b.n	800acba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f9ef 	bl	800b090 <USBD_CtlError>
      err++;
 800acb2:	7afb      	ldrb	r3, [r7, #11]
 800acb4:	3301      	adds	r3, #1
 800acb6:	72fb      	strb	r3, [r7, #11]
      break;
 800acb8:	bf00      	nop
  }

  if (err != 0U)
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d11e      	bne.n	800acfe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	88db      	ldrh	r3, [r3, #6]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d016      	beq.n	800acf6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800acc8:	893b      	ldrh	r3, [r7, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00e      	beq.n	800acec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	88da      	ldrh	r2, [r3, #6]
 800acd2:	893b      	ldrh	r3, [r7, #8]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	bf28      	it	cs
 800acd8:	4613      	movcs	r3, r2
 800acda:	b29b      	uxth	r3, r3
 800acdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acde:	893b      	ldrh	r3, [r7, #8]
 800ace0:	461a      	mov	r2, r3
 800ace2:	68f9      	ldr	r1, [r7, #12]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fa44 	bl	800b172 <USBD_CtlSendData>
 800acea:	e009      	b.n	800ad00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9ce 	bl	800b090 <USBD_CtlError>
 800acf4:	e004      	b.n	800ad00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa78 	bl	800b1ec <USBD_CtlSendStatus>
 800acfc:	e000      	b.n	800ad00 <USBD_GetDescriptor+0x2cc>
    return;
 800acfe:	bf00      	nop
  }
}
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop

0800ad08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	889b      	ldrh	r3, [r3, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d131      	bne.n	800ad7e <USBD_SetAddress+0x76>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	88db      	ldrh	r3, [r3, #6]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d12d      	bne.n	800ad7e <USBD_SetAddress+0x76>
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	885b      	ldrh	r3, [r3, #2]
 800ad26:	2b7f      	cmp	r3, #127	; 0x7f
 800ad28:	d829      	bhi.n	800ad7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	885b      	ldrh	r3, [r3, #2]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b03      	cmp	r3, #3
 800ad40:	d104      	bne.n	800ad4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f9a3 	bl	800b090 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4a:	e01d      	b.n	800ad88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7bfa      	ldrb	r2, [r7, #15]
 800ad50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f003 fb9b 	bl	800e494 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa44 	bl	800b1ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad64:	7bfb      	ldrb	r3, [r7, #15]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d004      	beq.n	800ad74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad72:	e009      	b.n	800ad88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7c:	e004      	b.n	800ad88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f985 	bl	800b090 <USBD_CtlError>
  }
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	885b      	ldrh	r3, [r3, #2]
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	4b4c      	ldr	r3, [pc, #304]	; (800aed8 <USBD_SetConfig+0x148>)
 800ada6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ada8:	4b4b      	ldr	r3, [pc, #300]	; (800aed8 <USBD_SetConfig+0x148>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d905      	bls.n	800adbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f96c 	bl	800b090 <USBD_CtlError>
    return USBD_FAIL;
 800adb8:	2303      	movs	r3, #3
 800adba:	e088      	b.n	800aece <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d002      	beq.n	800adce <USBD_SetConfig+0x3e>
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d025      	beq.n	800ae18 <USBD_SetConfig+0x88>
 800adcc:	e071      	b.n	800aeb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adce:	4b42      	ldr	r3, [pc, #264]	; (800aed8 <USBD_SetConfig+0x148>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d01c      	beq.n	800ae10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800add6:	4b40      	ldr	r3, [pc, #256]	; (800aed8 <USBD_SetConfig+0x148>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ade0:	4b3d      	ldr	r3, [pc, #244]	; (800aed8 <USBD_SetConfig+0x148>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff f8f0 	bl	8009fcc <USBD_SetClassConfig>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d004      	beq.n	800ae00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800adf6:	6839      	ldr	r1, [r7, #0]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f949 	bl	800b090 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adfe:	e065      	b.n	800aecc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f9f3 	bl	800b1ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2203      	movs	r2, #3
 800ae0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae0e:	e05d      	b.n	800aecc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f9eb 	bl	800b1ec <USBD_CtlSendStatus>
      break;
 800ae16:	e059      	b.n	800aecc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae18:	4b2f      	ldr	r3, [pc, #188]	; (800aed8 <USBD_SetConfig+0x148>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d112      	bne.n	800ae46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae28:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <USBD_SetConfig+0x148>)
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae32:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <USBD_SetConfig+0x148>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff f8e3 	bl	800a004 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f9d4 	bl	800b1ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae44:	e042      	b.n	800aecc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ae46:	4b24      	ldr	r3, [pc, #144]	; (800aed8 <USBD_SetConfig+0x148>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d02a      	beq.n	800aeaa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff f8d1 	bl	800a004 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae62:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <USBD_SetConfig+0x148>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae6c:	4b1a      	ldr	r3, [pc, #104]	; (800aed8 <USBD_SetConfig+0x148>)
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f7ff f8aa 	bl	8009fcc <USBD_SetClassConfig>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00f      	beq.n	800aea2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f903 	bl	800b090 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff f8b6 	bl	800a004 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aea0:	e014      	b.n	800aecc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f9a2 	bl	800b1ec <USBD_CtlSendStatus>
      break;
 800aea8:	e010      	b.n	800aecc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f99e 	bl	800b1ec <USBD_CtlSendStatus>
      break;
 800aeb0:	e00c      	b.n	800aecc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f8eb 	bl	800b090 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <USBD_SetConfig+0x148>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff f89f 	bl	800a004 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aec6:	2303      	movs	r3, #3
 800aec8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeca:	bf00      	nop
  }

  return ret;
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000aeb 	.word	0x20000aeb

0800aedc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	88db      	ldrh	r3, [r3, #6]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d004      	beq.n	800aef8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f8cd 	bl	800b090 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aef6:	e023      	b.n	800af40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b02      	cmp	r3, #2
 800af02:	dc02      	bgt.n	800af0a <USBD_GetConfig+0x2e>
 800af04:	2b00      	cmp	r3, #0
 800af06:	dc03      	bgt.n	800af10 <USBD_GetConfig+0x34>
 800af08:	e015      	b.n	800af36 <USBD_GetConfig+0x5a>
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d00b      	beq.n	800af26 <USBD_GetConfig+0x4a>
 800af0e:	e012      	b.n	800af36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3308      	adds	r3, #8
 800af1a:	2201      	movs	r2, #1
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f927 	bl	800b172 <USBD_CtlSendData>
        break;
 800af24:	e00c      	b.n	800af40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3304      	adds	r3, #4
 800af2a:	2201      	movs	r2, #1
 800af2c:	4619      	mov	r1, r3
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f91f 	bl	800b172 <USBD_CtlSendData>
        break;
 800af34:	e004      	b.n	800af40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f8a9 	bl	800b090 <USBD_CtlError>
        break;
 800af3e:	bf00      	nop
}
 800af40:	bf00      	nop
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d81e      	bhi.n	800af9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	88db      	ldrh	r3, [r3, #6]
 800af64:	2b02      	cmp	r3, #2
 800af66:	d004      	beq.n	800af72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f890 	bl	800b090 <USBD_CtlError>
        break;
 800af70:	e01a      	b.n	800afa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2201      	movs	r2, #1
 800af76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d005      	beq.n	800af8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	f043 0202 	orr.w	r2, r3, #2
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	330c      	adds	r3, #12
 800af92:	2202      	movs	r2, #2
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f8eb 	bl	800b172 <USBD_CtlSendData>
      break;
 800af9c:	e004      	b.n	800afa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f875 	bl	800b090 <USBD_CtlError>
      break;
 800afa6:	bf00      	nop
  }
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	885b      	ldrh	r3, [r3, #2]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d106      	bne.n	800afd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 f90e 	bl	800b1ec <USBD_CtlSendStatus>
  }
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	3b01      	subs	r3, #1
 800afec:	2b02      	cmp	r3, #2
 800afee:	d80b      	bhi.n	800b008 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	885b      	ldrh	r3, [r3, #2]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d10c      	bne.n	800b012 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f8f3 	bl	800b1ec <USBD_CtlSendStatus>
      }
      break;
 800b006:	e004      	b.n	800b012 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f840 	bl	800b090 <USBD_CtlError>
      break;
 800b010:	e000      	b.n	800b014 <USBD_ClrFeature+0x3c>
      break;
 800b012:	bf00      	nop
  }
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	781a      	ldrb	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	781a      	ldrb	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3301      	adds	r3, #1
 800b044:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f7ff fa63 	bl	800a512 <SWAPBYTE>
 800b04c:	4603      	mov	r3, r0
 800b04e:	461a      	mov	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	3301      	adds	r3, #1
 800b058:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3301      	adds	r3, #1
 800b05e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff fa56 	bl	800a512 <SWAPBYTE>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3301      	adds	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
 800b078:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff fa49 	bl	800a512 <SWAPBYTE>
 800b080:	4603      	mov	r3, r0
 800b082:	461a      	mov	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	80da      	strh	r2, [r3, #6]
}
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b09a:	2180      	movs	r1, #128	; 0x80
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f003 f98f 	bl	800e3c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f003 f98b 	bl	800e3c0 <USBD_LL_StallEP>
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b086      	sub	sp, #24
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	60f8      	str	r0, [r7, #12]
 800b0ba:	60b9      	str	r1, [r7, #8]
 800b0bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d036      	beq.n	800b136 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0cc:	6938      	ldr	r0, [r7, #16]
 800b0ce:	f000 f836 	bl	800b13e <USBD_GetLen>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	7812      	ldrb	r2, [r2, #0]
 800b0ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	3301      	adds	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b102:	e013      	b.n	800b12c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	4413      	add	r3, r2
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	7812      	ldrb	r2, [r2, #0]
 800b10e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	3301      	adds	r3, #1
 800b114:	613b      	str	r3, [r7, #16]
    idx++;
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	3301      	adds	r3, #1
 800b11a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b11c:	7dfb      	ldrb	r3, [r7, #23]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	4413      	add	r3, r2
 800b122:	2200      	movs	r2, #0
 800b124:	701a      	strb	r2, [r3, #0]
    idx++;
 800b126:	7dfb      	ldrb	r3, [r7, #23]
 800b128:	3301      	adds	r3, #1
 800b12a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e7      	bne.n	800b104 <USBD_GetString+0x52>
 800b134:	e000      	b.n	800b138 <USBD_GetString+0x86>
    return;
 800b136:	bf00      	nop
  }
}
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b14e:	e005      	b.n	800b15c <USBD_GetLen+0x1e>
  {
    len++;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	3301      	adds	r3, #1
 800b154:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	3301      	adds	r3, #1
 800b15a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1f5      	bne.n	800b150 <USBD_GetLen+0x12>
  }

  return len;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	60f8      	str	r0, [r7, #12]
 800b17a:	60b9      	str	r1, [r7, #8]
 800b17c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2202      	movs	r2, #2
 800b182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	2100      	movs	r1, #0
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f003 f99a 	bl	800e4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	2100      	movs	r1, #0
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f003 f989 	bl	800e4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	2100      	movs	r1, #0
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f003 f999 	bl	800e514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2204      	movs	r2, #4
 800b1f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	2100      	movs	r1, #0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f003 f965 	bl	800e4d2 <USBD_LL_Transmit>

  return USBD_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2205      	movs	r2, #5
 800b21e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b222:	2300      	movs	r3, #0
 800b224:	2200      	movs	r2, #0
 800b226:	2100      	movs	r1, #0
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f003 f973 	bl	800e514 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <__NVIC_SetPriority>:
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4603      	mov	r3, r0
 800b240:	6039      	str	r1, [r7, #0]
 800b242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	db0a      	blt.n	800b262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	490c      	ldr	r1, [pc, #48]	; (800b284 <__NVIC_SetPriority+0x4c>)
 800b252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b256:	0112      	lsls	r2, r2, #4
 800b258:	b2d2      	uxtb	r2, r2
 800b25a:	440b      	add	r3, r1
 800b25c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b260:	e00a      	b.n	800b278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	b2da      	uxtb	r2, r3
 800b266:	4908      	ldr	r1, [pc, #32]	; (800b288 <__NVIC_SetPriority+0x50>)
 800b268:	79fb      	ldrb	r3, [r7, #7]
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	3b04      	subs	r3, #4
 800b270:	0112      	lsls	r2, r2, #4
 800b272:	b2d2      	uxtb	r2, r2
 800b274:	440b      	add	r3, r1
 800b276:	761a      	strb	r2, [r3, #24]
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	e000e100 	.word	0xe000e100
 800b288:	e000ed00 	.word	0xe000ed00

0800b28c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b28c:	b580      	push	{r7, lr}
 800b28e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b290:	4b05      	ldr	r3, [pc, #20]	; (800b2a8 <SysTick_Handler+0x1c>)
 800b292:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b294:	f001 fcfe 	bl	800cc94 <xTaskGetSchedulerState>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d001      	beq.n	800b2a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b29e:	f002 fae3 	bl	800d868 <xPortSysTickHandler>
  }
}
 800b2a2:	bf00      	nop
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	e000e010 	.word	0xe000e010

0800b2ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	f06f 0004 	mvn.w	r0, #4
 800b2b6:	f7ff ffbf 	bl	800b238 <__NVIC_SetPriority>
#endif
}
 800b2ba:	bf00      	nop
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2c6:	f3ef 8305 	mrs	r3, IPSR
 800b2ca:	603b      	str	r3, [r7, #0]
  return(result);
 800b2cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b2d2:	f06f 0305 	mvn.w	r3, #5
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	e00c      	b.n	800b2f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2da:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <osKernelInitialize+0x44>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d105      	bne.n	800b2ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b2e2:	4b08      	ldr	r3, [pc, #32]	; (800b304 <osKernelInitialize+0x44>)
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	e002      	b.n	800b2f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2f4:	687b      	ldr	r3, [r7, #4]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	20000aec 	.word	0x20000aec

0800b308 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b30e:	f3ef 8305 	mrs	r3, IPSR
 800b312:	603b      	str	r3, [r7, #0]
  return(result);
 800b314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b31a:	f06f 0305 	mvn.w	r3, #5
 800b31e:	607b      	str	r3, [r7, #4]
 800b320:	e010      	b.n	800b344 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b322:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <osKernelStart+0x48>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d109      	bne.n	800b33e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b32a:	f7ff ffbf 	bl	800b2ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b32e:	4b08      	ldr	r3, [pc, #32]	; (800b350 <osKernelStart+0x48>)
 800b330:	2202      	movs	r2, #2
 800b332:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b334:	f001 f866 	bl	800c404 <vTaskStartScheduler>
      stat = osOK;
 800b338:	2300      	movs	r3, #0
 800b33a:	607b      	str	r3, [r7, #4]
 800b33c:	e002      	b.n	800b344 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b33e:	f04f 33ff 	mov.w	r3, #4294967295
 800b342:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b344:	687b      	ldr	r3, [r7, #4]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	20000aec 	.word	0x20000aec

0800b354 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b354:	b580      	push	{r7, lr}
 800b356:	b08e      	sub	sp, #56	; 0x38
 800b358:	af04      	add	r7, sp, #16
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b364:	f3ef 8305 	mrs	r3, IPSR
 800b368:	617b      	str	r3, [r7, #20]
  return(result);
 800b36a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d17e      	bne.n	800b46e <osThreadNew+0x11a>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d07b      	beq.n	800b46e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b376:	2380      	movs	r3, #128	; 0x80
 800b378:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b37a:	2318      	movs	r3, #24
 800b37c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b37e:	2300      	movs	r3, #0
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b382:	f04f 33ff 	mov.w	r3, #4294967295
 800b386:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d045      	beq.n	800b41a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <osThreadNew+0x48>
        name = attr->name;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d008      	beq.n	800b3c2 <osThreadNew+0x6e>
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	2b38      	cmp	r3, #56	; 0x38
 800b3b4:	d805      	bhi.n	800b3c2 <osThreadNew+0x6e>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <osThreadNew+0x72>
        return (NULL);
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	e054      	b.n	800b470 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	089b      	lsrs	r3, r3, #2
 800b3d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00e      	beq.n	800b3fc <osThreadNew+0xa8>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	2b5b      	cmp	r3, #91	; 0x5b
 800b3e4:	d90a      	bls.n	800b3fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d006      	beq.n	800b3fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <osThreadNew+0xa8>
        mem = 1;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	e010      	b.n	800b41e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10c      	bne.n	800b41e <osThreadNew+0xca>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d108      	bne.n	800b41e <osThreadNew+0xca>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d104      	bne.n	800b41e <osThreadNew+0xca>
          mem = 0;
 800b414:	2300      	movs	r3, #0
 800b416:	61bb      	str	r3, [r7, #24]
 800b418:	e001      	b.n	800b41e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d110      	bne.n	800b446 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b42c:	9202      	str	r2, [sp, #8]
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	6a3a      	ldr	r2, [r7, #32]
 800b438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f000 fe0c 	bl	800c058 <xTaskCreateStatic>
 800b440:	4603      	mov	r3, r0
 800b442:	613b      	str	r3, [r7, #16]
 800b444:	e013      	b.n	800b46e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d110      	bne.n	800b46e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	f107 0310 	add.w	r3, r7, #16
 800b454:	9301      	str	r3, [sp, #4]
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f000 fe57 	bl	800c112 <xTaskCreate>
 800b464:	4603      	mov	r3, r0
 800b466:	2b01      	cmp	r3, #1
 800b468:	d001      	beq.n	800b46e <osThreadNew+0x11a>
            hTask = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b46e:	693b      	ldr	r3, [r7, #16]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3728      	adds	r7, #40	; 0x28
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b480:	f3ef 8305 	mrs	r3, IPSR
 800b484:	60bb      	str	r3, [r7, #8]
  return(result);
 800b486:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <osDelay+0x1c>
    stat = osErrorISR;
 800b48c:	f06f 0305 	mvn.w	r3, #5
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	e007      	b.n	800b4a4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b494:	2300      	movs	r3, #0
 800b496:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 ff7c 	bl	800c39c <vTaskDelay>
    }
  }

  return (stat);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	4a07      	ldr	r2, [pc, #28]	; (800b4dc <vApplicationGetIdleTaskMemory+0x2c>)
 800b4c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	4a06      	ldr	r2, [pc, #24]	; (800b4e0 <vApplicationGetIdleTaskMemory+0x30>)
 800b4c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2280      	movs	r2, #128	; 0x80
 800b4cc:	601a      	str	r2, [r3, #0]
}
 800b4ce:	bf00      	nop
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20000af0 	.word	0x20000af0
 800b4e0:	20000b4c 	.word	0x20000b4c

0800b4e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4a07      	ldr	r2, [pc, #28]	; (800b510 <vApplicationGetTimerTaskMemory+0x2c>)
 800b4f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	4a06      	ldr	r2, [pc, #24]	; (800b514 <vApplicationGetTimerTaskMemory+0x30>)
 800b4fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b502:	601a      	str	r2, [r3, #0]
}
 800b504:	bf00      	nop
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20000d4c 	.word	0x20000d4c
 800b514:	20000da8 	.word	0x20000da8

0800b518 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f103 0208 	add.w	r2, r3, #8
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f103 0208 	add.w	r2, r3, #8
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f103 0208 	add.w	r2, r3, #8
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b566:	bf00      	nop
 800b568:	370c      	adds	r7, #12
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b572:	b480      	push	{r7}
 800b574:	b085      	sub	sp, #20
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	689a      	ldr	r2, [r3, #8]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	683a      	ldr	r2, [r7, #0]
 800b596:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	601a      	str	r2, [r3, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5d0:	d103      	bne.n	800b5da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e00c      	b.n	800b5f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3308      	adds	r3, #8
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e002      	b.n	800b5e8 <vListInsert+0x2e>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d2f6      	bcs.n	800b5e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	601a      	str	r2, [r3, #0]
}
 800b620:	bf00      	nop
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	6892      	ldr	r2, [r2, #8]
 800b642:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	6852      	ldr	r2, [r2, #4]
 800b64c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	429a      	cmp	r2, r3
 800b656:	d103      	bne.n	800b660 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	689a      	ldr	r2, [r3, #8]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	1e5a      	subs	r2, r3, #1
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6a6:	bf00      	nop
 800b6a8:	e7fe      	b.n	800b6a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b6aa:	f002 f84b 	bl	800d744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6b6:	68f9      	ldr	r1, [r7, #12]
 800b6b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6ba:	fb01 f303 	mul.w	r3, r1, r3
 800b6be:	441a      	add	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	68f9      	ldr	r1, [r7, #12]
 800b6de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6e0:	fb01 f303 	mul.w	r3, r1, r3
 800b6e4:	441a      	add	r2, r3
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	22ff      	movs	r2, #255	; 0xff
 800b6ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	22ff      	movs	r2, #255	; 0xff
 800b6f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d114      	bne.n	800b72a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d01a      	beq.n	800b73e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3310      	adds	r3, #16
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f903 	bl	800c918 <xTaskRemoveFromEventList>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d012      	beq.n	800b73e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b718:	4b0c      	ldr	r3, [pc, #48]	; (800b74c <xQueueGenericReset+0xcc>)
 800b71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	e009      	b.n	800b73e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3310      	adds	r3, #16
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff fef2 	bl	800b518 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3324      	adds	r3, #36	; 0x24
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff feed 	bl	800b518 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b73e:	f002 f831 	bl	800d7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b742:	2301      	movs	r3, #1
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	e000ed04 	.word	0xe000ed04

0800b750 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b08e      	sub	sp, #56	; 0x38
 800b754:	af02      	add	r7, sp, #8
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <xQueueGenericCreateStatic+0x52>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <xQueueGenericCreateStatic+0x56>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e000      	b.n	800b7a8 <xQueueGenericCreateStatic+0x58>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	623b      	str	r3, [r7, #32]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d102      	bne.n	800b7ce <xQueueGenericCreateStatic+0x7e>
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <xQueueGenericCreateStatic+0x82>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e000      	b.n	800b7d4 <xQueueGenericCreateStatic+0x84>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d10a      	bne.n	800b7ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	61fb      	str	r3, [r7, #28]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7ee:	2350      	movs	r3, #80	; 0x50
 800b7f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2b50      	cmp	r3, #80	; 0x50
 800b7f6:	d00a      	beq.n	800b80e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	61bb      	str	r3, [r7, #24]
}
 800b80a:	bf00      	nop
 800b80c:	e7fe      	b.n	800b80c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b80e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00d      	beq.n	800b836 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b822:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	4613      	mov	r3, r2
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 f805 	bl	800b840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b838:	4618      	mov	r0, r3
 800b83a:	3730      	adds	r7, #48	; 0x30
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	e002      	b.n	800b862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b86e:	2101      	movs	r1, #1
 800b870:	69b8      	ldr	r0, [r7, #24]
 800b872:	f7ff ff05 	bl	800b680 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	78fa      	ldrb	r2, [r7, #3]
 800b87a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08e      	sub	sp, #56	; 0x38
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b896:	2300      	movs	r3, #0
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <xQueueGenericSend+0x32>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <xQueueGenericSend+0x40>
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <xQueueGenericSend+0x44>
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e000      	b.n	800b8ce <xQueueGenericSend+0x46>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d10a      	bne.n	800b8e8 <xQueueGenericSend+0x60>
	__asm volatile
 800b8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d6:	f383 8811 	msr	BASEPRI, r3
 800b8da:	f3bf 8f6f 	isb	sy
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8e4:	bf00      	nop
 800b8e6:	e7fe      	b.n	800b8e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d103      	bne.n	800b8f6 <xQueueGenericSend+0x6e>
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d101      	bne.n	800b8fa <xQueueGenericSend+0x72>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <xQueueGenericSend+0x74>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <xQueueGenericSend+0x8e>
	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b904:	f383 8811 	msr	BASEPRI, r3
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	f3bf 8f4f 	dsb	sy
 800b910:	623b      	str	r3, [r7, #32]
}
 800b912:	bf00      	nop
 800b914:	e7fe      	b.n	800b914 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b916:	f001 f9bd 	bl	800cc94 <xTaskGetSchedulerState>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <xQueueGenericSend+0x9e>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <xQueueGenericSend+0xa2>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <xQueueGenericSend+0xa4>
 800b92a:	2300      	movs	r3, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <xQueueGenericSend+0xbe>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	61fb      	str	r3, [r7, #28]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b946:	f001 fefd 	bl	800d744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b952:	429a      	cmp	r2, r3
 800b954:	d302      	bcc.n	800b95c <xQueueGenericSend+0xd4>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d129      	bne.n	800b9b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b95c:	683a      	ldr	r2, [r7, #0]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b962:	f000 fa0b 	bl	800bd7c <prvCopyDataToQueue>
 800b966:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d010      	beq.n	800b992 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	3324      	adds	r3, #36	; 0x24
 800b974:	4618      	mov	r0, r3
 800b976:	f000 ffcf 	bl	800c918 <xTaskRemoveFromEventList>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d013      	beq.n	800b9a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b980:	4b3f      	ldr	r3, [pc, #252]	; (800ba80 <xQueueGenericSend+0x1f8>)
 800b982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	e00a      	b.n	800b9a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b998:	4b39      	ldr	r3, [pc, #228]	; (800ba80 <xQueueGenericSend+0x1f8>)
 800b99a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9a8:	f001 fefc 	bl	800d7a4 <vPortExitCritical>
				return pdPASS;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	e063      	b.n	800ba78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9b6:	f001 fef5 	bl	800d7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e05c      	b.n	800ba78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d106      	bne.n	800b9d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9c4:	f107 0314 	add.w	r3, r7, #20
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f001 f809 	bl	800c9e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9d2:	f001 fee7 	bl	800d7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9d6:	f000 fd7b 	bl	800c4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9da:	f001 feb3 	bl	800d744 <vPortEnterCritical>
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9e4:	b25b      	sxtb	r3, r3
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d103      	bne.n	800b9f4 <xQueueGenericSend+0x16c>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9fa:	b25b      	sxtb	r3, r3
 800b9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba00:	d103      	bne.n	800ba0a <xQueueGenericSend+0x182>
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba0a:	f001 fecb 	bl	800d7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba0e:	1d3a      	adds	r2, r7, #4
 800ba10:	f107 0314 	add.w	r3, r7, #20
 800ba14:	4611      	mov	r1, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f000 fff8 	bl	800ca0c <xTaskCheckForTimeOut>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d124      	bne.n	800ba6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba24:	f000 faa2 	bl	800bf6c <prvIsQueueFull>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d018      	beq.n	800ba60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba30:	3310      	adds	r3, #16
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4611      	mov	r1, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 ff1e 	bl	800c878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba3e:	f000 fa2d 	bl	800be9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba42:	f000 fd53 	bl	800c4ec <xTaskResumeAll>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	f47f af7c 	bne.w	800b946 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba4e:	4b0c      	ldr	r3, [pc, #48]	; (800ba80 <xQueueGenericSend+0x1f8>)
 800ba50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	e772      	b.n	800b946 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba62:	f000 fa1b 	bl	800be9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba66:	f000 fd41 	bl	800c4ec <xTaskResumeAll>
 800ba6a:	e76c      	b.n	800b946 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba6e:	f000 fa15 	bl	800be9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba72:	f000 fd3b 	bl	800c4ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3738      	adds	r7, #56	; 0x38
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	e000ed04 	.word	0xe000ed04

0800ba84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b090      	sub	sp, #64	; 0x40
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
 800ba90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10a      	bne.n	800bab2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d103      	bne.n	800bac0 <xQueueGenericSendFromISR+0x3c>
 800bab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babc:	2b00      	cmp	r3, #0
 800babe:	d101      	bne.n	800bac4 <xQueueGenericSendFromISR+0x40>
 800bac0:	2301      	movs	r3, #1
 800bac2:	e000      	b.n	800bac6 <xQueueGenericSendFromISR+0x42>
 800bac4:	2300      	movs	r3, #0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	d103      	bne.n	800baee <xQueueGenericSendFromISR+0x6a>
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <xQueueGenericSendFromISR+0x6e>
 800baee:	2301      	movs	r3, #1
 800baf0:	e000      	b.n	800baf4 <xQueueGenericSendFromISR+0x70>
 800baf2:	2300      	movs	r3, #0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800baf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafc:	f383 8811 	msr	BASEPRI, r3
 800bb00:	f3bf 8f6f 	isb	sy
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	623b      	str	r3, [r7, #32]
}
 800bb0a:	bf00      	nop
 800bb0c:	e7fe      	b.n	800bb0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb0e:	f001 fefb 	bl	800d908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bb12:	f3ef 8211 	mrs	r2, BASEPRI
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	61fa      	str	r2, [r7, #28]
 800bb28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d302      	bcc.n	800bb40 <xQueueGenericSendFromISR+0xbc>
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d12f      	bne.n	800bba0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb56:	f000 f911 	bl	800bd7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb62:	d112      	bne.n	800bb8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d016      	beq.n	800bb9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	3324      	adds	r3, #36	; 0x24
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 fed1 	bl	800c918 <xTaskRemoveFromEventList>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00e      	beq.n	800bb9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00b      	beq.n	800bb9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	601a      	str	r2, [r3, #0]
 800bb88:	e007      	b.n	800bb9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb8e:	3301      	adds	r3, #1
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	b25a      	sxtb	r2, r3
 800bb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bb9e:	e001      	b.n	800bba4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bba0:	2300      	movs	r3, #0
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bbae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3740      	adds	r7, #64	; 0x40
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08c      	sub	sp, #48	; 0x30
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10a      	bne.n	800bbec <xQueueReceive+0x30>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	623b      	str	r3, [r7, #32]
}
 800bbe8:	bf00      	nop
 800bbea:	e7fe      	b.n	800bbea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d103      	bne.n	800bbfa <xQueueReceive+0x3e>
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <xQueueReceive+0x42>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <xQueueReceive+0x44>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10a      	bne.n	800bc1a <xQueueReceive+0x5e>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	61fb      	str	r3, [r7, #28]
}
 800bc16:	bf00      	nop
 800bc18:	e7fe      	b.n	800bc18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc1a:	f001 f83b 	bl	800cc94 <xTaskGetSchedulerState>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <xQueueReceive+0x6e>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <xQueueReceive+0x72>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e000      	b.n	800bc30 <xQueueReceive+0x74>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <xQueueReceive+0x8e>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	61bb      	str	r3, [r7, #24]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc4a:	f001 fd7b 	bl	800d744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d01f      	beq.n	800bc9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5e:	f000 f8f7 	bl	800be50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	1e5a      	subs	r2, r3, #1
 800bc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00f      	beq.n	800bc92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc74:	3310      	adds	r3, #16
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fe4e 	bl	800c918 <xTaskRemoveFromEventList>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc82:	4b3d      	ldr	r3, [pc, #244]	; (800bd78 <xQueueReceive+0x1bc>)
 800bc84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc92:	f001 fd87 	bl	800d7a4 <vPortExitCritical>
				return pdPASS;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e069      	b.n	800bd6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d103      	bne.n	800bca8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bca0:	f001 fd80 	bl	800d7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e062      	b.n	800bd6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d106      	bne.n	800bcbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bcae:	f107 0310 	add.w	r3, r7, #16
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 fe94 	bl	800c9e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bcbc:	f001 fd72 	bl	800d7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bcc0:	f000 fc06 	bl	800c4d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcc4:	f001 fd3e 	bl	800d744 <vPortEnterCritical>
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcce:	b25b      	sxtb	r3, r3
 800bcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd4:	d103      	bne.n	800bcde <xQueueReceive+0x122>
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcea:	d103      	bne.n	800bcf4 <xQueueReceive+0x138>
 800bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcf4:	f001 fd56 	bl	800d7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcf8:	1d3a      	adds	r2, r7, #4
 800bcfa:	f107 0310 	add.w	r3, r7, #16
 800bcfe:	4611      	mov	r1, r2
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 fe83 	bl	800ca0c <xTaskCheckForTimeOut>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d123      	bne.n	800bd54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0e:	f000 f917 	bl	800bf40 <prvIsQueueEmpty>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d017      	beq.n	800bd48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	3324      	adds	r3, #36	; 0x24
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 fda9 	bl	800c878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd28:	f000 f8b8 	bl	800be9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd2c:	f000 fbde 	bl	800c4ec <xTaskResumeAll>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d189      	bne.n	800bc4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd36:	4b10      	ldr	r3, [pc, #64]	; (800bd78 <xQueueReceive+0x1bc>)
 800bd38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3c:	601a      	str	r2, [r3, #0]
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	e780      	b.n	800bc4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4a:	f000 f8a7 	bl	800be9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd4e:	f000 fbcd 	bl	800c4ec <xTaskResumeAll>
 800bd52:	e77a      	b.n	800bc4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd56:	f000 f8a1 	bl	800be9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd5a:	f000 fbc7 	bl	800c4ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd60:	f000 f8ee 	bl	800bf40 <prvIsQueueEmpty>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f43f af6f 	beq.w	800bc4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3730      	adds	r7, #48	; 0x30
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	e000ed04 	.word	0xe000ed04

0800bd7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d10d      	bne.n	800bdb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d14d      	bne.n	800be3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 ff92 	bl	800ccd0 <xTaskPriorityDisinherit>
 800bdac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	609a      	str	r2, [r3, #8]
 800bdb4:	e043      	b.n	800be3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d119      	bne.n	800bdf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6858      	ldr	r0, [r3, #4]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	f009 fdfe 	bl	80159c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd4:	441a      	add	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d32b      	bcc.n	800be3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	605a      	str	r2, [r3, #4]
 800bdee:	e026      	b.n	800be3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	68d8      	ldr	r0, [r3, #12]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	f009 fde4 	bl	80159c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	68da      	ldr	r2, [r3, #12]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be08:	425b      	negs	r3, r3
 800be0a:	441a      	add	r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	68da      	ldr	r2, [r3, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d207      	bcs.n	800be2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	689a      	ldr	r2, [r3, #8]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be24:	425b      	negs	r3, r3
 800be26:	441a      	add	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d105      	bne.n	800be3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d002      	beq.n	800be3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800be46:	697b      	ldr	r3, [r7, #20]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d018      	beq.n	800be94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68da      	ldr	r2, [r3, #12]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	441a      	add	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68da      	ldr	r2, [r3, #12]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d303      	bcc.n	800be84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	68d9      	ldr	r1, [r3, #12]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8c:	461a      	mov	r2, r3
 800be8e:	6838      	ldr	r0, [r7, #0]
 800be90:	f009 fd9a 	bl	80159c8 <memcpy>
	}
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bea4:	f001 fc4e 	bl	800d744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800beae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800beb0:	e011      	b.n	800bed6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d012      	beq.n	800bee0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	3324      	adds	r3, #36	; 0x24
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fd2a 	bl	800c918 <xTaskRemoveFromEventList>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800beca:	f000 fe01 	bl	800cad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	dce9      	bgt.n	800beb2 <prvUnlockQueue+0x16>
 800bede:	e000      	b.n	800bee2 <prvUnlockQueue+0x46>
					break;
 800bee0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	22ff      	movs	r2, #255	; 0xff
 800bee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800beea:	f001 fc5b 	bl	800d7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800beee:	f001 fc29 	bl	800d744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bef8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800befa:	e011      	b.n	800bf20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d012      	beq.n	800bf2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	3310      	adds	r3, #16
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fd05 	bl	800c918 <xTaskRemoveFromEventList>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf14:	f000 fddc 	bl	800cad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf18:	7bbb      	ldrb	r3, [r7, #14]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dce9      	bgt.n	800befc <prvUnlockQueue+0x60>
 800bf28:	e000      	b.n	800bf2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	22ff      	movs	r2, #255	; 0xff
 800bf30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bf34:	f001 fc36 	bl	800d7a4 <vPortExitCritical>
}
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf48:	f001 fbfc 	bl	800d744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d102      	bne.n	800bf5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf54:	2301      	movs	r3, #1
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	e001      	b.n	800bf5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf5e:	f001 fc21 	bl	800d7a4 <vPortExitCritical>

	return xReturn;
 800bf62:	68fb      	ldr	r3, [r7, #12]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf74:	f001 fbe6 	bl	800d744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d102      	bne.n	800bf8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	e001      	b.n	800bf8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf8e:	f001 fc09 	bl	800d7a4 <vPortExitCritical>

	return xReturn;
 800bf92:	68fb      	ldr	r3, [r7, #12]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]
 800bfaa:	e014      	b.n	800bfd6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bfac:	4a0f      	ldr	r2, [pc, #60]	; (800bfec <vQueueAddToRegistry+0x50>)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10b      	bne.n	800bfd0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bfb8:	490c      	ldr	r1, [pc, #48]	; (800bfec <vQueueAddToRegistry+0x50>)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	683a      	ldr	r2, [r7, #0]
 800bfbe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bfc2:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <vQueueAddToRegistry+0x50>)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	4413      	add	r3, r2
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bfce:	e006      	b.n	800bfde <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b07      	cmp	r3, #7
 800bfda:	d9e7      	bls.n	800bfac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	20005470 	.word	0x20005470

0800bff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c000:	f001 fba0 	bl	800d744 <vPortEnterCritical>
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c00a:	b25b      	sxtb	r3, r3
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d103      	bne.n	800c01a <vQueueWaitForMessageRestricted+0x2a>
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2200      	movs	r2, #0
 800c016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c020:	b25b      	sxtb	r3, r3
 800c022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c026:	d103      	bne.n	800c030 <vQueueWaitForMessageRestricted+0x40>
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c030:	f001 fbb8 	bl	800d7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d106      	bne.n	800c04a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	3324      	adds	r3, #36	; 0x24
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	4618      	mov	r0, r3
 800c046:	f000 fc3b 	bl	800c8c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c04a:	6978      	ldr	r0, [r7, #20]
 800c04c:	f7ff ff26 	bl	800be9c <prvUnlockQueue>
	}
 800c050:	bf00      	nop
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08e      	sub	sp, #56	; 0x38
 800c05c:	af04      	add	r7, sp, #16
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10a      	bne.n	800c082 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	623b      	str	r3, [r7, #32]
}
 800c07e:	bf00      	nop
 800c080:	e7fe      	b.n	800c080 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10a      	bne.n	800c09e <xTaskCreateStatic+0x46>
	__asm volatile
 800c088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c08c:	f383 8811 	msr	BASEPRI, r3
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	61fb      	str	r3, [r7, #28]
}
 800c09a:	bf00      	nop
 800c09c:	e7fe      	b.n	800c09c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c09e:	235c      	movs	r3, #92	; 0x5c
 800c0a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b5c      	cmp	r3, #92	; 0x5c
 800c0a6:	d00a      	beq.n	800c0be <xTaskCreateStatic+0x66>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	61bb      	str	r3, [r7, #24]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c0be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d01e      	beq.n	800c104 <xTaskCreateStatic+0xac>
 800c0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d01b      	beq.n	800c104 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d8:	2202      	movs	r2, #2
 800c0da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c0de:	2300      	movs	r3, #0
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e4:	9302      	str	r3, [sp, #8]
 800c0e6:	f107 0314 	add.w	r3, r7, #20
 800c0ea:	9301      	str	r3, [sp, #4]
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	68b9      	ldr	r1, [r7, #8]
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f000 f850 	bl	800c19c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0fe:	f000 f8dd 	bl	800c2bc <prvAddNewTaskToReadyList>
 800c102:	e001      	b.n	800c108 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c108:	697b      	ldr	r3, [r7, #20]
	}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3728      	adds	r7, #40	; 0x28
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c112:	b580      	push	{r7, lr}
 800c114:	b08c      	sub	sp, #48	; 0x30
 800c116:	af04      	add	r7, sp, #16
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	603b      	str	r3, [r7, #0]
 800c11e:	4613      	mov	r3, r2
 800c120:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4618      	mov	r0, r3
 800c128:	f001 fc2e 	bl	800d988 <pvPortMalloc>
 800c12c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00e      	beq.n	800c152 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c134:	205c      	movs	r0, #92	; 0x5c
 800c136:	f001 fc27 	bl	800d988 <pvPortMalloc>
 800c13a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	631a      	str	r2, [r3, #48]	; 0x30
 800c148:	e005      	b.n	800c156 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c14a:	6978      	ldr	r0, [r7, #20]
 800c14c:	f001 fce8 	bl	800db20 <vPortFree>
 800c150:	e001      	b.n	800c156 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c152:	2300      	movs	r3, #0
 800c154:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d017      	beq.n	800c18c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	2200      	movs	r2, #0
 800c160:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c164:	88fa      	ldrh	r2, [r7, #6]
 800c166:	2300      	movs	r3, #0
 800c168:	9303      	str	r3, [sp, #12]
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	9302      	str	r3, [sp, #8]
 800c16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c170:	9301      	str	r3, [sp, #4]
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f000 f80e 	bl	800c19c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c180:	69f8      	ldr	r0, [r7, #28]
 800c182:	f000 f89b 	bl	800c2bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c186:	2301      	movs	r3, #1
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	e002      	b.n	800c192 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c18c:	f04f 33ff 	mov.w	r3, #4294967295
 800c190:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c192:	69bb      	ldr	r3, [r7, #24]
	}
 800c194:	4618      	mov	r0, r3
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	21a5      	movs	r1, #165	; 0xa5
 800c1b6:	f009 fc2f 	bl	8015a18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	f023 0307 	bic.w	r3, r3, #7
 800c1d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	617b      	str	r3, [r7, #20]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01f      	beq.n	800c23a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	e012      	b.n	800c226 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	4413      	add	r3, r2
 800c206:	7819      	ldrb	r1, [r3, #0]
 800c208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	4413      	add	r3, r2
 800c20e:	3334      	adds	r3, #52	; 0x34
 800c210:	460a      	mov	r2, r1
 800c212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	4413      	add	r3, r2
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d006      	beq.n	800c22e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	3301      	adds	r3, #1
 800c224:	61fb      	str	r3, [r7, #28]
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	2b0f      	cmp	r3, #15
 800c22a:	d9e9      	bls.n	800c200 <prvInitialiseNewTask+0x64>
 800c22c:	e000      	b.n	800c230 <prvInitialiseNewTask+0x94>
			{
				break;
 800c22e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	2200      	movs	r2, #0
 800c234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c238:	e003      	b.n	800c242 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	2b37      	cmp	r3, #55	; 0x37
 800c246:	d901      	bls.n	800c24c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c248:	2337      	movs	r3, #55	; 0x37
 800c24a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c256:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	2200      	movs	r2, #0
 800c25c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	3304      	adds	r3, #4
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff f978 	bl	800b558 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	3318      	adds	r3, #24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7ff f973 	bl	800b558 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	2200      	movs	r2, #0
 800c28c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	68f9      	ldr	r1, [r7, #12]
 800c29a:	69b8      	ldr	r0, [r7, #24]
 800c29c:	f001 f928 	bl	800d4f0 <pxPortInitialiseStack>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2b2:	bf00      	nop
 800c2b4:	3720      	adds	r7, #32
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c2c4:	f001 fa3e 	bl	800d744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c2c8:	4b2d      	ldr	r3, [pc, #180]	; (800c380 <prvAddNewTaskToReadyList+0xc4>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	4a2c      	ldr	r2, [pc, #176]	; (800c380 <prvAddNewTaskToReadyList+0xc4>)
 800c2d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c2d2:	4b2c      	ldr	r3, [pc, #176]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d109      	bne.n	800c2ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c2da:	4a2a      	ldr	r2, [pc, #168]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c2e0:	4b27      	ldr	r3, [pc, #156]	; (800c380 <prvAddNewTaskToReadyList+0xc4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d110      	bne.n	800c30a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c2e8:	f000 fc16 	bl	800cb18 <prvInitialiseTaskLists>
 800c2ec:	e00d      	b.n	800c30a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c2ee:	4b26      	ldr	r3, [pc, #152]	; (800c388 <prvAddNewTaskToReadyList+0xcc>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d109      	bne.n	800c30a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	429a      	cmp	r2, r3
 800c302:	d802      	bhi.n	800c30a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c304:	4a1f      	ldr	r2, [pc, #124]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c30a:	4b20      	ldr	r3, [pc, #128]	; (800c38c <prvAddNewTaskToReadyList+0xd0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3301      	adds	r3, #1
 800c310:	4a1e      	ldr	r2, [pc, #120]	; (800c38c <prvAddNewTaskToReadyList+0xd0>)
 800c312:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c314:	4b1d      	ldr	r3, [pc, #116]	; (800c38c <prvAddNewTaskToReadyList+0xd0>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c320:	4b1b      	ldr	r3, [pc, #108]	; (800c390 <prvAddNewTaskToReadyList+0xd4>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	429a      	cmp	r2, r3
 800c326:	d903      	bls.n	800c330 <prvAddNewTaskToReadyList+0x74>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	4a18      	ldr	r2, [pc, #96]	; (800c390 <prvAddNewTaskToReadyList+0xd4>)
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a15      	ldr	r2, [pc, #84]	; (800c394 <prvAddNewTaskToReadyList+0xd8>)
 800c33e:	441a      	add	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3304      	adds	r3, #4
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7ff f913 	bl	800b572 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c34c:	f001 fa2a 	bl	800d7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c350:	4b0d      	ldr	r3, [pc, #52]	; (800c388 <prvAddNewTaskToReadyList+0xcc>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00e      	beq.n	800c376 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	429a      	cmp	r2, r3
 800c364:	d207      	bcs.n	800c376 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <prvAddNewTaskToReadyList+0xdc>)
 800c368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	2000167c 	.word	0x2000167c
 800c384:	200011a8 	.word	0x200011a8
 800c388:	20001688 	.word	0x20001688
 800c38c:	20001698 	.word	0x20001698
 800c390:	20001684 	.word	0x20001684
 800c394:	200011ac 	.word	0x200011ac
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d017      	beq.n	800c3de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c3ae:	4b13      	ldr	r3, [pc, #76]	; (800c3fc <vTaskDelay+0x60>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00a      	beq.n	800c3cc <vTaskDelay+0x30>
	__asm volatile
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	60bb      	str	r3, [r7, #8]
}
 800c3c8:	bf00      	nop
 800c3ca:	e7fe      	b.n	800c3ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c3cc:	f000 f880 	bl	800c4d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fcea 	bl	800cdac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3d8:	f000 f888 	bl	800c4ec <xTaskResumeAll>
 800c3dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d107      	bne.n	800c3f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c3e4:	4b06      	ldr	r3, [pc, #24]	; (800c400 <vTaskDelay+0x64>)
 800c3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3f4:	bf00      	nop
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	200016a4 	.word	0x200016a4
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08a      	sub	sp, #40	; 0x28
 800c408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c40a:	2300      	movs	r3, #0
 800c40c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c412:	463a      	mov	r2, r7
 800c414:	1d39      	adds	r1, r7, #4
 800c416:	f107 0308 	add.w	r3, r7, #8
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7ff f848 	bl	800b4b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	9202      	str	r2, [sp, #8]
 800c428:	9301      	str	r3, [sp, #4]
 800c42a:	2300      	movs	r3, #0
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	2300      	movs	r3, #0
 800c430:	460a      	mov	r2, r1
 800c432:	4921      	ldr	r1, [pc, #132]	; (800c4b8 <vTaskStartScheduler+0xb4>)
 800c434:	4821      	ldr	r0, [pc, #132]	; (800c4bc <vTaskStartScheduler+0xb8>)
 800c436:	f7ff fe0f 	bl	800c058 <xTaskCreateStatic>
 800c43a:	4603      	mov	r3, r0
 800c43c:	4a20      	ldr	r2, [pc, #128]	; (800c4c0 <vTaskStartScheduler+0xbc>)
 800c43e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c440:	4b1f      	ldr	r3, [pc, #124]	; (800c4c0 <vTaskStartScheduler+0xbc>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c448:	2301      	movs	r3, #1
 800c44a:	617b      	str	r3, [r7, #20]
 800c44c:	e001      	b.n	800c452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c44e:	2300      	movs	r3, #0
 800c450:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d102      	bne.n	800c45e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c458:	f000 fcfc 	bl	800ce54 <xTimerCreateTimerTask>
 800c45c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d116      	bne.n	800c492 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	613b      	str	r3, [r7, #16]
}
 800c476:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c478:	4b12      	ldr	r3, [pc, #72]	; (800c4c4 <vTaskStartScheduler+0xc0>)
 800c47a:	f04f 32ff 	mov.w	r2, #4294967295
 800c47e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c480:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <vTaskStartScheduler+0xc4>)
 800c482:	2201      	movs	r2, #1
 800c484:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <vTaskStartScheduler+0xc8>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c48c:	f001 f8b8 	bl	800d600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c490:	e00e      	b.n	800c4b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c498:	d10a      	bne.n	800c4b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49e:	f383 8811 	msr	BASEPRI, r3
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	60fb      	str	r3, [r7, #12]
}
 800c4ac:	bf00      	nop
 800c4ae:	e7fe      	b.n	800c4ae <vTaskStartScheduler+0xaa>
}
 800c4b0:	bf00      	nop
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	0801645c 	.word	0x0801645c
 800c4bc:	0800cae9 	.word	0x0800cae9
 800c4c0:	200016a0 	.word	0x200016a0
 800c4c4:	2000169c 	.word	0x2000169c
 800c4c8:	20001688 	.word	0x20001688
 800c4cc:	20001680 	.word	0x20001680

0800c4d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c4d4:	4b04      	ldr	r3, [pc, #16]	; (800c4e8 <vTaskSuspendAll+0x18>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	4a03      	ldr	r2, [pc, #12]	; (800c4e8 <vTaskSuspendAll+0x18>)
 800c4dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c4de:	bf00      	nop
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	200016a4 	.word	0x200016a4

0800c4ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c4fa:	4b42      	ldr	r3, [pc, #264]	; (800c604 <xTaskResumeAll+0x118>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <xTaskResumeAll+0x2c>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	f383 8811 	msr	BASEPRI, r3
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	f3bf 8f4f 	dsb	sy
 800c512:	603b      	str	r3, [r7, #0]
}
 800c514:	bf00      	nop
 800c516:	e7fe      	b.n	800c516 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c518:	f001 f914 	bl	800d744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c51c:	4b39      	ldr	r3, [pc, #228]	; (800c604 <xTaskResumeAll+0x118>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	3b01      	subs	r3, #1
 800c522:	4a38      	ldr	r2, [pc, #224]	; (800c604 <xTaskResumeAll+0x118>)
 800c524:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c526:	4b37      	ldr	r3, [pc, #220]	; (800c604 <xTaskResumeAll+0x118>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d162      	bne.n	800c5f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c52e:	4b36      	ldr	r3, [pc, #216]	; (800c608 <xTaskResumeAll+0x11c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d05e      	beq.n	800c5f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c536:	e02f      	b.n	800c598 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c538:	4b34      	ldr	r3, [pc, #208]	; (800c60c <xTaskResumeAll+0x120>)
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3318      	adds	r3, #24
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff f871 	bl	800b62c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff f86c 	bl	800b62c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	4b2d      	ldr	r3, [pc, #180]	; (800c610 <xTaskResumeAll+0x124>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d903      	bls.n	800c568 <xTaskResumeAll+0x7c>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c564:	4a2a      	ldr	r2, [pc, #168]	; (800c610 <xTaskResumeAll+0x124>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4a27      	ldr	r2, [pc, #156]	; (800c614 <xTaskResumeAll+0x128>)
 800c576:	441a      	add	r2, r3
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3304      	adds	r3, #4
 800c57c:	4619      	mov	r1, r3
 800c57e:	4610      	mov	r0, r2
 800c580:	f7fe fff7 	bl	800b572 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c588:	4b23      	ldr	r3, [pc, #140]	; (800c618 <xTaskResumeAll+0x12c>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	429a      	cmp	r2, r3
 800c590:	d302      	bcc.n	800c598 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c592:	4b22      	ldr	r3, [pc, #136]	; (800c61c <xTaskResumeAll+0x130>)
 800c594:	2201      	movs	r2, #1
 800c596:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c598:	4b1c      	ldr	r3, [pc, #112]	; (800c60c <xTaskResumeAll+0x120>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1cb      	bne.n	800c538 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c5a6:	f000 fb55 	bl	800cc54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c5aa:	4b1d      	ldr	r3, [pc, #116]	; (800c620 <xTaskResumeAll+0x134>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d010      	beq.n	800c5d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5b6:	f000 f847 	bl	800c648 <xTaskIncrementTick>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c5c0:	4b16      	ldr	r3, [pc, #88]	; (800c61c <xTaskResumeAll+0x130>)
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1f1      	bne.n	800c5b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c5d2:	4b13      	ldr	r3, [pc, #76]	; (800c620 <xTaskResumeAll+0x134>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5d8:	4b10      	ldr	r3, [pc, #64]	; (800c61c <xTaskResumeAll+0x130>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d009      	beq.n	800c5f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5e4:	4b0f      	ldr	r3, [pc, #60]	; (800c624 <xTaskResumeAll+0x138>)
 800c5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5f4:	f001 f8d6 	bl	800d7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	200016a4 	.word	0x200016a4
 800c608:	2000167c 	.word	0x2000167c
 800c60c:	2000163c 	.word	0x2000163c
 800c610:	20001684 	.word	0x20001684
 800c614:	200011ac 	.word	0x200011ac
 800c618:	200011a8 	.word	0x200011a8
 800c61c:	20001690 	.word	0x20001690
 800c620:	2000168c 	.word	0x2000168c
 800c624:	e000ed04 	.word	0xe000ed04

0800c628 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c62e:	4b05      	ldr	r3, [pc, #20]	; (800c644 <xTaskGetTickCount+0x1c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c634:	687b      	ldr	r3, [r7, #4]
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20001680 	.word	0x20001680

0800c648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c652:	4b4f      	ldr	r3, [pc, #316]	; (800c790 <xTaskIncrementTick+0x148>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	f040 808f 	bne.w	800c77a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c65c:	4b4d      	ldr	r3, [pc, #308]	; (800c794 <xTaskIncrementTick+0x14c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	3301      	adds	r3, #1
 800c662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c664:	4a4b      	ldr	r2, [pc, #300]	; (800c794 <xTaskIncrementTick+0x14c>)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d120      	bne.n	800c6b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c670:	4b49      	ldr	r3, [pc, #292]	; (800c798 <xTaskIncrementTick+0x150>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00a      	beq.n	800c690 <xTaskIncrementTick+0x48>
	__asm volatile
 800c67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	603b      	str	r3, [r7, #0]
}
 800c68c:	bf00      	nop
 800c68e:	e7fe      	b.n	800c68e <xTaskIncrementTick+0x46>
 800c690:	4b41      	ldr	r3, [pc, #260]	; (800c798 <xTaskIncrementTick+0x150>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	4b41      	ldr	r3, [pc, #260]	; (800c79c <xTaskIncrementTick+0x154>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a3f      	ldr	r2, [pc, #252]	; (800c798 <xTaskIncrementTick+0x150>)
 800c69c:	6013      	str	r3, [r2, #0]
 800c69e:	4a3f      	ldr	r2, [pc, #252]	; (800c79c <xTaskIncrementTick+0x154>)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	4b3e      	ldr	r3, [pc, #248]	; (800c7a0 <xTaskIncrementTick+0x158>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	4a3d      	ldr	r2, [pc, #244]	; (800c7a0 <xTaskIncrementTick+0x158>)
 800c6ac:	6013      	str	r3, [r2, #0]
 800c6ae:	f000 fad1 	bl	800cc54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6b2:	4b3c      	ldr	r3, [pc, #240]	; (800c7a4 <xTaskIncrementTick+0x15c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d349      	bcc.n	800c750 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6bc:	4b36      	ldr	r3, [pc, #216]	; (800c798 <xTaskIncrementTick+0x150>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d104      	bne.n	800c6d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6c6:	4b37      	ldr	r3, [pc, #220]	; (800c7a4 <xTaskIncrementTick+0x15c>)
 800c6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6cc:	601a      	str	r2, [r3, #0]
					break;
 800c6ce:	e03f      	b.n	800c750 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6d0:	4b31      	ldr	r3, [pc, #196]	; (800c798 <xTaskIncrementTick+0x150>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6e0:	693a      	ldr	r2, [r7, #16]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d203      	bcs.n	800c6f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6e8:	4a2e      	ldr	r2, [pc, #184]	; (800c7a4 <xTaskIncrementTick+0x15c>)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c6ee:	e02f      	b.n	800c750 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe ff99 	bl	800b62c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d004      	beq.n	800c70c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	3318      	adds	r3, #24
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe ff90 	bl	800b62c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c710:	4b25      	ldr	r3, [pc, #148]	; (800c7a8 <xTaskIncrementTick+0x160>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d903      	bls.n	800c720 <xTaskIncrementTick+0xd8>
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	4a22      	ldr	r2, [pc, #136]	; (800c7a8 <xTaskIncrementTick+0x160>)
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c724:	4613      	mov	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	4413      	add	r3, r2
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	4a1f      	ldr	r2, [pc, #124]	; (800c7ac <xTaskIncrementTick+0x164>)
 800c72e:	441a      	add	r2, r3
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	3304      	adds	r3, #4
 800c734:	4619      	mov	r1, r3
 800c736:	4610      	mov	r0, r2
 800c738:	f7fe ff1b 	bl	800b572 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c740:	4b1b      	ldr	r3, [pc, #108]	; (800c7b0 <xTaskIncrementTick+0x168>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c746:	429a      	cmp	r2, r3
 800c748:	d3b8      	bcc.n	800c6bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c74a:	2301      	movs	r3, #1
 800c74c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c74e:	e7b5      	b.n	800c6bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c750:	4b17      	ldr	r3, [pc, #92]	; (800c7b0 <xTaskIncrementTick+0x168>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c756:	4915      	ldr	r1, [pc, #84]	; (800c7ac <xTaskIncrementTick+0x164>)
 800c758:	4613      	mov	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	440b      	add	r3, r1
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d901      	bls.n	800c76c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c768:	2301      	movs	r3, #1
 800c76a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c76c:	4b11      	ldr	r3, [pc, #68]	; (800c7b4 <xTaskIncrementTick+0x16c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d007      	beq.n	800c784 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c774:	2301      	movs	r3, #1
 800c776:	617b      	str	r3, [r7, #20]
 800c778:	e004      	b.n	800c784 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c77a:	4b0f      	ldr	r3, [pc, #60]	; (800c7b8 <xTaskIncrementTick+0x170>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3301      	adds	r3, #1
 800c780:	4a0d      	ldr	r2, [pc, #52]	; (800c7b8 <xTaskIncrementTick+0x170>)
 800c782:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c784:	697b      	ldr	r3, [r7, #20]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	200016a4 	.word	0x200016a4
 800c794:	20001680 	.word	0x20001680
 800c798:	20001634 	.word	0x20001634
 800c79c:	20001638 	.word	0x20001638
 800c7a0:	20001694 	.word	0x20001694
 800c7a4:	2000169c 	.word	0x2000169c
 800c7a8:	20001684 	.word	0x20001684
 800c7ac:	200011ac 	.word	0x200011ac
 800c7b0:	200011a8 	.word	0x200011a8
 800c7b4:	20001690 	.word	0x20001690
 800c7b8:	2000168c 	.word	0x2000168c

0800c7bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7c2:	4b28      	ldr	r3, [pc, #160]	; (800c864 <vTaskSwitchContext+0xa8>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d003      	beq.n	800c7d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7ca:	4b27      	ldr	r3, [pc, #156]	; (800c868 <vTaskSwitchContext+0xac>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7d0:	e041      	b.n	800c856 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c7d2:	4b25      	ldr	r3, [pc, #148]	; (800c868 <vTaskSwitchContext+0xac>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d8:	4b24      	ldr	r3, [pc, #144]	; (800c86c <vTaskSwitchContext+0xb0>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	e010      	b.n	800c802 <vTaskSwitchContext+0x46>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10a      	bne.n	800c7fc <vTaskSwitchContext+0x40>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	607b      	str	r3, [r7, #4]
}
 800c7f8:	bf00      	nop
 800c7fa:	e7fe      	b.n	800c7fa <vTaskSwitchContext+0x3e>
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3b01      	subs	r3, #1
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	491b      	ldr	r1, [pc, #108]	; (800c870 <vTaskSwitchContext+0xb4>)
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	4613      	mov	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	440b      	add	r3, r1
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0e4      	beq.n	800c7e0 <vTaskSwitchContext+0x24>
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	4613      	mov	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4a13      	ldr	r2, [pc, #76]	; (800c870 <vTaskSwitchContext+0xb4>)
 800c822:	4413      	add	r3, r2
 800c824:	60bb      	str	r3, [r7, #8]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	605a      	str	r2, [r3, #4]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	685a      	ldr	r2, [r3, #4]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	3308      	adds	r3, #8
 800c838:	429a      	cmp	r2, r3
 800c83a:	d104      	bne.n	800c846 <vTaskSwitchContext+0x8a>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	685a      	ldr	r2, [r3, #4]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	605a      	str	r2, [r3, #4]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	4a09      	ldr	r2, [pc, #36]	; (800c874 <vTaskSwitchContext+0xb8>)
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	4a06      	ldr	r2, [pc, #24]	; (800c86c <vTaskSwitchContext+0xb0>)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6013      	str	r3, [r2, #0]
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	200016a4 	.word	0x200016a4
 800c868:	20001690 	.word	0x20001690
 800c86c:	20001684 	.word	0x20001684
 800c870:	200011ac 	.word	0x200011ac
 800c874:	200011a8 	.word	0x200011a8

0800c878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10a      	bne.n	800c89e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	60fb      	str	r3, [r7, #12]
}
 800c89a:	bf00      	nop
 800c89c:	e7fe      	b.n	800c89c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c89e:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <vTaskPlaceOnEventList+0x44>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	3318      	adds	r3, #24
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7fe fe87 	bl	800b5ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	6838      	ldr	r0, [r7, #0]
 800c8b0:	f000 fa7c 	bl	800cdac <prvAddCurrentTaskToDelayedList>
}
 800c8b4:	bf00      	nop
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	200011a8 	.word	0x200011a8

0800c8c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10a      	bne.n	800c8e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	617b      	str	r3, [r7, #20]
}
 800c8e4:	bf00      	nop
 800c8e6:	e7fe      	b.n	800c8e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8e8:	4b0a      	ldr	r3, [pc, #40]	; (800c914 <vTaskPlaceOnEventListRestricted+0x54>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3318      	adds	r3, #24
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f7fe fe3e 	bl	800b572 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c900:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c902:	6879      	ldr	r1, [r7, #4]
 800c904:	68b8      	ldr	r0, [r7, #8]
 800c906:	f000 fa51 	bl	800cdac <prvAddCurrentTaskToDelayedList>
	}
 800c90a:	bf00      	nop
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	200011a8 	.word	0x200011a8

0800c918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68db      	ldr	r3, [r3, #12]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	60fb      	str	r3, [r7, #12]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	3318      	adds	r3, #24
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fe fe6f 	bl	800b62c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c94e:	4b1e      	ldr	r3, [pc, #120]	; (800c9c8 <xTaskRemoveFromEventList+0xb0>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d11d      	bne.n	800c992 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	3304      	adds	r3, #4
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fe66 	bl	800b62c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c964:	4b19      	ldr	r3, [pc, #100]	; (800c9cc <xTaskRemoveFromEventList+0xb4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d903      	bls.n	800c974 <xTaskRemoveFromEventList+0x5c>
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c970:	4a16      	ldr	r2, [pc, #88]	; (800c9cc <xTaskRemoveFromEventList+0xb4>)
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4613      	mov	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4a13      	ldr	r2, [pc, #76]	; (800c9d0 <xTaskRemoveFromEventList+0xb8>)
 800c982:	441a      	add	r2, r3
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	3304      	adds	r3, #4
 800c988:	4619      	mov	r1, r3
 800c98a:	4610      	mov	r0, r2
 800c98c:	f7fe fdf1 	bl	800b572 <vListInsertEnd>
 800c990:	e005      	b.n	800c99e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	3318      	adds	r3, #24
 800c996:	4619      	mov	r1, r3
 800c998:	480e      	ldr	r0, [pc, #56]	; (800c9d4 <xTaskRemoveFromEventList+0xbc>)
 800c99a:	f7fe fdea 	bl	800b572 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a2:	4b0d      	ldr	r3, [pc, #52]	; (800c9d8 <xTaskRemoveFromEventList+0xc0>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d905      	bls.n	800c9b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9b0:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <xTaskRemoveFromEventList+0xc4>)
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	e001      	b.n	800c9bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9bc:	697b      	ldr	r3, [r7, #20]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200016a4 	.word	0x200016a4
 800c9cc:	20001684 	.word	0x20001684
 800c9d0:	200011ac 	.word	0x200011ac
 800c9d4:	2000163c 	.word	0x2000163c
 800c9d8:	200011a8 	.word	0x200011a8
 800c9dc:	20001690 	.word	0x20001690

0800c9e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9e8:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <vTaskInternalSetTimeOutState+0x24>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9f0:	4b05      	ldr	r3, [pc, #20]	; (800ca08 <vTaskInternalSetTimeOutState+0x28>)
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	605a      	str	r2, [r3, #4]
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	20001694 	.word	0x20001694
 800ca08:	20001680 	.word	0x20001680

0800ca0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	613b      	str	r3, [r7, #16]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10a      	bne.n	800ca4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3c:	f383 8811 	msr	BASEPRI, r3
 800ca40:	f3bf 8f6f 	isb	sy
 800ca44:	f3bf 8f4f 	dsb	sy
 800ca48:	60fb      	str	r3, [r7, #12]
}
 800ca4a:	bf00      	nop
 800ca4c:	e7fe      	b.n	800ca4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ca4e:	f000 fe79 	bl	800d744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca52:	4b1d      	ldr	r3, [pc, #116]	; (800cac8 <xTaskCheckForTimeOut+0xbc>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	69ba      	ldr	r2, [r7, #24]
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d102      	bne.n	800ca72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	e023      	b.n	800caba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <xTaskCheckForTimeOut+0xc0>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d007      	beq.n	800ca8e <xTaskCheckForTimeOut+0x82>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	69ba      	ldr	r2, [r7, #24]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d302      	bcc.n	800ca8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	61fb      	str	r3, [r7, #28]
 800ca8c:	e015      	b.n	800caba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d20b      	bcs.n	800cab0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	1ad2      	subs	r2, r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff ff9b 	bl	800c9e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800caaa:	2300      	movs	r3, #0
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	e004      	b.n	800caba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cab6:	2301      	movs	r3, #1
 800cab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800caba:	f000 fe73 	bl	800d7a4 <vPortExitCritical>

	return xReturn;
 800cabe:	69fb      	ldr	r3, [r7, #28]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3720      	adds	r7, #32
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20001680 	.word	0x20001680
 800cacc:	20001694 	.word	0x20001694

0800cad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cad4:	4b03      	ldr	r3, [pc, #12]	; (800cae4 <vTaskMissedYield+0x14>)
 800cad6:	2201      	movs	r2, #1
 800cad8:	601a      	str	r2, [r3, #0]
}
 800cada:	bf00      	nop
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr
 800cae4:	20001690 	.word	0x20001690

0800cae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800caf0:	f000 f852 	bl	800cb98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <prvIdleTask+0x28>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d9f9      	bls.n	800caf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <prvIdleTask+0x2c>)
 800cafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb02:	601a      	str	r2, [r3, #0]
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb0c:	e7f0      	b.n	800caf0 <prvIdleTask+0x8>
 800cb0e:	bf00      	nop
 800cb10:	200011ac 	.word	0x200011ac
 800cb14:	e000ed04 	.word	0xe000ed04

0800cb18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb1e:	2300      	movs	r3, #0
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	e00c      	b.n	800cb3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4a12      	ldr	r2, [pc, #72]	; (800cb78 <prvInitialiseTaskLists+0x60>)
 800cb30:	4413      	add	r3, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe fcf0 	bl	800b518 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b37      	cmp	r3, #55	; 0x37
 800cb42:	d9ef      	bls.n	800cb24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb44:	480d      	ldr	r0, [pc, #52]	; (800cb7c <prvInitialiseTaskLists+0x64>)
 800cb46:	f7fe fce7 	bl	800b518 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb4a:	480d      	ldr	r0, [pc, #52]	; (800cb80 <prvInitialiseTaskLists+0x68>)
 800cb4c:	f7fe fce4 	bl	800b518 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb50:	480c      	ldr	r0, [pc, #48]	; (800cb84 <prvInitialiseTaskLists+0x6c>)
 800cb52:	f7fe fce1 	bl	800b518 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb56:	480c      	ldr	r0, [pc, #48]	; (800cb88 <prvInitialiseTaskLists+0x70>)
 800cb58:	f7fe fcde 	bl	800b518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb5c:	480b      	ldr	r0, [pc, #44]	; (800cb8c <prvInitialiseTaskLists+0x74>)
 800cb5e:	f7fe fcdb 	bl	800b518 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb62:	4b0b      	ldr	r3, [pc, #44]	; (800cb90 <prvInitialiseTaskLists+0x78>)
 800cb64:	4a05      	ldr	r2, [pc, #20]	; (800cb7c <prvInitialiseTaskLists+0x64>)
 800cb66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb68:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <prvInitialiseTaskLists+0x7c>)
 800cb6a:	4a05      	ldr	r2, [pc, #20]	; (800cb80 <prvInitialiseTaskLists+0x68>)
 800cb6c:	601a      	str	r2, [r3, #0]
}
 800cb6e:	bf00      	nop
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	200011ac 	.word	0x200011ac
 800cb7c:	2000160c 	.word	0x2000160c
 800cb80:	20001620 	.word	0x20001620
 800cb84:	2000163c 	.word	0x2000163c
 800cb88:	20001650 	.word	0x20001650
 800cb8c:	20001668 	.word	0x20001668
 800cb90:	20001634 	.word	0x20001634
 800cb94:	20001638 	.word	0x20001638

0800cb98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb9e:	e019      	b.n	800cbd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cba0:	f000 fdd0 	bl	800d744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cba4:	4b10      	ldr	r3, [pc, #64]	; (800cbe8 <prvCheckTasksWaitingTermination+0x50>)
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f7fe fd3b 	bl	800b62c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbb6:	4b0d      	ldr	r3, [pc, #52]	; (800cbec <prvCheckTasksWaitingTermination+0x54>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	4a0b      	ldr	r2, [pc, #44]	; (800cbec <prvCheckTasksWaitingTermination+0x54>)
 800cbbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	4a0a      	ldr	r2, [pc, #40]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbca:	f000 fdeb 	bl	800d7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f810 	bl	800cbf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbd4:	4b06      	ldr	r3, [pc, #24]	; (800cbf0 <prvCheckTasksWaitingTermination+0x58>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e1      	bne.n	800cba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cbdc:	bf00      	nop
 800cbde:	bf00      	nop
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20001650 	.word	0x20001650
 800cbec:	2000167c 	.word	0x2000167c
 800cbf0:	20001664 	.word	0x20001664

0800cbf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d108      	bne.n	800cc18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 ff88 	bl	800db20 <vPortFree>
				vPortFree( pxTCB );
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 ff85 	bl	800db20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc16:	e018      	b.n	800cc4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d103      	bne.n	800cc2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 ff7c 	bl	800db20 <vPortFree>
	}
 800cc28:	e00f      	b.n	800cc4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d00a      	beq.n	800cc4a <prvDeleteTCB+0x56>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	60fb      	str	r3, [r7, #12]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <prvDeleteTCB+0x54>
	}
 800cc4a:	bf00      	nop
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc5a:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <prvResetNextTaskUnblockTime+0x38>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d104      	bne.n	800cc6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc64:	4b0a      	ldr	r3, [pc, #40]	; (800cc90 <prvResetNextTaskUnblockTime+0x3c>)
 800cc66:	f04f 32ff 	mov.w	r2, #4294967295
 800cc6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc6c:	e008      	b.n	800cc80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc6e:	4b07      	ldr	r3, [pc, #28]	; (800cc8c <prvResetNextTaskUnblockTime+0x38>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4a04      	ldr	r2, [pc, #16]	; (800cc90 <prvResetNextTaskUnblockTime+0x3c>)
 800cc7e:	6013      	str	r3, [r2, #0]
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	20001634 	.word	0x20001634
 800cc90:	2000169c 	.word	0x2000169c

0800cc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <xTaskGetSchedulerState+0x34>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cca2:	2301      	movs	r3, #1
 800cca4:	607b      	str	r3, [r7, #4]
 800cca6:	e008      	b.n	800ccba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cca8:	4b08      	ldr	r3, [pc, #32]	; (800cccc <xTaskGetSchedulerState+0x38>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	607b      	str	r3, [r7, #4]
 800ccb4:	e001      	b.n	800ccba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ccba:	687b      	ldr	r3, [r7, #4]
	}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	20001688 	.word	0x20001688
 800cccc:	200016a4 	.word	0x200016a4

0800ccd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d056      	beq.n	800cd94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cce6:	4b2e      	ldr	r3, [pc, #184]	; (800cda0 <xTaskPriorityDisinherit+0xd0>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	693a      	ldr	r2, [r7, #16]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d00a      	beq.n	800cd06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	60bb      	str	r3, [r7, #8]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd28:	1e5a      	subs	r2, r3, #1
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d02c      	beq.n	800cd94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d128      	bne.n	800cd94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	3304      	adds	r3, #4
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fc70 	bl	800b62c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd64:	4b0f      	ldr	r3, [pc, #60]	; (800cda4 <xTaskPriorityDisinherit+0xd4>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d903      	bls.n	800cd74 <xTaskPriorityDisinherit+0xa4>
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	4a0c      	ldr	r2, [pc, #48]	; (800cda4 <xTaskPriorityDisinherit+0xd4>)
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4a09      	ldr	r2, [pc, #36]	; (800cda8 <xTaskPriorityDisinherit+0xd8>)
 800cd82:	441a      	add	r2, r3
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fe fbf1 	bl	800b572 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd90:	2301      	movs	r3, #1
 800cd92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd94:	697b      	ldr	r3, [r7, #20]
	}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	200011a8 	.word	0x200011a8
 800cda4:	20001684 	.word	0x20001684
 800cda8:	200011ac 	.word	0x200011ac

0800cdac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdb6:	4b21      	ldr	r3, [pc, #132]	; (800ce3c <prvAddCurrentTaskToDelayedList+0x90>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdbc:	4b20      	ldr	r3, [pc, #128]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3304      	adds	r3, #4
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fe fc32 	bl	800b62c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdce:	d10a      	bne.n	800cde6 <prvAddCurrentTaskToDelayedList+0x3a>
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d007      	beq.n	800cde6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdd6:	4b1a      	ldr	r3, [pc, #104]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4619      	mov	r1, r3
 800cdde:	4819      	ldr	r0, [pc, #100]	; (800ce44 <prvAddCurrentTaskToDelayedList+0x98>)
 800cde0:	f7fe fbc7 	bl	800b572 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cde4:	e026      	b.n	800ce34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4413      	add	r3, r2
 800cdec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cdee:	4b14      	ldr	r3, [pc, #80]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68ba      	ldr	r2, [r7, #8]
 800cdf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d209      	bcs.n	800ce12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdfe:	4b12      	ldr	r3, [pc, #72]	; (800ce48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3304      	adds	r3, #4
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	f7fe fbd5 	bl	800b5ba <vListInsert>
}
 800ce10:	e010      	b.n	800ce34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce12:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	4b0a      	ldr	r3, [pc, #40]	; (800ce40 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	4610      	mov	r0, r2
 800ce20:	f7fe fbcb 	bl	800b5ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce24:	4b0a      	ldr	r3, [pc, #40]	; (800ce50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d202      	bcs.n	800ce34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce2e:	4a08      	ldr	r2, [pc, #32]	; (800ce50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	6013      	str	r3, [r2, #0]
}
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	20001680 	.word	0x20001680
 800ce40:	200011a8 	.word	0x200011a8
 800ce44:	20001668 	.word	0x20001668
 800ce48:	20001638 	.word	0x20001638
 800ce4c:	20001634 	.word	0x20001634
 800ce50:	2000169c 	.word	0x2000169c

0800ce54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b08a      	sub	sp, #40	; 0x28
 800ce58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce5e:	f000 fb07 	bl	800d470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce62:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <xTimerCreateTimerTask+0x80>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d021      	beq.n	800ceae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce72:	1d3a      	adds	r2, r7, #4
 800ce74:	f107 0108 	add.w	r1, r7, #8
 800ce78:	f107 030c 	add.w	r3, r7, #12
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fe fb31 	bl	800b4e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce82:	6879      	ldr	r1, [r7, #4]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	68fa      	ldr	r2, [r7, #12]
 800ce88:	9202      	str	r2, [sp, #8]
 800ce8a:	9301      	str	r3, [sp, #4]
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	2300      	movs	r3, #0
 800ce92:	460a      	mov	r2, r1
 800ce94:	4910      	ldr	r1, [pc, #64]	; (800ced8 <xTimerCreateTimerTask+0x84>)
 800ce96:	4811      	ldr	r0, [pc, #68]	; (800cedc <xTimerCreateTimerTask+0x88>)
 800ce98:	f7ff f8de 	bl	800c058 <xTaskCreateStatic>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	4a10      	ldr	r2, [pc, #64]	; (800cee0 <xTimerCreateTimerTask+0x8c>)
 800cea0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cea2:	4b0f      	ldr	r3, [pc, #60]	; (800cee0 <xTimerCreateTimerTask+0x8c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10a      	bne.n	800ceca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ceb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb8:	f383 8811 	msr	BASEPRI, r3
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	613b      	str	r3, [r7, #16]
}
 800cec6:	bf00      	nop
 800cec8:	e7fe      	b.n	800cec8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ceca:	697b      	ldr	r3, [r7, #20]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3718      	adds	r7, #24
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	200016d8 	.word	0x200016d8
 800ced8:	08016464 	.word	0x08016464
 800cedc:	0800d019 	.word	0x0800d019
 800cee0:	200016dc 	.word	0x200016dc

0800cee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b08a      	sub	sp, #40	; 0x28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10a      	bne.n	800cf12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	623b      	str	r3, [r7, #32]
}
 800cf0e:	bf00      	nop
 800cf10:	e7fe      	b.n	800cf10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf12:	4b1a      	ldr	r3, [pc, #104]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d02a      	beq.n	800cf70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	2b05      	cmp	r3, #5
 800cf2a:	dc18      	bgt.n	800cf5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf2c:	f7ff feb2 	bl	800cc94 <xTaskGetSchedulerState>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d109      	bne.n	800cf4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf36:	4b11      	ldr	r3, [pc, #68]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf38:	6818      	ldr	r0, [r3, #0]
 800cf3a:	f107 0110 	add.w	r1, r7, #16
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf42:	f7fe fca1 	bl	800b888 <xQueueGenericSend>
 800cf46:	6278      	str	r0, [r7, #36]	; 0x24
 800cf48:	e012      	b.n	800cf70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf4a:	4b0c      	ldr	r3, [pc, #48]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf4c:	6818      	ldr	r0, [r3, #0]
 800cf4e:	f107 0110 	add.w	r1, r7, #16
 800cf52:	2300      	movs	r3, #0
 800cf54:	2200      	movs	r2, #0
 800cf56:	f7fe fc97 	bl	800b888 <xQueueGenericSend>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24
 800cf5c:	e008      	b.n	800cf70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf5e:	4b07      	ldr	r3, [pc, #28]	; (800cf7c <xTimerGenericCommand+0x98>)
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	f107 0110 	add.w	r1, r7, #16
 800cf66:	2300      	movs	r3, #0
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	f7fe fd8b 	bl	800ba84 <xQueueGenericSendFromISR>
 800cf6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3728      	adds	r7, #40	; 0x28
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	200016d8 	.word	0x200016d8

0800cf80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af02      	add	r7, sp, #8
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf8a:	4b22      	ldr	r3, [pc, #136]	; (800d014 <prvProcessExpiredTimer+0x94>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	3304      	adds	r3, #4
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fb47 	bl	800b62c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d022      	beq.n	800cff2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	699a      	ldr	r2, [r3, #24]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	18d1      	adds	r1, r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	6978      	ldr	r0, [r7, #20]
 800cfba:	f000 f8d1 	bl	800d160 <prvInsertTimerInActiveList>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01f      	beq.n	800d004 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	2300      	movs	r3, #0
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6978      	ldr	r0, [r7, #20]
 800cfd0:	f7ff ff88 	bl	800cee4 <xTimerGenericCommand>
 800cfd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d113      	bne.n	800d004 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	60fb      	str	r3, [r7, #12]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cff8:	f023 0301 	bic.w	r3, r3, #1
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	6978      	ldr	r0, [r7, #20]
 800d00a:	4798      	blx	r3
}
 800d00c:	bf00      	nop
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	200016d0 	.word	0x200016d0

0800d018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d020:	f107 0308 	add.w	r3, r7, #8
 800d024:	4618      	mov	r0, r3
 800d026:	f000 f857 	bl	800d0d8 <prvGetNextExpireTime>
 800d02a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	4619      	mov	r1, r3
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 f803 	bl	800d03c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d036:	f000 f8d5 	bl	800d1e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d03a:	e7f1      	b.n	800d020 <prvTimerTask+0x8>

0800d03c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d046:	f7ff fa43 	bl	800c4d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d04a:	f107 0308 	add.w	r3, r7, #8
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 f866 	bl	800d120 <prvSampleTimeNow>
 800d054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d130      	bne.n	800d0be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10a      	bne.n	800d078 <prvProcessTimerOrBlockTask+0x3c>
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	429a      	cmp	r2, r3
 800d068:	d806      	bhi.n	800d078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d06a:	f7ff fa3f 	bl	800c4ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7ff ff85 	bl	800cf80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d076:	e024      	b.n	800d0c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d008      	beq.n	800d090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d07e:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <prvProcessTimerOrBlockTask+0x90>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d101      	bne.n	800d08c <prvProcessTimerOrBlockTask+0x50>
 800d088:	2301      	movs	r3, #1
 800d08a:	e000      	b.n	800d08e <prvProcessTimerOrBlockTask+0x52>
 800d08c:	2300      	movs	r3, #0
 800d08e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d090:	4b0f      	ldr	r3, [pc, #60]	; (800d0d0 <prvProcessTimerOrBlockTask+0x94>)
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	4619      	mov	r1, r3
 800d09e:	f7fe ffa7 	bl	800bff0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0a2:	f7ff fa23 	bl	800c4ec <xTaskResumeAll>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10a      	bne.n	800d0c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0ac:	4b09      	ldr	r3, [pc, #36]	; (800d0d4 <prvProcessTimerOrBlockTask+0x98>)
 800d0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	f3bf 8f6f 	isb	sy
}
 800d0bc:	e001      	b.n	800d0c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0be:	f7ff fa15 	bl	800c4ec <xTaskResumeAll>
}
 800d0c2:	bf00      	nop
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	200016d4 	.word	0x200016d4
 800d0d0:	200016d8 	.word	0x200016d8
 800d0d4:	e000ed04 	.word	0xe000ed04

0800d0d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d0e0:	4b0e      	ldr	r3, [pc, #56]	; (800d11c <prvGetNextExpireTime+0x44>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <prvGetNextExpireTime+0x16>
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	e000      	b.n	800d0f0 <prvGetNextExpireTime+0x18>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d105      	bne.n	800d108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d0fc:	4b07      	ldr	r3, [pc, #28]	; (800d11c <prvGetNextExpireTime+0x44>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e001      	b.n	800d10c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d10c:	68fb      	ldr	r3, [r7, #12]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3714      	adds	r7, #20
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	200016d0 	.word	0x200016d0

0800d120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d128:	f7ff fa7e 	bl	800c628 <xTaskGetTickCount>
 800d12c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d12e:	4b0b      	ldr	r3, [pc, #44]	; (800d15c <prvSampleTimeNow+0x3c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	429a      	cmp	r2, r3
 800d136:	d205      	bcs.n	800d144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d138:	f000 f936 	bl	800d3a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2201      	movs	r2, #1
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	e002      	b.n	800d14a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d14a:	4a04      	ldr	r2, [pc, #16]	; (800d15c <prvSampleTimeNow+0x3c>)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d150:	68fb      	ldr	r3, [r7, #12]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	200016e0 	.word	0x200016e0

0800d160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d16e:	2300      	movs	r3, #0
 800d170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	68fa      	ldr	r2, [r7, #12]
 800d17c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	429a      	cmp	r2, r3
 800d184:	d812      	bhi.n	800d1ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	1ad2      	subs	r2, r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	429a      	cmp	r2, r3
 800d192:	d302      	bcc.n	800d19a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d194:	2301      	movs	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
 800d198:	e01b      	b.n	800d1d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <prvInsertTimerInActiveList+0x7c>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4610      	mov	r0, r2
 800d1a6:	f7fe fa08 	bl	800b5ba <vListInsert>
 800d1aa:	e012      	b.n	800d1d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d206      	bcs.n	800d1c2 <prvInsertTimerInActiveList+0x62>
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d302      	bcc.n	800d1c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
 800d1c0:	e007      	b.n	800d1d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1c2:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <prvInsertTimerInActiveList+0x80>)
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	f7fe f9f4 	bl	800b5ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d1d2:	697b      	ldr	r3, [r7, #20]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	200016d4 	.word	0x200016d4
 800d1e0:	200016d0 	.word	0x200016d0

0800d1e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08e      	sub	sp, #56	; 0x38
 800d1e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1ea:	e0ca      	b.n	800d382 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	da18      	bge.n	800d224 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d1f2:	1d3b      	adds	r3, r7, #4
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d10a      	bne.n	800d214 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	61fb      	str	r3, [r7, #28]
}
 800d210:	bf00      	nop
 800d212:	e7fe      	b.n	800d212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d21a:	6850      	ldr	r0, [r2, #4]
 800d21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d21e:	6892      	ldr	r2, [r2, #8]
 800d220:	4611      	mov	r1, r2
 800d222:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f2c0 80aa 	blt.w	800d380 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d232:	695b      	ldr	r3, [r3, #20]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	3304      	adds	r3, #4
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe f9f5 	bl	800b62c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d242:	463b      	mov	r3, r7
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff ff6b 	bl	800d120 <prvSampleTimeNow>
 800d24a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b09      	cmp	r3, #9
 800d250:	f200 8097 	bhi.w	800d382 <prvProcessReceivedCommands+0x19e>
 800d254:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <prvProcessReceivedCommands+0x78>)
 800d256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25a:	bf00      	nop
 800d25c:	0800d285 	.word	0x0800d285
 800d260:	0800d285 	.word	0x0800d285
 800d264:	0800d285 	.word	0x0800d285
 800d268:	0800d2f9 	.word	0x0800d2f9
 800d26c:	0800d30d 	.word	0x0800d30d
 800d270:	0800d357 	.word	0x0800d357
 800d274:	0800d285 	.word	0x0800d285
 800d278:	0800d285 	.word	0x0800d285
 800d27c:	0800d2f9 	.word	0x0800d2f9
 800d280:	0800d30d 	.word	0x0800d30d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d28a:	f043 0301 	orr.w	r3, r3, #1
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29a:	699b      	ldr	r3, [r3, #24]
 800d29c:	18d1      	adds	r1, r2, r3
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2a4:	f7ff ff5c 	bl	800d160 <prvInsertTimerInActiveList>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d069      	beq.n	800d382 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d05e      	beq.n	800d382 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2c4:	68ba      	ldr	r2, [r7, #8]
 800d2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	441a      	add	r2, r3
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d6:	f7ff fe05 	bl	800cee4 <xTimerGenericCommand>
 800d2da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d14f      	bne.n	800d382 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	f383 8811 	msr	BASEPRI, r3
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	61bb      	str	r3, [r7, #24]
}
 800d2f4:	bf00      	nop
 800d2f6:	e7fe      	b.n	800d2f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2fe:	f023 0301 	bic.w	r3, r3, #1
 800d302:	b2da      	uxtb	r2, r3
 800d304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d30a:	e03a      	b.n	800d382 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d312:	f043 0301 	orr.w	r3, r3, #1
 800d316:	b2da      	uxtb	r2, r3
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	617b      	str	r3, [r7, #20]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d344:	699a      	ldr	r2, [r3, #24]
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	18d1      	adds	r1, r2, r3
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d350:	f7ff ff06 	bl	800d160 <prvInsertTimerInActiveList>
					break;
 800d354:	e015      	b.n	800d382 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d35c:	f003 0302 	and.w	r3, r3, #2
 800d360:	2b00      	cmp	r3, #0
 800d362:	d103      	bne.n	800d36c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d366:	f000 fbdb 	bl	800db20 <vPortFree>
 800d36a:	e00a      	b.n	800d382 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d372:	f023 0301 	bic.w	r3, r3, #1
 800d376:	b2da      	uxtb	r2, r3
 800d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d37e:	e000      	b.n	800d382 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d382:	4b08      	ldr	r3, [pc, #32]	; (800d3a4 <prvProcessReceivedCommands+0x1c0>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	1d39      	adds	r1, r7, #4
 800d388:	2200      	movs	r2, #0
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe fc16 	bl	800bbbc <xQueueReceive>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	f47f af2a 	bne.w	800d1ec <prvProcessReceivedCommands+0x8>
	}
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	3730      	adds	r7, #48	; 0x30
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	200016d8 	.word	0x200016d8

0800d3a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b088      	sub	sp, #32
 800d3ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ae:	e048      	b.n	800d442 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3b0:	4b2d      	ldr	r3, [pc, #180]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ba:	4b2b      	ldr	r3, [pc, #172]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe f92f 	bl	800b62c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d02e      	beq.n	800d442 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d90e      	bls.n	800d414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	68fa      	ldr	r2, [r7, #12]
 800d400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d402:	4b19      	ldr	r3, [pc, #100]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fe f8d4 	bl	800b5ba <vListInsert>
 800d412:	e016      	b.n	800d442 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d414:	2300      	movs	r3, #0
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	2300      	movs	r3, #0
 800d41a:	693a      	ldr	r2, [r7, #16]
 800d41c:	2100      	movs	r1, #0
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f7ff fd60 	bl	800cee4 <xTimerGenericCommand>
 800d424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d430:	f383 8811 	msr	BASEPRI, r3
 800d434:	f3bf 8f6f 	isb	sy
 800d438:	f3bf 8f4f 	dsb	sy
 800d43c:	603b      	str	r3, [r7, #0]
}
 800d43e:	bf00      	nop
 800d440:	e7fe      	b.n	800d440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d442:	4b09      	ldr	r3, [pc, #36]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1b1      	bne.n	800d3b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d44c:	4b06      	ldr	r3, [pc, #24]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d452:	4b06      	ldr	r3, [pc, #24]	; (800d46c <prvSwitchTimerLists+0xc4>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4a04      	ldr	r2, [pc, #16]	; (800d468 <prvSwitchTimerLists+0xc0>)
 800d458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d45a:	4a04      	ldr	r2, [pc, #16]	; (800d46c <prvSwitchTimerLists+0xc4>)
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	6013      	str	r3, [r2, #0]
}
 800d460:	bf00      	nop
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	200016d0 	.word	0x200016d0
 800d46c:	200016d4 	.word	0x200016d4

0800d470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d476:	f000 f965 	bl	800d744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d47a:	4b15      	ldr	r3, [pc, #84]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d120      	bne.n	800d4c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d482:	4814      	ldr	r0, [pc, #80]	; (800d4d4 <prvCheckForValidListAndQueue+0x64>)
 800d484:	f7fe f848 	bl	800b518 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d488:	4813      	ldr	r0, [pc, #76]	; (800d4d8 <prvCheckForValidListAndQueue+0x68>)
 800d48a:	f7fe f845 	bl	800b518 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <prvCheckForValidListAndQueue+0x6c>)
 800d490:	4a10      	ldr	r2, [pc, #64]	; (800d4d4 <prvCheckForValidListAndQueue+0x64>)
 800d492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d494:	4b12      	ldr	r3, [pc, #72]	; (800d4e0 <prvCheckForValidListAndQueue+0x70>)
 800d496:	4a10      	ldr	r2, [pc, #64]	; (800d4d8 <prvCheckForValidListAndQueue+0x68>)
 800d498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d49a:	2300      	movs	r3, #0
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	4b11      	ldr	r3, [pc, #68]	; (800d4e4 <prvCheckForValidListAndQueue+0x74>)
 800d4a0:	4a11      	ldr	r2, [pc, #68]	; (800d4e8 <prvCheckForValidListAndQueue+0x78>)
 800d4a2:	2110      	movs	r1, #16
 800d4a4:	200a      	movs	r0, #10
 800d4a6:	f7fe f953 	bl	800b750 <xQueueGenericCreateStatic>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d4ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4b0:	4b07      	ldr	r3, [pc, #28]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d005      	beq.n	800d4c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4b8:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <prvCheckForValidListAndQueue+0x60>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	490b      	ldr	r1, [pc, #44]	; (800d4ec <prvCheckForValidListAndQueue+0x7c>)
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fd6c 	bl	800bf9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4c4:	f000 f96e 	bl	800d7a4 <vPortExitCritical>
}
 800d4c8:	bf00      	nop
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	200016d8 	.word	0x200016d8
 800d4d4:	200016a8 	.word	0x200016a8
 800d4d8:	200016bc 	.word	0x200016bc
 800d4dc:	200016d0 	.word	0x200016d0
 800d4e0:	200016d4 	.word	0x200016d4
 800d4e4:	20001784 	.word	0x20001784
 800d4e8:	200016e4 	.word	0x200016e4
 800d4ec:	0801646c 	.word	0x0801646c

0800d4f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	3b04      	subs	r3, #4
 800d500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	3b04      	subs	r3, #4
 800d50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	f023 0201 	bic.w	r2, r3, #1
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	3b04      	subs	r3, #4
 800d51e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d520:	4a0c      	ldr	r2, [pc, #48]	; (800d554 <pxPortInitialiseStack+0x64>)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	3b14      	subs	r3, #20
 800d52a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	3b04      	subs	r3, #4
 800d536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f06f 0202 	mvn.w	r2, #2
 800d53e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3b20      	subs	r3, #32
 800d544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d546:	68fb      	ldr	r3, [r7, #12]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	0800d559 	.word	0x0800d559

0800d558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d562:	4b12      	ldr	r3, [pc, #72]	; (800d5ac <prvTaskExitError+0x54>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56a:	d00a      	beq.n	800d582 <prvTaskExitError+0x2a>
	__asm volatile
 800d56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	60fb      	str	r3, [r7, #12]
}
 800d57e:	bf00      	nop
 800d580:	e7fe      	b.n	800d580 <prvTaskExitError+0x28>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	60bb      	str	r3, [r7, #8]
}
 800d594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d596:	bf00      	nop
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0fc      	beq.n	800d598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	3714      	adds	r7, #20
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	20000108 	.word	0x20000108

0800d5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d5b0:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <pxCurrentTCBConst2>)
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	6808      	ldr	r0, [r1, #0]
 800d5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ba:	f380 8809 	msr	PSP, r0
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f04f 0000 	mov.w	r0, #0
 800d5c6:	f380 8811 	msr	BASEPRI, r0
 800d5ca:	4770      	bx	lr
 800d5cc:	f3af 8000 	nop.w

0800d5d0 <pxCurrentTCBConst2>:
 800d5d0:	200011a8 	.word	0x200011a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop

0800d5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d5d8:	4808      	ldr	r0, [pc, #32]	; (800d5fc <prvPortStartFirstTask+0x24>)
 800d5da:	6800      	ldr	r0, [r0, #0]
 800d5dc:	6800      	ldr	r0, [r0, #0]
 800d5de:	f380 8808 	msr	MSP, r0
 800d5e2:	f04f 0000 	mov.w	r0, #0
 800d5e6:	f380 8814 	msr	CONTROL, r0
 800d5ea:	b662      	cpsie	i
 800d5ec:	b661      	cpsie	f
 800d5ee:	f3bf 8f4f 	dsb	sy
 800d5f2:	f3bf 8f6f 	isb	sy
 800d5f6:	df00      	svc	0
 800d5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d5fa:	bf00      	nop
 800d5fc:	e000ed08 	.word	0xe000ed08

0800d600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d606:	4b46      	ldr	r3, [pc, #280]	; (800d720 <xPortStartScheduler+0x120>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a46      	ldr	r2, [pc, #280]	; (800d724 <xPortStartScheduler+0x124>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d10a      	bne.n	800d626 <xPortStartScheduler+0x26>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	613b      	str	r3, [r7, #16]
}
 800d622:	bf00      	nop
 800d624:	e7fe      	b.n	800d624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d626:	4b3e      	ldr	r3, [pc, #248]	; (800d720 <xPortStartScheduler+0x120>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a3f      	ldr	r2, [pc, #252]	; (800d728 <xPortStartScheduler+0x128>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d10a      	bne.n	800d646 <xPortStartScheduler+0x46>
	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	60fb      	str	r3, [r7, #12]
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d646:	4b39      	ldr	r3, [pc, #228]	; (800d72c <xPortStartScheduler+0x12c>)
 800d648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	22ff      	movs	r2, #255	; 0xff
 800d656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	4b31      	ldr	r3, [pc, #196]	; (800d730 <xPortStartScheduler+0x130>)
 800d66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d66e:	4b31      	ldr	r3, [pc, #196]	; (800d734 <xPortStartScheduler+0x134>)
 800d670:	2207      	movs	r2, #7
 800d672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d674:	e009      	b.n	800d68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d676:	4b2f      	ldr	r3, [pc, #188]	; (800d734 <xPortStartScheduler+0x134>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3b01      	subs	r3, #1
 800d67c:	4a2d      	ldr	r2, [pc, #180]	; (800d734 <xPortStartScheduler+0x134>)
 800d67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	b2db      	uxtb	r3, r3
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	b2db      	uxtb	r3, r3
 800d688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d68a:	78fb      	ldrb	r3, [r7, #3]
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d692:	2b80      	cmp	r3, #128	; 0x80
 800d694:	d0ef      	beq.n	800d676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d696:	4b27      	ldr	r3, [pc, #156]	; (800d734 <xPortStartScheduler+0x134>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f1c3 0307 	rsb	r3, r3, #7
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	d00a      	beq.n	800d6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	60bb      	str	r3, [r7, #8]
}
 800d6b4:	bf00      	nop
 800d6b6:	e7fe      	b.n	800d6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d6b8:	4b1e      	ldr	r3, [pc, #120]	; (800d734 <xPortStartScheduler+0x134>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	021b      	lsls	r3, r3, #8
 800d6be:	4a1d      	ldr	r2, [pc, #116]	; (800d734 <xPortStartScheduler+0x134>)
 800d6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d6c2:	4b1c      	ldr	r3, [pc, #112]	; (800d734 <xPortStartScheduler+0x134>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6ca:	4a1a      	ldr	r2, [pc, #104]	; (800d734 <xPortStartScheduler+0x134>)
 800d6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d6d6:	4b18      	ldr	r3, [pc, #96]	; (800d738 <xPortStartScheduler+0x138>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a17      	ldr	r2, [pc, #92]	; (800d738 <xPortStartScheduler+0x138>)
 800d6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d6e2:	4b15      	ldr	r3, [pc, #84]	; (800d738 <xPortStartScheduler+0x138>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	4a14      	ldr	r2, [pc, #80]	; (800d738 <xPortStartScheduler+0x138>)
 800d6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d6ee:	f000 f8dd 	bl	800d8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d6f2:	4b12      	ldr	r3, [pc, #72]	; (800d73c <xPortStartScheduler+0x13c>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d6f8:	f000 f8fc 	bl	800d8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d6fc:	4b10      	ldr	r3, [pc, #64]	; (800d740 <xPortStartScheduler+0x140>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a0f      	ldr	r2, [pc, #60]	; (800d740 <xPortStartScheduler+0x140>)
 800d702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d708:	f7ff ff66 	bl	800d5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d70c:	f7ff f856 	bl	800c7bc <vTaskSwitchContext>
	prvTaskExitError();
 800d710:	f7ff ff22 	bl	800d558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	e000ed00 	.word	0xe000ed00
 800d724:	410fc271 	.word	0x410fc271
 800d728:	410fc270 	.word	0x410fc270
 800d72c:	e000e400 	.word	0xe000e400
 800d730:	200017d4 	.word	0x200017d4
 800d734:	200017d8 	.word	0x200017d8
 800d738:	e000ed20 	.word	0xe000ed20
 800d73c:	20000108 	.word	0x20000108
 800d740:	e000ef34 	.word	0xe000ef34

0800d744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
	__asm volatile
 800d74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	607b      	str	r3, [r7, #4]
}
 800d75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d75e:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <vPortEnterCritical+0x58>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	3301      	adds	r3, #1
 800d764:	4a0d      	ldr	r2, [pc, #52]	; (800d79c <vPortEnterCritical+0x58>)
 800d766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d768:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <vPortEnterCritical+0x58>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d10f      	bne.n	800d790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <vPortEnterCritical+0x5c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	b2db      	uxtb	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00a      	beq.n	800d790 <vPortEnterCritical+0x4c>
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	603b      	str	r3, [r7, #0]
}
 800d78c:	bf00      	nop
 800d78e:	e7fe      	b.n	800d78e <vPortEnterCritical+0x4a>
	}
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	20000108 	.word	0x20000108
 800d7a0:	e000ed04 	.word	0xe000ed04

0800d7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7aa:	4b12      	ldr	r3, [pc, #72]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <vPortExitCritical+0x24>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	607b      	str	r3, [r7, #4]
}
 800d7c4:	bf00      	nop
 800d7c6:	e7fe      	b.n	800d7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d7c8:	4b0a      	ldr	r3, [pc, #40]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	4a09      	ldr	r2, [pc, #36]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d7d2:	4b08      	ldr	r3, [pc, #32]	; (800d7f4 <vPortExitCritical+0x50>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d105      	bne.n	800d7e6 <vPortExitCritical+0x42>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	f383 8811 	msr	BASEPRI, r3
}
 800d7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000108 	.word	0x20000108
	...

0800d800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d800:	f3ef 8009 	mrs	r0, PSP
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	4b15      	ldr	r3, [pc, #84]	; (800d860 <pxCurrentTCBConst>)
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	f01e 0f10 	tst.w	lr, #16
 800d810:	bf08      	it	eq
 800d812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81a:	6010      	str	r0, [r2, #0]
 800d81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d824:	f380 8811 	msr	BASEPRI, r0
 800d828:	f3bf 8f4f 	dsb	sy
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f7fe ffc4 	bl	800c7bc <vTaskSwitchContext>
 800d834:	f04f 0000 	mov.w	r0, #0
 800d838:	f380 8811 	msr	BASEPRI, r0
 800d83c:	bc09      	pop	{r0, r3}
 800d83e:	6819      	ldr	r1, [r3, #0]
 800d840:	6808      	ldr	r0, [r1, #0]
 800d842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d846:	f01e 0f10 	tst.w	lr, #16
 800d84a:	bf08      	it	eq
 800d84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d850:	f380 8809 	msr	PSP, r0
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	f3af 8000 	nop.w

0800d860 <pxCurrentTCBConst>:
 800d860:	200011a8 	.word	0x200011a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d864:	bf00      	nop
 800d866:	bf00      	nop

0800d868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
	__asm volatile
 800d86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d872:	f383 8811 	msr	BASEPRI, r3
 800d876:	f3bf 8f6f 	isb	sy
 800d87a:	f3bf 8f4f 	dsb	sy
 800d87e:	607b      	str	r3, [r7, #4]
}
 800d880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d882:	f7fe fee1 	bl	800c648 <xTaskIncrementTick>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d88c:	4b06      	ldr	r3, [pc, #24]	; (800d8a8 <xPortSysTickHandler+0x40>)
 800d88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	2300      	movs	r3, #0
 800d896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	f383 8811 	msr	BASEPRI, r3
}
 800d89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8a0:	bf00      	nop
 800d8a2:	3708      	adds	r7, #8
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	e000ed04 	.word	0xe000ed04

0800d8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d8b0:	4b0b      	ldr	r3, [pc, #44]	; (800d8e0 <vPortSetupTimerInterrupt+0x34>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d8b6:	4b0b      	ldr	r3, [pc, #44]	; (800d8e4 <vPortSetupTimerInterrupt+0x38>)
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d8bc:	4b0a      	ldr	r3, [pc, #40]	; (800d8e8 <vPortSetupTimerInterrupt+0x3c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a0a      	ldr	r2, [pc, #40]	; (800d8ec <vPortSetupTimerInterrupt+0x40>)
 800d8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c6:	099b      	lsrs	r3, r3, #6
 800d8c8:	4a09      	ldr	r2, [pc, #36]	; (800d8f0 <vPortSetupTimerInterrupt+0x44>)
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d8ce:	4b04      	ldr	r3, [pc, #16]	; (800d8e0 <vPortSetupTimerInterrupt+0x34>)
 800d8d0:	2207      	movs	r2, #7
 800d8d2:	601a      	str	r2, [r3, #0]
}
 800d8d4:	bf00      	nop
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop
 800d8e0:	e000e010 	.word	0xe000e010
 800d8e4:	e000e018 	.word	0xe000e018
 800d8e8:	20000000 	.word	0x20000000
 800d8ec:	10624dd3 	.word	0x10624dd3
 800d8f0:	e000e014 	.word	0xe000e014

0800d8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d904 <vPortEnableVFP+0x10>
 800d8f8:	6801      	ldr	r1, [r0, #0]
 800d8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d8fe:	6001      	str	r1, [r0, #0]
 800d900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d902:	bf00      	nop
 800d904:	e000ed88 	.word	0xe000ed88

0800d908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d90e:	f3ef 8305 	mrs	r3, IPSR
 800d912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b0f      	cmp	r3, #15
 800d918:	d914      	bls.n	800d944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d91a:	4a17      	ldr	r2, [pc, #92]	; (800d978 <vPortValidateInterruptPriority+0x70>)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d924:	4b15      	ldr	r3, [pc, #84]	; (800d97c <vPortValidateInterruptPriority+0x74>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	7afa      	ldrb	r2, [r7, #11]
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d20a      	bcs.n	800d944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	607b      	str	r3, [r7, #4]
}
 800d940:	bf00      	nop
 800d942:	e7fe      	b.n	800d942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d944:	4b0e      	ldr	r3, [pc, #56]	; (800d980 <vPortValidateInterruptPriority+0x78>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d94c:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <vPortValidateInterruptPriority+0x7c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	429a      	cmp	r2, r3
 800d952:	d90a      	bls.n	800d96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	603b      	str	r3, [r7, #0]
}
 800d966:	bf00      	nop
 800d968:	e7fe      	b.n	800d968 <vPortValidateInterruptPriority+0x60>
	}
 800d96a:	bf00      	nop
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	e000e3f0 	.word	0xe000e3f0
 800d97c:	200017d4 	.word	0x200017d4
 800d980:	e000ed0c 	.word	0xe000ed0c
 800d984:	200017d8 	.word	0x200017d8

0800d988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b08a      	sub	sp, #40	; 0x28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d990:	2300      	movs	r3, #0
 800d992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d994:	f7fe fd9c 	bl	800c4d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d998:	4b5b      	ldr	r3, [pc, #364]	; (800db08 <pvPortMalloc+0x180>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d101      	bne.n	800d9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9a0:	f000 f920 	bl	800dbe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9a4:	4b59      	ldr	r3, [pc, #356]	; (800db0c <pvPortMalloc+0x184>)
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 8093 	bne.w	800dad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01d      	beq.n	800d9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9b8:	2208      	movs	r2, #8
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4413      	add	r3, r2
 800d9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d014      	beq.n	800d9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f023 0307 	bic.w	r3, r3, #7
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f003 0307 	and.w	r3, r3, #7
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00a      	beq.n	800d9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	617b      	str	r3, [r7, #20]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d06e      	beq.n	800dad8 <pvPortMalloc+0x150>
 800d9fa:	4b45      	ldr	r3, [pc, #276]	; (800db10 <pvPortMalloc+0x188>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	429a      	cmp	r2, r3
 800da02:	d869      	bhi.n	800dad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da04:	4b43      	ldr	r3, [pc, #268]	; (800db14 <pvPortMalloc+0x18c>)
 800da06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da08:	4b42      	ldr	r3, [pc, #264]	; (800db14 <pvPortMalloc+0x18c>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da0e:	e004      	b.n	800da1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d903      	bls.n	800da2c <pvPortMalloc+0xa4>
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1f1      	bne.n	800da10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da2c:	4b36      	ldr	r3, [pc, #216]	; (800db08 <pvPortMalloc+0x180>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da32:	429a      	cmp	r2, r3
 800da34:	d050      	beq.n	800dad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da36:	6a3b      	ldr	r3, [r7, #32]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2208      	movs	r2, #8
 800da3c:	4413      	add	r3, r2
 800da3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	1ad2      	subs	r2, r2, r3
 800da50:	2308      	movs	r3, #8
 800da52:	005b      	lsls	r3, r3, #1
 800da54:	429a      	cmp	r2, r3
 800da56:	d91f      	bls.n	800da98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4413      	add	r3, r2
 800da5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <pvPortMalloc+0xf8>
	__asm volatile
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	613b      	str	r3, [r7, #16]
}
 800da7c:	bf00      	nop
 800da7e:	e7fe      	b.n	800da7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	1ad2      	subs	r2, r2, r3
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da92:	69b8      	ldr	r0, [r7, #24]
 800da94:	f000 f908 	bl	800dca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da98:	4b1d      	ldr	r3, [pc, #116]	; (800db10 <pvPortMalloc+0x188>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	1ad3      	subs	r3, r2, r3
 800daa2:	4a1b      	ldr	r2, [pc, #108]	; (800db10 <pvPortMalloc+0x188>)
 800daa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800daa6:	4b1a      	ldr	r3, [pc, #104]	; (800db10 <pvPortMalloc+0x188>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	4b1b      	ldr	r3, [pc, #108]	; (800db18 <pvPortMalloc+0x190>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d203      	bcs.n	800daba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dab2:	4b17      	ldr	r3, [pc, #92]	; (800db10 <pvPortMalloc+0x188>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a18      	ldr	r2, [pc, #96]	; (800db18 <pvPortMalloc+0x190>)
 800dab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800daba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	4b13      	ldr	r3, [pc, #76]	; (800db0c <pvPortMalloc+0x184>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	431a      	orrs	r2, r3
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dace:	4b13      	ldr	r3, [pc, #76]	; (800db1c <pvPortMalloc+0x194>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3301      	adds	r3, #1
 800dad4:	4a11      	ldr	r2, [pc, #68]	; (800db1c <pvPortMalloc+0x194>)
 800dad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dad8:	f7fe fd08 	bl	800c4ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	f003 0307 	and.w	r3, r3, #7
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <pvPortMalloc+0x174>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	60fb      	str	r3, [r7, #12]
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <pvPortMalloc+0x172>
	return pvReturn;
 800dafc:	69fb      	ldr	r3, [r7, #28]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3728      	adds	r7, #40	; 0x28
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	200053e4 	.word	0x200053e4
 800db0c:	200053f8 	.word	0x200053f8
 800db10:	200053e8 	.word	0x200053e8
 800db14:	200053dc 	.word	0x200053dc
 800db18:	200053ec 	.word	0x200053ec
 800db1c:	200053f0 	.word	0x200053f0

0800db20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d04d      	beq.n	800dbce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db32:	2308      	movs	r3, #8
 800db34:	425b      	negs	r3, r3
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4413      	add	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	685a      	ldr	r2, [r3, #4]
 800db44:	4b24      	ldr	r3, [pc, #144]	; (800dbd8 <vPortFree+0xb8>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4013      	ands	r3, r2
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10a      	bne.n	800db64 <vPortFree+0x44>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	60fb      	str	r3, [r7, #12]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00a      	beq.n	800db82 <vPortFree+0x62>
	__asm volatile
 800db6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	60bb      	str	r3, [r7, #8]
}
 800db7e:	bf00      	nop
 800db80:	e7fe      	b.n	800db80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <vPortFree+0xb8>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4013      	ands	r3, r2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d01e      	beq.n	800dbce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d11a      	bne.n	800dbce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	4b0e      	ldr	r3, [pc, #56]	; (800dbd8 <vPortFree+0xb8>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	43db      	mvns	r3, r3
 800dba2:	401a      	ands	r2, r3
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dba8:	f7fe fc92 	bl	800c4d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <vPortFree+0xbc>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	4a09      	ldr	r2, [pc, #36]	; (800dbdc <vPortFree+0xbc>)
 800dbb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbba:	6938      	ldr	r0, [r7, #16]
 800dbbc:	f000 f874 	bl	800dca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbc0:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <vPortFree+0xc0>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	4a06      	ldr	r2, [pc, #24]	; (800dbe0 <vPortFree+0xc0>)
 800dbc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbca:	f7fe fc8f 	bl	800c4ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbce:	bf00      	nop
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	200053f8 	.word	0x200053f8
 800dbdc:	200053e8 	.word	0x200053e8
 800dbe0:	200053f4 	.word	0x200053f4

0800dbe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dbee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dbf0:	4b27      	ldr	r3, [pc, #156]	; (800dc90 <prvHeapInit+0xac>)
 800dbf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0307 	and.w	r3, r3, #7
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00c      	beq.n	800dc18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	3307      	adds	r3, #7
 800dc02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f023 0307 	bic.w	r3, r3, #7
 800dc0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	4a1f      	ldr	r2, [pc, #124]	; (800dc90 <prvHeapInit+0xac>)
 800dc14:	4413      	add	r3, r2
 800dc16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc1c:	4a1d      	ldr	r2, [pc, #116]	; (800dc94 <prvHeapInit+0xb0>)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc22:	4b1c      	ldr	r3, [pc, #112]	; (800dc94 <prvHeapInit+0xb0>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc30:	2208      	movs	r2, #8
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f023 0307 	bic.w	r3, r3, #7
 800dc3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	4a15      	ldr	r2, [pc, #84]	; (800dc98 <prvHeapInit+0xb4>)
 800dc44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc46:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <prvHeapInit+0xb4>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc4e:	4b12      	ldr	r3, [pc, #72]	; (800dc98 <prvHeapInit+0xb4>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	1ad2      	subs	r2, r2, r3
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc64:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <prvHeapInit+0xb4>)
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <prvHeapInit+0xb8>)
 800dc72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <prvHeapInit+0xbc>)
 800dc7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc7c:	4b09      	ldr	r3, [pc, #36]	; (800dca4 <prvHeapInit+0xc0>)
 800dc7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc82:	601a      	str	r2, [r3, #0]
}
 800dc84:	bf00      	nop
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	200017dc 	.word	0x200017dc
 800dc94:	200053dc 	.word	0x200053dc
 800dc98:	200053e4 	.word	0x200053e4
 800dc9c:	200053ec 	.word	0x200053ec
 800dca0:	200053e8 	.word	0x200053e8
 800dca4:	200053f8 	.word	0x200053f8

0800dca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcb0:	4b28      	ldr	r3, [pc, #160]	; (800dd54 <prvInsertBlockIntoFreeList+0xac>)
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e002      	b.n	800dcbc <prvInsertBlockIntoFreeList+0x14>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d8f7      	bhi.n	800dcb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	4413      	add	r3, r2
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d108      	bne.n	800dcea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	685a      	ldr	r2, [r3, #4]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	441a      	add	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	68ba      	ldr	r2, [r7, #8]
 800dcf4:	441a      	add	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d118      	bne.n	800dd30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	4b15      	ldr	r3, [pc, #84]	; (800dd58 <prvInsertBlockIntoFreeList+0xb0>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d00d      	beq.n	800dd26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	441a      	add	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	e008      	b.n	800dd38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd26:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <prvInsertBlockIntoFreeList+0xb0>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	e003      	b.n	800dd38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d002      	beq.n	800dd46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd46:	bf00      	nop
 800dd48:	3714      	adds	r7, #20
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	200053dc 	.word	0x200053dc
 800dd58:	200053e4 	.word	0x200053e4

0800dd5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dd60:	2201      	movs	r2, #1
 800dd62:	4912      	ldr	r1, [pc, #72]	; (800ddac <MX_USB_DEVICE_Init+0x50>)
 800dd64:	4812      	ldr	r0, [pc, #72]	; (800ddb0 <MX_USB_DEVICE_Init+0x54>)
 800dd66:	f7fc f8c3 	bl	8009ef0 <USBD_Init>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d004      	beq.n	800dd7a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800dd70:	4b10      	ldr	r3, [pc, #64]	; (800ddb4 <MX_USB_DEVICE_Init+0x58>)
 800dd72:	2201      	movs	r2, #1
 800dd74:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800dd76:	f7f4 fac5 	bl	8002304 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800dd7a:	490f      	ldr	r1, [pc, #60]	; (800ddb8 <MX_USB_DEVICE_Init+0x5c>)
 800dd7c:	480c      	ldr	r0, [pc, #48]	; (800ddb0 <MX_USB_DEVICE_Init+0x54>)
 800dd7e:	f7fc f8e7 	bl	8009f50 <USBD_RegisterClass>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d004      	beq.n	800dd92 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800dd88:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <MX_USB_DEVICE_Init+0x58>)
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800dd8e:	f7f4 fab9 	bl	8002304 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dd92:	4807      	ldr	r0, [pc, #28]	; (800ddb0 <MX_USB_DEVICE_Init+0x54>)
 800dd94:	f7fc f903 	bl	8009f9e <USBD_Start>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d004      	beq.n	800dda8 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800dd9e:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <MX_USB_DEVICE_Init+0x58>)
 800dda0:	2201      	movs	r2, #1
 800dda2:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800dda4:	f7f4 faae 	bl	8002304 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dda8:	bf00      	nop
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	2000010c 	.word	0x2000010c
 800ddb0:	200054b0 	.word	0x200054b0
 800ddb4:	200053fc 	.word	0x200053fc
 800ddb8:	2000002c 	.word	0x2000002c

0800ddbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	6039      	str	r1, [r7, #0]
 800ddc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2212      	movs	r2, #18
 800ddcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ddce:	4b03      	ldr	r3, [pc, #12]	; (800dddc <USBD_FS_DeviceDescriptor+0x20>)
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr
 800dddc:	20000128 	.word	0x20000128

0800dde0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	4603      	mov	r3, r0
 800dde8:	6039      	str	r1, [r7, #0]
 800ddea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	2204      	movs	r2, #4
 800ddf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddf2:	4b03      	ldr	r3, [pc, #12]	; (800de00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	2000013c 	.word	0x2000013c

0800de04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	6039      	str	r1, [r7, #0]
 800de0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	4907      	ldr	r1, [pc, #28]	; (800de38 <USBD_FS_ProductStrDescriptor+0x34>)
 800de1a:	4808      	ldr	r0, [pc, #32]	; (800de3c <USBD_FS_ProductStrDescriptor+0x38>)
 800de1c:	f7fd f949 	bl	800b0b2 <USBD_GetString>
 800de20:	e004      	b.n	800de2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	4904      	ldr	r1, [pc, #16]	; (800de38 <USBD_FS_ProductStrDescriptor+0x34>)
 800de26:	4805      	ldr	r0, [pc, #20]	; (800de3c <USBD_FS_ProductStrDescriptor+0x38>)
 800de28:	f7fd f943 	bl	800b0b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de2c:	4b02      	ldr	r3, [pc, #8]	; (800de38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20005780 	.word	0x20005780
 800de3c:	08016474 	.word	0x08016474

0800de40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	4904      	ldr	r1, [pc, #16]	; (800de60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de50:	4804      	ldr	r0, [pc, #16]	; (800de64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de52:	f7fd f92e 	bl	800b0b2 <USBD_GetString>
  return USBD_StrDesc;
 800de56:	4b02      	ldr	r3, [pc, #8]	; (800de60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20005780 	.word	0x20005780
 800de64:	0801648c 	.word	0x0801648c

0800de68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	6039      	str	r1, [r7, #0]
 800de72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	221a      	movs	r2, #26
 800de78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de7a:	f000 f843 	bl	800df04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de7e:	4b02      	ldr	r3, [pc, #8]	; (800de88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	20000140 	.word	0x20000140

0800de8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	4603      	mov	r3, r0
 800de94:	6039      	str	r1, [r7, #0]
 800de96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de98:	79fb      	ldrb	r3, [r7, #7]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d105      	bne.n	800deaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de9e:	683a      	ldr	r2, [r7, #0]
 800dea0:	4907      	ldr	r1, [pc, #28]	; (800dec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dea2:	4808      	ldr	r0, [pc, #32]	; (800dec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dea4:	f7fd f905 	bl	800b0b2 <USBD_GetString>
 800dea8:	e004      	b.n	800deb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	4904      	ldr	r1, [pc, #16]	; (800dec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800deae:	4805      	ldr	r0, [pc, #20]	; (800dec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800deb0:	f7fd f8ff 	bl	800b0b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800deb4:	4b02      	ldr	r3, [pc, #8]	; (800dec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	20005780 	.word	0x20005780
 800dec4:	080164a0 	.word	0x080164a0

0800dec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	6039      	str	r1, [r7, #0]
 800ded2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ded4:	79fb      	ldrb	r3, [r7, #7]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d105      	bne.n	800dee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800deda:	683a      	ldr	r2, [r7, #0]
 800dedc:	4907      	ldr	r1, [pc, #28]	; (800defc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dede:	4808      	ldr	r0, [pc, #32]	; (800df00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dee0:	f7fd f8e7 	bl	800b0b2 <USBD_GetString>
 800dee4:	e004      	b.n	800def0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	4904      	ldr	r1, [pc, #16]	; (800defc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800deea:	4805      	ldr	r0, [pc, #20]	; (800df00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800deec:	f7fd f8e1 	bl	800b0b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800def0:	4b02      	ldr	r3, [pc, #8]	; (800defc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20005780 	.word	0x20005780
 800df00:	080164ac 	.word	0x080164ac

0800df04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df0a:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <Get_SerialNum+0x44>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df10:	4b0e      	ldr	r3, [pc, #56]	; (800df4c <Get_SerialNum+0x48>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df16:	4b0e      	ldr	r3, [pc, #56]	; (800df50 <Get_SerialNum+0x4c>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	4413      	add	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d009      	beq.n	800df3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df2a:	2208      	movs	r2, #8
 800df2c:	4909      	ldr	r1, [pc, #36]	; (800df54 <Get_SerialNum+0x50>)
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f814 	bl	800df5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df34:	2204      	movs	r2, #4
 800df36:	4908      	ldr	r1, [pc, #32]	; (800df58 <Get_SerialNum+0x54>)
 800df38:	68b8      	ldr	r0, [r7, #8]
 800df3a:	f000 f80f 	bl	800df5c <IntToUnicode>
  }
}
 800df3e:	bf00      	nop
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	1fff7a10 	.word	0x1fff7a10
 800df4c:	1fff7a14 	.word	0x1fff7a14
 800df50:	1fff7a18 	.word	0x1fff7a18
 800df54:	20000142 	.word	0x20000142
 800df58:	20000152 	.word	0x20000152

0800df5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b087      	sub	sp, #28
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df6e:	2300      	movs	r3, #0
 800df70:	75fb      	strb	r3, [r7, #23]
 800df72:	e027      	b.n	800dfc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	0f1b      	lsrs	r3, r3, #28
 800df78:	2b09      	cmp	r3, #9
 800df7a:	d80b      	bhi.n	800df94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	0f1b      	lsrs	r3, r3, #28
 800df80:	b2da      	uxtb	r2, r3
 800df82:	7dfb      	ldrb	r3, [r7, #23]
 800df84:	005b      	lsls	r3, r3, #1
 800df86:	4619      	mov	r1, r3
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	440b      	add	r3, r1
 800df8c:	3230      	adds	r2, #48	; 0x30
 800df8e:	b2d2      	uxtb	r2, r2
 800df90:	701a      	strb	r2, [r3, #0]
 800df92:	e00a      	b.n	800dfaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	0f1b      	lsrs	r3, r3, #28
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	005b      	lsls	r3, r3, #1
 800df9e:	4619      	mov	r1, r3
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	440b      	add	r3, r1
 800dfa4:	3237      	adds	r2, #55	; 0x37
 800dfa6:	b2d2      	uxtb	r2, r2
 800dfa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	011b      	lsls	r3, r3, #4
 800dfae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	4413      	add	r3, r2
 800dfba:	2200      	movs	r2, #0
 800dfbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	75fb      	strb	r3, [r7, #23]
 800dfc4:	7dfa      	ldrb	r2, [r7, #23]
 800dfc6:	79fb      	ldrb	r3, [r7, #7]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d3d3      	bcc.n	800df74 <IntToUnicode+0x18>
  }
}
 800dfcc:	bf00      	nop
 800dfce:	bf00      	nop
 800dfd0:	371c      	adds	r7, #28
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
	...

0800dfdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	2200      	movs	r2, #0
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	605a      	str	r2, [r3, #4]
 800dfee:	609a      	str	r2, [r3, #8]
 800dff0:	60da      	str	r2, [r3, #12]
 800dff2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dffc:	d13a      	bne.n	800e074 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dffe:	2300      	movs	r3, #0
 800e000:	613b      	str	r3, [r7, #16]
 800e002:	4b1e      	ldr	r3, [pc, #120]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e006:	4a1d      	ldr	r2, [pc, #116]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e008:	f043 0301 	orr.w	r3, r3, #1
 800e00c:	6313      	str	r3, [r2, #48]	; 0x30
 800e00e:	4b1b      	ldr	r3, [pc, #108]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	613b      	str	r3, [r7, #16]
 800e018:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e01a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e01e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e020:	2302      	movs	r3, #2
 800e022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e024:	2300      	movs	r3, #0
 800e026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e028:	2303      	movs	r3, #3
 800e02a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e02c:	230a      	movs	r3, #10
 800e02e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e030:	f107 0314 	add.w	r3, r7, #20
 800e034:	4619      	mov	r1, r3
 800e036:	4812      	ldr	r0, [pc, #72]	; (800e080 <HAL_PCD_MspInit+0xa4>)
 800e038:	f7f5 fd82 	bl	8003b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e03c:	4b0f      	ldr	r3, [pc, #60]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e040:	4a0e      	ldr	r2, [pc, #56]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e046:	6353      	str	r3, [r2, #52]	; 0x34
 800e048:	2300      	movs	r3, #0
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	4b0b      	ldr	r3, [pc, #44]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e04e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e050:	4a0a      	ldr	r2, [pc, #40]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e056:	6453      	str	r3, [r2, #68]	; 0x44
 800e058:	4b08      	ldr	r3, [pc, #32]	; (800e07c <HAL_PCD_MspInit+0xa0>)
 800e05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e064:	2200      	movs	r2, #0
 800e066:	2105      	movs	r1, #5
 800e068:	2043      	movs	r0, #67	; 0x43
 800e06a:	f7f5 fd3f 	bl	8003aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e06e:	2043      	movs	r0, #67	; 0x43
 800e070:	f7f5 fd58 	bl	8003b24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e074:	bf00      	nop
 800e076:	3728      	adds	r7, #40	; 0x28
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	40023800 	.word	0x40023800
 800e080:	40020000 	.word	0x40020000

0800e084 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f7fb ffca 	bl	800a034 <USBD_LL_SetupStage>
}
 800e0a0:	bf00      	nop
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e0ba:	78fa      	ldrb	r2, [r7, #3]
 800e0bc:	6879      	ldr	r1, [r7, #4]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	00db      	lsls	r3, r3, #3
 800e0c2:	1a9b      	subs	r3, r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	440b      	add	r3, r1
 800e0c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	78fb      	ldrb	r3, [r7, #3]
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	f7fc f804 	bl	800a0de <USBD_LL_DataOutStage>
}
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b082      	sub	sp, #8
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e0f0:	78fa      	ldrb	r2, [r7, #3]
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	1a9b      	subs	r3, r3, r2
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	3348      	adds	r3, #72	; 0x48
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	78fb      	ldrb	r3, [r7, #3]
 800e104:	4619      	mov	r1, r3
 800e106:	f7fc f84d 	bl	800a1a4 <USBD_LL_DataInStage>
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e120:	4618      	mov	r0, r3
 800e122:	f7fc f961 	bl	800a3e8 <USBD_LL_SOF>
}
 800e126:	bf00      	nop
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e136:	2301      	movs	r3, #1
 800e138:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d102      	bne.n	800e148 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e142:	2300      	movs	r3, #0
 800e144:	73fb      	strb	r3, [r7, #15]
 800e146:	e008      	b.n	800e15a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d102      	bne.n	800e156 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e150:	2301      	movs	r3, #1
 800e152:	73fb      	strb	r3, [r7, #15]
 800e154:	e001      	b.n	800e15a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e156:	f7f4 f8d5 	bl	8002304 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e160:	7bfa      	ldrb	r2, [r7, #15]
 800e162:	4611      	mov	r1, r2
 800e164:	4618      	mov	r0, r3
 800e166:	f7fc f901 	bl	800a36c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e170:	4618      	mov	r0, r3
 800e172:	f7fc f8ad 	bl	800a2d0 <USBD_LL_Reset>
}
 800e176:	bf00      	nop
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
	...

0800e180 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b082      	sub	sp, #8
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fc f8fc 	bl	800a38c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	6812      	ldr	r2, [r2, #0]
 800e1a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1a6:	f043 0301 	orr.w	r3, r3, #1
 800e1aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a1b      	ldr	r3, [r3, #32]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d005      	beq.n	800e1c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1b4:	4b04      	ldr	r3, [pc, #16]	; (800e1c8 <HAL_PCD_SuspendCallback+0x48>)
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	4a03      	ldr	r2, [pc, #12]	; (800e1c8 <HAL_PCD_SuspendCallback+0x48>)
 800e1ba:	f043 0306 	orr.w	r3, r3, #6
 800e1be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	e000ed00 	.word	0xe000ed00

0800e1cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fc f8ec 	bl	800a3b8 <USBD_LL_Resume>
}
 800e1e0:	bf00      	nop
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e1fa:	78fa      	ldrb	r2, [r7, #3]
 800e1fc:	4611      	mov	r1, r2
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fc f93a 	bl	800a478 <USBD_LL_IsoOUTIncomplete>
}
 800e204:	bf00      	nop
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	460b      	mov	r3, r1
 800e216:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e21e:	78fa      	ldrb	r2, [r7, #3]
 800e220:	4611      	mov	r1, r2
 800e222:	4618      	mov	r0, r3
 800e224:	f7fc f902 	bl	800a42c <USBD_LL_IsoINIncomplete>
}
 800e228:	bf00      	nop
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fc f940 	bl	800a4c4 <USBD_LL_DevConnected>
}
 800e244:	bf00      	nop
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fc f93d 	bl	800a4da <USBD_LL_DevDisconnected>
}
 800e260:	bf00      	nop
 800e262:	3708      	adds	r7, #8
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	2b01      	cmp	r3, #1
 800e276:	d13c      	bne.n	800e2f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e278:	4a20      	ldr	r2, [pc, #128]	; (800e2fc <USBD_LL_Init+0x94>)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4a1e      	ldr	r2, [pc, #120]	; (800e2fc <USBD_LL_Init+0x94>)
 800e284:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e288:	4b1c      	ldr	r3, [pc, #112]	; (800e2fc <USBD_LL_Init+0x94>)
 800e28a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e28e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e290:	4b1a      	ldr	r3, [pc, #104]	; (800e2fc <USBD_LL_Init+0x94>)
 800e292:	2206      	movs	r2, #6
 800e294:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e296:	4b19      	ldr	r3, [pc, #100]	; (800e2fc <USBD_LL_Init+0x94>)
 800e298:	2202      	movs	r2, #2
 800e29a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e29c:	4b17      	ldr	r3, [pc, #92]	; (800e2fc <USBD_LL_Init+0x94>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e2a2:	4b16      	ldr	r3, [pc, #88]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e2a8:	4b14      	ldr	r3, [pc, #80]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2ae:	4b13      	ldr	r3, [pc, #76]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e2b4:	4b11      	ldr	r3, [pc, #68]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e2ba:	4b10      	ldr	r3, [pc, #64]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2c0:	4b0e      	ldr	r3, [pc, #56]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2c6:	480d      	ldr	r0, [pc, #52]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2c8:	f7f6 fa5b 	bl	8004782 <HAL_PCD_Init>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d001      	beq.n	800e2d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2d2:	f7f4 f817 	bl	8002304 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2d6:	2180      	movs	r1, #128	; 0x80
 800e2d8:	4808      	ldr	r0, [pc, #32]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2da:	f7f7 fbd4 	bl	8005a86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2de:	2240      	movs	r2, #64	; 0x40
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	4806      	ldr	r0, [pc, #24]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2e4:	f7f7 fb88 	bl	80059f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2e8:	2280      	movs	r2, #128	; 0x80
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	4803      	ldr	r0, [pc, #12]	; (800e2fc <USBD_LL_Init+0x94>)
 800e2ee:	f7f7 fb83 	bl	80059f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	20005980 	.word	0x20005980

0800e300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e308:	2300      	movs	r3, #0
 800e30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e316:	4618      	mov	r0, r3
 800e318:	f7f6 fb57 	bl	80049ca <HAL_PCD_Start>
 800e31c:	4603      	mov	r3, r0
 800e31e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	4618      	mov	r0, r3
 800e324:	f000 f97e 	bl	800e624 <USBD_Get_USB_Status>
 800e328:	4603      	mov	r3, r0
 800e32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	4608      	mov	r0, r1
 800e340:	4611      	mov	r1, r2
 800e342:	461a      	mov	r2, r3
 800e344:	4603      	mov	r3, r0
 800e346:	70fb      	strb	r3, [r7, #3]
 800e348:	460b      	mov	r3, r1
 800e34a:	70bb      	strb	r3, [r7, #2]
 800e34c:	4613      	mov	r3, r2
 800e34e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e35e:	78bb      	ldrb	r3, [r7, #2]
 800e360:	883a      	ldrh	r2, [r7, #0]
 800e362:	78f9      	ldrb	r1, [r7, #3]
 800e364:	f7f6 ff68 	bl	8005238 <HAL_PCD_EP_Open>
 800e368:	4603      	mov	r3, r0
 800e36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	4618      	mov	r0, r3
 800e370:	f000 f958 	bl	800e624 <USBD_Get_USB_Status>
 800e374:	4603      	mov	r3, r0
 800e376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e378:	7bbb      	ldrb	r3, [r7, #14]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	460b      	mov	r3, r1
 800e38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e39c:	78fa      	ldrb	r2, [r7, #3]
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7f6 ffb1 	bl	8005308 <HAL_PCD_EP_Close>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3aa:	7bfb      	ldrb	r3, [r7, #15]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 f939 	bl	800e624 <USBD_Get_USB_Status>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b084      	sub	sp, #16
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e3da:	78fa      	ldrb	r2, [r7, #3]
 800e3dc:	4611      	mov	r1, r2
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7f7 f871 	bl	80054c6 <HAL_PCD_EP_SetStall>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 f91a 	bl	800e624 <USBD_Get_USB_Status>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b084      	sub	sp, #16
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
 800e406:	460b      	mov	r3, r1
 800e408:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e40e:	2300      	movs	r3, #0
 800e410:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e418:	78fa      	ldrb	r2, [r7, #3]
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7f7 f8b6 	bl	800558e <HAL_PCD_EP_ClrStall>
 800e422:	4603      	mov	r3, r0
 800e424:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e426:	7bfb      	ldrb	r3, [r7, #15]
 800e428:	4618      	mov	r0, r3
 800e42a:	f000 f8fb 	bl	800e624 <USBD_Get_USB_Status>
 800e42e:	4603      	mov	r3, r0
 800e430:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e432:	7bbb      	ldrb	r3, [r7, #14]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	460b      	mov	r3, r1
 800e446:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e44e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e454:	2b00      	cmp	r3, #0
 800e456:	da0b      	bge.n	800e470 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e458:	78fb      	ldrb	r3, [r7, #3]
 800e45a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e45e:	68f9      	ldr	r1, [r7, #12]
 800e460:	4613      	mov	r3, r2
 800e462:	00db      	lsls	r3, r3, #3
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	440b      	add	r3, r1
 800e46a:	333e      	adds	r3, #62	; 0x3e
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	e00b      	b.n	800e488 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e470:	78fb      	ldrb	r3, [r7, #3]
 800e472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e476:	68f9      	ldr	r1, [r7, #12]
 800e478:	4613      	mov	r3, r2
 800e47a:	00db      	lsls	r3, r3, #3
 800e47c:	1a9b      	subs	r3, r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	440b      	add	r3, r1
 800e482:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e486:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3714      	adds	r7, #20
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	460b      	mov	r3, r1
 800e49e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e4ae:	78fa      	ldrb	r2, [r7, #3]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f6 fe9b 	bl	80051ee <HAL_PCD_SetAddress>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4bc:	7bfb      	ldrb	r3, [r7, #15]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f000 f8b0 	bl	800e624 <USBD_Get_USB_Status>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b086      	sub	sp, #24
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	60f8      	str	r0, [r7, #12]
 800e4da:	607a      	str	r2, [r7, #4]
 800e4dc:	603b      	str	r3, [r7, #0]
 800e4de:	460b      	mov	r3, r1
 800e4e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e4f0:	7af9      	ldrb	r1, [r7, #11]
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	f7f6 ff9c 	bl	8005432 <HAL_PCD_EP_Transmit>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4fe:	7dfb      	ldrb	r3, [r7, #23]
 800e500:	4618      	mov	r0, r3
 800e502:	f000 f88f 	bl	800e624 <USBD_Get_USB_Status>
 800e506:	4603      	mov	r3, r0
 800e508:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e50a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	607a      	str	r2, [r7, #4]
 800e51e:	603b      	str	r3, [r7, #0]
 800e520:	460b      	mov	r3, r1
 800e522:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e528:	2300      	movs	r3, #0
 800e52a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e532:	7af9      	ldrb	r1, [r7, #11]
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	f7f6 ff30 	bl	800539c <HAL_PCD_EP_Receive>
 800e53c:	4603      	mov	r3, r0
 800e53e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e540:	7dfb      	ldrb	r3, [r7, #23]
 800e542:	4618      	mov	r0, r3
 800e544:	f000 f86e 	bl	800e624 <USBD_Get_USB_Status>
 800e548:	4603      	mov	r3, r0
 800e54a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e54c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3718      	adds	r7, #24
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
	...

0800e558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <HAL_PCDEx_LPM_Callback+0x18>
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d01f      	beq.n	800e5ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e56e:	e03b      	b.n	800e5e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d007      	beq.n	800e588 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e578:	f7f3 f956 	bl	8001828 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e57c:	4b1c      	ldr	r3, [pc, #112]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	4a1b      	ldr	r2, [pc, #108]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e582:	f023 0306 	bic.w	r3, r3, #6
 800e586:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	6812      	ldr	r2, [r2, #0]
 800e596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e59a:	f023 0301 	bic.w	r3, r3, #1
 800e59e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fb ff06 	bl	800a3b8 <USBD_LL_Resume>
    break;
 800e5ac:	e01c      	b.n	800e5e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	6812      	ldr	r2, [r2, #0]
 800e5bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5c0:	f043 0301 	orr.w	r3, r3, #1
 800e5c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fb fedd 	bl	800a38c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d005      	beq.n	800e5e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5dc:	691b      	ldr	r3, [r3, #16]
 800e5de:	4a04      	ldr	r2, [pc, #16]	; (800e5f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5e0:	f043 0306 	orr.w	r3, r3, #6
 800e5e4:	6113      	str	r3, [r2, #16]
    break;
 800e5e6:	bf00      	nop
}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	e000ed00 	.word	0xe000ed00

0800e5f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e5fc:	4b03      	ldr	r3, [pc, #12]	; (800e60c <USBD_static_malloc+0x18>)
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	20005400 	.word	0x20005400

0800e610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]

}
 800e618:	bf00      	nop
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e624:	b480      	push	{r7}
 800e626:	b085      	sub	sp, #20
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e62e:	2300      	movs	r3, #0
 800e630:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	2b03      	cmp	r3, #3
 800e636:	d817      	bhi.n	800e668 <USBD_Get_USB_Status+0x44>
 800e638:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <USBD_Get_USB_Status+0x1c>)
 800e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e63e:	bf00      	nop
 800e640:	0800e651 	.word	0x0800e651
 800e644:	0800e657 	.word	0x0800e657
 800e648:	0800e65d 	.word	0x0800e65d
 800e64c:	0800e663 	.word	0x0800e663
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e650:	2300      	movs	r3, #0
 800e652:	73fb      	strb	r3, [r7, #15]
    break;
 800e654:	e00b      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e656:	2303      	movs	r3, #3
 800e658:	73fb      	strb	r3, [r7, #15]
    break;
 800e65a:	e008      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e65c:	2301      	movs	r3, #1
 800e65e:	73fb      	strb	r3, [r7, #15]
    break;
 800e660:	e005      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	73fb      	strb	r3, [r7, #15]
    break;
 800e666:	e002      	b.n	800e66e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e668:	2303      	movs	r3, #3
 800e66a:	73fb      	strb	r3, [r7, #15]
    break;
 800e66c:	bf00      	nop
  }
  return usb_status;
 800e66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3714      	adds	r7, #20
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	4608      	mov	r0, r1
 800e686:	4611      	mov	r1, r2
 800e688:	461a      	mov	r2, r3
 800e68a:	4603      	mov	r3, r0
 800e68c:	70fb      	strb	r3, [r7, #3]
 800e68e:	460b      	mov	r3, r1
 800e690:	70bb      	strb	r3, [r7, #2]
 800e692:	4613      	mov	r3, r2
 800e694:	707b      	strb	r3, [r7, #1]
                return 0;
 800e696:	2300      	movs	r3, #0
        }
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	70fb      	strb	r3, [r7, #3]
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	70bb      	strb	r3, [r7, #2]
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	707b      	strb	r3, [r7, #1]
                return 0;
 800e6be:	2300      	movs	r3, #0
        }
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
                return 0;
 800e6d4:	2300      	movs	r3, #0
        }
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	370c      	adds	r7, #12
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800e6e2:	b480      	push	{r7}
 800e6e4:	b083      	sub	sp, #12
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
                return 0;
 800e6ea:	2300      	movs	r3, #0
        }
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	370c      	adds	r7, #12
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr

0800e6f8 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
                return 0;
 800e700:	2300      	movs	r3, #0
        }
 800e702:	4618      	mov	r0, r3
 800e704:	370c      	adds	r7, #12
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr

0800e70e <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800e70e:	b480      	push	{r7}
 800e710:	b083      	sub	sp, #12
 800e712:	af00      	add	r7, sp, #0
 800e714:	6078      	str	r0, [r7, #4]
 800e716:	460b      	mov	r3, r1
 800e718:	70fb      	strb	r3, [r7, #3]
                return;
 800e71a:	bf00      	nop
        } // Note used for hubs only!
 800e71c:	370c      	adds	r7, #12
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr

0800e726 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800e726:	b480      	push	{r7}
 800e728:	b083      	sub	sp, #12
 800e72a:	af00      	add	r7, sp, #0
 800e72c:	6078      	str	r0, [r7, #4]
 800e72e:	460b      	mov	r3, r1
 800e730:	807b      	strh	r3, [r7, #2]
 800e732:	4613      	mov	r3, r2
 800e734:	803b      	strh	r3, [r7, #0]
                return false;
 800e736:	2300      	movs	r3, #0
        }
 800e738:	4618      	mov	r0, r3
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	70fb      	strb	r3, [r7, #3]
                return false;
 800e750:	2300      	movs	r3, #0
        }
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800e75e:	b480      	push	{r7}
 800e760:	b083      	sub	sp, #12
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	460b      	mov	r3, r1
 800e768:	70fb      	strb	r3, [r7, #3]
                return true;
 800e76a:	2301      	movs	r3, #1
        }
 800e76c:	4618      	mov	r0, r3
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800e780:	687b      	ldr	r3, [r7, #4]
        };
 800e782:	4618      	mov	r0, r3
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800e78e:	b480      	push	{r7}
 800e790:	b085      	sub	sp, #20
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
 800e79e:	2b0f      	cmp	r3, #15
 800e7a0:	d812      	bhi.n	800e7c8 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800e7a2:	7bfa      	ldrb	r2, [r7, #15]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	321e      	adds	r2, #30
 800e7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d107      	bne.n	800e7c0 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800e7b0:	7bfa      	ldrb	r2, [r7, #15]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	321e      	adds	r2, #30
 800e7b6:	6839      	ldr	r1, [r7, #0]
 800e7b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	e004      	b.n	800e7ca <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800e7c0:	7bfb      	ldrb	r3, [r7, #15]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	73fb      	strb	r3, [r7, #15]
 800e7c6:	e7e9      	b.n	800e79c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800e7c8:	23d3      	movs	r3, #211	; 0xd3
        };
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3714      	adds	r7, #20
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800e7d6:	b480      	push	{r7}
 800e7d8:	b083      	sub	sp, #12
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	701a      	strb	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	705a      	strb	r2, [r3, #1]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	709a      	strb	r2, [r3, #2]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	70da      	strb	r2, [r3, #3]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	711a      	strb	r2, [r3, #4]
        };
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	601a      	str	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	711a      	strb	r2, [r3, #4]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	715a      	strb	r2, [r3, #5]
        };
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	781a      	ldrb	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	715a      	strb	r2, [r3, #5]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	795a      	ldrb	r2, [r3, #5]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	711a      	strb	r2, [r3, #4]
        };
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr

0800e85c <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	711a      	strb	r2, [r3, #4]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	80da      	strh	r2, [r3, #6]
        };
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4618      	mov	r0, r3
 800e87a:	370c      	adds	r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr

0800e884 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	80da      	strh	r2, [r3, #6]
        };
 800e89e:	bf00      	nop
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800e8aa:	b480      	push	{r7}
 800e8ac:	b085      	sub	sp, #20
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	607a      	str	r2, [r7, #4]
 800e8b6:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	791b      	ldrb	r3, [r3, #4]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d009      	beq.n	800e8d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800e8c4:	e029      	b.n	800e91a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	887a      	ldrh	r2, [r7, #2]
 800e8ca:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	791b      	ldrb	r3, [r3, #4]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	88db      	ldrh	r3, [r3, #6]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d015      	beq.n	800e90c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d011      	beq.n	800e90c <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	88db      	ldrh	r3, [r3, #6]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	80da      	strh	r2, [r3, #6]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	3b01      	subs	r3, #1
 800e904:	b29a      	uxth	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	801a      	strh	r2, [r3, #0]
 800e90a:	e7e5      	b.n	800e8d8 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	88db      	ldrh	r3, [r3, #6]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d102      	bne.n	800e91a <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2200      	movs	r2, #0
 800e918:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	88db      	ldrh	r3, [r3, #6]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	bf0c      	ite	eq
 800e922:	2301      	moveq	r3, #1
 800e924:	2300      	movne	r3, #0
 800e926:	b2db      	uxtb	r3, r3
        };
 800e928:	4618      	mov	r0, r3
 800e92a:	3714      	adds	r7, #20
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	4608      	mov	r0, r1
 800e93e:	4611      	mov	r1, r2
 800e940:	461a      	mov	r2, r3
 800e942:	4603      	mov	r3, r0
 800e944:	70fb      	strb	r3, [r7, #3]
 800e946:	460b      	mov	r3, r1
 800e948:	70bb      	strb	r3, [r7, #2]
 800e94a:	4613      	mov	r3, r2
 800e94c:	707b      	strb	r3, [r7, #1]
        };
 800e94e:	bf00      	nop
 800e950:	370c      	adds	r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr
	...

0800e95c <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	4a04      	ldr	r2, [pc, #16]	; (800e978 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	08019500 	.word	0x08019500

0800e97c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	4a04      	ldr	r2, [pc, #16]	; (800e998 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr
 800e998:	080194e8 	.word	0x080194e8

0800e99c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
                return bAddress;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	370c      	adds	r7, #12
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	370c      	adds	r7, #12
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr

0800e9d0 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	460b      	mov	r3, r1
 800e9da:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800e9dc:	78fb      	ldrb	r3, [r7, #3]
 800e9de:	2be0      	cmp	r3, #224	; 0xe0
 800e9e0:	bf0c      	ite	eq
 800e9e2:	2301      	moveq	r3, #1
 800e9e4:	2300      	movne	r3, #0
 800e9e6:	b2db      	uxtb	r3, r3
        };
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	807b      	strh	r3, [r7, #2]
 800ea00:	4613      	mov	r3, r2
 800ea02:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800ea04:	887b      	ldrh	r3, [r7, #2]
 800ea06:	f640 225c 	movw	r2, #2652	; 0xa5c
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d104      	bne.n	800ea18 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800ea0e:	883b      	ldrh	r3, [r7, #0]
 800ea10:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d009      	beq.n	800ea2c <_ZN3BTD8VIDPIDOKEtt+0x38>
 800ea18:	887b      	ldrh	r3, [r7, #2]
 800ea1a:	f240 520d 	movw	r2, #1293	; 0x50d
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d106      	bne.n	800ea30 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800ea22:	883b      	ldrh	r3, [r7, #0]
 800ea24:	f240 625a 	movw	r2, #1626	; 0x65a
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d101      	bne.n	800ea30 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e02d      	b.n	800ea8c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d113      	bne.n	800ea60 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	7d5b      	ldrb	r3, [r3, #21]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10f      	bne.n	800ea60 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	7d9b      	ldrb	r3, [r3, #22]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10b      	bne.n	800ea60 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	7ddb      	ldrb	r3, [r3, #23]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d107      	bne.n	800ea60 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	7e1b      	ldrb	r3, [r3, #24]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d103      	bne.n	800ea60 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	7e5b      	ldrb	r3, [r3, #25]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d014      	beq.n	800ea8a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800ea60:	887b      	ldrh	r3, [r7, #2]
 800ea62:	f240 524c 	movw	r2, #1356	; 0x54c
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d10f      	bne.n	800ea8a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800ea6a:	883b      	ldrh	r3, [r7, #0]
 800ea6c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ea70:	d009      	beq.n	800ea86 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800ea72:	883b      	ldrh	r3, [r7, #0]
 800ea74:	f240 422f 	movw	r2, #1071	; 0x42f
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d004      	beq.n	800ea86 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800ea7c:	883b      	ldrh	r3, [r7, #0]
 800ea7e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d101      	bne.n	800ea8a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800ea86:	2301      	movs	r3, #1
 800ea88:	e000      	b.n	800ea8c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800ea8a:	2300      	movs	r3, #0
        };
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff ff59 	bl	800e95c <_ZN15USBDeviceConfigC1Ev>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	3304      	adds	r3, #4
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7ff ff64 	bl	800e97c <_ZN17UsbConfigXtracterC1Ev>
 800eab4:	4a2b      	ldr	r2, [pc, #172]	; (800eb64 <_ZN3BTDC1EP3USB+0xcc>)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	601a      	str	r2, [r3, #0]
 800eaba:	4a2b      	ldr	r2, [pc, #172]	; (800eb68 <_ZN3BTDC1EP3USB+0xd0>)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	605a      	str	r2, [r3, #4]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	64da      	str	r2, [r3, #76]	; 0x4c
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	661a      	str	r2, [r3, #96]	; 0x60
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	73fb      	strb	r3, [r7, #15]
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
 800eb22:	2b03      	cmp	r3, #3
 800eb24:	d80a      	bhi.n	800eb3c <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	3318      	adds	r3, #24
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4413      	add	r3, r2
 800eb30:	2200      	movs	r2, #0
 800eb32:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800eb34:	7bfb      	ldrb	r3, [r7, #15]
 800eb36:	3301      	adds	r3, #1
 800eb38:	73fb      	strb	r3, [r7, #15]
 800eb3a:	e7f1      	b.n	800eb20 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 fa7d 	bl	800f03c <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d006      	beq.n	800eb58 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	4611      	mov	r1, r2
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7ff fe1b 	bl	800e78e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3710      	adds	r7, #16
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	080194a8 	.word	0x080194a8
 800eb68:	080194dc 	.word	0x080194dc

0800eb6c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800eb6c:	b590      	push	{r4, r7, lr}
 800eb6e:	b08f      	sub	sp, #60	; 0x3c
 800eb70:	af02      	add	r7, sp, #8
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	4608      	mov	r0, r1
 800eb76:	4611      	mov	r1, r2
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	70fb      	strb	r3, [r7, #3]
 800eb7e:	460b      	mov	r3, r1
 800eb80:	70bb      	strb	r3, [r7, #2]
 800eb82:	4613      	mov	r3, r2
 800eb84:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800eb86:	2312      	movs	r3, #18
 800eb88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800eb8c:	f107 0308 	add.w	r3, r7, #8
 800eb90:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800eb92:	2300      	movs	r3, #0
 800eb94:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800eb96:	2300      	movs	r3, #0
 800eb98:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 fa4e 	bl	800f03c <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff fde7 	bl	800e778 <_ZN3USB14GetAddressPoolEv>
 800ebaa:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800ebb6:	23d9      	movs	r3, #217	; 0xd9
 800ebb8:	e087      	b.n	800ecca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2100      	movs	r1, #0
 800ebc2:	69f8      	ldr	r0, [r7, #28]
 800ebc4:	4798      	blx	r3
 800ebc6:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ebce:	23d6      	movs	r3, #214	; 0xd6
 800ebd0:	e07b      	b.n	800ecca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800ebda:	23d7      	movs	r3, #215	; 0xd7
 800ebdc:	e075      	b.n	800ecca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800ebea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebec:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf0:	787a      	ldrb	r2, [r7, #1]
 800ebf2:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ebf8:	f107 0308 	add.w	r3, r7, #8
 800ebfc:	9300      	str	r3, [sp, #0]
 800ebfe:	2312      	movs	r3, #18
 800ec00:	2200      	movs	r2, #0
 800ec02:	2100      	movs	r1, #0
 800ec04:	f005 fa13 	bl	801402e <_ZN3USB11getDevDescrEhhtPh>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800ec0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec10:	6a3a      	ldr	r2, [r7, #32]
 800ec12:	601a      	str	r2, [r3, #0]

        if(rcode)
 800ec14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d146      	bne.n	800ecaa <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3304      	adds	r3, #4
 800ec22:	681c      	ldr	r4, [r3, #0]
 800ec24:	78bb      	ldrb	r3, [r7, #2]
 800ec26:	78f9      	ldrb	r1, [r7, #3]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	69f8      	ldr	r0, [r7, #28]
 800ec2c:	47a0      	blx	r4
 800ec2e:	4603      	mov	r3, r0
 800ec30:	461a      	mov	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d101      	bne.n	800ec46 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800ec42:	23d4      	movs	r3, #212	; 0xd4
 800ec44:	e041      	b.n	800ecca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	791b      	ldrb	r3, [r3, #4]
 800ec4a:	2b09      	cmp	r3, #9
 800ec4c:	d017      	beq.n	800ec7e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	79da      	ldrb	r2, [r3, #7]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	7c5a      	ldrb	r2, [r3, #17]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	891b      	ldrh	r3, [r3, #8]
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	895b      	ldrh	r3, [r3, #10]
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800ec7a:	23e0      	movs	r3, #224	; 0xe0
 800ec7c:	e025      	b.n	800ecca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800ec7e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	f005 fa6b 	bl	8014168 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800ec92:	23d1      	movs	r3, #209	; 0xd1
 800ec94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	4798      	blx	r3
        return rcode;
 800eca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eca8:	e00f      	b.n	800ecca <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800ecaa:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800ecac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecb0:	2b0d      	cmp	r3, #13
 800ecb2:	d002      	beq.n	800ecba <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800ecb4:	23e1      	movs	r3, #225	; 0xe1
 800ecb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	3308      	adds	r3, #8
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	4798      	blx	r3
        return rcode;
 800ecc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800ecca:	4618      	mov	r0, r3
 800eccc:	3734      	adds	r7, #52	; 0x34
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd90      	pop	{r4, r7, pc}

0800ecd2 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b096      	sub	sp, #88	; 0x58
 800ecd6:	af02      	add	r7, sp, #8
 800ecd8:	6078      	str	r0, [r7, #4]
 800ecda:	4608      	mov	r0, r1
 800ecdc:	4611      	mov	r1, r2
 800ecde:	461a      	mov	r2, r3
 800ece0:	4603      	mov	r3, r0
 800ece2:	70fb      	strb	r3, [r7, #3]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70bb      	strb	r3, [r7, #2]
 800ece8:	4613      	mov	r3, r2
 800ecea:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800ecf2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fd38 	bl	800e778 <_ZN3USB14GetAddressPoolEv>
 800ed08:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ed0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ed16:	4611      	mov	r1, r2
 800ed18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ed1a:	4798      	blx	r3
 800ed1c:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ed1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ed24:	23d6      	movs	r3, #214	; 0xd6
 800ed26:	e185      	b.n	800f034 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800ed28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ed2c:	f7f4 fe02 	bl	8003934 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	f005 fa13 	bl	8014168 <_ZN3USB7setAddrEhhh>
 800ed42:	4603      	mov	r3, r0
 800ed44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800ed48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800ed50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed52:	2200      	movs	r2, #0
 800ed54:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800ed56:	e165      	b.n	800f024 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800ed58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ed5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ed6e:	4798      	blx	r3
 800ed70:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800ed72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d101      	bne.n	800ed7c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ed78:	23d6      	movs	r3, #214	; 0xd6
 800ed7a:	e15b      	b.n	800f034 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800ed7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed7e:	787a      	ldrb	r2, [r7, #1]
 800ed80:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	3351      	adds	r3, #81	; 0x51
 800ed90:	2201      	movs	r2, #1
 800ed92:	f004 f8dc 	bl	8012f4e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800ed96:	4603      	mov	r3, r0
 800ed98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800ed9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f040 8128 	bne.w	800eff6 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800edac:	f240 524c 	movw	r2, #1356	; 0x54c
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d177      	bne.n	800eea4 <_ZN3BTD4InitEhhb+0x1d2>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800edba:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800edbe:	d00d      	beq.n	800eddc <_ZN3BTD4InitEhhb+0x10a>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800edc6:	f240 422f 	movw	r2, #1071	; 0x42f
 800edca:	4293      	cmp	r3, r2
 800edcc:	d006      	beq.n	800eddc <_ZN3BTD4InitEhhb+0x10a>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800edd4:	f240 32d5 	movw	r2, #981	; 0x3d5
 800edd8:	4293      	cmp	r3, r2
 800edda:	d163      	bne.n	800eea4 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800eddc:	2064      	movs	r0, #100	; 0x64
 800edde:	f7f4 fda9 	bl	8003934 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800edf2:	2301      	movs	r3, #1
 800edf4:	f005 f9e6 	bl	80141c4 <_ZN3USB7setConfEhhh>
 800edf8:	4603      	mov	r3, r0
 800edfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800edfe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f040 80f9 	bne.w	800effa <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	7d1b      	ldrb	r3, [r3, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d113      	bne.n	800ee38 <_ZN3BTD4InitEhhb+0x166>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d5b      	ldrb	r3, [r3, #21]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10f      	bne.n	800ee38 <_ZN3BTD4InitEhhb+0x166>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	7d9b      	ldrb	r3, [r3, #22]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10b      	bne.n	800ee38 <_ZN3BTD4InitEhhb+0x166>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	7ddb      	ldrb	r3, [r3, #23]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d107      	bne.n	800ee38 <_ZN3BTD4InitEhhb+0x166>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7e1b      	ldrb	r3, [r3, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d103      	bne.n	800ee38 <_ZN3BTD4InitEhhb+0x166>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	7e5b      	ldrb	r3, [r3, #25]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d019      	beq.n	800ee6c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ee3e:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800ee42:	d006      	beq.n	800ee52 <_ZN3BTD4InitEhhb+0x180>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800ee4a:	f240 422f 	movw	r2, #1071	; 0x42f
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d106      	bne.n	800ee60 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3314      	adds	r3, #20
 800ee56:	4619      	mov	r1, r3
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f002 f8b0 	bl	8010fbe <_ZN3BTD9setBdaddrEPh>
 800ee5e:	e005      	b.n	800ee6c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3314      	adds	r3, #20
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f002 f8e9 	bl	801103e <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f005 f9a1 	bl	80141c4 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f005 f96a 	bl	8014168 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3308      	adds	r3, #8
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800eea0:	23d1      	movs	r3, #209	; 0xd1
 800eea2:	e0c7      	b.n	800f034 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800eea4:	2300      	movs	r3, #0
 800eea6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800eeaa:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800eeae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d25e      	bcs.n	800ef74 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800eebc:	f640 225c 	movw	r2, #2652	; 0xa5c
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d106      	bne.n	800eed2 <_ZN3BTD4InitEhhb+0x200>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800eeca:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800eece:	4293      	cmp	r3, r2
 800eed0:	d00d      	beq.n	800eeee <_ZN3BTD4InitEhhb+0x21c>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800eed8:	f240 520d 	movw	r2, #1293	; 0x50d
 800eedc:	4293      	cmp	r3, r2
 800eede:	d120      	bne.n	800ef22 <_ZN3BTD4InitEhhb+0x250>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800eee6:	f240 625a 	movw	r2, #1626	; 0x65a
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d119      	bne.n	800ef22 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	1d1a      	adds	r2, r3, #4
 800eef2:	f107 0308 	add.w	r3, r7, #8
 800eef6:	4611      	mov	r1, r2
 800eef8:	4618      	mov	r0, r3
 800eefa:	f002 f8f3 	bl	80110e4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ef08:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ef0c:	f107 0308 	add.w	r3, r7, #8
 800ef10:	9300      	str	r3, [sp, #0]
 800ef12:	4613      	mov	r3, r2
 800ef14:	2200      	movs	r2, #0
 800ef16:	f005 f8da 	bl	80140ce <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ef20:	e018      	b.n	800ef54 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	1d1a      	adds	r2, r3, #4
 800ef26:	f107 0308 	add.w	r3, r7, #8
 800ef2a:	4611      	mov	r1, r2
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f002 f927 	bl	8011180 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ef3c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ef40:	f107 0308 	add.w	r3, r7, #8
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	4613      	mov	r3, r2
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f005 f8c0 	bl	80140ce <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800ef54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d150      	bne.n	800effe <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	d805      	bhi.n	800ef72 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800ef66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800ef70:	e79b      	b.n	800eeaa <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800ef72:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ef7a:	2b03      	cmp	r3, #3
 800ef7c:	d945      	bls.n	800f00a <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	3351      	adds	r3, #81	; 0x51
 800ef92:	f003 ffdc 	bl	8012f4e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800ef9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d12e      	bne.n	800f002 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800efba:	f005 f903 	bl	80141c4 <_ZN3USB7setConfEhhh>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800efc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d11c      	bne.n	800f006 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2264      	movs	r2, #100	; 0x64
 800efd0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2200      	movs	r2, #0
 800efe8:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800eff2:	2300      	movs	r3, #0
 800eff4:	e01e      	b.n	800f034 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800eff6:	bf00      	nop
 800eff8:	e014      	b.n	800f024 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800effa:	bf00      	nop
 800effc:	e012      	b.n	800f024 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800effe:	bf00      	nop
 800f000:	e010      	b.n	800f024 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800f002:	bf00      	nop
 800f004:	e00e      	b.n	800f024 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800f006:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800f008:	e00c      	b.n	800f024 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800f00a:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f016:	2300      	movs	r3, #0
 800f018:	2200      	movs	r2, #0
 800f01a:	f005 f8a5 	bl	8014168 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800f01e:	23d1      	movs	r3, #209	; 0xd1
 800f020:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	3308      	adds	r3, #8
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	4798      	blx	r3
        return rcode;
 800f030:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800f034:	4618      	mov	r0, r3
 800f036:	3750      	adds	r7, #80	; 0x50
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800f044:	2300      	movs	r3, #0
 800f046:	73fb      	strb	r3, [r7, #15]
 800f048:	7bfb      	ldrb	r3, [r7, #15]
 800f04a:	2b03      	cmp	r3, #3
 800f04c:	d845      	bhi.n	800f0da <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800f04e:	7bfa      	ldrb	r2, [r7, #15]
 800f050:	6879      	ldr	r1, [r7, #4]
 800f052:	4613      	mov	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4413      	add	r3, r2
 800f058:	440b      	add	r3, r1
 800f05a:	3351      	adds	r3, #81	; 0x51
 800f05c:	2200      	movs	r2, #0
 800f05e:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d001      	beq.n	800f06a <_ZN3BTD10InitializeEv+0x2e>
 800f066:	2000      	movs	r0, #0
 800f068:	e000      	b.n	800f06c <_ZN3BTD10InitializeEv+0x30>
 800f06a:	2008      	movs	r0, #8
 800f06c:	7bfa      	ldrb	r2, [r7, #15]
 800f06e:	6879      	ldr	r1, [r7, #4]
 800f070:	4613      	mov	r3, r2
 800f072:	005b      	lsls	r3, r3, #1
 800f074:	4413      	add	r3, r2
 800f076:	440b      	add	r3, r1
 800f078:	3352      	adds	r3, #82	; 0x52
 800f07a:	4602      	mov	r2, r0
 800f07c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800f07e:	7bfa      	ldrb	r2, [r7, #15]
 800f080:	6879      	ldr	r1, [r7, #4]
 800f082:	4613      	mov	r3, r2
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	4413      	add	r3, r2
 800f088:	440b      	add	r3, r1
 800f08a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800f08e:	78d3      	ldrb	r3, [r2, #3]
 800f090:	f36f 0300 	bfc	r3, #0, #1
 800f094:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800f096:	7bfa      	ldrb	r2, [r7, #15]
 800f098:	6879      	ldr	r1, [r7, #4]
 800f09a:	4613      	mov	r3, r2
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	4413      	add	r3, r2
 800f0a0:	440b      	add	r3, r1
 800f0a2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800f0a6:	78d3      	ldrb	r3, [r2, #3]
 800f0a8:	f36f 0341 	bfc	r3, #1, #1
 800f0ac:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800f0ae:	7bfb      	ldrb	r3, [r7, #15]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <_ZN3BTD10InitializeEv+0x7c>
 800f0b4:	2101      	movs	r1, #1
 800f0b6:	e000      	b.n	800f0ba <_ZN3BTD10InitializeEv+0x7e>
 800f0b8:	210f      	movs	r1, #15
 800f0ba:	7bfa      	ldrb	r2, [r7, #15]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	4613      	mov	r3, r2
 800f0c0:	005b      	lsls	r3, r3, #1
 800f0c2:	4413      	add	r3, r2
 800f0c4:	4403      	add	r3, r0
 800f0c6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800f0ca:	78d3      	ldrb	r3, [r2, #3]
 800f0cc:	f361 0387 	bfi	r3, r1, #2, #6
 800f0d0:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
 800f0d8:	e7b6      	b.n	800f048 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73fb      	strb	r3, [r7, #15]
 800f0de:	7bfb      	ldrb	r3, [r7, #15]
 800f0e0:	2b03      	cmp	r3, #3
 800f0e2:	d81c      	bhi.n	800f11e <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	3318      	adds	r3, #24
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4413      	add	r3, r2
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d010      	beq.n	800f116 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	3318      	adds	r3, #24
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	6859      	ldr	r1, [r3, #4]
 800f100:	7bfb      	ldrb	r3, [r7, #15]
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	3318      	adds	r3, #24
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4413      	add	r3, r2
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3308      	adds	r3, #8
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4608      	mov	r0, r1
 800f114:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800f116:	7bfb      	ldrb	r3, [r7, #15]
 800f118:	3301      	adds	r3, #1
 800f11a:	73fb      	strb	r3, [r7, #15]
 800f11c:	e7df      	b.n	800f0de <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2200      	movs	r2, #0
 800f14a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2201      	movs	r2, #1
 800f152:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2200      	movs	r2, #0
 800f15a:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2200      	movs	r2, #0
 800f170:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800f174:	bf00      	nop
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	4608      	mov	r0, r1
 800f186:	4611      	mov	r1, r2
 800f188:	461a      	mov	r2, r3
 800f18a:	4603      	mov	r3, r0
 800f18c:	70fb      	strb	r3, [r7, #3]
 800f18e:	460b      	mov	r3, r1
 800f190:	70bb      	strb	r3, [r7, #2]
 800f192:	4613      	mov	r3, r2
 800f194:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800f196:	787b      	ldrb	r3, [r7, #1]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d15d      	bne.n	800f258 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	78fa      	ldrb	r2, [r7, #3]
 800f1a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	78db      	ldrb	r3, [r3, #3]
 800f1a8:	f003 0303 	and.w	r3, r3, #3
 800f1ac:	2b03      	cmp	r3, #3
 800f1ae:	d114      	bne.n	800f1da <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	789b      	ldrb	r3, [r3, #2]
 800f1b4:	b25b      	sxtb	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	da0f      	bge.n	800f1da <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800f1be:	7bfa      	ldrb	r2, [r7, #15]
 800f1c0:	6879      	ldr	r1, [r7, #4]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	4413      	add	r3, r2
 800f1c8:	440b      	add	r3, r1
 800f1ca:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800f1ce:	78d3      	ldrb	r3, [r2, #3]
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	f361 0387 	bfi	r3, r1, #2, #6
 800f1d6:	70d3      	strb	r3, [r2, #3]
 800f1d8:	e00e      	b.n	800f1f8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	78db      	ldrb	r3, [r3, #3]
 800f1de:	f003 0303 	and.w	r3, r3, #3
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d13a      	bne.n	800f25c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	789b      	ldrb	r3, [r3, #2]
 800f1ea:	b25b      	sxtb	r3, r3
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	da01      	bge.n	800f1f4 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800f1f0:	2302      	movs	r3, #2
 800f1f2:	e000      	b.n	800f1f6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	789b      	ldrb	r3, [r3, #2]
 800f1fc:	7bfa      	ldrb	r2, [r7, #15]
 800f1fe:	f003 030f 	and.w	r3, r3, #15
 800f202:	b2d8      	uxtb	r0, r3
 800f204:	6879      	ldr	r1, [r7, #4]
 800f206:	4613      	mov	r3, r2
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	4413      	add	r3, r2
 800f20c:	440b      	add	r3, r1
 800f20e:	3351      	adds	r3, #81	; 0x51
 800f210:	4602      	mov	r2, r0
 800f212:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	889b      	ldrh	r3, [r3, #4]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	7bfa      	ldrb	r2, [r7, #15]
 800f21c:	b2d8      	uxtb	r0, r3
 800f21e:	6879      	ldr	r1, [r7, #4]
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	440b      	add	r3, r1
 800f228:	3352      	adds	r3, #82	; 0x52
 800f22a:	4602      	mov	r2, r0
 800f22c:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	799b      	ldrb	r3, [r3, #6]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d204      	bcs.n	800f246 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	799a      	ldrb	r2, [r3, #6]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800f256:	e002      	b.n	800f25e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800f258:	bf00      	nop
 800f25a:	e000      	b.n	800f25e <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800f25c:	bf00      	nop
}
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800f268:	f1a0 0004 	sub.w	r0, r0, #4
 800f26c:	f7ff bf86 	b.w	800f17c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800f270 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7ff fedf 	bl	800f03c <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff fa78 	bl	800e778 <_ZN3USB14GetAddressPoolEv>
 800f288:	4603      	mov	r3, r0
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	3208      	adds	r2, #8
 800f28e:	6812      	ldr	r2, [r2, #0]
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800f296:	4618      	mov	r0, r3
 800f298:	4790      	blx	r2
        return 0;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800f2b2:	f083 0301 	eor.w	r3, r3, #1
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e01d      	b.n	800f2fc <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800f2c0:	f7f4 fb2c 	bl	800391c <HAL_GetTick>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	43db      	mvns	r3, r3
 800f2ce:	0fdb      	lsrs	r3, r3, #31
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d011      	beq.n	800f2fa <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800f2d6:	f7f4 fb21 	bl	800391c <HAL_GetTick>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800f2e2:	441a      	add	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 f80b 	bl	800f304 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fb22 	bl	800f938 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fe4b 	bl	800ff90 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800f2fa:	2300      	movs	r3, #0
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3708      	adds	r7, #8
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800f304:	b5b0      	push	{r4, r5, r7, lr}
 800f306:	b088      	sub	sp, #32
 800f308:	af02      	add	r7, sp, #8
 800f30a:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800f30c:	2340      	movs	r3, #64	; 0x40
 800f30e:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3389      	adds	r3, #137	; 0x89
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800f32a:	f107 050c 	add.w	r5, r7, #12
 800f32e:	9201      	str	r2, [sp, #4]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	462b      	mov	r3, r5
 800f334:	4622      	mov	r2, r4
 800f336:	f003 ff72 	bl	801321e <_ZN3USB10inTransferEhhPtPhh>
 800f33a:	4603      	mov	r3, r0
 800f33c:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d003      	beq.n	800f34c <_ZN3BTD14HCI_event_taskEv+0x48>
 800f344:	7bfb      	ldrb	r3, [r7, #15]
 800f346:	2b04      	cmp	r3, #4
 800f348:	f040 82f1 	bne.w	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800f352:	3b01      	subs	r3, #1
 800f354:	2b35      	cmp	r3, #53	; 0x35
 800f356:	f200 82ea 	bhi.w	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
 800f35a:	a201      	add	r2, pc, #4	; (adr r2, 800f360 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800f35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f360:	0800f541 	.word	0x0800f541
 800f364:	0800f5a1 	.word	0x0800f5a1
 800f368:	0800f6f9 	.word	0x0800f6f9
 800f36c:	0800f7e3 	.word	0x0800f7e3
 800f370:	0800f755 	.word	0x0800f755
 800f374:	0800f8a1 	.word	0x0800f8a1
 800f378:	0800f787 	.word	0x0800f787
 800f37c:	0800f919 	.word	0x0800f919
 800f380:	0800f919 	.word	0x0800f919
 800f384:	0800f92f 	.word	0x0800f92f
 800f388:	0800f92f 	.word	0x0800f92f
 800f38c:	0800f919 	.word	0x0800f919
 800f390:	0800f919 	.word	0x0800f919
 800f394:	0800f439 	.word	0x0800f439
 800f398:	0800f919 	.word	0x0800f919
 800f39c:	0800f92f 	.word	0x0800f92f
 800f3a0:	0800f92f 	.word	0x0800f92f
 800f3a4:	0800f919 	.word	0x0800f919
 800f3a8:	0800f919 	.word	0x0800f919
 800f3ac:	0800f92f 	.word	0x0800f92f
 800f3b0:	0800f92f 	.word	0x0800f92f
 800f3b4:	0800f86f 	.word	0x0800f86f
 800f3b8:	0800f899 	.word	0x0800f899
 800f3bc:	0800f919 	.word	0x0800f919
 800f3c0:	0800f919 	.word	0x0800f919
 800f3c4:	0800f919 	.word	0x0800f919
 800f3c8:	0800f919 	.word	0x0800f919
 800f3cc:	0800f92f 	.word	0x0800f92f
 800f3d0:	0800f92f 	.word	0x0800f92f
 800f3d4:	0800f92f 	.word	0x0800f92f
 800f3d8:	0800f92f 	.word	0x0800f92f
 800f3dc:	0800f919 	.word	0x0800f919
 800f3e0:	0800f92f 	.word	0x0800f92f
 800f3e4:	0800f92f 	.word	0x0800f92f
 800f3e8:	0800f92f 	.word	0x0800f92f
 800f3ec:	0800f92f 	.word	0x0800f92f
 800f3f0:	0800f92f 	.word	0x0800f92f
 800f3f4:	0800f92f 	.word	0x0800f92f
 800f3f8:	0800f92f 	.word	0x0800f92f
 800f3fc:	0800f92f 	.word	0x0800f92f
 800f400:	0800f92f 	.word	0x0800f92f
 800f404:	0800f92f 	.word	0x0800f92f
 800f408:	0800f92f 	.word	0x0800f92f
 800f40c:	0800f92f 	.word	0x0800f92f
 800f410:	0800f92f 	.word	0x0800f92f
 800f414:	0800f92f 	.word	0x0800f92f
 800f418:	0800f92f 	.word	0x0800f92f
 800f41c:	0800f92f 	.word	0x0800f92f
 800f420:	0800f909 	.word	0x0800f909
 800f424:	0800f919 	.word	0x0800f919
 800f428:	0800f911 	.word	0x0800f911
 800f42c:	0800f92f 	.word	0x0800f92f
 800f430:	0800f92f 	.word	0x0800f92f
 800f434:	0800f919 	.word	0x0800f919
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f040 826c 	bne.w	800f91c <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f44a:	f043 0301 	orr.w	r3, r3, #1
 800f44e:	b29a      	uxth	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d114      	bne.n	800f48a <_ZN3BTD14HCI_event_taskEv+0x186>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800f466:	2b10      	cmp	r3, #16
 800f468:	d10f      	bne.n	800f48a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f480:	b29a      	uxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800f488:	e059      	b.n	800f53e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f490:	2b04      	cmp	r3, #4
 800f492:	d12a      	bne.n	800f4ea <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800f49a:	2b10      	cmp	r3, #16
 800f49c:	d125      	bne.n	800f4ea <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f4a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d114      	bne.n	800f4d6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d10f      	bne.n	800f4d6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f4bc:	f003 0308 	and.w	r3, r3, #8
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d004      	beq.n	800f4ce <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800f4cc:	e003      	b.n	800f4d6 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f4dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f4e0:	b29a      	uxth	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800f4e8:	e029      	b.n	800f53e <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f4f0:	2b09      	cmp	r3, #9
 800f4f2:	f040 8213 	bne.w	800f91c <_ZN3BTD14HCI_event_taskEv+0x618>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800f4fc:	2b10      	cmp	r3, #16
 800f4fe:	f040 820d 	bne.w	800f91c <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]
 800f506:	7dfb      	ldrb	r3, [r7, #23]
 800f508:	2b05      	cmp	r3, #5
 800f50a:	d80e      	bhi.n	800f52a <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800f50c:	7dfb      	ldrb	r3, [r7, #23]
 800f50e:	1d9a      	adds	r2, r3, #6
 800f510:	7dfb      	ldrb	r3, [r7, #23]
 800f512:	6879      	ldr	r1, [r7, #4]
 800f514:	440a      	add	r2, r1
 800f516:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	4413      	add	r3, r2
 800f51e:	460a      	mov	r2, r1
 800f520:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800f522:	7dfb      	ldrb	r3, [r7, #23]
 800f524:	3301      	adds	r3, #1
 800f526:	75fb      	strb	r3, [r7, #23]
 800f528:	e7ed      	b.n	800f506 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f530:	f043 0320 	orr.w	r3, r3, #32
 800f534:	b29a      	uxth	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800f53c:	e1ee      	b.n	800f91c <_ZN3BTD14HCI_event_taskEv+0x618>
 800f53e:	e1ed      	b.n	800f91c <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f546:	2b04      	cmp	r3, #4
 800f548:	d921      	bls.n	800f58e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f550:	2b00      	cmp	r3, #0
 800f552:	d104      	bne.n	800f55e <_ZN3BTD14HCI_event_taskEv+0x25a>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d017      	beq.n	800f58e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2200      	movs	r2, #0
 800f57a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	220a      	movs	r2, #10
 800f58a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f594:	3301      	adds	r3, #1
 800f596:	b2da      	uxtb	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800f59e:	e1c6      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f000 81ba 	beq.w	800f920 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	75bb      	strb	r3, [r7, #22]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f5b6:	7dba      	ldrb	r2, [r7, #22]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	f080 81b1 	bcs.w	800f920 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	7dbb      	ldrb	r3, [r7, #22]
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	0049      	lsls	r1, r1, #1
 800f5ce:	440b      	add	r3, r1
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	4413      	add	r3, r2
 800f5d4:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	757b      	strb	r3, [r7, #21]
 800f5da:	7d7b      	ldrb	r3, [r7, #21]
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d811      	bhi.n	800f604 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800f5e0:	7d7b      	ldrb	r3, [r7, #21]
 800f5e2:	1d1a      	adds	r2, r3, #4
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
 800f5e6:	441a      	add	r2, r3
 800f5e8:	7d7b      	ldrb	r3, [r7, #21]
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	440a      	add	r2, r1
 800f5ee:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	460a      	mov	r2, r1
 800f5f8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800f5fc:	7d7b      	ldrb	r3, [r7, #21]
 800f5fe:	3301      	adds	r3, #1
 800f600:	757b      	strb	r3, [r7, #21]
 800f602:	e7ea      	b.n	800f5da <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d038      	beq.n	800f680 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f614:	2b00      	cmp	r3, #0
 800f616:	d133      	bne.n	800f680 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f61e:	2b05      	cmp	r3, #5
 800f620:	d12e      	bne.n	800f680 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f628:	f003 030c 	and.w	r3, r3, #12
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d027      	beq.n	800f680 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2201      	movs	r2, #1
 800f634:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800f638:	2300      	movs	r3, #0
 800f63a:	753b      	strb	r3, [r7, #20]
 800f63c:	7d3b      	ldrb	r3, [r7, #20]
 800f63e:	2b05      	cmp	r3, #5
 800f640:	d814      	bhi.n	800f66c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800f642:	7d3b      	ldrb	r3, [r7, #20]
 800f644:	1cd9      	adds	r1, r3, #3
 800f646:	7dba      	ldrb	r2, [r7, #22]
 800f648:	4613      	mov	r3, r2
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	4413      	add	r3, r2
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	18ca      	adds	r2, r1, r3
 800f652:	7d3b      	ldrb	r3, [r7, #20]
 800f654:	6879      	ldr	r1, [r7, #4]
 800f656:	440a      	add	r2, r1
 800f658:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f65c:	687a      	ldr	r2, [r7, #4]
 800f65e:	4413      	add	r3, r2
 800f660:	460a      	mov	r2, r1
 800f662:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800f664:	7d3b      	ldrb	r3, [r7, #20]
 800f666:	3301      	adds	r3, #1
 800f668:	753b      	strb	r3, [r7, #20]
 800f66a:	e7e7      	b.n	800f63c <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f676:	b29a      	uxth	r2, r3
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800f67e:	e03a      	b.n	800f6f6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f686:	2b00      	cmp	r3, #0
 800f688:	d031      	beq.n	800f6ee <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f690:	f003 030f 	and.w	r3, r3, #15
 800f694:	2b05      	cmp	r3, #5
 800f696:	d12a      	bne.n	800f6ee <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f69e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d023      	beq.n	800f6ee <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	74fb      	strb	r3, [r7, #19]
 800f6aa:	7cfb      	ldrb	r3, [r7, #19]
 800f6ac:	2b05      	cmp	r3, #5
 800f6ae:	d814      	bhi.n	800f6da <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800f6b0:	7cfb      	ldrb	r3, [r7, #19]
 800f6b2:	1cd9      	adds	r1, r3, #3
 800f6b4:	7dba      	ldrb	r2, [r7, #22]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	005b      	lsls	r3, r3, #1
 800f6be:	18ca      	adds	r2, r1, r3
 800f6c0:	7cfb      	ldrb	r3, [r7, #19]
 800f6c2:	6879      	ldr	r1, [r7, #4]
 800f6c4:	440a      	add	r2, r1
 800f6c6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	460a      	mov	r2, r1
 800f6d0:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800f6d2:	7cfb      	ldrb	r3, [r7, #19]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	74fb      	strb	r3, [r7, #19]
 800f6d8:	e7e7      	b.n	800f6aa <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800f6ec:	e003      	b.n	800f6f6 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800f6ee:	7dbb      	ldrb	r3, [r7, #22]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	75bb      	strb	r3, [r7, #22]
 800f6f4:	e75c      	b.n	800f5b0 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800f6f6:	e113      	b.n	800f920 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f6fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f702:	b29a      	uxth	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f710:	2b00      	cmp	r3, #0
 800f712:	d11a      	bne.n	800f74a <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800f71a:	b21a      	sxth	r2, r3
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800f722:	021b      	lsls	r3, r3, #8
 800f724:	b21b      	sxth	r3, r3
 800f726:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f72a:	b21b      	sxth	r3, r3
 800f72c:	4313      	orrs	r3, r2
 800f72e:	b21b      	sxth	r3, r3
 800f730:	b29a      	uxth	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f73c:	f043 0302 	orr.w	r3, r3, #2
 800f740:	b29a      	uxth	r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800f748:	e0f1      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2206      	movs	r2, #6
 800f74e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800f752:	e0ec      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f040 80e2 	bne.w	800f924 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f766:	f043 0304 	orr.w	r3, r3, #4
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f778:	f023 0302 	bic.w	r3, r3, #2
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800f784:	e0ce      	b.n	800f924 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f040 80cb 	bne.w	800f928 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800f792:	2300      	movs	r3, #0
 800f794:	74bb      	strb	r3, [r7, #18]
 800f796:	7cbb      	ldrb	r3, [r7, #18]
 800f798:	2b1d      	cmp	r3, #29
 800f79a:	d818      	bhi.n	800f7ce <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800f79c:	7cbb      	ldrb	r3, [r7, #18]
 800f79e:	f103 0209 	add.w	r2, r3, #9
 800f7a2:	7cbb      	ldrb	r3, [r7, #18]
 800f7a4:	6879      	ldr	r1, [r7, #4]
 800f7a6:	440a      	add	r2, r1
 800f7a8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	460a      	mov	r2, r1
 800f7b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800f7b6:	7cbb      	ldrb	r3, [r7, #18]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d003      	beq.n	800f7cc <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800f7c4:	7cbb      	ldrb	r3, [r7, #18]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	74bb      	strb	r3, [r7, #18]
 800f7ca:	e7e4      	b.n	800f796 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800f7cc:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f7d4:	f043 0308 	orr.w	r3, r3, #8
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800f7e0:	e0a2      	b.n	800f928 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	747b      	strb	r3, [r7, #17]
 800f7e6:	7c7b      	ldrb	r3, [r7, #17]
 800f7e8:	2b05      	cmp	r3, #5
 800f7ea:	d80e      	bhi.n	800f80a <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800f7ec:	7c7b      	ldrb	r3, [r7, #17]
 800f7ee:	1c9a      	adds	r2, r3, #2
 800f7f0:	7c7b      	ldrb	r3, [r7, #17]
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	440a      	add	r2, r1
 800f7f6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	460a      	mov	r2, r1
 800f800:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800f802:	7c7b      	ldrb	r3, [r7, #17]
 800f804:	3301      	adds	r3, #1
 800f806:	747b      	strb	r3, [r7, #17]
 800f808:	e7ed      	b.n	800f7e6 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800f80a:	2300      	movs	r3, #0
 800f80c:	743b      	strb	r3, [r7, #16]
 800f80e:	7c3b      	ldrb	r3, [r7, #16]
 800f810:	2b02      	cmp	r3, #2
 800f812:	d810      	bhi.n	800f836 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800f814:	7c3b      	ldrb	r3, [r7, #16]
 800f816:	f103 0208 	add.w	r2, r3, #8
 800f81a:	7c3b      	ldrb	r3, [r7, #16]
 800f81c:	6879      	ldr	r1, [r7, #4]
 800f81e:	440a      	add	r2, r1
 800f820:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	4413      	add	r3, r2
 800f828:	460a      	mov	r2, r1
 800f82a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800f82e:	7c3b      	ldrb	r3, [r7, #16]
 800f830:	3301      	adds	r3, #1
 800f832:	743b      	strb	r3, [r7, #16]
 800f834:	e7eb      	b.n	800f80e <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800f83c:	f003 030f 	and.w	r3, r3, #15
 800f840:	2b05      	cmp	r3, #5
 800f842:	d10a      	bne.n	800f85a <_ZN3BTD14HCI_event_taskEv+0x556>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800f84a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d003      	beq.n	800f85a <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2201      	movs	r2, #1
 800f856:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f860:	f043 0310 	orr.w	r3, r3, #16
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800f86c:	e05f      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f874:	2b00      	cmp	r3, #0
 800f876:	d003      	beq.n	800f880 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 feec 	bl	8010656 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800f87e:	e056      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d003      	beq.n	800f890 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fee4 	bl	8010656 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800f88e:	e04e      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 ff93 	bl	80107bc <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800f896:	e04a      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 ffca 	bl	8010832 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800f89e:	e046      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d123      	bne.n	800f8f2 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00c      	beq.n	800f8ce <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8ba:	f083 0301 	eor.w	r3, r3, #1
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d004      	beq.n	800f8ce <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800f8cc:	e02e      	b.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d029      	beq.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x628>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f8de:	f083 0301 	eor.w	r3, r3, #1
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d021      	beq.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800f8f0:	e01c      	b.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8b5b      	ldrh	r3, [r3, #26]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f001 f882 	bl	8010a02 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2210      	movs	r2, #16
 800f902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800f906:	e011      	b.n	800f92c <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 ffcd 	bl	80108a8 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800f90e:	e00e      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f001 f810 	bl	8010936 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800f916:	e00a      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800f918:	bf00      	nop
 800f91a:	e008      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800f91c:	bf00      	nop
 800f91e:	e006      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800f920:	bf00      	nop
 800f922:	e004      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800f924:	bf00      	nop
 800f926:	e002      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800f928:	bf00      	nop
 800f92a:	e000      	b.n	800f92e <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800f92c:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800f92e:	bf00      	nop
 800f930:	3718      	adds	r7, #24
 800f932:	46bd      	mov	sp, r7
 800f934:	bdb0      	pop	{r4, r5, r7, pc}
 800f936:	bf00      	nop

0800f938 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f946:	2b13      	cmp	r3, #19
 800f948:	f200 82ef 	bhi.w	800ff2a <_ZN3BTD8HCI_taskEv+0x5f2>
 800f94c:	a201      	add	r2, pc, #4	; (adr r2, 800f954 <_ZN3BTD8HCI_taskEv+0x1c>)
 800f94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f952:	bf00      	nop
 800f954:	0800f9a5 	.word	0x0800f9a5
 800f958:	0800f9df 	.word	0x0800f9df
 800f95c:	0800fa65 	.word	0x0800fa65
 800f960:	0800fa85 	.word	0x0800fa85
 800f964:	0800faa5 	.word	0x0800faa5
 800f968:	0800faf9 	.word	0x0800faf9
 800f96c:	0800fb9f 	.word	0x0800fb9f
 800f970:	0800fbcd 	.word	0x0800fbcd
 800f974:	0800fc07 	.word	0x0800fc07
 800f978:	0800fc2f 	.word	0x0800fc2f
 800f97c:	0800fc65 	.word	0x0800fc65
 800f980:	0800fcc3 	.word	0x0800fcc3
 800f984:	0800fd01 	.word	0x0800fd01
 800f988:	0800fe27 	.word	0x0800fe27
 800f98c:	0800ff2b 	.word	0x0800ff2b
 800f990:	0800fe6d 	.word	0x0800fe6d
 800f994:	0800fe9b 	.word	0x0800fe9b
 800f998:	0800fb2f 	.word	0x0800fb2f
 800f99c:	0800fb65 	.word	0x0800fb65
 800f9a0:	0800fb85 	.word	0x0800fb85
                case HCI_INIT_STATE:
                        hci_counter++;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	f240 82b4 	bls.w	800ff2e <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 fb7d 	bl	80100c6 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800f9dc:	e2a7      	b.n	800ff2e <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f9f4:	f003 0301 	and.w	r3, r3, #1
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00b      	beq.n	800fa14 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2202      	movs	r2, #2
 800fa08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f001 f830 	bl	8010a72 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800fa12:	e28e      	b.n	800ff32 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800fa20:	429a      	cmp	r2, r3
 800fa22:	f240 8286 	bls.w	800ff32 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	0092      	lsls	r2, r2, #2
 800fa30:	4413      	add	r3, r2
 800fa32:	005b      	lsls	r3, r3, #1
 800fa34:	b29a      	uxth	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800fa42:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800fa46:	d904      	bls.n	800fa52 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800fa4e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800fa62:	e266      	b.n	800ff32 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fa6a:	f003 0301 	and.w	r3, r3, #1
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 8261 	beq.w	800ff36 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2203      	movs	r2, #3
 800fa78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 fb72 	bl	8010166 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800fa82:	e258      	b.n	800ff36 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fa8a:	f003 0320 	and.w	r3, r3, #32
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f000 8253 	beq.w	800ff3a <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fb8a 	bl	80101ae <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2204      	movs	r2, #4
 800fa9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800faa2:	e24a      	b.n	800ff3a <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800faaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faae:	2b00      	cmp	r3, #0
 800fab0:	f000 8245 	beq.w	800ff3e <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00a      	beq.n	800fad2 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	4619      	mov	r1, r3
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fc5d 	bl	8010382 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2205      	movs	r2, #5
 800facc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800fad0:	e235      	b.n	800ff3e <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d008      	beq.n	800faee <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800fadc:	2100      	movs	r1, #0
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 fb89 	bl	80101f6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2211      	movs	r2, #17
 800fae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800faec:	e227      	b.n	800ff3e <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2206      	movs	r2, #6
 800faf2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800faf6:	e222      	b.n	800ff3e <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fafe:	f003 0301 	and.w	r3, r3, #1
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	f000 821d 	beq.w	800ff42 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d008      	beq.n	800fb24 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800fb12:	2100      	movs	r1, #0
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 fb6e 	bl	80101f6 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2211      	movs	r2, #17
 800fb1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800fb22:	e20e      	b.n	800ff42 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2206      	movs	r2, #6
 800fb28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800fb2c:	e209      	b.n	800ff42 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fb34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f000 8204 	beq.w	800ff46 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d008      	beq.n	800fb5a <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800fb48:	2101      	movs	r1, #1
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fc9d 	bl	801048a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2212      	movs	r2, #18
 800fb54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800fb58:	e1f5      	b.n	800ff46 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2206      	movs	r2, #6
 800fb5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800fb62:	e1f0      	b.n	800ff46 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fb6a:	f003 0301 	and.w	r3, r3, #1
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f000 81eb 	beq.w	800ff4a <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 fc4d 	bl	8010414 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2213      	movs	r2, #19
 800fb7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800fb82:	e1e2      	b.n	800ff4a <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fb8a:	f003 0301 	and.w	r3, r3, #1
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	f000 81dd 	beq.w	800ff4e <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2206      	movs	r2, #6
 800fb98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800fb9c:	e1d7      	b.n	800ff4e <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d104      	bne.n	800fbb2 <_ZN3BTD8HCI_taskEv+0x27a>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d007      	beq.n	800fbc2 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fc8f 	bl	80104d6 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2207      	movs	r2, #7
 800fbbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800fbc0:	e1d8      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	220a      	movs	r2, #10
 800fbc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800fbca:	e1d3      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fbd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 81bb 	beq.w	800ff52 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fcb2 	bl	8010546 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d007      	beq.n	800fbfc <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 fb74 	bl	80102da <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	220c      	movs	r2, #12
 800fbf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800fbfa:	e1aa      	b.n	800ff52 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2208      	movs	r2, #8
 800fc00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800fc04:	e1a5      	b.n	800ff52 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fc0c:	f003 0301 	and.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 81a0 	beq.w	800ff56 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fcac 	bl	801057c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2209      	movs	r2, #9
 800fc28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800fc2c:	e193      	b.n	800ff56 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fc34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	f000 818e 	beq.w	800ff5a <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fc44:	f003 0302 	and.w	r3, r3, #2
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d007      	beq.n	800fc5c <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 fead 	bl	80109ac <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	220a      	movs	r2, #10
 800fc56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800fc5a:	e17e      	b.n	800ff5a <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 fc8d 	bl	801057c <_ZN3BTD11hci_connectEv>
                        break;
 800fc62:	e17a      	b.n	800ff5a <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc6a:	f083 0301 	eor.w	r3, r3, #1
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f000 8174 	beq.w	800ff5e <_ZN3BTD8HCI_taskEv+0x626>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc7c:	f083 0301 	eor.w	r3, r3, #1
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 816b 	beq.w	800ff5e <_ZN3BTD8HCI_taskEv+0x626>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fc8e:	f083 0301 	eor.w	r3, r3, #1
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 8162 	beq.w	800ff5e <_ZN3BTD8HCI_taskEv+0x626>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fca0:	f083 0301 	eor.w	r3, r3, #1
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f000 8159 	beq.w	800ff5e <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f000 fa29 	bl	8010104 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	220b      	movs	r2, #11
 800fcbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800fcc0:	e14d      	b.n	800ff5e <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fcc8:	f003 0310 	and.w	r3, r3, #16
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00a      	beq.n	800fce6 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 faff 	bl	80102da <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	220c      	movs	r2, #12
 800fce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800fce4:	e13d      	b.n	800ff62 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fcec:	f003 0304 	and.w	r3, r3, #4
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f000 8136 	beq.w	800ff62 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2210      	movs	r2, #16
 800fcfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800fcfe:	e130      	b.n	800ff62 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fd06:	f003 0308 	and.w	r3, r3, #8
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f000 812b 	beq.w	800ff66 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	3322      	adds	r3, #34	; 0x22
 800fd14:	2208      	movs	r2, #8
 800fd16:	4999      	ldr	r1, [pc, #612]	; (800ff7c <_ZN3BTD8HCI_taskEv+0x644>)
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f005 ffb7 	bl	8015c8c <strncmp>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d147      	bne.n	800fdb4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2201      	movs	r2, #1
 800fd28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2200      	movs	r2, #0
 800fd40:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3322      	adds	r3, #34	; 0x22
 800fd48:	2216      	movs	r2, #22
 800fd4a:	498d      	ldr	r1, [pc, #564]	; (800ff80 <_ZN3BTD8HCI_taskEv+0x648>)
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f005 ff9d 	bl	8015c8c <strncmp>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d104      	bne.n	800fd62 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd60:	e028      	b.n	800fdb4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	3322      	adds	r3, #34	; 0x22
 800fd66:	2216      	movs	r2, #22
 800fd68:	4986      	ldr	r1, [pc, #536]	; (800ff84 <_ZN3BTD8HCI_taskEv+0x64c>)
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f005 ff8e 	bl	8015c8c <strncmp>
 800fd70:	4603      	mov	r3, r0
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d110      	bne.n	800fd98 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd96:	e00d      	b.n	800fdb4 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	3322      	adds	r3, #34	; 0x22
 800fd9c:	2213      	movs	r2, #19
 800fd9e:	497a      	ldr	r1, [pc, #488]	; (800ff88 <_ZN3BTD8HCI_taskEv+0x650>)
 800fda0:	4618      	mov	r0, r3
 800fda2:	f005 ff73 	bl	8015c8c <strncmp>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d103      	bne.n	800fdb4 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d117      	bne.n	800fdee <_ZN3BTD8HCI_taskEv+0x4b6>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800fdc4:	2b25      	cmp	r3, #37	; 0x25
 800fdc6:	d112      	bne.n	800fdee <_ZN3BTD8HCI_taskEv+0x4b6>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800fdce:	2b08      	cmp	r3, #8
 800fdd0:	d10d      	bne.n	800fdee <_ZN3BTD8HCI_taskEv+0x4b6>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	3322      	adds	r3, #34	; 0x22
 800fdd6:	2213      	movs	r2, #19
 800fdd8:	496c      	ldr	r1, [pc, #432]	; (800ff8c <_ZN3BTD8HCI_taskEv+0x654>)
 800fdda:	4618      	mov	r0, r3
 800fddc:	f005 ff56 	bl	8015c8c <strncmp>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d103      	bne.n	800fdee <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2201      	movs	r2, #1
 800fdea:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d104      	bne.n	800fe02 <_ZN3BTD8HCI_taskEv+0x4ca>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d009      	beq.n	800fe16 <_ZN3BTD8HCI_taskEv+0x4de>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d004      	beq.n	800fe16 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2208      	movs	r2, #8
 800fe10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800fe14:	e0a7      	b.n	800ff66 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fa17 	bl	801024a <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	220d      	movs	r2, #13
 800fe20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800fe24:	e09f      	b.n	800ff66 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fe2c:	f003 0302 	and.w	r3, r3, #2
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f000 809a 	beq.w	800ff6a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d003      	beq.n	800fe48 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	220f      	movs	r2, #15
 800fe66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800fe6a:	e07e      	b.n	800ff6a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800fe72:	3301      	adds	r3, #1
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800fe82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe86:	d972      	bls.n	800ff6e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	220a      	movs	r2, #10
 800fe94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800fe98:	e069      	b.n	800ff6e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fea0:	f003 0304 	and.w	r3, r3, #4
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d064      	beq.n	800ff72 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2200      	movs	r2, #0
 800feac:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	3389      	adds	r3, #137	; 0x89
 800feb4:	2240      	movs	r2, #64	; 0x40
 800feb6:	2100      	movs	r1, #0
 800feb8:	4618      	mov	r0, r3
 800feba:	f005 fdad 	bl	8015a18 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	33c9      	adds	r3, #201	; 0xc9
 800fec2:	2240      	movs	r2, #64	; 0x40
 800fec4:	2100      	movs	r1, #0
 800fec6:	4618      	mov	r0, r3
 800fec8:	f005 fda6 	bl	8015a18 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2200      	movs	r2, #0
 800fed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	220a      	movs	r2, #10
 800ff24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ff28:	e023      	b.n	800ff72 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800ff2a:	bf00      	nop
 800ff2c:	e022      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff2e:	bf00      	nop
 800ff30:	e020      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff32:	bf00      	nop
 800ff34:	e01e      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff36:	bf00      	nop
 800ff38:	e01c      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff3a:	bf00      	nop
 800ff3c:	e01a      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff3e:	bf00      	nop
 800ff40:	e018      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff42:	bf00      	nop
 800ff44:	e016      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff46:	bf00      	nop
 800ff48:	e014      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff4a:	bf00      	nop
 800ff4c:	e012      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff4e:	bf00      	nop
 800ff50:	e010      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff52:	bf00      	nop
 800ff54:	e00e      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff56:	bf00      	nop
 800ff58:	e00c      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff5a:	bf00      	nop
 800ff5c:	e00a      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff5e:	bf00      	nop
 800ff60:	e008      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff62:	bf00      	nop
 800ff64:	e006      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff66:	bf00      	nop
 800ff68:	e004      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff6a:	bf00      	nop
 800ff6c:	e002      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff6e:	bf00      	nop
 800ff70:	e000      	b.n	800ff74 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ff72:	bf00      	nop
        }
}
 800ff74:	bf00      	nop
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	080164bc 	.word	0x080164bc
 800ff80:	080164c8 	.word	0x080164c8
 800ff84:	080164e0 	.word	0x080164e0
 800ff88:	080164f8 	.word	0x080164f8
 800ff8c:	0801650c 	.word	0x0801650c

0800ff90 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ff90:	b5b0      	push	{r4, r5, r7, lr}
 800ff92:	b086      	sub	sp, #24
 800ff94:	af02      	add	r7, sp, #8
 800ff96:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ff98:	2340      	movs	r3, #64	; 0x40
 800ff9a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	33c9      	adds	r3, #201	; 0xc9
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ffb6:	f107 050a 	add.w	r5, r7, #10
 800ffba:	9201      	str	r2, [sp, #4]
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	462b      	mov	r3, r5
 800ffc0:	4622      	mov	r2, r4
 800ffc2:	f003 f92c 	bl	801321e <_ZN3USB10inTransferEhhPtPhh>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ffca:	7b7b      	ldrb	r3, [r7, #13]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d125      	bne.n	801001c <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ffd0:	897b      	ldrh	r3, [r7, #10]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d022      	beq.n	801001c <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	73fb      	strb	r3, [r7, #15]
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	2b03      	cmp	r3, #3
 800ffde:	d81d      	bhi.n	801001c <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800ffe0:	7bfb      	ldrb	r3, [r7, #15]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	3318      	adds	r3, #24
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4413      	add	r3, r2
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d011      	beq.n	8010014 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800fff0:	7bfb      	ldrb	r3, [r7, #15]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	3318      	adds	r3, #24
 800fff6:	009b      	lsls	r3, r3, #2
 800fff8:	4413      	add	r3, r2
 800fffa:	6858      	ldr	r0, [r3, #4]
 800fffc:	7bfb      	ldrb	r3, [r7, #15]
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	3318      	adds	r3, #24
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4413      	add	r3, r2
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	32c9      	adds	r2, #201	; 0xc9
 8010010:	4611      	mov	r1, r2
 8010012:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010014:	7bfb      	ldrb	r3, [r7, #15]
 8010016:	3301      	adds	r3, #1
 8010018:	73fb      	strb	r3, [r7, #15]
 801001a:	e7de      	b.n	800ffda <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 801001c:	2300      	movs	r3, #0
 801001e:	73bb      	strb	r3, [r7, #14]
 8010020:	7bbb      	ldrb	r3, [r7, #14]
 8010022:	2b03      	cmp	r3, #3
 8010024:	d81c      	bhi.n	8010060 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 8010026:	7bbb      	ldrb	r3, [r7, #14]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	3318      	adds	r3, #24
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	4413      	add	r3, r2
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d010      	beq.n	8010058 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 8010036:	7bbb      	ldrb	r3, [r7, #14]
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	3318      	adds	r3, #24
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4413      	add	r3, r2
 8010040:	6859      	ldr	r1, [r3, #4]
 8010042:	7bbb      	ldrb	r3, [r7, #14]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	3318      	adds	r3, #24
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4413      	add	r3, r2
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3304      	adds	r3, #4
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4608      	mov	r0, r1
 8010056:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 8010058:	7bbb      	ldrb	r3, [r7, #14]
 801005a:	3301      	adds	r3, #1
 801005c:	73bb      	strb	r3, [r7, #14]
 801005e:	e7df      	b.n	8010020 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 8010060:	bf00      	nop
 8010062:	3710      	adds	r7, #16
 8010064:	46bd      	mov	sp, r7
 8010066:	bdb0      	pop	{r4, r5, r7, pc}

08010068 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 8010068:	b580      	push	{r7, lr}
 801006a:	b08c      	sub	sp, #48	; 0x30
 801006c:	af08      	add	r7, sp, #32
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	4613      	mov	r3, r2
 8010074:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 801007c:	f023 0301 	bic.w	r3, r3, #1
 8010080:	b29a      	uxth	r2, r3
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8010098:	2300      	movs	r3, #0
 801009a:	9307      	str	r3, [sp, #28]
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	9306      	str	r3, [sp, #24]
 80100a0:	88fb      	ldrh	r3, [r7, #6]
 80100a2:	9305      	str	r3, [sp, #20]
 80100a4:	88fb      	ldrh	r3, [r7, #6]
 80100a6:	9304      	str	r3, [sp, #16]
 80100a8:	2300      	movs	r3, #0
 80100aa:	9303      	str	r3, [sp, #12]
 80100ac:	2300      	movs	r3, #0
 80100ae:	9302      	str	r3, [sp, #8]
 80100b0:	2300      	movs	r3, #0
 80100b2:	9301      	str	r3, [sp, #4]
 80100b4:	2300      	movs	r3, #0
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	2320      	movs	r3, #32
 80100ba:	f002 ffd8 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 80100be:	bf00      	nop
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b082      	sub	sp, #8
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2203      	movs	r2, #3
 80100da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	220c      	movs	r2, #12
 80100e2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	3389      	adds	r3, #137	; 0x89
 80100f2:	2203      	movs	r2, #3
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7ff ffb6 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80100fc:	bf00      	nop
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010112:	f023 0310 	bic.w	r3, r3, #16
 8010116:	b29a      	uxth	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	221a      	movs	r2, #26
 8010122:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	220c      	movs	r2, #12
 801012a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2201      	movs	r2, #1
 8010132:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d004      	beq.n	8010148 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2203      	movs	r2, #3
 8010142:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8010146:	e003      	b.n	8010150 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2202      	movs	r2, #2
 801014c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	3389      	adds	r3, #137	; 0x89
 8010154:	2204      	movs	r2, #4
 8010156:	4619      	mov	r1, r3
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7ff ff85 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801015e:	bf00      	nop
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010174:	f023 0320 	bic.w	r3, r3, #32
 8010178:	b29a      	uxth	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2209      	movs	r2, #9
 8010184:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2210      	movs	r2, #16
 801018c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	3389      	adds	r3, #137	; 0x89
 801019c:	2203      	movs	r2, #3
 801019e:	4619      	mov	r1, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7ff ff61 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80101a6:	bf00      	nop
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80101bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2201      	movs	r2, #1
 80101cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2210      	movs	r2, #16
 80101d4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	3389      	adds	r3, #137	; 0x89
 80101e4:	2203      	movs	r2, #3
 80101e6:	4619      	mov	r1, r3
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7ff ff3d 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80101ee:	bf00      	nop
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b082      	sub	sp, #8
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
 80101fe:	460b      	mov	r3, r1
 8010200:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801020c:	b29a      	uxth	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2204      	movs	r2, #4
 8010218:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	2210      	movs	r2, #16
 8010220:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2201      	movs	r2, #1
 8010228:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	78fa      	ldrb	r2, [r7, #3]
 8010230:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3389      	adds	r3, #137	; 0x89
 8010238:	2204      	movs	r2, #4
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7ff ff13 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 8010242:	bf00      	nop
 8010244:	3708      	adds	r7, #8
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 801024a:	b580      	push	{r7, lr}
 801024c:	b082      	sub	sp, #8
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010258:	f023 0302 	bic.w	r3, r3, #2
 801025c:	b29a      	uxth	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2209      	movs	r2, #9
 8010268:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2204      	movs	r2, #4
 8010270:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2207      	movs	r2, #7
 8010278:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	7f1a      	ldrb	r2, [r3, #28]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	7f5a      	ldrb	r2, [r3, #29]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7f9a      	ldrb	r2, [r3, #30]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7fda      	ldrb	r2, [r3, #31]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3389      	adds	r3, #137	; 0x89
 80102c8:	220a      	movs	r2, #10
 80102ca:	4619      	mov	r1, r3
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff fecb 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80102d2:	bf00      	nop
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 80102da:	b580      	push	{r7, lr}
 80102dc:	b082      	sub	sp, #8
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80102e8:	f023 0308 	bic.w	r3, r3, #8
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2219      	movs	r2, #25
 80102f8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2204      	movs	r2, #4
 8010300:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	220a      	movs	r2, #10
 8010308:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7f1a      	ldrb	r2, [r3, #28]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	7f5a      	ldrb	r2, [r3, #29]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	7f9a      	ldrb	r2, [r3, #30]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	7fda      	ldrb	r2, [r3, #31]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f893 2020 	ldrb.w	r2, [r3, #32]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2201      	movs	r2, #1
 8010350:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3389      	adds	r3, #137	; 0x89
 8010370:	220d      	movs	r2, #13
 8010372:	4619      	mov	r1, r3
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7ff fe77 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}

08010382 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 8010382:	b590      	push	{r4, r7, lr}
 8010384:	b085      	sub	sp, #20
 8010386:	af00      	add	r7, sp, #0
 8010388:	6078      	str	r0, [r7, #4]
 801038a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2213      	movs	r2, #19
 8010390:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	220c      	movs	r2, #12
 8010398:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 801039c:	6838      	ldr	r0, [r7, #0]
 801039e:	f7ef ff37 	bl	8000210 <strlen>
 80103a2:	4603      	mov	r3, r0
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	3301      	adds	r3, #1
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 80103b0:	2300      	movs	r3, #0
 80103b2:	73fb      	strb	r3, [r7, #15]
 80103b4:	7bfc      	ldrb	r4, [r7, #15]
 80103b6:	6838      	ldr	r0, [r7, #0]
 80103b8:	f7ef ff2a 	bl	8000210 <strlen>
 80103bc:	4603      	mov	r3, r0
 80103be:	429c      	cmp	r4, r3
 80103c0:	d20e      	bcs.n	80103e0 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	441a      	add	r2, r3
 80103c8:	7bfb      	ldrb	r3, [r7, #15]
 80103ca:	3303      	adds	r3, #3
 80103cc:	7811      	ldrb	r1, [r2, #0]
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	4413      	add	r3, r2
 80103d2:	460a      	mov	r2, r1
 80103d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 80103d8:	7bfb      	ldrb	r3, [r7, #15]
 80103da:	3301      	adds	r3, #1
 80103dc:	73fb      	strb	r3, [r7, #15]
 80103de:	e7e9      	b.n	80103b4 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
 80103e2:	3303      	adds	r3, #3
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	4413      	add	r3, r2
 80103e8:	2200      	movs	r2, #0
 80103ea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f103 0489 	add.w	r4, r3, #137	; 0x89
 80103f4:	6838      	ldr	r0, [r7, #0]
 80103f6:	f7ef ff0b 	bl	8000210 <strlen>
 80103fa:	4603      	mov	r3, r0
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	3304      	adds	r3, #4
 8010400:	b29b      	uxth	r3, r3
 8010402:	461a      	mov	r2, r3
 8010404:	4621      	mov	r1, r4
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f7ff fe2e 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801040c:	bf00      	nop
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	bd90      	pop	{r4, r7, pc}

08010414 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2201      	movs	r2, #1
 8010420:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	220c      	movs	r2, #12
 8010428:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2208      	movs	r2, #8
 8010430:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	22ff      	movs	r2, #255	; 0xff
 8010438:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	22ff      	movs	r2, #255	; 0xff
 8010440:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	22ff      	movs	r2, #255	; 0xff
 8010448:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	22ff      	movs	r2, #255	; 0xff
 8010450:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	22ff      	movs	r2, #255	; 0xff
 8010458:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	221f      	movs	r2, #31
 8010460:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	22ff      	movs	r2, #255	; 0xff
 8010468:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	3389      	adds	r3, #137	; 0x89
 8010478:	220b      	movs	r2, #11
 801047a:	4619      	mov	r1, r3
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff fdf3 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 8010482:	bf00      	nop
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 801048a:	b580      	push	{r7, lr}
 801048c:	b082      	sub	sp, #8
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	460b      	mov	r3, r1
 8010494:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2256      	movs	r2, #86	; 0x56
 801049a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	220c      	movs	r2, #12
 80104a2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 80104ae:	78fb      	ldrb	r3, [r7, #3]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 80104b4:	2201      	movs	r2, #1
 80104b6:	e000      	b.n	80104ba <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 80104b8:	2200      	movs	r2, #0
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	3389      	adds	r3, #137	; 0x89
 80104c4:	2204      	movs	r2, #4
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f7ff fdcd 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80104ce:	bf00      	nop
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b082      	sub	sp, #8
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80104e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2204      	movs	r2, #4
 80104fc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2205      	movs	r2, #5
 8010504:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2233      	movs	r2, #51	; 0x33
 801050c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	228b      	movs	r2, #139	; 0x8b
 8010514:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	229e      	movs	r2, #158	; 0x9e
 801051c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2230      	movs	r2, #48	; 0x30
 8010524:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	220a      	movs	r2, #10
 801052c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	3389      	adds	r3, #137	; 0x89
 8010534:	2208      	movs	r2, #8
 8010536:	4619      	mov	r1, r3
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7ff fd95 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801053e:	bf00      	nop
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 8010546:	b580      	push	{r7, lr}
 8010548:	b082      	sub	sp, #8
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2202      	movs	r2, #2
 8010552:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2204      	movs	r2, #4
 801055a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	3389      	adds	r3, #137	; 0x89
 801056a:	2203      	movs	r2, #3
 801056c:	4619      	mov	r1, r3
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f7ff fd7a 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 8010574:	bf00      	nop
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	331c      	adds	r3, #28
 8010588:	4619      	mov	r1, r3
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f804 	bl	8010598 <_ZN3BTD11hci_connectEPh>
}
 8010590:	bf00      	nop
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80105a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2205      	movs	r2, #5
 80105b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2204      	movs	r2, #4
 80105c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	220d      	movs	r2, #13
 80105c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	781a      	ldrb	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	785a      	ldrb	r2, [r3, #1]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	789a      	ldrb	r2, [r3, #2]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	78da      	ldrb	r2, [r3, #3]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	791a      	ldrb	r2, [r3, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	795a      	ldrb	r2, [r3, #5]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2218      	movs	r2, #24
 801060c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	22cc      	movs	r2, #204	; 0xcc
 8010614:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2201      	movs	r2, #1
 801061c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2200      	movs	r2, #0
 801063c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	3389      	adds	r3, #137	; 0x89
 8010644:	2210      	movs	r2, #16
 8010646:	4619      	mov	r1, r3
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff fd0d 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801064e:	bf00      	nop
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 8010656:	b590      	push	{r4, r7, lr}
 8010658:	b085      	sub	sp, #20
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	220d      	movs	r2, #13
 8010662:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2204      	movs	r2, #4
 801066a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2217      	movs	r2, #23
 8010672:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	7f1a      	ldrb	r2, [r3, #28]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7f5a      	ldrb	r2, [r3, #29]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	7f9a      	ldrb	r2, [r3, #30]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	7fda      	ldrb	r2, [r3, #31]
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d03f      	beq.n	8010740 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2206      	movs	r2, #6
 80106c4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d013      	beq.n	80106fa <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 80106d2:	2300      	movs	r3, #0
 80106d4:	73fb      	strb	r3, [r7, #15]
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	2b05      	cmp	r3, #5
 80106da:	d822      	bhi.n	8010722 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 80106dc:	7bfa      	ldrb	r2, [r7, #15]
 80106de:	7bfb      	ldrb	r3, [r7, #15]
 80106e0:	330a      	adds	r3, #10
 80106e2:	6879      	ldr	r1, [r7, #4]
 80106e4:	440a      	add	r2, r1
 80106e6:	7d11      	ldrb	r1, [r2, #20]
 80106e8:	687a      	ldr	r2, [r7, #4]
 80106ea:	4413      	add	r3, r2
 80106ec:	460a      	mov	r2, r1
 80106ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	3301      	adds	r3, #1
 80106f6:	73fb      	strb	r3, [r7, #15]
 80106f8:	e7ed      	b.n	80106d6 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 80106fa:	2300      	movs	r3, #0
 80106fc:	73bb      	strb	r3, [r7, #14]
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
 8010700:	2b05      	cmp	r3, #5
 8010702:	d80e      	bhi.n	8010722 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 8010704:	7bba      	ldrb	r2, [r7, #14]
 8010706:	7bbb      	ldrb	r3, [r7, #14]
 8010708:	330a      	adds	r3, #10
 801070a:	6879      	ldr	r1, [r7, #4]
 801070c:	440a      	add	r2, r1
 801070e:	7f11      	ldrb	r1, [r2, #28]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	4413      	add	r3, r2
 8010714:	460a      	mov	r2, r1
 8010716:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 801071a:	7bbb      	ldrb	r3, [r7, #14]
 801071c:	3301      	adds	r3, #1
 801071e:	73bb      	strb	r3, [r7, #14]
 8010720:	e7ed      	b.n	80106fe <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 8010722:	2310      	movs	r3, #16
 8010724:	737b      	strb	r3, [r7, #13]
 8010726:	7b7b      	ldrb	r3, [r7, #13]
 8010728:	2b19      	cmp	r3, #25
 801072a:	d83c      	bhi.n	80107a6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 801072c:	7b7b      	ldrb	r3, [r7, #13]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	4413      	add	r3, r2
 8010732:	2200      	movs	r2, #0
 8010734:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 8010738:	7b7b      	ldrb	r3, [r7, #13]
 801073a:	3301      	adds	r3, #1
 801073c:	737b      	strb	r3, [r7, #13]
 801073e:	e7f2      	b.n	8010726 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	691b      	ldr	r3, [r3, #16]
 8010744:	4618      	mov	r0, r3
 8010746:	f7ef fd63 	bl	8000210 <strlen>
 801074a:	4603      	mov	r3, r0
 801074c:	b2da      	uxtb	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 8010754:	2300      	movs	r3, #0
 8010756:	733b      	strb	r3, [r7, #12]
 8010758:	7b3c      	ldrb	r4, [r7, #12]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	691b      	ldr	r3, [r3, #16]
 801075e:	4618      	mov	r0, r3
 8010760:	f7ef fd56 	bl	8000210 <strlen>
 8010764:	4603      	mov	r3, r0
 8010766:	429c      	cmp	r4, r3
 8010768:	d20f      	bcs.n	801078a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	691a      	ldr	r2, [r3, #16]
 801076e:	7b3b      	ldrb	r3, [r7, #12]
 8010770:	441a      	add	r2, r3
 8010772:	7b3b      	ldrb	r3, [r7, #12]
 8010774:	330a      	adds	r3, #10
 8010776:	7811      	ldrb	r1, [r2, #0]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	4413      	add	r3, r2
 801077c:	460a      	mov	r2, r1
 801077e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 8010782:	7b3b      	ldrb	r3, [r7, #12]
 8010784:	3301      	adds	r3, #1
 8010786:	733b      	strb	r3, [r7, #12]
 8010788:	e7e6      	b.n	8010758 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 801078a:	7b3b      	ldrb	r3, [r7, #12]
 801078c:	2b0f      	cmp	r3, #15
 801078e:	d80a      	bhi.n	80107a6 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 8010790:	7b3b      	ldrb	r3, [r7, #12]
 8010792:	330a      	adds	r3, #10
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	4413      	add	r3, r2
 8010798:	2200      	movs	r2, #0
 801079a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 801079e:	7b3b      	ldrb	r3, [r7, #12]
 80107a0:	3301      	adds	r3, #1
 80107a2:	733b      	strb	r3, [r7, #12]
 80107a4:	e7f1      	b.n	801078a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	3389      	adds	r3, #137	; 0x89
 80107aa:	221a      	movs	r2, #26
 80107ac:	4619      	mov	r1, r3
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7ff fc5a 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80107b4:	bf00      	nop
 80107b6:	3714      	adds	r7, #20
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd90      	pop	{r4, r7, pc}

080107bc <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	220e      	movs	r2, #14
 80107c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2204      	movs	r2, #4
 80107d0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2206      	movs	r2, #6
 80107d8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7f1a      	ldrb	r2, [r3, #28]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	7f5a      	ldrb	r2, [r3, #29]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7f9a      	ldrb	r2, [r3, #30]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	7fda      	ldrb	r2, [r3, #31]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f893 2020 	ldrb.w	r2, [r3, #32]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	3389      	adds	r3, #137	; 0x89
 8010820:	2209      	movs	r2, #9
 8010822:	4619      	mov	r1, r3
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7ff fc1f 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801082a:	bf00      	nop
 801082c:	3708      	adds	r7, #8
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}

08010832 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 8010832:	b580      	push	{r7, lr}
 8010834:	b082      	sub	sp, #8
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	220c      	movs	r2, #12
 801083e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2204      	movs	r2, #4
 8010846:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2206      	movs	r2, #6
 801084e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7f1a      	ldrb	r2, [r3, #28]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	7f5a      	ldrb	r2, [r3, #29]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	7f9a      	ldrb	r2, [r3, #30]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	7fda      	ldrb	r2, [r3, #31]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3389      	adds	r3, #137	; 0x89
 8010896:	2209      	movs	r2, #9
 8010898:	4619      	mov	r1, r3
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f7ff fbe4 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80108a0:	bf00      	nop
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	222b      	movs	r2, #43	; 0x2b
 80108b4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2204      	movs	r2, #4
 80108bc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2209      	movs	r2, #9
 80108c4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	7f1a      	ldrb	r2, [r3, #28]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	7f5a      	ldrb	r2, [r3, #29]
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	7f9a      	ldrb	r2, [r3, #30]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	7fda      	ldrb	r2, [r3, #31]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2203      	movs	r2, #3
 801090c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2200      	movs	r2, #0
 8010914:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	3389      	adds	r3, #137	; 0x89
 8010924:	220c      	movs	r2, #12
 8010926:	4619      	mov	r1, r3
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f7ff fb9d 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 801092e:	bf00      	nop
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 8010936:	b580      	push	{r7, lr}
 8010938:	b082      	sub	sp, #8
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	222c      	movs	r2, #44	; 0x2c
 8010942:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2204      	movs	r2, #4
 801094a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2206      	movs	r2, #6
 8010952:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7f1a      	ldrb	r2, [r3, #28]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	7f5a      	ldrb	r2, [r3, #29]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	7f9a      	ldrb	r2, [r3, #30]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	7fda      	ldrb	r2, [r3, #31]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f893 2020 	ldrb.w	r2, [r3, #32]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	3389      	adds	r3, #137	; 0x89
 801099a:	2209      	movs	r2, #9
 801099c:	4619      	mov	r1, r3
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7ff fb62 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80109a4:	bf00      	nop
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2211      	movs	r2, #17
 80109b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2204      	movs	r2, #4
 80109c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2202      	movs	r2, #2
 80109c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	8b5b      	ldrh	r3, [r3, #26]
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	8b5b      	ldrh	r3, [r3, #26]
 80109dc:	121b      	asrs	r3, r3, #8
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	f003 030f 	and.w	r3, r3, #15
 80109e4:	b2da      	uxtb	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	3389      	adds	r3, #137	; 0x89
 80109f0:	2205      	movs	r2, #5
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f7ff fb37 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 80109fa:	bf00      	nop
 80109fc:	3708      	adds	r7, #8
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}

08010a02 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 8010a02:	b580      	push	{r7, lr}
 8010a04:	b082      	sub	sp, #8
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	6078      	str	r0, [r7, #4]
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8010a14:	f023 0304 	bic.w	r3, r3, #4
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2206      	movs	r2, #6
 8010a24:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2204      	movs	r2, #4
 8010a2c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2203      	movs	r2, #3
 8010a34:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 8010a38:	887b      	ldrh	r3, [r7, #2]
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 8010a42:	887b      	ldrh	r3, [r7, #2]
 8010a44:	121b      	asrs	r3, r3, #8
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	f003 030f 	and.w	r3, r3, #15
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2213      	movs	r2, #19
 8010a58:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	3389      	adds	r3, #137	; 0x89
 8010a60:	2206      	movs	r2, #6
 8010a62:	4619      	mov	r1, r3
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f7ff faff 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 8010a6a:	bf00      	nop
 8010a6c:	3708      	adds	r7, #8
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b082      	sub	sp, #8
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2224      	movs	r2, #36	; 0x24
 8010a7e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	220c      	movs	r2, #12
 8010a86:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2203      	movs	r2, #3
 8010a8e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2204      	movs	r2, #4
 8010a96:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2208      	movs	r2, #8
 8010a9e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	3389      	adds	r3, #137	; 0x89
 8010aae:	2206      	movs	r2, #6
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff fad8 	bl	8010068 <_ZN3BTD11HCI_CommandEPht>
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 8010ac0:	b5b0      	push	{r4, r5, r7, lr}
 8010ac2:	b08a      	sub	sp, #40	; 0x28
 8010ac4:	af02      	add	r7, sp, #8
 8010ac6:	60f8      	str	r0, [r7, #12]
 8010ac8:	607a      	str	r2, [r7, #4]
 8010aca:	461a      	mov	r2, r3
 8010acc:	460b      	mov	r3, r1
 8010ace:	817b      	strh	r3, [r7, #10]
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 8010ad4:	466b      	mov	r3, sp
 8010ad6:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 8010ad8:	7a7b      	ldrb	r3, [r7, #9]
 8010ada:	1ddc      	adds	r4, r3, #7
 8010adc:	61bc      	str	r4, [r7, #24]
 8010ade:	4623      	mov	r3, r4
 8010ae0:	3301      	adds	r3, #1
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f04f 0100 	mov.w	r1, #0
 8010ae8:	f04f 0200 	mov.w	r2, #0
 8010aec:	f04f 0300 	mov.w	r3, #0
 8010af0:	00cb      	lsls	r3, r1, #3
 8010af2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010af6:	00c2      	lsls	r2, r0, #3
 8010af8:	4623      	mov	r3, r4
 8010afa:	3301      	adds	r3, #1
 8010afc:	4618      	mov	r0, r3
 8010afe:	f04f 0100 	mov.w	r1, #0
 8010b02:	f04f 0200 	mov.w	r2, #0
 8010b06:	f04f 0300 	mov.w	r3, #0
 8010b0a:	00cb      	lsls	r3, r1, #3
 8010b0c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8010b10:	00c2      	lsls	r2, r0, #3
 8010b12:	4623      	mov	r3, r4
 8010b14:	3301      	adds	r3, #1
 8010b16:	3307      	adds	r3, #7
 8010b18:	08db      	lsrs	r3, r3, #3
 8010b1a:	00db      	lsls	r3, r3, #3
 8010b1c:	ebad 0d03 	sub.w	sp, sp, r3
 8010b20:	ab02      	add	r3, sp, #8
 8010b22:	3300      	adds	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 8010b26:	897b      	ldrh	r3, [r7, #10]
 8010b28:	b2da      	uxtb	r2, r3
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 8010b2e:	897b      	ldrh	r3, [r7, #10]
 8010b30:	121b      	asrs	r3, r3, #8
 8010b32:	b25b      	sxtb	r3, r3
 8010b34:	f003 030f 	and.w	r3, r3, #15
 8010b38:	b25b      	sxtb	r3, r3
 8010b3a:	f043 0320 	orr.w	r3, r3, #32
 8010b3e:	b25b      	sxtb	r3, r3
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 8010b46:	7a7b      	ldrb	r3, [r7, #9]
 8010b48:	3304      	adds	r3, #4
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 8010b50:	7a7b      	ldrb	r3, [r7, #9]
 8010b52:	3304      	adds	r3, #4
 8010b54:	121b      	asrs	r3, r3, #8
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	7a7a      	ldrb	r2, [r7, #9]
 8010b60:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 8010b62:	7a7b      	ldrb	r3, [r7, #9]
 8010b64:	121b      	asrs	r3, r3, #8
 8010b66:	b2da      	uxtb	r2, r3
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010b72:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010b7a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	83fb      	strh	r3, [r7, #30]
 8010b80:	7a7b      	ldrb	r3, [r7, #9]
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	8bfa      	ldrh	r2, [r7, #30]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d20b      	bcs.n	8010ba2 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 8010b8a:	8bfb      	ldrh	r3, [r7, #30]
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	441a      	add	r2, r3
 8010b90:	8bfb      	ldrh	r3, [r7, #30]
 8010b92:	3308      	adds	r3, #8
 8010b94:	7811      	ldrb	r1, [r2, #0]
 8010b96:	697a      	ldr	r2, [r7, #20]
 8010b98:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 8010b9a:	8bfb      	ldrh	r3, [r7, #30]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	83fb      	strh	r3, [r7, #30]
 8010ba0:	e7ee      	b.n	8010b80 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 8010bb2:	7a7b      	ldrb	r3, [r7, #9]
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	3308      	adds	r3, #8
 8010bb8:	b29c      	uxth	r4, r3
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	9300      	str	r3, [sp, #0]
 8010bbe:	4623      	mov	r3, r4
 8010bc0:	f002 fc34 	bl	801342c <_ZN3USB11outTransferEhhtPh>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 8010bc8:	7cfb      	ldrb	r3, [r7, #19]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d002      	beq.n	8010bd4 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 8010bce:	2064      	movs	r0, #100	; 0x64
 8010bd0:	f7f2 feb0 	bl	8003934 <HAL_Delay>
 8010bd4:	46ad      	mov	sp, r5
}
 8010bd6:	bf00      	nop
 8010bd8:	3720      	adds	r7, #32
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bdb0      	pop	{r4, r5, r7, pc}

08010bde <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b086      	sub	sp, #24
 8010be2:	af02      	add	r7, sp, #8
 8010be4:	60f8      	str	r0, [r7, #12]
 8010be6:	607b      	str	r3, [r7, #4]
 8010be8:	460b      	mov	r3, r1
 8010bea:	817b      	strh	r3, [r7, #10]
 8010bec:	4613      	mov	r3, r2
 8010bee:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2202      	movs	r2, #2
 8010bf4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	7a7a      	ldrb	r2, [r7, #9]
 8010bfc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2204      	movs	r2, #4
 8010c04:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 8010c10:	8b3b      	ldrh	r3, [r7, #24]
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 8010c1a:	8b3b      	ldrh	r3, [r7, #24]
 8010c1c:	121b      	asrs	r3, r3, #8
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	781a      	ldrb	r2, [r3, #0]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	785a      	ldrb	r2, [r3, #1]
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010c40:	8979      	ldrh	r1, [r7, #10]
 8010c42:	2300      	movs	r3, #0
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	2301      	movs	r3, #1
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	2308      	movs	r3, #8
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	f7ff ff37 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010c52:	bf00      	nop
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}

08010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 8010c5a:	b580      	push	{r7, lr}
 8010c5c:	b086      	sub	sp, #24
 8010c5e:	af02      	add	r7, sp, #8
 8010c60:	60f8      	str	r0, [r7, #12]
 8010c62:	607b      	str	r3, [r7, #4]
 8010c64:	460b      	mov	r3, r1
 8010c66:	817b      	strh	r3, [r7, #10]
 8010c68:	4613      	mov	r3, r2
 8010c6a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2203      	movs	r2, #3
 8010c70:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	7a7a      	ldrb	r2, [r7, #9]
 8010c78:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2208      	movs	r2, #8
 8010c80:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	781a      	ldrb	r2, [r3, #0]
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	785a      	ldrb	r2, [r3, #1]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	781a      	ldrb	r2, [r3, #0]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	785a      	ldrb	r2, [r3, #1]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	7f3a      	ldrb	r2, [r7, #28]
 8010cb8:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010cda:	8979      	ldrh	r1, [r7, #10]
 8010cdc:	2300      	movs	r3, #0
 8010cde:	9301      	str	r3, [sp, #4]
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	230c      	movs	r3, #12
 8010ce6:	68f8      	ldr	r0, [r7, #12]
 8010ce8:	f7ff feea 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af02      	add	r7, sp, #8
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	607b      	str	r3, [r7, #4]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	817b      	strh	r3, [r7, #10]
 8010d02:	4613      	mov	r3, r2
 8010d04:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2204      	movs	r2, #4
 8010d0a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	7a7a      	ldrb	r2, [r7, #9]
 8010d12:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2208      	movs	r2, #8
 8010d1a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2200      	movs	r2, #0
 8010d22:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	781a      	ldrb	r2, [r3, #0]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	785a      	ldrb	r2, [r3, #1]
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2200      	movs	r2, #0
 8010d46:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2202      	movs	r2, #2
 8010d56:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	22ff      	movs	r2, #255	; 0xff
 8010d5e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	22ff      	movs	r2, #255	; 0xff
 8010d66:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010d70:	8979      	ldrh	r1, [r7, #10]
 8010d72:	2300      	movs	r3, #0
 8010d74:	9301      	str	r3, [sp, #4]
 8010d76:	2301      	movs	r3, #1
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	230c      	movs	r3, #12
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ff fe9f 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010d82:	bf00      	nop
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b086      	sub	sp, #24
 8010d8e:	af02      	add	r7, sp, #8
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	607b      	str	r3, [r7, #4]
 8010d94:	460b      	mov	r3, r1
 8010d96:	817b      	strh	r3, [r7, #10]
 8010d98:	4613      	mov	r3, r2
 8010d9a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2205      	movs	r2, #5
 8010da0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	7a7a      	ldrb	r2, [r7, #9]
 8010da8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	220a      	movs	r2, #10
 8010db0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	781a      	ldrb	r2, [r3, #0]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	785a      	ldrb	r2, [r3, #1]
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2200      	movs	r2, #0
 8010de4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	2202      	movs	r2, #2
 8010dfc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	22a0      	movs	r2, #160	; 0xa0
 8010e04:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2202      	movs	r2, #2
 8010e0c:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010e16:	8979      	ldrh	r1, [r7, #10]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	9301      	str	r3, [sp, #4]
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	230e      	movs	r3, #14
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	f7ff fe4c 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010e28:	bf00      	nop
 8010e2a:	3710      	adds	r7, #16
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd80      	pop	{r7, pc}

08010e30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af02      	add	r7, sp, #8
 8010e36:	60f8      	str	r0, [r7, #12]
 8010e38:	607b      	str	r3, [r7, #4]
 8010e3a:	460b      	mov	r3, r1
 8010e3c:	817b      	strh	r3, [r7, #10]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2206      	movs	r2, #6
 8010e46:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	7a7a      	ldrb	r2, [r7, #9]
 8010e4e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2204      	movs	r2, #4
 8010e56:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	781a      	ldrb	r2, [r3, #0]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	785a      	ldrb	r2, [r3, #1]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	781a      	ldrb	r2, [r3, #0]
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	785a      	ldrb	r2, [r3, #1]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010e90:	8979      	ldrh	r1, [r7, #10]
 8010e92:	2300      	movs	r3, #0
 8010e94:	9301      	str	r3, [sp, #4]
 8010e96:	2301      	movs	r3, #1
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	2308      	movs	r3, #8
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f7ff fe0f 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010ea2:	bf00      	nop
 8010ea4:	3710      	adds	r7, #16
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b086      	sub	sp, #24
 8010eae:	af02      	add	r7, sp, #8
 8010eb0:	60f8      	str	r0, [r7, #12]
 8010eb2:	607b      	str	r3, [r7, #4]
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	817b      	strh	r3, [r7, #10]
 8010eb8:	4613      	mov	r3, r2
 8010eba:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2207      	movs	r2, #7
 8010ec0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	7a7a      	ldrb	r2, [r7, #9]
 8010ec8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2204      	movs	r2, #4
 8010ed0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	781a      	ldrb	r2, [r3, #0]
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	785a      	ldrb	r2, [r3, #1]
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	781a      	ldrb	r2, [r3, #0]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	785a      	ldrb	r2, [r3, #1]
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010f0a:	8979      	ldrh	r1, [r7, #10]
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	9301      	str	r3, [sp, #4]
 8010f10:	2301      	movs	r3, #1
 8010f12:	9300      	str	r3, [sp, #0]
 8010f14:	2308      	movs	r3, #8
 8010f16:	68f8      	ldr	r0, [r7, #12]
 8010f18:	f7ff fdd2 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010f1c:	bf00      	nop
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af02      	add	r7, sp, #8
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	4608      	mov	r0, r1
 8010f2e:	4611      	mov	r1, r2
 8010f30:	461a      	mov	r2, r3
 8010f32:	4603      	mov	r3, r0
 8010f34:	807b      	strh	r3, [r7, #2]
 8010f36:	460b      	mov	r3, r1
 8010f38:	707b      	strb	r3, [r7, #1]
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	220b      	movs	r2, #11
 8010f42:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	787a      	ldrb	r2, [r7, #1]
 8010f4a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2208      	movs	r2, #8
 8010f52:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	783a      	ldrb	r2, [r7, #0]
 8010f62:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	7c3a      	ldrb	r2, [r7, #16]
 8010f6a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010fa4:	8879      	ldrh	r1, [r7, #2]
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	9301      	str	r3, [sp, #4]
 8010faa:	2301      	movs	r3, #1
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	230c      	movs	r3, #12
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f7ff fd85 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010fb6:	bf00      	nop
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}

08010fbe <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 8010fbe:	b580      	push	{r7, lr}
 8010fc0:	b08e      	sub	sp, #56	; 0x38
 8010fc2:	af08      	add	r7, sp, #32
 8010fc4:	6078      	str	r0, [r7, #4]
 8010fc6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 8010fcc:	2300      	movs	r3, #0
 8010fce:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	75fb      	strb	r3, [r7, #23]
 8010fd4:	7dfb      	ldrb	r3, [r7, #23]
 8010fd6:	2b05      	cmp	r3, #5
 8010fd8:	d811      	bhi.n	8010ffe <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 8010fda:	7dfb      	ldrb	r3, [r7, #23]
 8010fdc:	f1c3 0305 	rsb	r3, r3, #5
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	441a      	add	r2, r3
 8010fe6:	7dfb      	ldrb	r3, [r7, #23]
 8010fe8:	3302      	adds	r3, #2
 8010fea:	7812      	ldrb	r2, [r2, #0]
 8010fec:	f107 0118 	add.w	r1, r7, #24
 8010ff0:	440b      	add	r3, r1
 8010ff2:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 8010ff6:	7dfb      	ldrb	r3, [r7, #23]
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	75fb      	strb	r3, [r7, #23]
 8010ffc:	e7ea      	b.n	8010fd4 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 801100e:	2300      	movs	r3, #0
 8011010:	9307      	str	r3, [sp, #28]
 8011012:	f107 030c 	add.w	r3, r7, #12
 8011016:	9306      	str	r3, [sp, #24]
 8011018:	2308      	movs	r3, #8
 801101a:	9305      	str	r3, [sp, #20]
 801101c:	2308      	movs	r3, #8
 801101e:	9304      	str	r3, [sp, #16]
 8011020:	2300      	movs	r3, #0
 8011022:	9303      	str	r3, [sp, #12]
 8011024:	2303      	movs	r3, #3
 8011026:	9302      	str	r3, [sp, #8]
 8011028:	23f5      	movs	r3, #245	; 0xf5
 801102a:	9301      	str	r3, [sp, #4]
 801102c:	2309      	movs	r3, #9
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	2321      	movs	r3, #33	; 0x21
 8011032:	f002 f81c 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 8011036:	bf00      	nop
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 801103e:	b580      	push	{r7, lr}
 8011040:	b08e      	sub	sp, #56	; 0x38
 8011042:	af08      	add	r7, sp, #32
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 8011048:	2305      	movs	r3, #5
 801104a:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 801104c:	2310      	movs	r3, #16
 801104e:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 8011050:	2301      	movs	r3, #1
 8011052:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 8011054:	2302      	movs	r3, #2
 8011056:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 8011058:	2312      	movs	r3, #18
 801105a:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 801105c:	2300      	movs	r3, #0
 801105e:	75fb      	strb	r3, [r7, #23]
 8011060:	7dfb      	ldrb	r3, [r7, #23]
 8011062:	2b05      	cmp	r3, #5
 8011064:	d80e      	bhi.n	8011084 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8011066:	7dfb      	ldrb	r3, [r7, #23]
 8011068:	683a      	ldr	r2, [r7, #0]
 801106a:	441a      	add	r2, r3
 801106c:	7dfb      	ldrb	r3, [r7, #23]
 801106e:	3301      	adds	r3, #1
 8011070:	7812      	ldrb	r2, [r2, #0]
 8011072:	f107 0118 	add.w	r1, r7, #24
 8011076:	440b      	add	r3, r1
 8011078:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 801107c:	7dfb      	ldrb	r3, [r7, #23]
 801107e:	3301      	adds	r3, #1
 8011080:	75fb      	strb	r3, [r7, #23]
 8011082:	e7ed      	b.n	8011060 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8011094:	2300      	movs	r3, #0
 8011096:	9307      	str	r3, [sp, #28]
 8011098:	f107 030c 	add.w	r3, r7, #12
 801109c:	9306      	str	r3, [sp, #24]
 801109e:	230b      	movs	r3, #11
 80110a0:	9305      	str	r3, [sp, #20]
 80110a2:	230b      	movs	r3, #11
 80110a4:	9304      	str	r3, [sp, #16]
 80110a6:	2300      	movs	r3, #0
 80110a8:	9303      	str	r3, [sp, #12]
 80110aa:	2303      	movs	r3, #3
 80110ac:	9302      	str	r3, [sp, #8]
 80110ae:	2305      	movs	r3, #5
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	2309      	movs	r3, #9
 80110b4:	9300      	str	r3, [sp, #0]
 80110b6:	2321      	movs	r3, #33	; 0x21
 80110b8:	f001 ffd9 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 80110bc:	bf00      	nop
 80110be:	3718      	adds	r7, #24
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	4a04      	ldr	r2, [pc, #16]	; (80110e0 <_ZN13USBReadParserC1Ev+0x1c>)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	080194f4 	.word	0x080194f4

080110e4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7ff ffe7 	bl	80110c4 <_ZN13USBReadParserC1Ev>
 80110f6:	4a21      	ldr	r2, [pc, #132]	; (801117c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	601a      	str	r2, [r3, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	605a      	str	r2, [r3, #4]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	3308      	adds	r3, #8
 8011106:	4618      	mov	r0, r3
 8011108:	f7fd fb65 	bl	800e7d6 <_ZN16MultiValueBufferC1Ev>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	3310      	adds	r3, #16
 8011110:	4618      	mov	r0, r3
 8011112:	f7fd fb77 	bl	800e804 <_ZN20MultiByteValueParserC1Ev>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3318      	adds	r3, #24
 801111a:	4618      	mov	r0, r3
 801111c:	f7fd fb9e 	bl	800e85c <_ZN11ByteSkipperC1Ev>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f103 0220 	add.w	r2, r3, #32
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f103 0210 	add.w	r2, r3, #16
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	3308      	adds	r3, #8
 8011156:	4619      	mov	r1, r3
 8011158:	4610      	mov	r0, r2
 801115a:	f7fd fb67 	bl	800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f103 0218 	add.w	r2, r3, #24
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	3308      	adds	r3, #8
 8011168:	4619      	mov	r1, r3
 801116a:	4610      	mov	r0, r2
 801116c:	f7fd fb8a 	bl	800e884 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	4618      	mov	r0, r3
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
 801117a:	bf00      	nop
 801117c:	0801949c 	.word	0x0801949c

08011180 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
UseOr(false) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4618      	mov	r0, r3
 801118e:	f7ff ff99 	bl	80110c4 <_ZN13USBReadParserC1Ev>
 8011192:	4a21      	ldr	r2, [pc, #132]	; (8011218 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	601a      	str	r2, [r3, #0]
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	683a      	ldr	r2, [r7, #0]
 801119c:	605a      	str	r2, [r3, #4]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	3308      	adds	r3, #8
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fd fb17 	bl	800e7d6 <_ZN16MultiValueBufferC1Ev>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	3310      	adds	r3, #16
 80111ac:	4618      	mov	r0, r3
 80111ae:	f7fd fb29 	bl	800e804 <_ZN20MultiByteValueParserC1Ev>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3318      	adds	r3, #24
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fd fb50 	bl	800e85c <_ZN11ByteSkipperC1Ev>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f103 0220 	add.w	r2, r3, #32
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f103 0210 	add.w	r2, r3, #16
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3308      	adds	r3, #8
 80111f2:	4619      	mov	r1, r3
 80111f4:	4610      	mov	r0, r2
 80111f6:	f7fd fb19 	bl	800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f103 0218 	add.w	r2, r3, #24
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3308      	adds	r3, #8
 8011204:	4619      	mov	r1, r3
 8011206:	4610      	mov	r0, r2
 8011208:	f7fd fb3c 	bl	800e884 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	08019490 	.word	0x08019490

0801121c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	607a      	str	r2, [r7, #4]
 8011226:	603b      	str	r3, [r7, #0]
 8011228:	460b      	mov	r3, r1
 801122a:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 801122c:	897b      	ldrh	r3, [r7, #10]
 801122e:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	613b      	str	r3, [r7, #16]

        while(cntdn)
 8011234:	8afb      	ldrh	r3, [r7, #22]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00f      	beq.n	801125a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 801123a:	f107 0216 	add.w	r2, r7, #22
 801123e:	f107 0310 	add.w	r3, r7, #16
 8011242:	4619      	mov	r1, r3
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	f000 f82d 	bl	80112a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801124a:	4603      	mov	r3, r0
 801124c:	f083 0301 	eor.w	r3, r3, #1
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d100      	bne.n	8011258 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 8011256:	e7ed      	b.n	8011234 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 8011258:	bf00      	nop
}
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	607a      	str	r2, [r7, #4]
 801126a:	603b      	str	r3, [r7, #0]
 801126c:	460b      	mov	r3, r1
 801126e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8011270:	897b      	ldrh	r3, [r7, #10]
 8011272:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8011278:	8afb      	ldrh	r3, [r7, #22]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00f      	beq.n	801129e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 801127e:	f107 0216 	add.w	r2, r7, #22
 8011282:	f107 0310 	add.w	r3, r7, #16
 8011286:	4619      	mov	r1, r3
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f000 f981 	bl	8011590 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801128e:	4603      	mov	r3, r0
 8011290:	f083 0301 	eor.w	r3, r3, #1
 8011294:	b2db      	uxtb	r3, r3
 8011296:	2b00      	cmp	r3, #0
 8011298:	d100      	bne.n	801129c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 801129a:	e7ed      	b.n	8011278 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801129c:	bf00      	nop
}
 801129e:	3718      	adds	r7, #24
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}

080112a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 80112a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112a6:	b089      	sub	sp, #36	; 0x24
 80112a8:	af02      	add	r7, sp, #8
 80112aa:	60f8      	str	r0, [r7, #12]
 80112ac:	60b9      	str	r1, [r7, #8]
 80112ae:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3320      	adds	r3, #32
 80112b4:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	3320      	adds	r3, #32
 80112ba:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112c2:	2b04      	cmp	r3, #4
 80112c4:	f200 815e 	bhi.w	8011584 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 80112c8:	a201      	add	r2, pc, #4	; (adr r2, 80112d0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 80112ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ce:	bf00      	nop
 80112d0:	080112e5 	.word	0x080112e5
 80112d4:	08011305 	.word	0x08011305
 80112d8:	08011347 	.word	0x08011347
 80112dc:	0801135b 	.word	0x0801135b
 80112e0:	0801141f 	.word	0x0801141f
                case 0:
                        theBuffer.valueSize = 2;
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2202      	movs	r2, #2
 80112e8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	f103 0210 	add.w	r2, r3, #16
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	3308      	adds	r3, #8
 80112f4:	4619      	mov	r1, r3
 80112f6:	4610      	mov	r0, r2
 80112f8:	f7fd fa98 	bl	800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2201      	movs	r2, #1
 8011300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	3310      	adds	r3, #16
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	68b9      	ldr	r1, [r7, #8]
 801130c:	4618      	mov	r0, r3
 801130e:	f003 fa49 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011312:	4603      	mov	r3, r0
 8011314:	f083 0301 	eor.w	r3, r3, #1
 8011318:	b2db      	uxtb	r3, r3
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 801131e:	2300      	movs	r3, #0
 8011320:	e131      	b.n	8011586 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011328:	781a      	ldrb	r2, [r3, #0]
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011336:	785a      	ldrb	r2, [r3, #1]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2202      	movs	r2, #2
 8011342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	3320      	adds	r3, #32
 801134a:	1c9a      	adds	r2, r3, #2
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2203      	movs	r2, #3
 8011356:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011360:	3b02      	subs	r3, #2
 8011362:	2b1f      	cmp	r3, #31
 8011364:	d847      	bhi.n	80113f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8011366:	a201      	add	r2, pc, #4	; (adr r2, 801136c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8011368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801136c:	080113f7 	.word	0x080113f7
 8011370:	080113f7 	.word	0x080113f7
 8011374:	080113ed 	.word	0x080113ed
 8011378:	080113f7 	.word	0x080113f7
 801137c:	080113f7 	.word	0x080113f7
 8011380:	080113f7 	.word	0x080113f7
 8011384:	080113f7 	.word	0x080113f7
 8011388:	080113f7 	.word	0x080113f7
 801138c:	080113f7 	.word	0x080113f7
 8011390:	080113f7 	.word	0x080113f7
 8011394:	080113f7 	.word	0x080113f7
 8011398:	080113f7 	.word	0x080113f7
 801139c:	080113f7 	.word	0x080113f7
 80113a0:	080113f7 	.word	0x080113f7
 80113a4:	080113f7 	.word	0x080113f7
 80113a8:	080113f7 	.word	0x080113f7
 80113ac:	080113f7 	.word	0x080113f7
 80113b0:	080113f7 	.word	0x080113f7
 80113b4:	080113f7 	.word	0x080113f7
 80113b8:	080113f7 	.word	0x080113f7
 80113bc:	080113f7 	.word	0x080113f7
 80113c0:	080113f7 	.word	0x080113f7
 80113c4:	080113f7 	.word	0x080113f7
 80113c8:	080113f7 	.word	0x080113f7
 80113cc:	080113f7 	.word	0x080113f7
 80113d0:	080113f7 	.word	0x080113f7
 80113d4:	080113f7 	.word	0x080113f7
 80113d8:	080113f7 	.word	0x080113f7
 80113dc:	080113f7 	.word	0x080113f7
 80113e0:	080113f7 	.word	0x080113f7
 80113e4:	080113f7 	.word	0x080113f7
 80113e8:	080113f7 	.word	0x080113f7
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 80113f4:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80113fc:	3b02      	subs	r3, #2
 80113fe:	b2da      	uxtb	r2, r3
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f103 0210 	add.w	r2, r3, #16
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	3308      	adds	r3, #8
 801140e:	4619      	mov	r1, r3
 8011410:	4610      	mov	r0, r2
 8011412:	f7fd fa0b 	bl	800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2204      	movs	r2, #4
 801141a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011424:	2b05      	cmp	r3, #5
 8011426:	d055      	beq.n	80114d4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8011428:	2b05      	cmp	r3, #5
 801142a:	f300 8085 	bgt.w	8011538 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 801142e:	2b02      	cmp	r3, #2
 8011430:	d002      	beq.n	8011438 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 8011432:	2b04      	cmp	r3, #4
 8011434:	d015      	beq.n	8011462 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8011436:	e07f      	b.n	8011538 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	3310      	adds	r3, #16
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	68b9      	ldr	r1, [r7, #8]
 8011440:	4618      	mov	r0, r3
 8011442:	f003 f9af 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011446:	4603      	mov	r3, r0
 8011448:	f083 0301 	eor.w	r3, r3, #1
 801144c:	b2db      	uxtb	r3, r3
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 8011452:	2300      	movs	r3, #0
 8011454:	e097      	b.n	8011586 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	795a      	ldrb	r2, [r3, #5]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8011460:	e086      	b.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	3310      	adds	r3, #16
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	68b9      	ldr	r1, [r7, #8]
 801146a:	4618      	mov	r0, r3
 801146c:	f003 f99a 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011470:	4603      	mov	r3, r0
 8011472:	f083 0301 	eor.w	r3, r3, #1
 8011476:	b2db      	uxtb	r3, r3
 8011478:	2b00      	cmp	r3, #0
 801147a:	d001      	beq.n	8011480 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 801147c:	2300      	movs	r3, #0
 801147e:	e082      	b.n	8011586 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	795b      	ldrb	r3, [r3, #5]
 8011484:	2be0      	cmp	r3, #224	; 0xe0
 8011486:	d16c      	bne.n	8011562 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	799b      	ldrb	r3, [r3, #6]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d16a      	bne.n	8011566 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011496:	2b00      	cmp	r3, #0
 8011498:	d004      	beq.n	80114a4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	79db      	ldrb	r3, [r3, #7]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d104      	bne.n	80114ac <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 80114a2:	e065      	b.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	79db      	ldrb	r3, [r3, #7]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d15e      	bne.n	801156a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2201      	movs	r2, #1
 80114b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	789a      	ldrb	r2, [r3, #2]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	78da      	ldrb	r2, [r3, #3]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	79da      	ldrb	r2, [r3, #7]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 80114d2:	e04d      	b.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3310      	adds	r3, #16
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	4618      	mov	r0, r3
 80114de:	f003 f961 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80114e2:	4603      	mov	r3, r0
 80114e4:	f083 0301 	eor.w	r3, r3, #1
 80114e8:	b2db      	uxtb	r3, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d001      	beq.n	80114f2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 80114ee:	2300      	movs	r3, #0
 80114f0:	e049      	b.n	8011586 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d038      	beq.n	801156e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	685b      	ldr	r3, [r3, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d034      	beq.n	801156e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6858      	ldr	r0, [r3, #4]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	681c      	ldr	r4, [r3, #0]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011528:	68fa      	ldr	r2, [r7, #12]
 801152a:	3220      	adds	r2, #32
 801152c:	9201      	str	r2, [sp, #4]
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	4633      	mov	r3, r6
 8011532:	462a      	mov	r2, r5
 8011534:	47a0      	blx	r4
                                        break;
 8011536:	e01a      	b.n	801156e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f103 0018 	add.w	r0, r3, #24
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011544:	b29b      	uxth	r3, r3
 8011546:	3b02      	subs	r3, #2
 8011548:	b29b      	uxth	r3, r3
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	68b9      	ldr	r1, [r7, #8]
 801154e:	f7fd f9ac 	bl	800e8aa <_ZN11ByteSkipper4SkipEPPhPtt>
 8011552:	4603      	mov	r3, r0
 8011554:	f083 0301 	eor.w	r3, r3, #1
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	d008      	beq.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 801155e:	2300      	movs	r3, #0
 8011560:	e011      	b.n	8011586 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8011562:	bf00      	nop
 8011564:	e004      	b.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8011566:	bf00      	nop
 8011568:	e002      	b.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 801156a:	bf00      	nop
 801156c:	e000      	b.n	8011570 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801156e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f103 0220 	add.w	r2, r3, #32
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2200      	movs	r2, #0
 8011580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8011584:	2301      	movs	r3, #1
}
 8011586:	4618      	mov	r0, r3
 8011588:	371c      	adds	r7, #28
 801158a:	46bd      	mov	sp, r7
 801158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801158e:	bf00      	nop

08011590 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8011590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011592:	b089      	sub	sp, #36	; 0x24
 8011594:	af02      	add	r7, sp, #8
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	3320      	adds	r3, #32
 80115a0:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	3320      	adds	r3, #32
 80115a6:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115ae:	2b04      	cmp	r3, #4
 80115b0:	f200 815e 	bhi.w	8011870 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 80115b4:	a201      	add	r2, pc, #4	; (adr r2, 80115bc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 80115b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115ba:	bf00      	nop
 80115bc:	080115d1 	.word	0x080115d1
 80115c0:	080115f1 	.word	0x080115f1
 80115c4:	08011633 	.word	0x08011633
 80115c8:	08011647 	.word	0x08011647
 80115cc:	0801170b 	.word	0x0801170b
                        theBuffer.valueSize = 2;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	2202      	movs	r2, #2
 80115d4:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	f103 0210 	add.w	r2, r3, #16
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	3308      	adds	r3, #8
 80115e0:	4619      	mov	r1, r3
 80115e2:	4610      	mov	r0, r2
 80115e4:	f7fd f922 	bl	800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	3310      	adds	r3, #16
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	68b9      	ldr	r1, [r7, #8]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f003 f8d3 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80115fe:	4603      	mov	r3, r0
 8011600:	f083 0301 	eor.w	r3, r3, #1
 8011604:	b2db      	uxtb	r3, r3
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 801160a:	2300      	movs	r3, #0
 801160c:	e131      	b.n	8011872 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011614:	781a      	ldrb	r2, [r3, #0]
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8011622:	785a      	ldrb	r2, [r3, #1]
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2202      	movs	r2, #2
 801162e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	3320      	adds	r3, #32
 8011636:	1c9a      	adds	r2, r3, #2
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2203      	movs	r2, #3
 8011642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801164c:	3b02      	subs	r3, #2
 801164e:	2b1f      	cmp	r3, #31
 8011650:	d847      	bhi.n	80116e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8011652:	a201      	add	r2, pc, #4	; (adr r2, 8011658 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8011654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011658:	080116e3 	.word	0x080116e3
 801165c:	080116e3 	.word	0x080116e3
 8011660:	080116d9 	.word	0x080116d9
 8011664:	080116e3 	.word	0x080116e3
 8011668:	080116e3 	.word	0x080116e3
 801166c:	080116e3 	.word	0x080116e3
 8011670:	080116e3 	.word	0x080116e3
 8011674:	080116e3 	.word	0x080116e3
 8011678:	080116e3 	.word	0x080116e3
 801167c:	080116e3 	.word	0x080116e3
 8011680:	080116e3 	.word	0x080116e3
 8011684:	080116e3 	.word	0x080116e3
 8011688:	080116e3 	.word	0x080116e3
 801168c:	080116e3 	.word	0x080116e3
 8011690:	080116e3 	.word	0x080116e3
 8011694:	080116e3 	.word	0x080116e3
 8011698:	080116e3 	.word	0x080116e3
 801169c:	080116e3 	.word	0x080116e3
 80116a0:	080116e3 	.word	0x080116e3
 80116a4:	080116e3 	.word	0x080116e3
 80116a8:	080116e3 	.word	0x080116e3
 80116ac:	080116e3 	.word	0x080116e3
 80116b0:	080116e3 	.word	0x080116e3
 80116b4:	080116e3 	.word	0x080116e3
 80116b8:	080116e3 	.word	0x080116e3
 80116bc:	080116e3 	.word	0x080116e3
 80116c0:	080116e3 	.word	0x080116e3
 80116c4:	080116e3 	.word	0x080116e3
 80116c8:	080116e3 	.word	0x080116e3
 80116cc:	080116e3 	.word	0x080116e3
 80116d0:	080116e3 	.word	0x080116e3
 80116d4:	080116e3 	.word	0x080116e3
                                        isGoodInterface = false;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2200      	movs	r2, #0
 80116dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 80116e0:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80116e8:	3b02      	subs	r3, #2
 80116ea:	b2da      	uxtb	r2, r3
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f103 0210 	add.w	r2, r3, #16
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	3308      	adds	r3, #8
 80116fa:	4619      	mov	r1, r3
 80116fc:	4610      	mov	r0, r2
 80116fe:	f7fd f895 	bl	800e82c <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2204      	movs	r2, #4
 8011706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011710:	2b05      	cmp	r3, #5
 8011712:	d055      	beq.n	80117c0 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 8011714:	2b05      	cmp	r3, #5
 8011716:	f300 8085 	bgt.w	8011824 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 801171a:	2b02      	cmp	r3, #2
 801171c:	d002      	beq.n	8011724 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 801171e:	2b04      	cmp	r3, #4
 8011720:	d015      	beq.n	801174e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 8011722:	e07f      	b.n	8011824 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	3310      	adds	r3, #16
 8011728:	687a      	ldr	r2, [r7, #4]
 801172a:	68b9      	ldr	r1, [r7, #8]
 801172c:	4618      	mov	r0, r3
 801172e:	f003 f839 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8011732:	4603      	mov	r3, r0
 8011734:	f083 0301 	eor.w	r3, r3, #1
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 801173e:	2300      	movs	r3, #0
 8011740:	e097      	b.n	8011872 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	795a      	ldrb	r2, [r3, #5]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 801174c:	e086      	b.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	3310      	adds	r3, #16
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	68b9      	ldr	r1, [r7, #8]
 8011756:	4618      	mov	r0, r3
 8011758:	f003 f824 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801175c:	4603      	mov	r3, r0
 801175e:	f083 0301 	eor.w	r3, r3, #1
 8011762:	b2db      	uxtb	r3, r3
 8011764:	2b00      	cmp	r3, #0
 8011766:	d001      	beq.n	801176c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8011768:	2300      	movs	r3, #0
 801176a:	e082      	b.n	8011872 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 801176c:	693b      	ldr	r3, [r7, #16]
 801176e:	795b      	ldrb	r3, [r3, #5]
 8011770:	2bff      	cmp	r3, #255	; 0xff
 8011772:	d16c      	bne.n	801184e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	799b      	ldrb	r3, [r3, #6]
 8011778:	2b01      	cmp	r3, #1
 801177a:	d16a      	bne.n	8011852 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011782:	2b00      	cmp	r3, #0
 8011784:	d004      	beq.n	8011790 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	79db      	ldrb	r3, [r3, #7]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d104      	bne.n	8011798 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801178e:	e065      	b.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	79db      	ldrb	r3, [r3, #7]
 8011794:	2b01      	cmp	r3, #1
 8011796:	d15e      	bne.n	8011856 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2201      	movs	r2, #1
 801179c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	789a      	ldrb	r2, [r3, #2]
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	78da      	ldrb	r2, [r3, #3]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	79da      	ldrb	r2, [r3, #7]
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 80117be:	e04d      	b.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	3310      	adds	r3, #16
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	68b9      	ldr	r1, [r7, #8]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f002 ffeb 	bl	80147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80117ce:	4603      	mov	r3, r0
 80117d0:	f083 0301 	eor.w	r3, r3, #1
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d001      	beq.n	80117de <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 80117da:	2300      	movs	r3, #0
 80117dc:	e049      	b.n	8011872 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d038      	beq.n	801185a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d034      	beq.n	801185a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	6858      	ldr	r0, [r3, #4]
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	681c      	ldr	r4, [r3, #0]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	3220      	adds	r2, #32
 8011818:	9201      	str	r2, [sp, #4]
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	4633      	mov	r3, r6
 801181e:	462a      	mov	r2, r5
 8011820:	47a0      	blx	r4
                                        break;
 8011822:	e01a      	b.n	801185a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f103 0018 	add.w	r0, r3, #24
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011830:	b29b      	uxth	r3, r3
 8011832:	3b02      	subs	r3, #2
 8011834:	b29b      	uxth	r3, r3
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	68b9      	ldr	r1, [r7, #8]
 801183a:	f7fd f836 	bl	800e8aa <_ZN11ByteSkipper4SkipEPPhPtt>
 801183e:	4603      	mov	r3, r0
 8011840:	f083 0301 	eor.w	r3, r3, #1
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d008      	beq.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 801184a:	2300      	movs	r3, #0
 801184c:	e011      	b.n	8011872 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 801184e:	bf00      	nop
 8011850:	e004      	b.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8011852:	bf00      	nop
 8011854:	e002      	b.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 8011856:	bf00      	nop
 8011858:	e000      	b.n	801185c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801185a:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	f103 0220 	add.w	r2, r3, #32
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2200      	movs	r2, #0
 801186c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 8011870:	2301      	movs	r3, #1
}
 8011872:	4618      	mov	r0, r3
 8011874:	371c      	adds	r7, #28
 8011876:	46bd      	mov	sp, r7
 8011878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801187a:	bf00      	nop

0801187c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8011886:	2300      	movs	r3, #0
 8011888:	73fb      	strb	r3, [r7, #15]
 801188a:	7bfb      	ldrb	r3, [r7, #15]
 801188c:	2b03      	cmp	r3, #3
 801188e:	d815      	bhi.n	80118bc <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8011890:	7bfb      	ldrb	r3, [r7, #15]
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	3318      	adds	r3, #24
 8011896:	009b      	lsls	r3, r3, #2
 8011898:	4413      	add	r3, r2
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d109      	bne.n	80118b4 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	3318      	adds	r3, #24
 80118a6:	009b      	lsls	r3, r3, #2
 80118a8:	4413      	add	r3, r2
 80118aa:	683a      	ldr	r2, [r7, #0]
 80118ac:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 80118ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118b2:	e005      	b.n	80118c0 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	3301      	adds	r3, #1
 80118b8:	73fb      	strb	r3, [r7, #15]
 80118ba:	e7e6      	b.n	801188a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 80118bc:	f04f 33ff 	mov.w	r3, #4294967295
        };
 80118c0:	4618      	mov	r0, r3
 80118c2:	3714      	adds	r7, #20
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr

080118cc <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
 80118d6:	4a0a      	ldr	r2, [pc, #40]	; (8011900 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	683a      	ldr	r2, [r7, #0]
 80118e0:	609a      	str	r2, [r3, #8]
                if(pBtd)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	689b      	ldr	r3, [r3, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d005      	beq.n	80118f6 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	689b      	ldr	r3, [r3, #8]
 80118ee:	6879      	ldr	r1, [r7, #4]
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff ffc3 	bl	801187c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4618      	mov	r0, r3
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	08019558 	.word	0x08019558

08011904 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 8011904:	b480      	push	{r7}
 8011906:	b085      	sub	sp, #20
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	4613      	mov	r3, r2
 8011910:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	461a      	mov	r2, r3
 8011918:	88fb      	ldrh	r3, [r7, #6]
 801191a:	b2db      	uxtb	r3, r3
 801191c:	429a      	cmp	r2, r3
 801191e:	d10b      	bne.n	8011938 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	3301      	adds	r3, #1
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	461a      	mov	r2, r3
 8011928:	88fb      	ldrh	r3, [r7, #6]
 801192a:	121b      	asrs	r3, r3, #8
 801192c:	f043 0320 	orr.w	r3, r3, #32
 8011930:	429a      	cmp	r2, r3
 8011932:	d101      	bne.n	8011938 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 8011934:	2301      	movs	r3, #1
 8011936:	e000      	b.n	801193a <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 8011938:	2300      	movs	r3, #0
        }
 801193a:	4618      	mov	r0, r3
 801193c:	3714      	adds	r7, #20
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr

08011946 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8011946:	b480      	push	{r7}
 8011948:	b085      	sub	sp, #20
 801194a:	af00      	add	r7, sp, #0
 801194c:	60f8      	str	r0, [r7, #12]
 801194e:	460b      	mov	r3, r1
 8011950:	607a      	str	r2, [r7, #4]
 8011952:	72fb      	strb	r3, [r7, #11]
                return;
 8011954:	bf00      	nop
        };
 8011956:	3714      	adds	r7, #20
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr

08011960 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
                return;
 8011968:	bf00      	nop
        };
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
                return;
 801197c:	bf00      	nop
        }
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8011988:	b580      	push	{r7, lr}
 801198a:	b086      	sub	sp, #24
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	603b      	str	r3, [r7, #0]
 8011994:	4613      	mov	r3, r2
 8011996:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	68b9      	ldr	r1, [r7, #8]
 801199c:	4618      	mov	r0, r3
 801199e:	f7ff ff95 	bl	80118cc <_ZN16BluetoothServiceC1EP3BTD>
 80119a2:	4a1f      	ldr	r2, [pc, #124]	; (8011a20 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	601a      	str	r2, [r3, #0]
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2200      	movs	r2, #0
 80119ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 80119b0:	2300      	movs	r3, #0
 80119b2:	75fb      	strb	r3, [r7, #23]
 80119b4:	7dfb      	ldrb	r3, [r7, #23]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d809      	bhi.n	80119ce <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 80119ba:	7dfa      	ldrb	r2, [r7, #23]
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	3208      	adds	r2, #8
 80119c0:	2100      	movs	r1, #0
 80119c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 80119c6:	7dfb      	ldrb	r3, [r7, #23]
 80119c8:	3301      	adds	r3, #1
 80119ca:	75fb      	strb	r3, [r7, #23]
 80119cc:	e7f2      	b.n	80119b4 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	689b      	ldr	r3, [r3, #8]
 80119d2:	79fa      	ldrb	r2, [r7, #7]
 80119d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	683a      	ldr	r2, [r7, #0]
 80119de:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2250      	movs	r2, #80	; 0x50
 80119e4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2200      	movs	r2, #0
 80119ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2270      	movs	r2, #112	; 0x70
 80119f4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2200      	movs	r2, #0
 80119fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2271      	movs	r2, #113	; 0x71
 8011a04:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 f807 	bl	8011a24 <_ZN5BTHID5ResetEv>
}
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	0801952c 	.word	0x0801952c

08011a24 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
        connected = false;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2200      	movs	r2, #0
 8011a46:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	220a      	movs	r2, #10
 8011a4c:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2200      	movs	r2, #0
 8011a52:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	3320      	adds	r3, #32
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	4798      	blx	r3
}
 8011a62:	bf00      	nop
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 8011a6a:	b590      	push	{r4, r7, lr}
 8011a6c:	b085      	sub	sp, #20
 8011a6e:	af02      	add	r7, sp, #8
 8011a70:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d014      	beq.n	8011aa6 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6898      	ldr	r0, [r3, #8]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8999      	ldrh	r1, [r3, #12]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	7d1b      	ldrb	r3, [r3, #20]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	b2da      	uxtb	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	751a      	strb	r2, [r3, #20]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7d1a      	ldrb	r2, [r3, #20]
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f103 041b 	add.w	r4, r3, #27
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	336f      	adds	r3, #111	; 0x6f
 8011a9e:	9300      	str	r3, [sp, #0]
 8011aa0:	4623      	mov	r3, r4
 8011aa2:	f7ff f9c5 	bl	8010e30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6898      	ldr	r0, [r3, #8]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8999      	ldrh	r1, [r3, #12]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	7d1b      	ldrb	r3, [r3, #20]
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	751a      	strb	r2, [r3, #20]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	7d1a      	ldrb	r2, [r3, #20]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f103 0418 	add.w	r4, r3, #24
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	336d      	adds	r3, #109	; 0x6d
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	4623      	mov	r3, r4
 8011acc:	f7ff f9b0 	bl	8010e30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	3308      	adds	r3, #8
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	6878      	ldr	r0, [r7, #4]
 8011ada:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	220e      	movs	r2, #14
 8011ae0:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2209      	movs	r2, #9
 8011ae6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8011aea:	bf00      	nop
 8011aec:	370c      	adds	r7, #12
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd90      	pop	{r4, r7, pc}

08011af2 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8011af2:	b590      	push	{r4, r7, lr}
 8011af4:	b087      	sub	sp, #28
 8011af6:	af02      	add	r7, sp, #8
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	6039      	str	r1, [r7, #0]
        if(!connected) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	7d5b      	ldrb	r3, [r3, #21]
 8011b00:	f083 0301 	eor.w	r3, r3, #1
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d023      	beq.n	8011b52 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	3308      	adds	r3, #8
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d11e      	bne.n	8011b52 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	330c      	adds	r3, #12
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	330d      	adds	r3, #13
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	021b      	lsls	r3, r3, #8
 8011b24:	4313      	orrs	r3, r2
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d113      	bne.n	8011b52 <_ZN5BTHID7ACLDataEPh+0x60>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	7a9b      	ldrb	r3, [r3, #10]
 8011b30:	f083 0301 	eor.w	r3, r3, #1
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d00b      	beq.n	8011b52 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	689b      	ldr	r3, [r3, #8]
 8011b3e:	2201      	movs	r2, #1
 8011b40:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	689b      	ldr	r3, [r3, #8]
 8011b46:	8b5a      	ldrh	r2, [r3, #26]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	220a      	movs	r2, #10
 8011b50:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	689b      	ldr	r3, [r3, #8]
 8011b56:	7a5b      	ldrb	r3, [r3, #9]
 8011b58:	f083 0301 	eor.w	r3, r3, #1
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d03a      	beq.n	8011bd8 <_ZN5BTHID7ACLDataEPh+0xe6>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d034      	beq.n	8011bd8 <_ZN5BTHID7ACLDataEPh+0xe6>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	7d5b      	ldrb	r3, [r3, #21]
 8011b72:	f083 0301 	eor.w	r3, r3, #1
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d02d      	beq.n	8011bd8 <_ZN5BTHID7ACLDataEPh+0xe6>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011b82:	f083 0301 	eor.w	r3, r3, #1
 8011b86:	b2db      	uxtb	r3, r3
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d025      	beq.n	8011bd8 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	3308      	adds	r3, #8
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	2b02      	cmp	r3, #2
 8011b94:	d120      	bne.n	8011bd8 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	330c      	adds	r3, #12
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	330d      	adds	r3, #13
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	021b      	lsls	r3, r3, #8
 8011ba6:	4313      	orrs	r3, r2
 8011ba8:	2b11      	cmp	r3, #17
 8011baa:	d115      	bne.n	8011bd8 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	689b      	ldr	r3, [r3, #8]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	2201      	movs	r2, #1
 8011bbc:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2201      	movs	r2, #1
 8011bc2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	8b5a      	ldrh	r2, [r3, #26]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	461a      	mov	r2, r3
 8011be0:	6839      	ldr	r1, [r7, #0]
 8011be2:	f7ff fe8f 	bl	8011904 <_ZN16BluetoothService14checkHciHandleEPht>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f000 83d9 	beq.w	80123a0 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	3306      	adds	r3, #6
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	3307      	adds	r3, #7
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	021b      	lsls	r3, r3, #8
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	f040 829b 	bne.w	801213c <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	3308      	adds	r3, #8
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	f000 83c1 	beq.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	3308      	adds	r3, #8
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	2b03      	cmp	r3, #3
 8011c1a:	f040 808d 	bne.w	8011d38 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	3310      	adds	r3, #16
 8011c22:	781b      	ldrb	r3, [r3, #0]
 8011c24:	461a      	mov	r2, r3
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	3311      	adds	r3, #17
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	021b      	lsls	r3, r3, #8
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	f040 83af 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	3312      	adds	r3, #18
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	3313      	adds	r3, #19
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	021b      	lsls	r3, r3, #8
 8011c46:	4313      	orrs	r3, r2
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f040 83a3 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	330e      	adds	r3, #14
 8011c52:	781a      	ldrb	r2, [r3, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d124      	bne.n	8011ca8 <_ZN5BTHID7ACLDataEPh+0x1b6>
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	330f      	adds	r3, #15
 8011c62:	781a      	ldrb	r2, [r3, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d11c      	bne.n	8011ca8 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	7a5a      	ldrb	r2, [r3, #9]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	7b1a      	ldrb	r2, [r3, #12]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	7b5a      	ldrb	r2, [r3, #13]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7d1b      	ldrb	r3, [r3, #20]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	b2da      	uxtb	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6898      	ldr	r0, [r3, #8]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	8999      	ldrh	r1, [r3, #12]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	7d1a      	ldrb	r2, [r3, #20]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	331b      	adds	r3, #27
 8011ca2:	f7ff f827 	bl	8010cf4 <_ZN3BTD20l2cap_config_requestEthPh>
 8011ca6:	e375      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	330e      	adds	r3, #14
 8011cac:	781a      	ldrb	r2, [r3, #0]
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d11a      	bne.n	8011cee <_ZN5BTHID7ACLDataEPh+0x1fc>
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	330f      	adds	r3, #15
 8011cbc:	781a      	ldrb	r2, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d112      	bne.n	8011cee <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	7a5a      	ldrb	r2, [r3, #9]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	7b1a      	ldrb	r2, [r3, #12]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	7b5a      	ldrb	r2, [r3, #13]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	691b      	ldr	r3, [r3, #16]
 8011ce4:	f043 0204 	orr.w	r2, r3, #4
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	611a      	str	r2, [r3, #16]
 8011cec:	e352      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	330e      	adds	r3, #14
 8011cf2:	781a      	ldrb	r2, [r3, #0]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	f040 834a 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	330f      	adds	r3, #15
 8011d04:	781a      	ldrb	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	f040 8341 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	7a5a      	ldrb	r2, [r3, #9]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	7b1a      	ldrb	r2, [r3, #12]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	7b5a      	ldrb	r2, [r3, #13]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	691b      	ldr	r3, [r3, #16]
 8011d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	611a      	str	r2, [r3, #16]
 8011d36:	e32d      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	3308      	adds	r3, #8
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d15a      	bne.n	8011df8 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	330c      	adds	r3, #12
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	330d      	adds	r3, #13
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	021b      	lsls	r3, r3, #8
 8011d52:	4313      	orrs	r3, r2
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d112      	bne.n	8011d7e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	7a5a      	ldrb	r2, [r3, #9]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	7b9a      	ldrb	r2, [r3, #14]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	7bda      	ldrb	r2, [r3, #15]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	611a      	str	r2, [r3, #16]
 8011d7c:	e30a      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	330c      	adds	r3, #12
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	461a      	mov	r2, r3
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	330d      	adds	r3, #13
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	021b      	lsls	r3, r3, #8
 8011d8e:	4313      	orrs	r3, r2
 8011d90:	2b11      	cmp	r3, #17
 8011d92:	d112      	bne.n	8011dba <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	7a5a      	ldrb	r2, [r3, #9]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	7b9a      	ldrb	r2, [r3, #14]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	7bda      	ldrb	r2, [r3, #15]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	691b      	ldr	r3, [r3, #16]
 8011db0:	f043 0201 	orr.w	r2, r3, #1
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	611a      	str	r2, [r3, #16]
 8011db8:	e2ec      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	330c      	adds	r3, #12
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	461a      	mov	r2, r3
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	330d      	adds	r3, #13
 8011dc6:	781b      	ldrb	r3, [r3, #0]
 8011dc8:	021b      	lsls	r3, r3, #8
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	2b13      	cmp	r3, #19
 8011dce:	f040 82e1 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	7a5a      	ldrb	r2, [r3, #9]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	7b9a      	ldrb	r2, [r3, #14]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	7bda      	ldrb	r2, [r3, #15]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	691b      	ldr	r3, [r3, #16]
 8011dee:	f043 0210 	orr.w	r2, r3, #16
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	611a      	str	r2, [r3, #16]
 8011df6:	e2cd      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	3308      	adds	r3, #8
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	2b05      	cmp	r3, #5
 8011e00:	d15e      	bne.n	8011ec0 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	3310      	adds	r3, #16
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	461a      	mov	r2, r3
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	3311      	adds	r3, #17
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	021b      	lsls	r3, r3, #8
 8011e12:	4313      	orrs	r3, r2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f040 82bd 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	330c      	adds	r3, #12
 8011e1e:	781a      	ldrb	r2, [r3, #0]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d112      	bne.n	8011e50 <_ZN5BTHID7ACLDataEPh+0x35e>
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	330d      	adds	r3, #13
 8011e2e:	781a      	ldrb	r2, [r3, #0]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d10a      	bne.n	8011e50 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	7a5a      	ldrb	r2, [r3, #9]
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	611a      	str	r2, [r3, #16]
 8011e4e:	e2a1      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	330c      	adds	r3, #12
 8011e54:	781a      	ldrb	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d112      	bne.n	8011e86 <_ZN5BTHID7ACLDataEPh+0x394>
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	330d      	adds	r3, #13
 8011e64:	781a      	ldrb	r2, [r3, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d10a      	bne.n	8011e86 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	7a5a      	ldrb	r2, [r3, #9]
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	691b      	ldr	r3, [r3, #16]
 8011e7c:	f043 0202 	orr.w	r2, r3, #2
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	611a      	str	r2, [r3, #16]
 8011e84:	e286      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	330c      	adds	r3, #12
 8011e8a:	781a      	ldrb	r2, [r3, #0]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011e92:	429a      	cmp	r2, r3
 8011e94:	f040 827e 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	330d      	adds	r3, #13
 8011e9c:	781a      	ldrb	r2, [r3, #0]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	f040 8275 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	7a5a      	ldrb	r2, [r3, #9]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	691b      	ldr	r3, [r3, #16]
 8011eb6:	f043 0220 	orr.w	r2, r3, #32
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	611a      	str	r2, [r3, #16]
 8011ebe:	e269      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	3308      	adds	r3, #8
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	2b04      	cmp	r3, #4
 8011ec8:	d155      	bne.n	8011f76 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	330c      	adds	r3, #12
 8011ece:	781a      	ldrb	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d113      	bne.n	8011f02 <_ZN5BTHID7ACLDataEPh+0x410>
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	330d      	adds	r3, #13
 8011ede:	781a      	ldrb	r2, [r3, #0]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d10b      	bne.n	8011f02 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6898      	ldr	r0, [r3, #8]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8999      	ldrh	r1, [r3, #12]
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	3309      	adds	r3, #9
 8011ef6:	781a      	ldrb	r2, [r3, #0]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	331b      	adds	r3, #27
 8011efc:	f7fe ff45 	bl	8010d8a <_ZN3BTD21l2cap_config_responseEthPh>
 8011f00:	e248      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	330c      	adds	r3, #12
 8011f06:	781a      	ldrb	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d113      	bne.n	8011f3a <_ZN5BTHID7ACLDataEPh+0x448>
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	330d      	adds	r3, #13
 8011f16:	781a      	ldrb	r2, [r3, #0]
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d10b      	bne.n	8011f3a <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	6898      	ldr	r0, [r3, #8]
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	8999      	ldrh	r1, [r3, #12]
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	3309      	adds	r3, #9
 8011f2e:	781a      	ldrb	r2, [r3, #0]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	3316      	adds	r3, #22
 8011f34:	f7fe ff29 	bl	8010d8a <_ZN3BTD21l2cap_config_responseEthPh>
 8011f38:	e22c      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	330c      	adds	r3, #12
 8011f3e:	781a      	ldrb	r2, [r3, #0]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011f46:	429a      	cmp	r2, r3
 8011f48:	f040 8224 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	330d      	adds	r3, #13
 8011f50:	781a      	ldrb	r2, [r3, #0]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	f040 821b 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6898      	ldr	r0, [r3, #8]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	8999      	ldrh	r1, [r3, #12]
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	3309      	adds	r3, #9
 8011f6a:	781a      	ldrb	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	3318      	adds	r3, #24
 8011f70:	f7fe ff0b 	bl	8010d8a <_ZN3BTD21l2cap_config_responseEthPh>
 8011f74:	e20e      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	3308      	adds	r3, #8
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	2b06      	cmp	r3, #6
 8011f7e:	d170      	bne.n	8012062 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	330c      	adds	r3, #12
 8011f84:	781a      	ldrb	r2, [r3, #0]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d112      	bne.n	8011fb6 <_ZN5BTHID7ACLDataEPh+0x4c4>
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	330d      	adds	r3, #13
 8011f94:	781a      	ldrb	r2, [r3, #0]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d10a      	bne.n	8011fb6 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	7a5a      	ldrb	r2, [r3, #9]
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	691b      	ldr	r3, [r3, #16]
 8011fac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	611a      	str	r2, [r3, #16]
 8011fb4:	e1ee      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	330c      	adds	r3, #12
 8011fba:	781a      	ldrb	r2, [r3, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d121      	bne.n	801200a <_ZN5BTHID7ACLDataEPh+0x518>
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	330d      	adds	r3, #13
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d119      	bne.n	801200a <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	7a5a      	ldrb	r2, [r3, #9]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6898      	ldr	r0, [r3, #8]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	8999      	ldrh	r1, [r3, #12]
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	7d1a      	ldrb	r2, [r3, #20]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	3316      	adds	r3, #22
 8011ff4:	9300      	str	r3, [sp, #0]
 8011ff6:	4623      	mov	r3, r4
 8011ff8:	f7fe ff57 	bl	8010eaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	3308      	adds	r3, #8
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	4798      	blx	r3
 8012008:	e1c4      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	330c      	adds	r3, #12
 801200e:	781a      	ldrb	r2, [r3, #0]
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012016:	429a      	cmp	r2, r3
 8012018:	f040 81bc 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 801201c:	683b      	ldr	r3, [r7, #0]
 801201e:	330d      	adds	r3, #13
 8012020:	781a      	ldrb	r2, [r3, #0]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012028:	429a      	cmp	r2, r3
 801202a:	f040 81b3 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	7a5a      	ldrb	r2, [r3, #9]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6898      	ldr	r0, [r3, #8]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	8999      	ldrh	r1, [r3, #12]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	7d1a      	ldrb	r2, [r3, #20]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	3318      	adds	r3, #24
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	4623      	mov	r3, r4
 8012050:	f7fe ff2b 	bl	8010eaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	3308      	adds	r3, #8
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	4798      	blx	r3
 8012060:	e198      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	3308      	adds	r3, #8
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	2b07      	cmp	r3, #7
 801206a:	d14c      	bne.n	8012106 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	330c      	adds	r3, #12
 8012070:	781a      	ldrb	r2, [r3, #0]
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	7edb      	ldrb	r3, [r3, #27]
 8012076:	429a      	cmp	r2, r3
 8012078:	d111      	bne.n	801209e <_ZN5BTHID7ACLDataEPh+0x5ac>
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	330d      	adds	r3, #13
 801207e:	781a      	ldrb	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	7f1b      	ldrb	r3, [r3, #28]
 8012084:	429a      	cmp	r2, r3
 8012086:	d10a      	bne.n	801209e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	7a5a      	ldrb	r2, [r3, #9]
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	691b      	ldr	r3, [r3, #16]
 8012094:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	611a      	str	r2, [r3, #16]
 801209c:	e17a      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	330c      	adds	r3, #12
 80120a2:	781a      	ldrb	r2, [r3, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	7d9b      	ldrb	r3, [r3, #22]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d111      	bne.n	80120d0 <_ZN5BTHID7ACLDataEPh+0x5de>
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	330d      	adds	r3, #13
 80120b0:	781a      	ldrb	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	7ddb      	ldrb	r3, [r3, #23]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	d10a      	bne.n	80120d0 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	7a5a      	ldrb	r2, [r3, #9]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	691b      	ldr	r3, [r3, #16]
 80120c6:	f043 0208 	orr.w	r2, r3, #8
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	611a      	str	r2, [r3, #16]
 80120ce:	e161      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	330c      	adds	r3, #12
 80120d4:	781a      	ldrb	r2, [r3, #0]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	7e1b      	ldrb	r3, [r3, #24]
 80120da:	429a      	cmp	r2, r3
 80120dc:	f040 815a 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	330d      	adds	r3, #13
 80120e4:	781a      	ldrb	r2, [r3, #0]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	7e5b      	ldrb	r3, [r3, #25]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	f040 8152 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	7a5a      	ldrb	r2, [r3, #9]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	691b      	ldr	r3, [r3, #16]
 80120fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	611a      	str	r2, [r3, #16]
 8012104:	e146      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	3308      	adds	r3, #8
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	2b0a      	cmp	r3, #10
 801210e:	f040 8141 	bne.w	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	7a5a      	ldrb	r2, [r3, #9]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6898      	ldr	r0, [r3, #8]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	8999      	ldrh	r1, [r3, #12]
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	7d1a      	ldrb	r2, [r3, #20]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	330c      	adds	r3, #12
 801212a:	781c      	ldrb	r4, [r3, #0]
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	330d      	adds	r3, #13
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	9300      	str	r3, [sp, #0]
 8012134:	4623      	mov	r3, r4
 8012136:	f7fe fef5 	bl	8010f24 <_ZN3BTD26l2cap_information_responseEthhh>
 801213a:	e12b      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	3306      	adds	r3, #6
 8012140:	781a      	ldrb	r2, [r3, #0]
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8012148:	429a      	cmp	r2, r3
 801214a:	f040 8087 	bne.w	801225c <_ZN5BTHID7ACLDataEPh+0x76a>
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	3307      	adds	r3, #7
 8012152:	781a      	ldrb	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801215a:	429a      	cmp	r2, r3
 801215c:	d17e      	bne.n	801225c <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	3308      	adds	r3, #8
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	2b02      	cmp	r3, #2
 8012166:	d131      	bne.n	80121cc <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2203      	movs	r2, #3
 801216c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8012170:	683b      	ldr	r3, [r7, #0]
 8012172:	7a5a      	ldrb	r2, [r3, #9]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	7a9a      	ldrb	r2, [r3, #10]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2205      	movs	r2, #5
 8012190:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2200      	movs	r2, #0
 80121a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2200      	movs	r2, #0
 80121a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2200      	movs	r2, #0
 80121b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	3328      	adds	r3, #40	; 0x28
 80121c0:	220a      	movs	r2, #10
 80121c2:	4619      	mov	r1, r3
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f000 fb6d 	bl	80128a4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80121ca:	e0e0      	b.n	801238e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	3308      	adds	r3, #8
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	2b04      	cmp	r3, #4
 80121d4:	d131      	bne.n	801223a <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2205      	movs	r2, #5
 80121da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	7a5a      	ldrb	r2, [r3, #9]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	7a9a      	ldrb	r2, [r3, #10]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2200      	movs	r2, #0
 80121f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2205      	movs	r2, #5
 80121fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2200      	movs	r2, #0
 8012206:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2202      	movs	r2, #2
 801220e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2235      	movs	r2, #53	; 0x35
 8012216:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	3328      	adds	r3, #40	; 0x28
 801222e:	220a      	movs	r2, #10
 8012230:	4619      	mov	r1, r3
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fb36 	bl	80128a4 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 8012238:	e0a9      	b.n	801238e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	3308      	adds	r3, #8
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	2b06      	cmp	r3, #6
 8012242:	f040 80a4 	bne.w	801238e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	3309      	adds	r3, #9
 801224a:	7819      	ldrb	r1, [r3, #0]
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	330a      	adds	r3, #10
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	461a      	mov	r2, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f000 fb3f 	bl	80128d8 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801225a:	e098      	b.n	801238e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	3306      	adds	r3, #6
 8012260:	781a      	ldrb	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8012268:	429a      	cmp	r2, r3
 801226a:	d162      	bne.n	8012332 <_ZN5BTHID7ACLDataEPh+0x840>
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	3307      	adds	r3, #7
 8012270:	781a      	ldrb	r2, [r3, #0]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8012278:	429a      	cmp	r2, r3
 801227a:	d15a      	bne.n	8012332 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	3308      	adds	r3, #8
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2ba1      	cmp	r3, #161	; 0xa1
 8012284:	f040 8085 	bne.w	8012392 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8012288:	f7f1 fb48 	bl	800391c <HAL_GetTick>
 801228c:	4602      	mov	r2, r0
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	3305      	adds	r3, #5
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	021b      	lsls	r3, r3, #8
 801229a:	b21a      	sxth	r2, r3
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	3304      	adds	r3, #4
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	b21b      	sxth	r3, r3
 80122a4:	4313      	orrs	r3, r2
 80122a6:	b21b      	sxth	r3, r3
 80122a8:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	3314      	adds	r3, #20
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	89fa      	ldrh	r2, [r7, #14]
 80122b4:	b2d2      	uxtb	r2, r2
 80122b6:	3a01      	subs	r2, #1
 80122b8:	b2d1      	uxtb	r1, r2
 80122ba:	683a      	ldr	r2, [r7, #0]
 80122bc:	3209      	adds	r2, #9
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	3309      	adds	r3, #9
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d002      	beq.n	80122d2 <_ZN5BTHID7ACLDataEPh+0x7e0>
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d016      	beq.n	80122fe <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 80122d0:	e05f      	b.n	8012392 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6a1b      	ldr	r3, [r3, #32]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d027      	beq.n	801232a <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6a18      	ldr	r0, [r3, #32]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6a1b      	ldr	r3, [r3, #32]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	681c      	ldr	r4, [r3, #0]
 80122e6:	89fb      	ldrh	r3, [r7, #14]
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	3b02      	subs	r3, #2
 80122ec:	b2da      	uxtb	r2, r3
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	330a      	adds	r3, #10
 80122f2:	9300      	str	r3, [sp, #0]
 80122f4:	4613      	mov	r3, r2
 80122f6:	2200      	movs	r2, #0
 80122f8:	6879      	ldr	r1, [r7, #4]
 80122fa:	47a0      	blx	r4
                                                break;
 80122fc:	e015      	b.n	801232a <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012302:	2b00      	cmp	r3, #0
 8012304:	d013      	beq.n	801232e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	681c      	ldr	r4, [r3, #0]
 8012312:	89fb      	ldrh	r3, [r7, #14]
 8012314:	b2db      	uxtb	r3, r3
 8012316:	3b02      	subs	r3, #2
 8012318:	b2da      	uxtb	r2, r3
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	330a      	adds	r3, #10
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	4613      	mov	r3, r2
 8012322:	2200      	movs	r2, #0
 8012324:	6879      	ldr	r1, [r7, #4]
 8012326:	47a0      	blx	r4
                                                break;
 8012328:	e001      	b.n	801232e <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 801232a:	bf00      	nop
 801232c:	e031      	b.n	8012392 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 801232e:	bf00      	nop
                        }
 8012330:	e02f      	b.n	8012392 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	3306      	adds	r3, #6
 8012336:	781a      	ldrb	r2, [r3, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801233e:	429a      	cmp	r2, r3
 8012340:	d128      	bne.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	3307      	adds	r3, #7
 8012346:	781a      	ldrb	r2, [r3, #0]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801234e:	429a      	cmp	r2, r3
 8012350:	d120      	bne.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	3308      	adds	r3, #8
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	2ba3      	cmp	r3, #163	; 0xa3
 801235a:	d11b      	bne.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	3305      	adds	r3, #5
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	021b      	lsls	r3, r3, #8
 8012364:	b21a      	sxth	r2, r3
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	3304      	adds	r3, #4
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	b21b      	sxth	r3, r3
 801236e:	4313      	orrs	r3, r2
 8012370:	b21b      	sxth	r3, r3
 8012372:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	3318      	adds	r3, #24
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	89ba      	ldrh	r2, [r7, #12]
 801237e:	b2d2      	uxtb	r2, r2
 8012380:	3a01      	subs	r2, #1
 8012382:	b2d1      	uxtb	r1, r2
 8012384:	683a      	ldr	r2, [r7, #0]
 8012386:	3209      	adds	r2, #9
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	4798      	blx	r3
 801238c:	e002      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801238e:	bf00      	nop
 8012390:	e000      	b.n	8012394 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8012392:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 f807 	bl	80123a8 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 f8b4 	bl	8012508 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 80123a0:	bf00      	nop
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd90      	pop	{r4, r7, pc}

080123a8 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 80123a8:	b5b0      	push	{r4, r5, r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af02      	add	r7, sp, #8
 80123ae:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	7e9b      	ldrb	r3, [r3, #26]
 80123b4:	2b0e      	cmp	r3, #14
 80123b6:	f000 8084 	beq.w	80124c2 <_ZN5BTHID8SDP_taskEv+0x11a>
 80123ba:	2b0e      	cmp	r3, #14
 80123bc:	f300 809f 	bgt.w	80124fe <_ZN5BTHID8SDP_taskEv+0x156>
 80123c0:	2b0a      	cmp	r3, #10
 80123c2:	d002      	beq.n	80123ca <_ZN5BTHID8SDP_taskEv+0x22>
 80123c4:	2b0b      	cmp	r3, #11
 80123c6:	d068      	beq.n	801249a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 80123c8:	e099      	b.n	80124fe <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	691b      	ldr	r3, [r3, #16]
 80123ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d041      	beq.n	801245a <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	691b      	ldr	r3, [r3, #16]
 80123da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6898      	ldr	r0, [r3, #8]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	8999      	ldrh	r1, [r3, #12]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	7d1a      	ldrb	r2, [r3, #20]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	331b      	adds	r3, #27
 80123f8:	2501      	movs	r5, #1
 80123fa:	9501      	str	r5, [sp, #4]
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	4623      	mov	r3, r4
 8012400:	f7fe fc2b 	bl	8010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012404:	2001      	movs	r0, #1
 8012406:	f7f1 fa95 	bl	8003934 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6898      	ldr	r0, [r3, #8]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	8999      	ldrh	r1, [r3, #12]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	7d1a      	ldrb	r2, [r3, #20]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	331b      	adds	r3, #27
 8012420:	2500      	movs	r5, #0
 8012422:	9501      	str	r5, [sp, #4]
 8012424:	9300      	str	r3, [sp, #0]
 8012426:	4623      	mov	r3, r4
 8012428:	f7fe fc17 	bl	8010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	7d1b      	ldrb	r3, [r3, #20]
 8012430:	3301      	adds	r3, #1
 8012432:	b2da      	uxtb	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012438:	2001      	movs	r0, #1
 801243a:	f7f1 fa7b 	bl	8003934 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6898      	ldr	r0, [r3, #8]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	8999      	ldrh	r1, [r3, #12]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	7d1a      	ldrb	r2, [r3, #20]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	331b      	adds	r3, #27
 801244e:	f7fe fc51 	bl	8010cf4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	220b      	movs	r2, #11
 8012456:	769a      	strb	r2, [r3, #26]
                        break;
 8012458:	e04c      	b.n	80124f4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	691b      	ldr	r3, [r3, #16]
 801245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012462:	2b00      	cmp	r3, #0
 8012464:	d046      	beq.n	80124f4 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	691b      	ldr	r3, [r3, #16]
 801246a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2200      	movs	r2, #0
 8012476:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	6898      	ldr	r0, [r3, #8]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	8999      	ldrh	r1, [r3, #12]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	7d1a      	ldrb	r2, [r3, #20]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	331b      	adds	r3, #27
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	4623      	mov	r3, r4
 8012494:	f7fe fd09 	bl	8010eaa <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8012498:	e02c      	b.n	80124f4 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	691b      	ldr	r3, [r3, #16]
 801249e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d028      	beq.n	80124f8 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	691b      	ldr	r3, [r3, #16]
 80124aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2201      	movs	r2, #1
 80124b6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	220a      	movs	r2, #10
 80124be:	769a      	strb	r2, [r3, #26]
                        break;
 80124c0:	e01a      	b.n	80124f8 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d016      	beq.n	80124fc <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	689a      	ldr	r2, [r3, #8]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	899b      	ldrh	r3, [r3, #12]
 80124d6:	4619      	mov	r1, r3
 80124d8:	4610      	mov	r0, r2
 80124da:	f7fe fa92 	bl	8010a02 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124e4:	819a      	strh	r2, [r3, #12]
                                Reset();
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	3308      	adds	r3, #8
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	4798      	blx	r3
                        break;
 80124f2:	e003      	b.n	80124fc <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 80124f4:	bf00      	nop
 80124f6:	e002      	b.n	80124fe <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80124f8:	bf00      	nop
 80124fa:	e000      	b.n	80124fe <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 80124fc:	bf00      	nop
}
 80124fe:	bf00      	nop
 8012500:	3708      	adds	r7, #8
 8012502:	46bd      	mov	sp, r7
 8012504:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012508 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 8012508:	b5b0      	push	{r4, r5, r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af02      	add	r7, sp, #8
 801250e:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8012516:	3b01      	subs	r3, #1
 8012518:	2b08      	cmp	r3, #8
 801251a:	f200 812c 	bhi.w	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 801251e:	a201      	add	r2, pc, #4	; (adr r2, 8012524 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 8012520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012524:	08012755 	.word	0x08012755
 8012528:	080125ef 	.word	0x080125ef
 801252c:	08012627 	.word	0x08012627
 8012530:	08012549 	.word	0x08012549
 8012534:	08012721 	.word	0x08012721
 8012538:	08012567 	.word	0x08012567
 801253c:	0801266f 	.word	0x0801266f
 8012540:	080126a5 	.word	0x080126a5
 8012544:	080126e1 	.word	0x080126e1
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	691b      	ldr	r3, [r3, #16]
 801254c:	f003 0302 	and.w	r3, r3, #2
 8012550:	2b00      	cmp	r3, #0
 8012552:	f000 8101 	beq.w	8012758 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 f9f9 	bl	801294e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2206      	movs	r2, #6
 8012560:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012564:	e0f8      	b.n	8012758 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	691b      	ldr	r3, [r3, #16]
 801256a:	f003 0310 	and.w	r3, r3, #16
 801256e:	2b00      	cmp	r3, #0
 8012570:	f000 80f4 	beq.w	801275c <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6898      	ldr	r0, [r3, #8]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	8999      	ldrh	r1, [r3, #12]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	7d1a      	ldrb	r2, [r3, #20]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	3318      	adds	r3, #24
 801258a:	2501      	movs	r5, #1
 801258c:	9501      	str	r5, [sp, #4]
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	4623      	mov	r3, r4
 8012592:	f7fe fb62 	bl	8010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012596:	2001      	movs	r0, #1
 8012598:	f7f1 f9cc 	bl	8003934 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6898      	ldr	r0, [r3, #8]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	8999      	ldrh	r1, [r3, #12]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	7d1a      	ldrb	r2, [r3, #20]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	3318      	adds	r3, #24
 80125b2:	2500      	movs	r5, #0
 80125b4:	9501      	str	r5, [sp, #4]
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	4623      	mov	r3, r4
 80125ba:	f7fe fb4e 	bl	8010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	7d1b      	ldrb	r3, [r3, #20]
 80125c2:	3301      	adds	r3, #1
 80125c4:	b2da      	uxtb	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80125ca:	2001      	movs	r0, #1
 80125cc:	f7f1 f9b2 	bl	8003934 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6898      	ldr	r0, [r3, #8]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	8999      	ldrh	r1, [r3, #12]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	7d1a      	ldrb	r2, [r3, #20]
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	3318      	adds	r3, #24
 80125e0:	f7fe fb88 	bl	8010cf4 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2208      	movs	r2, #8
 80125e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80125ec:	e0b6      	b.n	801275c <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	691b      	ldr	r3, [r3, #16]
 80125f2:	f003 0304 	and.w	r3, r3, #4
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f000 80b2 	beq.w	8012760 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	7d1b      	ldrb	r3, [r3, #20]
 8012600:	3301      	adds	r3, #1
 8012602:	b2da      	uxtb	r2, r3
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6898      	ldr	r0, [r3, #8]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	8999      	ldrh	r1, [r3, #12]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	7d1a      	ldrb	r2, [r3, #20]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	3316      	adds	r3, #22
 8012618:	f7fe fb6c 	bl	8010cf4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	2203      	movs	r2, #3
 8012620:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012624:	e09c      	b.n	8012760 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	691b      	ldr	r3, [r3, #16]
 801262a:	f003 0302 	and.w	r3, r3, #2
 801262e:	2b00      	cmp	r3, #0
 8012630:	f000 8098 	beq.w	8012764 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 f98a 	bl	801294e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 801263a:	2001      	movs	r0, #1
 801263c:	f7f1 f97a 	bl	8003934 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	7d1b      	ldrb	r3, [r3, #20]
 8012644:	3301      	adds	r3, #1
 8012646:	b2da      	uxtb	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6898      	ldr	r0, [r3, #8]
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	8999      	ldrh	r1, [r3, #12]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	7d1a      	ldrb	r2, [r3, #20]
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	336d      	adds	r3, #109	; 0x6d
 801265c:	2413      	movs	r4, #19
 801265e:	9400      	str	r4, [sp, #0]
 8012660:	f7fe fabd 	bl	8010bde <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2207      	movs	r2, #7
 8012668:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801266c:	e07a      	b.n	8012764 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	691b      	ldr	r3, [r3, #16]
 8012672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012676:	2b00      	cmp	r3, #0
 8012678:	d076      	beq.n	8012768 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	7d1b      	ldrb	r3, [r3, #20]
 801267e:	3301      	adds	r3, #1
 8012680:	b2da      	uxtb	r2, r3
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6898      	ldr	r0, [r3, #8]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	8999      	ldrh	r1, [r3, #12]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	7d1a      	ldrb	r2, [r3, #20]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	3318      	adds	r3, #24
 8012696:	f7fe fb2d 	bl	8010cf4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2208      	movs	r2, #8
 801269e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80126a2:	e061      	b.n	8012768 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	691b      	ldr	r3, [r3, #16]
 80126a8:	f003 0320 	and.w	r3, r3, #32
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d05d      	beq.n	801276c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	689b      	ldr	r3, [r3, #8]
 80126b4:	2200      	movs	r2, #0
 80126b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2201      	movs	r2, #1
 80126c8:	755a      	strb	r2, [r3, #21]
                                onInit();
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	3310      	adds	r3, #16
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2201      	movs	r2, #1
 80126da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80126de:	e045      	b.n	801276c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	691b      	ldr	r3, [r3, #16]
 80126e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d041      	beq.n	8012770 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	7d1b      	ldrb	r3, [r3, #20]
 80126f0:	3301      	adds	r3, #1
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6898      	ldr	r0, [r3, #8]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	8999      	ldrh	r1, [r3, #12]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	7d1a      	ldrb	r2, [r3, #20]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f103 0416 	add.w	r4, r3, #22
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	336b      	adds	r3, #107	; 0x6b
 801270e:	9300      	str	r3, [sp, #0]
 8012710:	4623      	mov	r3, r4
 8012712:	f7fe fb8d 	bl	8010e30 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2205      	movs	r2, #5
 801271a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801271e:	e027      	b.n	8012770 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	691b      	ldr	r3, [r3, #16]
 8012724:	f003 0308 	and.w	r3, r3, #8
 8012728:	2b00      	cmp	r3, #0
 801272a:	d023      	beq.n	8012774 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	689a      	ldr	r2, [r3, #8]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	899b      	ldrh	r3, [r3, #12]
 8012734:	4619      	mov	r1, r3
 8012736:	4610      	mov	r0, r2
 8012738:	f7fe f963 	bl	8010a02 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012742:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2200      	movs	r2, #0
 801274e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8012752:	e00f      	b.n	8012774 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 8012754:	bf00      	nop
 8012756:	e00e      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8012758:	bf00      	nop
 801275a:	e00c      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801275c:	bf00      	nop
 801275e:	e00a      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8012760:	bf00      	nop
 8012762:	e008      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8012764:	bf00      	nop
 8012766:	e006      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8012768:	bf00      	nop
 801276a:	e004      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801276c:	bf00      	nop
 801276e:	e002      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8012770:	bf00      	nop
 8012772:	e000      	b.n	8012776 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8012774:	bf00      	nop
        }
}
 8012776:	bf00      	nop
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bdb0      	pop	{r4, r5, r7, pc}
 801277e:	bf00      	nop

08012780 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8012780:	b5b0      	push	{r4, r5, r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af02      	add	r7, sp, #8
 8012786:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801278e:	2b00      	cmp	r3, #0
 8012790:	f040 8084 	bne.w	801289c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	689b      	ldr	r3, [r3, #8]
 8012798:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801279c:	2b00      	cmp	r3, #0
 801279e:	d03a      	beq.n	8012816 <_ZN5BTHID3RunEv+0x96>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	689b      	ldr	r3, [r3, #8]
 80127a4:	7a5b      	ldrb	r3, [r3, #9]
 80127a6:	f083 0301 	eor.w	r3, r3, #1
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d032      	beq.n	8012816 <_ZN5BTHID3RunEv+0x96>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	7d5b      	ldrb	r3, [r3, #21]
 80127b4:	f083 0301 	eor.w	r3, r3, #1
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d02b      	beq.n	8012816 <_ZN5BTHID3RunEv+0x96>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80127c4:	f083 0301 	eor.w	r3, r3, #1
 80127c8:	b2db      	uxtb	r3, r3
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d023      	beq.n	8012816 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	2201      	movs	r2, #1
 80127d4:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2201      	movs	r2, #1
 80127da:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	8b5a      	ldrh	r2, [r3, #26]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2200      	movs	r2, #0
 80127ec:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6898      	ldr	r0, [r3, #8]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	8999      	ldrh	r1, [r3, #12]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	7d1a      	ldrb	r2, [r3, #20]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	336b      	adds	r3, #107	; 0x6b
 8012804:	2411      	movs	r4, #17
 8012806:	9400      	str	r4, [sp, #0]
 8012808:	f7fe f9e9 	bl	8010bde <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2202      	movs	r2, #2
 8012810:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 8012814:	e041      	b.n	801289a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	691b      	ldr	r3, [r3, #16]
 801281a:	f003 0301 	and.w	r3, r3, #1
 801281e:	2b00      	cmp	r3, #0
 8012820:	d03b      	beq.n	801289a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6898      	ldr	r0, [r3, #8]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	8999      	ldrh	r1, [r3, #12]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	7d1a      	ldrb	r2, [r3, #20]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	3316      	adds	r3, #22
 8012838:	2501      	movs	r5, #1
 801283a:	9501      	str	r5, [sp, #4]
 801283c:	9300      	str	r3, [sp, #0]
 801283e:	4623      	mov	r3, r4
 8012840:	f7fe fa0b 	bl	8010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8012844:	2001      	movs	r0, #1
 8012846:	f7f1 f875 	bl	8003934 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6898      	ldr	r0, [r3, #8]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	8999      	ldrh	r1, [r3, #12]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	7d1a      	ldrb	r2, [r3, #20]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3316      	adds	r3, #22
 8012860:	2500      	movs	r5, #0
 8012862:	9501      	str	r5, [sp, #4]
 8012864:	9300      	str	r3, [sp, #0]
 8012866:	4623      	mov	r3, r4
 8012868:	f7fe f9f7 	bl	8010c5a <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	7d1b      	ldrb	r3, [r3, #20]
 8012870:	3301      	adds	r3, #1
 8012872:	b2da      	uxtb	r2, r3
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8012878:	2001      	movs	r0, #1
 801287a:	f7f1 f85b 	bl	8003934 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6898      	ldr	r0, [r3, #8]
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	8999      	ldrh	r1, [r3, #12]
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	7d1a      	ldrb	r2, [r3, #20]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	3316      	adds	r3, #22
 801288e:	f7fe fa31 	bl	8010cf4 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2204      	movs	r2, #4
 8012896:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801289a:	bf00      	nop
        }
}
 801289c:	bf00      	nop
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bdb0      	pop	{r4, r5, r7, pc}

080128a4 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 80128a4:	b590      	push	{r4, r7, lr}
 80128a6:	b087      	sub	sp, #28
 80128a8:	af02      	add	r7, sp, #8
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	4613      	mov	r3, r2
 80128b0:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6898      	ldr	r0, [r3, #8]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	8999      	ldrh	r1, [r3, #12]
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	7edb      	ldrb	r3, [r3, #27]
 80128be:	68fa      	ldr	r2, [r7, #12]
 80128c0:	7f12      	ldrb	r2, [r2, #28]
 80128c2:	79fc      	ldrb	r4, [r7, #7]
 80128c4:	9201      	str	r2, [sp, #4]
 80128c6:	9300      	str	r3, [sp, #0]
 80128c8:	4623      	mov	r3, r4
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	f7fe f8f8 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80128d0:	bf00      	nop
 80128d2:	3714      	adds	r7, #20
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd90      	pop	{r4, r7, pc}

080128d8 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	460b      	mov	r3, r1
 80128e2:	70fb      	strb	r3, [r7, #3]
 80128e4:	4613      	mov	r3, r2
 80128e6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2207      	movs	r2, #7
 80128ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	78fa      	ldrb	r2, [r7, #3]
 80128f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	78ba      	ldrb	r2, [r7, #2]
 80128fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2200      	movs	r2, #0
 8012904:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2205      	movs	r2, #5
 801290c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2200      	movs	r2, #0
 8012914:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2202      	movs	r2, #2
 801291c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2235      	movs	r2, #53	; 0x35
 8012924:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2200      	movs	r2, #0
 801292c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	3328      	adds	r3, #40	; 0x28
 801293c:	220a      	movs	r2, #10
 801293e:	4619      	mov	r1, r3
 8012940:	6878      	ldr	r0, [r7, #4]
 8012942:	f7ff ffaf 	bl	80128a4 <_ZN5BTHID11SDP_CommandEPhh>
}
 8012946:	bf00      	nop
 8012948:	3708      	adds	r7, #8
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 801294e:	b590      	push	{r4, r7, lr}
 8012950:	b087      	sub	sp, #28
 8012952:	af02      	add	r7, sp, #8
 8012954:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801295c:	2b00      	cmp	r3, #0
 801295e:	d008      	beq.n	8012972 <_ZN5BTHID11setProtocolEv+0x24>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012966:	2b01      	cmp	r3, #1
 8012968:	d003      	beq.n	8012972 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012978:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 801297c:	b2db      	uxtb	r3, r3
 801297e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6898      	ldr	r0, [r3, #8]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	8999      	ldrh	r1, [r3, #12]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	7d9b      	ldrb	r3, [r3, #22]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	7dd2      	ldrb	r2, [r2, #23]
 8012990:	f107 040f 	add.w	r4, r7, #15
 8012994:	9201      	str	r2, [sp, #4]
 8012996:	9300      	str	r3, [sp, #0]
 8012998:	2301      	movs	r3, #1
 801299a:	4622      	mov	r2, r4
 801299c:	f7fe f890 	bl	8010ac0 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 80129a0:	bf00      	nop
 80129a2:	3714      	adds	r7, #20
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd90      	pop	{r4, r7, pc}

080129a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 80129a8:	b480      	push	{r7}
 80129aa:	b083      	sub	sp, #12
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	460b      	mov	r3, r1
 80129b2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 80129b4:	78fb      	ldrb	r3, [r7, #3]
 80129b6:	2b03      	cmp	r3, #3
 80129b8:	d86e      	bhi.n	8012a98 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 80129ba:	a201      	add	r2, pc, #4	; (adr r2, 80129c0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 80129bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c0:	080129d1 	.word	0x080129d1
 80129c4:	08012a03 	.word	0x08012a03
 80129c8:	08012a35 	.word	0x08012a35
 80129cc:	08012a67 	.word	0x08012a67
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7a1b      	ldrb	r3, [r3, #8]
 80129d4:	f003 030f 	and.w	r3, r3, #15
 80129d8:	b2db      	uxtb	r3, r3
 80129da:	2b07      	cmp	r3, #7
 80129dc:	d00d      	beq.n	80129fa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	7a1b      	ldrb	r3, [r3, #8]
 80129e2:	f003 030f 	and.w	r3, r3, #15
 80129e6:	b2db      	uxtb	r3, r3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d006      	beq.n	80129fa <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7a1b      	ldrb	r3, [r3, #8]
 80129f0:	f003 030f 	and.w	r3, r3, #15
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d101      	bne.n	80129fe <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 80129fa:	2301      	movs	r3, #1
 80129fc:	e04d      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 80129fe:	2300      	movs	r3, #0
 8012a00:	e04b      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	7a1b      	ldrb	r3, [r3, #8]
 8012a06:	f003 030f 	and.w	r3, r3, #15
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d00d      	beq.n	8012a2c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	7a1b      	ldrb	r3, [r3, #8]
 8012a14:	f003 030f 	and.w	r3, r3, #15
 8012a18:	b2db      	uxtb	r3, r3
 8012a1a:	2b02      	cmp	r3, #2
 8012a1c:	d006      	beq.n	8012a2c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	7a1b      	ldrb	r3, [r3, #8]
 8012a22:	f003 030f 	and.w	r3, r3, #15
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	2b03      	cmp	r3, #3
 8012a2a:	d101      	bne.n	8012a30 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e034      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8012a30:	2300      	movs	r3, #0
 8012a32:	e032      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	7a1b      	ldrb	r3, [r3, #8]
 8012a38:	f003 030f 	and.w	r3, r3, #15
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b03      	cmp	r3, #3
 8012a40:	d00d      	beq.n	8012a5e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	7a1b      	ldrb	r3, [r3, #8]
 8012a46:	f003 030f 	and.w	r3, r3, #15
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	2b04      	cmp	r3, #4
 8012a4e:	d006      	beq.n	8012a5e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	7a1b      	ldrb	r3, [r3, #8]
 8012a54:	f003 030f 	and.w	r3, r3, #15
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	2b05      	cmp	r3, #5
 8012a5c:	d101      	bne.n	8012a62 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	e01b      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8012a62:	2300      	movs	r3, #0
 8012a64:	e019      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	7a1b      	ldrb	r3, [r3, #8]
 8012a6a:	f003 030f 	and.w	r3, r3, #15
 8012a6e:	b2db      	uxtb	r3, r3
 8012a70:	2b05      	cmp	r3, #5
 8012a72:	d00d      	beq.n	8012a90 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	7a1b      	ldrb	r3, [r3, #8]
 8012a78:	f003 030f 	and.w	r3, r3, #15
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	2b06      	cmp	r3, #6
 8012a80:	d006      	beq.n	8012a90 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	7a1b      	ldrb	r3, [r3, #8]
 8012a86:	f003 030f 	and.w	r3, r3, #15
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b07      	cmp	r3, #7
 8012a8e:	d101      	bne.n	8012a94 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8012a90:	2301      	movs	r3, #1
 8012a92:	e002      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8012a94:	2300      	movs	r3, #0
 8012a96:	e000      	b.n	8012a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8012a98:	2300      	movs	r3, #0
        }
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	370c      	adds	r7, #12
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop

08012aa8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	460b      	mov	r3, r1
 8012ab2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8012ab4:	78fb      	ldrb	r3, [r7, #3]
 8012ab6:	2b03      	cmp	r3, #3
 8012ab8:	d806      	bhi.n	8012ac8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 8012aba:	78fb      	ldrb	r3, [r7, #3]
 8012abc:	4619      	mov	r1, r3
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f7ff ff72 	bl	80129a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	e011      	b.n	8012aec <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	689b      	ldr	r3, [r3, #8]
 8012acc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	78fb      	ldrb	r3, [r7, #3]
 8012ad4:	4a07      	ldr	r2, [pc, #28]	; (8012af4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8012ad6:	4413      	add	r3, r2
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	fa21 f303 	lsr.w	r3, r1, r3
 8012ade:	f003 0301 	and.w	r3, r3, #1
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	bf14      	ite	ne
 8012ae6:	2301      	movne	r3, #1
 8012ae8:	2300      	moveq	r3, #0
 8012aea:	b2db      	uxtb	r3, r3
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}
 8012af4:	0801956c 	.word	0x0801956c

08012af8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8012af8:	b480      	push	{r7}
 8012afa:	b085      	sub	sp, #20
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	460b      	mov	r3, r1
 8012b02:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8012b04:	78fb      	ldrb	r3, [r7, #3]
 8012b06:	4a1b      	ldr	r2, [pc, #108]	; (8012b74 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8012b08:	4413      	add	r3, r2
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	2301      	movs	r3, #1
 8012b10:	4093      	lsls	r3, r2
 8012b12:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012b1e:	021b      	lsls	r3, r3, #8
 8012b20:	4313      	orrs	r3, r2
 8012b22:	461a      	mov	r2, r3
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	4013      	ands	r3, r2
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	bf14      	ite	ne
 8012b2c:	2301      	movne	r3, #1
 8012b2e:	2300      	moveq	r3, #0
 8012b30:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8012b38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8012b3c:	021b      	lsls	r3, r3, #8
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	461a      	mov	r2, r3
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	43db      	mvns	r3, r3
 8012b46:	4013      	ands	r3, r2
 8012b48:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	b2d1      	uxtb	r1, r2
 8012b50:	2000      	movs	r0, #0
 8012b52:	4301      	orrs	r1, r0
 8012b54:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8012b58:	0a12      	lsrs	r2, r2, #8
 8012b5a:	b292      	uxth	r2, r2
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	430a      	orrs	r2, r1
 8012b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8012b64:	7afb      	ldrb	r3, [r7, #11]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3714      	adds	r7, #20
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b70:	4770      	bx	lr
 8012b72:	bf00      	nop
 8012b74:	0801956c 	.word	0x0801956c

08012b78 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	460b      	mov	r3, r1
 8012b82:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8012b84:	78fb      	ldrb	r3, [r7, #3]
 8012b86:	2b08      	cmp	r3, #8
 8012b88:	d102      	bne.n	8012b90 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	7adb      	ldrb	r3, [r3, #11]
 8012b8e:	e006      	b.n	8012b9e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8012b90:	78fb      	ldrb	r3, [r7, #3]
 8012b92:	2b09      	cmp	r3, #9
 8012b94:	d102      	bne.n	8012b9c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	7b1b      	ldrb	r3, [r3, #12]
 8012b9a:	e000      	b.n	8012b9e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8012b9c:	2300      	movs	r3, #0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	370c      	adds	r7, #12
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba8:	4770      	bx	lr

08012baa <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8012baa:	b480      	push	{r7}
 8012bac:	b083      	sub	sp, #12
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	6078      	str	r0, [r7, #4]
 8012bb2:	460b      	mov	r3, r1
 8012bb4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8012bb6:	78fb      	ldrb	r3, [r7, #3]
 8012bb8:	687a      	ldr	r2, [r7, #4]
 8012bba:	4413      	add	r3, r2
 8012bbc:	791b      	ldrb	r3, [r3, #4]
}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	370c      	adds	r7, #12
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr

08012bca <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8012bca:	b580      	push	{r7, lr}
 8012bcc:	b086      	sub	sp, #24
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	60f8      	str	r0, [r7, #12]
 8012bd2:	460b      	mov	r3, r1
 8012bd4:	607a      	str	r2, [r7, #4]
 8012bd6:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8012bd8:	7afb      	ldrb	r3, [r7, #11]
 8012bda:	2b01      	cmp	r3, #1
 8012bdc:	f240 80a6 	bls.w	8012d2c <_ZN9PS4Parser5ParseEhPh+0x162>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	f000 80a2 	beq.w	8012d2c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	781b      	ldrb	r3, [r3, #0]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d10e      	bne.n	8012c0e <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	1d18      	adds	r0, r3, #4
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	1c59      	adds	r1, r3, #1
 8012bf8:	7afb      	ldrb	r3, [r7, #11]
 8012bfa:	3b01      	subs	r3, #1
 8012bfc:	b2db      	uxtb	r3, r3
 8012bfe:	2b3c      	cmp	r3, #60	; 0x3c
 8012c00:	bf28      	it	cs
 8012c02:	233c      	movcs	r3, #60	; 0x3c
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	461a      	mov	r2, r3
 8012c08:	f002 fede 	bl	80159c8 <memcpy>
 8012c0c:	e016      	b.n	8012c3c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	2b11      	cmp	r3, #17
 8012c14:	f040 8098 	bne.w	8012d48 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8012c18:	7afb      	ldrb	r3, [r7, #11]
 8012c1a:	2b03      	cmp	r3, #3
 8012c1c:	f240 8096 	bls.w	8012d4c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	1d18      	adds	r0, r3, #4
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	1cd9      	adds	r1, r3, #3
 8012c28:	7afb      	ldrb	r3, [r7, #11]
 8012c2a:	3b03      	subs	r3, #3
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	2b3c      	cmp	r3, #60	; 0x3c
 8012c30:	bf28      	it	cs
 8012c32:	233c      	movcs	r3, #60	; 0x3c
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	461a      	mov	r2, r3
 8012c38:	f002 fec6 	bl	80159c8 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	689b      	ldr	r3, [r3, #8]
 8012c40:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c48:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d06d      	beq.n	8012d2c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012c58:	461a      	mov	r2, r3
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c5e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8012c62:	43db      	mvns	r3, r3
 8012c64:	4013      	ands	r3, r2
 8012c66:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	b2d1      	uxtb	r1, r2
 8012c6e:	2000      	movs	r0, #0
 8012c70:	4301      	orrs	r1, r0
 8012c72:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8012c76:	0a12      	lsrs	r2, r2, #8
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	430a      	orrs	r2, r1
 8012c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	689b      	ldr	r3, [r3, #8]
 8012c86:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8012c8a:	68fa      	ldr	r2, [r7, #12]
 8012c8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012c8e:	f361 0317 	bfi	r3, r1, #0, #24
 8012c92:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8012c94:	2300      	movs	r3, #0
 8012c96:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8012c98:	2100      	movs	r1, #0
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff fe84 	bl	80129a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d003      	beq.n	8012cae <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8012ca6:	7dfb      	ldrb	r3, [r7, #23]
 8012ca8:	f043 0301 	orr.w	r3, r3, #1
 8012cac:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8012cae:	2101      	movs	r1, #1
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f7ff fe79 	bl	80129a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d003      	beq.n	8012cc4 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	f043 0302 	orr.w	r3, r3, #2
 8012cc2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8012cc4:	2102      	movs	r1, #2
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f7ff fe6e 	bl	80129a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d003      	beq.n	8012cda <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8012cd2:	7dfb      	ldrb	r3, [r7, #23]
 8012cd4:	f043 0304 	orr.w	r3, r3, #4
 8012cd8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8012cda:	2103      	movs	r1, #3
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f7ff fe63 	bl	80129a8 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d003      	beq.n	8012cf0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	f043 0308 	orr.w	r3, r3, #8
 8012cee:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012cf6:	7dfa      	ldrb	r2, [r7, #23]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d017      	beq.n	8012d2c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012d02:	b25b      	sxtb	r3, r3
 8012d04:	43db      	mvns	r3, r3
 8012d06:	b25a      	sxtb	r2, r3
 8012d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d0c:	4013      	ands	r3, r2
 8012d0e:	b25b      	sxtb	r3, r3
 8012d10:	f003 030f 	and.w	r3, r3, #15
 8012d14:	b2d9      	uxtb	r1, r3
 8012d16:	68fa      	ldr	r2, [r7, #12]
 8012d18:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8012d1c:	f361 0303 	bfi	r3, r1, #0, #4
 8012d20:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	7dfa      	ldrb	r2, [r7, #23]
 8012d28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00b      	beq.n	8012d4e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	3246      	adds	r2, #70	; 0x46
 8012d40:	4611      	mov	r1, r2
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	4798      	blx	r3
 8012d46:	e002      	b.n	8012d4e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8012d48:	bf00      	nop
 8012d4a:	e000      	b.n	8012d4e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8012d4c:	bf00      	nop
}
 8012d4e:	3718      	adds	r7, #24
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8012d54:	b480      	push	{r7}
 8012d56:	b085      	sub	sp, #20
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	73fb      	strb	r3, [r7, #15]
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	2b03      	cmp	r3, #3
 8012d64:	d808      	bhi.n	8012d78 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8012d66:	7bfb      	ldrb	r3, [r7, #15]
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	227f      	movs	r2, #127	; 0x7f
 8012d6e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8012d70:	7bfb      	ldrb	r3, [r7, #15]
 8012d72:	3301      	adds	r3, #1
 8012d74:	73fb      	strb	r3, [r7, #15]
 8012d76:	e7f3      	b.n	8012d60 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	6893      	ldr	r3, [r2, #8]
 8012d7c:	f36f 0317 	bfc	r3, #0, #24
 8012d80:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012d86:	f36f 0317 	bfc	r3, #0, #24
 8012d8a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	73fb      	strb	r3, [r7, #15]
 8012d90:	7bfb      	ldrb	r3, [r7, #15]
 8012d92:	2b01      	cmp	r3, #1
 8012d94:	d808      	bhi.n	8012da8 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8012d96:	7bfb      	ldrb	r3, [r7, #15]
 8012d98:	687a      	ldr	r2, [r7, #4]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8012da0:	7bfb      	ldrb	r3, [r7, #15]
 8012da2:	3301      	adds	r3, #1
 8012da4:	73fb      	strb	r3, [r7, #15]
 8012da6:	e7f3      	b.n	8012d90 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8012da8:	2300      	movs	r3, #0
 8012daa:	73fb      	strb	r3, [r7, #15]
 8012dac:	7bfb      	ldrb	r3, [r7, #15]
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	d81b      	bhi.n	8012dea <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8012db2:	2300      	movs	r3, #0
 8012db4:	73bb      	strb	r3, [r7, #14]
 8012db6:	7bbb      	ldrb	r3, [r7, #14]
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d812      	bhi.n	8012de2 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8012dbc:	7bfa      	ldrb	r2, [r7, #15]
 8012dbe:	7bbb      	ldrb	r3, [r7, #14]
 8012dc0:	6879      	ldr	r1, [r7, #4]
 8012dc2:	0098      	lsls	r0, r3, #2
 8012dc4:	4613      	mov	r3, r2
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	4413      	add	r3, r2
 8012dca:	4403      	add	r3, r0
 8012dcc:	440b      	add	r3, r1
 8012dce:	f103 0220 	add.w	r2, r3, #32
 8012dd2:	7993      	ldrb	r3, [r2, #6]
 8012dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dd8:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8012dda:	7bbb      	ldrb	r3, [r7, #14]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	73bb      	strb	r3, [r7, #14]
 8012de0:	e7e9      	b.n	8012db6 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8012de2:	7bfb      	ldrb	r3, [r7, #15]
 8012de4:	3301      	adds	r3, #1
 8012de6:	73fb      	strb	r3, [r7, #15]
 8012de8:	e7e0      	b.n	8012dac <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	7a13      	ldrb	r3, [r2, #8]
 8012dee:	2108      	movs	r1, #8
 8012df0:	f361 0303 	bfi	r3, r1, #0, #4
 8012df4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8012dfc:	2108      	movs	r1, #8
 8012dfe:	f361 0303 	bfi	r3, r1, #0, #4
 8012e02:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8012e0c:	f36f 0303 	bfc	r3, #0, #4
 8012e10:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2200      	movs	r2, #0
 8012e18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2200      	movs	r2, #0
 8012e34:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2200      	movs	r2, #0
 8012e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2200      	movs	r2, #0
 8012e68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8012e6c:	bf00      	nop
 8012e6e:	3714      	adds	r7, #20
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr

08012e78 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	2180      	movs	r1, #128	; 0x80
 8012e7e:	4803      	ldr	r0, [pc, #12]	; (8012e8c <_ZN2P95IsSetEv+0x14>)
 8012e80:	f7f0 fff2 	bl	8003e68 <HAL_GPIO_ReadPin>
 8012e84:	4603      	mov	r3, r0
 8012e86:	4618      	mov	r0, r3
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	40020800 	.word	0x40020800

08012e90 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f001 f9bb 	bl	8014214 <_ZN8MAX3421eI3P102P9EC1Ev>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f001 f9d3 	bl	801424c <_ZN15AddressPoolImplILh16EEC1Ev>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8012eae:	4b05      	ldr	r3, [pc, #20]	; (8012ec4 <_ZN3USBC1Ev+0x34>)
 8012eb0:	2211      	movs	r2, #17
 8012eb2:	701a      	strb	r2, [r3, #0]
        init();
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 f807 	bl	8012ec8 <_ZN3USB4initEv>
}
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3708      	adds	r7, #8
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	20005415 	.word	0x20005415

08012ec8 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8012ed8:	bf00      	nop
 8012eda:	370c      	adds	r7, #12
 8012edc:	46bd      	mov	sp, r7
 8012ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee2:	4770      	bx	lr

08012ee4 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b086      	sub	sp, #24
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	460b      	mov	r3, r1
 8012eee:	70fb      	strb	r3, [r7, #3]
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	78fa      	ldrb	r2, [r7, #3]
 8012ef8:	4611      	mov	r1, r2
 8012efa:	4618      	mov	r0, r3
 8012efc:	f001 f9e0 	bl	80142c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012f00:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d003      	beq.n	8012f10 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d101      	bne.n	8012f14 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8012f10:	2300      	movs	r3, #0
 8012f12:	e018      	b.n	8012f46 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	74fb      	strb	r3, [r7, #19]
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	795b      	ldrb	r3, [r3, #5]
 8012f22:	7cfa      	ldrb	r2, [r7, #19]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d20d      	bcs.n	8012f44 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	78ba      	ldrb	r2, [r7, #2]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d101      	bne.n	8012f36 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	e007      	b.n	8012f46 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	3303      	adds	r3, #3
 8012f3a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8012f3c:	7cfb      	ldrb	r3, [r7, #19]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	74fb      	strb	r3, [r7, #19]
 8012f42:	e7ec      	b.n	8012f1e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8012f44:	2300      	movs	r3, #0
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3718      	adds	r7, #24
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}

08012f4e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8012f4e:	b580      	push	{r7, lr}
 8012f50:	b086      	sub	sp, #24
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	60f8      	str	r0, [r7, #12]
 8012f56:	607b      	str	r3, [r7, #4]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	72fb      	strb	r3, [r7, #11]
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8012f66:	23d8      	movs	r3, #216	; 0xd8
 8012f68:	e015      	b.n	8012f96 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	7afa      	ldrb	r2, [r7, #11]
 8012f6e:	4611      	mov	r1, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f001 f9a5 	bl	80142c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012f76:	6178      	str	r0, [r7, #20]

        if(!p)
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d101      	bne.n	8012f82 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012f7e:	23d6      	movs	r3, #214	; 0xd6
 8012f80:	e009      	b.n	8012f96 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	7afa      	ldrb	r2, [r7, #11]
 8012f86:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	7aba      	ldrb	r2, [r7, #10]
 8012f92:	715a      	strb	r2, [r3, #5]

        return 0;
 8012f94:	2300      	movs	r3, #0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3718      	adds	r7, #24
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}

08012f9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 8012f9e:	b580      	push	{r7, lr}
 8012fa0:	b086      	sub	sp, #24
 8012fa2:	af00      	add	r7, sp, #0
 8012fa4:	60f8      	str	r0, [r7, #12]
 8012fa6:	607b      	str	r3, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	72fb      	strb	r3, [r7, #11]
 8012fac:	4613      	mov	r3, r2
 8012fae:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	7afa      	ldrb	r2, [r7, #11]
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f001 f982 	bl	80142c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012fbc:	6178      	str	r0, [r7, #20]

        if(!p)
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d101      	bne.n	8012fc8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012fc4:	23d6      	movs	r3, #214	; 0xd6
 8012fc6:	e04e      	b.n	8013066 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d101      	bne.n	8012fd4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8012fd0:	23d7      	movs	r3, #215	; 0xd7
 8012fd2:	e048      	b.n	8013066 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8012fd4:	7aba      	ldrb	r2, [r7, #10]
 8012fd6:	7afb      	ldrb	r3, [r7, #11]
 8012fd8:	4619      	mov	r1, r3
 8012fda:	68f8      	ldr	r0, [r7, #12]
 8012fdc:	f7ff ff82 	bl	8012ee4 <_ZN3USB14getEpInfoEntryEhh>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 8012fee:	23db      	movs	r3, #219	; 0xdb
 8012ff0:	e039      	b.n	8013066 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	789b      	ldrb	r3, [r3, #2]
 8012ff8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	2b0f      	cmp	r3, #15
 8013000:	bf28      	it	cs
 8013002:	230f      	movcs	r3, #15
 8013004:	b2db      	uxtb	r3, r3
 8013006:	461a      	mov	r2, r3
 8013008:	2301      	movs	r3, #1
 801300a:	4093      	lsls	r3, r2
 801300c:	b29a      	uxth	r2, r3
 801300e:	6a3b      	ldr	r3, [r7, #32]
 8013010:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 8013012:	6a3b      	ldr	r3, [r7, #32]
 8013014:	881b      	ldrh	r3, [r3, #0]
 8013016:	3b01      	subs	r3, #1
 8013018:	b29a      	uxth	r2, r3
 801301a:	6a3b      	ldr	r3, [r7, #32]
 801301c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 801301e:	7afb      	ldrb	r3, [r7, #11]
 8013020:	461a      	mov	r2, r3
 8013022:	21e0      	movs	r1, #224	; 0xe0
 8013024:	68f8      	ldr	r0, [r7, #12]
 8013026:	f7ef f9d1 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 801302a:	21d8      	movs	r1, #216	; 0xd8
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f7ef fa1f 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013032:	4603      	mov	r3, r0
 8013034:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	799b      	ldrb	r3, [r3, #6]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d009      	beq.n	8013052 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8013044:	7cfb      	ldrb	r3, [r7, #19]
 8013046:	4313      	orrs	r3, r2
 8013048:	b2db      	uxtb	r3, r3
 801304a:	f043 0302 	orr.w	r3, r3, #2
 801304e:	b2db      	uxtb	r3, r3
 8013050:	e003      	b.n	801305a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 8013052:	7cfb      	ldrb	r3, [r7, #19]
 8013054:	f023 0306 	bic.w	r3, r3, #6
 8013058:	b2db      	uxtb	r3, r3
 801305a:	461a      	mov	r2, r3
 801305c:	21d8      	movs	r1, #216	; 0xd8
 801305e:	68f8      	ldr	r0, [r7, #12]
 8013060:	f7ef f9b4 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3718      	adds	r7, #24
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}

0801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 801306e:	b590      	push	{r4, r7, lr}
 8013070:	b08b      	sub	sp, #44	; 0x2c
 8013072:	af02      	add	r7, sp, #8
 8013074:	6078      	str	r0, [r7, #4]
 8013076:	4608      	mov	r0, r1
 8013078:	4611      	mov	r1, r2
 801307a:	461a      	mov	r2, r3
 801307c:	4603      	mov	r3, r0
 801307e:	70fb      	strb	r3, [r7, #3]
 8013080:	460b      	mov	r3, r1
 8013082:	70bb      	strb	r3, [r7, #2]
 8013084:	4613      	mov	r3, r2
 8013086:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8013088:	2300      	movs	r3, #0
 801308a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 801308c:	2300      	movs	r3, #0
 801308e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8013090:	2300      	movs	r3, #0
 8013092:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013094:	f107 000c 	add.w	r0, r7, #12
 8013098:	78ba      	ldrb	r2, [r7, #2]
 801309a:	78f9      	ldrb	r1, [r7, #3]
 801309c:	f107 030a 	add.w	r3, r7, #10
 80130a0:	9300      	str	r3, [sp, #0]
 80130a2:	4603      	mov	r3, r0
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f7ff ff7a 	bl	8012f9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80130aa:	4603      	mov	r3, r0
 80130ac:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 80130ae:	7ffb      	ldrb	r3, [r7, #31]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d001      	beq.n	80130b8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 80130b4:	7ffb      	ldrb	r3, [r7, #31]
 80130b6:	e0ae      	b.n	8013216 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 80130b8:	787b      	ldrb	r3, [r7, #1]
 80130ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130be:	2b00      	cmp	r3, #0
 80130c0:	bfcc      	ite	gt
 80130c2:	2301      	movgt	r3, #1
 80130c4:	2300      	movle	r3, #0
 80130c6:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 80130c8:	787b      	ldrb	r3, [r7, #1]
 80130ca:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 80130cc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80130d0:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 80130d2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80130d6:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 80130d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80130dc:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 80130de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130e0:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 80130e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130e6:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 80130e8:	f107 0310 	add.w	r3, r7, #16
 80130ec:	2208      	movs	r2, #8
 80130ee:	2120      	movs	r1, #32
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f001 f90b 	bl	801430c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 80130f6:	897b      	ldrh	r3, [r7, #10]
 80130f8:	78ba      	ldrb	r2, [r7, #2]
 80130fa:	2110      	movs	r1, #16
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f000 faf2 	bl	80136e6 <_ZN3USB11dispatchPktEhht>
 8013102:	4603      	mov	r3, r0
 8013104:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 8013106:	7ffb      	ldrb	r3, [r7, #31]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d001      	beq.n	8013110 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 801310c:	7ffb      	ldrb	r3, [r7, #31]
 801310e:	e082      	b.n	8013216 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 8013110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013112:	2b00      	cmp	r3, #0
 8013114:	d072      	beq.n	80131fc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 8013116:	7efb      	ldrb	r3, [r7, #27]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d057      	beq.n	80131cc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 801311c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013120:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	7893      	ldrb	r3, [r2, #2]
 8013126:	f043 0302 	orr.w	r3, r3, #2
 801312a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 801312c:	8bbb      	ldrh	r3, [r7, #28]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d05f      	beq.n	80131f2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 8013132:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013136:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 8013138:	68f9      	ldr	r1, [r7, #12]
 801313a:	897a      	ldrh	r2, [r7, #10]
 801313c:	f107 0008 	add.w	r0, r7, #8
 8013140:	2300      	movs	r3, #0
 8013142:	9301      	str	r3, [sp, #4]
 8013144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013146:	9300      	str	r3, [sp, #0]
 8013148:	4603      	mov	r3, r0
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f8a6 	bl	801329c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8013150:	4603      	mov	r3, r0
 8013152:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 8013154:	7ffb      	ldrb	r3, [r7, #31]
 8013156:	2b06      	cmp	r3, #6
 8013158:	d114      	bne.n	8013184 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 801315a:	21f8      	movs	r1, #248	; 0xf8
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7ef f987 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013162:	4603      	mov	r3, r0
 8013164:	f003 0320 	and.w	r3, r3, #32
 8013168:	2b00      	cmp	r3, #0
 801316a:	bf0c      	ite	eq
 801316c:	2301      	moveq	r3, #1
 801316e:	2300      	movne	r3, #0
 8013170:	b2db      	uxtb	r3, r3
 8013172:	68fa      	ldr	r2, [r7, #12]
 8013174:	f003 0301 	and.w	r3, r3, #1
 8013178:	b2d9      	uxtb	r1, r3
 801317a:	7893      	ldrb	r3, [r2, #2]
 801317c:	f361 0341 	bfi	r3, r1, #1, #1
 8013180:	7093      	strb	r3, [r2, #2]
 8013182:	e7d3      	b.n	801312c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8013184:	7ffb      	ldrb	r3, [r7, #31]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 801318a:	7ffb      	ldrb	r3, [r7, #31]
 801318c:	e043      	b.n	8013216 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 801318e:	7ffb      	ldrb	r3, [r7, #31]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d111      	bne.n	80131b8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8013194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00e      	beq.n	80131b8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 801319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	681c      	ldr	r4, [r3, #0]
 80131a0:	8939      	ldrh	r1, [r7, #8]
 80131a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80131a6:	8bbb      	ldrh	r3, [r7, #28]
 80131a8:	1ad3      	subs	r3, r2, r3
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	833b      	strh	r3, [r7, #24]
 80131ae:	f107 0318 	add.w	r3, r7, #24
 80131b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80131b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80131b6:	47a0      	blx	r4

                                left -= read;
 80131b8:	893b      	ldrh	r3, [r7, #8]
 80131ba:	8bba      	ldrh	r2, [r7, #28]
 80131bc:	1ad3      	subs	r3, r2, r3
 80131be:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 80131c0:	893b      	ldrh	r3, [r7, #8]
 80131c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d812      	bhi.n	80131f0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 80131ca:	e7af      	b.n	801312c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 80131cc:	68fa      	ldr	r2, [r7, #12]
 80131ce:	7893      	ldrb	r3, [r2, #2]
 80131d0:	f043 0301 	orr.w	r3, r3, #1
 80131d4:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 80131d6:	68f9      	ldr	r1, [r7, #12]
 80131d8:	897a      	ldrh	r2, [r7, #10]
 80131da:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 80131de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131e0:	9300      	str	r3, [sp, #0]
 80131e2:	4603      	mov	r3, r0
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f000 f953 	bl	8013490 <_ZN3USB11OutTransferEP6EpInfottPh>
 80131ea:	4603      	mov	r3, r0
 80131ec:	77fb      	strb	r3, [r7, #31]
 80131ee:	e000      	b.n	80131f2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 80131f0:	bf00      	nop
                }
                if(rcode) //return error
 80131f2:	7ffb      	ldrb	r3, [r7, #31]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d001      	beq.n	80131fc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 80131f8:	7ffb      	ldrb	r3, [r7, #31]
 80131fa:	e00c      	b.n	8013216 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 80131fc:	7efb      	ldrb	r3, [r7, #27]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d001      	beq.n	8013206 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 8013202:	21a0      	movs	r1, #160	; 0xa0
 8013204:	e000      	b.n	8013208 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 8013206:	2180      	movs	r1, #128	; 0x80
 8013208:	897b      	ldrh	r3, [r7, #10]
 801320a:	78ba      	ldrb	r2, [r7, #2]
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f000 fa6a 	bl	80136e6 <_ZN3USB11dispatchPktEhht>
 8013212:	4603      	mov	r3, r0
 8013214:	bf00      	nop
}
 8013216:	4618      	mov	r0, r3
 8013218:	3724      	adds	r7, #36	; 0x24
 801321a:	46bd      	mov	sp, r7
 801321c:	bd90      	pop	{r4, r7, pc}

0801321e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801321e:	b580      	push	{r7, lr}
 8013220:	b08a      	sub	sp, #40	; 0x28
 8013222:	af02      	add	r7, sp, #8
 8013224:	60f8      	str	r0, [r7, #12]
 8013226:	607b      	str	r3, [r7, #4]
 8013228:	460b      	mov	r3, r1
 801322a:	72fb      	strb	r3, [r7, #11]
 801322c:	4613      	mov	r3, r2
 801322e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 8013230:	2300      	movs	r3, #0
 8013232:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 8013234:	2300      	movs	r3, #0
 8013236:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8013238:	f107 0018 	add.w	r0, r7, #24
 801323c:	7aba      	ldrb	r2, [r7, #10]
 801323e:	7af9      	ldrb	r1, [r7, #11]
 8013240:	f107 0316 	add.w	r3, r7, #22
 8013244:	9300      	str	r3, [sp, #0]
 8013246:	4603      	mov	r3, r0
 8013248:	68f8      	ldr	r0, [r7, #12]
 801324a:	f7ff fea8 	bl	8012f9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 801324e:	4603      	mov	r3, r0
 8013250:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 8013252:	7ffb      	ldrb	r3, [r7, #31]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d010      	beq.n	801327a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 8013258:	7ffb      	ldrb	r3, [r7, #31]
 801325a:	2181      	movs	r1, #129	; 0x81
 801325c:	4618      	mov	r0, r3
 801325e:	f001 f883 	bl	8014368 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8013262:	7afb      	ldrb	r3, [r7, #11]
 8013264:	2181      	movs	r1, #129	; 0x81
 8013266:	4618      	mov	r0, r3
 8013268:	f001 f87e 	bl	8014368 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 801326c:	7abb      	ldrb	r3, [r7, #10]
 801326e:	2181      	movs	r1, #129	; 0x81
 8013270:	4618      	mov	r0, r3
 8013272:	f001 f879 	bl	8014368 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8013276:	7ffb      	ldrb	r3, [r7, #31]
 8013278:	e00c      	b.n	8013294 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 801327a:	69b9      	ldr	r1, [r7, #24]
 801327c:	8afa      	ldrh	r2, [r7, #22]
 801327e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013282:	9301      	str	r3, [sp, #4]
 8013284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f000 f806 	bl	801329c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8013290:	4603      	mov	r3, r0
 8013292:	bf00      	nop
}
 8013294:	4618      	mov	r0, r3
 8013296:	3720      	adds	r7, #32
 8013298:	46bd      	mov	sp, r7
 801329a:	bd80      	pop	{r7, pc}

0801329c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	603b      	str	r3, [r7, #0]
 80132a8:	4613      	mov	r3, r2
 80132aa:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 80132ac:	2300      	movs	r3, #0
 80132ae:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	881b      	ldrh	r3, [r3, #0]
 80132b4:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	785b      	ldrb	r3, [r3, #1]
 80132ba:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	2200      	movs	r2, #0
 80132c0:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	789b      	ldrb	r3, [r3, #2]
 80132c6:	f003 0302 	and.w	r3, r3, #2
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d001      	beq.n	80132d4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 80132d0:	2320      	movs	r3, #32
 80132d2:	e000      	b.n	80132d6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 80132d4:	2310      	movs	r3, #16
 80132d6:	461a      	mov	r2, r3
 80132d8:	21e8      	movs	r1, #232	; 0xe8
 80132da:	68f8      	ldr	r0, [r7, #12]
 80132dc:	f7ef f876 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	781a      	ldrb	r2, [r3, #0]
 80132e4:	88fb      	ldrh	r3, [r7, #6]
 80132e6:	2100      	movs	r1, #0
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f000 f9fc 	bl	80136e6 <_ZN3USB11dispatchPktEhht>
 80132ee:	4603      	mov	r3, r0
 80132f0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 80132f2:	7dfb      	ldrb	r3, [r7, #23]
 80132f4:	2b06      	cmp	r3, #6
 80132f6:	d123      	bne.n	8013340 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 80132f8:	21f8      	movs	r1, #248	; 0xf8
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	f7ef f8b8 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013300:	4603      	mov	r3, r0
 8013302:	f003 0310 	and.w	r3, r3, #16
 8013306:	2b00      	cmp	r3, #0
 8013308:	bf0c      	ite	eq
 801330a:	2301      	moveq	r3, #1
 801330c:	2300      	movne	r3, #0
 801330e:	b2db      	uxtb	r3, r3
 8013310:	f003 0301 	and.w	r3, r3, #1
 8013314:	b2d9      	uxtb	r1, r3
 8013316:	68ba      	ldr	r2, [r7, #8]
 8013318:	7893      	ldrb	r3, [r2, #2]
 801331a:	f361 0341 	bfi	r3, r1, #1, #1
 801331e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	789b      	ldrb	r3, [r3, #2]
 8013324:	f003 0302 	and.w	r3, r3, #2
 8013328:	b2db      	uxtb	r3, r3
 801332a:	2b00      	cmp	r3, #0
 801332c:	d001      	beq.n	8013332 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 801332e:	2320      	movs	r3, #32
 8013330:	e000      	b.n	8013334 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 8013332:	2310      	movs	r3, #16
 8013334:	461a      	mov	r2, r3
 8013336:	21e8      	movs	r1, #232	; 0xe8
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f7ef f847 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 801333e:	e06e      	b.n	801341e <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 8013340:	7dfb      	ldrb	r3, [r7, #23]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d16c      	bne.n	8013420 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 8013346:	21c8      	movs	r1, #200	; 0xc8
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f7ef f891 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801334e:	4603      	mov	r3, r0
 8013350:	f003 0304 	and.w	r3, r3, #4
 8013354:	2b00      	cmp	r3, #0
 8013356:	bf0c      	ite	eq
 8013358:	2301      	moveq	r3, #1
 801335a:	2300      	movne	r3, #0
 801335c:	b2db      	uxtb	r3, r3
 801335e:	2b00      	cmp	r3, #0
 8013360:	d002      	beq.n	8013368 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8013362:	23f0      	movs	r3, #240	; 0xf0
 8013364:	75fb      	strb	r3, [r7, #23]
                        break;
 8013366:	e05c      	b.n	8013422 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8013368:	2130      	movs	r1, #48	; 0x30
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	f7ef f880 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013370:	4603      	mov	r3, r0
 8013372:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8013374:	7dba      	ldrb	r2, [r7, #22]
 8013376:	8a7b      	ldrh	r3, [r7, #18]
 8013378:	429a      	cmp	r2, r3
 801337a:	dd01      	ble.n	8013380 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 801337c:	8a7b      	ldrh	r3, [r7, #18]
 801337e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013386:	b29b      	uxth	r3, r3
 8013388:	8a7a      	ldrh	r2, [r7, #18]
 801338a:	1ad3      	subs	r3, r2, r3
 801338c:	b29b      	uxth	r3, r3
 801338e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8013390:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013394:	2b00      	cmp	r3, #0
 8013396:	da01      	bge.n	801339c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801339c:	7dba      	ldrb	r2, [r7, #22]
 801339e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80133a2:	4293      	cmp	r3, r2
 80133a4:	bfa8      	it	ge
 80133a6:	4613      	movge	r3, r2
 80133a8:	b2da      	uxtb	r2, r3
 80133aa:	6a3b      	ldr	r3, [r7, #32]
 80133ac:	2108      	movs	r1, #8
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	f000 ffe6 	bl	8014380 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 80133b4:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 80133b6:	2204      	movs	r2, #4
 80133b8:	21c8      	movs	r1, #200	; 0xc8
 80133ba:	68f8      	ldr	r0, [r7, #12]
 80133bc:	f7ef f806 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	881a      	ldrh	r2, [r3, #0]
 80133c4:	7dbb      	ldrb	r3, [r7, #22]
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	4413      	add	r3, r2
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 80133d0:	7dba      	ldrb	r2, [r7, #22]
 80133d2:	7c7b      	ldrb	r3, [r7, #17]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d304      	bcc.n	80133e2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	8a7a      	ldrh	r2, [r7, #18]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d813      	bhi.n	801340a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 80133e2:	21f8      	movs	r1, #248	; 0xf8
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7ef f843 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80133ea:	4603      	mov	r3, r0
 80133ec:	f003 0310 	and.w	r3, r3, #16
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d001      	beq.n	80133f8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 80133f4:	2101      	movs	r1, #1
 80133f6:	e000      	b.n	80133fa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 80133f8:	2100      	movs	r1, #0
 80133fa:	68ba      	ldr	r2, [r7, #8]
 80133fc:	7893      	ldrb	r3, [r2, #2]
 80133fe:	f361 0341 	bfi	r3, r1, #1, #1
 8013402:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 8013404:	2300      	movs	r3, #0
 8013406:	75fb      	strb	r3, [r7, #23]
                        break;
 8013408:	e00b      	b.n	8013422 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 801340a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801340e:	2b00      	cmp	r3, #0
 8013410:	f43f af66 	beq.w	80132e0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 8013414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013418:	4618      	mov	r0, r3
 801341a:	f7f0 fa8b 	bl	8003934 <HAL_Delay>
        } //while( 1 )
 801341e:	e75f      	b.n	80132e0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 8013420:	bf00      	nop
        return ( rcode);
 8013422:	7dfb      	ldrb	r3, [r7, #23]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3718      	adds	r7, #24
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 801342c:	b580      	push	{r7, lr}
 801342e:	b088      	sub	sp, #32
 8013430:	af02      	add	r7, sp, #8
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	4608      	mov	r0, r1
 8013436:	4611      	mov	r1, r2
 8013438:	461a      	mov	r2, r3
 801343a:	4603      	mov	r3, r0
 801343c:	70fb      	strb	r3, [r7, #3]
 801343e:	460b      	mov	r3, r1
 8013440:	70bb      	strb	r3, [r7, #2]
 8013442:	4613      	mov	r3, r2
 8013444:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 8013446:	2300      	movs	r3, #0
 8013448:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 801344a:	2300      	movs	r3, #0
 801344c:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 801344e:	f107 0010 	add.w	r0, r7, #16
 8013452:	78ba      	ldrb	r2, [r7, #2]
 8013454:	78f9      	ldrb	r1, [r7, #3]
 8013456:	f107 030e 	add.w	r3, r7, #14
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	4603      	mov	r3, r0
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f7ff fd9d 	bl	8012f9e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8013464:	4603      	mov	r3, r0
 8013466:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8013468:	7dfb      	ldrb	r3, [r7, #23]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801346e:	7dfb      	ldrb	r3, [r7, #23]
 8013470:	e00a      	b.n	8013488 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8013472:	6939      	ldr	r1, [r7, #16]
 8013474:	89fa      	ldrh	r2, [r7, #14]
 8013476:	8838      	ldrh	r0, [r7, #0]
 8013478:	6a3b      	ldr	r3, [r7, #32]
 801347a:	9300      	str	r3, [sp, #0]
 801347c:	4603      	mov	r3, r0
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f000 f806 	bl	8013490 <_ZN3USB11OutTransferEP6EpInfottPh>
 8013484:	4603      	mov	r3, r0
 8013486:	bf00      	nop
}
 8013488:	4618      	mov	r0, r3
 801348a:	3718      	adds	r7, #24
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8013490:	b580      	push	{r7, lr}
 8013492:	b08a      	sub	sp, #40	; 0x28
 8013494:	af00      	add	r7, sp, #0
 8013496:	60f8      	str	r0, [r7, #12]
 8013498:	60b9      	str	r1, [r7, #8]
 801349a:	4611      	mov	r1, r2
 801349c:	461a      	mov	r2, r3
 801349e:	460b      	mov	r3, r1
 80134a0:	80fb      	strh	r3, [r7, #6]
 80134a2:	4613      	mov	r3, r2
 80134a4:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 80134a6:	2300      	movs	r3, #0
 80134a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 80134b0:	88bb      	ldrh	r3, [r7, #4]
 80134b2:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	785b      	ldrb	r3, [r3, #1]
 80134b8:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 80134ba:	7efb      	ldrb	r3, [r7, #27]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d002      	beq.n	80134c6 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 80134c0:	7efb      	ldrb	r3, [r7, #27]
 80134c2:	2b40      	cmp	r3, #64	; 0x40
 80134c4:	d901      	bls.n	80134ca <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 80134c6:	23da      	movs	r3, #218	; 0xda
 80134c8:	e109      	b.n	80136de <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80134ca:	f7f0 fa27 	bl	800391c <HAL_GetTick>
 80134ce:	4603      	mov	r3, r0
 80134d0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80134d4:	3308      	adds	r3, #8
 80134d6:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	789b      	ldrb	r3, [r3, #2]
 80134dc:	f003 0301 	and.w	r3, r3, #1
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d001      	beq.n	80134ea <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 80134e6:	2380      	movs	r3, #128	; 0x80
 80134e8:	e000      	b.n	80134ec <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 80134ea:	2340      	movs	r3, #64	; 0x40
 80134ec:	461a      	mov	r2, r3
 80134ee:	21e8      	movs	r1, #232	; 0xe8
 80134f0:	68f8      	ldr	r0, [r7, #12]
 80134f2:	f7ee ff6b 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 80134f6:	8bbb      	ldrh	r3, [r7, #28]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 80da 	beq.w	80136b2 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 8013504:	2300      	movs	r3, #0
 8013506:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 8013508:	7efb      	ldrb	r3, [r7, #27]
 801350a:	b29b      	uxth	r3, r3
 801350c:	8bba      	ldrh	r2, [r7, #28]
 801350e:	4293      	cmp	r3, r2
 8013510:	bf28      	it	cs
 8013512:	4613      	movcs	r3, r2
 8013514:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 8013516:	8a7b      	ldrh	r3, [r7, #18]
 8013518:	b2da      	uxtb	r2, r3
 801351a:	6a3b      	ldr	r3, [r7, #32]
 801351c:	2110      	movs	r1, #16
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	f000 fef4 	bl	801430c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 8013524:	8a7b      	ldrh	r3, [r7, #18]
 8013526:	b2db      	uxtb	r3, r3
 8013528:	461a      	mov	r2, r3
 801352a:	2138      	movs	r1, #56	; 0x38
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f7ee ff4d 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	f043 0320 	orr.w	r3, r3, #32
 801353a:	b2db      	uxtb	r3, r3
 801353c:	461a      	mov	r2, r3
 801353e:	21f0      	movs	r1, #240	; 0xf0
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f7ee ff43 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8013546:	21c8      	movs	r1, #200	; 0xc8
 8013548:	68f8      	ldr	r0, [r7, #12]
 801354a:	f7ee ff91 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801354e:	4603      	mov	r3, r0
 8013550:	b25b      	sxtb	r3, r3
 8013552:	43db      	mvns	r3, r3
 8013554:	b2db      	uxtb	r3, r3
 8013556:	09db      	lsrs	r3, r3, #7
 8013558:	b2db      	uxtb	r3, r3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d000      	beq.n	8013560 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 801355e:	e7f2      	b.n	8013546 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8013560:	2280      	movs	r2, #128	; 0x80
 8013562:	21c8      	movs	r1, #200	; 0xc8
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	f7ee ff31 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801356a:	21f8      	movs	r1, #248	; 0xf8
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f7ee ff7f 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013572:	4603      	mov	r3, r0
 8013574:	f003 030f 	and.w	r3, r3, #15
 8013578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801357c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013580:	2b00      	cmp	r3, #0
 8013582:	d008      	beq.n	8013596 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8013584:	f7f0 f9ca 	bl	800391c <HAL_GetTick>
 8013588:	4602      	mov	r2, r0
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	2b00      	cmp	r3, #0
 8013590:	da01      	bge.n	8013596 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8013592:	2301      	movs	r3, #1
 8013594:	e000      	b.n	8013598 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8013596:	2300      	movs	r3, #0
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 8081 	beq.w	80136a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801359e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135a2:	2b0e      	cmp	r3, #14
 80135a4:	d012      	beq.n	80135cc <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 80135a6:	2b0e      	cmp	r3, #14
 80135a8:	f300 8085 	bgt.w	80136b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 80135ac:	2b04      	cmp	r3, #4
 80135ae:	d002      	beq.n	80135b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 80135b0:	2b06      	cmp	r3, #6
 80135b2:	d015      	beq.n	80135e0 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 80135b4:	e07f      	b.n	80136b6 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 80135b6:	8bfb      	ldrh	r3, [r7, #30]
 80135b8:	3301      	adds	r3, #1
 80135ba:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 80135bc:	88fb      	ldrh	r3, [r7, #6]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d032      	beq.n	8013628 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 80135c2:	8bfa      	ldrh	r2, [r7, #30]
 80135c4:	88fb      	ldrh	r3, [r7, #6]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d12e      	bne.n	8013628 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 80135ca:	e075      	b.n	80136b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 80135cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135d0:	3301      	adds	r3, #1
 80135d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 80135d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80135da:	2b03      	cmp	r3, #3
 80135dc:	d126      	bne.n	801362c <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 80135de:	e06b      	b.n	80136b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80135e0:	21f8      	movs	r1, #248	; 0xf8
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f7ee ff44 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80135e8:	4603      	mov	r3, r0
 80135ea:	f003 0320 	and.w	r3, r3, #32
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	bf0c      	ite	eq
 80135f2:	2301      	moveq	r3, #1
 80135f4:	2300      	movne	r3, #0
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	f003 0301 	and.w	r3, r3, #1
 80135fc:	b2d9      	uxtb	r1, r3
 80135fe:	68ba      	ldr	r2, [r7, #8]
 8013600:	7893      	ldrb	r3, [r2, #2]
 8013602:	f361 0300 	bfi	r3, r1, #0, #1
 8013606:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	789b      	ldrb	r3, [r3, #2]
 801360c:	f003 0301 	and.w	r3, r3, #1
 8013610:	b2db      	uxtb	r3, r3
 8013612:	2b00      	cmp	r3, #0
 8013614:	d001      	beq.n	801361a <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 8013616:	2380      	movs	r3, #128	; 0x80
 8013618:	e000      	b.n	801361c <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 801361a:	2340      	movs	r3, #64	; 0x40
 801361c:	461a      	mov	r2, r3
 801361e:	21e8      	movs	r1, #232	; 0xe8
 8013620:	68f8      	ldr	r0, [r7, #12]
 8013622:	f7ee fed3 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 8013626:	e002      	b.n	801362e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 8013628:	bf00      	nop
 801362a:	e000      	b.n	801362e <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 801362c:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 801362e:	2200      	movs	r2, #0
 8013630:	2138      	movs	r1, #56	; 0x38
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	f7ee feca 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 8013638:	6a3b      	ldr	r3, [r7, #32]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	461a      	mov	r2, r3
 801363e:	2110      	movs	r1, #16
 8013640:	68f8      	ldr	r0, [r7, #12]
 8013642:	f7ee fec3 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 8013646:	8a7b      	ldrh	r3, [r7, #18]
 8013648:	b2db      	uxtb	r3, r3
 801364a:	461a      	mov	r2, r3
 801364c:	2138      	movs	r1, #56	; 0x38
 801364e:	68f8      	ldr	r0, [r7, #12]
 8013650:	f7ee febc 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	f043 0320 	orr.w	r3, r3, #32
 801365c:	b2db      	uxtb	r3, r3
 801365e:	461a      	mov	r2, r3
 8013660:	21f0      	movs	r1, #240	; 0xf0
 8013662:	68f8      	ldr	r0, [r7, #12]
 8013664:	f7ee feb2 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8013668:	21c8      	movs	r1, #200	; 0xc8
 801366a:	68f8      	ldr	r0, [r7, #12]
 801366c:	f7ee ff00 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013670:	4603      	mov	r3, r0
 8013672:	b25b      	sxtb	r3, r3
 8013674:	43db      	mvns	r3, r3
 8013676:	b2db      	uxtb	r3, r3
 8013678:	09db      	lsrs	r3, r3, #7
 801367a:	b2db      	uxtb	r3, r3
 801367c:	2b00      	cmp	r3, #0
 801367e:	d000      	beq.n	8013682 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8013680:	e7f2      	b.n	8013668 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8013682:	2280      	movs	r2, #128	; 0x80
 8013684:	21c8      	movs	r1, #200	; 0xc8
 8013686:	68f8      	ldr	r0, [r7, #12]
 8013688:	f7ee fea0 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801368c:	21f8      	movs	r1, #248	; 0xf8
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f7ee feee 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013694:	4603      	mov	r3, r0
 8013696:	f003 030f 	and.w	r3, r3, #15
 801369a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801369e:	e76d      	b.n	801357c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 80136a0:	8bba      	ldrh	r2, [r7, #28]
 80136a2:	8a7b      	ldrh	r3, [r7, #18]
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 80136a8:	8a7b      	ldrh	r3, [r7, #18]
 80136aa:	6a3a      	ldr	r2, [r7, #32]
 80136ac:	4413      	add	r3, r2
 80136ae:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 80136b0:	e721      	b.n	80134f6 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 80136b2:	bf00      	nop
 80136b4:	e000      	b.n	80136b8 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 80136b6:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 80136b8:	21f8      	movs	r1, #248	; 0xf8
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	f7ee fed8 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80136c0:	4603      	mov	r3, r0
 80136c2:	f003 0320 	and.w	r3, r3, #32
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d001      	beq.n	80136ce <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 80136ca:	2101      	movs	r1, #1
 80136cc:	e000      	b.n	80136d0 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 80136ce:	2100      	movs	r1, #0
 80136d0:	68ba      	ldr	r2, [r7, #8]
 80136d2:	7893      	ldrb	r3, [r2, #2]
 80136d4:	f361 0300 	bfi	r3, r1, #0, #1
 80136d8:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 80136da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3728      	adds	r7, #40	; 0x28
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b086      	sub	sp, #24
 80136ea:	af00      	add	r7, sp, #0
 80136ec:	6078      	str	r0, [r7, #4]
 80136ee:	4608      	mov	r0, r1
 80136f0:	4611      	mov	r1, r2
 80136f2:	461a      	mov	r2, r3
 80136f4:	4603      	mov	r3, r0
 80136f6:	70fb      	strb	r3, [r7, #3]
 80136f8:	460b      	mov	r3, r1
 80136fa:	70bb      	strb	r3, [r7, #2]
 80136fc:	4613      	mov	r3, r2
 80136fe:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 8013700:	f7f0 f90c 	bl	800391c <HAL_GetTick>
 8013704:	4603      	mov	r3, r0
 8013706:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801370a:	3308      	adds	r3, #8
 801370c:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 801370e:	2300      	movs	r3, #0
 8013710:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 8013712:	2300      	movs	r3, #0
 8013714:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 8013716:	2300      	movs	r3, #0
 8013718:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 801371a:	f7f0 f8ff 	bl	800391c <HAL_GetTick>
 801371e:	4602      	mov	r2, r0
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	1ad3      	subs	r3, r2, r3
 8013724:	0fdb      	lsrs	r3, r3, #31
 8013726:	b2db      	uxtb	r3, r3
 8013728:	2b00      	cmp	r3, #0
 801372a:	d04c      	beq.n	80137c6 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 801372c:	78fa      	ldrb	r2, [r7, #3]
 801372e:	78bb      	ldrb	r3, [r7, #2]
 8013730:	4313      	orrs	r3, r2
 8013732:	b2db      	uxtb	r3, r3
 8013734:	461a      	mov	r2, r3
 8013736:	21f0      	movs	r1, #240	; 0xf0
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f7ee fe47 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 801373e:	23ff      	movs	r3, #255	; 0xff
 8013740:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 8013742:	f7f0 f8eb 	bl	800391c <HAL_GetTick>
 8013746:	4602      	mov	r2, r0
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	1ad3      	subs	r3, r2, r3
 801374c:	0fdb      	lsrs	r3, r3, #31
 801374e:	b2db      	uxtb	r3, r3
 8013750:	2b00      	cmp	r3, #0
 8013752:	d010      	beq.n	8013776 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 8013754:	21c8      	movs	r1, #200	; 0xc8
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f7ee fe8a 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801375c:	4603      	mov	r3, r0
 801375e:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8013760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013764:	2b00      	cmp	r3, #0
 8013766:	daec      	bge.n	8013742 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8013768:	2280      	movs	r2, #128	; 0x80
 801376a:	21c8      	movs	r1, #200	; 0xc8
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f7ee fe2d 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8013772:	2300      	movs	r3, #0
 8013774:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8013776:	21f8      	movs	r1, #248	; 0xf8
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ee fe79 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801377e:	4603      	mov	r3, r0
 8013780:	f003 030f 	and.w	r3, r3, #15
 8013784:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8013786:	7dfb      	ldrb	r3, [r7, #23]
 8013788:	2b04      	cmp	r3, #4
 801378a:	d002      	beq.n	8013792 <_ZN3USB11dispatchPktEhht+0xac>
 801378c:	2b0e      	cmp	r3, #14
 801378e:	d00c      	beq.n	80137aa <_ZN3USB11dispatchPktEhht+0xc4>
 8013790:	e013      	b.n	80137ba <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8013792:	8abb      	ldrh	r3, [r7, #20]
 8013794:	3301      	adds	r3, #1
 8013796:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8013798:	883b      	ldrh	r3, [r7, #0]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d00f      	beq.n	80137be <_ZN3USB11dispatchPktEhht+0xd8>
 801379e:	8aba      	ldrh	r2, [r7, #20]
 80137a0:	883b      	ldrh	r3, [r7, #0]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d10b      	bne.n	80137be <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 80137a6:	7dfb      	ldrb	r3, [r7, #23]
 80137a8:	e00e      	b.n	80137c8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 80137aa:	7dbb      	ldrb	r3, [r7, #22]
 80137ac:	3301      	adds	r3, #1
 80137ae:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 80137b0:	7dbb      	ldrb	r3, [r7, #22]
 80137b2:	2b03      	cmp	r3, #3
 80137b4:	d105      	bne.n	80137c2 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 80137b6:	7dfb      	ldrb	r3, [r7, #23]
 80137b8:	e006      	b.n	80137c8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 80137ba:	7dfb      	ldrb	r3, [r7, #23]
 80137bc:	e004      	b.n	80137c8 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 80137be:	bf00      	nop
 80137c0:	e7ab      	b.n	801371a <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 80137c2:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80137c4:	e7a9      	b.n	801371a <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 80137c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	3718      	adds	r7, #24
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 80137d8:	2300      	movs	r3, #0
 80137da:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f000 fdfd 	bl	80143dc <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	f000 fe12 	bl	801440c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 80137e8:	4603      	mov	r3, r0
 80137ea:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 80137ec:	7b3b      	ldrb	r3, [r7, #12]
 80137ee:	2b03      	cmp	r3, #3
 80137f0:	d82e      	bhi.n	8013850 <_ZN3USB4TaskEv+0x80>
 80137f2:	a201      	add	r2, pc, #4	; (adr r2, 80137f8 <_ZN3USB4TaskEv+0x28>)
 80137f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137f8:	08013815 	.word	0x08013815
 80137fc:	08013809 	.word	0x08013809
 8013800:	08013831 	.word	0x08013831
 8013804:	0801382d 	.word	0x0801382d
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 8013808:	4bbf      	ldr	r3, [pc, #764]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 801380a:	2213      	movs	r2, #19
 801380c:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 801380e:	2300      	movs	r3, #0
 8013810:	73fb      	strb	r3, [r7, #15]
                        break;
 8013812:	e01d      	b.n	8013850 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 8013814:	4bbc      	ldr	r3, [pc, #752]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801381c:	2b10      	cmp	r3, #16
 801381e:	d002      	beq.n	8013826 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 8013820:	4bb9      	ldr	r3, [pc, #740]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013822:	2211      	movs	r2, #17
 8013824:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 8013826:	2300      	movs	r3, #0
 8013828:	73fb      	strb	r3, [r7, #15]
                        break;
 801382a:	e011      	b.n	8013850 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 801382c:	2301      	movs	r3, #1
 801382e:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 8013830:	4bb5      	ldr	r3, [pc, #724]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013838:	2b10      	cmp	r3, #16
 801383a:	d108      	bne.n	801384e <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 801383c:	f7f0 f86e 	bl	800391c <HAL_GetTick>
 8013840:	4603      	mov	r3, r0
 8013842:	33c8      	adds	r3, #200	; 0xc8
 8013844:	4ab1      	ldr	r2, [pc, #708]	; (8013b0c <_ZN3USB4TaskEv+0x33c>)
 8013846:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8013848:	4baf      	ldr	r3, [pc, #700]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 801384a:	2220      	movs	r2, #32
 801384c:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 801384e:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8013850:	2300      	movs	r3, #0
 8013852:	73bb      	strb	r3, [r7, #14]
 8013854:	7bbb      	ldrb	r3, [r7, #14]
 8013856:	2b0f      	cmp	r3, #15
 8013858:	d81b      	bhi.n	8013892 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 801385a:	7bba      	ldrb	r2, [r7, #14]
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	321e      	adds	r2, #30
 8013860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d010      	beq.n	801388a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8013868:	7bba      	ldrb	r2, [r7, #14]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	321e      	adds	r2, #30
 801386e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013872:	7bba      	ldrb	r2, [r7, #14]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	321e      	adds	r2, #30
 8013878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	330c      	adds	r3, #12
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	4608      	mov	r0, r1
 8013884:	4798      	blx	r3
 8013886:	4603      	mov	r3, r0
 8013888:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801388a:	7bbb      	ldrb	r3, [r7, #14]
 801388c:	3301      	adds	r3, #1
 801388e:	73bb      	strb	r3, [r7, #14]
 8013890:	e7e0      	b.n	8013854 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8013892:	4b9d      	ldr	r3, [pc, #628]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	2ba0      	cmp	r3, #160	; 0xa0
 8013898:	f000 8123 	beq.w	8013ae2 <_ZN3USB4TaskEv+0x312>
 801389c:	2ba0      	cmp	r3, #160	; 0xa0
 801389e:	f300 812f 	bgt.w	8013b00 <_ZN3USB4TaskEv+0x330>
 80138a2:	2b90      	cmp	r3, #144	; 0x90
 80138a4:	f000 811f 	beq.w	8013ae6 <_ZN3USB4TaskEv+0x316>
 80138a8:	2b90      	cmp	r3, #144	; 0x90
 80138aa:	f300 8129 	bgt.w	8013b00 <_ZN3USB4TaskEv+0x330>
 80138ae:	2b80      	cmp	r3, #128	; 0x80
 80138b0:	f000 80fe 	beq.w	8013ab0 <_ZN3USB4TaskEv+0x2e0>
 80138b4:	2b80      	cmp	r3, #128	; 0x80
 80138b6:	f300 8123 	bgt.w	8013b00 <_ZN3USB4TaskEv+0x330>
 80138ba:	2b51      	cmp	r3, #81	; 0x51
 80138bc:	f000 80ea 	beq.w	8013a94 <_ZN3USB4TaskEv+0x2c4>
 80138c0:	2b51      	cmp	r3, #81	; 0x51
 80138c2:	f300 811d 	bgt.w	8013b00 <_ZN3USB4TaskEv+0x330>
 80138c6:	2b40      	cmp	r3, #64	; 0x40
 80138c8:	dc6a      	bgt.n	80139a0 <_ZN3USB4TaskEv+0x1d0>
 80138ca:	2b11      	cmp	r3, #17
 80138cc:	f2c0 8118 	blt.w	8013b00 <_ZN3USB4TaskEv+0x330>
 80138d0:	3b11      	subs	r3, #17
 80138d2:	2b2f      	cmp	r3, #47	; 0x2f
 80138d4:	f200 8114 	bhi.w	8013b00 <_ZN3USB4TaskEv+0x330>
 80138d8:	a201      	add	r2, pc, #4	; (adr r2, 80138e0 <_ZN3USB4TaskEv+0x110>)
 80138da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138de:	bf00      	nop
 80138e0:	080139a7 	.word	0x080139a7
 80138e4:	08013aeb 	.word	0x08013aeb
 80138e8:	08013aeb 	.word	0x08013aeb
 80138ec:	08013b01 	.word	0x08013b01
 80138f0:	08013b01 	.word	0x08013b01
 80138f4:	08013b01 	.word	0x08013b01
 80138f8:	08013b01 	.word	0x08013b01
 80138fc:	08013b01 	.word	0x08013b01
 8013900:	08013b01 	.word	0x08013b01
 8013904:	08013b01 	.word	0x08013b01
 8013908:	08013b01 	.word	0x08013b01
 801390c:	08013b01 	.word	0x08013b01
 8013910:	08013b01 	.word	0x08013b01
 8013914:	08013b01 	.word	0x08013b01
 8013918:	08013b01 	.word	0x08013b01
 801391c:	080139f7 	.word	0x080139f7
 8013920:	08013b01 	.word	0x08013b01
 8013924:	08013b01 	.word	0x08013b01
 8013928:	08013b01 	.word	0x08013b01
 801392c:	08013b01 	.word	0x08013b01
 8013930:	08013b01 	.word	0x08013b01
 8013934:	08013b01 	.word	0x08013b01
 8013938:	08013b01 	.word	0x08013b01
 801393c:	08013b01 	.word	0x08013b01
 8013940:	08013b01 	.word	0x08013b01
 8013944:	08013b01 	.word	0x08013b01
 8013948:	08013b01 	.word	0x08013b01
 801394c:	08013b01 	.word	0x08013b01
 8013950:	08013b01 	.word	0x08013b01
 8013954:	08013b01 	.word	0x08013b01
 8013958:	08013b01 	.word	0x08013b01
 801395c:	08013a13 	.word	0x08013a13
 8013960:	08013b01 	.word	0x08013b01
 8013964:	08013b01 	.word	0x08013b01
 8013968:	08013b01 	.word	0x08013b01
 801396c:	08013b01 	.word	0x08013b01
 8013970:	08013b01 	.word	0x08013b01
 8013974:	08013b01 	.word	0x08013b01
 8013978:	08013b01 	.word	0x08013b01
 801397c:	08013b01 	.word	0x08013b01
 8013980:	08013b01 	.word	0x08013b01
 8013984:	08013b01 	.word	0x08013b01
 8013988:	08013b01 	.word	0x08013b01
 801398c:	08013b01 	.word	0x08013b01
 8013990:	08013b01 	.word	0x08013b01
 8013994:	08013b01 	.word	0x08013b01
 8013998:	08013b01 	.word	0x08013b01
 801399c:	08013a25 	.word	0x08013a25
 80139a0:	2b50      	cmp	r3, #80	; 0x50
 80139a2:	d05f      	beq.n	8013a64 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 80139a4:	e0ac      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        init();
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f7ff fa8e 	bl	8012ec8 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80139ac:	2300      	movs	r3, #0
 80139ae:	737b      	strb	r3, [r7, #13]
 80139b0:	7b7b      	ldrb	r3, [r7, #13]
 80139b2:	2b0f      	cmp	r3, #15
 80139b4:	d81b      	bhi.n	80139ee <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 80139b6:	7b7a      	ldrb	r2, [r7, #13]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	321e      	adds	r2, #30
 80139bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d010      	beq.n	80139e6 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 80139c4:	7b7a      	ldrb	r2, [r7, #13]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	321e      	adds	r2, #30
 80139ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80139ce:	7b7a      	ldrb	r2, [r7, #13]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	321e      	adds	r2, #30
 80139d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	3308      	adds	r3, #8
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	4608      	mov	r0, r1
 80139e0:	4798      	blx	r3
 80139e2:	4603      	mov	r3, r0
 80139e4:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80139e6:	7b7b      	ldrb	r3, [r7, #13]
 80139e8:	3301      	adds	r3, #1
 80139ea:	737b      	strb	r3, [r7, #13]
 80139ec:	e7e0      	b.n	80139b0 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80139ee:	4b46      	ldr	r3, [pc, #280]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 80139f0:	2212      	movs	r2, #18
 80139f2:	701a      	strb	r2, [r3, #0]
                        break;
 80139f4:	e084      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 80139f6:	f7ef ff91 	bl	800391c <HAL_GetTick>
 80139fa:	4602      	mov	r2, r0
 80139fc:	4b43      	ldr	r3, [pc, #268]	; (8013b0c <_ZN3USB4TaskEv+0x33c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	43db      	mvns	r3, r3
 8013a04:	0fdb      	lsrs	r3, r3, #31
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d070      	beq.n	8013aee <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8013a0c:	4b3e      	ldr	r3, [pc, #248]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013a0e:	2230      	movs	r2, #48	; 0x30
 8013a10:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8013a12:	2201      	movs	r2, #1
 8013a14:	21e8      	movs	r1, #232	; 0xe8
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7ee fcd8 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8013a1c:	4b3a      	ldr	r3, [pc, #232]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013a1e:	2240      	movs	r2, #64	; 0x40
 8013a20:	701a      	strb	r2, [r3, #0]
                        break;
 8013a22:	e06d      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8013a24:	21e8      	movs	r1, #232	; 0xe8
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f7ee fd22 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	f003 0301 	and.w	r3, r3, #1
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	bf0c      	ite	eq
 8013a36:	2301      	moveq	r3, #1
 8013a38:	2300      	movne	r3, #0
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d058      	beq.n	8013af2 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8013a40:	21d8      	movs	r1, #216	; 0xd8
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f7ee fd14 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	f043 0308 	orr.w	r3, r3, #8
 8013a4e:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8013a50:	7b3b      	ldrb	r3, [r7, #12]
 8013a52:	461a      	mov	r2, r3
 8013a54:	21d8      	movs	r1, #216	; 0xd8
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f7ee fcb8 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8013a5c:	4b2a      	ldr	r3, [pc, #168]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013a5e:	2250      	movs	r2, #80	; 0x50
 8013a60:	701a      	strb	r2, [r3, #0]
                        break;
 8013a62:	e046      	b.n	8013af2 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8013a64:	21c8      	movs	r1, #200	; 0xc8
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f7ee fd02 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	bf14      	ite	ne
 8013a76:	2301      	movne	r3, #1
 8013a78:	2300      	moveq	r3, #0
 8013a7a:	b2db      	uxtb	r3, r3
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d03a      	beq.n	8013af6 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8013a80:	4b21      	ldr	r3, [pc, #132]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013a82:	2251      	movs	r2, #81	; 0x51
 8013a84:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8013a86:	f7ef ff49 	bl	800391c <HAL_GetTick>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	3314      	adds	r3, #20
 8013a8e:	4a1f      	ldr	r2, [pc, #124]	; (8013b0c <_ZN3USB4TaskEv+0x33c>)
 8013a90:	6013      	str	r3, [r2, #0]
                        break;
 8013a92:	e030      	b.n	8013af6 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8013a94:	f7ef ff42 	bl	800391c <HAL_GetTick>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	4b1c      	ldr	r3, [pc, #112]	; (8013b0c <_ZN3USB4TaskEv+0x33c>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	43db      	mvns	r3, r3
 8013aa2:	0fdb      	lsrs	r3, r3, #31
 8013aa4:	b2db      	uxtb	r3, r3
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d027      	beq.n	8013afa <_ZN3USB4TaskEv+0x32a>
 8013aaa:	4b17      	ldr	r3, [pc, #92]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013aac:	2280      	movs	r2, #128	; 0x80
 8013aae:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8013ab0:	7bfb      	ldrb	r3, [r7, #15]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	2100      	movs	r1, #0
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f000 f920 	bl	8013cfc <_ZN3USB11ConfiguringEhhb>
 8013abc:	4603      	mov	r3, r0
 8013abe:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8013ac0:	7afb      	ldrb	r3, [r7, #11]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d009      	beq.n	8013ada <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8013ac6:	7afb      	ldrb	r3, [r7, #11]
 8013ac8:	2bd2      	cmp	r3, #210	; 0xd2
 8013aca:	d018      	beq.n	8013afe <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 8013acc:	4a10      	ldr	r2, [pc, #64]	; (8013b10 <_ZN3USB4TaskEv+0x340>)
 8013ace:	7afb      	ldrb	r3, [r7, #11]
 8013ad0:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8013ad2:	4b0d      	ldr	r3, [pc, #52]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013ad4:	22a0      	movs	r2, #160	; 0xa0
 8013ad6:	701a      	strb	r2, [r3, #0]
                        break;
 8013ad8:	e011      	b.n	8013afe <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 8013ada:	4b0b      	ldr	r3, [pc, #44]	; (8013b08 <_ZN3USB4TaskEv+0x338>)
 8013adc:	2290      	movs	r2, #144	; 0x90
 8013ade:	701a      	strb	r2, [r3, #0]
                        break;
 8013ae0:	e00d      	b.n	8013afe <_ZN3USB4TaskEv+0x32e>
                        break;
 8013ae2:	bf00      	nop
 8013ae4:	e00c      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        break;
 8013ae6:	bf00      	nop
 8013ae8:	e00a      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        break;
 8013aea:	bf00      	nop
 8013aec:	e008      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8013aee:	bf00      	nop
 8013af0:	e006      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        break;
 8013af2:	bf00      	nop
 8013af4:	e004      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        break;
 8013af6:	bf00      	nop
 8013af8:	e002      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8013afa:	bf00      	nop
 8013afc:	e000      	b.n	8013b00 <_ZN3USB4TaskEv+0x330>
                        break;
 8013afe:	bf00      	nop
}
 8013b00:	bf00      	nop
 8013b02:	3710      	adds	r7, #16
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	20005415 	.word	0x20005415
 8013b0c:	20005418 	.word	0x20005418
 8013b10:	20005414 	.word	0x20005414

08013b14 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b086      	sub	sp, #24
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	4608      	mov	r0, r1
 8013b1e:	4611      	mov	r1, r2
 8013b20:	461a      	mov	r2, r3
 8013b22:	4603      	mov	r3, r0
 8013b24:	70fb      	strb	r3, [r7, #3]
 8013b26:	460b      	mov	r3, r1
 8013b28:	70bb      	strb	r3, [r7, #2]
 8013b2a:	4613      	mov	r3, r2
 8013b2c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	617b      	str	r3, [r7, #20]
 8013b32:	2300      	movs	r3, #0
 8013b34:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2100      	movs	r1, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 fbc0 	bl	80142c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013b40:	6178      	str	r0, [r7, #20]

        if(!p0)
 8013b42:	697b      	ldr	r3, [r7, #20]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d101      	bne.n	8013b4c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013b48:	23d6      	movs	r3, #214	; 0xd6
 8013b4a:	e03a      	b.n	8013bc2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8013b54:	23d7      	movs	r3, #215	; 0xd7
 8013b56:	e034      	b.n	8013bc2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	787a      	ldrb	r2, [r7, #1]
 8013b5c:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	78bb      	ldrb	r3, [r7, #2]
 8013b62:	78f9      	ldrb	r1, [r7, #3]
 8013b64:	2200      	movs	r2, #0
 8013b66:	f000 fc5f 	bl	8014428 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 8013b6e:	7bfb      	ldrb	r3, [r7, #15]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d101      	bne.n	8013b78 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8013b74:	23d4      	movs	r3, #212	; 0xd4
 8013b76:	e024      	b.n	8013bc2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	7bfa      	ldrb	r2, [r7, #15]
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 fb9e 	bl	80142c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8013b84:	6138      	str	r0, [r7, #16]

        if(!p)
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013b8c:	23d6      	movs	r3, #214	; 0xd6
 8013b8e:	e018      	b.n	8013bc2 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	787a      	ldrb	r2, [r7, #1]
 8013b94:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8013b96:	7bfb      	ldrb	r3, [r7, #15]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	2100      	movs	r1, #0
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f000 fae3 	bl	8014168 <_ZN3USB7setAddrEhhh>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8013ba6:	7bbb      	ldrb	r3, [r7, #14]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d009      	beq.n	8013bc0 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	7bfa      	ldrb	r2, [r7, #15]
 8013bb0:	4611      	mov	r1, r2
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f000 fcd0 	bl	8014558 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8013bbc:	7bbb      	ldrb	r3, [r7, #14]
 8013bbe:	e000      	b.n	8013bc2 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8013bc0:	2300      	movs	r3, #0
};
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3718      	adds	r7, #24
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}

08013bca <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8013bca:	b590      	push	{r4, r7, lr}
 8013bcc:	b085      	sub	sp, #20
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
 8013bd2:	4608      	mov	r0, r1
 8013bd4:	4611      	mov	r1, r2
 8013bd6:	461a      	mov	r2, r3
 8013bd8:	4603      	mov	r3, r0
 8013bda:	70fb      	strb	r3, [r7, #3]
 8013bdc:	460b      	mov	r3, r1
 8013bde:	70bb      	strb	r3, [r7, #2]
 8013be0:	4613      	mov	r3, r2
 8013be2:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8013be4:	2300      	movs	r3, #0
 8013be6:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8013be8:	78fa      	ldrb	r2, [r7, #3]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	321e      	adds	r2, #30
 8013bee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013bf2:	78fa      	ldrb	r2, [r7, #3]
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	321e      	adds	r2, #30
 8013bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	3304      	adds	r3, #4
 8013c00:	681c      	ldr	r4, [r3, #0]
 8013c02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013c06:	787a      	ldrb	r2, [r7, #1]
 8013c08:	78b9      	ldrb	r1, [r7, #2]
 8013c0a:	47a0      	blx	r4
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8013c10:	7bbb      	ldrb	r3, [r7, #14]
 8013c12:	2be0      	cmp	r3, #224	; 0xe0
 8013c14:	d11c      	bne.n	8013c50 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8013c16:	78bb      	ldrb	r3, [r7, #2]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d108      	bne.n	8013c2e <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	21e8      	movs	r1, #232	; 0xe8
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ee fbd3 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8013c26:	2066      	movs	r0, #102	; 0x66
 8013c28:	f7ef fe84 	bl	8003934 <HAL_Delay>
 8013c2c:	e022      	b.n	8013c74 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8013c2e:	78ba      	ldrb	r2, [r7, #2]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	321e      	adds	r2, #30
 8013c34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013c38:	78ba      	ldrb	r2, [r7, #2]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	321e      	adds	r2, #30
 8013c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	3314      	adds	r3, #20
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	787a      	ldrb	r2, [r7, #1]
 8013c4a:	4611      	mov	r1, r2
 8013c4c:	4798      	blx	r3
 8013c4e:	e011      	b.n	8013c74 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8013c50:	7bbb      	ldrb	r3, [r7, #14]
 8013c52:	2b0d      	cmp	r3, #13
 8013c54:	d109      	bne.n	8013c6a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8013c56:	7bfb      	ldrb	r3, [r7, #15]
 8013c58:	2b02      	cmp	r3, #2
 8013c5a:	d806      	bhi.n	8013c6a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8013c5c:	2064      	movs	r0, #100	; 0x64
 8013c5e:	f7ef fe69 	bl	8003934 <HAL_Delay>
                retries++;
 8013c62:	7bfb      	ldrb	r3, [r7, #15]
 8013c64:	3301      	adds	r3, #1
 8013c66:	73fb      	strb	r3, [r7, #15]
                goto again;
 8013c68:	e7be      	b.n	8013be8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8013c6a:	7bbb      	ldrb	r3, [r7, #14]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d001      	beq.n	8013c74 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8013c70:	7bbb      	ldrb	r3, [r7, #14]
 8013c72:	e03f      	b.n	8013cf4 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8013c74:	78fa      	ldrb	r2, [r7, #3]
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	321e      	adds	r2, #30
 8013c7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013c7e:	78fa      	ldrb	r2, [r7, #3]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	321e      	adds	r2, #30
 8013c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	681c      	ldr	r4, [r3, #0]
 8013c8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013c90:	787a      	ldrb	r2, [r7, #1]
 8013c92:	78b9      	ldrb	r1, [r7, #2]
 8013c94:	47a0      	blx	r4
 8013c96:	4603      	mov	r3, r0
 8013c98:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8013c9a:	7bbb      	ldrb	r3, [r7, #14]
 8013c9c:	2b0d      	cmp	r3, #13
 8013c9e:	d109      	bne.n	8013cb4 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8013ca0:	7bfb      	ldrb	r3, [r7, #15]
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	d806      	bhi.n	8013cb4 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8013ca6:	2064      	movs	r0, #100	; 0x64
 8013ca8:	f7ef fe44 	bl	8003934 <HAL_Delay>
                retries++;
 8013cac:	7bfb      	ldrb	r3, [r7, #15]
 8013cae:	3301      	adds	r3, #1
 8013cb0:	73fb      	strb	r3, [r7, #15]
                goto again;
 8013cb2:	e799      	b.n	8013be8 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8013cb4:	7bbb      	ldrb	r3, [r7, #14]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d01b      	beq.n	8013cf2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8013cba:	78bb      	ldrb	r3, [r7, #2]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d108      	bne.n	8013cd2 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8013cc0:	2201      	movs	r2, #1
 8013cc2:	21e8      	movs	r1, #232	; 0xe8
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ee fb81 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8013cca:	2066      	movs	r0, #102	; 0x66
 8013ccc:	f7ef fe32 	bl	8003934 <HAL_Delay>
 8013cd0:	e00f      	b.n	8013cf2 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8013cd2:	78ba      	ldrb	r2, [r7, #2]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	321e      	adds	r2, #30
 8013cd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013cdc:	78ba      	ldrb	r2, [r7, #2]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	321e      	adds	r2, #30
 8013ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	3314      	adds	r3, #20
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	787a      	ldrb	r2, [r7, #1]
 8013cee:	4611      	mov	r1, r2
 8013cf0:	4798      	blx	r3
                }
        }
        return rcode;
 8013cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3714      	adds	r7, #20
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd90      	pop	{r4, r7, pc}

08013cfc <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b090      	sub	sp, #64	; 0x40
 8013d00:	af02      	add	r7, sp, #8
 8013d02:	6078      	str	r0, [r7, #4]
 8013d04:	4608      	mov	r0, r1
 8013d06:	4611      	mov	r1, r2
 8013d08:	461a      	mov	r2, r3
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	70fb      	strb	r3, [r7, #3]
 8013d0e:	460b      	mov	r3, r1
 8013d10:	70bb      	strb	r3, [r7, #2]
 8013d12:	4613      	mov	r3, r2
 8013d14:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8013d16:	2300      	movs	r3, #0
 8013d18:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8013d1c:	f107 030c 	add.w	r3, r7, #12
 8013d20:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8013d22:	2300      	movs	r3, #0
 8013d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8013d26:	2300      	movs	r3, #0
 8013d28:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8013d2e:	2308      	movs	r3, #8
 8013d30:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8013d32:	7abb      	ldrb	r3, [r7, #10]
 8013d34:	f36f 0300 	bfc	r3, #0, #1
 8013d38:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8013d3a:	7abb      	ldrb	r3, [r7, #10]
 8013d3c:	f36f 0341 	bfc	r3, #1, #1
 8013d40:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8013d42:	7abb      	ldrb	r3, [r7, #10]
 8013d44:	220f      	movs	r2, #15
 8013d46:	f362 0387 	bfi	r3, r2, #2, #6
 8013d4a:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8013d4c:	6878      	ldr	r0, [r7, #4]
 8013d4e:	f7fa fd13 	bl	800e778 <_ZN3USB14GetAddressPoolEv>
 8013d52:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8013d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d5e:	4798      	blx	r3
 8013d60:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d101      	bne.n	8013d6c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8013d68:	23d6      	movs	r3, #214	; 0xd6
 8013d6a:	e15c      	b.n	8014026 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8013d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8013d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d74:	f107 0208 	add.w	r2, r7, #8
 8013d78:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8013d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7c:	787a      	ldrb	r2, [r7, #1]
 8013d7e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8013d80:	f107 030c 	add.w	r3, r7, #12
 8013d84:	9300      	str	r3, [sp, #0]
 8013d86:	2312      	movs	r3, #18
 8013d88:	2200      	movs	r2, #0
 8013d8a:	2100      	movs	r1, #0
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f000 f94e 	bl	801402e <_ZN3USB11getDevDescrEhhtPh>
 8013d92:	4603      	mov	r3, r0
 8013d94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8013d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d9c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8013d9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d002      	beq.n	8013dac <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8013da6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013daa:	e13c      	b.n	8014026 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8013dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dae:	7a1a      	ldrb	r2, [r3, #8]
 8013db0:	7a5b      	ldrb	r3, [r3, #9]
 8013db2:	021b      	lsls	r3, r3, #8
 8013db4:	4313      	orrs	r3, r2
 8013db6:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8013db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dba:	7a9a      	ldrb	r2, [r3, #10]
 8013dbc:	7adb      	ldrb	r3, [r3, #11]
 8013dbe:	021b      	lsls	r3, r3, #8
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc6:	791b      	ldrb	r3, [r3, #4]
 8013dc8:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8013dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dcc:	795b      	ldrb	r3, [r3, #5]
 8013dce:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013dda:	2b0f      	cmp	r3, #15
 8013ddc:	f200 8081 	bhi.w	8013ee2 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8013de0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	321e      	adds	r2, #30
 8013de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d06e      	beq.n	8013ece <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8013df0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	321e      	adds	r2, #30
 8013df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013dfc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	321e      	adds	r2, #30
 8013e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	3310      	adds	r3, #16
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	4608      	mov	r0, r1
 8013e10:	4798      	blx	r3
 8013e12:	4603      	mov	r3, r0
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	bf14      	ite	ne
 8013e18:	2301      	movne	r3, #1
 8013e1a:	2300      	moveq	r3, #0
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d157      	bne.n	8013ed2 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8013e22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	321e      	adds	r2, #30
 8013e2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013e2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	321e      	adds	r2, #30
 8013e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	3320      	adds	r3, #32
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	7fba      	ldrb	r2, [r7, #30]
 8013e42:	4611      	mov	r1, r2
 8013e44:	4798      	blx	r3
 8013e46:	4603      	mov	r3, r0
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d02b      	beq.n	8013ea4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8013e4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	321e      	adds	r2, #30
 8013e54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013e58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	321e      	adds	r2, #30
 8013e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	3318      	adds	r3, #24
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	8c3a      	ldrh	r2, [r7, #32]
 8013e6c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8013e6e:	4798      	blx	r3
 8013e70:	4603      	mov	r3, r0
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d114      	bne.n	8013ea0 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8013e76:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	321e      	adds	r2, #30
 8013e7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013e82:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	321e      	adds	r2, #30
 8013e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	331c      	adds	r3, #28
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	7ffa      	ldrb	r2, [r7, #31]
 8013e96:	4611      	mov	r1, r2
 8013e98:	4798      	blx	r3
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d001      	beq.n	8013ea4 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8013ea0:	2301      	movs	r3, #1
 8013ea2:	e000      	b.n	8013ea6 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d014      	beq.n	8013ed4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8013eaa:	78b8      	ldrb	r0, [r7, #2]
 8013eac:	78fa      	ldrb	r2, [r7, #3]
 8013eae:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8013eb2:	787b      	ldrb	r3, [r7, #1]
 8013eb4:	9300      	str	r3, [sp, #0]
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f7ff fe86 	bl	8013bca <_ZN3USB13AttemptConfigEhhhb>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8013ec4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013ec8:	2bd1      	cmp	r3, #209	; 0xd1
 8013eca:	d109      	bne.n	8013ee0 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8013ecc:	e002      	b.n	8013ed4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8013ece:	bf00      	nop
 8013ed0:	e000      	b.n	8013ed4 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8013ed2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8013ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ed8:	3301      	adds	r3, #1
 8013eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ede:	e77a      	b.n	8013dd6 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8013ee0:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8013ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ee6:	2b0f      	cmp	r3, #15
 8013ee8:	d802      	bhi.n	8013ef0 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8013eea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013eee:	e09a      	b.n	8014026 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013efa:	2b0f      	cmp	r3, #15
 8013efc:	f200 8088 	bhi.w	8014010 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8013f00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	321e      	adds	r2, #30
 8013f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d074      	beq.n	8013ffa <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8013f10:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	321e      	adds	r2, #30
 8013f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013f1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	321e      	adds	r2, #30
 8013f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3310      	adds	r3, #16
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4608      	mov	r0, r1
 8013f30:	4798      	blx	r3
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	bf14      	ite	ne
 8013f38:	2301      	movne	r3, #1
 8013f3a:	2300      	moveq	r3, #0
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d15d      	bne.n	8013ffe <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8013f42:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	321e      	adds	r2, #30
 8013f4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013f4e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	321e      	adds	r2, #30
 8013f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	3320      	adds	r3, #32
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	7fba      	ldrb	r2, [r7, #30]
 8013f62:	4611      	mov	r1, r2
 8013f64:	4798      	blx	r3
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d02b      	beq.n	8013fc4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8013f6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	321e      	adds	r2, #30
 8013f74:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013f78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	321e      	adds	r2, #30
 8013f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	3318      	adds	r3, #24
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	8c3a      	ldrh	r2, [r7, #32]
 8013f8c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8013f8e:	4798      	blx	r3
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d114      	bne.n	8013fc0 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8013f96:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	321e      	adds	r2, #30
 8013f9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013fa2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	321e      	adds	r2, #30
 8013faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	331c      	adds	r3, #28
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	7ffa      	ldrb	r2, [r7, #31]
 8013fb6:	4611      	mov	r1, r2
 8013fb8:	4798      	blx	r3
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e000      	b.n	8013fc6 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d11b      	bne.n	8014002 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8013fca:	78b8      	ldrb	r0, [r7, #2]
 8013fcc:	78fa      	ldrb	r2, [r7, #3]
 8013fce:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8013fd2:	787b      	ldrb	r3, [r7, #1]
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f7ff fdf6 	bl	8013bca <_ZN3USB13AttemptConfigEhhhb>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8013fe4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013fe8:	2bd1      	cmp	r3, #209	; 0xd1
 8013fea:	d00b      	beq.n	8014004 <_ZN3USB11ConfiguringEhhb+0x308>
 8013fec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013ff0:	2bd9      	cmp	r3, #217	; 0xd9
 8013ff2:	d007      	beq.n	8014004 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8013ff4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013ff8:	e015      	b.n	8014026 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 8013ffa:	bf00      	nop
 8013ffc:	e002      	b.n	8014004 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8013ffe:	bf00      	nop
 8014000:	e000      	b.n	8014004 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8014002:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8014004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014008:	3301      	adds	r3, #1
 801400a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801400e:	e772      	b.n	8013ef6 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 8014010:	787b      	ldrb	r3, [r7, #1]
 8014012:	78ba      	ldrb	r2, [r7, #2]
 8014014:	78f9      	ldrb	r1, [r7, #3]
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7ff fd7c 	bl	8013b14 <_ZN3USB17DefaultAddressingEhhb>
 801401c:	4603      	mov	r3, r0
 801401e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 8014022:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8014026:	4618      	mov	r0, r3
 8014028:	3738      	adds	r7, #56	; 0x38
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}

0801402e <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 801402e:	b580      	push	{r7, lr}
 8014030:	b08a      	sub	sp, #40	; 0x28
 8014032:	af08      	add	r7, sp, #32
 8014034:	6078      	str	r0, [r7, #4]
 8014036:	4608      	mov	r0, r1
 8014038:	4611      	mov	r1, r2
 801403a:	461a      	mov	r2, r3
 801403c:	4603      	mov	r3, r0
 801403e:	70fb      	strb	r3, [r7, #3]
 8014040:	460b      	mov	r3, r1
 8014042:	70bb      	strb	r3, [r7, #2]
 8014044:	4613      	mov	r3, r2
 8014046:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014048:	78ba      	ldrb	r2, [r7, #2]
 801404a:	78f9      	ldrb	r1, [r7, #3]
 801404c:	2300      	movs	r3, #0
 801404e:	9307      	str	r3, [sp, #28]
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	9306      	str	r3, [sp, #24]
 8014054:	883b      	ldrh	r3, [r7, #0]
 8014056:	9305      	str	r3, [sp, #20]
 8014058:	883b      	ldrh	r3, [r7, #0]
 801405a:	9304      	str	r3, [sp, #16]
 801405c:	2300      	movs	r3, #0
 801405e:	9303      	str	r3, [sp, #12]
 8014060:	2301      	movs	r3, #1
 8014062:	9302      	str	r3, [sp, #8]
 8014064:	2300      	movs	r3, #0
 8014066:	9301      	str	r3, [sp, #4]
 8014068:	2306      	movs	r3, #6
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	2380      	movs	r3, #128	; 0x80
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	f7fe fffd 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8014074:	4603      	mov	r3, r0
}
 8014076:	4618      	mov	r0, r3
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}

0801407e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 801407e:	b580      	push	{r7, lr}
 8014080:	b08a      	sub	sp, #40	; 0x28
 8014082:	af08      	add	r7, sp, #32
 8014084:	6078      	str	r0, [r7, #4]
 8014086:	4608      	mov	r0, r1
 8014088:	4611      	mov	r1, r2
 801408a:	461a      	mov	r2, r3
 801408c:	4603      	mov	r3, r0
 801408e:	70fb      	strb	r3, [r7, #3]
 8014090:	460b      	mov	r3, r1
 8014092:	70bb      	strb	r3, [r7, #2]
 8014094:	4613      	mov	r3, r2
 8014096:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8014098:	78ba      	ldrb	r2, [r7, #2]
 801409a:	78f9      	ldrb	r1, [r7, #3]
 801409c:	2300      	movs	r3, #0
 801409e:	9307      	str	r3, [sp, #28]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	9306      	str	r3, [sp, #24]
 80140a4:	883b      	ldrh	r3, [r7, #0]
 80140a6:	9305      	str	r3, [sp, #20]
 80140a8:	883b      	ldrh	r3, [r7, #0]
 80140aa:	9304      	str	r3, [sp, #16]
 80140ac:	2300      	movs	r3, #0
 80140ae:	9303      	str	r3, [sp, #12]
 80140b0:	2302      	movs	r3, #2
 80140b2:	9302      	str	r3, [sp, #8]
 80140b4:	7c3b      	ldrb	r3, [r7, #16]
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	2306      	movs	r3, #6
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	2380      	movs	r3, #128	; 0x80
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f7fe ffd5 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80140c4:	4603      	mov	r3, r0
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3708      	adds	r7, #8
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}

080140ce <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 80140ce:	b580      	push	{r7, lr}
 80140d0:	b09e      	sub	sp, #120	; 0x78
 80140d2:	af08      	add	r7, sp, #32
 80140d4:	6078      	str	r0, [r7, #4]
 80140d6:	4608      	mov	r0, r1
 80140d8:	4611      	mov	r1, r2
 80140da:	461a      	mov	r2, r3
 80140dc:	4603      	mov	r3, r0
 80140de:	70fb      	strb	r3, [r7, #3]
 80140e0:	460b      	mov	r3, r1
 80140e2:	70bb      	strb	r3, [r7, #2]
 80140e4:	4613      	mov	r3, r2
 80140e6:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 80140e8:	2340      	movs	r3, #64	; 0x40
 80140ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 80140ee:	f107 030c 	add.w	r3, r7, #12
 80140f2:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 80140f4:	78ba      	ldrb	r2, [r7, #2]
 80140f6:	78f9      	ldrb	r1, [r7, #3]
 80140f8:	f107 030c 	add.w	r3, r7, #12
 80140fc:	9301      	str	r3, [sp, #4]
 80140fe:	787b      	ldrb	r3, [r7, #1]
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	2309      	movs	r3, #9
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7ff ffba 	bl	801407e <_ZN3USB12getConfDescrEhhthPh>
 801410a:	4603      	mov	r3, r0
 801410c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 8014110:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8014114:	2b00      	cmp	r3, #0
 8014116:	d002      	beq.n	801411e <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 8014118:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801411c:	e020      	b.n	8014160 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 801411e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014120:	789a      	ldrb	r2, [r3, #2]
 8014122:	78db      	ldrb	r3, [r3, #3]
 8014124:	021b      	lsls	r3, r3, #8
 8014126:	4313      	orrs	r3, r2
 8014128:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 801412c:	78ba      	ldrb	r2, [r7, #2]
 801412e:	78f9      	ldrb	r1, [r7, #3]
 8014130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014132:	9307      	str	r3, [sp, #28]
 8014134:	f107 030c 	add.w	r3, r7, #12
 8014138:	9306      	str	r3, [sp, #24]
 801413a:	2340      	movs	r3, #64	; 0x40
 801413c:	9305      	str	r3, [sp, #20]
 801413e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8014142:	9304      	str	r3, [sp, #16]
 8014144:	2300      	movs	r3, #0
 8014146:	9303      	str	r3, [sp, #12]
 8014148:	2302      	movs	r3, #2
 801414a:	9302      	str	r3, [sp, #8]
 801414c:	787b      	ldrb	r3, [r7, #1]
 801414e:	9301      	str	r3, [sp, #4]
 8014150:	2306      	movs	r3, #6
 8014152:	9300      	str	r3, [sp, #0]
 8014154:	2380      	movs	r3, #128	; 0x80
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7fe ff89 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801415c:	4603      	mov	r3, r0
 801415e:	bf00      	nop
}
 8014160:	4618      	mov	r0, r3
 8014162:	3758      	adds	r7, #88	; 0x58
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8014168:	b580      	push	{r7, lr}
 801416a:	b08c      	sub	sp, #48	; 0x30
 801416c:	af08      	add	r7, sp, #32
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	4608      	mov	r0, r1
 8014172:	4611      	mov	r1, r2
 8014174:	461a      	mov	r2, r3
 8014176:	4603      	mov	r3, r0
 8014178:	70fb      	strb	r3, [r7, #3]
 801417a:	460b      	mov	r3, r1
 801417c:	70bb      	strb	r3, [r7, #2]
 801417e:	4613      	mov	r3, r2
 8014180:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8014182:	78ba      	ldrb	r2, [r7, #2]
 8014184:	78f9      	ldrb	r1, [r7, #3]
 8014186:	2300      	movs	r3, #0
 8014188:	9307      	str	r3, [sp, #28]
 801418a:	2300      	movs	r3, #0
 801418c:	9306      	str	r3, [sp, #24]
 801418e:	2300      	movs	r3, #0
 8014190:	9305      	str	r3, [sp, #20]
 8014192:	2300      	movs	r3, #0
 8014194:	9304      	str	r3, [sp, #16]
 8014196:	2300      	movs	r3, #0
 8014198:	9303      	str	r3, [sp, #12]
 801419a:	2300      	movs	r3, #0
 801419c:	9302      	str	r3, [sp, #8]
 801419e:	787b      	ldrb	r3, [r7, #1]
 80141a0:	9301      	str	r3, [sp, #4]
 80141a2:	2305      	movs	r3, #5
 80141a4:	9300      	str	r3, [sp, #0]
 80141a6:	2300      	movs	r3, #0
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7fe ff60 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80141ae:	4603      	mov	r3, r0
 80141b0:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 80141b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80141b6:	f7ef fbbd 	bl	8003934 <HAL_Delay>
        return rcode;
 80141ba:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3710      	adds	r7, #16
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b08a      	sub	sp, #40	; 0x28
 80141c8:	af08      	add	r7, sp, #32
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	4608      	mov	r0, r1
 80141ce:	4611      	mov	r1, r2
 80141d0:	461a      	mov	r2, r3
 80141d2:	4603      	mov	r3, r0
 80141d4:	70fb      	strb	r3, [r7, #3]
 80141d6:	460b      	mov	r3, r1
 80141d8:	70bb      	strb	r3, [r7, #2]
 80141da:	4613      	mov	r3, r2
 80141dc:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 80141de:	78ba      	ldrb	r2, [r7, #2]
 80141e0:	78f9      	ldrb	r1, [r7, #3]
 80141e2:	2300      	movs	r3, #0
 80141e4:	9307      	str	r3, [sp, #28]
 80141e6:	2300      	movs	r3, #0
 80141e8:	9306      	str	r3, [sp, #24]
 80141ea:	2300      	movs	r3, #0
 80141ec:	9305      	str	r3, [sp, #20]
 80141ee:	2300      	movs	r3, #0
 80141f0:	9304      	str	r3, [sp, #16]
 80141f2:	2300      	movs	r3, #0
 80141f4:	9303      	str	r3, [sp, #12]
 80141f6:	2300      	movs	r3, #0
 80141f8:	9302      	str	r3, [sp, #8]
 80141fa:	787b      	ldrb	r3, [r7, #1]
 80141fc:	9301      	str	r3, [sp, #4]
 80141fe:	2309      	movs	r3, #9
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	2300      	movs	r3, #0
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7fe ff32 	bl	801306e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801420a:	4603      	mov	r3, r0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 8014214:	b480      	push	{r7}
 8014216:	b083      	sub	sp, #12
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
};
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	4618      	mov	r0, r3
 8014220:	370c      	adds	r7, #12
 8014222:	46bd      	mov	sp, r7
 8014224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014228:	4770      	bx	lr
	...

0801422c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 801422c:	b480      	push	{r7}
 801422e:	b083      	sub	sp, #12
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	4a04      	ldr	r2, [pc, #16]	; (8014248 <_ZN11AddressPoolC1Ev+0x1c>)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	601a      	str	r2, [r3, #0]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	0801959c 	.word	0x0801959c

0801424c <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 801424c:	b580      	push	{r7, lr}
 801424e:	b082      	sub	sp, #8
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4618      	mov	r0, r3
 8014258:	f7ff ffe8 	bl	801422c <_ZN11AddressPoolC1Ev>
 801425c:	4a17      	ldr	r2, [pc, #92]	; (80142bc <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	601a      	str	r2, [r3, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2200      	movs	r2, #0
 8014266:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8014268:	2100      	movs	r1, #0
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f000 f990 	bl	8014590 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	1d1a      	adds	r2, r3, #4
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2200      	movs	r2, #0
 8014282:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2208      	movs	r2, #8
 8014288:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	7993      	ldrb	r3, [r2, #6]
 801428e:	f36f 0300 	bfc	r3, #0, #1
 8014292:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	7993      	ldrb	r3, [r2, #6]
 8014298:	f36f 0341 	bfc	r3, #1, #1
 801429c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	7993      	ldrb	r3, [r2, #6]
 80142a2:	210f      	movs	r1, #15
 80142a4:	f361 0387 	bfi	r3, r1, #2, #6
 80142a8:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 80142aa:	6878      	ldr	r0, [r7, #4]
 80142ac:	f000 f9a1 	bl	80145f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	4618      	mov	r0, r3
 80142b4:	3708      	adds	r7, #8
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	08019588 	.word	0x08019588

080142c0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	460b      	mov	r3, r1
 80142ca:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 80142cc:	78fb      	ldrb	r3, [r7, #3]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d102      	bne.n	80142d8 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	3308      	adds	r3, #8
 80142d6:	e014      	b.n	8014302 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 80142d8:	78fb      	ldrb	r3, [r7, #3]
 80142da:	4619      	mov	r1, r3
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 f9a1 	bl	8014624 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 80142e2:	4603      	mov	r3, r0
 80142e4:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 80142e6:	7bfb      	ldrb	r3, [r7, #15]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d008      	beq.n	80142fe <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f103 0108 	add.w	r1, r3, #8
 80142f2:	7bfa      	ldrb	r2, [r7, #15]
 80142f4:	4613      	mov	r3, r2
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	1a9b      	subs	r3, r3, r2
 80142fa:	440b      	add	r3, r1
 80142fc:	e000      	b.n	8014300 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 80142fe:	2300      	movs	r3, #0
 8014300:	bf00      	nop
        };
 8014302:	4618      	mov	r0, r3
 8014304:	3710      	adds	r7, #16
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
	...

0801430c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 801430c:	b580      	push	{r7, lr}
 801430e:	b086      	sub	sp, #24
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	607b      	str	r3, [r7, #4]
 8014316:	460b      	mov	r3, r1
 8014318:	72fb      	strb	r3, [r7, #11]
 801431a:	4613      	mov	r3, r2
 801431c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 801431e:	f7ec ffdd 	bl	80012dc <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 8014322:	7afb      	ldrb	r3, [r7, #11]
 8014324:	f043 0302 	orr.w	r3, r3, #2
 8014328:	b2db      	uxtb	r3, r3
 801432a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 801432c:	f107 0117 	add.w	r1, r7, #23
 8014330:	f04f 33ff 	mov.w	r3, #4294967295
 8014334:	2201      	movs	r2, #1
 8014336:	480b      	ldr	r0, [pc, #44]	; (8014364 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8014338:	f7f2 fd29 	bl	8006d8e <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 801433c:	7abb      	ldrb	r3, [r7, #10]
 801433e:	b29a      	uxth	r2, r3
 8014340:	f04f 33ff 	mov.w	r3, #4294967295
 8014344:	6879      	ldr	r1, [r7, #4]
 8014346:	4807      	ldr	r0, [pc, #28]	; (8014364 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 8014348:	f7f2 fd21 	bl	8006d8e <HAL_SPI_Transmit>
        data_p += nbytes;
 801434c:	7abb      	ldrb	r3, [r7, #10]
 801434e:	687a      	ldr	r2, [r7, #4]
 8014350:	4413      	add	r3, r2
 8014352:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 8014354:	f7ec ffb6 	bl	80012c4 <_ZN3P103SetEv>
        return ( data_p);
 8014358:	687b      	ldr	r3, [r7, #4]
}
 801435a:	4618      	mov	r0, r3
 801435c:	3718      	adds	r7, #24
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	20000354 	.word	0x20000354

08014368 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8014368:	b480      	push	{r7}
 801436a:	b083      	sub	sp, #12
 801436c:	af00      	add	r7, sp, #0
 801436e:	4603      	mov	r3, r0
 8014370:	6039      	str	r1, [r7, #0]
 8014372:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8014374:	bf00      	nop
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	607b      	str	r3, [r7, #4]
 801438a:	460b      	mov	r3, r1
 801438c:	72fb      	strb	r3, [r7, #11]
 801438e:	4613      	mov	r3, r2
 8014390:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8014392:	f7ec ffa3 	bl	80012dc <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8014396:	f107 010b 	add.w	r1, r7, #11
 801439a:	f04f 33ff 	mov.w	r3, #4294967295
 801439e:	2201      	movs	r2, #1
 80143a0:	480d      	ldr	r0, [pc, #52]	; (80143d8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 80143a2:	f7f2 fcf4 	bl	8006d8e <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 80143a6:	7abb      	ldrb	r3, [r7, #10]
 80143a8:	461a      	mov	r2, r3
 80143aa:	2100      	movs	r1, #0
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f001 fb33 	bl	8015a18 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80143b2:	7abb      	ldrb	r3, [r7, #10]
 80143b4:	b29a      	uxth	r2, r3
 80143b6:	f04f 33ff 	mov.w	r3, #4294967295
 80143ba:	6879      	ldr	r1, [r7, #4]
 80143bc:	4806      	ldr	r0, [pc, #24]	; (80143d8 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 80143be:	f7f2 fe22 	bl	8007006 <HAL_SPI_Receive>
        data_p += nbytes;
 80143c2:	7abb      	ldrb	r3, [r7, #10]
 80143c4:	687a      	ldr	r2, [r7, #4]
 80143c6:	4413      	add	r3, r2
 80143c8:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80143ca:	f7ec ff7b 	bl	80012c4 <_ZN3P103SetEv>
        return ( data_p);
 80143ce:	687b      	ldr	r3, [r7, #4]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}
 80143d8:	20000354 	.word	0x20000354

080143dc <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 80143e4:	2300      	movs	r3, #0
 80143e6:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 80143e8:	f7fe fd46 	bl	8012e78 <_ZN2P95IsSetEv>
 80143ec:	4603      	mov	r3, r0
 80143ee:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 80143f0:	7bbb      	ldrb	r3, [r7, #14]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d104      	bne.n	8014400 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 f937 	bl	801466a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 80143fc:	4603      	mov	r3, r0
 80143fe:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 8014400:	7bfb      	ldrb	r3, [r7, #15]
}
 8014402:	4618      	mov	r0, r3
 8014404:	3710      	adds	r7, #16
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
	...

0801440c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 801440c:	b480      	push	{r7}
 801440e:	b083      	sub	sp, #12
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
                return vbusState;
 8014414:	4b03      	ldr	r3, [pc, #12]	; (8014424 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 8014416:	781b      	ldrb	r3, [r3, #0]
        };
 8014418:	4618      	mov	r0, r3
 801441a:	370c      	adds	r7, #12
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr
 8014424:	200006d0 	.word	0x200006d0

08014428 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 8014428:	b580      	push	{r7, lr}
 801442a:	b084      	sub	sp, #16
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	4608      	mov	r0, r1
 8014432:	4611      	mov	r1, r2
 8014434:	461a      	mov	r2, r3
 8014436:	4603      	mov	r3, r0
 8014438:	70fb      	strb	r3, [r7, #3]
 801443a:	460b      	mov	r3, r1
 801443c:	70bb      	strb	r3, [r7, #2]
 801443e:	4613      	mov	r3, r2
 8014440:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 8014442:	78fb      	ldrb	r3, [r7, #3]
 8014444:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 8014446:	7b3b      	ldrb	r3, [r7, #12]
 8014448:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801444c:	b2db      	uxtb	r3, r3
 801444e:	2b00      	cmp	r3, #0
 8014450:	d102      	bne.n	8014458 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 8014452:	787b      	ldrb	r3, [r7, #1]
 8014454:	2b07      	cmp	r3, #7
 8014456:	d901      	bls.n	801445c <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 8014458:	2300      	movs	r3, #0
 801445a:	e079      	b.n	8014550 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 801445c:	78bb      	ldrb	r3, [r7, #2]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d005      	beq.n	801446e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	79db      	ldrb	r3, [r3, #7]
 8014466:	2b07      	cmp	r3, #7
 8014468:	d101      	bne.n	801446e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801446a:	2300      	movs	r3, #0
 801446c:	e070      	b.n	8014550 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801446e:	2100      	movs	r1, #0
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f000 f8d7 	bl	8014624 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8014476:	4603      	mov	r3, r0
 8014478:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801447a:	7bfb      	ldrb	r3, [r7, #15]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d101      	bne.n	8014484 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8014480:	2300      	movs	r3, #0
 8014482:	e065      	b.n	8014550 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8014484:	7b3b      	ldrb	r3, [r7, #12]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d124      	bne.n	80144d4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801448a:	78bb      	ldrb	r3, [r7, #2]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00f      	beq.n	80144b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8014490:	7bfa      	ldrb	r2, [r7, #15]
 8014492:	6879      	ldr	r1, [r7, #4]
 8014494:	4613      	mov	r3, r2
 8014496:	00db      	lsls	r3, r3, #3
 8014498:	1a9b      	subs	r3, r3, r2
 801449a:	440b      	add	r3, r1
 801449c:	330c      	adds	r3, #12
 801449e:	2241      	movs	r2, #65	; 0x41
 80144a0:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	79db      	ldrb	r3, [r3, #7]
 80144a6:	3301      	adds	r3, #1
 80144a8:	b2da      	uxtb	r2, r3
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	71da      	strb	r2, [r3, #7]
 80144ae:	e008      	b.n	80144c2 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 80144b0:	7bfa      	ldrb	r2, [r7, #15]
 80144b2:	6879      	ldr	r1, [r7, #4]
 80144b4:	4613      	mov	r3, r2
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	1a9b      	subs	r3, r3, r2
 80144ba:	440b      	add	r3, r1
 80144bc:	330c      	adds	r3, #12
 80144be:	2201      	movs	r2, #1
 80144c0:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 80144c2:	7bfa      	ldrb	r2, [r7, #15]
 80144c4:	6879      	ldr	r1, [r7, #4]
 80144c6:	4613      	mov	r3, r2
 80144c8:	00db      	lsls	r3, r3, #3
 80144ca:	1a9b      	subs	r3, r3, r2
 80144cc:	440b      	add	r3, r1
 80144ce:	330c      	adds	r3, #12
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	e03d      	b.n	8014550 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 80144d4:	2300      	movs	r3, #0
 80144d6:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 80144d8:	7b3b      	ldrb	r3, [r7, #12]
 80144da:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80144de:	b2da      	uxtb	r2, r3
 80144e0:	7a3b      	ldrb	r3, [r7, #8]
 80144e2:	f362 03c5 	bfi	r3, r2, #3, #3
 80144e6:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 80144e8:	78bb      	ldrb	r3, [r7, #2]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d013      	beq.n	8014516 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 80144ee:	7a3b      	ldrb	r3, [r7, #8]
 80144f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144f4:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	79db      	ldrb	r3, [r3, #7]
 80144fa:	3301      	adds	r3, #1
 80144fc:	b2da      	uxtb	r2, r3
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	71da      	strb	r2, [r3, #7]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	79db      	ldrb	r3, [r3, #7]
 8014506:	f003 0307 	and.w	r3, r3, #7
 801450a:	b2da      	uxtb	r2, r3
 801450c:	7a3b      	ldrb	r3, [r7, #8]
 801450e:	f362 0302 	bfi	r3, r2, #0, #3
 8014512:	723b      	strb	r3, [r7, #8]
 8014514:	e00b      	b.n	801452e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 8014516:	7a3b      	ldrb	r3, [r7, #8]
 8014518:	f36f 1386 	bfc	r3, #6, #1
 801451c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 801451e:	787b      	ldrb	r3, [r7, #1]
 8014520:	f003 0307 	and.w	r3, r3, #7
 8014524:	b2da      	uxtb	r2, r3
 8014526:	7a3b      	ldrb	r3, [r7, #8]
 8014528:	f362 0302 	bfi	r3, r2, #0, #3
 801452c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 801452e:	7bfa      	ldrb	r2, [r7, #15]
 8014530:	6879      	ldr	r1, [r7, #4]
 8014532:	4613      	mov	r3, r2
 8014534:	00db      	lsls	r3, r3, #3
 8014536:	1a9b      	subs	r3, r3, r2
 8014538:	440b      	add	r3, r1
 801453a:	330c      	adds	r3, #12
 801453c:	7a3a      	ldrb	r2, [r7, #8]
 801453e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 8014540:	7bfa      	ldrb	r2, [r7, #15]
 8014542:	6879      	ldr	r1, [r7, #4]
 8014544:	4613      	mov	r3, r2
 8014546:	00db      	lsls	r3, r3, #3
 8014548:	1a9b      	subs	r3, r3, r2
 801454a:	440b      	add	r3, r1
 801454c:	330c      	adds	r3, #12
 801454e:	781b      	ldrb	r3, [r3, #0]
        };
 8014550:	4618      	mov	r0, r3
 8014552:	3710      	adds	r7, #16
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	460b      	mov	r3, r1
 8014562:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8014564:	78fb      	ldrb	r3, [r7, #3]
 8014566:	2b41      	cmp	r3, #65	; 0x41
 8014568:	d103      	bne.n	8014572 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 f841 	bl	80145f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8014570:	e00b      	b.n	801458a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8014572:	78fb      	ldrb	r3, [r7, #3]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 f854 	bl	8014624 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801457c:	4603      	mov	r3, r0
 801457e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8014580:	7bfb      	ldrb	r3, [r7, #15]
 8014582:	4619      	mov	r1, r3
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f000 f893 	bl	80146b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801458a:	3710      	adds	r7, #16
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}

08014590 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	460b      	mov	r3, r1
 801459a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801459c:	78fa      	ldrb	r2, [r7, #3]
 801459e:	6879      	ldr	r1, [r7, #4]
 80145a0:	4613      	mov	r3, r2
 80145a2:	00db      	lsls	r3, r3, #3
 80145a4:	1a9b      	subs	r3, r3, r2
 80145a6:	440b      	add	r3, r1
 80145a8:	330c      	adds	r3, #12
 80145aa:	2200      	movs	r2, #0
 80145ac:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 80145ae:	78fa      	ldrb	r2, [r7, #3]
 80145b0:	6879      	ldr	r1, [r7, #4]
 80145b2:	4613      	mov	r3, r2
 80145b4:	00db      	lsls	r3, r3, #3
 80145b6:	1a9b      	subs	r3, r3, r2
 80145b8:	440b      	add	r3, r1
 80145ba:	330d      	adds	r3, #13
 80145bc:	2201      	movs	r2, #1
 80145be:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 80145c0:	78fa      	ldrb	r2, [r7, #3]
 80145c2:	6879      	ldr	r1, [r7, #4]
 80145c4:	4613      	mov	r3, r2
 80145c6:	00db      	lsls	r3, r3, #3
 80145c8:	1a9b      	subs	r3, r3, r2
 80145ca:	440b      	add	r3, r1
 80145cc:	330e      	adds	r3, #14
 80145ce:	2200      	movs	r2, #0
 80145d0:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 80145d2:	78fa      	ldrb	r2, [r7, #3]
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	1d19      	adds	r1, r3, #4
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	4613      	mov	r3, r2
 80145dc:	00db      	lsls	r3, r3, #3
 80145de:	1a9b      	subs	r3, r3, r2
 80145e0:	4403      	add	r3, r0
 80145e2:	3308      	adds	r3, #8
 80145e4:	6019      	str	r1, [r3, #0]
        };
 80145e6:	bf00      	nop
 80145e8:	370c      	adds	r7, #12
 80145ea:	46bd      	mov	sp, r7
 80145ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f0:	4770      	bx	lr

080145f2 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 80145f2:	b580      	push	{r7, lr}
 80145f4:	b084      	sub	sp, #16
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80145fa:	2301      	movs	r3, #1
 80145fc:	73fb      	strb	r3, [r7, #15]
 80145fe:	7bfb      	ldrb	r3, [r7, #15]
 8014600:	2b0f      	cmp	r3, #15
 8014602:	d808      	bhi.n	8014616 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 8014604:	7bfb      	ldrb	r3, [r7, #15]
 8014606:	4619      	mov	r1, r3
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f7ff ffc1 	bl	8014590 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801460e:	7bfb      	ldrb	r3, [r7, #15]
 8014610:	3301      	adds	r3, #1
 8014612:	73fb      	strb	r3, [r7, #15]
 8014614:	e7f3      	b.n	80145fe <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2200      	movs	r2, #0
 801461a:	71da      	strb	r2, [r3, #7]
        };
 801461c:	bf00      	nop
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	460b      	mov	r3, r1
 801462e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8014630:	2301      	movs	r3, #1
 8014632:	73fb      	strb	r3, [r7, #15]
 8014634:	7bfb      	ldrb	r3, [r7, #15]
 8014636:	2b0f      	cmp	r3, #15
 8014638:	d810      	bhi.n	801465c <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 801463a:	7bfa      	ldrb	r2, [r7, #15]
 801463c:	6879      	ldr	r1, [r7, #4]
 801463e:	4613      	mov	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	1a9b      	subs	r3, r3, r2
 8014644:	440b      	add	r3, r1
 8014646:	330c      	adds	r3, #12
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	78fa      	ldrb	r2, [r7, #3]
 801464c:	429a      	cmp	r2, r3
 801464e:	d101      	bne.n	8014654 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 8014650:	7bfb      	ldrb	r3, [r7, #15]
 8014652:	e004      	b.n	801465e <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 8014654:	7bfb      	ldrb	r3, [r7, #15]
 8014656:	3301      	adds	r3, #1
 8014658:	73fb      	strb	r3, [r7, #15]
 801465a:	e7eb      	b.n	8014634 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 801465c:	2300      	movs	r3, #0
        };
 801465e:	4618      	mov	r0, r3
 8014660:	3714      	adds	r7, #20
 8014662:	46bd      	mov	sp, r7
 8014664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014668:	4770      	bx	lr

0801466a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801466a:	b580      	push	{r7, lr}
 801466c:	b084      	sub	sp, #16
 801466e:	af00      	add	r7, sp, #0
 8014670:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8014672:	2300      	movs	r3, #0
 8014674:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8014676:	21c8      	movs	r1, #200	; 0xc8
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f7ed fef9 	bl	8002470 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801467e:	4603      	mov	r3, r0
 8014680:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8014682:	7bbb      	ldrb	r3, [r7, #14]
 8014684:	f003 0320 	and.w	r3, r3, #32
 8014688:	2b00      	cmp	r3, #0
 801468a:	d006      	beq.n	801469a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f7ed ff11 	bl	80024b4 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8014692:	7bfb      	ldrb	r3, [r7, #15]
 8014694:	f043 0320 	orr.w	r3, r3, #32
 8014698:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801469a:	7bfb      	ldrb	r3, [r7, #15]
 801469c:	461a      	mov	r2, r3
 801469e:	21c8      	movs	r1, #200	; 0xc8
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7ed fe93 	bl	80023cc <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3710      	adds	r7, #16
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bd80      	pop	{r7, pc}

080146b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b084      	sub	sp, #16
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
 80146b8:	460b      	mov	r3, r1
 80146ba:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 80146bc:	78fb      	ldrb	r3, [r7, #3]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d03a      	beq.n	8014738 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 80146c2:	78fa      	ldrb	r2, [r7, #3]
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	4613      	mov	r3, r2
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	1a9b      	subs	r3, r3, r2
 80146cc:	440b      	add	r3, r1
 80146ce:	330c      	adds	r3, #12
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 80146d4:	7b3b      	ldrb	r3, [r7, #12]
 80146d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d025      	beq.n	801472c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80146e0:	2301      	movs	r3, #1
 80146e2:	73fb      	strb	r3, [r7, #15]
 80146e4:	7bfb      	ldrb	r3, [r7, #15]
 80146e6:	461a      	mov	r2, r3
 80146e8:	7b39      	ldrb	r1, [r7, #12]
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 f828 	bl	8014740 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 80146f0:	4603      	mov	r3, r0
 80146f2:	73fb      	strb	r3, [r7, #15]
 80146f4:	7bfb      	ldrb	r3, [r7, #15]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	bf14      	ite	ne
 80146fa:	2301      	movne	r3, #1
 80146fc:	2300      	moveq	r3, #0
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	2b00      	cmp	r3, #0
 8014702:	d005      	beq.n	8014710 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 8014704:	7bfb      	ldrb	r3, [r7, #15]
 8014706:	4619      	mov	r1, r3
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7ff ffd1 	bl	80146b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 801470e:	e7e9      	b.n	80146e4 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	79db      	ldrb	r3, [r3, #7]
 8014714:	7b3a      	ldrb	r2, [r7, #12]
 8014716:	f3c2 0202 	ubfx	r2, r2, #0, #3
 801471a:	b2d2      	uxtb	r2, r2
 801471c:	4293      	cmp	r3, r2
 801471e:	d105      	bne.n	801472c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	79db      	ldrb	r3, [r3, #7]
 8014724:	3b01      	subs	r3, #1
 8014726:	b2da      	uxtb	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 801472c:	78fb      	ldrb	r3, [r7, #3]
 801472e:	4619      	mov	r1, r3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7ff ff2d 	bl	8014590 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 8014736:	e000      	b.n	801473a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 8014738:	bf00      	nop
        }
 801473a:	3710      	adds	r7, #16
 801473c:	46bd      	mov	sp, r7
 801473e:	bd80      	pop	{r7, pc}

08014740 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 8014740:	b480      	push	{r7}
 8014742:	b085      	sub	sp, #20
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	7039      	strb	r1, [r7, #0]
 801474a:	4613      	mov	r3, r2
 801474c:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801474e:	78fb      	ldrb	r3, [r7, #3]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d004      	beq.n	801475e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 8014754:	78fb      	ldrb	r3, [r7, #3]
 8014756:	2b0f      	cmp	r3, #15
 8014758:	d801      	bhi.n	801475e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 801475a:	78fb      	ldrb	r3, [r7, #3]
 801475c:	e000      	b.n	8014760 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 801475e:	2301      	movs	r3, #1
 8014760:	73fb      	strb	r3, [r7, #15]
 8014762:	7bfb      	ldrb	r3, [r7, #15]
 8014764:	2b0f      	cmp	r3, #15
 8014766:	d816      	bhi.n	8014796 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8014768:	7bfa      	ldrb	r2, [r7, #15]
 801476a:	6879      	ldr	r1, [r7, #4]
 801476c:	4613      	mov	r3, r2
 801476e:	00db      	lsls	r3, r3, #3
 8014770:	1a9b      	subs	r3, r3, r2
 8014772:	440b      	add	r3, r1
 8014774:	3308      	adds	r3, #8
 8014776:	791b      	ldrb	r3, [r3, #4]
 8014778:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801477c:	b2da      	uxtb	r2, r3
 801477e:	783b      	ldrb	r3, [r7, #0]
 8014780:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014784:	b2db      	uxtb	r3, r3
 8014786:	429a      	cmp	r2, r3
 8014788:	d101      	bne.n	801478e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801478a:	7bfb      	ldrb	r3, [r7, #15]
 801478c:	e004      	b.n	8014798 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801478e:	7bfb      	ldrb	r3, [r7, #15]
 8014790:	3301      	adds	r3, #1
 8014792:	73fb      	strb	r3, [r7, #15]
 8014794:	e7e5      	b.n	8014762 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8014796:	2300      	movs	r3, #0
        };
 8014798:	4618      	mov	r0, r3
 801479a:	3714      	adds	r7, #20
 801479c:	46bd      	mov	sp, r7
 801479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a2:	4770      	bx	lr

080147a4 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 80147a4:	b480      	push	{r7}
 80147a6:	b085      	sub	sp, #20
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d101      	bne.n	80147bc <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 80147b8:	2300      	movs	r3, #0
 80147ba:	e031      	b.n	8014820 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	791b      	ldrb	r3, [r3, #4]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d022      	beq.n	801480a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d01e      	beq.n	801480a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	681a      	ldr	r2, [r3, #0]
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	68f9      	ldr	r1, [r7, #12]
 80147d6:	7949      	ldrb	r1, [r1, #5]
 80147d8:	4608      	mov	r0, r1
 80147da:	68f9      	ldr	r1, [r7, #12]
 80147dc:	7909      	ldrb	r1, [r1, #4]
 80147de:	1a41      	subs	r1, r0, r1
 80147e0:	440b      	add	r3, r1
 80147e2:	7812      	ldrb	r2, [r2, #0]
 80147e4:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	791b      	ldrb	r3, [r3, #4]
 80147ea:	3b01      	subs	r3, #1
 80147ec:	b2da      	uxtb	r2, r3
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	711a      	strb	r2, [r3, #4]
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	881b      	ldrh	r3, [r3, #0]
 80147f6:	3b01      	subs	r3, #1
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	801a      	strh	r2, [r3, #0]
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	1c5a      	adds	r2, r3, #1
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	601a      	str	r2, [r3, #0]
 8014808:	e7d8      	b.n	80147bc <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	791b      	ldrb	r3, [r3, #4]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d001      	beq.n	8014816 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 8014812:	2300      	movs	r3, #0
 8014814:	e004      	b.n	8014820 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	795a      	ldrb	r2, [r3, #5]
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	711a      	strb	r2, [r3, #4]
        return true;
 801481e:	2301      	movs	r3, #1
}
 8014820:	4618      	mov	r0, r3
 8014822:	3714      	adds	r7, #20
 8014824:	46bd      	mov	sp, r7
 8014826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801482a:	4770      	bx	lr

0801482c <__cxa_pure_virtual>:
 801482c:	b508      	push	{r3, lr}
 801482e:	f000 f80d 	bl	801484c <_ZSt9terminatev>

08014832 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8014832:	b508      	push	{r3, lr}
 8014834:	4780      	blx	r0
 8014836:	f001 f895 	bl	8015964 <abort>
	...

0801483c <_ZSt13get_terminatev>:
 801483c:	4b02      	ldr	r3, [pc, #8]	; (8014848 <_ZSt13get_terminatev+0xc>)
 801483e:	6818      	ldr	r0, [r3, #0]
 8014840:	f3bf 8f5b 	dmb	ish
 8014844:	4770      	bx	lr
 8014846:	bf00      	nop
 8014848:	2000015c 	.word	0x2000015c

0801484c <_ZSt9terminatev>:
 801484c:	b508      	push	{r3, lr}
 801484e:	f7ff fff5 	bl	801483c <_ZSt13get_terminatev>
 8014852:	f7ff ffee 	bl	8014832 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08014858 <cos>:
 8014858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801485a:	ec53 2b10 	vmov	r2, r3, d0
 801485e:	4824      	ldr	r0, [pc, #144]	; (80148f0 <cos+0x98>)
 8014860:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014864:	4281      	cmp	r1, r0
 8014866:	dc06      	bgt.n	8014876 <cos+0x1e>
 8014868:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80148e8 <cos+0x90>
 801486c:	f000 faa4 	bl	8014db8 <__kernel_cos>
 8014870:	ec51 0b10 	vmov	r0, r1, d0
 8014874:	e007      	b.n	8014886 <cos+0x2e>
 8014876:	481f      	ldr	r0, [pc, #124]	; (80148f4 <cos+0x9c>)
 8014878:	4281      	cmp	r1, r0
 801487a:	dd09      	ble.n	8014890 <cos+0x38>
 801487c:	ee10 0a10 	vmov	r0, s0
 8014880:	4619      	mov	r1, r3
 8014882:	f7eb fd21 	bl	80002c8 <__aeabi_dsub>
 8014886:	ec41 0b10 	vmov	d0, r0, r1
 801488a:	b005      	add	sp, #20
 801488c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014890:	4668      	mov	r0, sp
 8014892:	f000 f885 	bl	80149a0 <__ieee754_rem_pio2>
 8014896:	f000 0003 	and.w	r0, r0, #3
 801489a:	2801      	cmp	r0, #1
 801489c:	d007      	beq.n	80148ae <cos+0x56>
 801489e:	2802      	cmp	r0, #2
 80148a0:	d012      	beq.n	80148c8 <cos+0x70>
 80148a2:	b9c0      	cbnz	r0, 80148d6 <cos+0x7e>
 80148a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148a8:	ed9d 0b00 	vldr	d0, [sp]
 80148ac:	e7de      	b.n	801486c <cos+0x14>
 80148ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148b2:	ed9d 0b00 	vldr	d0, [sp]
 80148b6:	f000 fe87 	bl	80155c8 <__kernel_sin>
 80148ba:	ec53 2b10 	vmov	r2, r3, d0
 80148be:	ee10 0a10 	vmov	r0, s0
 80148c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80148c6:	e7de      	b.n	8014886 <cos+0x2e>
 80148c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148cc:	ed9d 0b00 	vldr	d0, [sp]
 80148d0:	f000 fa72 	bl	8014db8 <__kernel_cos>
 80148d4:	e7f1      	b.n	80148ba <cos+0x62>
 80148d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148da:	ed9d 0b00 	vldr	d0, [sp]
 80148de:	2001      	movs	r0, #1
 80148e0:	f000 fe72 	bl	80155c8 <__kernel_sin>
 80148e4:	e7c4      	b.n	8014870 <cos+0x18>
 80148e6:	bf00      	nop
	...
 80148f0:	3fe921fb 	.word	0x3fe921fb
 80148f4:	7fefffff 	.word	0x7fefffff

080148f8 <sin>:
 80148f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148fa:	ec53 2b10 	vmov	r2, r3, d0
 80148fe:	4826      	ldr	r0, [pc, #152]	; (8014998 <sin+0xa0>)
 8014900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014904:	4281      	cmp	r1, r0
 8014906:	dc07      	bgt.n	8014918 <sin+0x20>
 8014908:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8014990 <sin+0x98>
 801490c:	2000      	movs	r0, #0
 801490e:	f000 fe5b 	bl	80155c8 <__kernel_sin>
 8014912:	ec51 0b10 	vmov	r0, r1, d0
 8014916:	e007      	b.n	8014928 <sin+0x30>
 8014918:	4820      	ldr	r0, [pc, #128]	; (801499c <sin+0xa4>)
 801491a:	4281      	cmp	r1, r0
 801491c:	dd09      	ble.n	8014932 <sin+0x3a>
 801491e:	ee10 0a10 	vmov	r0, s0
 8014922:	4619      	mov	r1, r3
 8014924:	f7eb fcd0 	bl	80002c8 <__aeabi_dsub>
 8014928:	ec41 0b10 	vmov	d0, r0, r1
 801492c:	b005      	add	sp, #20
 801492e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014932:	4668      	mov	r0, sp
 8014934:	f000 f834 	bl	80149a0 <__ieee754_rem_pio2>
 8014938:	f000 0003 	and.w	r0, r0, #3
 801493c:	2801      	cmp	r0, #1
 801493e:	d008      	beq.n	8014952 <sin+0x5a>
 8014940:	2802      	cmp	r0, #2
 8014942:	d00d      	beq.n	8014960 <sin+0x68>
 8014944:	b9d0      	cbnz	r0, 801497c <sin+0x84>
 8014946:	ed9d 1b02 	vldr	d1, [sp, #8]
 801494a:	ed9d 0b00 	vldr	d0, [sp]
 801494e:	2001      	movs	r0, #1
 8014950:	e7dd      	b.n	801490e <sin+0x16>
 8014952:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014956:	ed9d 0b00 	vldr	d0, [sp]
 801495a:	f000 fa2d 	bl	8014db8 <__kernel_cos>
 801495e:	e7d8      	b.n	8014912 <sin+0x1a>
 8014960:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014964:	ed9d 0b00 	vldr	d0, [sp]
 8014968:	2001      	movs	r0, #1
 801496a:	f000 fe2d 	bl	80155c8 <__kernel_sin>
 801496e:	ec53 2b10 	vmov	r2, r3, d0
 8014972:	ee10 0a10 	vmov	r0, s0
 8014976:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801497a:	e7d5      	b.n	8014928 <sin+0x30>
 801497c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014980:	ed9d 0b00 	vldr	d0, [sp]
 8014984:	f000 fa18 	bl	8014db8 <__kernel_cos>
 8014988:	e7f1      	b.n	801496e <sin+0x76>
 801498a:	bf00      	nop
 801498c:	f3af 8000 	nop.w
	...
 8014998:	3fe921fb 	.word	0x3fe921fb
 801499c:	7fefffff 	.word	0x7fefffff

080149a0 <__ieee754_rem_pio2>:
 80149a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149a4:	ed2d 8b02 	vpush	{d8}
 80149a8:	ec55 4b10 	vmov	r4, r5, d0
 80149ac:	4bca      	ldr	r3, [pc, #808]	; (8014cd8 <__ieee754_rem_pio2+0x338>)
 80149ae:	b08b      	sub	sp, #44	; 0x2c
 80149b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80149b4:	4598      	cmp	r8, r3
 80149b6:	4682      	mov	sl, r0
 80149b8:	9502      	str	r5, [sp, #8]
 80149ba:	dc08      	bgt.n	80149ce <__ieee754_rem_pio2+0x2e>
 80149bc:	2200      	movs	r2, #0
 80149be:	2300      	movs	r3, #0
 80149c0:	ed80 0b00 	vstr	d0, [r0]
 80149c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80149c8:	f04f 0b00 	mov.w	fp, #0
 80149cc:	e028      	b.n	8014a20 <__ieee754_rem_pio2+0x80>
 80149ce:	4bc3      	ldr	r3, [pc, #780]	; (8014cdc <__ieee754_rem_pio2+0x33c>)
 80149d0:	4598      	cmp	r8, r3
 80149d2:	dc78      	bgt.n	8014ac6 <__ieee754_rem_pio2+0x126>
 80149d4:	9b02      	ldr	r3, [sp, #8]
 80149d6:	4ec2      	ldr	r6, [pc, #776]	; (8014ce0 <__ieee754_rem_pio2+0x340>)
 80149d8:	2b00      	cmp	r3, #0
 80149da:	ee10 0a10 	vmov	r0, s0
 80149de:	a3b0      	add	r3, pc, #704	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x300>)
 80149e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e4:	4629      	mov	r1, r5
 80149e6:	dd39      	ble.n	8014a5c <__ieee754_rem_pio2+0xbc>
 80149e8:	f7eb fc6e 	bl	80002c8 <__aeabi_dsub>
 80149ec:	45b0      	cmp	r8, r6
 80149ee:	4604      	mov	r4, r0
 80149f0:	460d      	mov	r5, r1
 80149f2:	d01b      	beq.n	8014a2c <__ieee754_rem_pio2+0x8c>
 80149f4:	a3ac      	add	r3, pc, #688	; (adr r3, 8014ca8 <__ieee754_rem_pio2+0x308>)
 80149f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fa:	f7eb fc65 	bl	80002c8 <__aeabi_dsub>
 80149fe:	4602      	mov	r2, r0
 8014a00:	460b      	mov	r3, r1
 8014a02:	e9ca 2300 	strd	r2, r3, [sl]
 8014a06:	4620      	mov	r0, r4
 8014a08:	4629      	mov	r1, r5
 8014a0a:	f7eb fc5d 	bl	80002c8 <__aeabi_dsub>
 8014a0e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014ca8 <__ieee754_rem_pio2+0x308>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	f7eb fc58 	bl	80002c8 <__aeabi_dsub>
 8014a18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014a1c:	f04f 0b01 	mov.w	fp, #1
 8014a20:	4658      	mov	r0, fp
 8014a22:	b00b      	add	sp, #44	; 0x2c
 8014a24:	ecbd 8b02 	vpop	{d8}
 8014a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2c:	a3a0      	add	r3, pc, #640	; (adr r3, 8014cb0 <__ieee754_rem_pio2+0x310>)
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	f7eb fc49 	bl	80002c8 <__aeabi_dsub>
 8014a36:	a3a0      	add	r3, pc, #640	; (adr r3, 8014cb8 <__ieee754_rem_pio2+0x318>)
 8014a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3c:	4604      	mov	r4, r0
 8014a3e:	460d      	mov	r5, r1
 8014a40:	f7eb fc42 	bl	80002c8 <__aeabi_dsub>
 8014a44:	4602      	mov	r2, r0
 8014a46:	460b      	mov	r3, r1
 8014a48:	e9ca 2300 	strd	r2, r3, [sl]
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	4629      	mov	r1, r5
 8014a50:	f7eb fc3a 	bl	80002c8 <__aeabi_dsub>
 8014a54:	a398      	add	r3, pc, #608	; (adr r3, 8014cb8 <__ieee754_rem_pio2+0x318>)
 8014a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a5a:	e7db      	b.n	8014a14 <__ieee754_rem_pio2+0x74>
 8014a5c:	f7eb fc36 	bl	80002cc <__adddf3>
 8014a60:	45b0      	cmp	r8, r6
 8014a62:	4604      	mov	r4, r0
 8014a64:	460d      	mov	r5, r1
 8014a66:	d016      	beq.n	8014a96 <__ieee754_rem_pio2+0xf6>
 8014a68:	a38f      	add	r3, pc, #572	; (adr r3, 8014ca8 <__ieee754_rem_pio2+0x308>)
 8014a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a6e:	f7eb fc2d 	bl	80002cc <__adddf3>
 8014a72:	4602      	mov	r2, r0
 8014a74:	460b      	mov	r3, r1
 8014a76:	e9ca 2300 	strd	r2, r3, [sl]
 8014a7a:	4620      	mov	r0, r4
 8014a7c:	4629      	mov	r1, r5
 8014a7e:	f7eb fc23 	bl	80002c8 <__aeabi_dsub>
 8014a82:	a389      	add	r3, pc, #548	; (adr r3, 8014ca8 <__ieee754_rem_pio2+0x308>)
 8014a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a88:	f7eb fc20 	bl	80002cc <__adddf3>
 8014a8c:	f04f 3bff 	mov.w	fp, #4294967295
 8014a90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014a94:	e7c4      	b.n	8014a20 <__ieee754_rem_pio2+0x80>
 8014a96:	a386      	add	r3, pc, #536	; (adr r3, 8014cb0 <__ieee754_rem_pio2+0x310>)
 8014a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9c:	f7eb fc16 	bl	80002cc <__adddf3>
 8014aa0:	a385      	add	r3, pc, #532	; (adr r3, 8014cb8 <__ieee754_rem_pio2+0x318>)
 8014aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa6:	4604      	mov	r4, r0
 8014aa8:	460d      	mov	r5, r1
 8014aaa:	f7eb fc0f 	bl	80002cc <__adddf3>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	e9ca 2300 	strd	r2, r3, [sl]
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	4629      	mov	r1, r5
 8014aba:	f7eb fc05 	bl	80002c8 <__aeabi_dsub>
 8014abe:	a37e      	add	r3, pc, #504	; (adr r3, 8014cb8 <__ieee754_rem_pio2+0x318>)
 8014ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac4:	e7e0      	b.n	8014a88 <__ieee754_rem_pio2+0xe8>
 8014ac6:	4b87      	ldr	r3, [pc, #540]	; (8014ce4 <__ieee754_rem_pio2+0x344>)
 8014ac8:	4598      	cmp	r8, r3
 8014aca:	f300 80d9 	bgt.w	8014c80 <__ieee754_rem_pio2+0x2e0>
 8014ace:	f000 fe39 	bl	8015744 <fabs>
 8014ad2:	ec55 4b10 	vmov	r4, r5, d0
 8014ad6:	ee10 0a10 	vmov	r0, s0
 8014ada:	a379      	add	r3, pc, #484	; (adr r3, 8014cc0 <__ieee754_rem_pio2+0x320>)
 8014adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae0:	4629      	mov	r1, r5
 8014ae2:	f7eb fda9 	bl	8000638 <__aeabi_dmul>
 8014ae6:	4b80      	ldr	r3, [pc, #512]	; (8014ce8 <__ieee754_rem_pio2+0x348>)
 8014ae8:	2200      	movs	r2, #0
 8014aea:	f7eb fbef 	bl	80002cc <__adddf3>
 8014aee:	f7ec f83d 	bl	8000b6c <__aeabi_d2iz>
 8014af2:	4683      	mov	fp, r0
 8014af4:	f7eb fd36 	bl	8000564 <__aeabi_i2d>
 8014af8:	4602      	mov	r2, r0
 8014afa:	460b      	mov	r3, r1
 8014afc:	ec43 2b18 	vmov	d8, r2, r3
 8014b00:	a367      	add	r3, pc, #412	; (adr r3, 8014ca0 <__ieee754_rem_pio2+0x300>)
 8014b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b06:	f7eb fd97 	bl	8000638 <__aeabi_dmul>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	4620      	mov	r0, r4
 8014b10:	4629      	mov	r1, r5
 8014b12:	f7eb fbd9 	bl	80002c8 <__aeabi_dsub>
 8014b16:	a364      	add	r3, pc, #400	; (adr r3, 8014ca8 <__ieee754_rem_pio2+0x308>)
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	4606      	mov	r6, r0
 8014b1e:	460f      	mov	r7, r1
 8014b20:	ec51 0b18 	vmov	r0, r1, d8
 8014b24:	f7eb fd88 	bl	8000638 <__aeabi_dmul>
 8014b28:	f1bb 0f1f 	cmp.w	fp, #31
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	460d      	mov	r5, r1
 8014b30:	dc0d      	bgt.n	8014b4e <__ieee754_rem_pio2+0x1ae>
 8014b32:	4b6e      	ldr	r3, [pc, #440]	; (8014cec <__ieee754_rem_pio2+0x34c>)
 8014b34:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b3c:	4543      	cmp	r3, r8
 8014b3e:	d006      	beq.n	8014b4e <__ieee754_rem_pio2+0x1ae>
 8014b40:	4622      	mov	r2, r4
 8014b42:	462b      	mov	r3, r5
 8014b44:	4630      	mov	r0, r6
 8014b46:	4639      	mov	r1, r7
 8014b48:	f7eb fbbe 	bl	80002c8 <__aeabi_dsub>
 8014b4c:	e00f      	b.n	8014b6e <__ieee754_rem_pio2+0x1ce>
 8014b4e:	462b      	mov	r3, r5
 8014b50:	4622      	mov	r2, r4
 8014b52:	4630      	mov	r0, r6
 8014b54:	4639      	mov	r1, r7
 8014b56:	f7eb fbb7 	bl	80002c8 <__aeabi_dsub>
 8014b5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014b5e:	9303      	str	r3, [sp, #12]
 8014b60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014b64:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8014b68:	f1b8 0f10 	cmp.w	r8, #16
 8014b6c:	dc02      	bgt.n	8014b74 <__ieee754_rem_pio2+0x1d4>
 8014b6e:	e9ca 0100 	strd	r0, r1, [sl]
 8014b72:	e039      	b.n	8014be8 <__ieee754_rem_pio2+0x248>
 8014b74:	a34e      	add	r3, pc, #312	; (adr r3, 8014cb0 <__ieee754_rem_pio2+0x310>)
 8014b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7a:	ec51 0b18 	vmov	r0, r1, d8
 8014b7e:	f7eb fd5b 	bl	8000638 <__aeabi_dmul>
 8014b82:	4604      	mov	r4, r0
 8014b84:	460d      	mov	r5, r1
 8014b86:	4602      	mov	r2, r0
 8014b88:	460b      	mov	r3, r1
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	4639      	mov	r1, r7
 8014b8e:	f7eb fb9b 	bl	80002c8 <__aeabi_dsub>
 8014b92:	4602      	mov	r2, r0
 8014b94:	460b      	mov	r3, r1
 8014b96:	4680      	mov	r8, r0
 8014b98:	4689      	mov	r9, r1
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	4639      	mov	r1, r7
 8014b9e:	f7eb fb93 	bl	80002c8 <__aeabi_dsub>
 8014ba2:	4622      	mov	r2, r4
 8014ba4:	462b      	mov	r3, r5
 8014ba6:	f7eb fb8f 	bl	80002c8 <__aeabi_dsub>
 8014baa:	a343      	add	r3, pc, #268	; (adr r3, 8014cb8 <__ieee754_rem_pio2+0x318>)
 8014bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	460d      	mov	r5, r1
 8014bb4:	ec51 0b18 	vmov	r0, r1, d8
 8014bb8:	f7eb fd3e 	bl	8000638 <__aeabi_dmul>
 8014bbc:	4622      	mov	r2, r4
 8014bbe:	462b      	mov	r3, r5
 8014bc0:	f7eb fb82 	bl	80002c8 <__aeabi_dsub>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4604      	mov	r4, r0
 8014bca:	460d      	mov	r5, r1
 8014bcc:	4640      	mov	r0, r8
 8014bce:	4649      	mov	r1, r9
 8014bd0:	f7eb fb7a 	bl	80002c8 <__aeabi_dsub>
 8014bd4:	9a03      	ldr	r2, [sp, #12]
 8014bd6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014bda:	1ad3      	subs	r3, r2, r3
 8014bdc:	2b31      	cmp	r3, #49	; 0x31
 8014bde:	dc24      	bgt.n	8014c2a <__ieee754_rem_pio2+0x28a>
 8014be0:	e9ca 0100 	strd	r0, r1, [sl]
 8014be4:	4646      	mov	r6, r8
 8014be6:	464f      	mov	r7, r9
 8014be8:	e9da 8900 	ldrd	r8, r9, [sl]
 8014bec:	4630      	mov	r0, r6
 8014bee:	4642      	mov	r2, r8
 8014bf0:	464b      	mov	r3, r9
 8014bf2:	4639      	mov	r1, r7
 8014bf4:	f7eb fb68 	bl	80002c8 <__aeabi_dsub>
 8014bf8:	462b      	mov	r3, r5
 8014bfa:	4622      	mov	r2, r4
 8014bfc:	f7eb fb64 	bl	80002c8 <__aeabi_dsub>
 8014c00:	9b02      	ldr	r3, [sp, #8]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014c08:	f6bf af0a 	bge.w	8014a20 <__ieee754_rem_pio2+0x80>
 8014c0c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c10:	f8ca 3004 	str.w	r3, [sl, #4]
 8014c14:	f8ca 8000 	str.w	r8, [sl]
 8014c18:	f8ca 0008 	str.w	r0, [sl, #8]
 8014c1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c20:	f8ca 300c 	str.w	r3, [sl, #12]
 8014c24:	f1cb 0b00 	rsb	fp, fp, #0
 8014c28:	e6fa      	b.n	8014a20 <__ieee754_rem_pio2+0x80>
 8014c2a:	a327      	add	r3, pc, #156	; (adr r3, 8014cc8 <__ieee754_rem_pio2+0x328>)
 8014c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c30:	ec51 0b18 	vmov	r0, r1, d8
 8014c34:	f7eb fd00 	bl	8000638 <__aeabi_dmul>
 8014c38:	4604      	mov	r4, r0
 8014c3a:	460d      	mov	r5, r1
 8014c3c:	4602      	mov	r2, r0
 8014c3e:	460b      	mov	r3, r1
 8014c40:	4640      	mov	r0, r8
 8014c42:	4649      	mov	r1, r9
 8014c44:	f7eb fb40 	bl	80002c8 <__aeabi_dsub>
 8014c48:	4602      	mov	r2, r0
 8014c4a:	460b      	mov	r3, r1
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	460f      	mov	r7, r1
 8014c50:	4640      	mov	r0, r8
 8014c52:	4649      	mov	r1, r9
 8014c54:	f7eb fb38 	bl	80002c8 <__aeabi_dsub>
 8014c58:	4622      	mov	r2, r4
 8014c5a:	462b      	mov	r3, r5
 8014c5c:	f7eb fb34 	bl	80002c8 <__aeabi_dsub>
 8014c60:	a31b      	add	r3, pc, #108	; (adr r3, 8014cd0 <__ieee754_rem_pio2+0x330>)
 8014c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c66:	4604      	mov	r4, r0
 8014c68:	460d      	mov	r5, r1
 8014c6a:	ec51 0b18 	vmov	r0, r1, d8
 8014c6e:	f7eb fce3 	bl	8000638 <__aeabi_dmul>
 8014c72:	4622      	mov	r2, r4
 8014c74:	462b      	mov	r3, r5
 8014c76:	f7eb fb27 	bl	80002c8 <__aeabi_dsub>
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	460d      	mov	r5, r1
 8014c7e:	e75f      	b.n	8014b40 <__ieee754_rem_pio2+0x1a0>
 8014c80:	4b1b      	ldr	r3, [pc, #108]	; (8014cf0 <__ieee754_rem_pio2+0x350>)
 8014c82:	4598      	cmp	r8, r3
 8014c84:	dd36      	ble.n	8014cf4 <__ieee754_rem_pio2+0x354>
 8014c86:	ee10 2a10 	vmov	r2, s0
 8014c8a:	462b      	mov	r3, r5
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	4629      	mov	r1, r5
 8014c90:	f7eb fb1a 	bl	80002c8 <__aeabi_dsub>
 8014c94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014c98:	e9ca 0100 	strd	r0, r1, [sl]
 8014c9c:	e694      	b.n	80149c8 <__ieee754_rem_pio2+0x28>
 8014c9e:	bf00      	nop
 8014ca0:	54400000 	.word	0x54400000
 8014ca4:	3ff921fb 	.word	0x3ff921fb
 8014ca8:	1a626331 	.word	0x1a626331
 8014cac:	3dd0b461 	.word	0x3dd0b461
 8014cb0:	1a600000 	.word	0x1a600000
 8014cb4:	3dd0b461 	.word	0x3dd0b461
 8014cb8:	2e037073 	.word	0x2e037073
 8014cbc:	3ba3198a 	.word	0x3ba3198a
 8014cc0:	6dc9c883 	.word	0x6dc9c883
 8014cc4:	3fe45f30 	.word	0x3fe45f30
 8014cc8:	2e000000 	.word	0x2e000000
 8014ccc:	3ba3198a 	.word	0x3ba3198a
 8014cd0:	252049c1 	.word	0x252049c1
 8014cd4:	397b839a 	.word	0x397b839a
 8014cd8:	3fe921fb 	.word	0x3fe921fb
 8014cdc:	4002d97b 	.word	0x4002d97b
 8014ce0:	3ff921fb 	.word	0x3ff921fb
 8014ce4:	413921fb 	.word	0x413921fb
 8014ce8:	3fe00000 	.word	0x3fe00000
 8014cec:	080195a8 	.word	0x080195a8
 8014cf0:	7fefffff 	.word	0x7fefffff
 8014cf4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014cf8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8014cfc:	ee10 0a10 	vmov	r0, s0
 8014d00:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014d04:	ee10 6a10 	vmov	r6, s0
 8014d08:	460f      	mov	r7, r1
 8014d0a:	f7eb ff2f 	bl	8000b6c <__aeabi_d2iz>
 8014d0e:	f7eb fc29 	bl	8000564 <__aeabi_i2d>
 8014d12:	4602      	mov	r2, r0
 8014d14:	460b      	mov	r3, r1
 8014d16:	4630      	mov	r0, r6
 8014d18:	4639      	mov	r1, r7
 8014d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d1e:	f7eb fad3 	bl	80002c8 <__aeabi_dsub>
 8014d22:	4b22      	ldr	r3, [pc, #136]	; (8014dac <__ieee754_rem_pio2+0x40c>)
 8014d24:	2200      	movs	r2, #0
 8014d26:	f7eb fc87 	bl	8000638 <__aeabi_dmul>
 8014d2a:	460f      	mov	r7, r1
 8014d2c:	4606      	mov	r6, r0
 8014d2e:	f7eb ff1d 	bl	8000b6c <__aeabi_d2iz>
 8014d32:	f7eb fc17 	bl	8000564 <__aeabi_i2d>
 8014d36:	4602      	mov	r2, r0
 8014d38:	460b      	mov	r3, r1
 8014d3a:	4630      	mov	r0, r6
 8014d3c:	4639      	mov	r1, r7
 8014d3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d42:	f7eb fac1 	bl	80002c8 <__aeabi_dsub>
 8014d46:	4b19      	ldr	r3, [pc, #100]	; (8014dac <__ieee754_rem_pio2+0x40c>)
 8014d48:	2200      	movs	r2, #0
 8014d4a:	f7eb fc75 	bl	8000638 <__aeabi_dmul>
 8014d4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014d52:	ad04      	add	r5, sp, #16
 8014d54:	f04f 0803 	mov.w	r8, #3
 8014d58:	46a9      	mov	r9, r5
 8014d5a:	2600      	movs	r6, #0
 8014d5c:	2700      	movs	r7, #0
 8014d5e:	4632      	mov	r2, r6
 8014d60:	463b      	mov	r3, r7
 8014d62:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8014d66:	46c3      	mov	fp, r8
 8014d68:	3d08      	subs	r5, #8
 8014d6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8014d6e:	f7eb fecb 	bl	8000b08 <__aeabi_dcmpeq>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	d1f3      	bne.n	8014d5e <__ieee754_rem_pio2+0x3be>
 8014d76:	4b0e      	ldr	r3, [pc, #56]	; (8014db0 <__ieee754_rem_pio2+0x410>)
 8014d78:	9301      	str	r3, [sp, #4]
 8014d7a:	2302      	movs	r3, #2
 8014d7c:	9300      	str	r3, [sp, #0]
 8014d7e:	4622      	mov	r2, r4
 8014d80:	465b      	mov	r3, fp
 8014d82:	4651      	mov	r1, sl
 8014d84:	4648      	mov	r0, r9
 8014d86:	f000 f8df 	bl	8014f48 <__kernel_rem_pio2>
 8014d8a:	9b02      	ldr	r3, [sp, #8]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	4683      	mov	fp, r0
 8014d90:	f6bf ae46 	bge.w	8014a20 <__ieee754_rem_pio2+0x80>
 8014d94:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014d98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014d9c:	f8ca 3004 	str.w	r3, [sl, #4]
 8014da0:	f8da 300c 	ldr.w	r3, [sl, #12]
 8014da4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014da8:	e73a      	b.n	8014c20 <__ieee754_rem_pio2+0x280>
 8014daa:	bf00      	nop
 8014dac:	41700000 	.word	0x41700000
 8014db0:	08019628 	.word	0x08019628
 8014db4:	00000000 	.word	0x00000000

08014db8 <__kernel_cos>:
 8014db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	ec57 6b10 	vmov	r6, r7, d0
 8014dc0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014dc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8014dc8:	ed8d 1b00 	vstr	d1, [sp]
 8014dcc:	da07      	bge.n	8014dde <__kernel_cos+0x26>
 8014dce:	ee10 0a10 	vmov	r0, s0
 8014dd2:	4639      	mov	r1, r7
 8014dd4:	f7eb feca 	bl	8000b6c <__aeabi_d2iz>
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	f000 8088 	beq.w	8014eee <__kernel_cos+0x136>
 8014dde:	4632      	mov	r2, r6
 8014de0:	463b      	mov	r3, r7
 8014de2:	4630      	mov	r0, r6
 8014de4:	4639      	mov	r1, r7
 8014de6:	f7eb fc27 	bl	8000638 <__aeabi_dmul>
 8014dea:	4b51      	ldr	r3, [pc, #324]	; (8014f30 <__kernel_cos+0x178>)
 8014dec:	2200      	movs	r2, #0
 8014dee:	4604      	mov	r4, r0
 8014df0:	460d      	mov	r5, r1
 8014df2:	f7eb fc21 	bl	8000638 <__aeabi_dmul>
 8014df6:	a340      	add	r3, pc, #256	; (adr r3, 8014ef8 <__kernel_cos+0x140>)
 8014df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfc:	4682      	mov	sl, r0
 8014dfe:	468b      	mov	fp, r1
 8014e00:	4620      	mov	r0, r4
 8014e02:	4629      	mov	r1, r5
 8014e04:	f7eb fc18 	bl	8000638 <__aeabi_dmul>
 8014e08:	a33d      	add	r3, pc, #244	; (adr r3, 8014f00 <__kernel_cos+0x148>)
 8014e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0e:	f7eb fa5d 	bl	80002cc <__adddf3>
 8014e12:	4622      	mov	r2, r4
 8014e14:	462b      	mov	r3, r5
 8014e16:	f7eb fc0f 	bl	8000638 <__aeabi_dmul>
 8014e1a:	a33b      	add	r3, pc, #236	; (adr r3, 8014f08 <__kernel_cos+0x150>)
 8014e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e20:	f7eb fa52 	bl	80002c8 <__aeabi_dsub>
 8014e24:	4622      	mov	r2, r4
 8014e26:	462b      	mov	r3, r5
 8014e28:	f7eb fc06 	bl	8000638 <__aeabi_dmul>
 8014e2c:	a338      	add	r3, pc, #224	; (adr r3, 8014f10 <__kernel_cos+0x158>)
 8014e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e32:	f7eb fa4b 	bl	80002cc <__adddf3>
 8014e36:	4622      	mov	r2, r4
 8014e38:	462b      	mov	r3, r5
 8014e3a:	f7eb fbfd 	bl	8000638 <__aeabi_dmul>
 8014e3e:	a336      	add	r3, pc, #216	; (adr r3, 8014f18 <__kernel_cos+0x160>)
 8014e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e44:	f7eb fa40 	bl	80002c8 <__aeabi_dsub>
 8014e48:	4622      	mov	r2, r4
 8014e4a:	462b      	mov	r3, r5
 8014e4c:	f7eb fbf4 	bl	8000638 <__aeabi_dmul>
 8014e50:	a333      	add	r3, pc, #204	; (adr r3, 8014f20 <__kernel_cos+0x168>)
 8014e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e56:	f7eb fa39 	bl	80002cc <__adddf3>
 8014e5a:	4622      	mov	r2, r4
 8014e5c:	462b      	mov	r3, r5
 8014e5e:	f7eb fbeb 	bl	8000638 <__aeabi_dmul>
 8014e62:	4622      	mov	r2, r4
 8014e64:	462b      	mov	r3, r5
 8014e66:	f7eb fbe7 	bl	8000638 <__aeabi_dmul>
 8014e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e6e:	4604      	mov	r4, r0
 8014e70:	460d      	mov	r5, r1
 8014e72:	4630      	mov	r0, r6
 8014e74:	4639      	mov	r1, r7
 8014e76:	f7eb fbdf 	bl	8000638 <__aeabi_dmul>
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	4629      	mov	r1, r5
 8014e80:	4620      	mov	r0, r4
 8014e82:	f7eb fa21 	bl	80002c8 <__aeabi_dsub>
 8014e86:	4b2b      	ldr	r3, [pc, #172]	; (8014f34 <__kernel_cos+0x17c>)
 8014e88:	4598      	cmp	r8, r3
 8014e8a:	4606      	mov	r6, r0
 8014e8c:	460f      	mov	r7, r1
 8014e8e:	dc10      	bgt.n	8014eb2 <__kernel_cos+0xfa>
 8014e90:	4602      	mov	r2, r0
 8014e92:	460b      	mov	r3, r1
 8014e94:	4650      	mov	r0, sl
 8014e96:	4659      	mov	r1, fp
 8014e98:	f7eb fa16 	bl	80002c8 <__aeabi_dsub>
 8014e9c:	460b      	mov	r3, r1
 8014e9e:	4926      	ldr	r1, [pc, #152]	; (8014f38 <__kernel_cos+0x180>)
 8014ea0:	4602      	mov	r2, r0
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	f7eb fa10 	bl	80002c8 <__aeabi_dsub>
 8014ea8:	ec41 0b10 	vmov	d0, r0, r1
 8014eac:	b003      	add	sp, #12
 8014eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb2:	4b22      	ldr	r3, [pc, #136]	; (8014f3c <__kernel_cos+0x184>)
 8014eb4:	4920      	ldr	r1, [pc, #128]	; (8014f38 <__kernel_cos+0x180>)
 8014eb6:	4598      	cmp	r8, r3
 8014eb8:	bfcc      	ite	gt
 8014eba:	4d21      	ldrgt	r5, [pc, #132]	; (8014f40 <__kernel_cos+0x188>)
 8014ebc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8014ec0:	2400      	movs	r4, #0
 8014ec2:	4622      	mov	r2, r4
 8014ec4:	462b      	mov	r3, r5
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	f7eb f9fe 	bl	80002c8 <__aeabi_dsub>
 8014ecc:	4622      	mov	r2, r4
 8014ece:	4680      	mov	r8, r0
 8014ed0:	4689      	mov	r9, r1
 8014ed2:	462b      	mov	r3, r5
 8014ed4:	4650      	mov	r0, sl
 8014ed6:	4659      	mov	r1, fp
 8014ed8:	f7eb f9f6 	bl	80002c8 <__aeabi_dsub>
 8014edc:	4632      	mov	r2, r6
 8014ede:	463b      	mov	r3, r7
 8014ee0:	f7eb f9f2 	bl	80002c8 <__aeabi_dsub>
 8014ee4:	4602      	mov	r2, r0
 8014ee6:	460b      	mov	r3, r1
 8014ee8:	4640      	mov	r0, r8
 8014eea:	4649      	mov	r1, r9
 8014eec:	e7da      	b.n	8014ea4 <__kernel_cos+0xec>
 8014eee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014f28 <__kernel_cos+0x170>
 8014ef2:	e7db      	b.n	8014eac <__kernel_cos+0xf4>
 8014ef4:	f3af 8000 	nop.w
 8014ef8:	be8838d4 	.word	0xbe8838d4
 8014efc:	bda8fae9 	.word	0xbda8fae9
 8014f00:	bdb4b1c4 	.word	0xbdb4b1c4
 8014f04:	3e21ee9e 	.word	0x3e21ee9e
 8014f08:	809c52ad 	.word	0x809c52ad
 8014f0c:	3e927e4f 	.word	0x3e927e4f
 8014f10:	19cb1590 	.word	0x19cb1590
 8014f14:	3efa01a0 	.word	0x3efa01a0
 8014f18:	16c15177 	.word	0x16c15177
 8014f1c:	3f56c16c 	.word	0x3f56c16c
 8014f20:	5555554c 	.word	0x5555554c
 8014f24:	3fa55555 	.word	0x3fa55555
 8014f28:	00000000 	.word	0x00000000
 8014f2c:	3ff00000 	.word	0x3ff00000
 8014f30:	3fe00000 	.word	0x3fe00000
 8014f34:	3fd33332 	.word	0x3fd33332
 8014f38:	3ff00000 	.word	0x3ff00000
 8014f3c:	3fe90000 	.word	0x3fe90000
 8014f40:	3fd20000 	.word	0x3fd20000
 8014f44:	00000000 	.word	0x00000000

08014f48 <__kernel_rem_pio2>:
 8014f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f4c:	ed2d 8b02 	vpush	{d8}
 8014f50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8014f54:	f112 0f14 	cmn.w	r2, #20
 8014f58:	9308      	str	r3, [sp, #32]
 8014f5a:	9101      	str	r1, [sp, #4]
 8014f5c:	4bc6      	ldr	r3, [pc, #792]	; (8015278 <__kernel_rem_pio2+0x330>)
 8014f5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014f60:	9009      	str	r0, [sp, #36]	; 0x24
 8014f62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f66:	9304      	str	r3, [sp, #16]
 8014f68:	9b08      	ldr	r3, [sp, #32]
 8014f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8014f6e:	bfa8      	it	ge
 8014f70:	1ed4      	subge	r4, r2, #3
 8014f72:	9306      	str	r3, [sp, #24]
 8014f74:	bfb2      	itee	lt
 8014f76:	2400      	movlt	r4, #0
 8014f78:	2318      	movge	r3, #24
 8014f7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8014f7e:	f06f 0317 	mvn.w	r3, #23
 8014f82:	fb04 3303 	mla	r3, r4, r3, r3
 8014f86:	eb03 0a02 	add.w	sl, r3, r2
 8014f8a:	9b04      	ldr	r3, [sp, #16]
 8014f8c:	9a06      	ldr	r2, [sp, #24]
 8014f8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015268 <__kernel_rem_pio2+0x320>
 8014f92:	eb03 0802 	add.w	r8, r3, r2
 8014f96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014f98:	1aa7      	subs	r7, r4, r2
 8014f9a:	ae20      	add	r6, sp, #128	; 0x80
 8014f9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014fa0:	2500      	movs	r5, #0
 8014fa2:	4545      	cmp	r5, r8
 8014fa4:	dd18      	ble.n	8014fd8 <__kernel_rem_pio2+0x90>
 8014fa6:	9b08      	ldr	r3, [sp, #32]
 8014fa8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014fac:	aa20      	add	r2, sp, #128	; 0x80
 8014fae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8015268 <__kernel_rem_pio2+0x320>
 8014fb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014fb6:	f1c3 0301 	rsb	r3, r3, #1
 8014fba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8014fbe:	9307      	str	r3, [sp, #28]
 8014fc0:	9b07      	ldr	r3, [sp, #28]
 8014fc2:	9a04      	ldr	r2, [sp, #16]
 8014fc4:	4443      	add	r3, r8
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	db2f      	blt.n	801502a <__kernel_rem_pio2+0xe2>
 8014fca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014fce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014fd2:	462f      	mov	r7, r5
 8014fd4:	2600      	movs	r6, #0
 8014fd6:	e01b      	b.n	8015010 <__kernel_rem_pio2+0xc8>
 8014fd8:	42ef      	cmn	r7, r5
 8014fda:	d407      	bmi.n	8014fec <__kernel_rem_pio2+0xa4>
 8014fdc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014fe0:	f7eb fac0 	bl	8000564 <__aeabi_i2d>
 8014fe4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014fe8:	3501      	adds	r5, #1
 8014fea:	e7da      	b.n	8014fa2 <__kernel_rem_pio2+0x5a>
 8014fec:	ec51 0b18 	vmov	r0, r1, d8
 8014ff0:	e7f8      	b.n	8014fe4 <__kernel_rem_pio2+0x9c>
 8014ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ff6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014ffa:	f7eb fb1d 	bl	8000638 <__aeabi_dmul>
 8014ffe:	4602      	mov	r2, r0
 8015000:	460b      	mov	r3, r1
 8015002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015006:	f7eb f961 	bl	80002cc <__adddf3>
 801500a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801500e:	3601      	adds	r6, #1
 8015010:	9b06      	ldr	r3, [sp, #24]
 8015012:	429e      	cmp	r6, r3
 8015014:	f1a7 0708 	sub.w	r7, r7, #8
 8015018:	ddeb      	ble.n	8014ff2 <__kernel_rem_pio2+0xaa>
 801501a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801501e:	3508      	adds	r5, #8
 8015020:	ecab 7b02 	vstmia	fp!, {d7}
 8015024:	f108 0801 	add.w	r8, r8, #1
 8015028:	e7ca      	b.n	8014fc0 <__kernel_rem_pio2+0x78>
 801502a:	9b04      	ldr	r3, [sp, #16]
 801502c:	aa0c      	add	r2, sp, #48	; 0x30
 801502e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015032:	930b      	str	r3, [sp, #44]	; 0x2c
 8015034:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015036:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801503a:	9c04      	ldr	r4, [sp, #16]
 801503c:	930a      	str	r3, [sp, #40]	; 0x28
 801503e:	ab98      	add	r3, sp, #608	; 0x260
 8015040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015044:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8015048:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801504c:	f8cd b008 	str.w	fp, [sp, #8]
 8015050:	4625      	mov	r5, r4
 8015052:	2d00      	cmp	r5, #0
 8015054:	dc78      	bgt.n	8015148 <__kernel_rem_pio2+0x200>
 8015056:	ec47 6b10 	vmov	d0, r6, r7
 801505a:	4650      	mov	r0, sl
 801505c:	f000 fbfc 	bl	8015858 <scalbn>
 8015060:	ec57 6b10 	vmov	r6, r7, d0
 8015064:	2200      	movs	r2, #0
 8015066:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801506a:	ee10 0a10 	vmov	r0, s0
 801506e:	4639      	mov	r1, r7
 8015070:	f7eb fae2 	bl	8000638 <__aeabi_dmul>
 8015074:	ec41 0b10 	vmov	d0, r0, r1
 8015078:	f000 fb6e 	bl	8015758 <floor>
 801507c:	4b7f      	ldr	r3, [pc, #508]	; (801527c <__kernel_rem_pio2+0x334>)
 801507e:	ec51 0b10 	vmov	r0, r1, d0
 8015082:	2200      	movs	r2, #0
 8015084:	f7eb fad8 	bl	8000638 <__aeabi_dmul>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	4630      	mov	r0, r6
 801508e:	4639      	mov	r1, r7
 8015090:	f7eb f91a 	bl	80002c8 <__aeabi_dsub>
 8015094:	460f      	mov	r7, r1
 8015096:	4606      	mov	r6, r0
 8015098:	f7eb fd68 	bl	8000b6c <__aeabi_d2iz>
 801509c:	9007      	str	r0, [sp, #28]
 801509e:	f7eb fa61 	bl	8000564 <__aeabi_i2d>
 80150a2:	4602      	mov	r2, r0
 80150a4:	460b      	mov	r3, r1
 80150a6:	4630      	mov	r0, r6
 80150a8:	4639      	mov	r1, r7
 80150aa:	f7eb f90d 	bl	80002c8 <__aeabi_dsub>
 80150ae:	f1ba 0f00 	cmp.w	sl, #0
 80150b2:	4606      	mov	r6, r0
 80150b4:	460f      	mov	r7, r1
 80150b6:	dd70      	ble.n	801519a <__kernel_rem_pio2+0x252>
 80150b8:	1e62      	subs	r2, r4, #1
 80150ba:	ab0c      	add	r3, sp, #48	; 0x30
 80150bc:	9d07      	ldr	r5, [sp, #28]
 80150be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80150c2:	f1ca 0118 	rsb	r1, sl, #24
 80150c6:	fa40 f301 	asr.w	r3, r0, r1
 80150ca:	441d      	add	r5, r3
 80150cc:	408b      	lsls	r3, r1
 80150ce:	1ac0      	subs	r0, r0, r3
 80150d0:	ab0c      	add	r3, sp, #48	; 0x30
 80150d2:	9507      	str	r5, [sp, #28]
 80150d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80150d8:	f1ca 0317 	rsb	r3, sl, #23
 80150dc:	fa40 f303 	asr.w	r3, r0, r3
 80150e0:	9302      	str	r3, [sp, #8]
 80150e2:	9b02      	ldr	r3, [sp, #8]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	dd66      	ble.n	80151b6 <__kernel_rem_pio2+0x26e>
 80150e8:	9b07      	ldr	r3, [sp, #28]
 80150ea:	2200      	movs	r2, #0
 80150ec:	3301      	adds	r3, #1
 80150ee:	9307      	str	r3, [sp, #28]
 80150f0:	4615      	mov	r5, r2
 80150f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80150f6:	4294      	cmp	r4, r2
 80150f8:	f300 8099 	bgt.w	801522e <__kernel_rem_pio2+0x2e6>
 80150fc:	f1ba 0f00 	cmp.w	sl, #0
 8015100:	dd07      	ble.n	8015112 <__kernel_rem_pio2+0x1ca>
 8015102:	f1ba 0f01 	cmp.w	sl, #1
 8015106:	f000 80a5 	beq.w	8015254 <__kernel_rem_pio2+0x30c>
 801510a:	f1ba 0f02 	cmp.w	sl, #2
 801510e:	f000 80c1 	beq.w	8015294 <__kernel_rem_pio2+0x34c>
 8015112:	9b02      	ldr	r3, [sp, #8]
 8015114:	2b02      	cmp	r3, #2
 8015116:	d14e      	bne.n	80151b6 <__kernel_rem_pio2+0x26e>
 8015118:	4632      	mov	r2, r6
 801511a:	463b      	mov	r3, r7
 801511c:	4958      	ldr	r1, [pc, #352]	; (8015280 <__kernel_rem_pio2+0x338>)
 801511e:	2000      	movs	r0, #0
 8015120:	f7eb f8d2 	bl	80002c8 <__aeabi_dsub>
 8015124:	4606      	mov	r6, r0
 8015126:	460f      	mov	r7, r1
 8015128:	2d00      	cmp	r5, #0
 801512a:	d044      	beq.n	80151b6 <__kernel_rem_pio2+0x26e>
 801512c:	4650      	mov	r0, sl
 801512e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015270 <__kernel_rem_pio2+0x328>
 8015132:	f000 fb91 	bl	8015858 <scalbn>
 8015136:	4630      	mov	r0, r6
 8015138:	4639      	mov	r1, r7
 801513a:	ec53 2b10 	vmov	r2, r3, d0
 801513e:	f7eb f8c3 	bl	80002c8 <__aeabi_dsub>
 8015142:	4606      	mov	r6, r0
 8015144:	460f      	mov	r7, r1
 8015146:	e036      	b.n	80151b6 <__kernel_rem_pio2+0x26e>
 8015148:	4b4e      	ldr	r3, [pc, #312]	; (8015284 <__kernel_rem_pio2+0x33c>)
 801514a:	2200      	movs	r2, #0
 801514c:	4630      	mov	r0, r6
 801514e:	4639      	mov	r1, r7
 8015150:	f7eb fa72 	bl	8000638 <__aeabi_dmul>
 8015154:	f7eb fd0a 	bl	8000b6c <__aeabi_d2iz>
 8015158:	f7eb fa04 	bl	8000564 <__aeabi_i2d>
 801515c:	4b4a      	ldr	r3, [pc, #296]	; (8015288 <__kernel_rem_pio2+0x340>)
 801515e:	2200      	movs	r2, #0
 8015160:	4680      	mov	r8, r0
 8015162:	4689      	mov	r9, r1
 8015164:	f7eb fa68 	bl	8000638 <__aeabi_dmul>
 8015168:	4602      	mov	r2, r0
 801516a:	460b      	mov	r3, r1
 801516c:	4630      	mov	r0, r6
 801516e:	4639      	mov	r1, r7
 8015170:	f7eb f8aa 	bl	80002c8 <__aeabi_dsub>
 8015174:	f7eb fcfa 	bl	8000b6c <__aeabi_d2iz>
 8015178:	9b02      	ldr	r3, [sp, #8]
 801517a:	f843 0b04 	str.w	r0, [r3], #4
 801517e:	3d01      	subs	r5, #1
 8015180:	9302      	str	r3, [sp, #8]
 8015182:	ab70      	add	r3, sp, #448	; 0x1c0
 8015184:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518c:	4640      	mov	r0, r8
 801518e:	4649      	mov	r1, r9
 8015190:	f7eb f89c 	bl	80002cc <__adddf3>
 8015194:	4606      	mov	r6, r0
 8015196:	460f      	mov	r7, r1
 8015198:	e75b      	b.n	8015052 <__kernel_rem_pio2+0x10a>
 801519a:	d105      	bne.n	80151a8 <__kernel_rem_pio2+0x260>
 801519c:	1e63      	subs	r3, r4, #1
 801519e:	aa0c      	add	r2, sp, #48	; 0x30
 80151a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80151a4:	15c3      	asrs	r3, r0, #23
 80151a6:	e79b      	b.n	80150e0 <__kernel_rem_pio2+0x198>
 80151a8:	4b38      	ldr	r3, [pc, #224]	; (801528c <__kernel_rem_pio2+0x344>)
 80151aa:	2200      	movs	r2, #0
 80151ac:	f7eb fcca 	bl	8000b44 <__aeabi_dcmpge>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d139      	bne.n	8015228 <__kernel_rem_pio2+0x2e0>
 80151b4:	9002      	str	r0, [sp, #8]
 80151b6:	2200      	movs	r2, #0
 80151b8:	2300      	movs	r3, #0
 80151ba:	4630      	mov	r0, r6
 80151bc:	4639      	mov	r1, r7
 80151be:	f7eb fca3 	bl	8000b08 <__aeabi_dcmpeq>
 80151c2:	2800      	cmp	r0, #0
 80151c4:	f000 80b4 	beq.w	8015330 <__kernel_rem_pio2+0x3e8>
 80151c8:	f104 3bff 	add.w	fp, r4, #4294967295
 80151cc:	465b      	mov	r3, fp
 80151ce:	2200      	movs	r2, #0
 80151d0:	9904      	ldr	r1, [sp, #16]
 80151d2:	428b      	cmp	r3, r1
 80151d4:	da65      	bge.n	80152a2 <__kernel_rem_pio2+0x35a>
 80151d6:	2a00      	cmp	r2, #0
 80151d8:	d07b      	beq.n	80152d2 <__kernel_rem_pio2+0x38a>
 80151da:	ab0c      	add	r3, sp, #48	; 0x30
 80151dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80151e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	f000 80a0 	beq.w	801532a <__kernel_rem_pio2+0x3e2>
 80151ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8015270 <__kernel_rem_pio2+0x328>
 80151ee:	4650      	mov	r0, sl
 80151f0:	f000 fb32 	bl	8015858 <scalbn>
 80151f4:	4f23      	ldr	r7, [pc, #140]	; (8015284 <__kernel_rem_pio2+0x33c>)
 80151f6:	ec55 4b10 	vmov	r4, r5, d0
 80151fa:	46d8      	mov	r8, fp
 80151fc:	2600      	movs	r6, #0
 80151fe:	f1b8 0f00 	cmp.w	r8, #0
 8015202:	f280 80cf 	bge.w	80153a4 <__kernel_rem_pio2+0x45c>
 8015206:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8015268 <__kernel_rem_pio2+0x320>
 801520a:	465f      	mov	r7, fp
 801520c:	f04f 0800 	mov.w	r8, #0
 8015210:	2f00      	cmp	r7, #0
 8015212:	f2c0 80fd 	blt.w	8015410 <__kernel_rem_pio2+0x4c8>
 8015216:	ab70      	add	r3, sp, #448	; 0x1c0
 8015218:	f8df a074 	ldr.w	sl, [pc, #116]	; 8015290 <__kernel_rem_pio2+0x348>
 801521c:	ec55 4b18 	vmov	r4, r5, d8
 8015220:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8015224:	2600      	movs	r6, #0
 8015226:	e0e5      	b.n	80153f4 <__kernel_rem_pio2+0x4ac>
 8015228:	2302      	movs	r3, #2
 801522a:	9302      	str	r3, [sp, #8]
 801522c:	e75c      	b.n	80150e8 <__kernel_rem_pio2+0x1a0>
 801522e:	f8db 3000 	ldr.w	r3, [fp]
 8015232:	b955      	cbnz	r5, 801524a <__kernel_rem_pio2+0x302>
 8015234:	b123      	cbz	r3, 8015240 <__kernel_rem_pio2+0x2f8>
 8015236:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801523a:	f8cb 3000 	str.w	r3, [fp]
 801523e:	2301      	movs	r3, #1
 8015240:	3201      	adds	r2, #1
 8015242:	f10b 0b04 	add.w	fp, fp, #4
 8015246:	461d      	mov	r5, r3
 8015248:	e755      	b.n	80150f6 <__kernel_rem_pio2+0x1ae>
 801524a:	1acb      	subs	r3, r1, r3
 801524c:	f8cb 3000 	str.w	r3, [fp]
 8015250:	462b      	mov	r3, r5
 8015252:	e7f5      	b.n	8015240 <__kernel_rem_pio2+0x2f8>
 8015254:	1e62      	subs	r2, r4, #1
 8015256:	ab0c      	add	r3, sp, #48	; 0x30
 8015258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801525c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015260:	a90c      	add	r1, sp, #48	; 0x30
 8015262:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015266:	e754      	b.n	8015112 <__kernel_rem_pio2+0x1ca>
	...
 8015274:	3ff00000 	.word	0x3ff00000
 8015278:	08019770 	.word	0x08019770
 801527c:	40200000 	.word	0x40200000
 8015280:	3ff00000 	.word	0x3ff00000
 8015284:	3e700000 	.word	0x3e700000
 8015288:	41700000 	.word	0x41700000
 801528c:	3fe00000 	.word	0x3fe00000
 8015290:	08019730 	.word	0x08019730
 8015294:	1e62      	subs	r2, r4, #1
 8015296:	ab0c      	add	r3, sp, #48	; 0x30
 8015298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80152a0:	e7de      	b.n	8015260 <__kernel_rem_pio2+0x318>
 80152a2:	a90c      	add	r1, sp, #48	; 0x30
 80152a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80152a8:	3b01      	subs	r3, #1
 80152aa:	430a      	orrs	r2, r1
 80152ac:	e790      	b.n	80151d0 <__kernel_rem_pio2+0x288>
 80152ae:	3301      	adds	r3, #1
 80152b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80152b4:	2900      	cmp	r1, #0
 80152b6:	d0fa      	beq.n	80152ae <__kernel_rem_pio2+0x366>
 80152b8:	9a08      	ldr	r2, [sp, #32]
 80152ba:	18e3      	adds	r3, r4, r3
 80152bc:	18a6      	adds	r6, r4, r2
 80152be:	aa20      	add	r2, sp, #128	; 0x80
 80152c0:	1c65      	adds	r5, r4, #1
 80152c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80152c6:	9302      	str	r3, [sp, #8]
 80152c8:	9b02      	ldr	r3, [sp, #8]
 80152ca:	42ab      	cmp	r3, r5
 80152cc:	da04      	bge.n	80152d8 <__kernel_rem_pio2+0x390>
 80152ce:	461c      	mov	r4, r3
 80152d0:	e6b5      	b.n	801503e <__kernel_rem_pio2+0xf6>
 80152d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152d4:	2301      	movs	r3, #1
 80152d6:	e7eb      	b.n	80152b0 <__kernel_rem_pio2+0x368>
 80152d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80152de:	f7eb f941 	bl	8000564 <__aeabi_i2d>
 80152e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80152e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e8:	46b3      	mov	fp, r6
 80152ea:	461c      	mov	r4, r3
 80152ec:	2700      	movs	r7, #0
 80152ee:	f04f 0800 	mov.w	r8, #0
 80152f2:	f04f 0900 	mov.w	r9, #0
 80152f6:	9b06      	ldr	r3, [sp, #24]
 80152f8:	429f      	cmp	r7, r3
 80152fa:	dd06      	ble.n	801530a <__kernel_rem_pio2+0x3c2>
 80152fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80152fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015302:	e9c3 8900 	strd	r8, r9, [r3]
 8015306:	3501      	adds	r5, #1
 8015308:	e7de      	b.n	80152c8 <__kernel_rem_pio2+0x380>
 801530a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801530e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015312:	f7eb f991 	bl	8000638 <__aeabi_dmul>
 8015316:	4602      	mov	r2, r0
 8015318:	460b      	mov	r3, r1
 801531a:	4640      	mov	r0, r8
 801531c:	4649      	mov	r1, r9
 801531e:	f7ea ffd5 	bl	80002cc <__adddf3>
 8015322:	3701      	adds	r7, #1
 8015324:	4680      	mov	r8, r0
 8015326:	4689      	mov	r9, r1
 8015328:	e7e5      	b.n	80152f6 <__kernel_rem_pio2+0x3ae>
 801532a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801532e:	e754      	b.n	80151da <__kernel_rem_pio2+0x292>
 8015330:	ec47 6b10 	vmov	d0, r6, r7
 8015334:	f1ca 0000 	rsb	r0, sl, #0
 8015338:	f000 fa8e 	bl	8015858 <scalbn>
 801533c:	ec57 6b10 	vmov	r6, r7, d0
 8015340:	4b9f      	ldr	r3, [pc, #636]	; (80155c0 <__kernel_rem_pio2+0x678>)
 8015342:	ee10 0a10 	vmov	r0, s0
 8015346:	2200      	movs	r2, #0
 8015348:	4639      	mov	r1, r7
 801534a:	f7eb fbfb 	bl	8000b44 <__aeabi_dcmpge>
 801534e:	b300      	cbz	r0, 8015392 <__kernel_rem_pio2+0x44a>
 8015350:	4b9c      	ldr	r3, [pc, #624]	; (80155c4 <__kernel_rem_pio2+0x67c>)
 8015352:	2200      	movs	r2, #0
 8015354:	4630      	mov	r0, r6
 8015356:	4639      	mov	r1, r7
 8015358:	f7eb f96e 	bl	8000638 <__aeabi_dmul>
 801535c:	f7eb fc06 	bl	8000b6c <__aeabi_d2iz>
 8015360:	4605      	mov	r5, r0
 8015362:	f7eb f8ff 	bl	8000564 <__aeabi_i2d>
 8015366:	4b96      	ldr	r3, [pc, #600]	; (80155c0 <__kernel_rem_pio2+0x678>)
 8015368:	2200      	movs	r2, #0
 801536a:	f7eb f965 	bl	8000638 <__aeabi_dmul>
 801536e:	460b      	mov	r3, r1
 8015370:	4602      	mov	r2, r0
 8015372:	4639      	mov	r1, r7
 8015374:	4630      	mov	r0, r6
 8015376:	f7ea ffa7 	bl	80002c8 <__aeabi_dsub>
 801537a:	f7eb fbf7 	bl	8000b6c <__aeabi_d2iz>
 801537e:	f104 0b01 	add.w	fp, r4, #1
 8015382:	ab0c      	add	r3, sp, #48	; 0x30
 8015384:	f10a 0a18 	add.w	sl, sl, #24
 8015388:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801538c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8015390:	e72b      	b.n	80151ea <__kernel_rem_pio2+0x2a2>
 8015392:	4630      	mov	r0, r6
 8015394:	4639      	mov	r1, r7
 8015396:	f7eb fbe9 	bl	8000b6c <__aeabi_d2iz>
 801539a:	ab0c      	add	r3, sp, #48	; 0x30
 801539c:	46a3      	mov	fp, r4
 801539e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80153a2:	e722      	b.n	80151ea <__kernel_rem_pio2+0x2a2>
 80153a4:	ab70      	add	r3, sp, #448	; 0x1c0
 80153a6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80153aa:	ab0c      	add	r3, sp, #48	; 0x30
 80153ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80153b0:	f7eb f8d8 	bl	8000564 <__aeabi_i2d>
 80153b4:	4622      	mov	r2, r4
 80153b6:	462b      	mov	r3, r5
 80153b8:	f7eb f93e 	bl	8000638 <__aeabi_dmul>
 80153bc:	4632      	mov	r2, r6
 80153be:	e9c9 0100 	strd	r0, r1, [r9]
 80153c2:	463b      	mov	r3, r7
 80153c4:	4620      	mov	r0, r4
 80153c6:	4629      	mov	r1, r5
 80153c8:	f7eb f936 	bl	8000638 <__aeabi_dmul>
 80153cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80153d0:	4604      	mov	r4, r0
 80153d2:	460d      	mov	r5, r1
 80153d4:	e713      	b.n	80151fe <__kernel_rem_pio2+0x2b6>
 80153d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80153da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80153de:	f7eb f92b 	bl	8000638 <__aeabi_dmul>
 80153e2:	4602      	mov	r2, r0
 80153e4:	460b      	mov	r3, r1
 80153e6:	4620      	mov	r0, r4
 80153e8:	4629      	mov	r1, r5
 80153ea:	f7ea ff6f 	bl	80002cc <__adddf3>
 80153ee:	3601      	adds	r6, #1
 80153f0:	4604      	mov	r4, r0
 80153f2:	460d      	mov	r5, r1
 80153f4:	9b04      	ldr	r3, [sp, #16]
 80153f6:	429e      	cmp	r6, r3
 80153f8:	dc01      	bgt.n	80153fe <__kernel_rem_pio2+0x4b6>
 80153fa:	45b0      	cmp	r8, r6
 80153fc:	daeb      	bge.n	80153d6 <__kernel_rem_pio2+0x48e>
 80153fe:	ab48      	add	r3, sp, #288	; 0x120
 8015400:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015404:	e9c3 4500 	strd	r4, r5, [r3]
 8015408:	3f01      	subs	r7, #1
 801540a:	f108 0801 	add.w	r8, r8, #1
 801540e:	e6ff      	b.n	8015210 <__kernel_rem_pio2+0x2c8>
 8015410:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015412:	2b02      	cmp	r3, #2
 8015414:	dc0b      	bgt.n	801542e <__kernel_rem_pio2+0x4e6>
 8015416:	2b00      	cmp	r3, #0
 8015418:	dc6e      	bgt.n	80154f8 <__kernel_rem_pio2+0x5b0>
 801541a:	d045      	beq.n	80154a8 <__kernel_rem_pio2+0x560>
 801541c:	9b07      	ldr	r3, [sp, #28]
 801541e:	f003 0007 	and.w	r0, r3, #7
 8015422:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8015426:	ecbd 8b02 	vpop	{d8}
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015430:	2b03      	cmp	r3, #3
 8015432:	d1f3      	bne.n	801541c <__kernel_rem_pio2+0x4d4>
 8015434:	ab48      	add	r3, sp, #288	; 0x120
 8015436:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801543a:	46d0      	mov	r8, sl
 801543c:	46d9      	mov	r9, fp
 801543e:	f1b9 0f00 	cmp.w	r9, #0
 8015442:	f1a8 0808 	sub.w	r8, r8, #8
 8015446:	dc64      	bgt.n	8015512 <__kernel_rem_pio2+0x5ca>
 8015448:	465c      	mov	r4, fp
 801544a:	2c01      	cmp	r4, #1
 801544c:	f1aa 0a08 	sub.w	sl, sl, #8
 8015450:	dc7e      	bgt.n	8015550 <__kernel_rem_pio2+0x608>
 8015452:	2000      	movs	r0, #0
 8015454:	2100      	movs	r1, #0
 8015456:	f1bb 0f01 	cmp.w	fp, #1
 801545a:	f300 8097 	bgt.w	801558c <__kernel_rem_pio2+0x644>
 801545e:	9b02      	ldr	r3, [sp, #8]
 8015460:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8015464:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015468:	2b00      	cmp	r3, #0
 801546a:	f040 8099 	bne.w	80155a0 <__kernel_rem_pio2+0x658>
 801546e:	9b01      	ldr	r3, [sp, #4]
 8015470:	e9c3 5600 	strd	r5, r6, [r3]
 8015474:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8015478:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801547c:	e7ce      	b.n	801541c <__kernel_rem_pio2+0x4d4>
 801547e:	ab48      	add	r3, sp, #288	; 0x120
 8015480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015488:	f7ea ff20 	bl	80002cc <__adddf3>
 801548c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015490:	f1bb 0f00 	cmp.w	fp, #0
 8015494:	daf3      	bge.n	801547e <__kernel_rem_pio2+0x536>
 8015496:	9b02      	ldr	r3, [sp, #8]
 8015498:	b113      	cbz	r3, 80154a0 <__kernel_rem_pio2+0x558>
 801549a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801549e:	4619      	mov	r1, r3
 80154a0:	9b01      	ldr	r3, [sp, #4]
 80154a2:	e9c3 0100 	strd	r0, r1, [r3]
 80154a6:	e7b9      	b.n	801541c <__kernel_rem_pio2+0x4d4>
 80154a8:	2000      	movs	r0, #0
 80154aa:	2100      	movs	r1, #0
 80154ac:	e7f0      	b.n	8015490 <__kernel_rem_pio2+0x548>
 80154ae:	ab48      	add	r3, sp, #288	; 0x120
 80154b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80154b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b8:	f7ea ff08 	bl	80002cc <__adddf3>
 80154bc:	3c01      	subs	r4, #1
 80154be:	2c00      	cmp	r4, #0
 80154c0:	daf5      	bge.n	80154ae <__kernel_rem_pio2+0x566>
 80154c2:	9b02      	ldr	r3, [sp, #8]
 80154c4:	b1e3      	cbz	r3, 8015500 <__kernel_rem_pio2+0x5b8>
 80154c6:	4602      	mov	r2, r0
 80154c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154cc:	9c01      	ldr	r4, [sp, #4]
 80154ce:	e9c4 2300 	strd	r2, r3, [r4]
 80154d2:	4602      	mov	r2, r0
 80154d4:	460b      	mov	r3, r1
 80154d6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80154da:	f7ea fef5 	bl	80002c8 <__aeabi_dsub>
 80154de:	ad4a      	add	r5, sp, #296	; 0x128
 80154e0:	2401      	movs	r4, #1
 80154e2:	45a3      	cmp	fp, r4
 80154e4:	da0f      	bge.n	8015506 <__kernel_rem_pio2+0x5be>
 80154e6:	9b02      	ldr	r3, [sp, #8]
 80154e8:	b113      	cbz	r3, 80154f0 <__kernel_rem_pio2+0x5a8>
 80154ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154ee:	4619      	mov	r1, r3
 80154f0:	9b01      	ldr	r3, [sp, #4]
 80154f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80154f6:	e791      	b.n	801541c <__kernel_rem_pio2+0x4d4>
 80154f8:	465c      	mov	r4, fp
 80154fa:	2000      	movs	r0, #0
 80154fc:	2100      	movs	r1, #0
 80154fe:	e7de      	b.n	80154be <__kernel_rem_pio2+0x576>
 8015500:	4602      	mov	r2, r0
 8015502:	460b      	mov	r3, r1
 8015504:	e7e2      	b.n	80154cc <__kernel_rem_pio2+0x584>
 8015506:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801550a:	f7ea fedf 	bl	80002cc <__adddf3>
 801550e:	3401      	adds	r4, #1
 8015510:	e7e7      	b.n	80154e2 <__kernel_rem_pio2+0x59a>
 8015512:	e9d8 4500 	ldrd	r4, r5, [r8]
 8015516:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801551a:	4620      	mov	r0, r4
 801551c:	4632      	mov	r2, r6
 801551e:	463b      	mov	r3, r7
 8015520:	4629      	mov	r1, r5
 8015522:	f7ea fed3 	bl	80002cc <__adddf3>
 8015526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801552a:	4602      	mov	r2, r0
 801552c:	460b      	mov	r3, r1
 801552e:	4620      	mov	r0, r4
 8015530:	4629      	mov	r1, r5
 8015532:	f7ea fec9 	bl	80002c8 <__aeabi_dsub>
 8015536:	4632      	mov	r2, r6
 8015538:	463b      	mov	r3, r7
 801553a:	f7ea fec7 	bl	80002cc <__adddf3>
 801553e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015542:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8015546:	ed88 7b00 	vstr	d7, [r8]
 801554a:	f109 39ff 	add.w	r9, r9, #4294967295
 801554e:	e776      	b.n	801543e <__kernel_rem_pio2+0x4f6>
 8015550:	e9da 8900 	ldrd	r8, r9, [sl]
 8015554:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8015558:	4640      	mov	r0, r8
 801555a:	4632      	mov	r2, r6
 801555c:	463b      	mov	r3, r7
 801555e:	4649      	mov	r1, r9
 8015560:	f7ea feb4 	bl	80002cc <__adddf3>
 8015564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015568:	4602      	mov	r2, r0
 801556a:	460b      	mov	r3, r1
 801556c:	4640      	mov	r0, r8
 801556e:	4649      	mov	r1, r9
 8015570:	f7ea feaa 	bl	80002c8 <__aeabi_dsub>
 8015574:	4632      	mov	r2, r6
 8015576:	463b      	mov	r3, r7
 8015578:	f7ea fea8 	bl	80002cc <__adddf3>
 801557c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015580:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015584:	ed8a 7b00 	vstr	d7, [sl]
 8015588:	3c01      	subs	r4, #1
 801558a:	e75e      	b.n	801544a <__kernel_rem_pio2+0x502>
 801558c:	ab48      	add	r3, sp, #288	; 0x120
 801558e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015596:	f7ea fe99 	bl	80002cc <__adddf3>
 801559a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801559e:	e75a      	b.n	8015456 <__kernel_rem_pio2+0x50e>
 80155a0:	9b01      	ldr	r3, [sp, #4]
 80155a2:	9a01      	ldr	r2, [sp, #4]
 80155a4:	601d      	str	r5, [r3, #0]
 80155a6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80155aa:	605c      	str	r4, [r3, #4]
 80155ac:	609f      	str	r7, [r3, #8]
 80155ae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80155b2:	60d3      	str	r3, [r2, #12]
 80155b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155b8:	6110      	str	r0, [r2, #16]
 80155ba:	6153      	str	r3, [r2, #20]
 80155bc:	e72e      	b.n	801541c <__kernel_rem_pio2+0x4d4>
 80155be:	bf00      	nop
 80155c0:	41700000 	.word	0x41700000
 80155c4:	3e700000 	.word	0x3e700000

080155c8 <__kernel_sin>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	ed2d 8b04 	vpush	{d8-d9}
 80155d0:	eeb0 8a41 	vmov.f32	s16, s2
 80155d4:	eef0 8a61 	vmov.f32	s17, s3
 80155d8:	ec55 4b10 	vmov	r4, r5, d0
 80155dc:	b083      	sub	sp, #12
 80155de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80155e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80155e6:	9001      	str	r0, [sp, #4]
 80155e8:	da06      	bge.n	80155f8 <__kernel_sin+0x30>
 80155ea:	ee10 0a10 	vmov	r0, s0
 80155ee:	4629      	mov	r1, r5
 80155f0:	f7eb fabc 	bl	8000b6c <__aeabi_d2iz>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d051      	beq.n	801569c <__kernel_sin+0xd4>
 80155f8:	4622      	mov	r2, r4
 80155fa:	462b      	mov	r3, r5
 80155fc:	4620      	mov	r0, r4
 80155fe:	4629      	mov	r1, r5
 8015600:	f7eb f81a 	bl	8000638 <__aeabi_dmul>
 8015604:	4682      	mov	sl, r0
 8015606:	468b      	mov	fp, r1
 8015608:	4602      	mov	r2, r0
 801560a:	460b      	mov	r3, r1
 801560c:	4620      	mov	r0, r4
 801560e:	4629      	mov	r1, r5
 8015610:	f7eb f812 	bl	8000638 <__aeabi_dmul>
 8015614:	a341      	add	r3, pc, #260	; (adr r3, 801571c <__kernel_sin+0x154>)
 8015616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561a:	4680      	mov	r8, r0
 801561c:	4689      	mov	r9, r1
 801561e:	4650      	mov	r0, sl
 8015620:	4659      	mov	r1, fp
 8015622:	f7eb f809 	bl	8000638 <__aeabi_dmul>
 8015626:	a33f      	add	r3, pc, #252	; (adr r3, 8015724 <__kernel_sin+0x15c>)
 8015628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562c:	f7ea fe4c 	bl	80002c8 <__aeabi_dsub>
 8015630:	4652      	mov	r2, sl
 8015632:	465b      	mov	r3, fp
 8015634:	f7eb f800 	bl	8000638 <__aeabi_dmul>
 8015638:	a33c      	add	r3, pc, #240	; (adr r3, 801572c <__kernel_sin+0x164>)
 801563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563e:	f7ea fe45 	bl	80002cc <__adddf3>
 8015642:	4652      	mov	r2, sl
 8015644:	465b      	mov	r3, fp
 8015646:	f7ea fff7 	bl	8000638 <__aeabi_dmul>
 801564a:	a33a      	add	r3, pc, #232	; (adr r3, 8015734 <__kernel_sin+0x16c>)
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	f7ea fe3a 	bl	80002c8 <__aeabi_dsub>
 8015654:	4652      	mov	r2, sl
 8015656:	465b      	mov	r3, fp
 8015658:	f7ea ffee 	bl	8000638 <__aeabi_dmul>
 801565c:	a337      	add	r3, pc, #220	; (adr r3, 801573c <__kernel_sin+0x174>)
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	f7ea fe33 	bl	80002cc <__adddf3>
 8015666:	9b01      	ldr	r3, [sp, #4]
 8015668:	4606      	mov	r6, r0
 801566a:	460f      	mov	r7, r1
 801566c:	b9eb      	cbnz	r3, 80156aa <__kernel_sin+0xe2>
 801566e:	4602      	mov	r2, r0
 8015670:	460b      	mov	r3, r1
 8015672:	4650      	mov	r0, sl
 8015674:	4659      	mov	r1, fp
 8015676:	f7ea ffdf 	bl	8000638 <__aeabi_dmul>
 801567a:	a325      	add	r3, pc, #148	; (adr r3, 8015710 <__kernel_sin+0x148>)
 801567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015680:	f7ea fe22 	bl	80002c8 <__aeabi_dsub>
 8015684:	4642      	mov	r2, r8
 8015686:	464b      	mov	r3, r9
 8015688:	f7ea ffd6 	bl	8000638 <__aeabi_dmul>
 801568c:	4602      	mov	r2, r0
 801568e:	460b      	mov	r3, r1
 8015690:	4620      	mov	r0, r4
 8015692:	4629      	mov	r1, r5
 8015694:	f7ea fe1a 	bl	80002cc <__adddf3>
 8015698:	4604      	mov	r4, r0
 801569a:	460d      	mov	r5, r1
 801569c:	ec45 4b10 	vmov	d0, r4, r5
 80156a0:	b003      	add	sp, #12
 80156a2:	ecbd 8b04 	vpop	{d8-d9}
 80156a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156aa:	4b1b      	ldr	r3, [pc, #108]	; (8015718 <__kernel_sin+0x150>)
 80156ac:	ec51 0b18 	vmov	r0, r1, d8
 80156b0:	2200      	movs	r2, #0
 80156b2:	f7ea ffc1 	bl	8000638 <__aeabi_dmul>
 80156b6:	4632      	mov	r2, r6
 80156b8:	ec41 0b19 	vmov	d9, r0, r1
 80156bc:	463b      	mov	r3, r7
 80156be:	4640      	mov	r0, r8
 80156c0:	4649      	mov	r1, r9
 80156c2:	f7ea ffb9 	bl	8000638 <__aeabi_dmul>
 80156c6:	4602      	mov	r2, r0
 80156c8:	460b      	mov	r3, r1
 80156ca:	ec51 0b19 	vmov	r0, r1, d9
 80156ce:	f7ea fdfb 	bl	80002c8 <__aeabi_dsub>
 80156d2:	4652      	mov	r2, sl
 80156d4:	465b      	mov	r3, fp
 80156d6:	f7ea ffaf 	bl	8000638 <__aeabi_dmul>
 80156da:	ec53 2b18 	vmov	r2, r3, d8
 80156de:	f7ea fdf3 	bl	80002c8 <__aeabi_dsub>
 80156e2:	a30b      	add	r3, pc, #44	; (adr r3, 8015710 <__kernel_sin+0x148>)
 80156e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e8:	4606      	mov	r6, r0
 80156ea:	460f      	mov	r7, r1
 80156ec:	4640      	mov	r0, r8
 80156ee:	4649      	mov	r1, r9
 80156f0:	f7ea ffa2 	bl	8000638 <__aeabi_dmul>
 80156f4:	4602      	mov	r2, r0
 80156f6:	460b      	mov	r3, r1
 80156f8:	4630      	mov	r0, r6
 80156fa:	4639      	mov	r1, r7
 80156fc:	f7ea fde6 	bl	80002cc <__adddf3>
 8015700:	4602      	mov	r2, r0
 8015702:	460b      	mov	r3, r1
 8015704:	4620      	mov	r0, r4
 8015706:	4629      	mov	r1, r5
 8015708:	f7ea fdde 	bl	80002c8 <__aeabi_dsub>
 801570c:	e7c4      	b.n	8015698 <__kernel_sin+0xd0>
 801570e:	bf00      	nop
 8015710:	55555549 	.word	0x55555549
 8015714:	3fc55555 	.word	0x3fc55555
 8015718:	3fe00000 	.word	0x3fe00000
 801571c:	5acfd57c 	.word	0x5acfd57c
 8015720:	3de5d93a 	.word	0x3de5d93a
 8015724:	8a2b9ceb 	.word	0x8a2b9ceb
 8015728:	3e5ae5e6 	.word	0x3e5ae5e6
 801572c:	57b1fe7d 	.word	0x57b1fe7d
 8015730:	3ec71de3 	.word	0x3ec71de3
 8015734:	19c161d5 	.word	0x19c161d5
 8015738:	3f2a01a0 	.word	0x3f2a01a0
 801573c:	1110f8a6 	.word	0x1110f8a6
 8015740:	3f811111 	.word	0x3f811111

08015744 <fabs>:
 8015744:	ec51 0b10 	vmov	r0, r1, d0
 8015748:	ee10 2a10 	vmov	r2, s0
 801574c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015750:	ec43 2b10 	vmov	d0, r2, r3
 8015754:	4770      	bx	lr
	...

08015758 <floor>:
 8015758:	ec51 0b10 	vmov	r0, r1, d0
 801575c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015760:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015764:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015768:	2e13      	cmp	r6, #19
 801576a:	ee10 5a10 	vmov	r5, s0
 801576e:	ee10 8a10 	vmov	r8, s0
 8015772:	460c      	mov	r4, r1
 8015774:	dc32      	bgt.n	80157dc <floor+0x84>
 8015776:	2e00      	cmp	r6, #0
 8015778:	da14      	bge.n	80157a4 <floor+0x4c>
 801577a:	a333      	add	r3, pc, #204	; (adr r3, 8015848 <floor+0xf0>)
 801577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015780:	f7ea fda4 	bl	80002cc <__adddf3>
 8015784:	2200      	movs	r2, #0
 8015786:	2300      	movs	r3, #0
 8015788:	f7eb f9e6 	bl	8000b58 <__aeabi_dcmpgt>
 801578c:	b138      	cbz	r0, 801579e <floor+0x46>
 801578e:	2c00      	cmp	r4, #0
 8015790:	da57      	bge.n	8015842 <floor+0xea>
 8015792:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015796:	431d      	orrs	r5, r3
 8015798:	d001      	beq.n	801579e <floor+0x46>
 801579a:	4c2d      	ldr	r4, [pc, #180]	; (8015850 <floor+0xf8>)
 801579c:	2500      	movs	r5, #0
 801579e:	4621      	mov	r1, r4
 80157a0:	4628      	mov	r0, r5
 80157a2:	e025      	b.n	80157f0 <floor+0x98>
 80157a4:	4f2b      	ldr	r7, [pc, #172]	; (8015854 <floor+0xfc>)
 80157a6:	4137      	asrs	r7, r6
 80157a8:	ea01 0307 	and.w	r3, r1, r7
 80157ac:	4303      	orrs	r3, r0
 80157ae:	d01f      	beq.n	80157f0 <floor+0x98>
 80157b0:	a325      	add	r3, pc, #148	; (adr r3, 8015848 <floor+0xf0>)
 80157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b6:	f7ea fd89 	bl	80002cc <__adddf3>
 80157ba:	2200      	movs	r2, #0
 80157bc:	2300      	movs	r3, #0
 80157be:	f7eb f9cb 	bl	8000b58 <__aeabi_dcmpgt>
 80157c2:	2800      	cmp	r0, #0
 80157c4:	d0eb      	beq.n	801579e <floor+0x46>
 80157c6:	2c00      	cmp	r4, #0
 80157c8:	bfbe      	ittt	lt
 80157ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80157ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80157d2:	19a4      	addlt	r4, r4, r6
 80157d4:	ea24 0407 	bic.w	r4, r4, r7
 80157d8:	2500      	movs	r5, #0
 80157da:	e7e0      	b.n	801579e <floor+0x46>
 80157dc:	2e33      	cmp	r6, #51	; 0x33
 80157de:	dd0b      	ble.n	80157f8 <floor+0xa0>
 80157e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80157e4:	d104      	bne.n	80157f0 <floor+0x98>
 80157e6:	ee10 2a10 	vmov	r2, s0
 80157ea:	460b      	mov	r3, r1
 80157ec:	f7ea fd6e 	bl	80002cc <__adddf3>
 80157f0:	ec41 0b10 	vmov	d0, r0, r1
 80157f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80157fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015800:	fa23 f707 	lsr.w	r7, r3, r7
 8015804:	4207      	tst	r7, r0
 8015806:	d0f3      	beq.n	80157f0 <floor+0x98>
 8015808:	a30f      	add	r3, pc, #60	; (adr r3, 8015848 <floor+0xf0>)
 801580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580e:	f7ea fd5d 	bl	80002cc <__adddf3>
 8015812:	2200      	movs	r2, #0
 8015814:	2300      	movs	r3, #0
 8015816:	f7eb f99f 	bl	8000b58 <__aeabi_dcmpgt>
 801581a:	2800      	cmp	r0, #0
 801581c:	d0bf      	beq.n	801579e <floor+0x46>
 801581e:	2c00      	cmp	r4, #0
 8015820:	da02      	bge.n	8015828 <floor+0xd0>
 8015822:	2e14      	cmp	r6, #20
 8015824:	d103      	bne.n	801582e <floor+0xd6>
 8015826:	3401      	adds	r4, #1
 8015828:	ea25 0507 	bic.w	r5, r5, r7
 801582c:	e7b7      	b.n	801579e <floor+0x46>
 801582e:	2301      	movs	r3, #1
 8015830:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015834:	fa03 f606 	lsl.w	r6, r3, r6
 8015838:	4435      	add	r5, r6
 801583a:	4545      	cmp	r5, r8
 801583c:	bf38      	it	cc
 801583e:	18e4      	addcc	r4, r4, r3
 8015840:	e7f2      	b.n	8015828 <floor+0xd0>
 8015842:	2500      	movs	r5, #0
 8015844:	462c      	mov	r4, r5
 8015846:	e7aa      	b.n	801579e <floor+0x46>
 8015848:	8800759c 	.word	0x8800759c
 801584c:	7e37e43c 	.word	0x7e37e43c
 8015850:	bff00000 	.word	0xbff00000
 8015854:	000fffff 	.word	0x000fffff

08015858 <scalbn>:
 8015858:	b570      	push	{r4, r5, r6, lr}
 801585a:	ec55 4b10 	vmov	r4, r5, d0
 801585e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015862:	4606      	mov	r6, r0
 8015864:	462b      	mov	r3, r5
 8015866:	b99a      	cbnz	r2, 8015890 <scalbn+0x38>
 8015868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801586c:	4323      	orrs	r3, r4
 801586e:	d036      	beq.n	80158de <scalbn+0x86>
 8015870:	4b39      	ldr	r3, [pc, #228]	; (8015958 <scalbn+0x100>)
 8015872:	4629      	mov	r1, r5
 8015874:	ee10 0a10 	vmov	r0, s0
 8015878:	2200      	movs	r2, #0
 801587a:	f7ea fedd 	bl	8000638 <__aeabi_dmul>
 801587e:	4b37      	ldr	r3, [pc, #220]	; (801595c <scalbn+0x104>)
 8015880:	429e      	cmp	r6, r3
 8015882:	4604      	mov	r4, r0
 8015884:	460d      	mov	r5, r1
 8015886:	da10      	bge.n	80158aa <scalbn+0x52>
 8015888:	a32b      	add	r3, pc, #172	; (adr r3, 8015938 <scalbn+0xe0>)
 801588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588e:	e03a      	b.n	8015906 <scalbn+0xae>
 8015890:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015894:	428a      	cmp	r2, r1
 8015896:	d10c      	bne.n	80158b2 <scalbn+0x5a>
 8015898:	ee10 2a10 	vmov	r2, s0
 801589c:	4620      	mov	r0, r4
 801589e:	4629      	mov	r1, r5
 80158a0:	f7ea fd14 	bl	80002cc <__adddf3>
 80158a4:	4604      	mov	r4, r0
 80158a6:	460d      	mov	r5, r1
 80158a8:	e019      	b.n	80158de <scalbn+0x86>
 80158aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80158ae:	460b      	mov	r3, r1
 80158b0:	3a36      	subs	r2, #54	; 0x36
 80158b2:	4432      	add	r2, r6
 80158b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80158b8:	428a      	cmp	r2, r1
 80158ba:	dd08      	ble.n	80158ce <scalbn+0x76>
 80158bc:	2d00      	cmp	r5, #0
 80158be:	a120      	add	r1, pc, #128	; (adr r1, 8015940 <scalbn+0xe8>)
 80158c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158c4:	da1c      	bge.n	8015900 <scalbn+0xa8>
 80158c6:	a120      	add	r1, pc, #128	; (adr r1, 8015948 <scalbn+0xf0>)
 80158c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158cc:	e018      	b.n	8015900 <scalbn+0xa8>
 80158ce:	2a00      	cmp	r2, #0
 80158d0:	dd08      	ble.n	80158e4 <scalbn+0x8c>
 80158d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80158d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80158da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80158de:	ec45 4b10 	vmov	d0, r4, r5
 80158e2:	bd70      	pop	{r4, r5, r6, pc}
 80158e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80158e8:	da19      	bge.n	801591e <scalbn+0xc6>
 80158ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80158ee:	429e      	cmp	r6, r3
 80158f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80158f4:	dd0a      	ble.n	801590c <scalbn+0xb4>
 80158f6:	a112      	add	r1, pc, #72	; (adr r1, 8015940 <scalbn+0xe8>)
 80158f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d1e2      	bne.n	80158c6 <scalbn+0x6e>
 8015900:	a30f      	add	r3, pc, #60	; (adr r3, 8015940 <scalbn+0xe8>)
 8015902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015906:	f7ea fe97 	bl	8000638 <__aeabi_dmul>
 801590a:	e7cb      	b.n	80158a4 <scalbn+0x4c>
 801590c:	a10a      	add	r1, pc, #40	; (adr r1, 8015938 <scalbn+0xe0>)
 801590e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d0b8      	beq.n	8015888 <scalbn+0x30>
 8015916:	a10e      	add	r1, pc, #56	; (adr r1, 8015950 <scalbn+0xf8>)
 8015918:	e9d1 0100 	ldrd	r0, r1, [r1]
 801591c:	e7b4      	b.n	8015888 <scalbn+0x30>
 801591e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015922:	3236      	adds	r2, #54	; 0x36
 8015924:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015928:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801592c:	4620      	mov	r0, r4
 801592e:	4b0c      	ldr	r3, [pc, #48]	; (8015960 <scalbn+0x108>)
 8015930:	2200      	movs	r2, #0
 8015932:	e7e8      	b.n	8015906 <scalbn+0xae>
 8015934:	f3af 8000 	nop.w
 8015938:	c2f8f359 	.word	0xc2f8f359
 801593c:	01a56e1f 	.word	0x01a56e1f
 8015940:	8800759c 	.word	0x8800759c
 8015944:	7e37e43c 	.word	0x7e37e43c
 8015948:	8800759c 	.word	0x8800759c
 801594c:	fe37e43c 	.word	0xfe37e43c
 8015950:	c2f8f359 	.word	0xc2f8f359
 8015954:	81a56e1f 	.word	0x81a56e1f
 8015958:	43500000 	.word	0x43500000
 801595c:	ffff3cb0 	.word	0xffff3cb0
 8015960:	3c900000 	.word	0x3c900000

08015964 <abort>:
 8015964:	b508      	push	{r3, lr}
 8015966:	2006      	movs	r0, #6
 8015968:	f000 f940 	bl	8015bec <raise>
 801596c:	2001      	movs	r0, #1
 801596e:	f7ed f819 	bl	80029a4 <_exit>
	...

08015974 <__errno>:
 8015974:	4b01      	ldr	r3, [pc, #4]	; (801597c <__errno+0x8>)
 8015976:	6818      	ldr	r0, [r3, #0]
 8015978:	4770      	bx	lr
 801597a:	bf00      	nop
 801597c:	20000160 	.word	0x20000160

08015980 <__libc_init_array>:
 8015980:	b570      	push	{r4, r5, r6, lr}
 8015982:	4d0d      	ldr	r5, [pc, #52]	; (80159b8 <__libc_init_array+0x38>)
 8015984:	4c0d      	ldr	r4, [pc, #52]	; (80159bc <__libc_init_array+0x3c>)
 8015986:	1b64      	subs	r4, r4, r5
 8015988:	10a4      	asrs	r4, r4, #2
 801598a:	2600      	movs	r6, #0
 801598c:	42a6      	cmp	r6, r4
 801598e:	d109      	bne.n	80159a4 <__libc_init_array+0x24>
 8015990:	4d0b      	ldr	r5, [pc, #44]	; (80159c0 <__libc_init_array+0x40>)
 8015992:	4c0c      	ldr	r4, [pc, #48]	; (80159c4 <__libc_init_array+0x44>)
 8015994:	f000 fcb8 	bl	8016308 <_init>
 8015998:	1b64      	subs	r4, r4, r5
 801599a:	10a4      	asrs	r4, r4, #2
 801599c:	2600      	movs	r6, #0
 801599e:	42a6      	cmp	r6, r4
 80159a0:	d105      	bne.n	80159ae <__libc_init_array+0x2e>
 80159a2:	bd70      	pop	{r4, r5, r6, pc}
 80159a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80159a8:	4798      	blx	r3
 80159aa:	3601      	adds	r6, #1
 80159ac:	e7ee      	b.n	801598c <__libc_init_array+0xc>
 80159ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80159b2:	4798      	blx	r3
 80159b4:	3601      	adds	r6, #1
 80159b6:	e7f2      	b.n	801599e <__libc_init_array+0x1e>
 80159b8:	0801981c 	.word	0x0801981c
 80159bc:	0801981c 	.word	0x0801981c
 80159c0:	0801981c 	.word	0x0801981c
 80159c4:	08019824 	.word	0x08019824

080159c8 <memcpy>:
 80159c8:	440a      	add	r2, r1
 80159ca:	4291      	cmp	r1, r2
 80159cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80159d0:	d100      	bne.n	80159d4 <memcpy+0xc>
 80159d2:	4770      	bx	lr
 80159d4:	b510      	push	{r4, lr}
 80159d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159de:	4291      	cmp	r1, r2
 80159e0:	d1f9      	bne.n	80159d6 <memcpy+0xe>
 80159e2:	bd10      	pop	{r4, pc}

080159e4 <memmove>:
 80159e4:	4288      	cmp	r0, r1
 80159e6:	b510      	push	{r4, lr}
 80159e8:	eb01 0402 	add.w	r4, r1, r2
 80159ec:	d902      	bls.n	80159f4 <memmove+0x10>
 80159ee:	4284      	cmp	r4, r0
 80159f0:	4623      	mov	r3, r4
 80159f2:	d807      	bhi.n	8015a04 <memmove+0x20>
 80159f4:	1e43      	subs	r3, r0, #1
 80159f6:	42a1      	cmp	r1, r4
 80159f8:	d008      	beq.n	8015a0c <memmove+0x28>
 80159fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a02:	e7f8      	b.n	80159f6 <memmove+0x12>
 8015a04:	4402      	add	r2, r0
 8015a06:	4601      	mov	r1, r0
 8015a08:	428a      	cmp	r2, r1
 8015a0a:	d100      	bne.n	8015a0e <memmove+0x2a>
 8015a0c:	bd10      	pop	{r4, pc}
 8015a0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a16:	e7f7      	b.n	8015a08 <memmove+0x24>

08015a18 <memset>:
 8015a18:	4402      	add	r2, r0
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d100      	bne.n	8015a22 <memset+0xa>
 8015a20:	4770      	bx	lr
 8015a22:	f803 1b01 	strb.w	r1, [r3], #1
 8015a26:	e7f9      	b.n	8015a1c <memset+0x4>

08015a28 <_free_r>:
 8015a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a2a:	2900      	cmp	r1, #0
 8015a2c:	d048      	beq.n	8015ac0 <_free_r+0x98>
 8015a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a32:	9001      	str	r0, [sp, #4]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f1a1 0404 	sub.w	r4, r1, #4
 8015a3a:	bfb8      	it	lt
 8015a3c:	18e4      	addlt	r4, r4, r3
 8015a3e:	f000 f937 	bl	8015cb0 <__malloc_lock>
 8015a42:	4a20      	ldr	r2, [pc, #128]	; (8015ac4 <_free_r+0x9c>)
 8015a44:	9801      	ldr	r0, [sp, #4]
 8015a46:	6813      	ldr	r3, [r2, #0]
 8015a48:	4615      	mov	r5, r2
 8015a4a:	b933      	cbnz	r3, 8015a5a <_free_r+0x32>
 8015a4c:	6063      	str	r3, [r4, #4]
 8015a4e:	6014      	str	r4, [r2, #0]
 8015a50:	b003      	add	sp, #12
 8015a52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a56:	f000 b931 	b.w	8015cbc <__malloc_unlock>
 8015a5a:	42a3      	cmp	r3, r4
 8015a5c:	d90b      	bls.n	8015a76 <_free_r+0x4e>
 8015a5e:	6821      	ldr	r1, [r4, #0]
 8015a60:	1862      	adds	r2, r4, r1
 8015a62:	4293      	cmp	r3, r2
 8015a64:	bf04      	itt	eq
 8015a66:	681a      	ldreq	r2, [r3, #0]
 8015a68:	685b      	ldreq	r3, [r3, #4]
 8015a6a:	6063      	str	r3, [r4, #4]
 8015a6c:	bf04      	itt	eq
 8015a6e:	1852      	addeq	r2, r2, r1
 8015a70:	6022      	streq	r2, [r4, #0]
 8015a72:	602c      	str	r4, [r5, #0]
 8015a74:	e7ec      	b.n	8015a50 <_free_r+0x28>
 8015a76:	461a      	mov	r2, r3
 8015a78:	685b      	ldr	r3, [r3, #4]
 8015a7a:	b10b      	cbz	r3, 8015a80 <_free_r+0x58>
 8015a7c:	42a3      	cmp	r3, r4
 8015a7e:	d9fa      	bls.n	8015a76 <_free_r+0x4e>
 8015a80:	6811      	ldr	r1, [r2, #0]
 8015a82:	1855      	adds	r5, r2, r1
 8015a84:	42a5      	cmp	r5, r4
 8015a86:	d10b      	bne.n	8015aa0 <_free_r+0x78>
 8015a88:	6824      	ldr	r4, [r4, #0]
 8015a8a:	4421      	add	r1, r4
 8015a8c:	1854      	adds	r4, r2, r1
 8015a8e:	42a3      	cmp	r3, r4
 8015a90:	6011      	str	r1, [r2, #0]
 8015a92:	d1dd      	bne.n	8015a50 <_free_r+0x28>
 8015a94:	681c      	ldr	r4, [r3, #0]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	6053      	str	r3, [r2, #4]
 8015a9a:	4421      	add	r1, r4
 8015a9c:	6011      	str	r1, [r2, #0]
 8015a9e:	e7d7      	b.n	8015a50 <_free_r+0x28>
 8015aa0:	d902      	bls.n	8015aa8 <_free_r+0x80>
 8015aa2:	230c      	movs	r3, #12
 8015aa4:	6003      	str	r3, [r0, #0]
 8015aa6:	e7d3      	b.n	8015a50 <_free_r+0x28>
 8015aa8:	6825      	ldr	r5, [r4, #0]
 8015aaa:	1961      	adds	r1, r4, r5
 8015aac:	428b      	cmp	r3, r1
 8015aae:	bf04      	itt	eq
 8015ab0:	6819      	ldreq	r1, [r3, #0]
 8015ab2:	685b      	ldreq	r3, [r3, #4]
 8015ab4:	6063      	str	r3, [r4, #4]
 8015ab6:	bf04      	itt	eq
 8015ab8:	1949      	addeq	r1, r1, r5
 8015aba:	6021      	streq	r1, [r4, #0]
 8015abc:	6054      	str	r4, [r2, #4]
 8015abe:	e7c7      	b.n	8015a50 <_free_r+0x28>
 8015ac0:	b003      	add	sp, #12
 8015ac2:	bd30      	pop	{r4, r5, pc}
 8015ac4:	2000541c 	.word	0x2000541c

08015ac8 <_malloc_r>:
 8015ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aca:	1ccd      	adds	r5, r1, #3
 8015acc:	f025 0503 	bic.w	r5, r5, #3
 8015ad0:	3508      	adds	r5, #8
 8015ad2:	2d0c      	cmp	r5, #12
 8015ad4:	bf38      	it	cc
 8015ad6:	250c      	movcc	r5, #12
 8015ad8:	2d00      	cmp	r5, #0
 8015ada:	4606      	mov	r6, r0
 8015adc:	db01      	blt.n	8015ae2 <_malloc_r+0x1a>
 8015ade:	42a9      	cmp	r1, r5
 8015ae0:	d903      	bls.n	8015aea <_malloc_r+0x22>
 8015ae2:	230c      	movs	r3, #12
 8015ae4:	6033      	str	r3, [r6, #0]
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aea:	f000 f8e1 	bl	8015cb0 <__malloc_lock>
 8015aee:	4921      	ldr	r1, [pc, #132]	; (8015b74 <_malloc_r+0xac>)
 8015af0:	680a      	ldr	r2, [r1, #0]
 8015af2:	4614      	mov	r4, r2
 8015af4:	b99c      	cbnz	r4, 8015b1e <_malloc_r+0x56>
 8015af6:	4f20      	ldr	r7, [pc, #128]	; (8015b78 <_malloc_r+0xb0>)
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	b923      	cbnz	r3, 8015b06 <_malloc_r+0x3e>
 8015afc:	4621      	mov	r1, r4
 8015afe:	4630      	mov	r0, r6
 8015b00:	f000 f83c 	bl	8015b7c <_sbrk_r>
 8015b04:	6038      	str	r0, [r7, #0]
 8015b06:	4629      	mov	r1, r5
 8015b08:	4630      	mov	r0, r6
 8015b0a:	f000 f837 	bl	8015b7c <_sbrk_r>
 8015b0e:	1c43      	adds	r3, r0, #1
 8015b10:	d123      	bne.n	8015b5a <_malloc_r+0x92>
 8015b12:	230c      	movs	r3, #12
 8015b14:	6033      	str	r3, [r6, #0]
 8015b16:	4630      	mov	r0, r6
 8015b18:	f000 f8d0 	bl	8015cbc <__malloc_unlock>
 8015b1c:	e7e3      	b.n	8015ae6 <_malloc_r+0x1e>
 8015b1e:	6823      	ldr	r3, [r4, #0]
 8015b20:	1b5b      	subs	r3, r3, r5
 8015b22:	d417      	bmi.n	8015b54 <_malloc_r+0x8c>
 8015b24:	2b0b      	cmp	r3, #11
 8015b26:	d903      	bls.n	8015b30 <_malloc_r+0x68>
 8015b28:	6023      	str	r3, [r4, #0]
 8015b2a:	441c      	add	r4, r3
 8015b2c:	6025      	str	r5, [r4, #0]
 8015b2e:	e004      	b.n	8015b3a <_malloc_r+0x72>
 8015b30:	6863      	ldr	r3, [r4, #4]
 8015b32:	42a2      	cmp	r2, r4
 8015b34:	bf0c      	ite	eq
 8015b36:	600b      	streq	r3, [r1, #0]
 8015b38:	6053      	strne	r3, [r2, #4]
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f000 f8be 	bl	8015cbc <__malloc_unlock>
 8015b40:	f104 000b 	add.w	r0, r4, #11
 8015b44:	1d23      	adds	r3, r4, #4
 8015b46:	f020 0007 	bic.w	r0, r0, #7
 8015b4a:	1ac2      	subs	r2, r0, r3
 8015b4c:	d0cc      	beq.n	8015ae8 <_malloc_r+0x20>
 8015b4e:	1a1b      	subs	r3, r3, r0
 8015b50:	50a3      	str	r3, [r4, r2]
 8015b52:	e7c9      	b.n	8015ae8 <_malloc_r+0x20>
 8015b54:	4622      	mov	r2, r4
 8015b56:	6864      	ldr	r4, [r4, #4]
 8015b58:	e7cc      	b.n	8015af4 <_malloc_r+0x2c>
 8015b5a:	1cc4      	adds	r4, r0, #3
 8015b5c:	f024 0403 	bic.w	r4, r4, #3
 8015b60:	42a0      	cmp	r0, r4
 8015b62:	d0e3      	beq.n	8015b2c <_malloc_r+0x64>
 8015b64:	1a21      	subs	r1, r4, r0
 8015b66:	4630      	mov	r0, r6
 8015b68:	f000 f808 	bl	8015b7c <_sbrk_r>
 8015b6c:	3001      	adds	r0, #1
 8015b6e:	d1dd      	bne.n	8015b2c <_malloc_r+0x64>
 8015b70:	e7cf      	b.n	8015b12 <_malloc_r+0x4a>
 8015b72:	bf00      	nop
 8015b74:	2000541c 	.word	0x2000541c
 8015b78:	20005420 	.word	0x20005420

08015b7c <_sbrk_r>:
 8015b7c:	b538      	push	{r3, r4, r5, lr}
 8015b7e:	4d06      	ldr	r5, [pc, #24]	; (8015b98 <_sbrk_r+0x1c>)
 8015b80:	2300      	movs	r3, #0
 8015b82:	4604      	mov	r4, r0
 8015b84:	4608      	mov	r0, r1
 8015b86:	602b      	str	r3, [r5, #0]
 8015b88:	f7ec ff16 	bl	80029b8 <_sbrk>
 8015b8c:	1c43      	adds	r3, r0, #1
 8015b8e:	d102      	bne.n	8015b96 <_sbrk_r+0x1a>
 8015b90:	682b      	ldr	r3, [r5, #0]
 8015b92:	b103      	cbz	r3, 8015b96 <_sbrk_r+0x1a>
 8015b94:	6023      	str	r3, [r4, #0]
 8015b96:	bd38      	pop	{r3, r4, r5, pc}
 8015b98:	20005d88 	.word	0x20005d88

08015b9c <_raise_r>:
 8015b9c:	291f      	cmp	r1, #31
 8015b9e:	b538      	push	{r3, r4, r5, lr}
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	460d      	mov	r5, r1
 8015ba4:	d904      	bls.n	8015bb0 <_raise_r+0x14>
 8015ba6:	2316      	movs	r3, #22
 8015ba8:	6003      	str	r3, [r0, #0]
 8015baa:	f04f 30ff 	mov.w	r0, #4294967295
 8015bae:	bd38      	pop	{r3, r4, r5, pc}
 8015bb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015bb2:	b112      	cbz	r2, 8015bba <_raise_r+0x1e>
 8015bb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015bb8:	b94b      	cbnz	r3, 8015bce <_raise_r+0x32>
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f000 f830 	bl	8015c20 <_getpid_r>
 8015bc0:	462a      	mov	r2, r5
 8015bc2:	4601      	mov	r1, r0
 8015bc4:	4620      	mov	r0, r4
 8015bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015bca:	f000 b817 	b.w	8015bfc <_kill_r>
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d00a      	beq.n	8015be8 <_raise_r+0x4c>
 8015bd2:	1c59      	adds	r1, r3, #1
 8015bd4:	d103      	bne.n	8015bde <_raise_r+0x42>
 8015bd6:	2316      	movs	r3, #22
 8015bd8:	6003      	str	r3, [r0, #0]
 8015bda:	2001      	movs	r0, #1
 8015bdc:	e7e7      	b.n	8015bae <_raise_r+0x12>
 8015bde:	2400      	movs	r4, #0
 8015be0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015be4:	4628      	mov	r0, r5
 8015be6:	4798      	blx	r3
 8015be8:	2000      	movs	r0, #0
 8015bea:	e7e0      	b.n	8015bae <_raise_r+0x12>

08015bec <raise>:
 8015bec:	4b02      	ldr	r3, [pc, #8]	; (8015bf8 <raise+0xc>)
 8015bee:	4601      	mov	r1, r0
 8015bf0:	6818      	ldr	r0, [r3, #0]
 8015bf2:	f7ff bfd3 	b.w	8015b9c <_raise_r>
 8015bf6:	bf00      	nop
 8015bf8:	20000160 	.word	0x20000160

08015bfc <_kill_r>:
 8015bfc:	b538      	push	{r3, r4, r5, lr}
 8015bfe:	4d07      	ldr	r5, [pc, #28]	; (8015c1c <_kill_r+0x20>)
 8015c00:	2300      	movs	r3, #0
 8015c02:	4604      	mov	r4, r0
 8015c04:	4608      	mov	r0, r1
 8015c06:	4611      	mov	r1, r2
 8015c08:	602b      	str	r3, [r5, #0]
 8015c0a:	f7ec febb 	bl	8002984 <_kill>
 8015c0e:	1c43      	adds	r3, r0, #1
 8015c10:	d102      	bne.n	8015c18 <_kill_r+0x1c>
 8015c12:	682b      	ldr	r3, [r5, #0]
 8015c14:	b103      	cbz	r3, 8015c18 <_kill_r+0x1c>
 8015c16:	6023      	str	r3, [r4, #0]
 8015c18:	bd38      	pop	{r3, r4, r5, pc}
 8015c1a:	bf00      	nop
 8015c1c:	20005d88 	.word	0x20005d88

08015c20 <_getpid_r>:
 8015c20:	f7ec bea8 	b.w	8002974 <_getpid>

08015c24 <sniprintf>:
 8015c24:	b40c      	push	{r2, r3}
 8015c26:	b530      	push	{r4, r5, lr}
 8015c28:	4b17      	ldr	r3, [pc, #92]	; (8015c88 <sniprintf+0x64>)
 8015c2a:	1e0c      	subs	r4, r1, #0
 8015c2c:	681d      	ldr	r5, [r3, #0]
 8015c2e:	b09d      	sub	sp, #116	; 0x74
 8015c30:	da08      	bge.n	8015c44 <sniprintf+0x20>
 8015c32:	238b      	movs	r3, #139	; 0x8b
 8015c34:	602b      	str	r3, [r5, #0]
 8015c36:	f04f 30ff 	mov.w	r0, #4294967295
 8015c3a:	b01d      	add	sp, #116	; 0x74
 8015c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c40:	b002      	add	sp, #8
 8015c42:	4770      	bx	lr
 8015c44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015c48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015c4c:	bf14      	ite	ne
 8015c4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015c52:	4623      	moveq	r3, r4
 8015c54:	9304      	str	r3, [sp, #16]
 8015c56:	9307      	str	r3, [sp, #28]
 8015c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c5c:	9002      	str	r0, [sp, #8]
 8015c5e:	9006      	str	r0, [sp, #24]
 8015c60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015c64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015c66:	ab21      	add	r3, sp, #132	; 0x84
 8015c68:	a902      	add	r1, sp, #8
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	9301      	str	r3, [sp, #4]
 8015c6e:	f000 f8ad 	bl	8015dcc <_svfiprintf_r>
 8015c72:	1c43      	adds	r3, r0, #1
 8015c74:	bfbc      	itt	lt
 8015c76:	238b      	movlt	r3, #139	; 0x8b
 8015c78:	602b      	strlt	r3, [r5, #0]
 8015c7a:	2c00      	cmp	r4, #0
 8015c7c:	d0dd      	beq.n	8015c3a <sniprintf+0x16>
 8015c7e:	9b02      	ldr	r3, [sp, #8]
 8015c80:	2200      	movs	r2, #0
 8015c82:	701a      	strb	r2, [r3, #0]
 8015c84:	e7d9      	b.n	8015c3a <sniprintf+0x16>
 8015c86:	bf00      	nop
 8015c88:	20000160 	.word	0x20000160

08015c8c <strncmp>:
 8015c8c:	b510      	push	{r4, lr}
 8015c8e:	b16a      	cbz	r2, 8015cac <strncmp+0x20>
 8015c90:	3901      	subs	r1, #1
 8015c92:	1884      	adds	r4, r0, r2
 8015c94:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015c98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015c9c:	4293      	cmp	r3, r2
 8015c9e:	d103      	bne.n	8015ca8 <strncmp+0x1c>
 8015ca0:	42a0      	cmp	r0, r4
 8015ca2:	d001      	beq.n	8015ca8 <strncmp+0x1c>
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d1f5      	bne.n	8015c94 <strncmp+0x8>
 8015ca8:	1a98      	subs	r0, r3, r2
 8015caa:	bd10      	pop	{r4, pc}
 8015cac:	4610      	mov	r0, r2
 8015cae:	e7fc      	b.n	8015caa <strncmp+0x1e>

08015cb0 <__malloc_lock>:
 8015cb0:	4801      	ldr	r0, [pc, #4]	; (8015cb8 <__malloc_lock+0x8>)
 8015cb2:	f000 bb1f 	b.w	80162f4 <__retarget_lock_acquire_recursive>
 8015cb6:	bf00      	nop
 8015cb8:	20005d90 	.word	0x20005d90

08015cbc <__malloc_unlock>:
 8015cbc:	4801      	ldr	r0, [pc, #4]	; (8015cc4 <__malloc_unlock+0x8>)
 8015cbe:	f000 bb1a 	b.w	80162f6 <__retarget_lock_release_recursive>
 8015cc2:	bf00      	nop
 8015cc4:	20005d90 	.word	0x20005d90

08015cc8 <_realloc_r>:
 8015cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cca:	4607      	mov	r7, r0
 8015ccc:	4614      	mov	r4, r2
 8015cce:	460e      	mov	r6, r1
 8015cd0:	b921      	cbnz	r1, 8015cdc <_realloc_r+0x14>
 8015cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015cd6:	4611      	mov	r1, r2
 8015cd8:	f7ff bef6 	b.w	8015ac8 <_malloc_r>
 8015cdc:	b922      	cbnz	r2, 8015ce8 <_realloc_r+0x20>
 8015cde:	f7ff fea3 	bl	8015a28 <_free_r>
 8015ce2:	4625      	mov	r5, r4
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ce8:	f000 fb06 	bl	80162f8 <_malloc_usable_size_r>
 8015cec:	42a0      	cmp	r0, r4
 8015cee:	d20f      	bcs.n	8015d10 <_realloc_r+0x48>
 8015cf0:	4621      	mov	r1, r4
 8015cf2:	4638      	mov	r0, r7
 8015cf4:	f7ff fee8 	bl	8015ac8 <_malloc_r>
 8015cf8:	4605      	mov	r5, r0
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	d0f2      	beq.n	8015ce4 <_realloc_r+0x1c>
 8015cfe:	4631      	mov	r1, r6
 8015d00:	4622      	mov	r2, r4
 8015d02:	f7ff fe61 	bl	80159c8 <memcpy>
 8015d06:	4631      	mov	r1, r6
 8015d08:	4638      	mov	r0, r7
 8015d0a:	f7ff fe8d 	bl	8015a28 <_free_r>
 8015d0e:	e7e9      	b.n	8015ce4 <_realloc_r+0x1c>
 8015d10:	4635      	mov	r5, r6
 8015d12:	e7e7      	b.n	8015ce4 <_realloc_r+0x1c>

08015d14 <__ssputs_r>:
 8015d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d18:	688e      	ldr	r6, [r1, #8]
 8015d1a:	429e      	cmp	r6, r3
 8015d1c:	4682      	mov	sl, r0
 8015d1e:	460c      	mov	r4, r1
 8015d20:	4690      	mov	r8, r2
 8015d22:	461f      	mov	r7, r3
 8015d24:	d838      	bhi.n	8015d98 <__ssputs_r+0x84>
 8015d26:	898a      	ldrh	r2, [r1, #12]
 8015d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015d2c:	d032      	beq.n	8015d94 <__ssputs_r+0x80>
 8015d2e:	6825      	ldr	r5, [r4, #0]
 8015d30:	6909      	ldr	r1, [r1, #16]
 8015d32:	eba5 0901 	sub.w	r9, r5, r1
 8015d36:	6965      	ldr	r5, [r4, #20]
 8015d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d40:	3301      	adds	r3, #1
 8015d42:	444b      	add	r3, r9
 8015d44:	106d      	asrs	r5, r5, #1
 8015d46:	429d      	cmp	r5, r3
 8015d48:	bf38      	it	cc
 8015d4a:	461d      	movcc	r5, r3
 8015d4c:	0553      	lsls	r3, r2, #21
 8015d4e:	d531      	bpl.n	8015db4 <__ssputs_r+0xa0>
 8015d50:	4629      	mov	r1, r5
 8015d52:	f7ff feb9 	bl	8015ac8 <_malloc_r>
 8015d56:	4606      	mov	r6, r0
 8015d58:	b950      	cbnz	r0, 8015d70 <__ssputs_r+0x5c>
 8015d5a:	230c      	movs	r3, #12
 8015d5c:	f8ca 3000 	str.w	r3, [sl]
 8015d60:	89a3      	ldrh	r3, [r4, #12]
 8015d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d66:	81a3      	strh	r3, [r4, #12]
 8015d68:	f04f 30ff 	mov.w	r0, #4294967295
 8015d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d70:	6921      	ldr	r1, [r4, #16]
 8015d72:	464a      	mov	r2, r9
 8015d74:	f7ff fe28 	bl	80159c8 <memcpy>
 8015d78:	89a3      	ldrh	r3, [r4, #12]
 8015d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d82:	81a3      	strh	r3, [r4, #12]
 8015d84:	6126      	str	r6, [r4, #16]
 8015d86:	6165      	str	r5, [r4, #20]
 8015d88:	444e      	add	r6, r9
 8015d8a:	eba5 0509 	sub.w	r5, r5, r9
 8015d8e:	6026      	str	r6, [r4, #0]
 8015d90:	60a5      	str	r5, [r4, #8]
 8015d92:	463e      	mov	r6, r7
 8015d94:	42be      	cmp	r6, r7
 8015d96:	d900      	bls.n	8015d9a <__ssputs_r+0x86>
 8015d98:	463e      	mov	r6, r7
 8015d9a:	4632      	mov	r2, r6
 8015d9c:	6820      	ldr	r0, [r4, #0]
 8015d9e:	4641      	mov	r1, r8
 8015da0:	f7ff fe20 	bl	80159e4 <memmove>
 8015da4:	68a3      	ldr	r3, [r4, #8]
 8015da6:	6822      	ldr	r2, [r4, #0]
 8015da8:	1b9b      	subs	r3, r3, r6
 8015daa:	4432      	add	r2, r6
 8015dac:	60a3      	str	r3, [r4, #8]
 8015dae:	6022      	str	r2, [r4, #0]
 8015db0:	2000      	movs	r0, #0
 8015db2:	e7db      	b.n	8015d6c <__ssputs_r+0x58>
 8015db4:	462a      	mov	r2, r5
 8015db6:	f7ff ff87 	bl	8015cc8 <_realloc_r>
 8015dba:	4606      	mov	r6, r0
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d1e1      	bne.n	8015d84 <__ssputs_r+0x70>
 8015dc0:	6921      	ldr	r1, [r4, #16]
 8015dc2:	4650      	mov	r0, sl
 8015dc4:	f7ff fe30 	bl	8015a28 <_free_r>
 8015dc8:	e7c7      	b.n	8015d5a <__ssputs_r+0x46>
	...

08015dcc <_svfiprintf_r>:
 8015dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dd0:	4698      	mov	r8, r3
 8015dd2:	898b      	ldrh	r3, [r1, #12]
 8015dd4:	061b      	lsls	r3, r3, #24
 8015dd6:	b09d      	sub	sp, #116	; 0x74
 8015dd8:	4607      	mov	r7, r0
 8015dda:	460d      	mov	r5, r1
 8015ddc:	4614      	mov	r4, r2
 8015dde:	d50e      	bpl.n	8015dfe <_svfiprintf_r+0x32>
 8015de0:	690b      	ldr	r3, [r1, #16]
 8015de2:	b963      	cbnz	r3, 8015dfe <_svfiprintf_r+0x32>
 8015de4:	2140      	movs	r1, #64	; 0x40
 8015de6:	f7ff fe6f 	bl	8015ac8 <_malloc_r>
 8015dea:	6028      	str	r0, [r5, #0]
 8015dec:	6128      	str	r0, [r5, #16]
 8015dee:	b920      	cbnz	r0, 8015dfa <_svfiprintf_r+0x2e>
 8015df0:	230c      	movs	r3, #12
 8015df2:	603b      	str	r3, [r7, #0]
 8015df4:	f04f 30ff 	mov.w	r0, #4294967295
 8015df8:	e0d1      	b.n	8015f9e <_svfiprintf_r+0x1d2>
 8015dfa:	2340      	movs	r3, #64	; 0x40
 8015dfc:	616b      	str	r3, [r5, #20]
 8015dfe:	2300      	movs	r3, #0
 8015e00:	9309      	str	r3, [sp, #36]	; 0x24
 8015e02:	2320      	movs	r3, #32
 8015e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e0c:	2330      	movs	r3, #48	; 0x30
 8015e0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015fb8 <_svfiprintf_r+0x1ec>
 8015e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e16:	f04f 0901 	mov.w	r9, #1
 8015e1a:	4623      	mov	r3, r4
 8015e1c:	469a      	mov	sl, r3
 8015e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e22:	b10a      	cbz	r2, 8015e28 <_svfiprintf_r+0x5c>
 8015e24:	2a25      	cmp	r2, #37	; 0x25
 8015e26:	d1f9      	bne.n	8015e1c <_svfiprintf_r+0x50>
 8015e28:	ebba 0b04 	subs.w	fp, sl, r4
 8015e2c:	d00b      	beq.n	8015e46 <_svfiprintf_r+0x7a>
 8015e2e:	465b      	mov	r3, fp
 8015e30:	4622      	mov	r2, r4
 8015e32:	4629      	mov	r1, r5
 8015e34:	4638      	mov	r0, r7
 8015e36:	f7ff ff6d 	bl	8015d14 <__ssputs_r>
 8015e3a:	3001      	adds	r0, #1
 8015e3c:	f000 80aa 	beq.w	8015f94 <_svfiprintf_r+0x1c8>
 8015e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e42:	445a      	add	r2, fp
 8015e44:	9209      	str	r2, [sp, #36]	; 0x24
 8015e46:	f89a 3000 	ldrb.w	r3, [sl]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f000 80a2 	beq.w	8015f94 <_svfiprintf_r+0x1c8>
 8015e50:	2300      	movs	r3, #0
 8015e52:	f04f 32ff 	mov.w	r2, #4294967295
 8015e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e5a:	f10a 0a01 	add.w	sl, sl, #1
 8015e5e:	9304      	str	r3, [sp, #16]
 8015e60:	9307      	str	r3, [sp, #28]
 8015e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e66:	931a      	str	r3, [sp, #104]	; 0x68
 8015e68:	4654      	mov	r4, sl
 8015e6a:	2205      	movs	r2, #5
 8015e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e70:	4851      	ldr	r0, [pc, #324]	; (8015fb8 <_svfiprintf_r+0x1ec>)
 8015e72:	f7ea f9d5 	bl	8000220 <memchr>
 8015e76:	9a04      	ldr	r2, [sp, #16]
 8015e78:	b9d8      	cbnz	r0, 8015eb2 <_svfiprintf_r+0xe6>
 8015e7a:	06d0      	lsls	r0, r2, #27
 8015e7c:	bf44      	itt	mi
 8015e7e:	2320      	movmi	r3, #32
 8015e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e84:	0711      	lsls	r1, r2, #28
 8015e86:	bf44      	itt	mi
 8015e88:	232b      	movmi	r3, #43	; 0x2b
 8015e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8015e92:	2b2a      	cmp	r3, #42	; 0x2a
 8015e94:	d015      	beq.n	8015ec2 <_svfiprintf_r+0xf6>
 8015e96:	9a07      	ldr	r2, [sp, #28]
 8015e98:	4654      	mov	r4, sl
 8015e9a:	2000      	movs	r0, #0
 8015e9c:	f04f 0c0a 	mov.w	ip, #10
 8015ea0:	4621      	mov	r1, r4
 8015ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ea6:	3b30      	subs	r3, #48	; 0x30
 8015ea8:	2b09      	cmp	r3, #9
 8015eaa:	d94e      	bls.n	8015f4a <_svfiprintf_r+0x17e>
 8015eac:	b1b0      	cbz	r0, 8015edc <_svfiprintf_r+0x110>
 8015eae:	9207      	str	r2, [sp, #28]
 8015eb0:	e014      	b.n	8015edc <_svfiprintf_r+0x110>
 8015eb2:	eba0 0308 	sub.w	r3, r0, r8
 8015eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8015eba:	4313      	orrs	r3, r2
 8015ebc:	9304      	str	r3, [sp, #16]
 8015ebe:	46a2      	mov	sl, r4
 8015ec0:	e7d2      	b.n	8015e68 <_svfiprintf_r+0x9c>
 8015ec2:	9b03      	ldr	r3, [sp, #12]
 8015ec4:	1d19      	adds	r1, r3, #4
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	9103      	str	r1, [sp, #12]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	bfbb      	ittet	lt
 8015ece:	425b      	neglt	r3, r3
 8015ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8015ed4:	9307      	strge	r3, [sp, #28]
 8015ed6:	9307      	strlt	r3, [sp, #28]
 8015ed8:	bfb8      	it	lt
 8015eda:	9204      	strlt	r2, [sp, #16]
 8015edc:	7823      	ldrb	r3, [r4, #0]
 8015ede:	2b2e      	cmp	r3, #46	; 0x2e
 8015ee0:	d10c      	bne.n	8015efc <_svfiprintf_r+0x130>
 8015ee2:	7863      	ldrb	r3, [r4, #1]
 8015ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8015ee6:	d135      	bne.n	8015f54 <_svfiprintf_r+0x188>
 8015ee8:	9b03      	ldr	r3, [sp, #12]
 8015eea:	1d1a      	adds	r2, r3, #4
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	9203      	str	r2, [sp, #12]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	bfb8      	it	lt
 8015ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ef8:	3402      	adds	r4, #2
 8015efa:	9305      	str	r3, [sp, #20]
 8015efc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015fc8 <_svfiprintf_r+0x1fc>
 8015f00:	7821      	ldrb	r1, [r4, #0]
 8015f02:	2203      	movs	r2, #3
 8015f04:	4650      	mov	r0, sl
 8015f06:	f7ea f98b 	bl	8000220 <memchr>
 8015f0a:	b140      	cbz	r0, 8015f1e <_svfiprintf_r+0x152>
 8015f0c:	2340      	movs	r3, #64	; 0x40
 8015f0e:	eba0 000a 	sub.w	r0, r0, sl
 8015f12:	fa03 f000 	lsl.w	r0, r3, r0
 8015f16:	9b04      	ldr	r3, [sp, #16]
 8015f18:	4303      	orrs	r3, r0
 8015f1a:	3401      	adds	r4, #1
 8015f1c:	9304      	str	r3, [sp, #16]
 8015f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f22:	4826      	ldr	r0, [pc, #152]	; (8015fbc <_svfiprintf_r+0x1f0>)
 8015f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015f28:	2206      	movs	r2, #6
 8015f2a:	f7ea f979 	bl	8000220 <memchr>
 8015f2e:	2800      	cmp	r0, #0
 8015f30:	d038      	beq.n	8015fa4 <_svfiprintf_r+0x1d8>
 8015f32:	4b23      	ldr	r3, [pc, #140]	; (8015fc0 <_svfiprintf_r+0x1f4>)
 8015f34:	bb1b      	cbnz	r3, 8015f7e <_svfiprintf_r+0x1b2>
 8015f36:	9b03      	ldr	r3, [sp, #12]
 8015f38:	3307      	adds	r3, #7
 8015f3a:	f023 0307 	bic.w	r3, r3, #7
 8015f3e:	3308      	adds	r3, #8
 8015f40:	9303      	str	r3, [sp, #12]
 8015f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f44:	4433      	add	r3, r6
 8015f46:	9309      	str	r3, [sp, #36]	; 0x24
 8015f48:	e767      	b.n	8015e1a <_svfiprintf_r+0x4e>
 8015f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f4e:	460c      	mov	r4, r1
 8015f50:	2001      	movs	r0, #1
 8015f52:	e7a5      	b.n	8015ea0 <_svfiprintf_r+0xd4>
 8015f54:	2300      	movs	r3, #0
 8015f56:	3401      	adds	r4, #1
 8015f58:	9305      	str	r3, [sp, #20]
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	f04f 0c0a 	mov.w	ip, #10
 8015f60:	4620      	mov	r0, r4
 8015f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f66:	3a30      	subs	r2, #48	; 0x30
 8015f68:	2a09      	cmp	r2, #9
 8015f6a:	d903      	bls.n	8015f74 <_svfiprintf_r+0x1a8>
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d0c5      	beq.n	8015efc <_svfiprintf_r+0x130>
 8015f70:	9105      	str	r1, [sp, #20]
 8015f72:	e7c3      	b.n	8015efc <_svfiprintf_r+0x130>
 8015f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f78:	4604      	mov	r4, r0
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	e7f0      	b.n	8015f60 <_svfiprintf_r+0x194>
 8015f7e:	ab03      	add	r3, sp, #12
 8015f80:	9300      	str	r3, [sp, #0]
 8015f82:	462a      	mov	r2, r5
 8015f84:	4b0f      	ldr	r3, [pc, #60]	; (8015fc4 <_svfiprintf_r+0x1f8>)
 8015f86:	a904      	add	r1, sp, #16
 8015f88:	4638      	mov	r0, r7
 8015f8a:	f3af 8000 	nop.w
 8015f8e:	1c42      	adds	r2, r0, #1
 8015f90:	4606      	mov	r6, r0
 8015f92:	d1d6      	bne.n	8015f42 <_svfiprintf_r+0x176>
 8015f94:	89ab      	ldrh	r3, [r5, #12]
 8015f96:	065b      	lsls	r3, r3, #25
 8015f98:	f53f af2c 	bmi.w	8015df4 <_svfiprintf_r+0x28>
 8015f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f9e:	b01d      	add	sp, #116	; 0x74
 8015fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fa4:	ab03      	add	r3, sp, #12
 8015fa6:	9300      	str	r3, [sp, #0]
 8015fa8:	462a      	mov	r2, r5
 8015faa:	4b06      	ldr	r3, [pc, #24]	; (8015fc4 <_svfiprintf_r+0x1f8>)
 8015fac:	a904      	add	r1, sp, #16
 8015fae:	4638      	mov	r0, r7
 8015fb0:	f000 f87a 	bl	80160a8 <_printf_i>
 8015fb4:	e7eb      	b.n	8015f8e <_svfiprintf_r+0x1c2>
 8015fb6:	bf00      	nop
 8015fb8:	08019780 	.word	0x08019780
 8015fbc:	0801978a 	.word	0x0801978a
 8015fc0:	00000000 	.word	0x00000000
 8015fc4:	08015d15 	.word	0x08015d15
 8015fc8:	08019786 	.word	0x08019786

08015fcc <_printf_common>:
 8015fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fd0:	4616      	mov	r6, r2
 8015fd2:	4699      	mov	r9, r3
 8015fd4:	688a      	ldr	r2, [r1, #8]
 8015fd6:	690b      	ldr	r3, [r1, #16]
 8015fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015fdc:	4293      	cmp	r3, r2
 8015fde:	bfb8      	it	lt
 8015fe0:	4613      	movlt	r3, r2
 8015fe2:	6033      	str	r3, [r6, #0]
 8015fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015fe8:	4607      	mov	r7, r0
 8015fea:	460c      	mov	r4, r1
 8015fec:	b10a      	cbz	r2, 8015ff2 <_printf_common+0x26>
 8015fee:	3301      	adds	r3, #1
 8015ff0:	6033      	str	r3, [r6, #0]
 8015ff2:	6823      	ldr	r3, [r4, #0]
 8015ff4:	0699      	lsls	r1, r3, #26
 8015ff6:	bf42      	ittt	mi
 8015ff8:	6833      	ldrmi	r3, [r6, #0]
 8015ffa:	3302      	addmi	r3, #2
 8015ffc:	6033      	strmi	r3, [r6, #0]
 8015ffe:	6825      	ldr	r5, [r4, #0]
 8016000:	f015 0506 	ands.w	r5, r5, #6
 8016004:	d106      	bne.n	8016014 <_printf_common+0x48>
 8016006:	f104 0a19 	add.w	sl, r4, #25
 801600a:	68e3      	ldr	r3, [r4, #12]
 801600c:	6832      	ldr	r2, [r6, #0]
 801600e:	1a9b      	subs	r3, r3, r2
 8016010:	42ab      	cmp	r3, r5
 8016012:	dc26      	bgt.n	8016062 <_printf_common+0x96>
 8016014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016018:	1e13      	subs	r3, r2, #0
 801601a:	6822      	ldr	r2, [r4, #0]
 801601c:	bf18      	it	ne
 801601e:	2301      	movne	r3, #1
 8016020:	0692      	lsls	r2, r2, #26
 8016022:	d42b      	bmi.n	801607c <_printf_common+0xb0>
 8016024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016028:	4649      	mov	r1, r9
 801602a:	4638      	mov	r0, r7
 801602c:	47c0      	blx	r8
 801602e:	3001      	adds	r0, #1
 8016030:	d01e      	beq.n	8016070 <_printf_common+0xa4>
 8016032:	6823      	ldr	r3, [r4, #0]
 8016034:	68e5      	ldr	r5, [r4, #12]
 8016036:	6832      	ldr	r2, [r6, #0]
 8016038:	f003 0306 	and.w	r3, r3, #6
 801603c:	2b04      	cmp	r3, #4
 801603e:	bf08      	it	eq
 8016040:	1aad      	subeq	r5, r5, r2
 8016042:	68a3      	ldr	r3, [r4, #8]
 8016044:	6922      	ldr	r2, [r4, #16]
 8016046:	bf0c      	ite	eq
 8016048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801604c:	2500      	movne	r5, #0
 801604e:	4293      	cmp	r3, r2
 8016050:	bfc4      	itt	gt
 8016052:	1a9b      	subgt	r3, r3, r2
 8016054:	18ed      	addgt	r5, r5, r3
 8016056:	2600      	movs	r6, #0
 8016058:	341a      	adds	r4, #26
 801605a:	42b5      	cmp	r5, r6
 801605c:	d11a      	bne.n	8016094 <_printf_common+0xc8>
 801605e:	2000      	movs	r0, #0
 8016060:	e008      	b.n	8016074 <_printf_common+0xa8>
 8016062:	2301      	movs	r3, #1
 8016064:	4652      	mov	r2, sl
 8016066:	4649      	mov	r1, r9
 8016068:	4638      	mov	r0, r7
 801606a:	47c0      	blx	r8
 801606c:	3001      	adds	r0, #1
 801606e:	d103      	bne.n	8016078 <_printf_common+0xac>
 8016070:	f04f 30ff 	mov.w	r0, #4294967295
 8016074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016078:	3501      	adds	r5, #1
 801607a:	e7c6      	b.n	801600a <_printf_common+0x3e>
 801607c:	18e1      	adds	r1, r4, r3
 801607e:	1c5a      	adds	r2, r3, #1
 8016080:	2030      	movs	r0, #48	; 0x30
 8016082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016086:	4422      	add	r2, r4
 8016088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801608c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016090:	3302      	adds	r3, #2
 8016092:	e7c7      	b.n	8016024 <_printf_common+0x58>
 8016094:	2301      	movs	r3, #1
 8016096:	4622      	mov	r2, r4
 8016098:	4649      	mov	r1, r9
 801609a:	4638      	mov	r0, r7
 801609c:	47c0      	blx	r8
 801609e:	3001      	adds	r0, #1
 80160a0:	d0e6      	beq.n	8016070 <_printf_common+0xa4>
 80160a2:	3601      	adds	r6, #1
 80160a4:	e7d9      	b.n	801605a <_printf_common+0x8e>
	...

080160a8 <_printf_i>:
 80160a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160ac:	460c      	mov	r4, r1
 80160ae:	4691      	mov	r9, r2
 80160b0:	7e27      	ldrb	r7, [r4, #24]
 80160b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80160b4:	2f78      	cmp	r7, #120	; 0x78
 80160b6:	4680      	mov	r8, r0
 80160b8:	469a      	mov	sl, r3
 80160ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160be:	d807      	bhi.n	80160d0 <_printf_i+0x28>
 80160c0:	2f62      	cmp	r7, #98	; 0x62
 80160c2:	d80a      	bhi.n	80160da <_printf_i+0x32>
 80160c4:	2f00      	cmp	r7, #0
 80160c6:	f000 80d8 	beq.w	801627a <_printf_i+0x1d2>
 80160ca:	2f58      	cmp	r7, #88	; 0x58
 80160cc:	f000 80a3 	beq.w	8016216 <_printf_i+0x16e>
 80160d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80160d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80160d8:	e03a      	b.n	8016150 <_printf_i+0xa8>
 80160da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80160de:	2b15      	cmp	r3, #21
 80160e0:	d8f6      	bhi.n	80160d0 <_printf_i+0x28>
 80160e2:	a001      	add	r0, pc, #4	; (adr r0, 80160e8 <_printf_i+0x40>)
 80160e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80160e8:	08016141 	.word	0x08016141
 80160ec:	08016155 	.word	0x08016155
 80160f0:	080160d1 	.word	0x080160d1
 80160f4:	080160d1 	.word	0x080160d1
 80160f8:	080160d1 	.word	0x080160d1
 80160fc:	080160d1 	.word	0x080160d1
 8016100:	08016155 	.word	0x08016155
 8016104:	080160d1 	.word	0x080160d1
 8016108:	080160d1 	.word	0x080160d1
 801610c:	080160d1 	.word	0x080160d1
 8016110:	080160d1 	.word	0x080160d1
 8016114:	08016261 	.word	0x08016261
 8016118:	08016185 	.word	0x08016185
 801611c:	08016243 	.word	0x08016243
 8016120:	080160d1 	.word	0x080160d1
 8016124:	080160d1 	.word	0x080160d1
 8016128:	08016283 	.word	0x08016283
 801612c:	080160d1 	.word	0x080160d1
 8016130:	08016185 	.word	0x08016185
 8016134:	080160d1 	.word	0x080160d1
 8016138:	080160d1 	.word	0x080160d1
 801613c:	0801624b 	.word	0x0801624b
 8016140:	680b      	ldr	r3, [r1, #0]
 8016142:	1d1a      	adds	r2, r3, #4
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	600a      	str	r2, [r1, #0]
 8016148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801614c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016150:	2301      	movs	r3, #1
 8016152:	e0a3      	b.n	801629c <_printf_i+0x1f4>
 8016154:	6825      	ldr	r5, [r4, #0]
 8016156:	6808      	ldr	r0, [r1, #0]
 8016158:	062e      	lsls	r6, r5, #24
 801615a:	f100 0304 	add.w	r3, r0, #4
 801615e:	d50a      	bpl.n	8016176 <_printf_i+0xce>
 8016160:	6805      	ldr	r5, [r0, #0]
 8016162:	600b      	str	r3, [r1, #0]
 8016164:	2d00      	cmp	r5, #0
 8016166:	da03      	bge.n	8016170 <_printf_i+0xc8>
 8016168:	232d      	movs	r3, #45	; 0x2d
 801616a:	426d      	negs	r5, r5
 801616c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016170:	485e      	ldr	r0, [pc, #376]	; (80162ec <_printf_i+0x244>)
 8016172:	230a      	movs	r3, #10
 8016174:	e019      	b.n	80161aa <_printf_i+0x102>
 8016176:	f015 0f40 	tst.w	r5, #64	; 0x40
 801617a:	6805      	ldr	r5, [r0, #0]
 801617c:	600b      	str	r3, [r1, #0]
 801617e:	bf18      	it	ne
 8016180:	b22d      	sxthne	r5, r5
 8016182:	e7ef      	b.n	8016164 <_printf_i+0xbc>
 8016184:	680b      	ldr	r3, [r1, #0]
 8016186:	6825      	ldr	r5, [r4, #0]
 8016188:	1d18      	adds	r0, r3, #4
 801618a:	6008      	str	r0, [r1, #0]
 801618c:	0628      	lsls	r0, r5, #24
 801618e:	d501      	bpl.n	8016194 <_printf_i+0xec>
 8016190:	681d      	ldr	r5, [r3, #0]
 8016192:	e002      	b.n	801619a <_printf_i+0xf2>
 8016194:	0669      	lsls	r1, r5, #25
 8016196:	d5fb      	bpl.n	8016190 <_printf_i+0xe8>
 8016198:	881d      	ldrh	r5, [r3, #0]
 801619a:	4854      	ldr	r0, [pc, #336]	; (80162ec <_printf_i+0x244>)
 801619c:	2f6f      	cmp	r7, #111	; 0x6f
 801619e:	bf0c      	ite	eq
 80161a0:	2308      	moveq	r3, #8
 80161a2:	230a      	movne	r3, #10
 80161a4:	2100      	movs	r1, #0
 80161a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80161aa:	6866      	ldr	r6, [r4, #4]
 80161ac:	60a6      	str	r6, [r4, #8]
 80161ae:	2e00      	cmp	r6, #0
 80161b0:	bfa2      	ittt	ge
 80161b2:	6821      	ldrge	r1, [r4, #0]
 80161b4:	f021 0104 	bicge.w	r1, r1, #4
 80161b8:	6021      	strge	r1, [r4, #0]
 80161ba:	b90d      	cbnz	r5, 80161c0 <_printf_i+0x118>
 80161bc:	2e00      	cmp	r6, #0
 80161be:	d04d      	beq.n	801625c <_printf_i+0x1b4>
 80161c0:	4616      	mov	r6, r2
 80161c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80161c6:	fb03 5711 	mls	r7, r3, r1, r5
 80161ca:	5dc7      	ldrb	r7, [r0, r7]
 80161cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80161d0:	462f      	mov	r7, r5
 80161d2:	42bb      	cmp	r3, r7
 80161d4:	460d      	mov	r5, r1
 80161d6:	d9f4      	bls.n	80161c2 <_printf_i+0x11a>
 80161d8:	2b08      	cmp	r3, #8
 80161da:	d10b      	bne.n	80161f4 <_printf_i+0x14c>
 80161dc:	6823      	ldr	r3, [r4, #0]
 80161de:	07df      	lsls	r7, r3, #31
 80161e0:	d508      	bpl.n	80161f4 <_printf_i+0x14c>
 80161e2:	6923      	ldr	r3, [r4, #16]
 80161e4:	6861      	ldr	r1, [r4, #4]
 80161e6:	4299      	cmp	r1, r3
 80161e8:	bfde      	ittt	le
 80161ea:	2330      	movle	r3, #48	; 0x30
 80161ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80161f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80161f4:	1b92      	subs	r2, r2, r6
 80161f6:	6122      	str	r2, [r4, #16]
 80161f8:	f8cd a000 	str.w	sl, [sp]
 80161fc:	464b      	mov	r3, r9
 80161fe:	aa03      	add	r2, sp, #12
 8016200:	4621      	mov	r1, r4
 8016202:	4640      	mov	r0, r8
 8016204:	f7ff fee2 	bl	8015fcc <_printf_common>
 8016208:	3001      	adds	r0, #1
 801620a:	d14c      	bne.n	80162a6 <_printf_i+0x1fe>
 801620c:	f04f 30ff 	mov.w	r0, #4294967295
 8016210:	b004      	add	sp, #16
 8016212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016216:	4835      	ldr	r0, [pc, #212]	; (80162ec <_printf_i+0x244>)
 8016218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801621c:	6823      	ldr	r3, [r4, #0]
 801621e:	680e      	ldr	r6, [r1, #0]
 8016220:	061f      	lsls	r7, r3, #24
 8016222:	f856 5b04 	ldr.w	r5, [r6], #4
 8016226:	600e      	str	r6, [r1, #0]
 8016228:	d514      	bpl.n	8016254 <_printf_i+0x1ac>
 801622a:	07d9      	lsls	r1, r3, #31
 801622c:	bf44      	itt	mi
 801622e:	f043 0320 	orrmi.w	r3, r3, #32
 8016232:	6023      	strmi	r3, [r4, #0]
 8016234:	b91d      	cbnz	r5, 801623e <_printf_i+0x196>
 8016236:	6823      	ldr	r3, [r4, #0]
 8016238:	f023 0320 	bic.w	r3, r3, #32
 801623c:	6023      	str	r3, [r4, #0]
 801623e:	2310      	movs	r3, #16
 8016240:	e7b0      	b.n	80161a4 <_printf_i+0xfc>
 8016242:	6823      	ldr	r3, [r4, #0]
 8016244:	f043 0320 	orr.w	r3, r3, #32
 8016248:	6023      	str	r3, [r4, #0]
 801624a:	2378      	movs	r3, #120	; 0x78
 801624c:	4828      	ldr	r0, [pc, #160]	; (80162f0 <_printf_i+0x248>)
 801624e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016252:	e7e3      	b.n	801621c <_printf_i+0x174>
 8016254:	065e      	lsls	r6, r3, #25
 8016256:	bf48      	it	mi
 8016258:	b2ad      	uxthmi	r5, r5
 801625a:	e7e6      	b.n	801622a <_printf_i+0x182>
 801625c:	4616      	mov	r6, r2
 801625e:	e7bb      	b.n	80161d8 <_printf_i+0x130>
 8016260:	680b      	ldr	r3, [r1, #0]
 8016262:	6826      	ldr	r6, [r4, #0]
 8016264:	6960      	ldr	r0, [r4, #20]
 8016266:	1d1d      	adds	r5, r3, #4
 8016268:	600d      	str	r5, [r1, #0]
 801626a:	0635      	lsls	r5, r6, #24
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	d501      	bpl.n	8016274 <_printf_i+0x1cc>
 8016270:	6018      	str	r0, [r3, #0]
 8016272:	e002      	b.n	801627a <_printf_i+0x1d2>
 8016274:	0671      	lsls	r1, r6, #25
 8016276:	d5fb      	bpl.n	8016270 <_printf_i+0x1c8>
 8016278:	8018      	strh	r0, [r3, #0]
 801627a:	2300      	movs	r3, #0
 801627c:	6123      	str	r3, [r4, #16]
 801627e:	4616      	mov	r6, r2
 8016280:	e7ba      	b.n	80161f8 <_printf_i+0x150>
 8016282:	680b      	ldr	r3, [r1, #0]
 8016284:	1d1a      	adds	r2, r3, #4
 8016286:	600a      	str	r2, [r1, #0]
 8016288:	681e      	ldr	r6, [r3, #0]
 801628a:	6862      	ldr	r2, [r4, #4]
 801628c:	2100      	movs	r1, #0
 801628e:	4630      	mov	r0, r6
 8016290:	f7e9 ffc6 	bl	8000220 <memchr>
 8016294:	b108      	cbz	r0, 801629a <_printf_i+0x1f2>
 8016296:	1b80      	subs	r0, r0, r6
 8016298:	6060      	str	r0, [r4, #4]
 801629a:	6863      	ldr	r3, [r4, #4]
 801629c:	6123      	str	r3, [r4, #16]
 801629e:	2300      	movs	r3, #0
 80162a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162a4:	e7a8      	b.n	80161f8 <_printf_i+0x150>
 80162a6:	6923      	ldr	r3, [r4, #16]
 80162a8:	4632      	mov	r2, r6
 80162aa:	4649      	mov	r1, r9
 80162ac:	4640      	mov	r0, r8
 80162ae:	47d0      	blx	sl
 80162b0:	3001      	adds	r0, #1
 80162b2:	d0ab      	beq.n	801620c <_printf_i+0x164>
 80162b4:	6823      	ldr	r3, [r4, #0]
 80162b6:	079b      	lsls	r3, r3, #30
 80162b8:	d413      	bmi.n	80162e2 <_printf_i+0x23a>
 80162ba:	68e0      	ldr	r0, [r4, #12]
 80162bc:	9b03      	ldr	r3, [sp, #12]
 80162be:	4298      	cmp	r0, r3
 80162c0:	bfb8      	it	lt
 80162c2:	4618      	movlt	r0, r3
 80162c4:	e7a4      	b.n	8016210 <_printf_i+0x168>
 80162c6:	2301      	movs	r3, #1
 80162c8:	4632      	mov	r2, r6
 80162ca:	4649      	mov	r1, r9
 80162cc:	4640      	mov	r0, r8
 80162ce:	47d0      	blx	sl
 80162d0:	3001      	adds	r0, #1
 80162d2:	d09b      	beq.n	801620c <_printf_i+0x164>
 80162d4:	3501      	adds	r5, #1
 80162d6:	68e3      	ldr	r3, [r4, #12]
 80162d8:	9903      	ldr	r1, [sp, #12]
 80162da:	1a5b      	subs	r3, r3, r1
 80162dc:	42ab      	cmp	r3, r5
 80162de:	dcf2      	bgt.n	80162c6 <_printf_i+0x21e>
 80162e0:	e7eb      	b.n	80162ba <_printf_i+0x212>
 80162e2:	2500      	movs	r5, #0
 80162e4:	f104 0619 	add.w	r6, r4, #25
 80162e8:	e7f5      	b.n	80162d6 <_printf_i+0x22e>
 80162ea:	bf00      	nop
 80162ec:	08019791 	.word	0x08019791
 80162f0:	080197a2 	.word	0x080197a2

080162f4 <__retarget_lock_acquire_recursive>:
 80162f4:	4770      	bx	lr

080162f6 <__retarget_lock_release_recursive>:
 80162f6:	4770      	bx	lr

080162f8 <_malloc_usable_size_r>:
 80162f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162fc:	1f18      	subs	r0, r3, #4
 80162fe:	2b00      	cmp	r3, #0
 8016300:	bfbc      	itt	lt
 8016302:	580b      	ldrlt	r3, [r1, r0]
 8016304:	18c0      	addlt	r0, r0, r3
 8016306:	4770      	bx	lr

08016308 <_init>:
 8016308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630a:	bf00      	nop
 801630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801630e:	bc08      	pop	{r3}
 8016310:	469e      	mov	lr, r3
 8016312:	4770      	bx	lr

08016314 <_fini>:
 8016314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016316:	bf00      	nop
 8016318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801631a:	bc08      	pop	{r3}
 801631c:	469e      	mov	lr, r3
 801631e:	4770      	bx	lr
