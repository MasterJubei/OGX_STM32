
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013878  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012e0  08013a48  08013a48  00023a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d28  08014d28  00030184  2**0
                  CONTENTS
  4 .ARM          00000008  08014d28  08014d28  00024d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d30  08014d30  00030184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014d30  08014d30  00024d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d38  08014d38  00024d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08014d3c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005be4  20000184  08014ec0  00030184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d68  08014ec0  00035d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00061f4d  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008dc9  00000000  00000000  00092101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002900  00000000  00000000  0009aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002738  00000000  00000000  0009d7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1a0  00000000  00000000  0009ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000317be  00000000  00000000  000cd0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8851  00000000  00000000  000fe866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f70b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b31c  00000000  00000000  001f710c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000184 	.word	0x20000184
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013a30 	.word	0x08013a30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000188 	.word	0x20000188
 800020c:	08013a30 	.word	0x08013a30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96e 	b.w	8000514 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468c      	mov	ip, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	f040 8083 	bne.w	8000366 <__udivmoddi4+0x116>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d947      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b142      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026c:	f1c2 0020 	rsb	r0, r2, #32
 8000270:	fa24 f000 	lsr.w	r0, r4, r0
 8000274:	4091      	lsls	r1, r2
 8000276:	4097      	lsls	r7, r2
 8000278:	ea40 0c01 	orr.w	ip, r0, r1
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbbc f6f8 	udiv	r6, ip, r8
 8000288:	fa1f fe87 	uxth.w	lr, r7
 800028c:	fb08 c116 	mls	r1, r8, r6, ip
 8000290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000294:	fb06 f10e 	mul.w	r1, r6, lr
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a2:	f080 8119 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8116 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002ac:	3e02      	subs	r6, #2
 80002ae:	443b      	add	r3, r7
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b8:	fb08 3310 	mls	r3, r8, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c4:	45a6      	cmp	lr, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	193c      	adds	r4, r7, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8105 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002d2:	45a6      	cmp	lr, r4
 80002d4:	f240 8102 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e0:	eba4 040e 	sub.w	r4, r4, lr
 80002e4:	2600      	movs	r6, #0
 80002e6:	b11d      	cbz	r5, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c5 4300 	strd	r4, r3, [r5]
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d150      	bne.n	80003a4 <__udivmoddi4+0x154>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2601      	movs	r6, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c21      	lsrs	r1, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	428b      	cmp	r3, r1
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	1879      	adds	r1, r7, r1
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	428b      	cmp	r3, r1
 800032e:	f200 80e9 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 8000332:	4684      	mov	ip, r0
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000340:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d9 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7bf      	b.n	80002e6 <__udivmoddi4+0x96>
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x12e>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80b1 	beq.w	80004d2 <__udivmoddi4+0x282>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0x140>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80b8 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0103 	sbc.w	r1, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	468c      	mov	ip, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0a8      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800039e:	e9c5 4c00 	strd	r4, ip, [r5]
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0xa0>
 80003a4:	f1c2 0320 	rsb	r3, r2, #32
 80003a8:	fa20 f603 	lsr.w	r6, r0, r3
 80003ac:	4097      	lsls	r7, r2
 80003ae:	fa01 f002 	lsl.w	r0, r1, r2
 80003b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	4330      	orrs	r0, r6
 80003ba:	0c03      	lsrs	r3, r0, #16
 80003bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb06 f108 	mul.w	r1, r6, r8
 80003d0:	4299      	cmp	r1, r3
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	18fb      	adds	r3, r7, r3
 80003da:	f106 3cff 	add.w	ip, r6, #4294967295
 80003de:	f080 808d 	bcs.w	80004fc <__udivmoddi4+0x2ac>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 808a 	bls.w	80004fc <__udivmoddi4+0x2ac>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	443b      	add	r3, r7
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b281      	uxth	r1, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	428b      	cmp	r3, r1
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	1879      	adds	r1, r7, r1
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d273      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 800040c:	428b      	cmp	r3, r1
 800040e:	d971      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000410:	3802      	subs	r0, #2
 8000412:	4439      	add	r1, r7
 8000414:	1acb      	subs	r3, r1, r3
 8000416:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c6 0c20 	rsb	ip, r6, #32
 8000420:	fa03 f406 	lsl.w	r4, r3, r6
 8000424:	fa22 f30c 	lsr.w	r3, r2, ip
 8000428:	431c      	orrs	r4, r3
 800042a:	fa20 f70c 	lsr.w	r7, r0, ip
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000436:	fa21 f10c 	lsr.w	r1, r1, ip
 800043a:	431f      	orrs	r7, r3
 800043c:	0c3b      	lsrs	r3, r7, #16
 800043e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000442:	fa1f f884 	uxth.w	r8, r4
 8000446:	fb0e 1119 	mls	r1, lr, r9, r1
 800044a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800044e:	fb09 fa08 	mul.w	sl, r9, r8
 8000452:	458a      	cmp	sl, r1
 8000454:	fa02 f206 	lsl.w	r2, r2, r6
 8000458:	fa00 f306 	lsl.w	r3, r0, r6
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x220>
 800045e:	1861      	adds	r1, r4, r1
 8000460:	f109 30ff 	add.w	r0, r9, #4294967295
 8000464:	d248      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 8000466:	458a      	cmp	sl, r1
 8000468:	d946      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4421      	add	r1, r4
 8000470:	eba1 010a 	sub.w	r1, r1, sl
 8000474:	b2bf      	uxth	r7, r7
 8000476:	fbb1 f0fe 	udiv	r0, r1, lr
 800047a:	fb0e 1110 	mls	r1, lr, r0, r1
 800047e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000482:	fb00 f808 	mul.w	r8, r0, r8
 8000486:	45b8      	cmp	r8, r7
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x24a>
 800048a:	19e7      	adds	r7, r4, r7
 800048c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000490:	d22e      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 8000492:	45b8      	cmp	r8, r7
 8000494:	d92c      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000496:	3802      	subs	r0, #2
 8000498:	4427      	add	r7, r4
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	eba7 0708 	sub.w	r7, r7, r8
 80004a2:	fba0 8902 	umull	r8, r9, r0, r2
 80004a6:	454f      	cmp	r7, r9
 80004a8:	46c6      	mov	lr, r8
 80004aa:	4649      	mov	r1, r9
 80004ac:	d31a      	bcc.n	80004e4 <__udivmoddi4+0x294>
 80004ae:	d017      	beq.n	80004e0 <__udivmoddi4+0x290>
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x27a>
 80004b2:	ebb3 020e 	subs.w	r2, r3, lr
 80004b6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004be:	40f2      	lsrs	r2, r6
 80004c0:	ea4c 0202 	orr.w	r2, ip, r2
 80004c4:	40f7      	lsrs	r7, r6
 80004c6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ca:	2600      	movs	r6, #0
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e70b      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0x60>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6fd      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e0:	4543      	cmp	r3, r8
 80004e2:	d2e5      	bcs.n	80004b0 <__udivmoddi4+0x260>
 80004e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7df      	b.n	80004b0 <__udivmoddi4+0x260>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e7d2      	b.n	800049a <__udivmoddi4+0x24a>
 80004f4:	4660      	mov	r0, ip
 80004f6:	e78d      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f8:	4681      	mov	r9, r0
 80004fa:	e7b9      	b.n	8000470 <__udivmoddi4+0x220>
 80004fc:	4666      	mov	r6, ip
 80004fe:	e775      	b.n	80003ec <__udivmoddi4+0x19c>
 8000500:	4630      	mov	r0, r6
 8000502:	e74a      	b.n	800039a <__udivmoddi4+0x14a>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	4439      	add	r1, r7
 800050a:	e713      	b.n	8000334 <__udivmoddi4+0xe4>
 800050c:	3802      	subs	r0, #2
 800050e:	443c      	add	r4, r7
 8000510:	e724      	b.n	800035c <__udivmoddi4+0x10c>
 8000512:	bf00      	nop

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <_ZN5Print5writeEPKc+0x14>
 8000528:	2300      	movs	r3, #0
 800052a:	e00d      	b.n	8000548 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3304      	adds	r3, #4
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	6838      	ldr	r0, [r7, #0]
 8000536:	f7ff fe6b 	bl	8000210 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	47a0      	blx	r4
 8000544:	4603      	mov	r3, r0
 8000546:	bf00      	nop
    }
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bd90      	pop	{r4, r7, pc}

08000550 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d00e      	beq.n	8000592 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4619      	mov	r1, r3
 8000584:	68f8      	ldr	r0, [r7, #12]
 8000586:	4790      	blx	r2
 8000588:	4602      	mov	r2, r0
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000590:	e7e6      	b.n	8000560 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000592:	697b      	ldr	r3, [r7, #20]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80005a6:	6839      	ldr	r1, [r7, #0]
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f805 	bl	80005b8 <_ZN5Print5printEPKc>
 80005ae:	4603      	mov	r3, r0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  return write(str);
 80005c2:	6839      	ldr	r1, [r7, #0]
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff ffa7 	bl	8000518 <_ZN5Print5writeEPKc>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
  return write(c);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	78fa      	ldrb	r2, [r7, #3]
 80005e8:	4611      	mov	r1, r2
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	4798      	blx	r3
 80005ee:	4603      	mov	r3, r0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	460b      	mov	r3, r1
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8000606:	7afb      	ldrb	r3, [r7, #11]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f000 f856 	bl	80006be <_ZN5Print5printEmi>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 f805 	bl	800063c <_ZN5Print5printEli>
 8000632:	4603      	mov	r3, r0
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d109      	bne.n	8000662 <_ZN5Print5printEli+0x26>
    return write(n);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	4798      	blx	r3
 800065e:	4603      	mov	r3, r0
 8000660:	e029      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else if (base == 10) {
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d11d      	bne.n	80006a4 <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	2b00      	cmp	r3, #0
 800066c:	da12      	bge.n	8000694 <_ZN5Print5printEli+0x58>
      int t = print('-');
 800066e:	212d      	movs	r1, #45	; 0x2d
 8000670:	68f8      	ldr	r0, [r7, #12]
 8000672:	f7ff ffaf 	bl	80005d4 <_ZN5Print5printEc>
 8000676:	4603      	mov	r3, r0
 8000678:	617b      	str	r3, [r7, #20]
      n = -n;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	425b      	negs	r3, r3
 800067e:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	220a      	movs	r2, #10
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f000 f839 	bl	80006fe <_ZN5Print11printNumberEmh>
 800068c:	4602      	mov	r2, r0
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	4413      	add	r3, r2
 8000692:	e010      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
    }
    return printNumber(n, 10);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	220a      	movs	r2, #10
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f000 f82f 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006a0:	4603      	mov	r3, r0
 80006a2:	e008      	b.n	80006b6 <_ZN5Print5printEli+0x7a>
  } else {
    return printNumber(n, base);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	b2d2      	uxtb	r2, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 f826 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006b2:	4603      	mov	r3, r0
 80006b4:	bf00      	nop
  }
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b084      	sub	sp, #16
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <_ZN5Print5printEmi+0x26>
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	4798      	blx	r3
 80006e0:	4603      	mov	r3, r0
 80006e2:	e008      	b.n	80006f6 <_ZN5Print5printEmi+0x38>
  else return printNumber(n, base);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	68f8      	ldr	r0, [r7, #12]
 80006ee:	f000 f806 	bl	80006fe <_ZN5Print11printNumberEmh>
 80006f2:	4603      	mov	r3, r0
 80006f4:	bf00      	nop
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b090      	sub	sp, #64	; 0x40
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	4613      	mov	r3, r2
 800070a:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	3320      	adds	r3, #32
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c

  *str = '\0';
 8000714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d801      	bhi.n	8000724 <_ZN5Print11printNumberEmh+0x26>
 8000720:	230a      	movs	r3, #10
 8000722:	71fb      	strb	r3, [r7, #7]

  do {
    unsigned long m = n;
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
    n /= base;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000730:	60bb      	str	r3, [r7, #8]
    char c = m - base * n;
 8000732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000734:	b2da      	uxtb	r2, r3
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	79f9      	ldrb	r1, [r7, #7]
 800073c:	fb11 f303 	smulbb	r3, r1, r3
 8000740:	b2db      	uxtb	r3, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8000748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800074c:	2b09      	cmp	r3, #9
 800074e:	d804      	bhi.n	800075a <_ZN5Print11printNumberEmh+0x5c>
 8000750:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000754:	3330      	adds	r3, #48	; 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	e003      	b.n	8000762 <_ZN5Print11printNumberEmh+0x64>
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800075e:	3337      	adds	r3, #55	; 0x37
 8000760:	b2db      	uxtb	r3, r3
 8000762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000764:	3a01      	subs	r2, #1
 8000766:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800076a:	7013      	strb	r3, [r2, #0]
  } while(n);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d000      	beq.n	8000774 <_ZN5Print11printNumberEmh+0x76>
  do {
 8000772:	e7d7      	b.n	8000724 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8000774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff fece 	bl	8000518 <_ZN5Print5writeEPKc>
 800077c:	4603      	mov	r3, r0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3740      	adds	r7, #64	; 0x40
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1cf9      	adds	r1, r7, #3
 800079c:	2201      	movs	r2, #1
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	4798      	blx	r3
 80007a2:	4603      	mov	r3, r0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	6918      	ldr	r0, [r3, #16]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	6979      	ldr	r1, [r7, #20]
 80007ca:	f006 faf8 	bl	8006dbe <HAL_UART_Transmit>
	return size;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	f107 010f 	add.w	r1, r7, #15
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2201      	movs	r2, #1
 80007ee:	f006 fb78 	bl	8006ee2 <HAL_UART_Receive>
	return data;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000820:	4618      	mov	r0, r3
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <_ZN5PrintC1Ev+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	08013ccc 	.word	0x08013ccc

08000868 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffe4 	bl	8000840 <_ZN5PrintC1Ev>
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_ZN6StreamC1Ev+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	08013e1c 	.word	0x08013e1c

08000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ffe1 	bl	8000868 <_ZN6StreamC1Ev>
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	611a      	str	r2, [r3, #16]
	};
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	08013cdc 	.word	0x08013cdc

080008c0 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	4903      	ldr	r1, [pc, #12]	; (80008e4 <_ZN2P910SetDirReadEv+0x24>)
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <_ZN2P910SetDirReadEv+0x28>)
 80008da:	f002 f939 	bl	8002b50 <HAL_GPIO_Init>
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001a0 	.word	0x200001a0
 80008e8:	40020800 	.word	0x40020800

080008ec <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <_ZN3P103SetEv+0x14>)
 80008f6:	f002 fad7 	bl	8002ea8 <HAL_GPIO_WritePin>
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40020400 	.word	0x40020400

08000904 <_ZN3P105ClearEv>:
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <_ZN3P105ClearEv+0x14>)
 800090e:	f002 facb 	bl	8002ea8 <HAL_GPIO_WritePin>
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <_ZN3P1011SetDirWriteEv>:
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 8000934:	2203      	movs	r2, #3
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	4902      	ldr	r1, [pc, #8]	; (8000944 <_ZN3P1011SetDirWriteEv+0x28>)
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <_ZN3P1011SetDirWriteEv+0x2c>)
 800093c:	f002 f908 	bl	8002b50 <HAL_GPIO_Init>
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200001b4 	.word	0x200001b4
 8000948:	40020400 	.word	0x40020400

0800094c <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
                if(pBtd)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffde 	bl	800094c <_ZN3BTD11pairWithHIDEv>
        };
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4798      	blx	r3
                OnInitBTHID();
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	331c      	adds	r3, #28
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	4798      	blx	r3
        };
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	460b      	mov	r3, r1
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	72fb      	strb	r3, [r7, #11]
                return;
 80009d0:	bf00      	nop
        }
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <_ZN9PS4ParserC1Ev+0x20>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
                Reset();
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f011 fa02 	bl	8011df4 <_ZN9PS4Parser5ResetEv>
        };
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08013e10 	.word	0x08013e10

08000a00 <_ZN9PS4Parser12setRumbleOffEv>:
                setRumbleOff();
                setLedOff();
        };

        /** Set rumble off. */
        void setRumbleOff() {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
                setRumbleOn(0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f81c 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 8000a26:	78fb      	ldrb	r3, [r7, #3]
 8000a28:	2b20      	cmp	r3, #32
 8000a2a:	d105      	bne.n	8000a38 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f80a 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 8000a36:	e004      	b.n	8000a42 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	21ff      	movs	r1, #255	; 0xff
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 f804 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        };
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
 8000a56:	4613      	mov	r3, r2
 8000a58:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	78ba      	ldrb	r2, [r7, #2]
 8000a66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	70fb      	strb	r3, [r7, #3]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70bb      	strb	r3, [r7, #2]
 8000a94:	4613      	mov	r3, r2
 8000a96:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	78fa      	ldrb	r2, [r7, #3]
 8000a9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	78ba      	ldrb	r2, [r7, #2]
 8000aa4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	787a      	ldrb	r2, [r7, #1]
 8000aac:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	141b      	asrs	r3, r3, #16
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	121b      	asrs	r3, r3, #8
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffcd 	bl	8000a7e <_ZN9PS4Parser6setLedEhhh>
        };
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	79fa      	ldrb	r2, [r7, #7]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	f00f ff90 	bl	8010a28 <_ZN5BTHIDC1EP3BTDbPKc>
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3378      	adds	r3, #120	; 0x78
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff65 	bl	80009dc <_ZN9PS4ParserC1Ev>
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3378      	adds	r3, #120	; 0x78
 8000b22:	4618      	mov	r0, r3
 8000b24:	f011 f966 	bl	8011df4 <_ZN9PS4Parser5ResetEv>
        };
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	08013dd4 	.word	0x08013dd4
 8000b38:	08013e04 	.word	0x08013e04

08000b3c <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7d5b      	ldrb	r3, [r3, #21]
        };
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3378      	adds	r3, #120	; 0x78
 8000b66:	7af9      	ldrb	r1, [r7, #11]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f011 f87d 	bl	8011c6a <_ZN9PS4Parser5ParseEhPh>
        };
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3378      	adds	r3, #120	; 0x78
 8000b84:	4618      	mov	r0, r3
 8000b86:	f011 f935 	bl	8011df4 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f855 	bl	8000c3a <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3378      	adds	r3, #120	; 0x78
 8000b9c:	21ff      	movs	r1, #255	; 0xff
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff90 	bl	8000ac4 <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3378      	adds	r3, #120	; 0x78
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f011 f91b 	bl	8011df4 <_ZN9PS4Parser5ResetEv>
        };
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b096      	sub	sp, #88	; 0x58
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	224f      	movs	r2, #79	; 0x4f
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f012 fecb 	bl	8013974 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000bde:	2352      	movs	r3, #82	; 0x52
 8000be0:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000be2:	2311      	movs	r3, #17
 8000be4:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000bea:	23ff      	movs	r3, #255	; 0xff
 8000bec:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	789b      	ldrb	r3, [r3, #2]
 8000bfe:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	78db      	ldrb	r3, [r3, #3]
 8000c04:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	799b      	ldrb	r3, [r3, #6]
 8000c16:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	224f      	movs	r2, #79	; 0x4f
 8000c24:	4619      	mov	r1, r3
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f81a 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c2c:	bf00      	nop
 8000c2e:	3758      	adds	r7, #88	; 0x58
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000c34:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000c38:	e7c5      	b.n	8000bc6 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000c3a <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000c42:	2343      	movs	r3, #67	; 0x43
 8000c44:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000c46:	2302      	movs	r3, #2
 8000c48:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2202      	movs	r2, #2
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f804 	bl	8000c60 <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6898      	ldr	r0, [r3, #8]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8999      	ldrh	r1, [r3, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	7d9b      	ldrb	r3, [r3, #22]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	7dd2      	ldrb	r2, [r2, #23]
 8000c7e:	79fc      	ldrb	r4, [r7, #7]
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f00e ff6a 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
    {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c98:	f001 fe12 	bl	80028c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9c:	f000 f8e4 	bl	8000e68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca0:	f000 fa42 	bl	8001128 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ca4:	f000 fa12 	bl	80010cc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000ca8:	f000 f9d4 	bl	8001054 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000cac:	f00c f8a6 	bl	800cdfc <MX_USB_DEVICE_Init>
  MX_TIM14_Init();
 8000cb0:	f000 f972 	bl	8000f98 <_ZL13MX_TIM14_Initv>
  MX_I2C1_Init();
 8000cb4:	f000 f99a 	bl	8000fec <_ZL12MX_I2C1_Initv>

  //MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* For the USB Host Shield Library*/
  SPI_Handle = hspi1;
 8000cb8:	4a49      	ldr	r2, [pc, #292]	; (8000de0 <main+0x14c>)
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <main+0x150>)
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	2358      	movs	r3, #88	; 0x58
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f012 fe48 	bl	8013958 <memcpy>
  UART_Handle = huart2;
 8000cc8:	4a47      	ldr	r2, [pc, #284]	; (8000de8 <main+0x154>)
 8000cca:	4b48      	ldr	r3, [pc, #288]	; (8000dec <main+0x158>)
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2344      	movs	r3, #68	; 0x44
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f012 fe40 	bl	8013958 <memcpy>

  /* The Primary Timer, since using freeRTOS, not using systick */
  HAL_TIM_Base_Start_IT(&htim14);
 8000cd8:	4845      	ldr	r0, [pc, #276]	; (8000df0 <main+0x15c>)
 8000cda:	f005 fdcf 	bl	800687c <HAL_TIM_Base_Start_IT>

  /* Verify our CPU Frequency
   * We should get a 500ms delay here */
  Serial.print(F("\r\nCPU Frequency is: "));
 8000cde:	4945      	ldr	r1, [pc, #276]	; (8000df4 <main+0x160>)
 8000ce0:	4845      	ldr	r0, [pc, #276]	; (8000df8 <main+0x164>)
 8000ce2:	f7ff fc5b 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
  cpu_freq = HAL_RCC_GetHCLKFreq() / 1000000;
 8000ce6:	f003 fff1 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a43      	ldr	r2, [pc, #268]	; (8000dfc <main+0x168>)
 8000cee:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf2:	0c9b      	lsrs	r3, r3, #18
 8000cf4:	4a42      	ldr	r2, [pc, #264]	; (8000e00 <main+0x16c>)
 8000cf6:	6013      	str	r3, [r2, #0]
  Serial.print((int) cpu_freq);
 8000cf8:	4b41      	ldr	r3, [pc, #260]	; (8000e00 <main+0x16c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483d      	ldr	r0, [pc, #244]	; (8000df8 <main+0x164>)
 8000d02:	f7ff fc8b 	bl	800061c <_ZN5Print5printEii>
  Serial.print("MHz");
 8000d06:	493f      	ldr	r1, [pc, #252]	; (8000e04 <main+0x170>)
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <main+0x164>)
 8000d0a:	f7ff fc55 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print("\r\nStart");
 8000d0e:	493e      	ldr	r1, [pc, #248]	; (8000e08 <main+0x174>)
 8000d10:	4839      	ldr	r0, [pc, #228]	; (8000df8 <main+0x164>)
 8000d12:	f7ff fc51 	bl	80005b8 <_ZN5Print5printEPKc>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14);
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <main+0x15c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	; (8000e0c <main+0x178>)
 8000d20:	801a      	strh	r2, [r3, #0]
  HAL_Delay(500);
 8000d22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d26:	f001 fe0d 	bl	8002944 <HAL_Delay>
  timer_val = __HAL_TIM_GET_COUNTER(&htim14) - timer_val;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <main+0x15c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <main+0x178>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	4b34      	ldr	r3, [pc, #208]	; (8000e0c <main+0x178>)
 8000d3c:	801a      	strh	r2, [r3, #0]
  Serial.print("\r\nTime Elapsed is: ");
 8000d3e:	4934      	ldr	r1, [pc, #208]	; (8000e10 <main+0x17c>)
 8000d40:	482d      	ldr	r0, [pc, #180]	; (8000df8 <main+0x164>)
 8000d42:	f7ff fc39 	bl	80005b8 <_ZN5Print5printEPKc>
  Serial.print((int) timer_val / 10);
 8000d46:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <main+0x178>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <main+0x180>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	08db      	lsrs	r3, r3, #3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	220a      	movs	r2, #10
 8000d56:	4619      	mov	r1, r3
 8000d58:	4827      	ldr	r0, [pc, #156]	; (8000df8 <main+0x164>)
 8000d5a:	f7ff fc5f 	bl	800061c <_ZN5Print5printEii>
  Serial.print(" ms");
 8000d5e:	492e      	ldr	r1, [pc, #184]	; (8000e18 <main+0x184>)
 8000d60:	4825      	ldr	r0, [pc, #148]	; (8000df8 <main+0x164>)
 8000d62:	f7ff fc29 	bl	80005b8 <_ZN5Print5printEPKc>
//  hal_gettick = HAL_GetTick();
//  hal_gettick/1000;
  Serial.print((int) hal_gettick);
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <main+0x188>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4822      	ldr	r0, [pc, #136]	; (8000df8 <main+0x164>)
 8000d70:	f7ff fc54 	bl	800061c <_ZN5Print5printEii>

  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 8000d74:	f009 faf4 	bl	800a360 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of getBT */
  getBTHandle = osThreadNew(StartGetBT, NULL, &getBT_attributes);
 8000d78:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <main+0x18c>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4829      	ldr	r0, [pc, #164]	; (8000e24 <main+0x190>)
 8000d7e:	f009 fb39 	bl	800a3f4 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <main+0x194>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of sendUSB */
  sendUSBHandle = osThreadNew(StartSendUSB, NULL, &sendUSB_attributes);
 8000d88:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <main+0x198>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4828      	ldr	r0, [pc, #160]	; (8000e30 <main+0x19c>)
 8000d8e:	f009 fb31 	bl	800a3f4 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <main+0x1a0>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of controllerJoin */
  controllerJoinHandle = osThreadNew(StartControllerJoin, NULL, &controllerJoin_attributes);
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <main+0x1a4>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4827      	ldr	r0, [pc, #156]	; (8000e3c <main+0x1a8>)
 8000d9e:	f009 fb29 	bl	800a3f4 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <main+0x1ac>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of buttonPress */
  buttonPressHandle = osThreadNew(StartButtonPress, NULL, &buttonPress_attributes);
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <main+0x1b0>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <main+0x1b4>)
 8000dae:	f009 fb21 	bl	800a3f4 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <main+0x1b8>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of updateLCD */
  updateLCDHandle = osThreadNew(StartUpdateLCD, NULL, &updateLCD_attributes);
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <main+0x1bc>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <main+0x1c0>)
 8000dbe:	f009 fb19 	bl	800a3f4 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a24      	ldr	r2, [pc, #144]	; (8000e58 <main+0x1c4>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of getLatencies, Used to Meaesure latencies of tasks*/
  getLatencies = osThreadNew(StartGetLatencies, NULL, &getLatencies_attributes);
 8000dc8:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <main+0x1c8>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4824      	ldr	r0, [pc, #144]	; (8000e60 <main+0x1cc>)
 8000dce:	f009 fb11 	bl	800a3f4 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <main+0x1d0>)
 8000dd6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dd8:	f009 fae6 	bl	800a3a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x148>
 8000dde:	bf00      	nop
 8000de0:	20000320 	.word	0x20000320
 8000de4:	20000224 	.word	0x20000224
 8000de8:	20000378 	.word	0x20000378
 8000dec:	2000027c 	.word	0x2000027c
 8000df0:	200002c0 	.word	0x200002c0
 8000df4:	08013a90 	.word	0x08013a90
 8000df8:	200003bc 	.word	0x200003bc
 8000dfc:	431bde83 	.word	0x431bde83
 8000e00:	20000674 	.word	0x20000674
 8000e04:	08013aa8 	.word	0x08013aa8
 8000e08:	08013aac 	.word	0x08013aac
 8000e0c:	20000678 	.word	0x20000678
 8000e10:	08013ab4 	.word	0x08013ab4
 8000e14:	cccccccd 	.word	0xcccccccd
 8000e18:	08013ac8 	.word	0x08013ac8
 8000e1c:	2000067c 	.word	0x2000067c
 8000e20:	08013cf4 	.word	0x08013cf4
 8000e24:	080013a5 	.word	0x080013a5
 8000e28:	20000308 	.word	0x20000308
 8000e2c:	08013d18 	.word	0x08013d18
 8000e30:	08001ab1 	.word	0x08001ab1
 8000e34:	2000030c 	.word	0x2000030c
 8000e38:	08013d3c 	.word	0x08013d3c
 8000e3c:	08001b01 	.word	0x08001b01
 8000e40:	20000310 	.word	0x20000310
 8000e44:	08013d60 	.word	0x08013d60
 8000e48:	08001b59 	.word	0x08001b59
 8000e4c:	20000314 	.word	0x20000314
 8000e50:	08013d84 	.word	0x08013d84
 8000e54:	08001bf5 	.word	0x08001bf5
 8000e58:	20000318 	.word	0x20000318
 8000e5c:	08013da8 	.word	0x08013da8
 8000e60:	080012b5 	.word	0x080012b5
 8000e64:	2000031c 	.word	0x2000031c

08000e68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
    {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0ac      	sub	sp, #176	; 0xb0
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e6e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e72:	2234      	movs	r2, #52	; 0x34
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f012 fd7c 	bl	8013974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	225c      	movs	r2, #92	; 0x5c
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f012 fd6d 	bl	8013974 <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <SystemClock_Config+0x128>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <SystemClock_Config+0x128>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <SystemClock_Config+0x12c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef2:	23a8      	movs	r3, #168	; 0xa8
 8000ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000efe:	2307      	movs	r3, #7
 8000f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fc1e 	bl	8005750 <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf14      	ite	ne
 8000f1a:	2301      	movne	r3, #1
 8000f1c:	2300      	moveq	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc0>
      {
    Error_Handler();
 8000f24:	f000 ff8e 	bl	8001e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	66bb      	str	r3, [r7, #104]	; 0x68
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fdda 	bl	8004b00 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xf8>
      {
    Error_Handler();
 8000f5c:	f000 ff72 	bl	8001e44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f66:	2300      	movs	r3, #0
 8000f68:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 ff12 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x120>
      {
    Error_Handler();
 8000f84:	f000 ff5e 	bl	8001e44 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	37b0      	adds	r7, #176	; 0xb0
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <_ZL13MX_TIM14_Initv>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
    {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_ZL13MX_TIM14_Initv+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (168 / 2) * 100 - 1;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fa4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fa8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fb6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fc4:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <_ZL13MX_TIM14_Initv+0x4c>)
 8000fc6:	f005 fc09 	bl	80067dc <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <_ZL13MX_TIM14_Initv+0x46>
      {
    Error_Handler();
 8000fda:	f000 ff33 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002c0 	.word	0x200002c0
 8000fe8:	40002000 	.word	0x40002000

08000fec <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
    {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <_ZL12MX_I2C1_Initv+0x60>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <_ZL12MX_I2C1_Initv+0x64>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <_ZL12MX_I2C1_Initv+0x5c>)
 800102a:	f001 ff57 	bl	8002edc <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <_ZL12MX_I2C1_Initv+0x56>
      {
    Error_Handler();
 800103e:	f000 ff01 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001d0 	.word	0x200001d0
 800104c:	40005400 	.word	0x40005400
 8001050:	000186a0 	.word	0x000186a0

08001054 <_ZL12MX_SPI1_Initv>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
    {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <_ZL12MX_SPI1_Initv+0x74>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001060:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001084:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001088:	2218      	movs	r2, #24
 800108a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 8001094:	2200      	movs	r2, #0
 8001096:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 800109a:	2200      	movs	r2, #0
 800109c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <_ZL12MX_SPI1_Initv+0x70>)
 80010a6:	f004 fdf1 	bl	8005c8c <HAL_SPI_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <_ZL12MX_SPI1_Initv+0x6a>
      {
    Error_Handler();
 80010ba:	f000 fec3 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000224 	.word	0x20000224
 80010c8:	40013000 	.word	0x40013000

080010cc <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
    {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_ZL19MX_USART2_UART_Initv+0x58>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001104:	f005 fe0e 	bl	8006d24 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf14      	ite	ne
 800110e:	2301      	movne	r3, #1
 8001110:	2300      	moveq	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <_ZL19MX_USART2_UART_Initv+0x50>
      {
    Error_Handler();
 8001118:	f000 fe94 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000027c 	.word	0x2000027c
 8001124:	40004400 	.word	0x40004400

08001128 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
    {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a27      	ldr	r2, [pc, #156]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <_ZL12MX_GPIO_Initv+0xf4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <_ZL12MX_GPIO_Initv+0xf8>)
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <_ZL12MX_GPIO_Initv+0xfc>)
 80011c4:	f001 fcc4 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <_ZL12MX_GPIO_Initv+0x100>)
 80011de:	f001 fcb7 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011e2:	2310      	movs	r3, #16
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 80011f6:	f001 fcab 	bl	8002b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <_ZL12MX_GPIO_Initv+0x104>)
 8001210:	f001 fc9e 	bl	8002b50 <HAL_GPIO_Init>
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	10210000 	.word	0x10210000
 8001224:	40020800 	.word	0x40020800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <_Z23ProcessKeyCodeInContexth>:

/* USER CODE BEGIN 4 */
void ProcessKeyCodeInContext(uint8_t keyCode)
    {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  /*Updates the display_no
   * We could also just call display funcitons directly here, but since we have extra processing speed
   * Let's play with freeRTOS */
  if (display_no == 0) { /* This is the status screen, show if controller or not connected */
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10d      	bne.n	800125e <_Z23ProcessKeyCodeInContexth+0x2e>
    if (keyCode == BACK_BTN)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d103      	bne.n	8001250 <_Z23ProcessKeyCodeInContexth+0x20>
      display_no = 1;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e01e      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b06      	cmp	r3, #6
 8001254:	d11b      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 1;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e017      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
  } else if (display_no == 1) { /* Pair Controller Screen */
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d113      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    if (keyCode == BACK_BTN)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d103      	bne.n	8001274 <_Z23ProcessKeyCodeInContexth+0x44>
      display_no = 0;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e00c      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == FORWARD_BTN)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d103      	bne.n	8001282 <_Z23ProcessKeyCodeInContexth+0x52>
      display_no = 0;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e005      	b.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
    else if (keyCode == SELECT_BTN) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d102      	bne.n	800128e <_Z23ProcessKeyCodeInContexth+0x5e>
      display_no = 7; /* Only get to the pair status screen from here */
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_Z23ProcessKeyCodeInContexth+0x78>)
 800128a:	2207      	movs	r2, #7
 800128c:	701a      	strb	r2, [r3, #0]
  } else if (display_no == 2) {

  }
//  Serial.print("\r\nDisplay no is: ");
//  Serial.print(display_no);
  display_run_once = 0;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_Z23ProcessKeyCodeInContexth+0x7c>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
  display_force_update = 1;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <_Z23ProcessKeyCodeInContexth+0x80>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000680 	.word	0x20000680
 80012ac:	20000684 	.word	0x20000684
 80012b0:	20000683 	.word	0x20000683

080012b4 <_Z17StartGetLatenciesPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartGetLatencies(void *argument)
    {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetLatencies */
  /* Infinite loop */
  for (;;)
      {
#if rtos_delay_view //this is just used to measure the delay of StartGetBT task
    if (timer_val_getBT >= 7) {
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <_Z17StartGetLatenciesPv+0xbc>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	2b06      	cmp	r3, #6
 80012c2:	d90a      	bls.n	80012da <_Z17StartGetLatenciesPv+0x26>
      Serial.print("\r\nWarning High CPU/BT Latency, getBT latency is: ");
 80012c4:	492b      	ldr	r1, [pc, #172]	; (8001374 <_Z17StartGetLatenciesPv+0xc0>)
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012c8:	f7ff f976 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getBT);
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <_Z17StartGetLatenciesPv+0xbc>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	220a      	movs	r2, #10
 80012d2:	4619      	mov	r1, r3
 80012d4:	4828      	ldr	r0, [pc, #160]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012d6:	f7ff f9a1 	bl	800061c <_ZN5Print5printEii>
    }
    if (timer_val_getUSB >= 4) {
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <_Z17StartGetLatenciesPv+0xc8>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d90a      	bls.n	80012f8 <_Z17StartGetLatenciesPv+0x44>
      Serial.print("\r\nWarning High CPU/USB Latency, getUSB latency is: ");
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <_Z17StartGetLatenciesPv+0xcc>)
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012e6:	f7ff f967 	bl	80005b8 <_ZN5Print5printEPKc>
      Serial.print(timer_val_getUSB);
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <_Z17StartGetLatenciesPv+0xc8>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	220a      	movs	r2, #10
 80012f0:	4619      	mov	r1, r3
 80012f2:	4821      	ldr	r0, [pc, #132]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012f4:	f7ff f992 	bl	800061c <_ZN5Print5printEii>

#if rtos_delay_view
    /*This does not have to do with RTOS, but good place for 1 second status updates */
    /* Only rx_buf[3] and rx[5] have the rumble data */
    /* dataout ran should only run for THPS 2 or if used on XBCD on a PC */
    Serial.print("\r\nRumble Data: ");
 80012f8:	4922      	ldr	r1, [pc, #136]	; (8001384 <_Z17StartGetLatenciesPv+0xd0>)
 80012fa:	481f      	ldr	r0, [pc, #124]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 80012fc:	f7ff f95c 	bl	80005b8 <_ZN5Print5printEPKc>
//	Serial.print(" ");
//	Serial.print(rx_buf[1]);
//	Serial.print(" ");
//	Serial.print(rx_buf[2]);
//	Serial.print(" ");
    Serial.print(rx_buf[3]);
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 8001302:	78db      	ldrb	r3, [r3, #3]
 8001304:	220a      	movs	r2, #10
 8001306:	4619      	mov	r1, r3
 8001308:	481b      	ldr	r0, [pc, #108]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800130a:	f7ff f975 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print(" ");
 800130e:	491f      	ldr	r1, [pc, #124]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 8001310:	4819      	ldr	r0, [pc, #100]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001312:	f7ff f951 	bl	80005b8 <_ZN5Print5printEPKc>
//	Serial.print(rx_buf[4]);
//	Serial.print(" ");
    Serial.print(rx_buf[5]);
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <_Z17StartGetLatenciesPv+0xd4>)
 8001318:	795b      	ldrb	r3, [r3, #5]
 800131a:	220a      	movs	r2, #10
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001320:	f7ff f96a 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print("   ");
 8001324:	491a      	ldr	r1, [pc, #104]	; (8001390 <_Z17StartGetLatenciesPv+0xdc>)
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001328:	f7ff f946 	bl	80005b8 <_ZN5Print5printEPKc>
    Serial.print(dataout_ran);
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <_Z17StartGetLatenciesPv+0xe0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	220a      	movs	r2, #10
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001336:	f7ff f95f 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print(" ");
 800133a:	4914      	ldr	r1, [pc, #80]	; (800138c <_Z17StartGetLatenciesPv+0xd8>)
 800133c:	480e      	ldr	r0, [pc, #56]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800133e:	f7ff f93b 	bl	80005b8 <_ZN5Print5printEPKc>
    Serial.print(rumble_brequest_sent);
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_Z17StartGetLatenciesPv+0xe4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	220a      	movs	r2, #10
 8001348:	4619      	mov	r1, r3
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 800134c:	f7ff f954 	bl	80005f8 <_ZN5Print5printEhi>
    Serial.print("\r\nController Idle Time: ");
 8001350:	4912      	ldr	r1, [pc, #72]	; (800139c <_Z17StartGetLatenciesPv+0xe8>)
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001354:	f7ff f930 	bl	80005b8 <_ZN5Print5printEPKc>
    Serial.print(button_press_idle);
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <_Z17StartGetLatenciesPv+0xec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	220a      	movs	r2, #10
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <_Z17StartGetLatenciesPv+0xc4>)
 8001362:	f7ff f9ac 	bl	80006be <_ZN5Print5printEmi>
#endif
    osDelay(1000);
 8001366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136a:	f009 f8d5 	bl	800a518 <osDelay>
    if (timer_val_getBT >= 7) {
 800136e:	e7a5      	b.n	80012bc <_Z17StartGetLatenciesPv+0x8>
 8001370:	20000686 	.word	0x20000686
 8001374:	08013acc 	.word	0x08013acc
 8001378:	200003bc 	.word	0x200003bc
 800137c:	20000688 	.word	0x20000688
 8001380:	08013b00 	.word	0x08013b00
 8001384:	08013b34 	.word	0x08013b34
 8001388:	200001c8 	.word	0x200001c8
 800138c:	08013b44 	.word	0x08013b44
 8001390:	08013b48 	.word	0x08013b48
 8001394:	20000abd 	.word	0x20000abd
 8001398:	20000abf 	.word	0x20000abf
 800139c:	08013b4c 	.word	0x08013b4c
 80013a0:	200006ac 	.word	0x200006ac

080013a4 <_Z10StartGetBTPv>:
  /* USER CODE END StartGetLatencies */
}
/* USER CODE END 4 */

void StartGetBT(void *argument)
    {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */

  /* USER CODE BEGIN 5 */
  if (Usb.Init() == -1) {
 80013ac:	48ae      	ldr	r0, [pc, #696]	; (8001668 <_Z10StartGetBTPv+0x2c4>)
 80013ae:	f000 fd57 	bl	8001e60 <_ZN8MAX3421eI3P102P9E4InitEv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	bf0c      	ite	eq
 80013ba:	2301      	moveq	r3, #1
 80013bc:	2300      	movne	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <_Z10StartGetBTPv+0x2a>
    Serial.print(F("\r\nOSC did not start"));
 80013c4:	49a9      	ldr	r1, [pc, #676]	; (800166c <_Z10StartGetBTPv+0x2c8>)
 80013c6:	48aa      	ldr	r0, [pc, #680]	; (8001670 <_Z10StartGetBTPv+0x2cc>)
 80013c8:	f7ff f8e8 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 80013cc:	e7fe      	b.n	80013cc <_Z10StartGetBTPv+0x28>
      ; // Halt
  }
  Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 80013ce:	49a9      	ldr	r1, [pc, #676]	; (8001674 <_Z10StartGetBTPv+0x2d0>)
 80013d0:	48a7      	ldr	r0, [pc, #668]	; (8001670 <_Z10StartGetBTPv+0x2cc>)
 80013d2:	f7ff f8e3 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>

  /*Initialize our gamepad, this is for use on a PC*/
  gameHID.JoyX = 0;
 80013d6:	4ba8      	ldr	r3, [pc, #672]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	709a      	strb	r2, [r3, #2]
  gameHID.JoyY = 0;
 80013dc:	4ba6      	ldr	r3, [pc, #664]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	70da      	strb	r2, [r3, #3]
  gameHID.Joy2X = 0;
 80013e2:	4ba5      	ldr	r3, [pc, #660]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	711a      	strb	r2, [r3, #4]
  gameHID.Joy2Y = 0;
 80013e8:	4ba3      	ldr	r3, [pc, #652]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	715a      	strb	r2, [r3, #5]
  gameHID.Joy_LT = 0;
 80013ee:	4ba2      	ldr	r3, [pc, #648]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
  gameHID.Joy_RT = 0;
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	705a      	strb	r2, [r3, #1]
  gameHID.ps4ButtonsTag.dummy = 0;
 80013fa:	4a9f      	ldr	r2, [pc, #636]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80013fc:	7993      	ldrb	r3, [r2, #6]
 80013fe:	f36f 0300 	bfc	r3, #0, #1
 8001402:	7193      	strb	r3, [r2, #6]

  /* Initalize our Xbox Controller data that we will send in our hid reports */
  xboxHID.startByte = 0x00;
 8001404:	4b9d      	ldr	r3, [pc, #628]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
  xboxHID.bLength = 20;
 800140a:	4b9c      	ldr	r3, [pc, #624]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800140c:	2214      	movs	r2, #20
 800140e:	705a      	strb	r2, [r3, #1]
  xboxHID.dButtons = 0x00;
 8001410:	4b9a      	ldr	r3, [pc, #616]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001412:	2200      	movs	r2, #0
 8001414:	709a      	strb	r2, [r3, #2]
  xboxHID.A = 0;
 8001416:	4b99      	ldr	r3, [pc, #612]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001418:	2200      	movs	r2, #0
 800141a:	711a      	strb	r2, [r3, #4]
  xboxHID.B = 0;
 800141c:	4b97      	ldr	r3, [pc, #604]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800141e:	2200      	movs	r2, #0
 8001420:	715a      	strb	r2, [r3, #5]
  xboxHID.X = 0;
 8001422:	4b96      	ldr	r3, [pc, #600]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001424:	2200      	movs	r2, #0
 8001426:	719a      	strb	r2, [r3, #6]
  xboxHID.Y = 0;
 8001428:	4b94      	ldr	r3, [pc, #592]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800142a:	2200      	movs	r2, #0
 800142c:	71da      	strb	r2, [r3, #7]
  xboxHID.BLACK = 0;
 800142e:	4b93      	ldr	r3, [pc, #588]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001430:	2200      	movs	r2, #0
 8001432:	721a      	strb	r2, [r3, #8]
  xboxHID.WHITE = 0;
 8001434:	4b91      	ldr	r3, [pc, #580]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001436:	2200      	movs	r2, #0
 8001438:	725a      	strb	r2, [r3, #9]
  xboxHID.L = 0;
 800143a:	4b90      	ldr	r3, [pc, #576]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800143c:	2200      	movs	r2, #0
 800143e:	729a      	strb	r2, [r3, #10]
  xboxHID.R = 0;
 8001440:	4b8e      	ldr	r3, [pc, #568]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001442:	2200      	movs	r2, #0
 8001444:	72da      	strb	r2, [r3, #11]
  xboxHID.leftStickX = 0;
 8001446:	4b8d      	ldr	r3, [pc, #564]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001448:	2200      	movs	r2, #0
 800144a:	819a      	strh	r2, [r3, #12]
  xboxHID.leftStickY = 0;
 800144c:	4b8b      	ldr	r3, [pc, #556]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800144e:	2200      	movs	r2, #0
 8001450:	81da      	strh	r2, [r3, #14]
  xboxHID.rightStickX = 0;
 8001452:	4b8a      	ldr	r3, [pc, #552]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001454:	2200      	movs	r2, #0
 8001456:	821a      	strh	r2, [r3, #16]
  xboxHID.rightStickY = 0;
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800145a:	2200      	movs	r2, #0
 800145c:	825a      	strh	r2, [r3, #18]
//		}
//		if(usb_failed || usb_failed2) {
//			Serial.print("\r\nUSBd failed");
//		}
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 800145e:	4b88      	ldr	r3, [pc, #544]	; (8001680 <_Z10StartGetBTPv+0x2dc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b87      	ldr	r3, [pc, #540]	; (8001684 <_Z10StartGetBTPv+0x2e0>)
 8001468:	801a      	strh	r2, [r3, #0]
#endif
    Usb.Task();
 800146a:	487f      	ldr	r0, [pc, #508]	; (8001668 <_Z10StartGetBTPv+0x2c4>)
 800146c:	f011 fa00 	bl	8012870 <_ZN3USB4TaskEv>
    if (PS4.connected()) {
 8001470:	4885      	ldr	r0, [pc, #532]	; (8001688 <_Z10StartGetBTPv+0x2e4>)
 8001472:	f7ff fb63 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 82c2 	beq.w	8001a02 <_Z10StartGetBTPv+0x65e>
      ps4_connected = 1;
 800147e:	4b83      	ldr	r3, [pc, #524]	; (800168c <_Z10StartGetBTPv+0x2e8>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
      LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8001484:	2100      	movs	r1, #0
 8001486:	4882      	ldr	r0, [pc, #520]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001488:	f010 fbdf 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <_Z10StartGetBTPv+0x2f0>)
 8001492:	701a      	strb	r2, [r3, #0]
      LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8001494:	2101      	movs	r1, #1
 8001496:	487e      	ldr	r0, [pc, #504]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001498:	f010 fbd7 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <_Z10StartGetBTPv+0x2f4>)
 80014a2:	701a      	strb	r2, [r3, #0]
      RightHatX_val = PS4.getAnalogHat(RightHatX);
 80014a4:	2102      	movs	r1, #2
 80014a6:	487a      	ldr	r0, [pc, #488]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014a8:	f010 fbcf 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b7a      	ldr	r3, [pc, #488]	; (800169c <_Z10StartGetBTPv+0x2f8>)
 80014b2:	701a      	strb	r2, [r3, #0]
      RightHatY_val = PS4.getAnalogHat(RightHatY);
 80014b4:	2103      	movs	r1, #3
 80014b6:	4876      	ldr	r0, [pc, #472]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014b8:	f010 fbc7 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <_Z10StartGetBTPv+0x2fc>)
 80014c2:	701a      	strb	r2, [r3, #0]
				gameHID.Joy2Y = 0;
				xboxHID.rightStickX = 0;
				xboxHID.rightStickY = 0;
			}
#elif !deadzone_enable
      gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 80014c4:	2100      	movs	r1, #0
 80014c6:	4872      	ldr	r0, [pc, #456]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014c8:	f010 fbbf 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014cc:	4603      	mov	r3, r0
 80014ce:	3b80      	subs	r3, #128	; 0x80
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014d6:	709a      	strb	r2, [r3, #2]
      gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 80014d8:	2101      	movs	r1, #1
 80014da:	486d      	ldr	r0, [pc, #436]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80014dc:	f010 fbb5 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 80014e0:	4603      	mov	r3, r0
 80014e2:	3b80      	subs	r3, #128	; 0x80
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	4b63      	ldr	r3, [pc, #396]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014ea:	70da      	strb	r2, [r3, #3]
      xboxHID.leftStickX = gameHID.JoyX << 8;	//only getting 8 bit value from bt
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014ee:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 80014f8:	819a      	strh	r2, [r3, #12]
      xboxHID.leftStickY = gameHID.JoyY << 8;	//xbox uses 16 bit signed
 80014fa:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80014fc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001506:	81da      	strh	r2, [r3, #14]
      /* The Y axis by default is inverted on the Xbox */
      xboxHID.leftStickY = -xboxHID.leftStickY - 128;
 8001508:	4b5c      	ldr	r3, [pc, #368]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800150a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800150e:	b29a      	uxth	r2, r3
 8001510:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21a      	sxth	r2, r3
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800151c:	81da      	strh	r2, [r3, #14]

      gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 800151e:	2102      	movs	r1, #2
 8001520:	485b      	ldr	r0, [pc, #364]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001522:	f010 fb92 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8001526:	4603      	mov	r3, r0
 8001528:	3b80      	subs	r3, #128	; 0x80
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b25a      	sxtb	r2, r3
 800152e:	4b52      	ldr	r3, [pc, #328]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001530:	711a      	strb	r2, [r3, #4]
      gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8001532:	2103      	movs	r1, #3
 8001534:	4856      	ldr	r0, [pc, #344]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001536:	f010 fb88 	bl	8011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 800153a:	4603      	mov	r3, r0
 800153c:	3b80      	subs	r3, #128	; 0x80
 800153e:	b2db      	uxtb	r3, r3
 8001540:	b25a      	sxtb	r2, r3
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001544:	715a      	strb	r2, [r3, #5]
      xboxHID.rightStickX = gameHID.Joy2X << 8;
 8001546:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001548:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001552:	821a      	strh	r2, [r3, #16]
      xboxHID.rightStickY = gameHID.Joy2Y << 8;
 8001554:	4b48      	ldr	r3, [pc, #288]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001556:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b47      	ldr	r3, [pc, #284]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001560:	825a      	strh	r2, [r3, #18]

      /* The Y axis by default is inverted on the Xbox */
      xboxHID.rightStickY = -xboxHID.rightStickY - 128;
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001564:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800156e:	1a9b      	subs	r3, r3, r2
 8001570:	b29b      	uxth	r3, r3
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001576:	825a      	strh	r2, [r3, #18]
#endif
      xboxHID.L = PS4.getAnalogButton(L2);
 8001578:	2108      	movs	r1, #8
 800157a:	4845      	ldr	r0, [pc, #276]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 800157c:	f010 fb4c 	bl	8011c18 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001586:	729a      	strb	r2, [r3, #10]
      xboxHID.R = PS4.getAnalogButton(R2);
 8001588:	2109      	movs	r1, #9
 800158a:	4841      	ldr	r0, [pc, #260]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 800158c:	f010 fb44 	bl	8011c18 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b39      	ldr	r3, [pc, #228]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001596:	72da      	strb	r2, [r3, #11]
      gameHID.Joy_LT = xboxHID.L - 128;
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800159a:	7a9b      	ldrb	r3, [r3, #10]
 800159c:	3b80      	subs	r3, #128	; 0x80
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	4b35      	ldr	r3, [pc, #212]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015a4:	701a      	strb	r2, [r3, #0]
      gameHID.Joy_RT = xboxHID.R - 128;
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 80015a8:	7adb      	ldrb	r3, [r3, #11]
 80015aa:	3b80      	subs	r3, #128	; 0x80
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	4b31      	ldr	r3, [pc, #196]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015b2:	705a      	strb	r2, [r3, #1]

      if (PS4.getButtonClick(PS)) {
 80015b4:	2110      	movs	r1, #16
 80015b6:	4836      	ldr	r0, [pc, #216]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80015b8:	f010 faee 	bl	8011b98 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d008      	beq.n	80015d4 <_Z10StartGetBTPv+0x230>
        PS4.disconnect();
 80015c2:	4831      	ldr	r0, [pc, #196]	; (8001688 <_Z10StartGetBTPv+0x2e4>)
 80015c4:	f00f faa1 	bl	8010b0a <_ZN5BTHID10disconnectEv>
        display_run_once = 0;
 80015c8:	4b36      	ldr	r3, [pc, #216]	; (80016a4 <_Z10StartGetBTPv+0x300>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
        rumble_once = 0;
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <_Z10StartGetBTPv+0x304>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
      }

      if (PS4.getButtonPress(TRIANGLE)) {
 80015d4:	210c      	movs	r1, #12
 80015d6:	482e      	ldr	r0, [pc, #184]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 80015d8:	f010 fab6 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <_Z10StartGetBTPv+0x256>
        gameHID.ps4ButtonsTag.button_triangle = 1;
 80015e2:	4a25      	ldr	r2, [pc, #148]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015e4:	79d3      	ldrb	r3, [r2, #7]
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0xFF;
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 80015ee:	22ff      	movs	r2, #255	; 0xff
 80015f0:	71da      	strb	r2, [r3, #7]
        button_press_idle = 0;
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <_Z10StartGetBTPv+0x308>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e007      	b.n	800160a <_Z10StartGetBTPv+0x266>
      } else {
        gameHID.ps4ButtonsTag.button_triangle = 0;
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 80015fc:	79d3      	ldrb	r3, [r2, #7]
 80015fe:	f36f 0300 	bfc	r3, #0, #1
 8001602:	71d3      	strb	r3, [r2, #7]
        xboxHID.Y = 0;
 8001604:	4b1d      	ldr	r3, [pc, #116]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001606:	2200      	movs	r2, #0
 8001608:	71da      	strb	r2, [r3, #7]
      }

      if (PS4.getButtonPress(CIRCLE)) {
 800160a:	210d      	movs	r1, #13
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 800160e:	f010 fa9b 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <_Z10StartGetBTPv+0x28c>
        gameHID.ps4ButtonsTag.button_circle = 1;
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 800161a:	7993      	ldrb	r3, [r2, #6]
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0xFF;
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 8001624:	22ff      	movs	r2, #255	; 0xff
 8001626:	715a      	strb	r2, [r3, #5]
        button_press_idle = 0;
 8001628:	4b20      	ldr	r3, [pc, #128]	; (80016ac <_Z10StartGetBTPv+0x308>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e007      	b.n	8001640 <_Z10StartGetBTPv+0x29c>
      } else {
        gameHID.ps4ButtonsTag.button_circle = 0;
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001632:	7993      	ldrb	r3, [r2, #6]
 8001634:	f36f 13c7 	bfc	r3, #7, #1
 8001638:	7193      	strb	r3, [r2, #6]
        xboxHID.B = 0;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]
      }

      if (PS4.getButtonPress(CROSS)) {
 8001640:	210e      	movs	r1, #14
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <_Z10StartGetBTPv+0x2ec>)
 8001644:	f010 fa80 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d030      	beq.n	80016b0 <_Z10StartGetBTPv+0x30c>
        gameHID.ps4ButtonsTag.button_cross = 1;
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <_Z10StartGetBTPv+0x2d4>)
 8001650:	7993      	ldrb	r3, [r2, #6]
 8001652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001656:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0xFF;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <_Z10StartGetBTPv+0x2d8>)
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	711a      	strb	r2, [r3, #4]
        button_press_idle = 0;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_Z10StartGetBTPv+0x308>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e02c      	b.n	80016c0 <_Z10StartGetBTPv+0x31c>
 8001666:	bf00      	nop
 8001668:	200003d0 	.word	0x200003d0
 800166c:	08013b68 	.word	0x08013b68
 8001670:	200003bc 	.word	0x200003bc
 8001674:	08013b7c 	.word	0x08013b7c
 8001678:	2000068c 	.word	0x2000068c
 800167c:	20000694 	.word	0x20000694
 8001680:	200002c0 	.word	0x200002c0
 8001684:	20000686 	.word	0x20000686
 8001688:	200005a4 	.word	0x200005a4
 800168c:	2000066e 	.word	0x2000066e
 8001690:	2000061c 	.word	0x2000061c
 8001694:	2000066f 	.word	0x2000066f
 8001698:	20000670 	.word	0x20000670
 800169c:	20000671 	.word	0x20000671
 80016a0:	20000672 	.word	0x20000672
 80016a4:	20000684 	.word	0x20000684
 80016a8:	2000066d 	.word	0x2000066d
 80016ac:	200006ac 	.word	0x200006ac
      } else {
        gameHID.ps4ButtonsTag.button_cross = 0;
 80016b0:	4aac      	ldr	r2, [pc, #688]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80016b2:	7993      	ldrb	r3, [r2, #6]
 80016b4:	f36f 1386 	bfc	r3, #6, #1
 80016b8:	7193      	strb	r3, [r2, #6]
        xboxHID.A = 0;
 80016ba:	4bab      	ldr	r3, [pc, #684]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	711a      	strb	r2, [r3, #4]
      }

      if (PS4.getButtonPress(SQUARE)) {
 80016c0:	210f      	movs	r1, #15
 80016c2:	48aa      	ldr	r0, [pc, #680]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80016c4:	f010 fa40 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <_Z10StartGetBTPv+0x342>
        gameHID.ps4ButtonsTag.button_square = 1;
 80016ce:	4aa5      	ldr	r2, [pc, #660]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80016d0:	79d3      	ldrb	r3, [r2, #7]
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0xFF;
 80016d8:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80016da:	22ff      	movs	r2, #255	; 0xff
 80016dc:	719a      	strb	r2, [r3, #6]
        button_press_idle = 0;
 80016de:	4ba4      	ldr	r3, [pc, #656]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <_Z10StartGetBTPv+0x352>
      } else {
        gameHID.ps4ButtonsTag.button_square = 0;
 80016e6:	4a9f      	ldr	r2, [pc, #636]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80016e8:	79d3      	ldrb	r3, [r2, #7]
 80016ea:	f36f 0341 	bfc	r3, #1, #1
 80016ee:	71d3      	strb	r3, [r2, #7]
        xboxHID.X = 0;
 80016f0:	4b9d      	ldr	r3, [pc, #628]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	719a      	strb	r2, [r3, #6]
      }

      if (PS4.getButtonPress(UP)) {
 80016f6:	2100      	movs	r1, #0
 80016f8:	489c      	ldr	r0, [pc, #624]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80016fa:	f010 fa25 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00c      	beq.n	800171e <_Z10StartGetBTPv+0x37a>
        gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8001704:	4a97      	ldr	r2, [pc, #604]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001706:	79d3      	ldrb	r3, [r2, #7]
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DUP;
 800170e:	4b96      	ldr	r3, [pc, #600]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001710:	789b      	ldrb	r3, [r3, #2]
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b93      	ldr	r3, [pc, #588]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800171a:	709a      	strb	r2, [r3, #2]
 800171c:	e00b      	b.n	8001736 <_Z10StartGetBTPv+0x392>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_up = 0;
 800171e:	4a91      	ldr	r2, [pc, #580]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001720:	79d3      	ldrb	r3, [r2, #7]
 8001722:	f36f 0382 	bfc	r3, #2, #1
 8001726:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DUP;
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800172a:	789b      	ldrb	r3, [r3, #2]
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b8d      	ldr	r3, [pc, #564]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001734:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(RIGHT)) {
 8001736:	2101      	movs	r1, #1
 8001738:	488c      	ldr	r0, [pc, #560]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 800173a:	f010 fa05 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00c      	beq.n	800175e <_Z10StartGetBTPv+0x3ba>
        gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8001744:	4a87      	ldr	r2, [pc, #540]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001746:	79d3      	ldrb	r3, [r2, #7]
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DRIGHT;
 800174e:	4b86      	ldr	r3, [pc, #536]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001750:	789b      	ldrb	r3, [r3, #2]
 8001752:	f043 0308 	orr.w	r3, r3, #8
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b83      	ldr	r3, [pc, #524]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800175a:	709a      	strb	r2, [r3, #2]
 800175c:	e00b      	b.n	8001776 <_Z10StartGetBTPv+0x3d2>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_right = 0;
 800175e:	4a81      	ldr	r2, [pc, #516]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001760:	79d3      	ldrb	r3, [r2, #7]
 8001762:	f36f 03c3 	bfc	r3, #3, #1
 8001766:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DRIGHT;
 8001768:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800176a:	789b      	ldrb	r3, [r3, #2]
 800176c:	f023 0308 	bic.w	r3, r3, #8
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b7d      	ldr	r3, [pc, #500]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001774:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(DOWN)) {
 8001776:	2102      	movs	r1, #2
 8001778:	487c      	ldr	r0, [pc, #496]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 800177a:	f010 f9e5 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00c      	beq.n	800179e <_Z10StartGetBTPv+0x3fa>
        gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001786:	79d3      	ldrb	r3, [r2, #7]
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DDOWN;
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800179a:	709a      	strb	r2, [r3, #2]
 800179c:	e00b      	b.n	80017b6 <_Z10StartGetBTPv+0x412>
      } else {
        gameHID.ps4ButtonsTag.button_dpad_down = 0;
 800179e:	4a71      	ldr	r2, [pc, #452]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80017a0:	79d3      	ldrb	r3, [r2, #7]
 80017a2:	f36f 1345 	bfc	r3, #5, #1
 80017a6:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DDOWN;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	f023 0302 	bic.w	r3, r3, #2
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017b4:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(LEFT)) {
 80017b6:	2103      	movs	r1, #3
 80017b8:	486c      	ldr	r0, [pc, #432]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80017ba:	f010 f9c5 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00c      	beq.n	80017de <_Z10StartGetBTPv+0x43a>
        gameHID.ps4ButtonsTag.button_dpad_left = 1;
 80017c4:	4a67      	ldr	r2, [pc, #412]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80017c6:	79d3      	ldrb	r3, [r2, #7]
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_DLEFT;
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b63      	ldr	r3, [pc, #396]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017da:	709a      	strb	r2, [r3, #2]
 80017dc:	e00b      	b.n	80017f6 <_Z10StartGetBTPv+0x452>

      } else {
        gameHID.ps4ButtonsTag.button_dpad_left = 0;
 80017de:	4a61      	ldr	r2, [pc, #388]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80017e0:	79d3      	ldrb	r3, [r2, #7]
 80017e2:	f36f 1304 	bfc	r3, #4, #1
 80017e6:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_DLEFT;
 80017e8:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80017f4:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(L1)) {
 80017f6:	210a      	movs	r1, #10
 80017f8:	485c      	ldr	r0, [pc, #368]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80017fa:	f010 f9a5 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00b      	beq.n	800181c <_Z10StartGetBTPv+0x478>
        gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001806:	7993      	ldrb	r3, [r2, #6]
 8001808:	f043 0320 	orr.w	r3, r3, #32
 800180c:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0xFF;
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001810:	22ff      	movs	r2, #255	; 0xff
 8001812:	725a      	strb	r2, [r3, #9]
        button_press_idle = 0;
 8001814:	4b56      	ldr	r3, [pc, #344]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	e007      	b.n	800182c <_Z10StartGetBTPv+0x488>

      } else {
        gameHID.ps4ButtonsTag.button_left_trigger = 0;
 800181c:	4a51      	ldr	r2, [pc, #324]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800181e:	7993      	ldrb	r3, [r2, #6]
 8001820:	f36f 1345 	bfc	r3, #5, #1
 8001824:	7193      	strb	r3, [r2, #6]
        xboxHID.WHITE = 0;
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001828:	2200      	movs	r2, #0
 800182a:	725a      	strb	r2, [r3, #9]
      }

      if (PS4.getButtonPress(L3)) {
 800182c:	2106      	movs	r1, #6
 800182e:	484f      	ldr	r0, [pc, #316]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 8001830:	f010 f98a 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00f      	beq.n	800185a <_Z10StartGetBTPv+0x4b6>
        gameHID.ps4ButtonsTag.button_left_thumb = 1;
 800183a:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800183c:	79d3      	ldrb	r3, [r2, #7]
 800183e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001842:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_LS_BTN;
 8001844:	4b48      	ldr	r3, [pc, #288]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001846:	789b      	ldrb	r3, [r3, #2]
 8001848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001850:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e00b      	b.n	8001872 <_Z10StartGetBTPv+0x4ce>
      } else {
        gameHID.ps4ButtonsTag.button_left_thumb = 0;
 800185a:	4a42      	ldr	r2, [pc, #264]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800185c:	79d3      	ldrb	r3, [r2, #7]
 800185e:	f36f 1386 	bfc	r3, #6, #1
 8001862:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_LS_BTN;
 8001864:	4b40      	ldr	r3, [pc, #256]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001870:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(R1)) {
 8001872:	210b      	movs	r1, #11
 8001874:	483d      	ldr	r0, [pc, #244]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 8001876:	f010 f967 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <_Z10StartGetBTPv+0x4f4>
        gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001882:	7993      	ldrb	r3, [r2, #6]
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0xFF;
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	721a      	strb	r2, [r3, #8]
        button_press_idle = 0;
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e007      	b.n	80018a8 <_Z10StartGetBTPv+0x504>
      } else {
        gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800189a:	7993      	ldrb	r3, [r2, #6]
 800189c:	f36f 1304 	bfc	r3, #4, #1
 80018a0:	7193      	strb	r3, [r2, #6]
        xboxHID.BLACK = 0;
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	721a      	strb	r2, [r3, #8]
      }

      if (PS4.getButtonPress(R3)) {
 80018a8:	2107      	movs	r1, #7
 80018aa:	4830      	ldr	r0, [pc, #192]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80018ac:	f010 f94c 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00f      	beq.n	80018d6 <_Z10StartGetBTPv+0x532>
        gameHID.ps4ButtonsTag.button_right_thumb = 1;
 80018b6:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80018b8:	79d3      	ldrb	r3, [r2, #7]
 80018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018be:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons |= XBOX_RS_BTN;
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018cc:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e00b      	b.n	80018ee <_Z10StartGetBTPv+0x54a>
      } else {
        gameHID.ps4ButtonsTag.button_right_thumb = 0;
 80018d6:	4a23      	ldr	r2, [pc, #140]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80018d8:	79d3      	ldrb	r3, [r2, #7]
 80018da:	f36f 13c7 	bfc	r3, #7, #1
 80018de:	71d3      	strb	r3, [r2, #7]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_RS_BTN;
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018e2:	789b      	ldrb	r3, [r3, #2]
 80018e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 80018ec:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(SHARE)) {
 80018ee:	2104      	movs	r1, #4
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 80018f2:	f010 f929 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00f      	beq.n	800191c <_Z10StartGetBTPv+0x578>
        gameHID.ps4ButtonsTag.button_share = 1;
 80018fc:	4a19      	ldr	r2, [pc, #100]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 80018fe:	7993      	ldrb	r3, [r2, #6]
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_BACK_BTN;
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001908:	789b      	ldrb	r3, [r3, #2]
 800190a:	f043 0320 	orr.w	r3, r3, #32
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001912:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00b      	b.n	8001934 <_Z10StartGetBTPv+0x590>
      } else {
        gameHID.ps4ButtonsTag.button_share = 0;
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 800191e:	7993      	ldrb	r3, [r2, #6]
 8001920:	f36f 03c3 	bfc	r3, #3, #1
 8001924:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_BACK_BTN;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001928:	789b      	ldrb	r3, [r3, #2]
 800192a:	f023 0320 	bic.w	r3, r3, #32
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001932:	709a      	strb	r2, [r3, #2]
      }

      if (PS4.getButtonPress(OPTIONS)) {
 8001934:	2105      	movs	r1, #5
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <_Z10StartGetBTPv+0x5c8>)
 8001938:	f010 f906 	bl	8011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d018      	beq.n	8001974 <_Z10StartGetBTPv+0x5d0>
        gameHID.ps4ButtonsTag.button_start = 1;
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <_Z10StartGetBTPv+0x5c0>)
 8001944:	7993      	ldrb	r3, [r2, #6]
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons |= XBOX_START_BTN;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 800194e:	789b      	ldrb	r3, [r3, #2]
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <_Z10StartGetBTPv+0x5c4>)
 8001958:	709a      	strb	r2, [r3, #2]
        button_press_idle = 0;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <_Z10StartGetBTPv+0x5cc>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e014      	b.n	800198c <_Z10StartGetBTPv+0x5e8>
 8001962:	bf00      	nop
 8001964:	2000068c 	.word	0x2000068c
 8001968:	20000694 	.word	0x20000694
 800196c:	2000061c 	.word	0x2000061c
 8001970:	200006ac 	.word	0x200006ac
      } else {
        gameHID.ps4ButtonsTag.button_start = 0;
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <_Z10StartGetBTPv+0x6c0>)
 8001976:	7993      	ldrb	r3, [r2, #6]
 8001978:	f36f 0382 	bfc	r3, #2, #1
 800197c:	7193      	strb	r3, [r2, #6]
        xboxHID.dButtons = xboxHID.dButtons & ~XBOX_START_BTN;
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <_Z10StartGetBTPv+0x6c4>)
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	f023 0310 	bic.w	r3, r3, #16
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <_Z10StartGetBTPv+0x6c4>)
 800198a:	709a      	strb	r2, [r3, #2]
      }

      /*We don't want to spam the PS4 controller with rumble updates
       * If we do not do this, latency increases greatly */
      new_rumble_val_L = rx_buf[3];
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <_Z10StartGetBTPv+0x6c8>)
 800198e:	78da      	ldrb	r2, [r3, #3]
 8001990:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 8001992:	701a      	strb	r2, [r3, #0]
      new_rumble_val_R = rx_buf[5];
 8001994:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <_Z10StartGetBTPv+0x6c8>)
 8001996:	795a      	ldrb	r2, [r3, #5]
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 800199a:	701a      	strb	r2, [r3, #0]

      if (new_rumble_val_L != old_rumble_val_L || new_rumble_val_R != old_rumble_val_R) {
 800199c:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <_Z10StartGetBTPv+0x6d4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d105      	bne.n	80019b4 <_Z10StartGetBTPv+0x610>
 80019a8:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <_Z10StartGetBTPv+0x6d8>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d00f      	beq.n	80019d4 <_Z10StartGetBTPv+0x630>
        PS4.setRumbleOn(new_rumble_val_L, new_rumble_val_R);
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <_Z10StartGetBTPv+0x6dc>)
 80019c0:	f7ff f843 	bl	8000a4a <_ZN9PS4Parser11setRumbleOnEhh>
        old_rumble_val_L = new_rumble_val_L;
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <_Z10StartGetBTPv+0x6cc>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <_Z10StartGetBTPv+0x6d4>)
 80019ca:	701a      	strb	r2, [r3, #0]
        old_rumble_val_R = new_rumble_val_R;
 80019cc:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <_Z10StartGetBTPv+0x6d0>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <_Z10StartGetBTPv+0x6d8>)
 80019d2:	701a      	strb	r2, [r3, #0]
      }
      /* After roughly 5+minutes of idle time, disconnect controller
       * Not the best solution since the rate the counter increases is based on BT Latency */
      if (button_press_idle > 400000) {
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <_Z10StartGetBTPv+0x6e4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d90b      	bls.n	80019f6 <_Z10StartGetBTPv+0x652>
        PS4.disconnect();
 80019de:	482b      	ldr	r0, [pc, #172]	; (8001a8c <_Z10StartGetBTPv+0x6e8>)
 80019e0:	f00f f893 	bl	8010b0a <_ZN5BTHID10disconnectEv>
        rumble_once = 0;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <_Z10StartGetBTPv+0x6ec>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
        button_press_idle = 0;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
        display_run_once = 0;
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <_Z10StartGetBTPv+0x6f0>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
      }
      button_press_idle++;
 80019f6:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <_Z10StartGetBTPv+0x6e0>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e021      	b.n	8001a46 <_Z10StartGetBTPv+0x6a2>

    } else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4824      	ldr	r0, [pc, #144]	; (8001a98 <_Z10StartGetBTPv+0x6f4>)
 8001a08:	f001 fa36 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf0c      	ite	eq
 8001a12:	2301      	moveq	r3, #1
 8001a14:	2300      	movne	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <_Z10StartGetBTPv+0x69c>
      if (!buttonPressed) {
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <_Z10StartGetBTPv+0x6f8>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <_Z10StartGetBTPv+0x694>
        Serial.print(F("\r\nButton Pressed"));
 8001a2a:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <_Z10StartGetBTPv+0x6fc>)
 8001a2c:	481d      	ldr	r0, [pc, #116]	; (8001aa4 <_Z10StartGetBTPv+0x700>)
 8001a2e:	f7fe fdb5 	bl	800059c <_ZN5Print5printEPK19__FlashStringHelper>
        PS4.pair(); // Start paring routine if user button was just pressed
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <_Z10StartGetBTPv+0x6e8>)
 8001a34:	f7fe ff9f 	bl	8000976 <_ZN5BTHID4pairEv>
      }
      buttonPressed = true;
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <_Z10StartGetBTPv+0x6f8>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e002      	b.n	8001a46 <_Z10StartGetBTPv+0x6a2>
    } else
      buttonPressed = false;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <_Z10StartGetBTPv+0x6f8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
#if rtos_delay_view
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getBT;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <_Z10StartGetBTPv+0x704>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <_Z10StartGetBTPv+0x708>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_Z10StartGetBTPv+0x708>)
 8001a58:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(1);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f008 fd5c 	bl	800a518 <osDelay>
    timer_val_getBT = __HAL_TIM_GET_COUNTER(&htim14);
 8001a60:	e4fd      	b.n	800145e <_Z10StartGetBTPv+0xba>
 8001a62:	bf00      	nop
 8001a64:	2000068c 	.word	0x2000068c
 8001a68:	20000694 	.word	0x20000694
 8001a6c:	200001c8 	.word	0x200001c8
 8001a70:	200006aa 	.word	0x200006aa
 8001a74:	200006ab 	.word	0x200006ab
 8001a78:	200006a8 	.word	0x200006a8
 8001a7c:	200006a9 	.word	0x200006a9
 8001a80:	2000061c 	.word	0x2000061c
 8001a84:	200006ac 	.word	0x200006ac
 8001a88:	00061a80 	.word	0x00061a80
 8001a8c:	200005a4 	.word	0x200005a4
 8001a90:	2000066d 	.word	0x2000066d
 8001a94:	20000684 	.word	0x20000684
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	2000066c 	.word	0x2000066c
 8001aa0:	08013b9c 	.word	0x08013b9c
 8001aa4:	200003bc 	.word	0x200003bc
 8001aa8:	200002c0 	.word	0x200002c0
 8001aac:	20000686 	.word	0x20000686

08001ab0 <_Z12StartSendUSBPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendUSB */
void StartSendUSB(void *argument)
    {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendUSB */
  MX_USB_DEVICE_Init();
 8001ab8:	f00b f9a0 	bl	800cdfc <MX_USB_DEVICE_Init>
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
#endif

#if OG_XBOX_SETUP
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <_Z12StartSendUSBPv+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <_Z12StartSendUSBPv+0x44>)
 8001ac6:	801a      	strh	r2, [r3, #0]
#endif
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &xboxHID, sizeof(struct xboxHID_t));
 8001ac8:	2214      	movs	r2, #20
 8001aca:	490b      	ldr	r1, [pc, #44]	; (8001af8 <_Z12StartSendUSBPv+0x48>)
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <_Z12StartSendUSBPv+0x4c>)
 8001ace:	f007 f9bf 	bl	8008e50 <USBD_HID_SendReport>
#if rtos_delay_view
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_getUSB;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_Z12StartSendUSBPv+0x40>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <_Z12StartSendUSBPv+0x44>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <_Z12StartSendUSBPv+0x44>)
 8001ae4:	801a      	strh	r2, [r3, #0]
#endif
#endif
    osDelay(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f008 fd16 	bl	800a518 <osDelay>
    timer_val_getUSB = __HAL_TIM_GET_COUNTER(&htim14);
 8001aec:	e7e6      	b.n	8001abc <_Z12StartSendUSBPv+0xc>
 8001aee:	bf00      	nop
 8001af0:	200002c0 	.word	0x200002c0
 8001af4:	20000688 	.word	0x20000688
 8001af8:	20000694 	.word	0x20000694
 8001afc:	2000548c 	.word	0x2000548c

08001b00 <_Z19StartControllerJoinPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControllerJoin */
void StartControllerJoin(void *argument)
    {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerJoin */
  /* Infinite loop */
  for (;;)
      {
    if (PS4.connected() && !rumble_once) {
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <_Z19StartControllerJoinPv+0x4c>)
 8001b0a:	f7ff f817 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <_Z19StartControllerJoinPv+0x20>
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <_Z19StartControllerJoinPv+0x50>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <_Z19StartControllerJoinPv+0x20>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <_Z19StartControllerJoinPv+0x22>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <_Z19StartControllerJoinPv+0x42>
      PS4.setRumbleOn(RumbleLow);
 8001b26:	2120      	movs	r1, #32
 8001b28:	480a      	ldr	r0, [pc, #40]	; (8001b54 <_Z19StartControllerJoinPv+0x54>)
 8001b2a:	f7fe ff76 	bl	8000a1a <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
      osDelay(500);
 8001b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b32:	f008 fcf1 	bl	800a518 <osDelay>
      PS4.setRumbleOff();
 8001b36:	4807      	ldr	r0, [pc, #28]	; (8001b54 <_Z19StartControllerJoinPv+0x54>)
 8001b38:	f7fe ff62 	bl	8000a00 <_ZN9PS4Parser12setRumbleOffEv>
      rumble_once = 1;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <_Z19StartControllerJoinPv+0x50>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
    }
    osDelay(300);
 8001b42:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b46:	f008 fce7 	bl	800a518 <osDelay>
    if (PS4.connected() && !rumble_once) {
 8001b4a:	e7dd      	b.n	8001b08 <_Z19StartControllerJoinPv+0x8>
 8001b4c:	200005a4 	.word	0x200005a4
 8001b50:	2000066d 	.word	0x2000066d
 8001b54:	2000061c 	.word	0x2000061c

08001b58 <_Z16StartButtonPressPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartButtonPress */
void StartButtonPress(void *argument)
    {
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonPress */
  /* Infinite loop */
  for (;;)
      {
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b64:	481e      	ldr	r0, [pc, #120]	; (8001be0 <_Z16StartButtonPressPv+0x88>)
 8001b66:	f001 f987 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001b70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <_Z16StartButtonPressPv+0x8c>)
 8001b76:	f001 f97f 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	005b      	lsls	r3, r3, #1
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	4323      	orrs	r3, r4
 8001b82:	b25c      	sxtb	r4, r3
        (HAL_GPIO_ReadPin(FORWARD_BTN_GPIO) << 0);
 8001b84:	2110      	movs	r1, #16
 8001b86:	4817      	ldr	r0, [pc, #92]	; (8001be4 <_Z16StartButtonPressPv+0x8c>)
 8001b88:	f001 f976 	bl	8002e78 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b25b      	sxtb	r3, r3
        (HAL_GPIO_ReadPin(SELECT_BTN_GPIO) << 1) |
 8001b90:	4323      	orrs	r3, r4
 8001b92:	b25b      	sxtb	r3, r3
 8001b94:	b2da      	uxtb	r2, r3
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <_Z16StartButtonPressPv+0x90>)
 8001b98:	701a      	strb	r2, [r3, #0]

    if (BUTTON_PRESSED) {
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_Z16StartButtonPressPv+0x90>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b07      	cmp	r3, #7
 8001ba0:	d014      	beq.n	8001bcc <_Z16StartButtonPressPv+0x74>
      if (buttonDebounced == 1) {  // you only get here if the same button combination has been pressed for 100mS
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <_Z16StartButtonPressPv+0x94>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10c      	bne.n	8001bc4 <_Z16StartButtonPressPv+0x6c>
        if (buttonProcessed == 0) { // here's where we do the real work on the keyboard, and ensure we only do it once/keypress
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_Z16StartButtonPressPv+0x98>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d112      	bne.n	8001bd8 <_Z16StartButtonPressPv+0x80>
          buttonProcessed = 1;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <_Z16StartButtonPressPv+0x98>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
          ProcessKeyCodeInContext(keyCode);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <_Z16StartButtonPressPv+0x90>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fb37 	bl	8001230 <_Z23ProcessKeyCodeInContexth>
 8001bc2:	e009      	b.n	8001bd8 <_Z16StartButtonPressPv+0x80>
        }
      } else {
        buttonDebounced = true;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <_Z16StartButtonPressPv+0x94>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
 8001bca:	e005      	b.n	8001bd8 <_Z16StartButtonPressPv+0x80>
      }
    } else {
      buttonDebounced = false;
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_Z16StartButtonPressPv+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
      buttonProcessed = false;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_Z16StartButtonPressPv+0x98>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
    }
//  	Serial.print("\r\n");
//  	Serial.print(keyCode);
    osDelay(100);
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	f008 fc9d 	bl	800a518 <osDelay>
    keyCode = (HAL_GPIO_ReadPin(BACK_BTN_GPIO) << 2) |
 8001bde:	e7bf      	b.n	8001b60 <_Z16StartButtonPressPv+0x8>
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020400 	.word	0x40020400
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000681 	.word	0x20000681
 8001bf0:	20000682 	.word	0x20000682

08001bf4 <_Z14StartUpdateLCDPv>:
 * @brief Function implementing the updateLCD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUpdateLCD */
void StartUpdateLCD(void *argument) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateLCD */
  /* Infinite loop */
  //ssd1306_TestAll();
  ssd1306_Fill(Black_);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fced 	bl	80025dc <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8001c02:	f000 fd0f 	bl	8002624 <ssd1306_UpdateScreen>
  for (;;) {
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14);
 8001c06:	4b7a      	ldr	r3, [pc, #488]	; (8001df0 <_Z14StartUpdateLCDPv+0x1fc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <_Z14StartUpdateLCDPv+0x200>)
 8001c10:	801a      	strh	r2, [r3, #0]
#endif
    if (display_run_once == 0) {
 8001c12:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 80db 	bne.w	8001dd2 <_Z14StartUpdateLCDPv+0x1de>
      ssd1306_Fill(Black_);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f000 fcdd 	bl	80025dc <ssd1306_Fill>
      ssd1306_UpdateScreen();
 8001c22:	f000 fcff 	bl	8002624 <ssd1306_UpdateScreen>
      switch (display_no) {
 8001c26:	4b75      	ldr	r3, [pc, #468]	; (8001dfc <_Z14StartUpdateLCDPv+0x208>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	f000 80a0 	beq.w	8001d70 <_Z14StartUpdateLCDPv+0x17c>
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	f300 80ce 	bgt.w	8001dd2 <_Z14StartUpdateLCDPv+0x1de>
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <_Z14StartUpdateLCDPv+0x4e>
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f000 8082 	beq.w	8001d44 <_Z14StartUpdateLCDPv+0x150>
 8001c40:	e0c7      	b.n	8001dd2 <_Z14StartUpdateLCDPv+0x1de>
        case 0: {
          uint8_t alternate_print = 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
          if (!PS4.connected()) {
 8001c46:	486e      	ldr	r0, [pc, #440]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001c48:	f7fe ff78 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d017      	beq.n	8001c88 <_Z14StartUpdateLCDPv+0x94>
            ssd1306_SetCursor((128 - 11 * 3) / 2, 0);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	202f      	movs	r0, #47	; 0x2f
 8001c5c:	f000 fe18 	bl	8002890 <ssd1306_SetCursor>
            ssd1306_WriteString("Not", Font_11x18, White_);
 8001c60:	4a68      	ldr	r2, [pc, #416]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001c62:	2301      	movs	r3, #1
 8001c64:	ca06      	ldmia	r2, {r1, r2}
 8001c66:	4868      	ldr	r0, [pc, #416]	; (8001e08 <_Z14StartUpdateLCDPv+0x214>)
 8001c68:	f000 fdec 	bl	8002844 <ssd1306_WriteString>
            display_force_update = 0;
 8001c6c:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001c72:	211a      	movs	r1, #26
 8001c74:	200e      	movs	r0, #14
 8001c76:	f000 fe0b 	bl	8002890 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001c7a:	4a62      	ldr	r2, [pc, #392]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	ca06      	ldmia	r2, {r1, r2}
 8001c80:	4863      	ldr	r0, [pc, #396]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001c82:	f000 fddf 	bl	8002844 <ssd1306_WriteString>
 8001c86:	e017      	b.n	8001cb8 <_Z14StartUpdateLCDPv+0xc4>
          } else if (PS4.connected()) {
 8001c88:	485d      	ldr	r0, [pc, #372]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001c8a:	f7fe ff57 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d011      	beq.n	8001cb8 <_Z14StartUpdateLCDPv+0xc4>
            ssd1306_SetCursor((128 - 11 * 9) / 2, 26);
 8001c94:	211a      	movs	r1, #26
 8001c96:	200e      	movs	r0, #14
 8001c98:	f000 fdfa 	bl	8002890 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected", Font_11x18, White_);
 8001c9c:	4a59      	ldr	r2, [pc, #356]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	ca06      	ldmia	r2, {r1, r2}
 8001ca2:	485b      	ldr	r0, [pc, #364]	; (8001e10 <_Z14StartUpdateLCDPv+0x21c>)
 8001ca4:	f000 fdce 	bl	8002844 <ssd1306_WriteString>
            alternate_print = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
            display_run_once = 1;
 8001cac:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
            display_force_update = 0;
 8001cb2:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
          }
          ssd1306_UpdateScreen();
 8001cb8:	f000 fcb4 	bl	8002624 <ssd1306_UpdateScreen>

          while (!PS4.connected() && display_force_update == 0) {
 8001cbc:	4850      	ldr	r0, [pc, #320]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001cbe:	f7fe ff3d 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <_Z14StartUpdateLCDPv+0xe6>
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <_Z14StartUpdateLCDPv+0xe6>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <_Z14StartUpdateLCDPv+0xe8>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <_Z14StartUpdateLCDPv+0xf4>
            osDelay(100);
 8001ce0:	2064      	movs	r0, #100	; 0x64
 8001ce2:	f008 fc19 	bl	800a518 <osDelay>
          while (!PS4.connected() && display_force_update == 0) {
 8001ce6:	e7e9      	b.n	8001cbc <_Z14StartUpdateLCDPv+0xc8>
          }
          /* If the user presses a Button, interrupt and show next screen */
          if (display_force_update == 1) {
 8001ce8:	4b48      	ldr	r3, [pc, #288]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <_Z14StartUpdateLCDPv+0x10a>
            display_force_update = 0;
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
            display_run_once = 0;
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
            break;
 8001cfc:	e069      	b.n	8001dd2 <_Z14StartUpdateLCDPv+0x1de>
          }
          /* When the controller is finally paired, update current screen
           * Only runs if the first PS4.connected() above does not run*/
          if (PS4.connected() && alternate_print) {
 8001cfe:	4840      	ldr	r0, [pc, #256]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001d00:	f7fe ff1c 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <_Z14StartUpdateLCDPv+0x120>
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <_Z14StartUpdateLCDPv+0x120>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <_Z14StartUpdateLCDPv+0x122>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d05a      	beq.n	8001dd0 <_Z14StartUpdateLCDPv+0x1dc>
            ssd1306_Fill(Black_);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 fc5e 	bl	80025dc <ssd1306_Fill>
            ssd1306_UpdateScreen();
 8001d20:	f000 fc80 	bl	8002624 <ssd1306_UpdateScreen>
            //				    ssd1306_SetCursor(25,0);
            //				    ssd1306_WriteString("Status:", Font_11x18, White_);
            ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
 8001d24:	211a      	movs	r1, #26
 8001d26:	2009      	movs	r0, #9
 8001d28:	f000 fdb2 	bl	8002890 <ssd1306_SetCursor>
            ssd1306_WriteString("Connected!", Font_11x18, White_);
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001d2e:	2301      	movs	r3, #1
 8001d30:	ca06      	ldmia	r2, {r1, r2}
 8001d32:	4838      	ldr	r0, [pc, #224]	; (8001e14 <_Z14StartUpdateLCDPv+0x220>)
 8001d34:	f000 fd86 	bl	8002844 <ssd1306_WriteString>
            ssd1306_UpdateScreen();
 8001d38:	f000 fc74 	bl	8002624 <ssd1306_UpdateScreen>
            display_run_once = 1;
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
          }
          break;
 8001d42:	e045      	b.n	8001dd0 <_Z14StartUpdateLCDPv+0x1dc>
        }

        case 1:
          display_run_once = 1;
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 fc43 	bl	80025dc <ssd1306_Fill>
          ssd1306_SetCursor((128 - 11 * 5) / 2, 0);
 8001d56:	2100      	movs	r1, #0
 8001d58:	2024      	movs	r0, #36	; 0x24
 8001d5a:	f000 fd99 	bl	8002890 <ssd1306_SetCursor>
          ssd1306_WriteString("Pair?", Font_11x18, White_);
 8001d5e:	4a29      	ldr	r2, [pc, #164]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001d60:	2301      	movs	r3, #1
 8001d62:	ca06      	ldmia	r2, {r1, r2}
 8001d64:	482c      	ldr	r0, [pc, #176]	; (8001e18 <_Z14StartUpdateLCDPv+0x224>)
 8001d66:	f000 fd6d 	bl	8002844 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001d6a:	f000 fc5b 	bl	8002624 <ssd1306_UpdateScreen>
          break;
 8001d6e:	e030      	b.n	8001dd2 <_Z14StartUpdateLCDPv+0x1de>

        case 7:
          display_run_once = 1;
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
          display_force_update = 0;
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <_Z14StartUpdateLCDPv+0x218>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
          ssd1306_Fill(Black_);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 fc2d 	bl	80025dc <ssd1306_Fill>
          ssd1306_UpdateScreen();
 8001d82:	f000 fc4f 	bl	8002624 <ssd1306_UpdateScreen>
          ssd1306_SetCursor((128 - 11 * 10) / 2, 0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2009      	movs	r0, #9
 8001d8a:	f000 fd81 	bl	8002890 <ssd1306_SetCursor>
          ssd1306_WriteString("Pairing...", Font_11x18, White_);
 8001d8e:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <_Z14StartUpdateLCDPv+0x210>)
 8001d90:	2301      	movs	r3, #1
 8001d92:	ca06      	ldmia	r2, {r1, r2}
 8001d94:	4821      	ldr	r0, [pc, #132]	; (8001e1c <_Z14StartUpdateLCDPv+0x228>)
 8001d96:	f000 fd55 	bl	8002844 <ssd1306_WriteString>
          ssd1306_UpdateScreen();
 8001d9a:	f000 fc43 	bl	8002624 <ssd1306_UpdateScreen>
          PS4.pair();
 8001d9e:	4818      	ldr	r0, [pc, #96]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001da0:	f7fe fde9 	bl	8000976 <_ZN5BTHID4pairEv>
          while (PS4.connected() == 0) {
 8001da4:	4816      	ldr	r0, [pc, #88]	; (8001e00 <_Z14StartUpdateLCDPv+0x20c>)
 8001da6:	f7fe fec9 	bl	8000b3c <_ZN5PS4BT9connectedEv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <_Z14StartUpdateLCDPv+0x1ce>
            osDelay(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f008 fbac 	bl	800a518 <osDelay>
          while (PS4.connected() == 0) {
 8001dc0:	e7f0      	b.n	8001da4 <_Z14StartUpdateLCDPv+0x1b0>
          }

          display_no = 0;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <_Z14StartUpdateLCDPv+0x208>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
          display_run_once = 0;
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <_Z14StartUpdateLCDPv+0x204>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]

          //ssd1306_SetCursor((128 - 11 * 10) / 2, 26);
          //ssd1306_WriteString("Paired!", Font_11x18, White_);
          //ssd1306_UpdateScreen();
          break;
 8001dce:	e000      	b.n	8001dd2 <_Z14StartUpdateLCDPv+0x1de>
          break;
 8001dd0:	bf00      	nop
      }
    }
#if rtos_delay_view
    timer_val_LCD = __HAL_TIM_GET_COUNTER(&htim14) - timer_val_LCD;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_Z14StartUpdateLCDPv+0x1fc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <_Z14StartUpdateLCDPv+0x200>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <_Z14StartUpdateLCDPv+0x200>)
 8001de4:	801a      	strh	r2, [r3, #0]
#endif
    osDelay(100);
 8001de6:	2064      	movs	r0, #100	; 0x64
 8001de8:	f008 fb96 	bl	800a518 <osDelay>
  }
 8001dec:	e70b      	b.n	8001c06 <_Z14StartUpdateLCDPv+0x12>
 8001dee:	bf00      	nop
 8001df0:	200002c0 	.word	0x200002c0
 8001df4:	2000068a 	.word	0x2000068a
 8001df8:	20000684 	.word	0x20000684
 8001dfc:	20000680 	.word	0x20000680
 8001e00:	200005a4 	.word	0x200005a4
 8001e04:	20000008 	.word	0x20000008
 8001e08:	08013bb0 	.word	0x08013bb0
 8001e0c:	20000683 	.word	0x20000683
 8001e10:	08013bb4 	.word	0x08013bb4
 8001e14:	08013bc0 	.word	0x08013bc0
 8001e18:	08013bcc 	.word	0x08013bcc
 8001e1c:	08013bd4 	.word	0x08013bd4

08001e20 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END StartUpdateLCD */
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d101      	bne.n	8001e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e32:	f000 fd67 	bl	8002904 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40001c00 	.word	0x40001c00

08001e44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
    {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  Serial.print("\r\nSomething went wrong!");
 8001e48:	4903      	ldr	r1, [pc, #12]	; (8001e58 <Error_Handler+0x14>)
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <Error_Handler+0x18>)
 8001e4c:	f7fe fbb4 	bl	80005b8 <_ZN5Print5printEPKc>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <Error_Handler+0x10>
 8001e56:	bf00      	nop
 8001e58:	08013be0 	.word	0x08013be0
 8001e5c:	200003bc 	.word	0x200003bc

08001e60 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 8001e68:	f7fe fd58 	bl	800091c <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001e6c:	f7fe fd3e 	bl	80008ec <_ZN3P103SetEv>
        spi::init();
 8001e70:	f000 f845 	bl	8001efe <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 8001e74:	f7fe fd24 	bl	80008c0 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 8001e78:	2218      	movs	r2, #24
 8001e7a:	2188      	movs	r1, #136	; 0x88
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f845 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f864 	bl	8001f50 <_ZN8MAX3421eI3P102P9E5resetEv>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	e02b      	b.n	8001ef6 <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001e9e:	22c1      	movs	r2, #193	; 0xc1
 8001ea0:	21d8      	movs	r1, #216	; 0xd8
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f832 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 8001ea8:	2260      	movs	r2, #96	; 0x60
 8001eaa:	21d0      	movs	r1, #208	; 0xd0
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f82d 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	21e8      	movs	r1, #232	; 0xe8
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f828 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001ebc:	21e8      	movs	r1, #232	; 0xe8
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f876 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d000      	beq.n	8001eda <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 8001ed8:	e7f0      	b.n	8001ebc <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f88a 	bl	8001ff4 <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	21c8      	movs	r1, #200	; 0xc8
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f811 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 8001eea:	2201      	movs	r2, #1
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f80c 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
        }
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 8001f1c:	f7fe fcf2 	bl	8000904 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 8001f2a:	78bb      	ldrb	r3, [r7, #2]
 8001f2c:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 8001f2e:	f107 010c 	add.w	r1, r7, #12
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	2202      	movs	r2, #2
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 8001f3a:	f003 ff30 	bl	8005d9e <HAL_SPI_Transmit>
        SPI_SS::Set();
 8001f3e:	f7fe fcd5 	bl	80008ec <_ZN3P103SetEv>
        return;
 8001f42:	bf00      	nop
};
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000320 	.word	0x20000320

08001f50 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2178      	movs	r1, #120	; 0x78
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ffd3 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2178      	movs	r1, #120	; 0x78
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffce 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001f70:	89fb      	ldrh	r3, [r7, #14]
 8001f72:	3301      	adds	r3, #1
 8001f74:	81fb      	strh	r3, [r7, #14]
 8001f76:	89fb      	ldrh	r3, [r7, #14]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf14      	ite	ne
 8001f7c:	2301      	movne	r3, #1
 8001f7e:	2300      	moveq	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00f      	beq.n	8001fa6 <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 8001f86:	2168      	movs	r1, #104	; 0x68
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f811 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d100      	bne.n	8001fa4 <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 8001fa2:	e7e5      	b.n	8001f70 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 8001fa4:	bf00      	nop
        return ( i);
 8001fa6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001fbc:	f7fe fca2 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001fc0:	1cf9      	adds	r1, r7, #3
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001fca:	f003 fee8 	bl	8005d9e <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 8001fd2:	f107 010f 	add.w	r1, r7, #15
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001fde:	f004 f81a 	bl	8006016 <HAL_SPI_Receive>
        SPI_SS::Set();
 8001fe2:	f7fe fc83 	bl	80008ec <_ZN3P103SetEv>
        return (rv);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000320 	.word	0x20000320

08001ff4 <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 8001ffc:	21f8      	movs	r1, #248	; 0xf8
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffd6 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800200e:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2bc0      	cmp	r3, #192	; 0xc0
 8002014:	d04a      	beq.n	80020ac <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 8002016:	2bc0      	cmp	r3, #192	; 0xc0
 8002018:	dc55      	bgt.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 800201a:	2b80      	cmp	r3, #128	; 0x80
 800201c:	d006      	beq.n	800202c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	dc51      	bgt.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 8002022:	2b00      	cmp	r3, #0
 8002024:	d046      	beq.n	80020b4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 8002026:	2b40      	cmp	r3, #64	; 0x40
 8002028:	d020      	beq.n	800206c <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 800202a:	e04c      	b.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800202c:	21d8      	movs	r1, #216	; 0xd8
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffbe 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002034:	4603      	mov	r3, r0
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8002048:	22c9      	movs	r2, #201	; 0xc9
 800204a:	21d8      	movs	r1, #216	; 0xd8
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff5d 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002054:	2202      	movs	r2, #2
 8002056:	701a      	strb	r2, [r3, #0]
                        break;
 8002058:	e035      	b.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 800205a:	22cb      	movs	r2, #203	; 0xcb
 800205c:	21d8      	movs	r1, #216	; 0xd8
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff54 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002066:	2203      	movs	r2, #3
 8002068:	701a      	strb	r2, [r3, #0]
                        break;
 800206a:	e02c      	b.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 800206c:	21d8      	movs	r1, #216	; 0xd8
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff9e 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8002074:	4603      	mov	r3, r0
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8002088:	22cb      	movs	r2, #203	; 0xcb
 800208a:	21d8      	movs	r1, #216	; 0xd8
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff3d 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8002094:	2203      	movs	r2, #3
 8002096:	701a      	strb	r2, [r3, #0]
                        break;
 8002098:	e015      	b.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 800209a:	22c9      	movs	r2, #201	; 0xc9
 800209c:	21d8      	movs	r1, #216	; 0xd8
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff34 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	701a      	strb	r2, [r3, #0]
                        break;
 80020aa:	e00c      	b.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
                        break;
 80020b2:	e008      	b.n	80020c6 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 80020b4:	22d1      	movs	r2, #209	; 0xd1
 80020b6:	21d8      	movs	r1, #216	; 0xd8
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff27 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
                        break;
 80020c4:	bf00      	nop
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200006b0 	.word	0x200006b0

080020d4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d115      	bne.n	8002110 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d110      	bne.n	8002110 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80020ee:	490a      	ldr	r1, [pc, #40]	; (8002118 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80020f2:	f7fe fbcf 	bl	8000894 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80020f6:	480a      	ldr	r0, [pc, #40]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020f8:	f00f ff1a 	bl	8011f30 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80020fc:	4908      	ldr	r1, [pc, #32]	; (8002120 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80020fe:	4809      	ldr	r0, [pc, #36]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002100:	f00b fd1a 	bl	800db38 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002106:	2200      	movs	r2, #0
 8002108:	4906      	ldr	r1, [pc, #24]	; (8002124 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800210c:	f7fe fcee 	bl	8000aec <_ZN5PS4BTC1EP3BTDbPKc>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000027c 	.word	0x2000027c
 800211c:	200003bc 	.word	0x200003bc
 8002120:	200003d0 	.word	0x200003d0
 8002124:	2000048c 	.word	0x2000048c
 8002128:	08013bf8 	.word	0x08013bf8
 800212c:	200005a4 	.word	0x200005a4

08002130 <_GLOBAL__sub_I_rx_buf>:
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
 8002134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff ffcb 	bl	80020d4 <_Z41__static_initialization_and_destruction_0ii>
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_MspInit+0x54>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_MspInit+0x54>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_MspInit+0x54>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_MspInit+0x54>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_MspInit+0x54>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_MspInit+0x54>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	210f      	movs	r1, #15
 8002182:	f06f 0001 	mvn.w	r0, #1
 8002186:	f000 fcb9 	bl	8002afc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_I2C_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12c      	bne.n	8002214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021dc:	2312      	movs	r3, #18
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e8:	2304      	movs	r3, #4
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	480c      	ldr	r0, [pc, #48]	; (8002224 <HAL_I2C_MspInit+0x8c>)
 80021f4:	f000 fcac 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_I2C_MspInit+0x88>)
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_I2C_MspInit+0x88>)
 8002202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002206:	6413      	str	r3, [r2, #64]	; 0x40
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_I2C_MspInit+0x88>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3728      	adds	r7, #40	; 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40005400 	.word	0x40005400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_SPI_MspInit+0x84>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12b      	bne.n	80022a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 8002254:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002282:	23e0      	movs	r3, #224	; 0xe0
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002292:	2305      	movs	r3, #5
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800229e:	f000 fc57 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40013000 	.word	0x40013000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000

080022b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_TIM_Base_MspInit+0x48>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d115      	bne.n	80022f6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_TIM_Base_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2105      	movs	r1, #5
 80022ea:	202d      	movs	r0, #45	; 0x2d
 80022ec:	f000 fc06 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80022f0:	202d      	movs	r0, #45	; 0x2d
 80022f2:	f000 fc1f 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40002000 	.word	0x40002000
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_UART_MspInit+0x84>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d12b      	bne.n	8002382 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0x88>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0x88>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <HAL_UART_MspInit+0x88>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002362:	230c      	movs	r3, #12
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002372:	2307      	movs	r3, #7
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_UART_MspInit+0x8c>)
 800237e:	f000 fbe7 	bl	8002b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40004400 	.word	0x40004400
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000

08002398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	202c      	movs	r0, #44	; 0x2c
 80023ae:	f000 fba5 	bl	8002afc <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80023b2:	202c      	movs	r0, #44	; 0x2c
 80023b4:	f000 fbbe 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_InitTick+0xa4>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_InitTick+0xa4>)
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_InitTick+0xa4>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023d4:	f107 0210 	add.w	r2, r7, #16
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fca8 	bl	8004d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80023e4:	f002 fc7e 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 80023e8:	4603      	mov	r3, r0
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_InitTick+0xa8>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	3b01      	subs	r3, #1
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_InitTick+0xac>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_InitTick+0xb0>)
 8002400:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_InitTick+0xac>)
 8002404:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002408:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800240a:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <HAL_InitTick+0xac>)
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_InitTick+0xac>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_InitTick+0xac>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <HAL_InitTick+0xac>)
 800241e:	f004 f9dd 	bl	80067dc <HAL_TIM_Base_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8002428:	4806      	ldr	r0, [pc, #24]	; (8002444 <HAL_InitTick+0xac>)
 800242a:	f004 fa27 	bl	800687c <HAL_TIM_Base_Start_IT>
 800242e:	4603      	mov	r3, r0
 8002430:	e000      	b.n	8002434 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	431bde83 	.word	0x431bde83
 8002444:	20005400 	.word	0x20005400
 8002448:	40001c00 	.word	0x40001c00

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler+0x4>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <BusFault_Handler+0x4>

08002464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler+0x4>

0800246a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800247e:	f004 fa6d 	bl	800695c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20005400 	.word	0x20005400

0800248c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002492:	f004 fa63 	bl	800695c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200002c0 	.word	0x200002c0

080024a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <OTG_FS_IRQHandler+0x10>)
 80024a6:	f001 facb 	bl	8003a40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000595c 	.word	0x2000595c

080024b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_kill>:

int _kill(int pid, int sig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ce:	f011 fa19 	bl	8013904 <__errno>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2216      	movs	r2, #22
 80024d6:	601a      	str	r2, [r3, #0]
	return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_exit>:

void _exit (int status)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ffe7 	bl	80024c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f6:	e7fe      	b.n	80024f6 <_exit+0x12>

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <SystemInit+0x28>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <SystemInit+0x28>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SystemInit+0x28>)
 800250e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002512:	609a      	str	r2, [r3, #8]
#endif
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800255c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002528:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800252a:	e003      	b.n	8002534 <LoopCopyDataInit>

0800252c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800252e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002530:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002532:	3104      	adds	r1, #4

08002534 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002538:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800253a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800253c:	d3f6      	bcc.n	800252c <CopyDataInit>
  ldr  r2, =_sbss
 800253e:	4a0b      	ldr	r2, [pc, #44]	; (800256c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002540:	e002      	b.n	8002548 <LoopFillZerobss>

08002542 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002542:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002544:	f842 3b04 	str.w	r3, [r2], #4

08002548 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800254a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800254c:	d3f9      	bcc.n	8002542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800254e:	f7ff ffd3 	bl	80024f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002552:	f011 f9dd 	bl	8013910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002556:	f7fe fb9d 	bl	8000c94 <main>
  bx  lr    
 800255a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800255c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002560:	08014d3c 	.word	0x08014d3c
  ldr  r0, =_sdata
 8002564:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002568:	20000184 	.word	0x20000184
  ldr  r2, =_sbss
 800256c:	20000184 	.word	0x20000184
  ldr  r3, = _ebss
 8002570:	20005d68 	.word	0x20005d68

08002574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002574:	e7fe      	b.n	8002574 <ADC_IRQHandler>
	...

08002578 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af04      	add	r7, sp, #16
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	2301      	movs	r3, #1
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2301      	movs	r3, #1
 8002592:	2200      	movs	r2, #0
 8002594:	2178      	movs	r1, #120	; 0x78
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <ssd1306_WriteCommand+0x2c>)
 8002598:	f000 fde4 	bl	8003164 <HAL_I2C_Mem_Write>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200001d0 	.word	0x200001d0

080025a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ba:	9202      	str	r2, [sp, #8]
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2301      	movs	r3, #1
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	2178      	movs	r1, #120	; 0x78
 80025c8:	4803      	ldr	r0, [pc, #12]	; (80025d8 <ssd1306_WriteData+0x30>)
 80025ca:	f000 fdcb 	bl	8003164 <HAL_I2C_Mem_Write>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200001d0 	.word	0x200001d0

080025dc <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e00d      	b.n	8002608 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black_) ? 0x00 : 0xFF;
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <ssd1306_Fill+0x1a>
 80025f2:	2100      	movs	r1, #0
 80025f4:	e000      	b.n	80025f8 <ssd1306_Fill+0x1c>
 80025f6:	21ff      	movs	r1, #255	; 0xff
 80025f8:	4a09      	ldr	r2, [pc, #36]	; (8002620 <ssd1306_Fill+0x44>)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	460a      	mov	r2, r1
 8002600:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3301      	adds	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260e:	d3ed      	bcc.n	80025ec <ssd1306_Fill+0x10>
    }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	200006b4 	.word	0x200006b4

08002624 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800262a:	2300      	movs	r3, #0
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	e016      	b.n	800265e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	3b50      	subs	r3, #80	; 0x50
 8002634:	b2db      	uxtb	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff9e 	bl	8002578 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7ff ff9b 	bl	8002578 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8002642:	2010      	movs	r0, #16
 8002644:	f7ff ff98 	bl	8002578 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	4a08      	ldr	r2, [pc, #32]	; (8002670 <ssd1306_UpdateScreen+0x4c>)
 800264e:	4413      	add	r3, r2
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ffa8 	bl	80025a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	3301      	adds	r3, #1
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b07      	cmp	r3, #7
 8002662:	d9e5      	bls.n	8002630 <ssd1306_UpdateScreen+0xc>
    }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200006b4 	.word	0x200006b4

08002674 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	460b      	mov	r3, r1
 8002680:	71bb      	strb	r3, [r7, #6]
 8002682:	4613      	mov	r3, r2
 8002684:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db48      	blt.n	8002720 <ssd1306_DrawPixel+0xac>
 800268e:	79bb      	ldrb	r3, [r7, #6]
 8002690:	2b3f      	cmp	r3, #63	; 0x3f
 8002692:	d845      	bhi.n	8002720 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <ssd1306_DrawPixel+0xb8>)
 8002696:	791b      	ldrb	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 800269c:	797b      	ldrb	r3, [r7, #5]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White_) {
 80026aa:	797b      	ldrb	r3, [r7, #5]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d11a      	bne.n	80026e6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	08db      	lsrs	r3, r3, #3
 80026b6:	b2d8      	uxtb	r0, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	4413      	add	r3, r2
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <ssd1306_DrawPixel+0xbc>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	79bb      	ldrb	r3, [r7, #6]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	b25b      	sxtb	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b259      	sxtb	r1, r3
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	4603      	mov	r3, r0
 80026da:	01db      	lsls	r3, r3, #7
 80026dc:	4413      	add	r3, r2
 80026de:	b2c9      	uxtb	r1, r1
 80026e0:	4a13      	ldr	r2, [pc, #76]	; (8002730 <ssd1306_DrawPixel+0xbc>)
 80026e2:	54d1      	strb	r1, [r2, r3]
 80026e4:	e01d      	b.n	8002722 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	79bb      	ldrb	r3, [r7, #6]
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	b2d8      	uxtb	r0, r3
 80026ee:	4603      	mov	r3, r0
 80026f0:	01db      	lsls	r3, r3, #7
 80026f2:	4413      	add	r3, r2
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <ssd1306_DrawPixel+0xbc>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	b25a      	sxtb	r2, r3
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	b25b      	sxtb	r3, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	b25b      	sxtb	r3, r3
 800270c:	4013      	ands	r3, r2
 800270e:	b259      	sxtb	r1, r3
 8002710:	79fa      	ldrb	r2, [r7, #7]
 8002712:	4603      	mov	r3, r0
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	4413      	add	r3, r2
 8002718:	b2c9      	uxtb	r1, r1
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <ssd1306_DrawPixel+0xbc>)
 800271c:	54d1      	strb	r1, [r2, r3]
 800271e:	e000      	b.n	8002722 <ssd1306_DrawPixel+0xae>
        return;
 8002720:	bf00      	nop
    }
}
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000ab4 	.word	0x20000ab4
 8002730:	200006b4 	.word	0x200006b4

08002734 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	4604      	mov	r4, r0
 800273c:	1d38      	adds	r0, r7, #4
 800273e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002742:	461a      	mov	r2, r3
 8002744:	4623      	mov	r3, r4
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	4613      	mov	r3, r2
 800274a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b1f      	cmp	r3, #31
 8002750:	d902      	bls.n	8002758 <ssd1306_WriteChar+0x24>
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b7e      	cmp	r3, #126	; 0x7e
 8002756:	d901      	bls.n	800275c <ssd1306_WriteChar+0x28>
        return 0;
 8002758:	2300      	movs	r3, #0
 800275a:	e06d      	b.n	8002838 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800275c:	4b38      	ldr	r3, [pc, #224]	; (8002840 <ssd1306_WriteChar+0x10c>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	793b      	ldrb	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	dc06      	bgt.n	8002778 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800276a:	4b35      	ldr	r3, [pc, #212]	; (8002840 <ssd1306_WriteChar+0x10c>)
 800276c:	885b      	ldrh	r3, [r3, #2]
 800276e:	461a      	mov	r2, r3
 8002770:	797b      	ldrb	r3, [r7, #5]
 8002772:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	dd01      	ble.n	800277c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002778:	2300      	movs	r3, #0
 800277a:	e05d      	b.n	8002838 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	e04c      	b.n	800281c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3b20      	subs	r3, #32
 8002788:	7979      	ldrb	r1, [r7, #5]
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	4619      	mov	r1, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	440b      	add	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e034      	b.n	800280c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d012      	beq.n	80027d8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80027b2:	4b23      	ldr	r3, [pc, #140]	; (8002840 <ssd1306_WriteChar+0x10c>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b2d8      	uxtb	r0, r3
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <ssd1306_WriteChar+0x10c>)
 80027c2:	885b      	ldrh	r3, [r3, #2]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	7bba      	ldrb	r2, [r7, #14]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7ff ff4f 	bl	8002674 <ssd1306_DrawPixel>
 80027d6:	e016      	b.n	8002806 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <ssd1306_WriteChar+0x10c>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	b2d8      	uxtb	r0, r3
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <ssd1306_WriteChar+0x10c>)
 80027e8:	885b      	ldrh	r3, [r3, #2]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b2d9      	uxtb	r1, r3
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf0c      	ite	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	2300      	movne	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	461a      	mov	r2, r3
 8002802:	f7ff ff37 	bl	8002674 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	3301      	adds	r3, #1
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	793b      	ldrb	r3, [r7, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	4293      	cmp	r3, r2
 8002814:	d3c5      	bcc.n	80027a2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	797b      	ldrb	r3, [r7, #5]
 800281e:	461a      	mov	r2, r3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4293      	cmp	r3, r2
 8002824:	d3ad      	bcc.n	8002782 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <ssd1306_WriteChar+0x10c>)
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	793b      	ldrb	r3, [r7, #4]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4413      	add	r3, r2
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b03      	ldr	r3, [pc, #12]	; (8002840 <ssd1306_WriteChar+0x10c>)
 8002834:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3724      	adds	r7, #36	; 0x24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	20000ab4 	.word	0x20000ab4

08002844 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	1d38      	adds	r0, r7, #4
 800284e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002852:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002854:	e012      	b.n	800287c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	7818      	ldrb	r0, [r3, #0]
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	1d3a      	adds	r2, r7, #4
 800285e:	ca06      	ldmia	r2, {r1, r2}
 8002860:	f7ff ff68 	bl	8002734 <ssd1306_WriteChar>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d002      	beq.n	8002876 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	e008      	b.n	8002888 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e8      	bne.n	8002856 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	460a      	mov	r2, r1
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	4613      	mov	r3, r2
 800289e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <ssd1306_SetCursor+0x2c>)
 80028a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80028a8:	79bb      	ldrb	r3, [r7, #6]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <ssd1306_SetCursor+0x2c>)
 80028ae:	805a      	strh	r2, [r3, #2]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	20000ab4 	.word	0x20000ab4

080028c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <HAL_Init+0x40>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_Init+0x40>)
 80028d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <HAL_Init+0x40>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f000 f8fc 	bl	8002ae6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7ff fd52 	bl	8002398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f4:	f7ff fc24 	bl	8002140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000014 	.word	0x20000014
 8002928:	20005448 	.word	0x20005448

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20005448 	.word	0x20005448

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000014 	.word	0x20000014

0800298c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a8:	4013      	ands	r3, r2
 80029aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <__NVIC_SetPriorityGrouping+0x44>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <__NVIC_GetPriorityGrouping+0x18>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0307 	and.w	r3, r3, #7
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	db0b      	blt.n	8002a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <__NVIC_EnableIRQ+0x38>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2001      	movs	r0, #1
 8002a12:	fa00 f202 	lsl.w	r2, r0, r2
 8002a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	; (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	; (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ff4c 	bl	800298c <__NVIC_SetPriorityGrouping>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0e:	f7ff ff61 	bl	80029d4 <__NVIC_GetPriorityGrouping>
 8002b12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	6978      	ldr	r0, [r7, #20]
 8002b1a:	f7ff ffb1 	bl	8002a80 <NVIC_EncodePriority>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff80 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff54 	bl	80029f0 <__NVIC_EnableIRQ>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e165      	b.n	8002e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 8154 	bne.w	8002e32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80ae 	beq.w	8002e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a5c      	ldr	r2, [pc, #368]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b5a      	ldr	r3, [pc, #360]	; (8002e50 <HAL_GPIO_Init+0x300>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a58      	ldr	r2, [pc, #352]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4f      	ldr	r2, [pc, #316]	; (8002e58 <HAL_GPIO_Init+0x308>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d025      	beq.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4e      	ldr	r2, [pc, #312]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d01f      	beq.n	8002d66 <HAL_GPIO_Init+0x216>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4d      	ldr	r2, [pc, #308]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d019      	beq.n	8002d62 <HAL_GPIO_Init+0x212>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4c      	ldr	r2, [pc, #304]	; (8002e64 <HAL_GPIO_Init+0x314>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4b      	ldr	r2, [pc, #300]	; (8002e68 <HAL_GPIO_Init+0x318>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00d      	beq.n	8002d5a <HAL_GPIO_Init+0x20a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4a      	ldr	r2, [pc, #296]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_GPIO_Init+0x206>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a49      	ldr	r2, [pc, #292]	; (8002e70 <HAL_GPIO_Init+0x320>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d101      	bne.n	8002d52 <HAL_GPIO_Init+0x202>
 8002d4e:	2306      	movs	r3, #6
 8002d50:	e00c      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e00a      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d56:	2305      	movs	r3, #5
 8002d58:	e008      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	e006      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e004      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e002      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_Init+0x21c>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f002 0203 	and.w	r2, r2, #3
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	4093      	lsls	r3, r2
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d7c:	4935      	ldr	r1, [pc, #212]	; (8002e54 <HAL_GPIO_Init+0x304>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	3302      	adds	r3, #2
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dd8:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dde:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e02:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e2c:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	f67f ae96 	bls.w	8002b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e40:	bf00      	nop
 8002e42:	bf00      	nop
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40013800 	.word	0x40013800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	887b      	ldrh	r3, [r7, #2]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	e001      	b.n	8002e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec4:	e003      	b.n	8002ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	041a      	lsls	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e12b      	b.n	8003146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff f948 	bl	8002198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	; 0x24
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f40:	f001 fed0 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8002f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a81      	ldr	r2, [pc, #516]	; (8003150 <HAL_I2C_Init+0x274>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d807      	bhi.n	8002f60 <HAL_I2C_Init+0x84>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a80      	ldr	r2, [pc, #512]	; (8003154 <HAL_I2C_Init+0x278>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	e006      	b.n	8002f6e <HAL_I2C_Init+0x92>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a7d      	ldr	r2, [pc, #500]	; (8003158 <HAL_I2C_Init+0x27c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf94      	ite	ls
 8002f68:	2301      	movls	r3, #1
 8002f6a:	2300      	movhi	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0e7      	b.n	8003146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a78      	ldr	r2, [pc, #480]	; (800315c <HAL_I2C_Init+0x280>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9b      	lsrs	r3, r3, #18
 8002f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a6a      	ldr	r2, [pc, #424]	; (8003150 <HAL_I2C_Init+0x274>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d802      	bhi.n	8002fb0 <HAL_I2C_Init+0xd4>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3301      	adds	r3, #1
 8002fae:	e009      	b.n	8002fc4 <HAL_I2C_Init+0xe8>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	4a69      	ldr	r2, [pc, #420]	; (8003160 <HAL_I2C_Init+0x284>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	495c      	ldr	r1, [pc, #368]	; (8003150 <HAL_I2C_Init+0x274>)
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d819      	bhi.n	8003018 <HAL_I2C_Init+0x13c>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e59      	subs	r1, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_I2C_Init+0x138>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1e59      	subs	r1, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fbb1 f3f3 	udiv	r3, r1, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003012:	e051      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003014:	2304      	movs	r3, #4
 8003016:	e04f      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d111      	bne.n	8003044 <HAL_I2C_Init+0x168>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e012      	b.n	800306a <HAL_I2C_Init+0x18e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Init+0x196>
 800306e:	2301      	movs	r3, #1
 8003070:	e022      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <HAL_I2C_Init+0x1bc>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e58      	subs	r0, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	440b      	add	r3, r1
 8003088:	fbb0 f3f3 	udiv	r3, r0, r3
 800308c:	3301      	adds	r3, #1
 800308e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003096:	e00f      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e58      	subs	r0, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	0099      	lsls	r1, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	6809      	ldr	r1, [r1, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6911      	ldr	r1, [r2, #16]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	000186a0 	.word	0x000186a0
 8003154:	001e847f 	.word	0x001e847f
 8003158:	003d08ff 	.word	0x003d08ff
 800315c:	431bde83 	.word	0x431bde83
 8003160:	10624dd3 	.word	0x10624dd3

08003164 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	4608      	mov	r0, r1
 800316e:	4611      	mov	r1, r2
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	460b      	mov	r3, r1
 8003178:	813b      	strh	r3, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800317e:	f7ff fbd5 	bl	800292c <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b20      	cmp	r3, #32
 800318e:	f040 80d9 	bne.w	8003344 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2319      	movs	r3, #25
 8003198:	2201      	movs	r2, #1
 800319a:	496d      	ldr	r1, [pc, #436]	; (8003350 <HAL_I2C_Mem_Write+0x1ec>)
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f971 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
 80031aa:	e0cc      	b.n	8003346 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_I2C_Mem_Write+0x56>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e0c5      	b.n	8003346 <HAL_I2C_Mem_Write+0x1e2>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d007      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2221      	movs	r2, #33	; 0x21
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a4d      	ldr	r2, [pc, #308]	; (8003354 <HAL_I2C_Mem_Write+0x1f0>)
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003222:	88f8      	ldrh	r0, [r7, #6]
 8003224:	893a      	ldrh	r2, [r7, #8]
 8003226:	8979      	ldrh	r1, [r7, #10]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4603      	mov	r3, r0
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f890 	bl	8003358 <I2C_RequestMemoryWrite>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d052      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e081      	b.n	8003346 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f9f2 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b04      	cmp	r3, #4
 8003258:	d107      	bne.n	800326a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e06b      	b.n	8003346 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d11b      	bne.n	80032e4 <HAL_I2C_Mem_Write+0x180>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d017      	beq.n	80032e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1aa      	bne.n	8003242 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f9de 	bl	80036b2 <I2C_WaitOnBTFFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	2b04      	cmp	r3, #4
 8003302:	d107      	bne.n	8003314 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003312:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e016      	b.n	8003346 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	e000      	b.n	8003346 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003344:	2302      	movs	r3, #2
  }
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	00100002 	.word	0x00100002
 8003354:	ffff0000 	.word	0xffff0000

08003358 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	4608      	mov	r0, r1
 8003362:	4611      	mov	r1, r2
 8003364:	461a      	mov	r2, r3
 8003366:	4603      	mov	r3, r0
 8003368:	817b      	strh	r3, [r7, #10]
 800336a:	460b      	mov	r3, r1
 800336c:	813b      	strh	r3, [r7, #8]
 800336e:	4613      	mov	r3, r2
 8003370:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003380:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	2200      	movs	r2, #0
 800338a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f878 	bl	8003484 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a8:	d103      	bne.n	80033b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e05f      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	6a3a      	ldr	r2, [r7, #32]
 80033ca:	492d      	ldr	r1, [pc, #180]	; (8003480 <I2C_RequestMemoryWrite+0x128>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f8b0 	bl	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e04c      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f91a 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b04      	cmp	r3, #4
 8003408:	d107      	bne.n	800341a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e02b      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003424:	893b      	ldrh	r3, [r7, #8]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	e021      	b.n	8003474 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	b29b      	uxth	r3, r3
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	6a39      	ldr	r1, [r7, #32]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f8f4 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e005      	b.n	8003476 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346a:	893b      	ldrh	r3, [r7, #8]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	00010002 	.word	0x00010002

08003484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	e025      	b.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d021      	beq.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7ff fa45 	bl	800292c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d116      	bne.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e023      	b.n	800352a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d10d      	bne.n	8003508 <I2C_WaitOnFlagUntilTimeout+0x84>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4013      	ands	r3, r2
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	e00c      	b.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	bf0c      	ite	eq
 800351a:	2301      	moveq	r3, #1
 800351c:	2300      	movne	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	461a      	mov	r2, r3
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	429a      	cmp	r2, r3
 8003526:	d0b6      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003540:	e051      	b.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003550:	d123      	bne.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e046      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d021      	beq.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f9c3 	bl	800292c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d116      	bne.n	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f043 0220 	orr.w	r2, r3, #32
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e020      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10c      	bne.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e00b      	b.n	8003622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d18d      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800363c:	e02d      	b.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f878 	bl	8003734 <I2C_IsAcknowledgeFailed>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02d      	b.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d021      	beq.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7ff f969 	bl	800292c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d1ca      	bne.n	800363e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036be:	e02d      	b.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f837 	bl	8003734 <I2C_IsAcknowledgeFailed>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e02d      	b.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d021      	beq.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7ff f928 	bl	800292c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e007      	b.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d1ca      	bne.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d11b      	bne.n	8003784 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003754:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f043 0204 	orr.w	r2, r3, #4
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003794:	b08f      	sub	sp, #60	; 0x3c
 8003796:	af0a      	add	r7, sp, #40	; 0x28
 8003798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e116      	b.n	80039d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f009 fc5c 	bl	800d07c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 ff47 	bl	8007676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	687e      	ldr	r6, [r7, #4]
 80037f0:	466d      	mov	r5, sp
 80037f2:	f106 0410 	add.w	r4, r6, #16
 80037f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003802:	e885 0003 	stmia.w	r5, {r0, r1}
 8003806:	1d33      	adds	r3, r6, #4
 8003808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f003 fe1e 	bl	800744c <USB_CoreInit>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0d7      	b.n	80039d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f003 ff35 	bl	8007698 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e04a      	b.n	80038ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	333d      	adds	r3, #61	; 0x3d
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	333c      	adds	r3, #60	; 0x3c
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	b298      	uxth	r0, r3
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3342      	adds	r3, #66	; 0x42
 8003870:	4602      	mov	r2, r0
 8003872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	333f      	adds	r3, #63	; 0x3f
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3344      	adds	r3, #68	; 0x44
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3348      	adds	r3, #72	; 0x48
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3350      	adds	r3, #80	; 0x50
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3af      	bcc.n	8003834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e044      	b.n	8003964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3301      	adds	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3b5      	bcc.n	80038da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	687e      	ldr	r6, [r7, #4]
 8003976:	466d      	mov	r5, sp
 8003978:	f106 0410 	add.w	r4, r6, #16
 800397c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800397e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003988:	e885 0003 	stmia.w	r5, {r0, r1}
 800398c:	1d33      	adds	r3, r6, #4
 800398e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003990:	6838      	ldr	r0, [r7, #0]
 8003992:	f003 feab 	bl	80076ec <USB_DevInit>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e014      	b.n	80039d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f001 f879 	bl	8004ab8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fee6 	bl	800879c <USB_DevDisconnect>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_PCD_Start+0x1c>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e020      	b.n	8003a38 <HAL_PCD_Start+0x5e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d109      	bne.n	8003a1a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d005      	beq.n	8003a1a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fe18 	bl	8007654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f004 fe96 	bl	800875a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b08d      	sub	sp, #52	; 0x34
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 ff54 	bl	8008904 <USB_GetMode>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 83ca 	bne.w	80041f8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 feb8 	bl	80087de <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 83c0 	beq.w	80041f6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f004 feaf 	bl	80087de <USB_ReadInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 0202 	and.w	r2, r2, #2
 8003a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f004 fe9d 	bl	80087de <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d161      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0210 	bic.w	r2, r2, #16
 8003abc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 020f 	and.w	r2, r3, #15
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	0c5b      	lsrs	r3, r3, #17
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d124      	bne.n	8003b34 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d035      	beq.n	8003b62 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	6a38      	ldr	r0, [r7, #32]
 8003b0a:	f004 fd03 	bl	8008514 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b1a:	441a      	add	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b2c:	441a      	add	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	619a      	str	r2, [r3, #24]
 8003b32:	e016      	b.n	8003b62 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	0c5b      	lsrs	r3, r3, #17
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d110      	bne.n	8003b62 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b46:	2208      	movs	r2, #8
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6a38      	ldr	r0, [r7, #32]
 8003b4c:	f004 fce2 	bl	8008514 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5c:	441a      	add	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699a      	ldr	r2, [r3, #24]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0210 	orr.w	r2, r2, #16
 8003b70:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fe31 	bl	80087de <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b86:	d16e      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f004 fe37 	bl	8008804 <USB_ReadDevAllOutEpInterrupt>
 8003b96:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b98:	e062      	b.n	8003c60 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d057      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 fe5c 	bl	800886c <USB_ReadDevOutEPInterrupt>
 8003bb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2301      	movs	r3, #1
 8003bd0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fdc5 	bl	8004764 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 febf 	bl	800497c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2310      	movs	r3, #16
 8003c18:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	461a      	mov	r2, r3
 8003c32:	2320      	movs	r3, #32
 8003c34:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c52:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	3301      	adds	r3, #1
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d199      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 fdb7 	bl	80087de <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c7a:	f040 80c0 	bne.w	8003dfe <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f004 fdd8 	bl	8008838 <USB_ReadDevAllInEpInterrupt>
 8003c88:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c8e:	e0b2      	b.n	8003df6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80a7 	beq.w	8003dea <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f004 fdfe 	bl	80088a8 <USB_ReadDevInEPInterrupt>
 8003cac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d057      	beq.n	8003d68 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4013      	ands	r3, r2
 8003cda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2301      	movs	r3, #1
 8003cec:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d132      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3348      	adds	r3, #72	; 0x48
 8003d06:	6819      	ldr	r1, [r3, #0]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3344      	adds	r3, #68	; 0x44
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4419      	add	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4403      	add	r3, r0
 8003d2a:	3348      	adds	r3, #72	; 0x48
 8003d2c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d113      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x31c>
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	3350      	adds	r3, #80	; 0x50
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d54:	461a      	mov	r2, r3
 8003d56:	2101      	movs	r1, #1
 8003d58:	f004 fe06 	bl	8008968 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f009 fa0b 	bl	800d17e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2308      	movs	r3, #8
 8003d82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	461a      	mov	r2, r3
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fc30 	bl	800464a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	3301      	adds	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f47f af49 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f004 fceb 	bl	80087de <USB_ReadInterrupts>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e12:	d122      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d108      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f009 fbdb 	bl	800d5f8 <HAL_PCDEx_LPM_Callback>
 8003e42:	e002      	b.n	8003e4a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f009 fa11 	bl	800d26c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f004 fcbd 	bl	80087de <USB_ReadInterrupts>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6e:	d112      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d102      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f009 f9cd 	bl	800d220 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e94:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 fc9f 	bl	80087de <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eaa:	d121      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003eba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d111      	bne.n	8003eea <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f009 fb88 	bl	800d5f8 <HAL_PCDEx_LPM_Callback>
 8003ee8:	e002      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f009 f998 	bl	800d220 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f004 fc72 	bl	80087de <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	f040 80c7 	bne.w	8004096 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2110      	movs	r1, #16
 8003f22:	4618      	mov	r0, r3
 8003f24:	f003 fd40 	bl	80079a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2c:	e056      	b.n	8003fdc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f60:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f94:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa6:	0151      	lsls	r1, r2, #5
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	440a      	add	r2, r1
 8003fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	69fa      	ldr	r2, [r7, #28]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fd4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	3301      	adds	r3, #1
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d3a3      	bcc.n	8003f2e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ff4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ff8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d016      	beq.n	8004030 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004012:	f043 030b 	orr.w	r3, r3, #11
 8004016:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004028:	f043 030b 	orr.w	r3, r3, #11
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	e015      	b.n	800405c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004042:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004046:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004056:	f043 030b 	orr.w	r3, r3, #11
 800405a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800406e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004080:	461a      	mov	r2, r3
 8004082:	f004 fc71 	bl	8008968 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004094:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fb9f 	bl	80087de <USB_ReadInterrupts>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040aa:	d124      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 fc35 	bl	8008920 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 fcd5 	bl	8007a6a <USB_GetDevSpeed>
 80040c0:	4603      	mov	r3, r0
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681c      	ldr	r4, [r3, #0]
 80040cc:	f000 fdfe 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 80040d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	4620      	mov	r0, r4
 80040dc:	f003 fa18 	bl	8007510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f009 f874 	bl	800d1ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f004 fb6f 	bl	80087de <USB_ReadInterrupts>
 8004100:	4603      	mov	r3, r0
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b08      	cmp	r3, #8
 8004108:	d10a      	bne.n	8004120 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f009 f851 	bl	800d1b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f002 0208 	and.w	r2, r2, #8
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f004 fb5a 	bl	80087de <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004134:	d10f      	bne.n	8004156 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	b2db      	uxtb	r3, r3
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f009 f8b3 	bl	800d2ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f004 fb3f 	bl	80087de <USB_ReadInterrupts>
 8004160:	4603      	mov	r3, r0
 8004162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416a:	d10f      	bne.n	800418c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f009 f886 	bl	800d288 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800418a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f004 fb24 	bl	80087de <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d10a      	bne.n	80041b8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f009 f894 	bl	800d2d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fb0e 	bl	80087de <USB_ReadInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d115      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f009 f884 	bl	800d2ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	e000      	b.n	80041f8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80041f6:	bf00      	nop
    }
  }
}
 80041f8:	3734      	adds	r7, #52	; 0x34
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd90      	pop	{r4, r7, pc}

080041fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_PCD_SetAddress+0x1a>
 8004214:	2302      	movs	r3, #2
 8004216:	e013      	b.n	8004240 <HAL_PCD_SetAddress+0x42>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f004 fa6c 	bl	800870e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	4608      	mov	r0, r1
 8004252:	4611      	mov	r1, r2
 8004254:	461a      	mov	r2, r3
 8004256:	4603      	mov	r3, r0
 8004258:	70fb      	strb	r3, [r7, #3]
 800425a:	460b      	mov	r3, r1
 800425c:	803b      	strh	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	da0f      	bge.n	800428e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	f003 020f 	and.w	r2, r3, #15
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	3338      	adds	r3, #56	; 0x38
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	3304      	adds	r3, #4
 8004284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	705a      	strb	r2, [r3, #1]
 800428c:	e00f      	b.n	80042ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	4413      	add	r3, r2
 80042a4:	3304      	adds	r3, #4
 80042a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042ba:	883a      	ldrh	r2, [r7, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	78ba      	ldrb	r2, [r7, #2]
 80042c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d004      	beq.n	80042d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042d8:	78bb      	ldrb	r3, [r7, #2]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d102      	bne.n	80042e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_PCD_EP_Open+0xaa>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e00e      	b.n	8004310 <HAL_PCD_EP_Open+0xc8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	4618      	mov	r0, r3
 8004302:	f003 fbd7 	bl	8007ab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800430e:	7afb      	ldrb	r3, [r7, #11]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da0f      	bge.n	800434c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	3338      	adds	r3, #56	; 0x38
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	705a      	strb	r2, [r3, #1]
 800434a:	e00f      	b.n	800436c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	f003 020f 	and.w	r2, r3, #15
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	3304      	adds	r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_PCD_EP_Close+0x6e>
 8004382:	2302      	movs	r3, #2
 8004384:	e00e      	b.n	80043a4 <HAL_PCD_EP_Close+0x8c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	4618      	mov	r0, r3
 8004396:	f003 fc15 	bl	8007bc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	460b      	mov	r3, r1
 80043ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	7afb      	ldrb	r3, [r7, #11]
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004408:	7afb      	ldrb	r3, [r7, #11]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	f003 fef0 	bl	8008204 <USB_EP0StartXfer>
 8004424:	e008      	b.n	8004438 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	6979      	ldr	r1, [r7, #20]
 8004434:	f003 fca2 	bl	8007d7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	460b      	mov	r3, r1
 8004450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004452:	7afb      	ldrb	r3, [r7, #11]
 8004454:	f003 020f 	and.w	r2, r3, #15
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	3338      	adds	r3, #56	; 0x38
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2201      	movs	r2, #1
 8004480:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	b2da      	uxtb	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800449c:	7afb      	ldrb	r3, [r7, #11]
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	f003 fea6 	bl	8008204 <USB_EP0StartXfer>
 80044b8:	e008      	b.n	80044cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	6979      	ldr	r1, [r7, #20]
 80044c8:	f003 fc58 	bl	8007d7c <USB_EPStartXfer>
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d901      	bls.n	80044f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e050      	b.n	8004596 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da0f      	bge.n	800451c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	3338      	adds	r3, #56	; 0x38
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	3304      	adds	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	705a      	strb	r2, [r3, #1]
 800451a:	e00d      	b.n	8004538 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	3304      	adds	r3, #4
 8004530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_PCD_EP_SetStall+0x82>
 8004554:	2302      	movs	r3, #2
 8004556:	e01e      	b.n	8004596 <HAL_PCD_EP_SetStall+0xc0>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68f9      	ldr	r1, [r7, #12]
 8004566:	4618      	mov	r0, r3
 8004568:	f003 fffd 	bl	8008566 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	b2d9      	uxtb	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004586:	461a      	mov	r2, r3
 8004588:	f004 f9ee 	bl	8008968 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	460b      	mov	r3, r1
 80045a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	f003 020f 	and.w	r2, r3, #15
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d901      	bls.n	80045bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e042      	b.n	8004642 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da0f      	bge.n	80045e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 020f 	and.w	r2, r3, #15
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	3338      	adds	r3, #56	; 0x38
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4413      	add	r3, r2
 80045d8:	3304      	adds	r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	705a      	strb	r2, [r3, #1]
 80045e2:	e00f      	b.n	8004604 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	3304      	adds	r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_PCD_EP_ClrStall+0x86>
 8004620:	2302      	movs	r3, #2
 8004622:	e00e      	b.n	8004642 <HAL_PCD_EP_ClrStall+0xa4>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68f9      	ldr	r1, [r7, #12]
 8004632:	4618      	mov	r0, r3
 8004634:	f004 f805 	bl	8008642 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b08a      	sub	sp, #40	; 0x28
 800464e:	af02      	add	r7, sp, #8
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	3338      	adds	r3, #56	; 0x38
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	3304      	adds	r3, #4
 8004670:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	429a      	cmp	r2, r3
 800467c:	d901      	bls.n	8004682 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06c      	b.n	800475c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	695a      	ldr	r2, [r3, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	429a      	cmp	r2, r3
 8004696:	d902      	bls.n	800469e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3303      	adds	r3, #3
 80046a2:	089b      	lsrs	r3, r3, #2
 80046a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046a6:	e02b      	b.n	8004700 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d902      	bls.n	80046c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3303      	adds	r3, #3
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	4603      	mov	r3, r0
 80046e2:	6978      	ldr	r0, [r7, #20]
 80046e4:	f003 fee1 	bl	80084aa <USB_WritePacket>

    ep->xfer_buff  += len;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	441a      	add	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	441a      	add	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	b29b      	uxth	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	429a      	cmp	r2, r3
 8004714:	d809      	bhi.n	800472a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800471e:	429a      	cmp	r2, r3
 8004720:	d203      	bcs.n	800472a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1be      	bne.n	80046a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	429a      	cmp	r2, r3
 8004734:	d811      	bhi.n	800475a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	2201      	movs	r2, #1
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	43db      	mvns	r3, r3
 8004750:	6939      	ldr	r1, [r7, #16]
 8004752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004756:	4013      	ands	r3, r2
 8004758:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	333c      	adds	r3, #60	; 0x3c
 800477c:	3304      	adds	r3, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b01      	cmp	r3, #1
 8004798:	f040 80a0 	bne.w	80048dc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a72      	ldr	r2, [pc, #456]	; (8004974 <PCD_EP_OutXfrComplete_int+0x210>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f240 80dd 	bls.w	800496a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80d7 	beq.w	800496a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	461a      	mov	r2, r3
 80047ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ce:	6093      	str	r3, [r2, #8]
 80047d0:	e0cb      	b.n	800496a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d009      	beq.n	80047f0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	2320      	movs	r3, #32
 80047ec:	6093      	str	r3, [r2, #8]
 80047ee:	e0bc      	b.n	800496a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 80b7 	bne.w	800496a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a5d      	ldr	r2, [pc, #372]	; (8004974 <PCD_EP_OutXfrComplete_int+0x210>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d90f      	bls.n	8004824 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	461a      	mov	r2, r3
 800481c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004820:	6093      	str	r3, [r2, #8]
 8004822:	e0a2      	b.n	800496a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004836:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	0159      	lsls	r1, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	440b      	add	r3, r1
 8004840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800484a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4403      	add	r3, r0
 800485a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800485e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004872:	6819      	ldr	r1, [r3, #0]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4403      	add	r3, r0
 8004882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4419      	add	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4403      	add	r3, r0
 8004898:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800489c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d114      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x16a>
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048c6:	461a      	mov	r2, r3
 80048c8:	2101      	movs	r1, #1
 80048ca:	f004 f84d 	bl	8008968 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f008 fc37 	bl	800d148 <HAL_PCD_DataOutStageCallback>
 80048da:	e046      	b.n	800496a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a26      	ldr	r2, [pc, #152]	; (8004978 <PCD_EP_OutXfrComplete_int+0x214>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d124      	bne.n	800492e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	461a      	mov	r2, r3
 80048fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004900:	6093      	str	r3, [r2, #8]
 8004902:	e032      	b.n	800496a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	2320      	movs	r3, #32
 800491e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f008 fc0e 	bl	800d148 <HAL_PCD_DataOutStageCallback>
 800492c:	e01d      	b.n	800496a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d114      	bne.n	800495e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004956:	461a      	mov	r2, r3
 8004958:	2100      	movs	r1, #0
 800495a:	f004 f805 	bl	8008968 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f008 fbef 	bl	800d148 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	4f54300a 	.word	0x4f54300a
 8004978:	4f54310a 	.word	0x4f54310a

0800497c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	333c      	adds	r3, #60	; 0x3c
 8004994:	3304      	adds	r3, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d90e      	bls.n	80049d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f008 fba7 	bl	800d124 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <PCD_EP_OutSetupPacket_int+0x88>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d90c      	bls.n	80049f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d108      	bne.n	80049f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049f0:	461a      	mov	r2, r3
 80049f2:	2101      	movs	r1, #1
 80049f4:	f003 ffb8 	bl	8008968 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	4f54300a 	.word	0x4f54300a

08004a08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
 8004a14:	4613      	mov	r3, r2
 8004a16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a26:	883b      	ldrh	r3, [r7, #0]
 8004a28:	0419      	lsls	r1, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
 8004a34:	e028      	b.n	8004a88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4413      	add	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e00d      	b.n	8004a66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	3340      	adds	r3, #64	; 0x40
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0c1b      	lsrs	r3, r3, #16
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	3301      	adds	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d3ec      	bcc.n	8004a4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a70:	883b      	ldrh	r3, [r7, #0]
 8004a72:	0418      	lsls	r0, r3, #16
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6819      	ldr	r1, [r3, #0]
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	4302      	orrs	r2, r0
 8004a80:	3340      	adds	r3, #64	; 0x40
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aea:	f043 0303 	orr.w	r3, r3, #3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e0cc      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b14:	4b68      	ldr	r3, [pc, #416]	; (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d90c      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b65      	ldr	r3, [pc, #404]	; (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b63      	ldr	r3, [pc, #396]	; (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 030f 	and.w	r3, r3, #15
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0b8      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d020      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b54:	4b59      	ldr	r3, [pc, #356]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a58      	ldr	r2, [pc, #352]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b6c:	4b53      	ldr	r3, [pc, #332]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a52      	ldr	r2, [pc, #328]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b50      	ldr	r3, [pc, #320]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	494d      	ldr	r1, [pc, #308]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d044      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b47      	ldr	r3, [pc, #284]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d119      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e07f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d107      	bne.n	8004bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbe:	4b3f      	ldr	r3, [pc, #252]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e06f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bce:	4b3b      	ldr	r3, [pc, #236]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e067      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4934      	ldr	r1, [pc, #208]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf0:	f7fd fe9c 	bl	800292c <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7fd fe98 	bl	800292c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e04f      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 020c 	and.w	r2, r3, #12
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d1eb      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d20c      	bcs.n	8004c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e032      	b.n	8004cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c54:	4b19      	ldr	r3, [pc, #100]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4916      	ldr	r1, [pc, #88]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	490e      	ldr	r1, [pc, #56]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c86:	f000 fbb1 	bl	80053ec <HAL_RCC_GetSysClockFreq>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	490a      	ldr	r1, [pc, #40]	; (8004cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c98:	5ccb      	ldrb	r3, [r1, r3]
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ca2:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fb76 	bl	8002398 <HAL_InitTick>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40023c00 	.word	0x40023c00
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	08013e34 	.word	0x08013e34
 8004cc4:	20000004 	.word	0x20000004
 8004cc8:	20000010 	.word	0x20000010

08004ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000004 	.word	0x20000004

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ce8:	f7ff fff0 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	0a9b      	lsrs	r3, r3, #10
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4903      	ldr	r1, [pc, #12]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40023800 	.word	0x40023800
 8004d08:	08013e44 	.word	0x08013e44

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d10:	f7ff ffdc 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	0b5b      	lsrs	r3, r3, #13
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	08013e44 	.word	0x08013e44

08004d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	220f      	movs	r2, #15
 8004d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_RCC_GetClockConfig+0x5c>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0203 	and.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d50:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <HAL_RCC_GetClockConfig+0x5c>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <HAL_RCC_GetClockConfig+0x5c>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d68:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	08db      	lsrs	r3, r3, #3
 8004d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_RCC_GetClockConfig+0x60>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40023c00 	.word	0x40023c00

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	; 0x30
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004dd0:	4b6f      	ldr	r3, [pc, #444]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dd6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	496c      	ldr	r1, [pc, #432]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004dee:	2301      	movs	r3, #1
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d010      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004dfe:	4b64      	ldr	r3, [pc, #400]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e04:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	4960      	ldr	r1, [pc, #384]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e2c:	4b58      	ldr	r3, [pc, #352]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	4955      	ldr	r1, [pc, #340]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e68:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e76:	4946      	ldr	r1, [pc, #280]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d101      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004e94:	2301      	movs	r3, #1
 8004e96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 808a 	beq.w	8004fba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	4a38      	ldr	r2, [pc, #224]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb6:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ec2:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ece:	f7fd fd2d 	bl	800292c <HAL_GetTick>
 8004ed2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fd fd29 	bl	800292c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e278      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ee8:	4b2a      	ldr	r3, [pc, #168]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d02f      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d028      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f12:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f1a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f22:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d114      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7fd fcf7 	bl	800292c <HAL_GetTick>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f40:	e00a      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fd fcf3 	bl	800292c <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e240      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ee      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f70:	d114      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	4902      	ldr	r1, [pc, #8]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]
 8004f8c:	e00c      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40007000 	.word	0x40007000
 8004f98:	42470e40 	.word	0x42470e40
 8004f9c:	4b4a      	ldr	r3, [pc, #296]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a49      	ldr	r2, [pc, #292]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fa2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fa6:	6093      	str	r3, [r2, #8]
 8004fa8:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	4944      	ldr	r1, [pc, #272]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004fce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	4937      	ldr	r1, [pc, #220]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005004:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500c:	492e      	ldr	r1, [pc, #184]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005020:	4b29      	ldr	r3, [pc, #164]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005026:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	4926      	ldr	r1, [pc, #152]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503e:	d101      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005040:	2301      	movs	r3, #1
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005050:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005056:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	491a      	ldr	r1, [pc, #104]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005078:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005080:	4911      	ldr	r1, [pc, #68]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005090:	d101      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005092:	2301      	movs	r3, #1
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d005      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a4:	f040 80ff 	bne.w	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ae:	f7fd fc3d 	bl	800292c <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050b4:	e00e      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050b6:	f7fd fc39 	bl	800292c <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d907      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e188      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x642>
 80050c8:	40023800 	.word	0x40023800
 80050cc:	424711e0 	.word	0x424711e0
 80050d0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050d4:	4b7e      	ldr	r3, [pc, #504]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ea      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d028      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d124      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005108:	4b71      	ldr	r3, [pc, #452]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	3301      	adds	r3, #1
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800511a:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005120:	0e1b      	lsrs	r3, r3, #24
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	019b      	lsls	r3, r3, #6
 8005132:	431a      	orrs	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	3b01      	subs	r3, #1
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	431a      	orrs	r2, r3
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	071b      	lsls	r3, r3, #28
 800514a:	4961      	ldr	r1, [pc, #388]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005170:	2b00      	cmp	r3, #0
 8005172:	d035      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517c:	d130      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800517e:	4b54      	ldr	r3, [pc, #336]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005190:	4b4f      	ldr	r3, [pc, #316]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005196:	0f1b      	lsrs	r3, r3, #28
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	019b      	lsls	r3, r3, #6
 80051a8:	431a      	orrs	r2, r3
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	3b01      	subs	r3, #1
 80051b0:	041b      	lsls	r3, r3, #16
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	431a      	orrs	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	071b      	lsls	r3, r3, #28
 80051c0:	4943      	ldr	r1, [pc, #268]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051c8:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ce:	f023 021f 	bic.w	r2, r3, #31
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	493d      	ldr	r1, [pc, #244]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d029      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f4:	d124      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80051f6:	4b36      	ldr	r3, [pc, #216]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80051f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	3301      	adds	r3, #1
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005208:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800520a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520e:	0f1b      	lsrs	r3, r3, #28
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	019b      	lsls	r3, r3, #6
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	3b01      	subs	r3, #1
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	431a      	orrs	r2, r3
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	431a      	orrs	r2, r3
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	071b      	lsls	r3, r3, #28
 8005238:	4925      	ldr	r1, [pc, #148]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005248:	2b00      	cmp	r3, #0
 800524a:	d016      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	3b01      	subs	r3, #1
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	071b      	lsls	r3, r3, #28
 8005272:	4917      	ldr	r1, [pc, #92]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800527a:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005280:	f7fd fb54 	bl	800292c <HAL_GetTick>
 8005284:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005288:	f7fd fb50 	bl	800292c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e09f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 8095 	bne.w	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052b4:	f7fd fb3a 	bl	800292c <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052ba:	e00f      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80052bc:	f7fd fb36 	bl	800292c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d908      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e085      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x642>
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	42470068 	.word	0x42470068
 80052d8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052dc:	4b41      	ldr	r3, [pc, #260]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e8:	d0e8      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x566>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005306:	2b00      	cmp	r3, #0
 8005308:	d02b      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	2b00      	cmp	r3, #0
 8005310:	d127      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005312:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699a      	ldr	r2, [r3, #24]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	431a      	orrs	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	3b01      	subs	r3, #1
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	061b      	lsls	r3, r3, #24
 8005340:	4928      	ldr	r1, [pc, #160]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005342:	4313      	orrs	r3, r2
 8005344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005348:	4b26      	ldr	r3, [pc, #152]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800534a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800534e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005356:	3b01      	subs	r3, #1
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	4922      	ldr	r1, [pc, #136]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d01d      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x612>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005376:	d118      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005378:	4b1a      	ldr	r3, [pc, #104]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	019b      	lsls	r3, r3, #6
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	3b01      	subs	r3, #1
 800539a:	041b      	lsls	r3, r3, #16
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	4910      	ldr	r1, [pc, #64]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053b0:	f7fd fabc 	bl	800292c <HAL_GetTick>
 80053b4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053b6:	e008      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053b8:	f7fd fab8 	bl	800292c <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e007      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053ca:	4b06      	ldr	r3, [pc, #24]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d6:	d1ef      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3730      	adds	r7, #48	; 0x30
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800
 80053e8:	42470070 	.word	0x42470070

080053ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f0:	b088      	sub	sp, #32
 80053f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005408:	4bce      	ldr	r3, [pc, #824]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b0c      	cmp	r3, #12
 8005412:	f200 818d 	bhi.w	8005730 <HAL_RCC_GetSysClockFreq+0x344>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_RCC_GetSysClockFreq+0x30>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005451 	.word	0x08005451
 8005420:	08005731 	.word	0x08005731
 8005424:	08005731 	.word	0x08005731
 8005428:	08005731 	.word	0x08005731
 800542c:	08005457 	.word	0x08005457
 8005430:	08005731 	.word	0x08005731
 8005434:	08005731 	.word	0x08005731
 8005438:	08005731 	.word	0x08005731
 800543c:	0800545d 	.word	0x0800545d
 8005440:	08005731 	.word	0x08005731
 8005444:	08005731 	.word	0x08005731
 8005448:	08005731 	.word	0x08005731
 800544c:	080055d1 	.word	0x080055d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005450:	4bbd      	ldr	r3, [pc, #756]	; (8005748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005452:	61bb      	str	r3, [r7, #24]
       break;
 8005454:	e16f      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005456:	4bbd      	ldr	r3, [pc, #756]	; (800574c <HAL_RCC_GetSysClockFreq+0x360>)
 8005458:	61bb      	str	r3, [r7, #24]
      break;
 800545a:	e16c      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800545c:	4bb9      	ldr	r3, [pc, #740]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005464:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005466:	4bb7      	ldr	r3, [pc, #732]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d053      	beq.n	800551a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005472:	4bb4      	ldr	r3, [pc, #720]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	461a      	mov	r2, r3
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005482:	f04f 0100 	mov.w	r1, #0
 8005486:	ea02 0400 	and.w	r4, r2, r0
 800548a:	603c      	str	r4, [r7, #0]
 800548c:	400b      	ands	r3, r1
 800548e:	607b      	str	r3, [r7, #4]
 8005490:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005494:	4620      	mov	r0, r4
 8005496:	4629      	mov	r1, r5
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	014b      	lsls	r3, r1, #5
 80054a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054a6:	0142      	lsls	r2, r0, #5
 80054a8:	4610      	mov	r0, r2
 80054aa:	4619      	mov	r1, r3
 80054ac:	4623      	mov	r3, r4
 80054ae:	1ac0      	subs	r0, r0, r3
 80054b0:	462b      	mov	r3, r5
 80054b2:	eb61 0103 	sbc.w	r1, r1, r3
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	018b      	lsls	r3, r1, #6
 80054c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80054c4:	0182      	lsls	r2, r0, #6
 80054c6:	1a12      	subs	r2, r2, r0
 80054c8:	eb63 0301 	sbc.w	r3, r3, r1
 80054cc:	f04f 0000 	mov.w	r0, #0
 80054d0:	f04f 0100 	mov.w	r1, #0
 80054d4:	00d9      	lsls	r1, r3, #3
 80054d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054da:	00d0      	lsls	r0, r2, #3
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4621      	mov	r1, r4
 80054e2:	1852      	adds	r2, r2, r1
 80054e4:	4629      	mov	r1, r5
 80054e6:	eb43 0101 	adc.w	r1, r3, r1
 80054ea:	460b      	mov	r3, r1
 80054ec:	f04f 0000 	mov.w	r0, #0
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	0259      	lsls	r1, r3, #9
 80054f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80054fa:	0250      	lsls	r0, r2, #9
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4610      	mov	r0, r2
 8005502:	4619      	mov	r1, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	461a      	mov	r2, r3
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	f7fa fe88 	bl	8000220 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e04c      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800551a:	4b8a      	ldr	r3, [pc, #552]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	461a      	mov	r2, r3
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800552a:	f04f 0100 	mov.w	r1, #0
 800552e:	ea02 0a00 	and.w	sl, r2, r0
 8005532:	ea03 0b01 	and.w	fp, r3, r1
 8005536:	4650      	mov	r0, sl
 8005538:	4659      	mov	r1, fp
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	014b      	lsls	r3, r1, #5
 8005544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005548:	0142      	lsls	r2, r0, #5
 800554a:	4610      	mov	r0, r2
 800554c:	4619      	mov	r1, r3
 800554e:	ebb0 000a 	subs.w	r0, r0, sl
 8005552:	eb61 010b 	sbc.w	r1, r1, fp
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	018b      	lsls	r3, r1, #6
 8005560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005564:	0182      	lsls	r2, r0, #6
 8005566:	1a12      	subs	r2, r2, r0
 8005568:	eb63 0301 	sbc.w	r3, r3, r1
 800556c:	f04f 0000 	mov.w	r0, #0
 8005570:	f04f 0100 	mov.w	r1, #0
 8005574:	00d9      	lsls	r1, r3, #3
 8005576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800557a:	00d0      	lsls	r0, r2, #3
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	eb12 020a 	adds.w	r2, r2, sl
 8005584:	eb43 030b 	adc.w	r3, r3, fp
 8005588:	f04f 0000 	mov.w	r0, #0
 800558c:	f04f 0100 	mov.w	r1, #0
 8005590:	0299      	lsls	r1, r3, #10
 8005592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005596:	0290      	lsls	r0, r2, #10
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	f7fa fe3a 	bl	8000220 <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4613      	mov	r3, r2
 80055b2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055b4:	4b63      	ldr	r3, [pc, #396]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	3301      	adds	r3, #1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	61bb      	str	r3, [r7, #24]
      break;
 80055ce:	e0b2      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055d0:	4b5c      	ldr	r3, [pc, #368]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055da:	4b5a      	ldr	r3, [pc, #360]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d04d      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e6:	4b57      	ldr	r3, [pc, #348]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	099b      	lsrs	r3, r3, #6
 80055ec:	461a      	mov	r2, r3
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	ea02 0800 	and.w	r8, r2, r0
 80055fe:	ea03 0901 	and.w	r9, r3, r1
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	014b      	lsls	r3, r1, #5
 8005610:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005614:	0142      	lsls	r2, r0, #5
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	ebb0 0008 	subs.w	r0, r0, r8
 800561e:	eb61 0109 	sbc.w	r1, r1, r9
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	018b      	lsls	r3, r1, #6
 800562c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005630:	0182      	lsls	r2, r0, #6
 8005632:	1a12      	subs	r2, r2, r0
 8005634:	eb63 0301 	sbc.w	r3, r3, r1
 8005638:	f04f 0000 	mov.w	r0, #0
 800563c:	f04f 0100 	mov.w	r1, #0
 8005640:	00d9      	lsls	r1, r3, #3
 8005642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005646:	00d0      	lsls	r0, r2, #3
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	eb12 0208 	adds.w	r2, r2, r8
 8005650:	eb43 0309 	adc.w	r3, r3, r9
 8005654:	f04f 0000 	mov.w	r0, #0
 8005658:	f04f 0100 	mov.w	r1, #0
 800565c:	0259      	lsls	r1, r3, #9
 800565e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005662:	0250      	lsls	r0, r2, #9
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4610      	mov	r0, r2
 800566a:	4619      	mov	r1, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	461a      	mov	r2, r3
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	f7fa fdd4 	bl	8000220 <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4613      	mov	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e04a      	b.n	8005718 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005682:	4b30      	ldr	r3, [pc, #192]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	461a      	mov	r2, r3
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005692:	f04f 0100 	mov.w	r1, #0
 8005696:	ea02 0400 	and.w	r4, r2, r0
 800569a:	ea03 0501 	and.w	r5, r3, r1
 800569e:	4620      	mov	r0, r4
 80056a0:	4629      	mov	r1, r5
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	014b      	lsls	r3, r1, #5
 80056ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056b0:	0142      	lsls	r2, r0, #5
 80056b2:	4610      	mov	r0, r2
 80056b4:	4619      	mov	r1, r3
 80056b6:	1b00      	subs	r0, r0, r4
 80056b8:	eb61 0105 	sbc.w	r1, r1, r5
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	018b      	lsls	r3, r1, #6
 80056c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056ca:	0182      	lsls	r2, r0, #6
 80056cc:	1a12      	subs	r2, r2, r0
 80056ce:	eb63 0301 	sbc.w	r3, r3, r1
 80056d2:	f04f 0000 	mov.w	r0, #0
 80056d6:	f04f 0100 	mov.w	r1, #0
 80056da:	00d9      	lsls	r1, r3, #3
 80056dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056e0:	00d0      	lsls	r0, r2, #3
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	1912      	adds	r2, r2, r4
 80056e8:	eb45 0303 	adc.w	r3, r5, r3
 80056ec:	f04f 0000 	mov.w	r0, #0
 80056f0:	f04f 0100 	mov.w	r1, #0
 80056f4:	0299      	lsls	r1, r3, #10
 80056f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056fa:	0290      	lsls	r0, r2, #10
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4610      	mov	r0, r2
 8005702:	4619      	mov	r1, r3
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	461a      	mov	r2, r3
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	f7fa fd88 	bl	8000220 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_RCC_GetSysClockFreq+0x358>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	0f1b      	lsrs	r3, r3, #28
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	61bb      	str	r3, [r7, #24]
      break;
 800572e:	e002      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005732:	61bb      	str	r3, [r7, #24]
      break;
 8005734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005736:	69bb      	ldr	r3, [r7, #24]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	00f42400 	.word	0x00f42400
 800574c:	007a1200 	.word	0x007a1200

08005750 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e28d      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8083 	beq.w	8005876 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005770:	4b94      	ldr	r3, [pc, #592]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
 8005778:	2b04      	cmp	r3, #4
 800577a:	d019      	beq.n	80057b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800577c:	4b91      	ldr	r3, [pc, #580]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005784:	2b08      	cmp	r3, #8
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005788:	4b8e      	ldr	r3, [pc, #568]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005794:	d00c      	beq.n	80057b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005796:	4b8b      	ldr	r3, [pc, #556]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	d112      	bne.n	80057c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057a2:	4b88      	ldr	r3, [pc, #544]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ae:	d10b      	bne.n	80057c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	4b84      	ldr	r3, [pc, #528]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d05b      	beq.n	8005874 <HAL_RCC_OscConfig+0x124>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d157      	bne.n	8005874 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e25a      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d106      	bne.n	80057e0 <HAL_RCC_OscConfig+0x90>
 80057d2:	4b7c      	ldr	r3, [pc, #496]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7b      	ldr	r2, [pc, #492]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e01d      	b.n	800581c <HAL_RCC_OscConfig+0xcc>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e8:	d10c      	bne.n	8005804 <HAL_RCC_OscConfig+0xb4>
 80057ea:	4b76      	ldr	r3, [pc, #472]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a75      	ldr	r2, [pc, #468]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	4b73      	ldr	r3, [pc, #460]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a72      	ldr	r2, [pc, #456]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00b      	b.n	800581c <HAL_RCC_OscConfig+0xcc>
 8005804:	4b6f      	ldr	r3, [pc, #444]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a6e      	ldr	r2, [pc, #440]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 800580a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	4b6c      	ldr	r3, [pc, #432]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a6b      	ldr	r2, [pc, #428]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd f882 	bl	800292c <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800582c:	f7fd f87e 	bl	800292c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b64      	cmp	r3, #100	; 0x64
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e21f      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	4b61      	ldr	r3, [pc, #388]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f0      	beq.n	800582c <HAL_RCC_OscConfig+0xdc>
 800584a:	e014      	b.n	8005876 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fd f86e 	bl	800292c <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd f86a 	bl	800292c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e20b      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	4b57      	ldr	r3, [pc, #348]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x104>
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d06f      	beq.n	8005962 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005882:	4b50      	ldr	r3, [pc, #320]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
 800588a:	2b00      	cmp	r3, #0
 800588c:	d017      	beq.n	80058be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800588e:	4b4d      	ldr	r3, [pc, #308]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005896:	2b08      	cmp	r3, #8
 8005898:	d105      	bne.n	80058a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800589a:	4b4a      	ldr	r3, [pc, #296]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a6:	4b47      	ldr	r3, [pc, #284]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d11c      	bne.n	80058ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b2:	4b44      	ldr	r3, [pc, #272]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_RCC_OscConfig+0x186>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d001      	beq.n	80058d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e1d3      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4937      	ldr	r1, [pc, #220]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ea:	e03a      	b.n	8005962 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d020      	beq.n	8005936 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f4:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <HAL_RCC_OscConfig+0x278>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fa:	f7fd f817 	bl	800292c <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005902:	f7fd f813 	bl	800292c <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e1b4      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005914:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	4925      	ldr	r1, [pc, #148]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005930:	4313      	orrs	r3, r2
 8005932:	600b      	str	r3, [r1, #0]
 8005934:	e015      	b.n	8005962 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RCC_OscConfig+0x278>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593c:	f7fc fff6 	bl	800292c <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005944:	f7fc fff2 	bl	800292c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e193      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005956:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d036      	beq.n	80059dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d016      	beq.n	80059a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005976:	4b15      	ldr	r3, [pc, #84]	; (80059cc <HAL_RCC_OscConfig+0x27c>)
 8005978:	2201      	movs	r2, #1
 800597a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fc ffd6 	bl	800292c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005984:	f7fc ffd2 	bl	800292c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e173      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_OscConfig+0x274>)
 8005998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f0      	beq.n	8005984 <HAL_RCC_OscConfig+0x234>
 80059a2:	e01b      	b.n	80059dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a4:	4b09      	ldr	r3, [pc, #36]	; (80059cc <HAL_RCC_OscConfig+0x27c>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fc ffbf 	bl	800292c <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059b0:	e00e      	b.n	80059d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b2:	f7fc ffbb 	bl	800292c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d907      	bls.n	80059d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e15c      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
 80059c4:	40023800 	.word	0x40023800
 80059c8:	42470000 	.word	0x42470000
 80059cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059d0:	4b8a      	ldr	r3, [pc, #552]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 80059d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ea      	bne.n	80059b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8097 	beq.w	8005b18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ee:	4b83      	ldr	r3, [pc, #524]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10f      	bne.n	8005a1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	4b7f      	ldr	r3, [pc, #508]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4a7e      	ldr	r2, [pc, #504]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a08:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0a:	4b7c      	ldr	r3, [pc, #496]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1a:	4b79      	ldr	r3, [pc, #484]	; (8005c00 <HAL_RCC_OscConfig+0x4b0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d118      	bne.n	8005a58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a26:	4b76      	ldr	r3, [pc, #472]	; (8005c00 <HAL_RCC_OscConfig+0x4b0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a75      	ldr	r2, [pc, #468]	; (8005c00 <HAL_RCC_OscConfig+0x4b0>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a32:	f7fc ff7b 	bl	800292c <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3a:	f7fc ff77 	bl	800292c <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e118      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	4b6c      	ldr	r3, [pc, #432]	; (8005c00 <HAL_RCC_OscConfig+0x4b0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d106      	bne.n	8005a6e <HAL_RCC_OscConfig+0x31e>
 8005a60:	4b66      	ldr	r3, [pc, #408]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a65      	ldr	r2, [pc, #404]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	e01c      	b.n	8005aa8 <HAL_RCC_OscConfig+0x358>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b05      	cmp	r3, #5
 8005a74:	d10c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x340>
 8005a76:	4b61      	ldr	r3, [pc, #388]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7a:	4a60      	ldr	r2, [pc, #384]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	6713      	str	r3, [r2, #112]	; 0x70
 8005a82:	4b5e      	ldr	r3, [pc, #376]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a86:	4a5d      	ldr	r2, [pc, #372]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8e:	e00b      	b.n	8005aa8 <HAL_RCC_OscConfig+0x358>
 8005a90:	4b5a      	ldr	r3, [pc, #360]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a94:	4a59      	ldr	r2, [pc, #356]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a9c:	4b57      	ldr	r3, [pc, #348]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a56      	ldr	r2, [pc, #344]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005aa2:	f023 0304 	bic.w	r3, r3, #4
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d015      	beq.n	8005adc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab0:	f7fc ff3c 	bl	800292c <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fc ff38 	bl	800292c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e0d7      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ace:	4b4b      	ldr	r3, [pc, #300]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ee      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x368>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005adc:	f7fc ff26 	bl	800292c <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae2:	e00a      	b.n	8005afa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae4:	f7fc ff22 	bl	800292c <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e0c1      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afa:	4b40      	ldr	r3, [pc, #256]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1ee      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	4a3a      	ldr	r2, [pc, #232]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80ad 	beq.w	8005c7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b22:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d060      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d145      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <HAL_RCC_OscConfig+0x4b4>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fc fef6 	bl	800292c <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fc fef2 	bl	800292c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e093      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b56:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	019b      	lsls	r3, r3, #6
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	085b      	lsrs	r3, r3, #1
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	061b      	lsls	r3, r3, #24
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	071b      	lsls	r3, r3, #28
 8005b8e:	491b      	ldr	r1, [pc, #108]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b94:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <HAL_RCC_OscConfig+0x4b4>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fc fec7 	bl	800292c <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba2:	f7fc fec3 	bl	800292c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e064      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb4:	4b11      	ldr	r3, [pc, #68]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x452>
 8005bc0:	e05c      	b.n	8005c7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <HAL_RCC_OscConfig+0x4b4>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc feb0 	bl	800292c <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fc feac 	bl	800292c <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e04d      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCC_OscConfig+0x4ac>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x480>
 8005bee:	e045      	b.n	8005c7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d107      	bne.n	8005c08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e040      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	40007000 	.word	0x40007000
 8005c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c08:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <HAL_RCC_OscConfig+0x538>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d030      	beq.n	8005c78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d129      	bne.n	8005c78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d122      	bne.n	8005c78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c38:	4013      	ands	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d119      	bne.n	8005c78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	3b01      	subs	r3, #1
 8005c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d10f      	bne.n	8005c78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d107      	bne.n	8005c78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d001      	beq.n	8005c7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40023800 	.word	0x40023800

08005c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07b      	b.n	8005d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cae:	d009      	beq.n	8005cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
 8005cb6:	e005      	b.n	8005cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fc faa2 	bl	8002228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0104 	and.w	r1, r3, #4
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	f003 0210 	and.w	r2, r3, #16
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_SPI_Transmit+0x22>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e126      	b.n	800600e <HAL_SPI_Transmit+0x270>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc8:	f7fc fdb0 	bl	800292c <HAL_GetTick>
 8005dcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
 8005de0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005de2:	e10b      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_SPI_Transmit+0x52>
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005df4:	e102      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	d10f      	bne.n	8005e5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d007      	beq.n	8005e7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d14b      	bne.n	8005f1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_SPI_Transmit+0xf6>
 8005e8e:	8afb      	ldrh	r3, [r7, #22]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d13e      	bne.n	8005f12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	881a      	ldrh	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	1c9a      	adds	r2, r3, #2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eb8:	e02b      	b.n	8005f12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d112      	bne.n	8005eee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eec:	e011      	b.n	8005f12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eee:	f7fc fd1d 	bl	800292c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d803      	bhi.n	8005f06 <HAL_SPI_Transmit+0x168>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_Transmit+0x16e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f10:	e074      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1ce      	bne.n	8005eba <HAL_SPI_Transmit+0x11c>
 8005f1c:	e04c      	b.n	8005fb8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_SPI_Transmit+0x18e>
 8005f26:	8afb      	ldrh	r3, [r7, #22]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d140      	bne.n	8005fae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f52:	e02c      	b.n	8005fae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d113      	bne.n	8005f8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f88:	e011      	b.n	8005fae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f8a:	f7fc fccf 	bl	800292c <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d803      	bhi.n	8005fa2 <HAL_SPI_Transmit+0x204>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_Transmit+0x20a>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fac:	e026      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1cd      	bne.n	8005f54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fbcb 	bl	8006758 <SPI_EndRxTxTransaction>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e000      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ffa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800600c:	7ffb      	ldrb	r3, [r7, #31]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b088      	sub	sp, #32
 800601a:	af02      	add	r7, sp, #8
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006032:	d112      	bne.n	800605a <HAL_SPI_Receive+0x44>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10e      	bne.n	800605a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2204      	movs	r2, #4
 8006040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f8f1 	bl	8006238 <HAL_SPI_TransmitReceive>
 8006056:	4603      	mov	r3, r0
 8006058:	e0ea      	b.n	8006230 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_SPI_Receive+0x52>
 8006064:	2302      	movs	r3, #2
 8006066:	e0e3      	b.n	8006230 <HAL_SPI_Receive+0x21a>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006070:	f7fc fc5c 	bl	800292c <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d002      	beq.n	8006088 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006082:	2302      	movs	r3, #2
 8006084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006086:	e0ca      	b.n	800621e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_SPI_Receive+0x7e>
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006098:	e0c1      	b.n	800621e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2204      	movs	r2, #4
 800609e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	88fa      	ldrh	r2, [r7, #6]
 80060b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e0:	d10f      	bne.n	8006102 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006100:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d007      	beq.n	8006120 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d162      	bne.n	80061ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006128:	e02e      	b.n	8006188 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d115      	bne.n	8006164 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f103 020c 	add.w	r2, r3, #12
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006162:	e011      	b.n	8006188 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006164:	f7fc fbe2 	bl	800292c <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d803      	bhi.n	800617c <HAL_SPI_Receive+0x166>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d102      	bne.n	8006182 <HAL_SPI_Receive+0x16c>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006186:	e04a      	b.n	800621e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1cb      	bne.n	800612a <HAL_SPI_Receive+0x114>
 8006192:	e031      	b.n	80061f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d113      	bne.n	80061ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	b292      	uxth	r2, r2
 80061ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061c8:	e011      	b.n	80061ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ca:	f7fc fbaf 	bl	800292c <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d803      	bhi.n	80061e2 <HAL_SPI_Receive+0x1cc>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d102      	bne.n	80061e8 <HAL_SPI_Receive+0x1d2>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061ec:	e017      	b.n	800621e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1cd      	bne.n	8006194 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa45 	bl	800668c <SPI_EndRxTransaction>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
 800621a:	e000      	b.n	800621e <HAL_SPI_Receive+0x208>
  }

error :
 800621c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006246:	2301      	movs	r3, #1
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_SPI_TransmitReceive+0x26>
 800625a:	2302      	movs	r3, #2
 800625c:	e18a      	b.n	8006574 <HAL_SPI_TransmitReceive+0x33c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006266:	f7fc fb61 	bl	800292c <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800627c:	887b      	ldrh	r3, [r7, #2]
 800627e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006284:	2b01      	cmp	r3, #1
 8006286:	d00f      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x70>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628e:	d107      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x68>
 8006298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800629c:	2b04      	cmp	r3, #4
 800629e:	d003      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a6:	e15b      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x82>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x82>
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062c0:	e14e      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d003      	beq.n	80062d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2205      	movs	r2, #5
 80062d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	887a      	ldrh	r2, [r7, #2]
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d007      	beq.n	800632a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006332:	d178      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_TransmitReceive+0x10a>
 800633c:	8b7b      	ldrh	r3, [r7, #26]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d166      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006366:	e053      	b.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d11b      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x176>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d016      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x176>
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d113      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	1c9a      	adds	r2, r3, #2
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d119      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1b8>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d014      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	b292      	uxth	r2, r2
 80063d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ec:	2301      	movs	r3, #1
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063f0:	f7fc fa9c 	bl	800292c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d807      	bhi.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d003      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800640e:	e0a7      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1a6      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x130>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1a1      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x130>
 8006424:	e07c      	b.n	8006520 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x1fc>
 800642e:	8b7b      	ldrh	r3, [r7, #26]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d16b      	bne.n	800650c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645a:	e057      	b.n	800650c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d11c      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x26c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x26c>
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d114      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d119      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x2ae>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d014      	beq.n	80064e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064e2:	2301      	movs	r3, #1
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064e6:	f7fc fa21 	bl	800292c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_TransmitReceive+0x2c6>
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x2cc>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800650a:	e029      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1a2      	bne.n	800645c <HAL_SPI_TransmitReceive+0x224>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d19d      	bne.n	800645c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f917 	bl	8006758 <SPI_EndRxTxTransaction>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800653c:	e010      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	e000      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800655e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006574:	4618      	mov	r0, r3
 8006576:	3730      	adds	r7, #48	; 0x30
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800658c:	f7fc f9ce 	bl	800292c <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	4413      	add	r3, r2
 800659a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800659c:	f7fc f9c6 	bl	800292c <HAL_GetTick>
 80065a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	015b      	lsls	r3, r3, #5
 80065a8:	0d1b      	lsrs	r3, r3, #20
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065b2:	e054      	b.n	800665e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d050      	beq.n	800665e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065bc:	f7fc f9b6 	bl	800292c <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d902      	bls.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d13d      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ea:	d111      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f4:	d004      	beq.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fe:	d107      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d10f      	bne.n	800663a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e017      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3b01      	subs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	bf0c      	ite	eq
 800666e:	2301      	moveq	r3, #1
 8006670:	2300      	movne	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	429a      	cmp	r2, r3
 800667a:	d19b      	bne.n	80065b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000004 	.word	0x20000004

0800668c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a0:	d111      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d004      	beq.n	80066b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d107      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ce:	d12a      	bne.n	8006726 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d012      	beq.n	8006700 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff49 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e026      	b.n	800674e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	2101      	movs	r1, #1
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff36 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01a      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e013      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	2101      	movs	r1, #1
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff23 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	f043 0220 	orr.w	r2, r3, #32
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e000      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <SPI_EndRxTxTransaction+0x7c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <SPI_EndRxTxTransaction+0x80>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0d5b      	lsrs	r3, r3, #21
 8006770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006774:	fb02 f303 	mul.w	r3, r2, r3
 8006778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d112      	bne.n	80067aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2200      	movs	r2, #0
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fef4 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e00f      	b.n	80067ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d0f2      	beq.n	80067aa <SPI_EndRxTxTransaction+0x52>
 80067c4:	e000      	b.n	80067c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067c6:	bf00      	nop
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000004 	.word	0x20000004
 80067d8:	165e9f81 	.word	0x165e9f81

080067dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e041      	b.n	8006872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fb fd58 	bl	80022b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3304      	adds	r3, #4
 8006818:	4619      	mov	r1, r3
 800681a:	4610      	mov	r0, r2
 800681c:	f000 f9ce 	bl	8006bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	d001      	beq.n	8006894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e04e      	b.n	8006932 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a23      	ldr	r2, [pc, #140]	; (8006940 <HAL_TIM_Base_Start_IT+0xc4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d022      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068be:	d01d      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <HAL_TIM_Base_Start_IT+0xc8>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d018      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1e      	ldr	r2, [pc, #120]	; (8006948 <HAL_TIM_Base_Start_IT+0xcc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d013      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1c      	ldr	r2, [pc, #112]	; (800694c <HAL_TIM_Base_Start_IT+0xd0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00e      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <HAL_TIM_Base_Start_IT+0xd4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d009      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a19      	ldr	r2, [pc, #100]	; (8006954 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d004      	beq.n	80068fc <HAL_TIM_Base_Start_IT+0x80>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a18      	ldr	r2, [pc, #96]	; (8006958 <HAL_TIM_Base_Start_IT+0xdc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d111      	bne.n	8006920 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b06      	cmp	r3, #6
 800690c:	d010      	beq.n	8006930 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691e:	e007      	b.n	8006930 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40010400 	.word	0x40010400
 8006954:	40014000 	.word	0x40014000
 8006958:	40001800 	.word	0x40001800

0800695c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d122      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d11b      	bne.n	80069b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0202 	mvn.w	r2, #2
 8006988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8ee 	bl	8006b80 <HAL_TIM_IC_CaptureCallback>
 80069a4:	e005      	b.n	80069b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f8e0 	bl	8006b6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f8f1 	bl	8006b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d122      	bne.n	8006a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d11b      	bne.n	8006a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f06f 0204 	mvn.w	r2, #4
 80069dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f8c4 	bl	8006b80 <HAL_TIM_IC_CaptureCallback>
 80069f8:	e005      	b.n	8006a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8b6 	bl	8006b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 f8c7 	bl	8006b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d122      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d11b      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0208 	mvn.w	r2, #8
 8006a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2204      	movs	r2, #4
 8006a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f89a 	bl	8006b80 <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f88c 	bl	8006b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f89d 	bl	8006b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d122      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d11b      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0210 	mvn.w	r2, #16
 8006a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2208      	movs	r2, #8
 8006a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f870 	bl	8006b80 <HAL_TIM_IC_CaptureCallback>
 8006aa0:	e005      	b.n	8006aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f862 	bl	8006b6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f873 	bl	8006b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d10e      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d107      	bne.n	8006ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0201 	mvn.w	r2, #1
 8006ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fb f9a0 	bl	8001e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d10e      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d107      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f902 	bl	8006d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d10e      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d107      	bne.n	8006b38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f838 	bl	8006ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d10e      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d107      	bne.n	8006b64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f06f 0220 	mvn.w	r2, #32
 8006b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8cc 	bl	8006cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b64:	bf00      	nop
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <TIM_Base_SetConfig+0x114>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d013      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bda:	d00f      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a3d      	ldr	r2, [pc, #244]	; (8006cd4 <TIM_Base_SetConfig+0x118>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00b      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a3c      	ldr	r2, [pc, #240]	; (8006cd8 <TIM_Base_SetConfig+0x11c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d007      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a3b      	ldr	r2, [pc, #236]	; (8006cdc <TIM_Base_SetConfig+0x120>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d003      	beq.n	8006bfc <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a3a      	ldr	r2, [pc, #232]	; (8006ce0 <TIM_Base_SetConfig+0x124>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d108      	bne.n	8006c0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2f      	ldr	r2, [pc, #188]	; (8006cd0 <TIM_Base_SetConfig+0x114>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d02b      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c1c:	d027      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a2c      	ldr	r2, [pc, #176]	; (8006cd4 <TIM_Base_SetConfig+0x118>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d023      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	; (8006cd8 <TIM_Base_SetConfig+0x11c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01f      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a2a      	ldr	r2, [pc, #168]	; (8006cdc <TIM_Base_SetConfig+0x120>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01b      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <TIM_Base_SetConfig+0x124>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d017      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a28      	ldr	r2, [pc, #160]	; (8006ce4 <TIM_Base_SetConfig+0x128>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <TIM_Base_SetConfig+0x12c>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00f      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a26      	ldr	r2, [pc, #152]	; (8006cec <TIM_Base_SetConfig+0x130>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00b      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a25      	ldr	r2, [pc, #148]	; (8006cf0 <TIM_Base_SetConfig+0x134>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d007      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a24      	ldr	r2, [pc, #144]	; (8006cf4 <TIM_Base_SetConfig+0x138>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d003      	beq.n	8006c6e <TIM_Base_SetConfig+0xb2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <TIM_Base_SetConfig+0x13c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d108      	bne.n	8006c80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <TIM_Base_SetConfig+0x114>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_Base_SetConfig+0xf8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a0c      	ldr	r2, [pc, #48]	; (8006ce0 <TIM_Base_SetConfig+0x124>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d103      	bne.n	8006cbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	615a      	str	r2, [r3, #20]
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40000400 	.word	0x40000400
 8006cd8:	40000800 	.word	0x40000800
 8006cdc:	40000c00 	.word	0x40000c00
 8006ce0:	40010400 	.word	0x40010400
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800
 8006cf0:	40001800 	.word	0x40001800
 8006cf4:	40001c00 	.word	0x40001c00
 8006cf8:	40002000 	.word	0x40002000

08006cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e03f      	b.n	8006db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb fadc 	bl	8002308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	; 0x24
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f9a7 	bl	80070bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08a      	sub	sp, #40	; 0x28
 8006dc2:	af02      	add	r7, sp, #8
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d17c      	bne.n	8006ed8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_UART_Transmit+0x2c>
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e075      	b.n	8006eda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Transmit+0x3e>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e06e      	b.n	8006eda <HAL_UART_Transmit+0x11c>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2221      	movs	r2, #33	; 0x21
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e12:	f7fb fd8b 	bl	800292c <HAL_GetTick>
 8006e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2c:	d108      	bne.n	8006e40 <HAL_UART_Transmit+0x82>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e003      	b.n	8006e48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e50:	e02a      	b.n	8006ea8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2180      	movs	r1, #128	; 0x80
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f8e2 	bl	8007026 <UART_WaitOnFlagUntilTimeout>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e036      	b.n	8006eda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3302      	adds	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	e007      	b.n	8006e9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	781a      	ldrb	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	3301      	adds	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1cf      	bne.n	8006e52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2140      	movs	r1, #64	; 0x40
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f8b2 	bl	8007026 <UART_WaitOnFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e006      	b.n	8006eda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e000      	b.n	8006eda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ed8:	2302      	movs	r3, #2
  }
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b08a      	sub	sp, #40	; 0x28
 8006ee6:	af02      	add	r7, sp, #8
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	f040 808c 	bne.w	800701c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Receive+0x2e>
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e084      	b.n	800701e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_UART_Receive+0x40>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e07d      	b.n	800701e <HAL_UART_Receive+0x13c>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2222      	movs	r2, #34	; 0x22
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3e:	f7fb fcf5 	bl	800292c <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	88fa      	ldrh	r2, [r7, #6]
 8006f48:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d108      	bne.n	8006f6c <HAL_UART_Receive+0x8a>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e003      	b.n	8006f74 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f7c:	e043      	b.n	8007006 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2200      	movs	r2, #0
 8006f86:	2120      	movs	r1, #32
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f84c 	bl	8007026 <UART_WaitOnFlagUntilTimeout>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e042      	b.n	800701e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10c      	bne.n	8006fb8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	e01f      	b.n	8006ff8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc0:	d007      	beq.n	8006fd2 <HAL_UART_Receive+0xf0>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <HAL_UART_Receive+0xfe>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	e008      	b.n	8006ff2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1b6      	bne.n	8006f7e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800701c:	2302      	movs	r3, #2
  }
}
 800701e:	4618      	mov	r0, r3
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007036:	e02c      	b.n	8007092 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703e:	d028      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x30>
 8007046:	f7fb fc71 	bl	800292c <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	429a      	cmp	r2, r3
 8007054:	d21d      	bcs.n	8007092 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007064:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695a      	ldr	r2, [r3, #20]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0201 	bic.w	r2, r2, #1
 8007074:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e00f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d0c3      	beq.n	8007038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	b09f      	sub	sp, #124	; 0x7c
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d2:	68d9      	ldr	r1, [r3, #12]
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	ea40 0301 	orr.w	r3, r0, r1
 80070dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80070f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007100:	f021 010c 	bic.w	r1, r1, #12
 8007104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800710a:	430b      	orrs	r3, r1
 800710c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711a:	6999      	ldr	r1, [r3, #24]
 800711c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	ea40 0301 	orr.w	r3, r0, r1
 8007124:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	4bc5      	ldr	r3, [pc, #788]	; (8007440 <UART_SetConfig+0x384>)
 800712c:	429a      	cmp	r2, r3
 800712e:	d004      	beq.n	800713a <UART_SetConfig+0x7e>
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	4bc3      	ldr	r3, [pc, #780]	; (8007444 <UART_SetConfig+0x388>)
 8007136:	429a      	cmp	r2, r3
 8007138:	d103      	bne.n	8007142 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800713a:	f7fd fde7 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 800713e:	6778      	str	r0, [r7, #116]	; 0x74
 8007140:	e002      	b.n	8007148 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fd fdcf 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8007146:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007150:	f040 80b6 	bne.w	80072c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007156:	461c      	mov	r4, r3
 8007158:	f04f 0500 	mov.w	r5, #0
 800715c:	4622      	mov	r2, r4
 800715e:	462b      	mov	r3, r5
 8007160:	1891      	adds	r1, r2, r2
 8007162:	6439      	str	r1, [r7, #64]	; 0x40
 8007164:	415b      	adcs	r3, r3
 8007166:	647b      	str	r3, [r7, #68]	; 0x44
 8007168:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800716c:	1912      	adds	r2, r2, r4
 800716e:	eb45 0303 	adc.w	r3, r5, r3
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f04f 0100 	mov.w	r1, #0
 800717a:	00d9      	lsls	r1, r3, #3
 800717c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007180:	00d0      	lsls	r0, r2, #3
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	1911      	adds	r1, r2, r4
 8007188:	6639      	str	r1, [r7, #96]	; 0x60
 800718a:	416b      	adcs	r3, r5
 800718c:	667b      	str	r3, [r7, #100]	; 0x64
 800718e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	461a      	mov	r2, r3
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	1891      	adds	r1, r2, r2
 800719a:	63b9      	str	r1, [r7, #56]	; 0x38
 800719c:	415b      	adcs	r3, r3
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071a8:	f7f9 f83a 	bl	8000220 <__aeabi_uldivmod>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4ba5      	ldr	r3, [pc, #660]	; (8007448 <UART_SetConfig+0x38c>)
 80071b2:	fba3 2302 	umull	r2, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	011e      	lsls	r6, r3, #4
 80071ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071bc:	461c      	mov	r4, r3
 80071be:	f04f 0500 	mov.w	r5, #0
 80071c2:	4622      	mov	r2, r4
 80071c4:	462b      	mov	r3, r5
 80071c6:	1891      	adds	r1, r2, r2
 80071c8:	6339      	str	r1, [r7, #48]	; 0x30
 80071ca:	415b      	adcs	r3, r3
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
 80071ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071d2:	1912      	adds	r2, r2, r4
 80071d4:	eb45 0303 	adc.w	r3, r5, r3
 80071d8:	f04f 0000 	mov.w	r0, #0
 80071dc:	f04f 0100 	mov.w	r1, #0
 80071e0:	00d9      	lsls	r1, r3, #3
 80071e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071e6:	00d0      	lsls	r0, r2, #3
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	1911      	adds	r1, r2, r4
 80071ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80071f0:	416b      	adcs	r3, r5
 80071f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	1891      	adds	r1, r2, r2
 8007200:	62b9      	str	r1, [r7, #40]	; 0x28
 8007202:	415b      	adcs	r3, r3
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800720a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800720e:	f7f9 f807 	bl	8000220 <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4b8c      	ldr	r3, [pc, #560]	; (8007448 <UART_SetConfig+0x38c>)
 8007218:	fba3 1302 	umull	r1, r3, r3, r2
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	2164      	movs	r1, #100	; 0x64
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	3332      	adds	r3, #50	; 0x32
 800722a:	4a87      	ldr	r2, [pc, #540]	; (8007448 <UART_SetConfig+0x38c>)
 800722c:	fba2 2303 	umull	r2, r3, r2, r3
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007238:	441e      	add	r6, r3
 800723a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800723c:	4618      	mov	r0, r3
 800723e:	f04f 0100 	mov.w	r1, #0
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	1894      	adds	r4, r2, r2
 8007248:	623c      	str	r4, [r7, #32]
 800724a:	415b      	adcs	r3, r3
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
 800724e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007252:	1812      	adds	r2, r2, r0
 8007254:	eb41 0303 	adc.w	r3, r1, r3
 8007258:	f04f 0400 	mov.w	r4, #0
 800725c:	f04f 0500 	mov.w	r5, #0
 8007260:	00dd      	lsls	r5, r3, #3
 8007262:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007266:	00d4      	lsls	r4, r2, #3
 8007268:	4622      	mov	r2, r4
 800726a:	462b      	mov	r3, r5
 800726c:	1814      	adds	r4, r2, r0
 800726e:	653c      	str	r4, [r7, #80]	; 0x50
 8007270:	414b      	adcs	r3, r1
 8007272:	657b      	str	r3, [r7, #84]	; 0x54
 8007274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	461a      	mov	r2, r3
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	1891      	adds	r1, r2, r2
 8007280:	61b9      	str	r1, [r7, #24]
 8007282:	415b      	adcs	r3, r3
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800728a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800728e:	f7f8 ffc7 	bl	8000220 <__aeabi_uldivmod>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4b6c      	ldr	r3, [pc, #432]	; (8007448 <UART_SetConfig+0x38c>)
 8007298:	fba3 1302 	umull	r1, r3, r3, r2
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	2164      	movs	r1, #100	; 0x64
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	3332      	adds	r3, #50	; 0x32
 80072aa:	4a67      	ldr	r2, [pc, #412]	; (8007448 <UART_SetConfig+0x38c>)
 80072ac:	fba2 2303 	umull	r2, r3, r2, r3
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	f003 0207 	and.w	r2, r3, #7
 80072b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4432      	add	r2, r6
 80072bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072be:	e0b9      	b.n	8007434 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072c2:	461c      	mov	r4, r3
 80072c4:	f04f 0500 	mov.w	r5, #0
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	6139      	str	r1, [r7, #16]
 80072d0:	415b      	adcs	r3, r3
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072d8:	1912      	adds	r2, r2, r4
 80072da:	eb45 0303 	adc.w	r3, r5, r3
 80072de:	f04f 0000 	mov.w	r0, #0
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	00d9      	lsls	r1, r3, #3
 80072e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072ec:	00d0      	lsls	r0, r2, #3
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	eb12 0804 	adds.w	r8, r2, r4
 80072f6:	eb43 0905 	adc.w	r9, r3, r5
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	008b      	lsls	r3, r1, #2
 800730e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007312:	0082      	lsls	r2, r0, #2
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f8 ff82 	bl	8000220 <__aeabi_uldivmod>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4b49      	ldr	r3, [pc, #292]	; (8007448 <UART_SetConfig+0x38c>)
 8007322:	fba3 2302 	umull	r2, r3, r3, r2
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	011e      	lsls	r6, r3, #4
 800732a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800732c:	4618      	mov	r0, r3
 800732e:	f04f 0100 	mov.w	r1, #0
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	1894      	adds	r4, r2, r2
 8007338:	60bc      	str	r4, [r7, #8]
 800733a:	415b      	adcs	r3, r3
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007342:	1812      	adds	r2, r2, r0
 8007344:	eb41 0303 	adc.w	r3, r1, r3
 8007348:	f04f 0400 	mov.w	r4, #0
 800734c:	f04f 0500 	mov.w	r5, #0
 8007350:	00dd      	lsls	r5, r3, #3
 8007352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007356:	00d4      	lsls	r4, r2, #3
 8007358:	4622      	mov	r2, r4
 800735a:	462b      	mov	r3, r5
 800735c:	1814      	adds	r4, r2, r0
 800735e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007360:	414b      	adcs	r3, r1
 8007362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	008b      	lsls	r3, r1, #2
 8007378:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800737c:	0082      	lsls	r2, r0, #2
 800737e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007382:	f7f8 ff4d 	bl	8000220 <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4b2f      	ldr	r3, [pc, #188]	; (8007448 <UART_SetConfig+0x38c>)
 800738c:	fba3 1302 	umull	r1, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	2164      	movs	r1, #100	; 0x64
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	3332      	adds	r3, #50	; 0x32
 800739e:	4a2a      	ldr	r2, [pc, #168]	; (8007448 <UART_SetConfig+0x38c>)
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073aa:	441e      	add	r6, r3
 80073ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ae:	4618      	mov	r0, r3
 80073b0:	f04f 0100 	mov.w	r1, #0
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	1894      	adds	r4, r2, r2
 80073ba:	603c      	str	r4, [r7, #0]
 80073bc:	415b      	adcs	r3, r3
 80073be:	607b      	str	r3, [r7, #4]
 80073c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c4:	1812      	adds	r2, r2, r0
 80073c6:	eb41 0303 	adc.w	r3, r1, r3
 80073ca:	f04f 0400 	mov.w	r4, #0
 80073ce:	f04f 0500 	mov.w	r5, #0
 80073d2:	00dd      	lsls	r5, r3, #3
 80073d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073d8:	00d4      	lsls	r4, r2, #3
 80073da:	4622      	mov	r2, r4
 80073dc:	462b      	mov	r3, r5
 80073de:	eb12 0a00 	adds.w	sl, r2, r0
 80073e2:	eb43 0b01 	adc.w	fp, r3, r1
 80073e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f04f 0100 	mov.w	r1, #0
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	008b      	lsls	r3, r1, #2
 80073fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073fe:	0082      	lsls	r2, r0, #2
 8007400:	4650      	mov	r0, sl
 8007402:	4659      	mov	r1, fp
 8007404:	f7f8 ff0c 	bl	8000220 <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <UART_SetConfig+0x38c>)
 800740e:	fba3 1302 	umull	r1, r3, r3, r2
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	2164      	movs	r1, #100	; 0x64
 8007416:	fb01 f303 	mul.w	r3, r1, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	011b      	lsls	r3, r3, #4
 800741e:	3332      	adds	r3, #50	; 0x32
 8007420:	4a09      	ldr	r2, [pc, #36]	; (8007448 <UART_SetConfig+0x38c>)
 8007422:	fba2 2303 	umull	r2, r3, r2, r3
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	f003 020f 	and.w	r2, r3, #15
 800742c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4432      	add	r2, r6
 8007432:	609a      	str	r2, [r3, #8]
}
 8007434:	bf00      	nop
 8007436:	377c      	adds	r7, #124	; 0x7c
 8007438:	46bd      	mov	sp, r7
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743e:	bf00      	nop
 8007440:	40011000 	.word	0x40011000
 8007444:	40011400 	.word	0x40011400
 8007448:	51eb851f 	.word	0x51eb851f

0800744c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800744c:	b084      	sub	sp, #16
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	f107 001c 	add.w	r0, r7, #28
 800745a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b01      	cmp	r3, #1
 8007462:	d122      	bne.n	80074aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 fac0 	bl	8008a24 <USB_CoreReset>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	e01a      	b.n	80074e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fab4 	bl	8008a24 <USB_CoreReset>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
 80074d2:	e005      	b.n	80074e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10b      	bne.n	80074fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f043 0206 	orr.w	r2, r3, #6
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750a:	b004      	add	sp, #16
 800750c:	4770      	bx	lr
	...

08007510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d165      	bne.n	80075f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	4a41      	ldr	r2, [pc, #260]	; (800762c <USB_SetTurnaroundTime+0x11c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d906      	bls.n	800753a <USB_SetTurnaroundTime+0x2a>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a40      	ldr	r2, [pc, #256]	; (8007630 <USB_SetTurnaroundTime+0x120>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d202      	bcs.n	800753a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007534:	230f      	movs	r3, #15
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	e062      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4a3c      	ldr	r2, [pc, #240]	; (8007630 <USB_SetTurnaroundTime+0x120>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d306      	bcc.n	8007550 <USB_SetTurnaroundTime+0x40>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <USB_SetTurnaroundTime+0x124>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d202      	bcs.n	8007550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800754a:	230e      	movs	r3, #14
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e057      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	4a38      	ldr	r2, [pc, #224]	; (8007634 <USB_SetTurnaroundTime+0x124>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d306      	bcc.n	8007566 <USB_SetTurnaroundTime+0x56>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a37      	ldr	r2, [pc, #220]	; (8007638 <USB_SetTurnaroundTime+0x128>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d202      	bcs.n	8007566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007560:	230d      	movs	r3, #13
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e04c      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4a33      	ldr	r2, [pc, #204]	; (8007638 <USB_SetTurnaroundTime+0x128>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d306      	bcc.n	800757c <USB_SetTurnaroundTime+0x6c>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4a32      	ldr	r2, [pc, #200]	; (800763c <USB_SetTurnaroundTime+0x12c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d802      	bhi.n	800757c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007576:	230c      	movs	r3, #12
 8007578:	617b      	str	r3, [r7, #20]
 800757a:	e041      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4a2f      	ldr	r2, [pc, #188]	; (800763c <USB_SetTurnaroundTime+0x12c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d906      	bls.n	8007592 <USB_SetTurnaroundTime+0x82>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a2e      	ldr	r2, [pc, #184]	; (8007640 <USB_SetTurnaroundTime+0x130>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d802      	bhi.n	8007592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800758c:	230b      	movs	r3, #11
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e036      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a2a      	ldr	r2, [pc, #168]	; (8007640 <USB_SetTurnaroundTime+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d906      	bls.n	80075a8 <USB_SetTurnaroundTime+0x98>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a29      	ldr	r2, [pc, #164]	; (8007644 <USB_SetTurnaroundTime+0x134>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d802      	bhi.n	80075a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80075a2:	230a      	movs	r3, #10
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e02b      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4a26      	ldr	r2, [pc, #152]	; (8007644 <USB_SetTurnaroundTime+0x134>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d906      	bls.n	80075be <USB_SetTurnaroundTime+0xae>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a25      	ldr	r2, [pc, #148]	; (8007648 <USB_SetTurnaroundTime+0x138>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d202      	bcs.n	80075be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80075b8:	2309      	movs	r3, #9
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	e020      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	4a21      	ldr	r2, [pc, #132]	; (8007648 <USB_SetTurnaroundTime+0x138>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d306      	bcc.n	80075d4 <USB_SetTurnaroundTime+0xc4>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <USB_SetTurnaroundTime+0x13c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d802      	bhi.n	80075d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075ce:	2308      	movs	r3, #8
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e015      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	; (800764c <USB_SetTurnaroundTime+0x13c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d906      	bls.n	80075ea <USB_SetTurnaroundTime+0xda>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <USB_SetTurnaroundTime+0x140>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d202      	bcs.n	80075ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075e4:	2307      	movs	r3, #7
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e00a      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075ea:	2306      	movs	r3, #6
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e007      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075f6:	2309      	movs	r3, #9
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e001      	b.n	8007600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075fc:	2309      	movs	r3, #9
 80075fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	00d8acbf 	.word	0x00d8acbf
 8007630:	00e4e1c0 	.word	0x00e4e1c0
 8007634:	00f42400 	.word	0x00f42400
 8007638:	01067380 	.word	0x01067380
 800763c:	011a499f 	.word	0x011a499f
 8007640:	01312cff 	.word	0x01312cff
 8007644:	014ca43f 	.word	0x014ca43f
 8007648:	016e3600 	.word	0x016e3600
 800764c:	01a6ab1f 	.word	0x01a6ab1f
 8007650:	01e84800 	.word	0x01e84800

08007654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f043 0201 	orr.w	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b083      	sub	sp, #12
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f023 0201 	bic.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076b0:	78fb      	ldrb	r3, [r7, #3]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d106      	bne.n	80076c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60da      	str	r2, [r3, #12]
 80076c2:	e00b      	b.n	80076dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	e001      	b.n	80076dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e003      	b.n	80076e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80076dc:	2032      	movs	r0, #50	; 0x32
 80076de:	f7fb f931 	bl	8002944 <HAL_Delay>

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076ec:	b084      	sub	sp, #16
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	e009      	b.n	8007720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3340      	adds	r3, #64	; 0x40
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	2200      	movs	r2, #0
 8007718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b0e      	cmp	r3, #14
 8007724:	d9f2      	bls.n	800770c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d11c      	bne.n	8007766 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800773a:	f043 0302 	orr.w	r3, r3, #2
 800773e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e005      	b.n	8007772 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007778:	461a      	mov	r2, r3
 800777a:	2300      	movs	r3, #0
 800777c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007784:	4619      	mov	r1, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	461a      	mov	r2, r3
 800778e:	680b      	ldr	r3, [r1, #0]
 8007790:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007794:	2b01      	cmp	r3, #1
 8007796:	d10c      	bne.n	80077b2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d104      	bne.n	80077a8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800779e:	2100      	movs	r1, #0
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f949 	bl	8007a38 <USB_SetDevSpeed>
 80077a6:	e008      	b.n	80077ba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077a8:	2101      	movs	r1, #1
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f944 	bl	8007a38 <USB_SetDevSpeed>
 80077b0:	e003      	b.n	80077ba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077b2:	2103      	movs	r1, #3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f93f 	bl	8007a38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ba:	2110      	movs	r1, #16
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8f3 	bl	80079a8 <USB_FlushTxFifo>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f911 	bl	80079f4 <USB_FlushRxFifo>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e2:	461a      	mov	r2, r3
 80077e4:	2300      	movs	r3, #0
 80077e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ee:	461a      	mov	r2, r3
 80077f0:	2300      	movs	r3, #0
 80077f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	461a      	mov	r2, r3
 80077fc:	2300      	movs	r3, #0
 80077fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	e043      	b.n	800788e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800781c:	d118      	bne.n	8007850 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	461a      	mov	r2, r3
 8007832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	e013      	b.n	8007862 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007846:	461a      	mov	r2, r3
 8007848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	e008      	b.n	8007862 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	461a      	mov	r2, r3
 800785e:	2300      	movs	r3, #0
 8007860:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786e:	461a      	mov	r2, r3
 8007870:	2300      	movs	r3, #0
 8007872:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	461a      	mov	r2, r3
 8007882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3301      	adds	r3, #1
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	429a      	cmp	r2, r3
 8007894:	d3b7      	bcc.n	8007806 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	e043      	b.n	8007924 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b2:	d118      	bne.n	80078e6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c6:	461a      	mov	r2, r3
 80078c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e013      	b.n	80078f8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	461a      	mov	r2, r3
 80078de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	e008      	b.n	80078f8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	461a      	mov	r2, r3
 80078f4:	2300      	movs	r3, #0
 80078f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	461a      	mov	r2, r3
 8007906:	2300      	movs	r3, #0
 8007908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007916:	461a      	mov	r2, r3
 8007918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800791c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3301      	adds	r3, #1
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d3b7      	bcc.n	800789c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800793a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800793e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800794c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800794e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f043 0210 	orr.w	r2, r3, #16
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <USB_DevInit+0x2b8>)
 8007966:	4313      	orrs	r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f043 0208 	orr.w	r2, r3, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800797e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d107      	bne.n	8007994 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800798c:	f043 0304 	orr.w	r3, r3, #4
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079a0:	b004      	add	sp, #16
 80079a2:	4770      	bx	lr
 80079a4:	803c3800 	.word	0x803c3800

080079a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	f043 0220 	orr.w	r2, r3, #32
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <USB_FlushTxFifo+0x48>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d901      	bls.n	80079d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e006      	b.n	80079e2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d0f0      	beq.n	80079c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	00030d40 	.word	0x00030d40

080079f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2210      	movs	r2, #16
 8007a04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4a09      	ldr	r2, [pc, #36]	; (8007a34 <USB_FlushRxFifo+0x40>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d901      	bls.n	8007a18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e006      	b.n	8007a26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b10      	cmp	r3, #16
 8007a22:	d0f0      	beq.n	8007a06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	00030d40 	.word	0x00030d40

08007a38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0306 	and.w	r3, r3, #6
 8007a82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
 8007a8e:	e00a      	b.n	8007aa6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d002      	beq.n	8007a9c <USB_GetDevSpeed+0x32>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b06      	cmp	r3, #6
 8007a9a:	d102      	bne.n	8007aa2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	e001      	b.n	8007aa6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007aa2:	230f      	movs	r3, #15
 8007aa4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d13a      	bne.n	8007b46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	68f9      	ldr	r1, [r7, #12]
 8007aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aee:	4313      	orrs	r3, r2
 8007af0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d155      	bne.n	8007bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	78db      	ldrb	r3, [r3, #3]
 8007b22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	059b      	lsls	r3, r3, #22
 8007b2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e036      	b.n	8007bb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4c:	69da      	ldr	r2, [r3, #28]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	2101      	movs	r1, #1
 8007b58:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5c:	041b      	lsls	r3, r3, #16
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b64:	4313      	orrs	r3, r2
 8007b66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d11a      	bne.n	8007bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	78db      	ldrb	r3, [r3, #3]
 8007b98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	0151      	lsls	r1, r2, #5
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d161      	bne.n	8007ca4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	015a      	lsls	r2, r3, #5
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bf6:	d11f      	bne.n	8007c38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	0151      	lsls	r1, r2, #5
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	440a      	add	r2, r1
 8007c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	f003 030f 	and.w	r3, r3, #15
 8007c48:	2101      	movs	r1, #1
 8007c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	68f9      	ldr	r1, [r7, #12]
 8007c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c58:	4013      	ands	r3, r2
 8007c5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	69da      	ldr	r2, [r3, #28]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	f003 030f 	and.w	r3, r3, #15
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	43db      	mvns	r3, r3
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	0159      	lsls	r1, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	440b      	add	r3, r1
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4b35      	ldr	r3, [pc, #212]	; (8007d74 <USB_DeactivateEndpoint+0x1b0>)
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	600b      	str	r3, [r1, #0]
 8007ca2:	e060      	b.n	8007d66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cba:	d11f      	bne.n	8007cfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	041b      	lsls	r3, r3, #16
 8007d14:	43db      	mvns	r3, r3
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d26:	69da      	ldr	r2, [r3, #28]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	2101      	movs	r1, #1
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	68f9      	ldr	r1, [r7, #12]
 8007d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d40:	4013      	ands	r3, r2
 8007d42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	0159      	lsls	r1, r3, #5
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	440b      	add	r3, r1
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <USB_DeactivateEndpoint+0x1b4>)
 8007d62:	4013      	ands	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	ec337800 	.word	0xec337800
 8007d78:	eff37800 	.word	0xeff37800

08007d7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	785b      	ldrb	r3, [r3, #1]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	f040 815c 	bne.w	8008056 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d132      	bne.n	8007e0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	69fa      	ldr	r2, [r7, #28]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e04:	0cdb      	lsrs	r3, r3, #19
 8007e06:	04db      	lsls	r3, r3, #19
 8007e08:	6113      	str	r3, [r2, #16]
 8007e0a:	e074      	b.n	8007ef6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	0151      	lsls	r1, r2, #5
 8007e1e:	69fa      	ldr	r2, [r7, #28]
 8007e20:	440a      	add	r2, r1
 8007e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e26:	0cdb      	lsrs	r3, r3, #19
 8007e28:	04db      	lsls	r3, r3, #19
 8007e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e46:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e4a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	691a      	ldr	r2, [r3, #16]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	440b      	add	r3, r1
 8007e68:	1e59      	subs	r1, r3, #1
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e72:	04d9      	lsls	r1, r3, #19
 8007e74:	4b9d      	ldr	r3, [pc, #628]	; (80080ec <USB_EPStartXfer+0x370>)
 8007e76:	400b      	ands	r3, r1
 8007e78:	69b9      	ldr	r1, [r7, #24]
 8007e7a:	0148      	lsls	r0, r1, #5
 8007e7c:	69f9      	ldr	r1, [r7, #28]
 8007e7e:	4401      	add	r1, r0
 8007e80:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e84:	4313      	orrs	r3, r2
 8007e86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e9e:	69b9      	ldr	r1, [r7, #24]
 8007ea0:	0148      	lsls	r0, r1, #5
 8007ea2:	69f9      	ldr	r1, [r7, #28]
 8007ea4:	4401      	add	r1, r0
 8007ea6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	78db      	ldrb	r3, [r3, #3]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d11f      	bne.n	8007ef6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	0151      	lsls	r1, r2, #5
 8007ec8:	69fa      	ldr	r2, [r7, #28]
 8007eca:	440a      	add	r2, r1
 8007ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ed4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	015a      	lsls	r2, r3, #5
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	0151      	lsls	r1, r2, #5
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	440a      	add	r2, r1
 8007eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ef4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d14b      	bne.n	8007f94 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	461a      	mov	r2, r3
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	78db      	ldrb	r3, [r3, #3]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d128      	bne.n	8007f72 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d110      	bne.n	8007f52 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	e00f      	b.n	8007f72 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	0151      	lsls	r1, r2, #5
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	440a      	add	r2, r1
 8007f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f70:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	e12f      	b.n	80081f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	0151      	lsls	r1, r2, #5
 8007fa6:	69fa      	ldr	r2, [r7, #28]
 8007fa8:	440a      	add	r2, r1
 8007faa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fb2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	78db      	ldrb	r3, [r3, #3]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d015      	beq.n	8007fe8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8117 	beq.w	80081f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fdc:	69f9      	ldr	r1, [r7, #28]
 8007fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	634b      	str	r3, [r1, #52]	; 0x34
 8007fe6:	e105      	b.n	80081f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d110      	bne.n	800801a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008012:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	e00f      	b.n	800803a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008038:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	68d9      	ldr	r1, [r3, #12]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	781a      	ldrb	r2, [r3, #0]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	b298      	uxth	r0, r3
 8008048:	79fb      	ldrb	r3, [r7, #7]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	4603      	mov	r3, r0
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fa2b 	bl	80084aa <USB_WritePacket>
 8008054:	e0ce      	b.n	80081f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	015a      	lsls	r2, r3, #5
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	4413      	add	r3, r2
 800805e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	0151      	lsls	r1, r2, #5
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	440a      	add	r2, r1
 800806c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008070:	0cdb      	lsrs	r3, r3, #19
 8008072:	04db      	lsls	r3, r3, #19
 8008074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	440a      	add	r2, r1
 800808c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008090:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008094:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008098:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d126      	bne.n	80080f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080b8:	69b9      	ldr	r1, [r7, #24]
 80080ba:	0148      	lsls	r0, r1, #5
 80080bc:	69f9      	ldr	r1, [r7, #28]
 80080be:	4401      	add	r1, r0
 80080c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080c4:	4313      	orrs	r3, r2
 80080c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	0151      	lsls	r1, r2, #5
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	440a      	add	r2, r1
 80080de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080e6:	6113      	str	r3, [r2, #16]
 80080e8:	e036      	b.n	8008158 <USB_EPStartXfer+0x3dc>
 80080ea:	bf00      	nop
 80080ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4413      	add	r3, r2
 80080fa:	1e5a      	subs	r2, r3, #1
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	fbb2 f3f3 	udiv	r3, r2, r3
 8008104:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	8afb      	ldrh	r3, [r7, #22]
 8008116:	04d9      	lsls	r1, r3, #19
 8008118:	4b39      	ldr	r3, [pc, #228]	; (8008200 <USB_EPStartXfer+0x484>)
 800811a:	400b      	ands	r3, r1
 800811c:	69b9      	ldr	r1, [r7, #24]
 800811e:	0148      	lsls	r0, r1, #5
 8008120:	69f9      	ldr	r1, [r7, #28]
 8008122:	4401      	add	r1, r0
 8008124:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008128:	4313      	orrs	r3, r2
 800812a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	8af9      	ldrh	r1, [r7, #22]
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008148:	69b9      	ldr	r1, [r7, #24]
 800814a:	0148      	lsls	r0, r1, #5
 800814c:	69f9      	ldr	r1, [r7, #28]
 800814e:	4401      	add	r1, r0
 8008150:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008154:	4313      	orrs	r3, r2
 8008156:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d10d      	bne.n	800817a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	68d9      	ldr	r1, [r3, #12]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008176:	460a      	mov	r2, r1
 8008178:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	78db      	ldrb	r3, [r3, #3]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d128      	bne.n	80081d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d110      	bne.n	80081b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	0151      	lsls	r1, r2, #5
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	440a      	add	r2, r1
 80081a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	e00f      	b.n	80081d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	69fa      	ldr	r2, [r7, #28]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	0151      	lsls	r1, r2, #5
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	440a      	add	r2, r1
 80081ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3720      	adds	r7, #32
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	1ff80000 	.word	0x1ff80000

08008204 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008204:	b480      	push	{r7}
 8008206:	b087      	sub	sp, #28
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	785b      	ldrb	r3, [r3, #1]
 8008220:	2b01      	cmp	r3, #1
 8008222:	f040 80cd 	bne.w	80083c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d132      	bne.n	8008294 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	0151      	lsls	r1, r2, #5
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	440a      	add	r2, r1
 8008244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008248:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800824c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828c:	0cdb      	lsrs	r3, r3, #19
 800828e:	04db      	lsls	r3, r3, #19
 8008290:	6113      	str	r3, [r2, #16]
 8008292:	e04e      	b.n	8008332 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ae:	0cdb      	lsrs	r3, r3, #19
 80082b0:	04db      	lsls	r3, r3, #19
 80082b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	0151      	lsls	r1, r2, #5
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	440a      	add	r2, r1
 80082ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	695a      	ldr	r2, [r3, #20]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d903      	bls.n	80082ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	440a      	add	r2, r1
 8008302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800830a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008322:	6939      	ldr	r1, [r7, #16]
 8008324:	0148      	lsls	r0, r1, #5
 8008326:	6979      	ldr	r1, [r7, #20]
 8008328:	4401      	add	r1, r0
 800832a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800832e:	4313      	orrs	r3, r2
 8008330:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d11e      	bne.n	8008376 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d009      	beq.n	8008354 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	440a      	add	r2, r1
 800836a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	e092      	b.n	800849c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008394:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d07e      	beq.n	800849c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	2101      	movs	r1, #1
 80083b0:	fa01 f303 	lsl.w	r3, r1, r3
 80083b4:	6979      	ldr	r1, [r7, #20]
 80083b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ba:	4313      	orrs	r3, r2
 80083bc:	634b      	str	r3, [r1, #52]	; 0x34
 80083be:	e06d      	b.n	800849c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083da:	0cdb      	lsrs	r3, r3, #19
 80083dc:	04db      	lsls	r3, r3, #19
 80083de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008402:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	0151      	lsls	r1, r2, #5
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	440a      	add	r2, r1
 800842a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800842e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008432:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008440:	691a      	ldr	r2, [r3, #16]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800844a:	6939      	ldr	r1, [r7, #16]
 800844c:	0148      	lsls	r0, r1, #5
 800844e:	6979      	ldr	r1, [r7, #20]
 8008450:	4401      	add	r1, r0
 8008452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008456:	4313      	orrs	r3, r2
 8008458:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800845a:	79fb      	ldrb	r3, [r7, #7]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d10d      	bne.n	800847c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d009      	beq.n	800847c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	68d9      	ldr	r1, [r3, #12]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008478:	460a      	mov	r2, r1
 800847a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	440a      	add	r2, r1
 8008492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008496:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800849a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b089      	sub	sp, #36	; 0x24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	4611      	mov	r1, r2
 80084b6:	461a      	mov	r2, r3
 80084b8:	460b      	mov	r3, r1
 80084ba:	71fb      	strb	r3, [r7, #7]
 80084bc:	4613      	mov	r3, r2
 80084be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80084c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d11a      	bne.n	8008506 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80084d0:	88bb      	ldrh	r3, [r7, #4]
 80084d2:	3303      	adds	r3, #3
 80084d4:	089b      	lsrs	r3, r3, #2
 80084d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80084d8:	2300      	movs	r3, #0
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	e00f      	b.n	80084fe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	031a      	lsls	r2, r3, #12
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ea:	461a      	mov	r2, r3
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	3304      	adds	r3, #4
 80084f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	3301      	adds	r3, #1
 80084fc:	61bb      	str	r3, [r7, #24]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	429a      	cmp	r2, r3
 8008504:	d3eb      	bcc.n	80084de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3724      	adds	r7, #36	; 0x24
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008514:	b480      	push	{r7}
 8008516:	b089      	sub	sp, #36	; 0x24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	3303      	adds	r3, #3
 800852e:	089b      	lsrs	r3, r3, #2
 8008530:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008532:	2300      	movs	r3, #0
 8008534:	61bb      	str	r3, [r7, #24]
 8008536:	e00b      	b.n	8008550 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	601a      	str	r2, [r3, #0]
    pDest++;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	3304      	adds	r3, #4
 8008548:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	3301      	adds	r3, #1
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	429a      	cmp	r2, r3
 8008556:	d3ef      	bcc.n	8008538 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008558:	69fb      	ldr	r3, [r7, #28]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008566:	b480      	push	{r7}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d12c      	bne.n	80085dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db12      	blt.n	80085ba <USB_EPSetStall+0x54>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00f      	beq.n	80085ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	e02b      	b.n	8008634 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	db12      	blt.n	8008614 <USB_EPSetStall+0xae>
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00f      	beq.n	8008614 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	0151      	lsls	r1, r2, #5
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	440a      	add	r2, r1
 800860a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800860e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008612:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800862e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008642:	b480      	push	{r7}
 8008644:	b085      	sub	sp, #20
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	785b      	ldrb	r3, [r3, #1]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d128      	bne.n	80086b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	440a      	add	r2, r1
 8008674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008678:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800867c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	78db      	ldrb	r3, [r3, #3]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d003      	beq.n	800868e <USB_EPClearStall+0x4c>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	78db      	ldrb	r3, [r3, #3]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d138      	bne.n	8008700 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e027      	b.n	8008700 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	78db      	ldrb	r3, [r3, #3]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d003      	beq.n	80086e0 <USB_EPClearStall+0x9e>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	78db      	ldrb	r3, [r3, #3]
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d10f      	bne.n	8008700 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800870e:	b480      	push	{r7}
 8008710:	b085      	sub	sp, #20
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800872c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008730:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	78fb      	ldrb	r3, [r7, #3]
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008742:	68f9      	ldr	r1, [r7, #12]
 8008744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008748:	4313      	orrs	r3, r2
 800874a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800875a:	b480      	push	{r7}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008774:	f023 0303 	bic.w	r3, r3, #3
 8008778:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008788:	f023 0302 	bic.w	r3, r3, #2
 800878c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087b6:	f023 0303 	bic.w	r3, r3, #3
 80087ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ca:	f043 0302 	orr.w	r3, r3, #2
 80087ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80087de:	b480      	push	{r7}
 80087e0:	b085      	sub	sp, #20
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4013      	ands	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087f6:	68fb      	ldr	r3, [r7, #12]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	0c1b      	lsrs	r3, r3, #16
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	4013      	ands	r3, r2
 800885a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	b29b      	uxth	r3, r3
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	4013      	ands	r3, r2
 8008898:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800889a:	68bb      	ldr	r3, [r7, #8]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	fa22 f303 	lsr.w	r3, r2, r3
 80088d8:	01db      	lsls	r3, r3, #7
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	4313      	orrs	r3, r2
 80088e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4013      	ands	r3, r2
 80088f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088f6:	68bb      	ldr	r3, [r7, #8]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	f003 0301 	and.w	r3, r3, #1
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800893e:	f023 0307 	bic.w	r3, r3, #7
 8008942:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008956:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	460b      	mov	r3, r1
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	333c      	adds	r3, #60	; 0x3c
 800897e:	3304      	adds	r3, #4
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	4a26      	ldr	r2, [pc, #152]	; (8008a20 <USB_EP0_OutStart+0xb8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d90a      	bls.n	80089a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800899c:	d101      	bne.n	80089a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	e037      	b.n	8008a12 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d0:	f043 0318 	orr.w	r3, r3, #24
 80089d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80089e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80089ea:	7afb      	ldrb	r3, [r7, #11]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d10f      	bne.n	8008a10 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f6:	461a      	mov	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a0a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008a0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	371c      	adds	r7, #28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	4f54300a 	.word	0x4f54300a

08008a24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <USB_CoreReset+0x64>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d901      	bls.n	8008a42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e01b      	b.n	8008a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	daf2      	bge.n	8008a30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f043 0201 	orr.w	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4a09      	ldr	r2, [pc, #36]	; (8008a88 <USB_CoreReset+0x64>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d901      	bls.n	8008a6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e006      	b.n	8008a7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d0f0      	beq.n	8008a5a <USB_CoreReset+0x36>

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	00030d40 	.word	0x00030d40

08008a8c <USBD_HID_Init>:
  * @retval status
  */
/* We have to add the dataout/ep_out function here to get USB pipe data out
 * This is only used with XBCD or THPS 2, every other XBOX game sends rumble through control requests */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008a98:	2010      	movs	r0, #16
 8008a9a:	f004 fdfb 	bl	800d694 <USBD_static_malloc>
 8008a9e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <USBD_HID_Init+0x26>
  {
	  //usb_failed = 1;
    pdev->pClassData = NULL;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e033      	b.n	8008b1a <USBD_HID_Init+0x8e>
  }

  pdev->pClassData = (void *)hhid;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7c1b      	ldrb	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d107      	bne.n	8008ad2 <USBD_HID_Init+0x46>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2207      	movs	r2, #7
 8008acc:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
 8008ad0:	e006      	b.n	8008ae0 <USBD_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2204      	movs	r2, #4
 8008adc:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	2181      	movs	r1, #129	; 0x81
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f004 fc75 	bl	800d3d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8008af2:	2306      	movs	r3, #6
 8008af4:	2203      	movs	r2, #3
 8008af6:	2102      	movs	r1, #2
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f004 fc6c 	bl	800d3d6 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  (void)USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR,(uint8_t*)rx_buf, HID_EPOUT_SIZE);
 8008b06:	2306      	movs	r3, #6
 8008b08:	4a06      	ldr	r2, [pc, #24]	; (8008b24 <USBD_HID_Init+0x98>)
 8008b0a:	2102      	movs	r1, #2
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f004 fd51 	bl	800d5b4 <USBD_LL_PrepareReceive>

  hhid->state = HID_IDLE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	731a      	strb	r2, [r3, #12]

  //((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();

  /* Prepare Out endpoint to receive 1st packet */

  return (uint8_t)USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	200001c8 	.word	0x200001c8

08008b28 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	460b      	mov	r3, r1
 8008b32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8008b34:	2181      	movs	r1, #129	; 0x81
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f004 fc73 	bl	800d422 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, HID_EPOUT_ADDR);
 8008b48:	2102      	movs	r1, #2
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f004 fc69 	bl	800d422 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
  pdev->ep_out[HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <USBD_HID_DeInit+0x56>
  {
    (void)USBD_free(pdev->pClassData);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b70:	4618      	mov	r0, r3
 8008b72:	f004 fd9d 	bl	800d6b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]


  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b98:	61bb      	str	r3, [r7, #24]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	77fb      	strb	r3, [r7, #31]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	81fb      	strh	r3, [r7, #14]

  if (hhid == NULL)
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <USBD_HID_Setup+0x2a>
  {
	  usb_failed = 1;
 8008ba8:	4b9f      	ldr	r3, [pc, #636]	; (8008e28 <USBD_HID_Setup+0x2a0>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	701a      	strb	r2, [r3, #0]
    return (uint8_t)USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e136      	b.n	8008e20 <USBD_HID_Setup+0x298>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bba:	2b40      	cmp	r3, #64	; 0x40
 8008bbc:	f000 80e1 	beq.w	8008d82 <USBD_HID_Setup+0x1fa>
 8008bc0:	2b40      	cmp	r3, #64	; 0x40
 8008bc2:	f200 8124 	bhi.w	8008e0e <USBD_HID_Setup+0x286>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d058      	beq.n	8008c7c <USBD_HID_Setup+0xf4>
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	f040 811f 	bne.w	8008e0e <USBD_HID_Setup+0x286>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	3b02      	subs	r3, #2
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d848      	bhi.n	8008c6c <USBD_HID_Setup+0xe4>
 8008bda:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <USBD_HID_Setup+0x58>)
 8008bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be0:	08008c37 	.word	0x08008c37
 8008be4:	08008c17 	.word	0x08008c17
 8008be8:	08008c6d 	.word	0x08008c6d
 8008bec:	08008c6d 	.word	0x08008c6d
 8008bf0:	08008c6d 	.word	0x08008c6d
 8008bf4:	08008c6d 	.word	0x08008c6d
 8008bf8:	08008c6d 	.word	0x08008c6d
 8008bfc:	08008c47 	.word	0x08008c47
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c09 	.word	0x08008c09
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	885b      	ldrh	r3, [r3, #2]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	461a      	mov	r2, r3
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	601a      	str	r2, [r3, #0]
          break;
 8008c14:	e031      	b.n	8008c7a <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fada 	bl	800a1d6 <USBD_CtlSendData>
          break;
 8008c22:	e02a      	b.n	8008c7a <USBD_HID_Setup+0xf2>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	461a      	mov	r2, r3
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	605a      	str	r2, [r3, #4]
          break;
 8008c34:	e021      	b.n	8008c7a <USBD_HID_Setup+0xf2>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 fac9 	bl	800a1d6 <USBD_CtlSendData>
          break;
 8008c44:	e019      	b.n	8008c7a <USBD_HID_Setup+0xf2>

        /*We need to get Control request data for the rumble data from the XBOX, we have to add this ourselves */
        case HID_REQ_SET_REPORT:
          rumble_flag = 1;
 8008c46:	4b79      	ldr	r3, [pc, #484]	; (8008e2c <USBD_HID_Setup+0x2a4>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_ID = (uint8_t)(req->wValue);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	885b      	ldrh	r3, [r3, #2]
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	4b77      	ldr	r3, [pc, #476]	; (8008e30 <USBD_HID_Setup+0x2a8>)
 8008c54:	701a      	strb	r2, [r3, #0]
          USBD_HID_Report_LENGTH = (uint8_t)(req->wLength);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	b2da      	uxtb	r2, r3
 8008c5c:	4b75      	ldr	r3, [pc, #468]	; (8008e34 <USBD_HID_Setup+0x2ac>)
 8008c5e:	701a      	strb	r2, [r3, #0]
          USBD_CtlPrepareRx (pdev, ctl_report_buf, HID_EPOUT_SIZE);
 8008c60:	2206      	movs	r2, #6
 8008c62:	4975      	ldr	r1, [pc, #468]	; (8008e38 <USBD_HID_Setup+0x2b0>)
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fae2 	bl	800a22e <USBD_CtlPrepareRx>
          break;
 8008c6a:	e006      	b.n	8008c7a <USBD_HID_Setup+0xf2>
//                            (uint8_t *)&Report_buf,
//                            8);
//          break;

        default:
          USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 fa40 	bl	800a0f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	77fb      	strb	r3, [r7, #31]
          break;
 8008c78:	bf00      	nop
      }
      break;
 8008c7a:	e0d0      	b.n	8008e1e <USBD_HID_Setup+0x296>
    case USB_REQ_TYPE_STANDARD:

      switch (req->bRequest)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	785b      	ldrb	r3, [r3, #1]
 8008c80:	2b0b      	cmp	r3, #11
 8008c82:	d875      	bhi.n	8008d70 <USBD_HID_Setup+0x1e8>
 8008c84:	a201      	add	r2, pc, #4	; (adr r2, 8008c8c <USBD_HID_Setup+0x104>)
 8008c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8a:	bf00      	nop
 8008c8c:	08008cbd 	.word	0x08008cbd
 8008c90:	08008d7f 	.word	0x08008d7f
 8008c94:	08008d71 	.word	0x08008d71
 8008c98:	08008d71 	.word	0x08008d71
 8008c9c:	08008d71 	.word	0x08008d71
 8008ca0:	08008d71 	.word	0x08008d71
 8008ca4:	08008ce7 	.word	0x08008ce7
 8008ca8:	08008d71 	.word	0x08008d71
 8008cac:	08008d71 	.word	0x08008d71
 8008cb0:	08008d71 	.word	0x08008d71
 8008cb4:	08008d1f 	.word	0x08008d1f
 8008cb8:	08008d49 	.word	0x08008d49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d107      	bne.n	8008cd8 <USBD_HID_Setup+0x150>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cc8:	f107 030e 	add.w	r3, r7, #14
 8008ccc:	2202      	movs	r2, #2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fa80 	bl	800a1d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cd6:	e053      	b.n	8008d80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fa0a 	bl	800a0f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	77fb      	strb	r3, [r7, #31]
          break;
 8008ce4:	e04c      	b.n	8008d80 <USBD_HID_Setup+0x1f8>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
            pbuf = HID_MOUSE_ReportDesc;
          }
#endif
           if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	2b21      	cmp	r3, #33	; 0x21
 8008cf0:	d10e      	bne.n	8008d10 <USBD_HID_Setup+0x188>
          {
            pbuf = USBD_HID_Desc;
 8008cf2:	4b52      	ldr	r3, [pc, #328]	; (8008e3c <USBD_HID_Setup+0x2b4>)
 8008cf4:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	88db      	ldrh	r3, [r3, #6]
 8008cfa:	2b12      	cmp	r3, #18
 8008cfc:	bf28      	it	cs
 8008cfe:	2312      	movcs	r3, #18
 8008d00:	82fb      	strh	r3, [r7, #22]
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
            break;
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d02:	8afb      	ldrh	r3, [r7, #22]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6939      	ldr	r1, [r7, #16]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f001 fa64 	bl	800a1d6 <USBD_CtlSendData>
          break;
 8008d0e:	e037      	b.n	8008d80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 f9ee 	bl	800a0f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	77fb      	strb	r3, [r7, #31]
            break;
 8008d1c:	e030      	b.n	8008d80 <USBD_HID_Setup+0x1f8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d107      	bne.n	8008d3a <USBD_HID_Setup+0x1b2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 fa4f 	bl	800a1d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d38:	e022      	b.n	8008d80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 f9d9 	bl	800a0f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d42:	2303      	movs	r3, #3
 8008d44:	77fb      	strb	r3, [r7, #31]
          break;
 8008d46:	e01b      	b.n	8008d80 <USBD_HID_Setup+0x1f8>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d106      	bne.n	8008d62 <USBD_HID_Setup+0x1da>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	885b      	ldrh	r3, [r3, #2]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d60:	e00e      	b.n	8008d80 <USBD_HID_Setup+0x1f8>
            USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f9c5 	bl	800a0f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	77fb      	strb	r3, [r7, #31]
          break;
 8008d6e:	e007      	b.n	8008d80 <USBD_HID_Setup+0x1f8>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 f9be 	bl	800a0f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	77fb      	strb	r3, [r7, #31]
          break;
 8008d7c:	e000      	b.n	8008d80 <USBD_HID_Setup+0x1f8>
          break;
 8008d7e:	bf00      	nop
      }
      break;
 8008d80:	e04d      	b.n	8008e1e <USBD_HID_Setup+0x296>
    /*This is for the og XBOX, this is the custom vendor request
     * We intercept these and return either the controller's capabilities
     * This is equivalent to the USB HID Descriptor which would normally be used for most devices */
    case (0xC1 & USB_REQ_TYPE_MASK):
    	 hid_setup_ran++;
 8008d82:	4b2f      	ldr	r3, [pc, #188]	; (8008e40 <USBD_HID_Setup+0x2b8>)
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	4b2d      	ldr	r3, [pc, #180]	; (8008e40 <USBD_HID_Setup+0x2b8>)
 8008d8c:	701a      	strb	r2, [r3, #0]
    	if(req->bRequest == 0x06 && req->wValue == 0x4200) {
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	785b      	ldrb	r3, [r3, #1]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d10f      	bne.n	8008db6 <USBD_HID_Setup+0x22e>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	885b      	ldrh	r3, [r3, #2]
 8008d9a:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8008d9e:	d10a      	bne.n	8008db6 <USBD_HID_Setup+0x22e>
    		len = 16;
 8008da0:	2310      	movs	r3, #16
 8008da2:	82fb      	strh	r3, [r7, #22]
    		pbuf = USBD_HID_Desc;
 8008da4:	4b25      	ldr	r3, [pc, #148]	; (8008e3c <USBD_HID_Setup+0x2b4>)
 8008da6:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008da8:	8afb      	ldrh	r3, [r7, #22]
 8008daa:	461a      	mov	r2, r3
 8008dac:	6939      	ldr	r1, [r7, #16]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fa11 	bl	800a1d6 <USBD_CtlSendData>
 8008db4:	e02a      	b.n	8008e0c <USBD_HID_Setup+0x284>
    	}
    	else if(req->bRequest == 0x01 && req->wValue == 0x0100) {
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	785b      	ldrb	r3, [r3, #1]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d10f      	bne.n	8008dde <USBD_HID_Setup+0x256>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc6:	d10a      	bne.n	8008dde <USBD_HID_Setup+0x256>
    		len = 20;
 8008dc8:	2314      	movs	r3, #20
 8008dca:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_IN;
 8008dcc:	4b1d      	ldr	r3, [pc, #116]	; (8008e44 <USBD_HID_Setup+0x2bc>)
 8008dce:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008dd0:	8afb      	ldrh	r3, [r7, #22]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6939      	ldr	r1, [r7, #16]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f001 f9fd 	bl	800a1d6 <USBD_CtlSendData>
 8008ddc:	e016      	b.n	8008e0c <USBD_HID_Setup+0x284>
    	}
    	else if (req->bRequest == 0x01 && req->wValue == 0x0200) {
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	785b      	ldrb	r3, [r3, #1]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d11a      	bne.n	8008e1c <USBD_HID_Setup+0x294>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	885b      	ldrh	r3, [r3, #2]
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dee:	d115      	bne.n	8008e1c <USBD_HID_Setup+0x294>
    		rumble_brequest_sent = 1;
 8008df0:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <USBD_HID_Setup+0x2c0>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	701a      	strb	r2, [r3, #0]
    		len = 6;
 8008df6:	2306      	movs	r3, #6
 8008df8:	82fb      	strh	r3, [r7, #22]
    		pbuf = DUKE_HID_CAPABILITIES_OUT;
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <USBD_HID_Setup+0x2c4>)
 8008dfc:	613b      	str	r3, [r7, #16]
    		(void)USBD_CtlSendData(pdev, pbuf, len);
 8008dfe:	8afb      	ldrh	r3, [r7, #22]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6939      	ldr	r1, [r7, #16]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 f9e6 	bl	800a1d6 <USBD_CtlSendData>
    	}
    break;
 8008e0a:	e007      	b.n	8008e1c <USBD_HID_Setup+0x294>
 8008e0c:	e006      	b.n	8008e1c <USBD_HID_Setup+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 f96f 	bl	800a0f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e16:	2303      	movs	r3, #3
 8008e18:	77fb      	strb	r3, [r7, #31]
      break;
 8008e1a:	e000      	b.n	8008e1e <USBD_HID_Setup+0x296>
    break;
 8008e1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3720      	adds	r7, #32
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20000abe 	.word	0x20000abe
 8008e2c:	20000aca 	.word	0x20000aca
 8008e30:	20000ac0 	.word	0x20000ac0
 8008e34:	20000ac1 	.word	0x20000ac1
 8008e38:	20000ac4 	.word	0x20000ac4
 8008e3c:	20000090 	.word	0x20000090
 8008e40:	20000abc 	.word	0x20000abc
 8008e44:	200000ac 	.word	0x200000ac
 8008e48:	20000abf 	.word	0x20000abf
 8008e4c:	200000c0 	.word	0x200000c0

08008e50 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e64:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <USBD_HID_SendReport+0x20>
  {
	  //usb_failed = 1;
    return (uint8_t)USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e013      	b.n	8008e98 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d10c      	bne.n	8008e96 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	7b1b      	ldrb	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d108      	bne.n	8008e96 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2201      	movs	r2, #1
 8008e88:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8008e8a:	88fb      	ldrh	r3, [r7, #6]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	2181      	movs	r1, #129	; 0x81
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f004 fb6e 	bl	800d572 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3718      	adds	r7, #24
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008eae:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000050 	.word	0x20000050

08008ec0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
#if PC_SETUP
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);

  return USBD_HID_CfgHSDesc;
#endif
}
 8008ec8:	bf00      	nop
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
	...

08008ed8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */

static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8008ee6:	4b03      	ldr	r3, [pc, #12]	; (8008ef4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	20000070 	.word	0x20000070

08008ef8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	460b      	mov	r3, r1
 8008f02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USBD_HID_DataOut>:
/* DataOut will only run for THPS 2 or activating rumble in XBCD on a PC */
static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
	dataout_ran++;
 8008f28:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <USBD_HID_DataOut+0x30>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	4b06      	ldr	r3, [pc, #24]	; (8008f4c <USBD_HID_DataOut+0x30>)
 8008f32:	701a      	strb	r2, [r3, #0]
	USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*) (rx_buf), HID_EPOUT_SIZE);
 8008f34:	2306      	movs	r3, #6
 8008f36:	4a06      	ldr	r2, [pc, #24]	; (8008f50 <USBD_HID_DataOut+0x34>)
 8008f38:	2102      	movs	r1, #2
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f004 fb3a 	bl	800d5b4 <USBD_LL_PrepareReceive>
	return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20000abd 	.word	0x20000abd
 8008f50:	200001c8 	.word	0x200001c8

08008f54 <USBD_HID_EP0_RxReady>:
  * @retval status
  */
/*This is to put the rumble data from the USB control requests into rx_buf so we can read that in main
 * This is the standard way XBOX sends rumble data, this different from a PC which would send data through USB Out Pipe */
static uint8_t USBD_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	if (rumble_flag) {
 8008f5c:	4b10      	ldr	r3, [pc, #64]	; (8008fa0 <USBD_HID_EP0_RxReady+0x4c>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d015      	beq.n	8008f90 <USBD_HID_EP0_RxReady+0x3c>
		rumble_flag = 0;
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <USBD_HID_EP0_RxReady+0x4c>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	701a      	strb	r2, [r3, #0]
		if (USBD_HID_Report_LENGTH == HID_EPOUT_SIZE) {
 8008f6a:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <USBD_HID_EP0_RxReady+0x50>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b06      	cmp	r3, #6
 8008f70:	d10e      	bne.n	8008f90 <USBD_HID_EP0_RxReady+0x3c>
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]
 8008f76:	e008      	b.n	8008f8a <USBD_HID_EP0_RxReady+0x36>
				rx_buf[i] = ctl_report_buf[i];
 8008f78:	7bfa      	ldrb	r2, [r7, #15]
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	490a      	ldr	r1, [pc, #40]	; (8008fa8 <USBD_HID_EP0_RxReady+0x54>)
 8008f7e:	5c89      	ldrb	r1, [r1, r2]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <USBD_HID_EP0_RxReady+0x58>)
 8008f82:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < HID_EPOUT_SIZE; i++) {
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
 8008f86:	3301      	adds	r3, #1
 8008f88:	73fb      	strb	r3, [r7, #15]
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b05      	cmp	r3, #5
 8008f8e:	d9f3      	bls.n	8008f78 <USBD_HID_EP0_RxReady+0x24>
			}
		}
	}
	return (uint8_t) USBD_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000aca 	.word	0x20000aca
 8008fa4:	20000ac1 	.word	0x20000ac1
 8008fa8:	20000ac4 	.word	0x20000ac4
 8008fac:	200001c8 	.word	0x200001c8

08008fb0 <USBD_HID_EP0_TxSent>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_HID_EP0_TxSent(USBD_HandleTypeDef *pdev)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
//    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
//                                                              hhid->Report_buf[1]);
//    hhid->IsReportAvailable = 0U;
//  }

  return (uint8_t)USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	220a      	movs	r2, #10
 8008fd4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr
 8008fe4:	200000a0 	.word	0x200000a0

08008fe8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	e01f      	b.n	8009040 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	79fa      	ldrb	r2, [r7, #7]
 8009032:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f004 f967 	bl	800d308 <USBD_LL_Init>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	e016      	b.n	800908e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	f107 020e 	add.w	r2, r7, #14
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	4602      	mov	r2, r0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f004 f97e 	bl	800d3a0 <USBD_LL_Start>
 80090a4:	4603      	mov	r3, r0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	78fa      	ldrb	r2, [r7, #3]
 80090e8:	4611      	mov	r1, r2
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4611      	mov	r1, r2
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
  }

  return USBD_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f000 ff9e 	bl	800a080 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009152:	461a      	mov	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009160:	f003 031f 	and.w	r3, r3, #31
 8009164:	2b02      	cmp	r3, #2
 8009166:	d01a      	beq.n	800919e <USBD_LL_SetupStage+0x72>
 8009168:	2b02      	cmp	r3, #2
 800916a:	d822      	bhi.n	80091b2 <USBD_LL_SetupStage+0x86>
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <USBD_LL_SetupStage+0x4a>
 8009170:	2b01      	cmp	r3, #1
 8009172:	d00a      	beq.n	800918a <USBD_LL_SetupStage+0x5e>
 8009174:	e01d      	b.n	80091b2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa62 	bl	8009648 <USBD_StdDevReq>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
      break;
 8009188:	e020      	b.n	80091cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009190:	4619      	mov	r1, r3
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fad4 	bl	8009740 <USBD_StdItfReq>
 8009198:	4603      	mov	r3, r0
 800919a:	73fb      	strb	r3, [r7, #15]
      break;
 800919c:	e016      	b.n	80091cc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb13 	bl	80097d2 <USBD_StdEPReq>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
      break;
 80091b0:	e00c      	b.n	80091cc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f004 f94d 	bl	800d460 <USBD_LL_StallEP>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]
      break;
 80091ca:	bf00      	nop
  }

  return ret;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b086      	sub	sp, #24
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	460b      	mov	r3, r1
 80091e0:	607a      	str	r2, [r7, #4]
 80091e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d138      	bne.n	800925c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d14a      	bne.n	8009292 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	689a      	ldr	r2, [r3, #8]
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	429a      	cmp	r2, r3
 8009206:	d913      	bls.n	8009230 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	689a      	ldr	r2, [r3, #8]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	1ad2      	subs	r2, r2, r3
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	4293      	cmp	r3, r2
 8009220:	bf28      	it	cs
 8009222:	4613      	movcs	r3, r2
 8009224:	461a      	mov	r2, r3
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 f81d 	bl	800a268 <USBD_CtlContinueRx>
 800922e:	e030      	b.n	8009292 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009236:	b2db      	uxtb	r3, r3
 8009238:	2b03      	cmp	r3, #3
 800923a:	d10b      	bne.n	8009254 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f001 f818 	bl	800a28a <USBD_CtlSendStatus>
 800925a:	e01a      	b.n	8009292 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b03      	cmp	r3, #3
 8009266:	d114      	bne.n	8009292 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00e      	beq.n	8009292 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	7afa      	ldrb	r2, [r7, #11]
 800927e:	4611      	mov	r1, r2
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	4798      	blx	r3
 8009284:	4603      	mov	r3, r0
 8009286:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	e000      	b.n	8009294 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	460b      	mov	r3, r1
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092aa:	7afb      	ldrb	r3, [r7, #11]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d16b      	bne.n	8009388 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3314      	adds	r3, #20
 80092b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d156      	bne.n	800936e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	689a      	ldr	r2, [r3, #8]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d914      	bls.n	80092f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	1ad2      	subs	r2, r2, r3
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	461a      	mov	r2, r3
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 ff92 	bl	800a20c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e8:	2300      	movs	r3, #0
 80092ea:	2200      	movs	r2, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f004 f960 	bl	800d5b4 <USBD_LL_PrepareReceive>
 80092f4:	e03b      	b.n	800936e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d11c      	bne.n	800933c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800930a:	429a      	cmp	r2, r3
 800930c:	d316      	bcc.n	800933c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009318:	429a      	cmp	r2, r3
 800931a:	d20f      	bcs.n	800933c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800931c:	2200      	movs	r2, #0
 800931e:	2100      	movs	r1, #0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 ff73 	bl	800a20c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932e:	2300      	movs	r3, #0
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	68f8      	ldr	r0, [r7, #12]
 8009336:	f004 f93d 	bl	800d5b4 <USBD_LL_PrepareReceive>
 800933a:	e018      	b.n	800936e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b03      	cmp	r3, #3
 8009346:	d10b      	bne.n	8009360 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009360:	2180      	movs	r1, #128	; 0x80
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f004 f87c 	bl	800d460 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 ffa1 	bl	800a2b0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009374:	2b01      	cmp	r3, #1
 8009376:	d122      	bne.n	80093be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7ff fe98 	bl	80090ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009386:	e01a      	b.n	80093be <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b03      	cmp	r3, #3
 8009392:	d114      	bne.n	80093be <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00e      	beq.n	80093be <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	7afa      	ldrb	r2, [r7, #11]
 80093aa:	4611      	mov	r1, r2
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	4798      	blx	r3
 80093b0:	4603      	mov	r3, r0
 80093b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	e000      	b.n	80093c0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e02f      	b.n	800945c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00f      	beq.n	8009426 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	6852      	ldr	r2, [r2, #4]
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	4611      	mov	r1, r2
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009426:	2340      	movs	r3, #64	; 0x40
 8009428:	2200      	movs	r2, #0
 800942a:	2100      	movs	r1, #0
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f003 ffd2 	bl	800d3d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2240      	movs	r2, #64	; 0x40
 800943e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	2200      	movs	r2, #0
 8009446:	2180      	movs	r1, #128	; 0x80
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f003 ffc4 	bl	800d3d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2240      	movs	r2, #64	; 0x40
 8009458:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	78fa      	ldrb	r2, [r7, #3]
 8009474:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009492:	b2da      	uxtb	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2204      	movs	r2, #4
 800949e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d106      	bne.n	80094d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e012      	b.n	800951c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d10b      	bne.n	800951a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	460b      	mov	r3, r1
 800952e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	e014      	b.n	8009568 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b03      	cmp	r3, #3
 8009548:	d10d      	bne.n	8009566 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	4611      	mov	r1, r2
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8009586:	2303      	movs	r3, #3
 8009588:	e014      	b.n	80095b4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b03      	cmp	r3, #3
 8009594:	d10d      	bne.n	80095b2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d007      	beq.n	80095b2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d009      	beq.n	8009600 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6852      	ldr	r2, [r2, #4]
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	4611      	mov	r1, r2
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
  }

  return USBD_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800960a:	b480      	push	{r7}
 800960c:	b087      	sub	sp, #28
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	3301      	adds	r3, #1
 8009620:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009628:	8a3b      	ldrh	r3, [r7, #16]
 800962a:	021b      	lsls	r3, r3, #8
 800962c:	b21a      	sxth	r2, r3
 800962e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009632:	4313      	orrs	r3, r2
 8009634:	b21b      	sxth	r3, r3
 8009636:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009638:	89fb      	ldrh	r3, [r7, #14]
}
 800963a:	4618      	mov	r0, r3
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73fb      	strb	r3, [r7, #15]

	  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	4798      	blx	r3
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]

	  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009670:	2b40      	cmp	r3, #64	; 0x40
 8009672:	d005      	beq.n	8009680 <USBD_StdDevReq+0x38>
 8009674:	2b40      	cmp	r3, #64	; 0x40
 8009676:	d854      	bhi.n	8009722 <USBD_StdDevReq+0xda>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_StdDevReq+0x4c>
 800967c:	2b20      	cmp	r3, #32
 800967e:	d150      	bne.n	8009722 <USBD_StdDevReq+0xda>
	  {
		case USB_REQ_TYPE_CLASS:
		case USB_REQ_TYPE_VENDOR:
		  ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	6839      	ldr	r1, [r7, #0]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	4798      	blx	r3
 800968e:	4603      	mov	r3, r0
 8009690:	73fb      	strb	r3, [r7, #15]
		  break;
 8009692:	e04e      	b.n	8009732 <USBD_StdDevReq+0xea>

		case USB_REQ_TYPE_STANDARD:
		  switch (req->bRequest)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b09      	cmp	r3, #9
 800969a:	d83c      	bhi.n	8009716 <USBD_StdDevReq+0xce>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <USBD_StdDevReq+0x5c>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096f9 	.word	0x080096f9
 80096a8:	0800970d 	.word	0x0800970d
 80096ac:	08009717 	.word	0x08009717
 80096b0:	08009703 	.word	0x08009703
 80096b4:	08009717 	.word	0x08009717
 80096b8:	080096d7 	.word	0x080096d7
 80096bc:	080096cd 	.word	0x080096cd
 80096c0:	08009717 	.word	0x08009717
 80096c4:	080096ef 	.word	0x080096ef
 80096c8:	080096e1 	.word	0x080096e1
		  {
			case USB_REQ_GET_DESCRIPTOR:
			  USBD_GetDescriptor(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f9e2 	bl	8009a98 <USBD_GetDescriptor>
			  break;
 80096d4:	e024      	b.n	8009720 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_ADDRESS:
			  USBD_SetAddress(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fb47 	bl	8009d6c <USBD_SetAddress>
			  break;
 80096de:	e01f      	b.n	8009720 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_CONFIGURATION:
			  ret = USBD_SetConfig(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb86 	bl	8009df4 <USBD_SetConfig>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]
			  break;
 80096ec:	e018      	b.n	8009720 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_CONFIGURATION:
			  USBD_GetConfig(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fc25 	bl	8009f40 <USBD_GetConfig>
			  break;
 80096f6:	e013      	b.n	8009720 <USBD_StdDevReq+0xd8>

			case USB_REQ_GET_STATUS:
			  USBD_GetStatus(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fc56 	bl	8009fac <USBD_GetStatus>
			  break;
 8009700:	e00e      	b.n	8009720 <USBD_StdDevReq+0xd8>

			case USB_REQ_SET_FEATURE:
			  USBD_SetFeature(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fc85 	bl	800a014 <USBD_SetFeature>
			  break;
 800970a:	e009      	b.n	8009720 <USBD_StdDevReq+0xd8>

			case USB_REQ_CLEAR_FEATURE:
			  USBD_ClrFeature(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc94 	bl	800a03c <USBD_ClrFeature>
			  break;
 8009714:	e004      	b.n	8009720 <USBD_StdDevReq+0xd8>

			default:
			  USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fceb 	bl	800a0f4 <USBD_CtlError>
			  break;
 800971e:	bf00      	nop
		  }
		  break;
 8009720:	e007      	b.n	8009732 <USBD_StdDevReq+0xea>

		default:
		  unknown_bmrequest = 1;
 8009722:	4b06      	ldr	r3, [pc, #24]	; (800973c <USBD_StdDevReq+0xf4>)
 8009724:	2201      	movs	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]
		  USBD_CtlError(pdev, req);
 8009728:	6839      	ldr	r1, [r7, #0]
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fce2 	bl	800a0f4 <USBD_CtlError>
		  break;
 8009730:	bf00      	nop
	  }

  return ret;
 8009732:	7bfb      	ldrb	r3, [r7, #15]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20000acb 	.word	0x20000acb

08009740 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d005      	beq.n	8009766 <USBD_StdItfReq+0x26>
 800975a:	2b40      	cmp	r3, #64	; 0x40
 800975c:	d82f      	bhi.n	80097be <USBD_StdItfReq+0x7e>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <USBD_StdItfReq+0x26>
 8009762:	2b20      	cmp	r3, #32
 8009764:	d12b      	bne.n	80097be <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976c:	b2db      	uxtb	r3, r3
 800976e:	3b01      	subs	r3, #1
 8009770:	2b02      	cmp	r3, #2
 8009772:	d81d      	bhi.n	80097b0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	889b      	ldrh	r3, [r3, #4]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b01      	cmp	r3, #1
 800977c:	d813      	bhi.n	80097a6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d110      	bne.n	80097ba <USBD_StdItfReq+0x7a>
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10d      	bne.n	80097ba <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fd73 	bl	800a28a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097a4:	e009      	b.n	80097ba <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fca3 	bl	800a0f4 <USBD_CtlError>
          break;
 80097ae:	e004      	b.n	80097ba <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fc9e 	bl	800a0f4 <USBD_CtlError>
          break;
 80097b8:	e000      	b.n	80097bc <USBD_StdItfReq+0x7c>
          break;
 80097ba:	bf00      	nop
      }
      break;
 80097bc:	e004      	b.n	80097c8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fc97 	bl	800a0f4 <USBD_CtlError>
      break;
 80097c6:	bf00      	nop
  }

  return ret;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	889b      	ldrh	r3, [r3, #4]
 80097e4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097ee:	2b40      	cmp	r3, #64	; 0x40
 80097f0:	d007      	beq.n	8009802 <USBD_StdEPReq+0x30>
 80097f2:	2b40      	cmp	r3, #64	; 0x40
 80097f4:	f200 8145 	bhi.w	8009a82 <USBD_StdEPReq+0x2b0>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00c      	beq.n	8009816 <USBD_StdEPReq+0x44>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	f040 8140 	bne.w	8009a82 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
      break;
 8009814:	e13a      	b.n	8009a8c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d007      	beq.n	800982e <USBD_StdEPReq+0x5c>
 800981e:	2b03      	cmp	r3, #3
 8009820:	f300 8129 	bgt.w	8009a76 <USBD_StdEPReq+0x2a4>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d07f      	beq.n	8009928 <USBD_StdEPReq+0x156>
 8009828:	2b01      	cmp	r3, #1
 800982a:	d03c      	beq.n	80098a6 <USBD_StdEPReq+0xd4>
 800982c:	e123      	b.n	8009a76 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b02      	cmp	r3, #2
 8009838:	d002      	beq.n	8009840 <USBD_StdEPReq+0x6e>
 800983a:	2b03      	cmp	r3, #3
 800983c:	d016      	beq.n	800986c <USBD_StdEPReq+0x9a>
 800983e:	e02c      	b.n	800989a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00d      	beq.n	8009862 <USBD_StdEPReq+0x90>
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	2b80      	cmp	r3, #128	; 0x80
 800984a:	d00a      	beq.n	8009862 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f003 fe05 	bl	800d460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009856:	2180      	movs	r1, #128	; 0x80
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f003 fe01 	bl	800d460 <USBD_LL_StallEP>
 800985e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009860:	e020      	b.n	80098a4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fc45 	bl	800a0f4 <USBD_CtlError>
              break;
 800986a:	e01b      	b.n	80098a4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	885b      	ldrh	r3, [r3, #2]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10e      	bne.n	8009892 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <USBD_StdEPReq+0xc0>
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	2b80      	cmp	r3, #128	; 0x80
 800987e:	d008      	beq.n	8009892 <USBD_StdEPReq+0xc0>
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	88db      	ldrh	r3, [r3, #6]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d104      	bne.n	8009892 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009888:	7bbb      	ldrb	r3, [r7, #14]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f003 fde7 	bl	800d460 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fcf9 	bl	800a28a <USBD_CtlSendStatus>

              break;
 8009898:	e004      	b.n	80098a4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fc29 	bl	800a0f4 <USBD_CtlError>
              break;
 80098a2:	bf00      	nop
          }
          break;
 80098a4:	e0ec      	b.n	8009a80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d002      	beq.n	80098b8 <USBD_StdEPReq+0xe6>
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d016      	beq.n	80098e4 <USBD_StdEPReq+0x112>
 80098b6:	e030      	b.n	800991a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00d      	beq.n	80098da <USBD_StdEPReq+0x108>
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b80      	cmp	r3, #128	; 0x80
 80098c2:	d00a      	beq.n	80098da <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f003 fdc9 	bl	800d460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ce:	2180      	movs	r1, #128	; 0x80
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f003 fdc5 	bl	800d460 <USBD_LL_StallEP>
 80098d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098d8:	e025      	b.n	8009926 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fc09 	bl	800a0f4 <USBD_CtlError>
              break;
 80098e2:	e020      	b.n	8009926 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	885b      	ldrh	r3, [r3, #2]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d11b      	bne.n	8009924 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098ec:	7bbb      	ldrb	r3, [r7, #14]
 80098ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d004      	beq.n	8009900 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f003 fdcf 	bl	800d49e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fcc2 	bl	800a28a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	4798      	blx	r3
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009918:	e004      	b.n	8009924 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fbe9 	bl	800a0f4 <USBD_CtlError>
              break;
 8009922:	e000      	b.n	8009926 <USBD_StdEPReq+0x154>
              break;
 8009924:	bf00      	nop
          }
          break;
 8009926:	e0ab      	b.n	8009a80 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d002      	beq.n	800993a <USBD_StdEPReq+0x168>
 8009934:	2b03      	cmp	r3, #3
 8009936:	d032      	beq.n	800999e <USBD_StdEPReq+0x1cc>
 8009938:	e097      	b.n	8009a6a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <USBD_StdEPReq+0x17e>
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	2b80      	cmp	r3, #128	; 0x80
 8009944:	d004      	beq.n	8009950 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fbd3 	bl	800a0f4 <USBD_CtlError>
                break;
 800994e:	e091      	b.n	8009a74 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009954:	2b00      	cmp	r3, #0
 8009956:	da0b      	bge.n	8009970 <USBD_StdEPReq+0x19e>
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	3310      	adds	r3, #16
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4413      	add	r3, r2
 800996c:	3304      	adds	r3, #4
 800996e:	e00b      	b.n	8009988 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009976:	4613      	mov	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	3304      	adds	r3, #4
 8009988:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2202      	movs	r2, #2
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fc1d 	bl	800a1d6 <USBD_CtlSendData>
              break;
 800999c:	e06a      	b.n	8009a74 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800999e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	da11      	bge.n	80099ca <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80099a6:	7bbb      	ldrb	r3, [r7, #14]
 80099a8:	f003 020f 	and.w	r2, r3, #15
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3324      	adds	r3, #36	; 0x24
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d117      	bne.n	80099f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fb96 	bl	800a0f4 <USBD_CtlError>
                  break;
 80099c8:	e054      	b.n	8009a74 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	f003 020f 	and.w	r2, r3, #15
 80099d0:	6879      	ldr	r1, [r7, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fb83 	bl	800a0f4 <USBD_CtlError>
                  break;
 80099ee:	e041      	b.n	8009a74 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da0b      	bge.n	8009a10 <USBD_StdEPReq+0x23e>
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099fe:	4613      	mov	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	3310      	adds	r3, #16
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	e00b      	b.n	8009a28 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a10:	7bbb      	ldrb	r3, [r7, #14]
 8009a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a16:	4613      	mov	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	3304      	adds	r3, #4
 8009a28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <USBD_StdEPReq+0x264>
 8009a30:	7bbb      	ldrb	r3, [r7, #14]
 8009a32:	2b80      	cmp	r3, #128	; 0x80
 8009a34:	d103      	bne.n	8009a3e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e00e      	b.n	8009a5c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	4619      	mov	r1, r3
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f003 fd4a 	bl	800d4dc <USBD_LL_IsStallEP>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e002      	b.n	8009a5c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fbb7 	bl	800a1d6 <USBD_CtlSendData>
              break;
 8009a68:	e004      	b.n	8009a74 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fb41 	bl	800a0f4 <USBD_CtlError>
              break;
 8009a72:	bf00      	nop
          }
          break;
 8009a74:	e004      	b.n	8009a80 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fb3b 	bl	800a0f4 <USBD_CtlError>
          break;
 8009a7e:	bf00      	nop
      }
      break;
 8009a80:	e004      	b.n	8009a8c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb35 	bl	800a0f4 <USBD_CtlError>
      break;
 8009a8a:	bf00      	nop
  }

  return ret;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	0a1b      	lsrs	r3, r3, #8
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	2b06      	cmp	r3, #6
 8009aba:	f200 8128 	bhi.w	8009d0e <USBD_GetDescriptor+0x276>
 8009abe:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_GetDescriptor+0x2c>)
 8009ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac4:	08009ae1 	.word	0x08009ae1
 8009ac8:	08009af9 	.word	0x08009af9
 8009acc:	08009b39 	.word	0x08009b39
 8009ad0:	08009d0f 	.word	0x08009d0f
 8009ad4:	08009d0f 	.word	0x08009d0f
 8009ad8:	08009caf 	.word	0x08009caf
 8009adc:	08009cdb 	.word	0x08009cdb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
      break;
 8009af6:	e112      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	7c1b      	ldrb	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10d      	bne.n	8009b1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b08:	f107 0208 	add.w	r2, r7, #8
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	4798      	blx	r3
 8009b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	2202      	movs	r2, #2
 8009b18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009b1a:	e100      	b.n	8009d1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	f107 0208 	add.w	r2, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3301      	adds	r3, #1
 8009b32:	2202      	movs	r2, #2
 8009b34:	701a      	strb	r2, [r3, #0]
      break;
 8009b36:	e0f2      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	885b      	ldrh	r3, [r3, #2]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	2b05      	cmp	r3, #5
 8009b40:	f200 80ac 	bhi.w	8009c9c <USBD_GetDescriptor+0x204>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <USBD_GetDescriptor+0xb4>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b65 	.word	0x08009b65
 8009b50:	08009b99 	.word	0x08009b99
 8009b54:	08009bcd 	.word	0x08009bcd
 8009b58:	08009c01 	.word	0x08009c01
 8009b5c:	08009c35 	.word	0x08009c35
 8009b60:	08009c69 	.word	0x08009c69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	7c12      	ldrb	r2, [r2, #16]
 8009b7c:	f107 0108 	add.w	r1, r7, #8
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b86:	e091      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fab2 	bl	800a0f4 <USBD_CtlError>
            err++;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
 8009b92:	3301      	adds	r3, #1
 8009b94:	72fb      	strb	r3, [r7, #11]
          break;
 8009b96:	e089      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00b      	beq.n	8009bbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	7c12      	ldrb	r2, [r2, #16]
 8009bb0:	f107 0108 	add.w	r1, r7, #8
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	4798      	blx	r3
 8009bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bba:	e077      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 fa98 	bl	800a0f4 <USBD_CtlError>
            err++;
 8009bc4:	7afb      	ldrb	r3, [r7, #11]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009bca:	e06f      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00b      	beq.n	8009bf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	7c12      	ldrb	r2, [r2, #16]
 8009be4:	f107 0108 	add.w	r1, r7, #8
 8009be8:	4610      	mov	r0, r2
 8009bea:	4798      	blx	r3
 8009bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bee:	e05d      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fa7e 	bl	800a0f4 <USBD_CtlError>
            err++;
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bfe:	e055      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c22:	e043      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa64 	bl	800a0f4 <USBD_CtlError>
            err++;
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	72fb      	strb	r3, [r7, #11]
          break;
 8009c32:	e03b      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e029      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa4a 	bl	800a0f4 <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e021      	b.n	8009cac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8a:	e00f      	b.n	8009cac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa30 	bl	800a0f4 <USBD_CtlError>
            err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9a:	e007      	b.n	8009cac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fa28 	bl	800a0f4 <USBD_CtlError>
          err++;
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009caa:	bf00      	nop
      }
      break;
 8009cac:	e037      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7c1b      	ldrb	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d109      	bne.n	8009cca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	f107 0208 	add.w	r2, r7, #8
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4798      	blx	r3
 8009cc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cc8:	e029      	b.n	8009d1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fa11 	bl	800a0f4 <USBD_CtlError>
        err++;
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009cd8:	e021      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	7c1b      	ldrb	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10d      	bne.n	8009cfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	f107 0208 	add.w	r2, r7, #8
 8009cee:	4610      	mov	r0, r2
 8009cf0:	4798      	blx	r3
 8009cf2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	2207      	movs	r2, #7
 8009cfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cfc:	e00f      	b.n	8009d1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f9f7 	bl	800a0f4 <USBD_CtlError>
        err++;
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d0c:	e007      	b.n	8009d1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9ef 	bl	800a0f4 <USBD_CtlError>
      err++;
 8009d16:	7afb      	ldrb	r3, [r7, #11]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d1c:	bf00      	nop
  }

  if (err != 0U)
 8009d1e:	7afb      	ldrb	r3, [r7, #11]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d11e      	bne.n	8009d62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	88db      	ldrh	r3, [r3, #6]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d016      	beq.n	8009d5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009d2c:	893b      	ldrh	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00e      	beq.n	8009d50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	88da      	ldrh	r2, [r3, #6]
 8009d36:	893b      	ldrh	r3, [r7, #8]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	bf28      	it	cs
 8009d3c:	4613      	movcs	r3, r2
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d42:	893b      	ldrh	r3, [r7, #8]
 8009d44:	461a      	mov	r2, r3
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fa44 	bl	800a1d6 <USBD_CtlSendData>
 8009d4e:	e009      	b.n	8009d64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9ce 	bl	800a0f4 <USBD_CtlError>
 8009d58:	e004      	b.n	8009d64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa95 	bl	800a28a <USBD_CtlSendStatus>
 8009d60:	e000      	b.n	8009d64 <USBD_GetDescriptor+0x2cc>
    return;
 8009d62:	bf00      	nop
  }
}
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop

08009d6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	889b      	ldrh	r3, [r3, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d131      	bne.n	8009de2 <USBD_SetAddress+0x76>
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	88db      	ldrh	r3, [r3, #6]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d12d      	bne.n	8009de2 <USBD_SetAddress+0x76>
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	885b      	ldrh	r3, [r3, #2]
 8009d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d8c:	d829      	bhi.n	8009de2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	885b      	ldrh	r3, [r3, #2]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d104      	bne.n	8009db0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9a3 	bl	800a0f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dae:	e01d      	b.n	8009dec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	7bfa      	ldrb	r2, [r7, #15]
 8009db4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f003 fbb9 	bl	800d534 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fa61 	bl	800a28a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dd6:	e009      	b.n	8009dec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009de0:	e004      	b.n	8009dec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 f985 	bl	800a0f4 <USBD_CtlError>
  }
}
 8009dea:	bf00      	nop
 8009dec:	bf00      	nop
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	885b      	ldrh	r3, [r3, #2]
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	4b4c      	ldr	r3, [pc, #304]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009e0c:	4b4b      	ldr	r3, [pc, #300]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d905      	bls.n	8009e20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f96c 	bl	800a0f4 <USBD_CtlError>
    return USBD_FAIL;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e088      	b.n	8009f32 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d002      	beq.n	8009e32 <USBD_SetConfig+0x3e>
 8009e2c:	2b03      	cmp	r3, #3
 8009e2e:	d025      	beq.n	8009e7c <USBD_SetConfig+0x88>
 8009e30:	e071      	b.n	8009f16 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009e32:	4b42      	ldr	r3, [pc, #264]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d01c      	beq.n	8009e74 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009e3a:	4b40      	ldr	r3, [pc, #256]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e44:	4b3d      	ldr	r3, [pc, #244]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff f93a 	bl	80090c4 <USBD_SetClassConfig>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d004      	beq.n	8009e64 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f949 	bl	800a0f4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009e62:	e065      	b.n	8009f30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fa10 	bl	800a28a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009e72:	e05d      	b.n	8009f30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fa08 	bl	800a28a <USBD_CtlSendStatus>
      break;
 8009e7a:	e059      	b.n	8009f30 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009e7c:	4b2f      	ldr	r3, [pc, #188]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d112      	bne.n	8009eaa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009e8c:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e96:	4b29      	ldr	r3, [pc, #164]	; (8009f3c <USBD_SetConfig+0x148>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7ff f92d 	bl	80090fc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f9f1 	bl	800a28a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ea8:	e042      	b.n	8009f30 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009eaa:	4b24      	ldr	r3, [pc, #144]	; (8009f3c <USBD_SetConfig+0x148>)
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d02a      	beq.n	8009f0e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff f91b 	bl	80090fc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ec6:	4b1d      	ldr	r3, [pc, #116]	; (8009f3c <USBD_SetConfig+0x148>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ed0:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <USBD_SetConfig+0x148>)
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff f8f4 	bl	80090c4 <USBD_SetClassConfig>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00f      	beq.n	8009f06 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f903 	bl	800a0f4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff f900 	bl	80090fc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f04:	e014      	b.n	8009f30 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f9bf 	bl	800a28a <USBD_CtlSendStatus>
      break;
 8009f0c:	e010      	b.n	8009f30 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f9bb 	bl	800a28a <USBD_CtlSendStatus>
      break;
 8009f14:	e00c      	b.n	8009f30 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f8eb 	bl	800a0f4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f1e:	4b07      	ldr	r3, [pc, #28]	; (8009f3c <USBD_SetConfig+0x148>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff f8e9 	bl	80090fc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2e:	bf00      	nop
  }

  return ret;
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3710      	adds	r7, #16
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20000acc 	.word	0x20000acc

08009f40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	88db      	ldrh	r3, [r3, #6]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d004      	beq.n	8009f5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f8cd 	bl	800a0f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f5a:	e023      	b.n	8009fa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	dc02      	bgt.n	8009f6e <USBD_GetConfig+0x2e>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	dc03      	bgt.n	8009f74 <USBD_GetConfig+0x34>
 8009f6c:	e015      	b.n	8009f9a <USBD_GetConfig+0x5a>
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d00b      	beq.n	8009f8a <USBD_GetConfig+0x4a>
 8009f72:	e012      	b.n	8009f9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f927 	bl	800a1d6 <USBD_CtlSendData>
        break;
 8009f88:	e00c      	b.n	8009fa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f91f 	bl	800a1d6 <USBD_CtlSendData>
        break;
 8009f98:	e004      	b.n	8009fa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009f9a:	6839      	ldr	r1, [r7, #0]
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f8a9 	bl	800a0f4 <USBD_CtlError>
        break;
 8009fa2:	bf00      	nop
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d81e      	bhi.n	800a002 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	88db      	ldrh	r3, [r3, #6]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d004      	beq.n	8009fd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f890 	bl	800a0f4 <USBD_CtlError>
        break;
 8009fd4:	e01a      	b.n	800a00c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f043 0202 	orr.w	r2, r3, #2
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	330c      	adds	r3, #12
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f8eb 	bl	800a1d6 <USBD_CtlSendData>
      break;
 800a000:	e004      	b.n	800a00c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f875 	bl	800a0f4 <USBD_CtlError>
      break;
 800a00a:	bf00      	nop
  }
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d106      	bne.n	800a034 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f92b 	bl	800a28a <USBD_CtlSendStatus>
  }
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	3b01      	subs	r3, #1
 800a050:	2b02      	cmp	r3, #2
 800a052:	d80b      	bhi.n	800a06c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	885b      	ldrh	r3, [r3, #2]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d10c      	bne.n	800a076 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f910 	bl	800a28a <USBD_CtlSendStatus>
      }
      break;
 800a06a:	e004      	b.n	800a076 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f840 	bl	800a0f4 <USBD_CtlError>
      break;
 800a074:	e000      	b.n	800a078 <USBD_ClrFeature+0x3c>
      break;
 800a076:	bf00      	nop
  }
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	781a      	ldrb	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	781a      	ldrb	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f7ff faad 	bl	800960a <SWAPBYTE>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff faa0 	bl	800960a <SWAPBYTE>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7ff fa93 	bl	800960a <SWAPBYTE>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	80da      	strh	r2, [r3, #6]
}
 800a0ec:	bf00      	nop
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0fe:	2180      	movs	r1, #128	; 0x80
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f003 f9ad 	bl	800d460 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a106:	2100      	movs	r1, #0
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f003 f9a9 	bl	800d460 <USBD_LL_StallEP>
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b086      	sub	sp, #24
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d036      	beq.n	800a19a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a130:	6938      	ldr	r0, [r7, #16]
 800a132:	f000 f836 	bl	800a1a2 <USBD_GetLen>
 800a136:	4603      	mov	r3, r0
 800a138:	3301      	adds	r3, #1
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	b29a      	uxth	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	4413      	add	r3, r2
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	7812      	ldrb	r2, [r2, #0]
 800a14e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a150:	7dfb      	ldrb	r3, [r7, #23]
 800a152:	3301      	adds	r3, #1
 800a154:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	4413      	add	r3, r2
 800a15c:	2203      	movs	r2, #3
 800a15e:	701a      	strb	r2, [r3, #0]
  idx++;
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	3301      	adds	r3, #1
 800a164:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a166:	e013      	b.n	800a190 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	4413      	add	r3, r2
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	7812      	ldrb	r2, [r2, #0]
 800a172:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
    idx++;
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
 800a17c:	3301      	adds	r3, #1
 800a17e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	4413      	add	r3, r2
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
    idx++;
 800a18a:	7dfb      	ldrb	r3, [r7, #23]
 800a18c:	3301      	adds	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e7      	bne.n	800a168 <USBD_GetString+0x52>
 800a198:	e000      	b.n	800a19c <USBD_GetString+0x86>
    return;
 800a19a:	bf00      	nop
  }
}
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b085      	sub	sp, #20
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a1b2:	e005      	b.n	800a1c0 <USBD_GetLen+0x1e>
  {
    len++;
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1f5      	bne.n	800a1b4 <USBD_GetLen+0x12>
  }

  return len;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b084      	sub	sp, #16
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f003 f9b8 	bl	800d572 <USBD_LL_Transmit>

  return USBD_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	2100      	movs	r1, #0
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f003 f9a7 	bl	800d572 <USBD_LL_Transmit>

  return USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b084      	sub	sp, #16
 800a232:	af00      	add	r7, sp, #0
 800a234:	60f8      	str	r0, [r7, #12]
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2203      	movs	r2, #3
 800a23e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	2100      	movs	r1, #0
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f003 f9ab 	bl	800d5b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	2100      	movs	r1, #0
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f003 f99a 	bl	800d5b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2204      	movs	r2, #4
 800a296:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a29a:	2300      	movs	r3, #0
 800a29c:	2200      	movs	r2, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f003 f966 	bl	800d572 <USBD_LL_Transmit>

  return USBD_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2205      	movs	r2, #5
 800a2bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f003 f974 	bl	800d5b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <__NVIC_SetPriority>:
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6039      	str	r1, [r7, #0]
 800a2e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	db0a      	blt.n	800a302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	490c      	ldr	r1, [pc, #48]	; (800a324 <__NVIC_SetPriority+0x4c>)
 800a2f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2f6:	0112      	lsls	r2, r2, #4
 800a2f8:	b2d2      	uxtb	r2, r2
 800a2fa:	440b      	add	r3, r1
 800a2fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a300:	e00a      	b.n	800a318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	4908      	ldr	r1, [pc, #32]	; (800a328 <__NVIC_SetPriority+0x50>)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	3b04      	subs	r3, #4
 800a310:	0112      	lsls	r2, r2, #4
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	440b      	add	r3, r1
 800a316:	761a      	strb	r2, [r3, #24]
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	e000e100 	.word	0xe000e100
 800a328:	e000ed00 	.word	0xe000ed00

0800a32c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a330:	4b05      	ldr	r3, [pc, #20]	; (800a348 <SysTick_Handler+0x1c>)
 800a332:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a334:	f001 fcfe 	bl	800bd34 <xTaskGetSchedulerState>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d001      	beq.n	800a342 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a33e:	f002 fae3 	bl	800c908 <xPortSysTickHandler>
  }
}
 800a342:	bf00      	nop
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	e000e010 	.word	0xe000e010

0800a34c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a350:	2100      	movs	r1, #0
 800a352:	f06f 0004 	mvn.w	r0, #4
 800a356:	f7ff ffbf 	bl	800a2d8 <__NVIC_SetPriority>
#endif
}
 800a35a:	bf00      	nop
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a366:	f3ef 8305 	mrs	r3, IPSR
 800a36a:	603b      	str	r3, [r7, #0]
  return(result);
 800a36c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a372:	f06f 0305 	mvn.w	r3, #5
 800a376:	607b      	str	r3, [r7, #4]
 800a378:	e00c      	b.n	800a394 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a37a:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <osKernelInitialize+0x44>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d105      	bne.n	800a38e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a382:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <osKernelInitialize+0x44>)
 800a384:	2201      	movs	r2, #1
 800a386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a388:	2300      	movs	r3, #0
 800a38a:	607b      	str	r3, [r7, #4]
 800a38c:	e002      	b.n	800a394 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a38e:	f04f 33ff 	mov.w	r3, #4294967295
 800a392:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a394:	687b      	ldr	r3, [r7, #4]
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20000ad0 	.word	0x20000ad0

0800a3a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ae:	f3ef 8305 	mrs	r3, IPSR
 800a3b2:	603b      	str	r3, [r7, #0]
  return(result);
 800a3b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a3ba:	f06f 0305 	mvn.w	r3, #5
 800a3be:	607b      	str	r3, [r7, #4]
 800a3c0:	e010      	b.n	800a3e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	; (800a3f0 <osKernelStart+0x48>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d109      	bne.n	800a3de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3ca:	f7ff ffbf 	bl	800a34c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3ce:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <osKernelStart+0x48>)
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3d4:	f001 f866 	bl	800b4a4 <vTaskStartScheduler>
      stat = osOK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	e002      	b.n	800a3e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3de:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3e4:	687b      	ldr	r3, [r7, #4]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000ad0 	.word	0x20000ad0

0800a3f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08e      	sub	sp, #56	; 0x38
 800a3f8:	af04      	add	r7, sp, #16
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a404:	f3ef 8305 	mrs	r3, IPSR
 800a408:	617b      	str	r3, [r7, #20]
  return(result);
 800a40a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d17e      	bne.n	800a50e <osThreadNew+0x11a>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d07b      	beq.n	800a50e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a416:	2380      	movs	r3, #128	; 0x80
 800a418:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a41a:	2318      	movs	r3, #24
 800a41c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a422:	f04f 33ff 	mov.w	r3, #4294967295
 800a426:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d045      	beq.n	800a4ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <osThreadNew+0x48>
        name = attr->name;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d002      	beq.n	800a44a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d008      	beq.n	800a462 <osThreadNew+0x6e>
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	2b38      	cmp	r3, #56	; 0x38
 800a454:	d805      	bhi.n	800a462 <osThreadNew+0x6e>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <osThreadNew+0x72>
        return (NULL);
 800a462:	2300      	movs	r3, #0
 800a464:	e054      	b.n	800a510 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	089b      	lsrs	r3, r3, #2
 800a474:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00e      	beq.n	800a49c <osThreadNew+0xa8>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	2b5b      	cmp	r3, #91	; 0x5b
 800a484:	d90a      	bls.n	800a49c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d006      	beq.n	800a49c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	695b      	ldr	r3, [r3, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <osThreadNew+0xa8>
        mem = 1;
 800a496:	2301      	movs	r3, #1
 800a498:	61bb      	str	r3, [r7, #24]
 800a49a:	e010      	b.n	800a4be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10c      	bne.n	800a4be <osThreadNew+0xca>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d108      	bne.n	800a4be <osThreadNew+0xca>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <osThreadNew+0xca>
          mem = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	61bb      	str	r3, [r7, #24]
 800a4b8:	e001      	b.n	800a4be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d110      	bne.n	800a4e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4cc:	9202      	str	r2, [sp, #8]
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6a3a      	ldr	r2, [r7, #32]
 800a4d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fe0c 	bl	800b0f8 <xTaskCreateStatic>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	613b      	str	r3, [r7, #16]
 800a4e4:	e013      	b.n	800a50e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d110      	bne.n	800a50e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	f107 0310 	add.w	r3, r7, #16
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f000 fe57 	bl	800b1b2 <xTaskCreate>
 800a504:	4603      	mov	r3, r0
 800a506:	2b01      	cmp	r3, #1
 800a508:	d001      	beq.n	800a50e <osThreadNew+0x11a>
            hTask = NULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a50e:	693b      	ldr	r3, [r7, #16]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3728      	adds	r7, #40	; 0x28
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a520:	f3ef 8305 	mrs	r3, IPSR
 800a524:	60bb      	str	r3, [r7, #8]
  return(result);
 800a526:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <osDelay+0x1c>
    stat = osErrorISR;
 800a52c:	f06f 0305 	mvn.w	r3, #5
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e007      	b.n	800a544 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 ff7c 	bl	800b43c <vTaskDelay>
    }
  }

  return (stat);
 800a544:	68fb      	ldr	r3, [r7, #12]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4a07      	ldr	r2, [pc, #28]	; (800a57c <vApplicationGetIdleTaskMemory+0x2c>)
 800a560:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	4a06      	ldr	r2, [pc, #24]	; (800a580 <vApplicationGetIdleTaskMemory+0x30>)
 800a566:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2280      	movs	r2, #128	; 0x80
 800a56c:	601a      	str	r2, [r3, #0]
}
 800a56e:	bf00      	nop
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	20000ad4 	.word	0x20000ad4
 800a580:	20000b30 	.word	0x20000b30

0800a584 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4a07      	ldr	r2, [pc, #28]	; (800a5b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a594:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	4a06      	ldr	r2, [pc, #24]	; (800a5b4 <vApplicationGetTimerTaskMemory+0x30>)
 800a59a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5a2:	601a      	str	r2, [r3, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr
 800a5b0:	20000d30 	.word	0x20000d30
 800a5b4:	20000d8c 	.word	0x20000d8c

0800a5b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0208 	add.w	r2, r3, #8
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f103 0208 	add.w	r2, r3, #8
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f103 0208 	add.w	r2, r3, #8
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a612:	b480      	push	{r7}
 800a614:	b085      	sub	sp, #20
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	683a      	ldr	r2, [r7, #0]
 800a636:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	601a      	str	r2, [r3, #0]
}
 800a64e:	bf00      	nop
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a670:	d103      	bne.n	800a67a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e00c      	b.n	800a694 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	3308      	adds	r3, #8
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	e002      	b.n	800a688 <vListInsert+0x2e>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	429a      	cmp	r2, r3
 800a692:	d2f6      	bcs.n	800a682 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	6892      	ldr	r2, [r2, #8]
 800a6e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	6852      	ldr	r2, [r2, #4]
 800a6ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d103      	bne.n	800a700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	1e5a      	subs	r2, r3, #1
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a74a:	f002 f84b 	bl	800c7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a75a:	fb01 f303 	mul.w	r3, r1, r3
 800a75e:	441a      	add	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a77a:	3b01      	subs	r3, #1
 800a77c:	68f9      	ldr	r1, [r7, #12]
 800a77e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a780:	fb01 f303 	mul.w	r3, r1, r3
 800a784:	441a      	add	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	22ff      	movs	r2, #255	; 0xff
 800a78e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	22ff      	movs	r2, #255	; 0xff
 800a796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d114      	bne.n	800a7ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01a      	beq.n	800a7de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f001 f903 	bl	800b9b8 <xTaskRemoveFromEventList>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d012      	beq.n	800a7de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <xQueueGenericReset+0xcc>)
 800a7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	f3bf 8f6f 	isb	sy
 800a7c8:	e009      	b.n	800a7de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3310      	adds	r3, #16
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fef2 	bl	800a5b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3324      	adds	r3, #36	; 0x24
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7ff feed 	bl	800a5b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7de:	f002 f831 	bl	800c844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7e2:	2301      	movs	r3, #1
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	e000ed04 	.word	0xe000ed04

0800a7f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08e      	sub	sp, #56	; 0x38
 800a7f4:	af02      	add	r7, sp, #8
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10a      	bne.n	800a81a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <xQueueGenericCreateStatic+0x52>
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <xQueueGenericCreateStatic+0x56>
 800a842:	2301      	movs	r3, #1
 800a844:	e000      	b.n	800a848 <xQueueGenericCreateStatic+0x58>
 800a846:	2300      	movs	r3, #0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	623b      	str	r3, [r7, #32]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <xQueueGenericCreateStatic+0x7e>
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <xQueueGenericCreateStatic+0x82>
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <xQueueGenericCreateStatic+0x84>
 800a872:	2300      	movs	r3, #0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10a      	bne.n	800a88e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87c:	f383 8811 	msr	BASEPRI, r3
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	f3bf 8f4f 	dsb	sy
 800a888:	61fb      	str	r3, [r7, #28]
}
 800a88a:	bf00      	nop
 800a88c:	e7fe      	b.n	800a88c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a88e:	2350      	movs	r3, #80	; 0x50
 800a890:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b50      	cmp	r3, #80	; 0x50
 800a896:	d00a      	beq.n	800a8ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	61bb      	str	r3, [r7, #24]
}
 800a8aa:	bf00      	nop
 800a8ac:	e7fe      	b.n	800a8ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00d      	beq.n	800a8d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f805 	bl	800a8e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3730      	adds	r7, #48	; 0x30
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d103      	bne.n	800a8fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a90e:	2101      	movs	r1, #1
 800a910:	69b8      	ldr	r0, [r7, #24]
 800a912:	f7ff ff05 	bl	800a720 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	78fa      	ldrb	r2, [r7, #3]
 800a91a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a91e:	bf00      	nop
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08e      	sub	sp, #56	; 0x38
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a936:	2300      	movs	r3, #0
 800a938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <xQueueGenericSend+0x32>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d103      	bne.n	800a968 <xQueueGenericSend+0x40>
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <xQueueGenericSend+0x44>
 800a968:	2301      	movs	r3, #1
 800a96a:	e000      	b.n	800a96e <xQueueGenericSend+0x46>
 800a96c:	2300      	movs	r3, #0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <xQueueGenericSend+0x60>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d103      	bne.n	800a996 <xQueueGenericSend+0x6e>
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	2b01      	cmp	r3, #1
 800a994:	d101      	bne.n	800a99a <xQueueGenericSend+0x72>
 800a996:	2301      	movs	r3, #1
 800a998:	e000      	b.n	800a99c <xQueueGenericSend+0x74>
 800a99a:	2300      	movs	r3, #0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	623b      	str	r3, [r7, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9b6:	f001 f9bd 	bl	800bd34 <xTaskGetSchedulerState>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d102      	bne.n	800a9c6 <xQueueGenericSend+0x9e>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d101      	bne.n	800a9ca <xQueueGenericSend+0xa2>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e000      	b.n	800a9cc <xQueueGenericSend+0xa4>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10a      	bne.n	800a9e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	61fb      	str	r3, [r7, #28]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9e6:	f001 fefd 	bl	800c7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d302      	bcc.n	800a9fc <xQueueGenericSend+0xd4>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d129      	bne.n	800aa50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	68b9      	ldr	r1, [r7, #8]
 800aa00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa02:	f000 fa0b 	bl	800ae1c <prvCopyDataToQueue>
 800aa06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d010      	beq.n	800aa32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa12:	3324      	adds	r3, #36	; 0x24
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 ffcf 	bl	800b9b8 <xTaskRemoveFromEventList>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d013      	beq.n	800aa48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa20:	4b3f      	ldr	r3, [pc, #252]	; (800ab20 <xQueueGenericSend+0x1f8>)
 800aa22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	e00a      	b.n	800aa48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa38:	4b39      	ldr	r3, [pc, #228]	; (800ab20 <xQueueGenericSend+0x1f8>)
 800aa3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa48:	f001 fefc 	bl	800c844 <vPortExitCritical>
				return pdPASS;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e063      	b.n	800ab18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d103      	bne.n	800aa5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa56:	f001 fef5 	bl	800c844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	e05c      	b.n	800ab18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa64:	f107 0314 	add.w	r3, r7, #20
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 f809 	bl	800ba80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa72:	f001 fee7 	bl	800c844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa76:	f000 fd7b 	bl	800b570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa7a:	f001 feb3 	bl	800c7e4 <vPortEnterCritical>
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa84:	b25b      	sxtb	r3, r3
 800aa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8a:	d103      	bne.n	800aa94 <xQueueGenericSend+0x16c>
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa9a:	b25b      	sxtb	r3, r3
 800aa9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa0:	d103      	bne.n	800aaaa <xQueueGenericSend+0x182>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaaa:	f001 fecb 	bl	800c844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaae:	1d3a      	adds	r2, r7, #4
 800aab0:	f107 0314 	add.w	r3, r7, #20
 800aab4:	4611      	mov	r1, r2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f000 fff8 	bl	800baac <xTaskCheckForTimeOut>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d124      	bne.n	800ab0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aac2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aac4:	f000 faa2 	bl	800b00c <prvIsQueueFull>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d018      	beq.n	800ab00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	3310      	adds	r3, #16
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 ff1e 	bl	800b918 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aadc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aade:	f000 fa2d 	bl	800af3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aae2:	f000 fd53 	bl	800b58c <xTaskResumeAll>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f47f af7c 	bne.w	800a9e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aaee:	4b0c      	ldr	r3, [pc, #48]	; (800ab20 <xQueueGenericSend+0x1f8>)
 800aaf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	e772      	b.n	800a9e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab02:	f000 fa1b 	bl	800af3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab06:	f000 fd41 	bl	800b58c <xTaskResumeAll>
 800ab0a:	e76c      	b.n	800a9e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab0e:	f000 fa15 	bl	800af3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab12:	f000 fd3b 	bl	800b58c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3738      	adds	r7, #56	; 0x38
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	e000ed04 	.word	0xe000ed04

0800ab24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b090      	sub	sp, #64	; 0x40
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <xQueueGenericSendFromISR+0x3c>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <xQueueGenericSendFromISR+0x40>
 800ab60:	2301      	movs	r3, #1
 800ab62:	e000      	b.n	800ab66 <xQueueGenericSendFromISR+0x42>
 800ab64:	2300      	movs	r3, #0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10a      	bne.n	800ab80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d103      	bne.n	800ab8e <xQueueGenericSendFromISR+0x6a>
 800ab86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d101      	bne.n	800ab92 <xQueueGenericSendFromISR+0x6e>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e000      	b.n	800ab94 <xQueueGenericSendFromISR+0x70>
 800ab92:	2300      	movs	r3, #0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	623b      	str	r3, [r7, #32]
}
 800abaa:	bf00      	nop
 800abac:	e7fe      	b.n	800abac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abae:	f001 fefb 	bl	800c9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abb2:	f3ef 8211 	mrs	r2, BASEPRI
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	61fa      	str	r2, [r7, #28]
 800abc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d302      	bcc.n	800abe0 <xQueueGenericSendFromISR+0xbc>
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d12f      	bne.n	800ac40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abf0:	683a      	ldr	r2, [r7, #0]
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800abf6:	f000 f911 	bl	800ae1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800abfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	d112      	bne.n	800ac2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d016      	beq.n	800ac3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0e:	3324      	adds	r3, #36	; 0x24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fed1 	bl	800b9b8 <xTaskRemoveFromEventList>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00e      	beq.n	800ac3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2201      	movs	r2, #1
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	e007      	b.n	800ac3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac2e:	3301      	adds	r3, #1
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	b25a      	sxtb	r2, r3
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ac3e:	e001      	b.n	800ac44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3740      	adds	r7, #64	; 0x40
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08c      	sub	sp, #48	; 0x30
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <xQueueReceive+0x30>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	623b      	str	r3, [r7, #32]
}
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d103      	bne.n	800ac9a <xQueueReceive+0x3e>
 800ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <xQueueReceive+0x42>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <xQueueReceive+0x44>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueReceive+0x5e>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	61fb      	str	r3, [r7, #28]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acba:	f001 f83b 	bl	800bd34 <xTaskGetSchedulerState>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d102      	bne.n	800acca <xQueueReceive+0x6e>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d101      	bne.n	800acce <xQueueReceive+0x72>
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <xQueueReceive+0x74>
 800acce:	2300      	movs	r3, #0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10a      	bne.n	800acea <xQueueReceive+0x8e>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	61bb      	str	r3, [r7, #24]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acea:	f001 fd7b 	bl	800c7e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01f      	beq.n	800ad3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acfe:	f000 f8f7 	bl	800aef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	1e5a      	subs	r2, r3, #1
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00f      	beq.n	800ad32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	3310      	adds	r3, #16
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fe4e 	bl	800b9b8 <xTaskRemoveFromEventList>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d007      	beq.n	800ad32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad22:	4b3d      	ldr	r3, [pc, #244]	; (800ae18 <xQueueReceive+0x1bc>)
 800ad24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad32:	f001 fd87 	bl	800c844 <vPortExitCritical>
				return pdPASS;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e069      	b.n	800ae0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad40:	f001 fd80 	bl	800c844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad44:	2300      	movs	r3, #0
 800ad46:	e062      	b.n	800ae0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad4e:	f107 0310 	add.w	r3, r7, #16
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 fe94 	bl	800ba80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad5c:	f001 fd72 	bl	800c844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad60:	f000 fc06 	bl	800b570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad64:	f001 fd3e 	bl	800c7e4 <vPortEnterCritical>
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad6e:	b25b      	sxtb	r3, r3
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad74:	d103      	bne.n	800ad7e <xQueueReceive+0x122>
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad84:	b25b      	sxtb	r3, r3
 800ad86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8a:	d103      	bne.n	800ad94 <xQueueReceive+0x138>
 800ad8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad94:	f001 fd56 	bl	800c844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad98:	1d3a      	adds	r2, r7, #4
 800ad9a:	f107 0310 	add.w	r3, r7, #16
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fe83 	bl	800baac <xTaskCheckForTimeOut>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d123      	bne.n	800adf4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adae:	f000 f917 	bl	800afe0 <prvIsQueueEmpty>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d017      	beq.n	800ade8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adba:	3324      	adds	r3, #36	; 0x24
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 fda9 	bl	800b918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adc8:	f000 f8b8 	bl	800af3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800adcc:	f000 fbde 	bl	800b58c <xTaskResumeAll>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d189      	bne.n	800acea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800add6:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <xQueueReceive+0x1bc>)
 800add8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	f3bf 8f4f 	dsb	sy
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	e780      	b.n	800acea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ade8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adea:	f000 f8a7 	bl	800af3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adee:	f000 fbcd 	bl	800b58c <xTaskResumeAll>
 800adf2:	e77a      	b.n	800acea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800adf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adf6:	f000 f8a1 	bl	800af3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adfa:	f000 fbc7 	bl	800b58c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae00:	f000 f8ee 	bl	800afe0 <prvIsQueueEmpty>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f43f af6f 	beq.w	800acea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3730      	adds	r7, #48	; 0x30
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b086      	sub	sp, #24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10d      	bne.n	800ae56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d14d      	bne.n	800aede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 ff92 	bl	800bd70 <xTaskPriorityDisinherit>
 800ae4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	609a      	str	r2, [r3, #8]
 800ae54:	e043      	b.n	800aede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d119      	bne.n	800ae90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6858      	ldr	r0, [r3, #4]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae64:	461a      	mov	r2, r3
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	f008 fd76 	bl	8013958 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae74:	441a      	add	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d32b      	bcc.n	800aede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	605a      	str	r2, [r3, #4]
 800ae8e:	e026      	b.n	800aede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	68d8      	ldr	r0, [r3, #12]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae98:	461a      	mov	r2, r3
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	f008 fd5c 	bl	8013958 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68da      	ldr	r2, [r3, #12]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea8:	425b      	negs	r3, r3
 800aeaa:	441a      	add	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d207      	bcs.n	800aecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec4:	425b      	negs	r3, r3
 800aec6:	441a      	add	r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d105      	bne.n	800aede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	1c5a      	adds	r2, r3, #1
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aee6:	697b      	ldr	r3, [r7, #20]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d018      	beq.n	800af34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68da      	ldr	r2, [r3, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0a:	441a      	add	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68da      	ldr	r2, [r3, #12]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d303      	bcc.n	800af24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68d9      	ldr	r1, [r3, #12]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	461a      	mov	r2, r3
 800af2e:	6838      	ldr	r0, [r7, #0]
 800af30:	f008 fd12 	bl	8013958 <memcpy>
	}
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af44:	f001 fc4e 	bl	800c7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af50:	e011      	b.n	800af76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d012      	beq.n	800af80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3324      	adds	r3, #36	; 0x24
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 fd2a 	bl	800b9b8 <xTaskRemoveFromEventList>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af6a:	f000 fe01 	bl	800bb70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
 800af70:	3b01      	subs	r3, #1
 800af72:	b2db      	uxtb	r3, r3
 800af74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dce9      	bgt.n	800af52 <prvUnlockQueue+0x16>
 800af7e:	e000      	b.n	800af82 <prvUnlockQueue+0x46>
					break;
 800af80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	22ff      	movs	r2, #255	; 0xff
 800af86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af8a:	f001 fc5b 	bl	800c844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af8e:	f001 fc29 	bl	800c7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af9a:	e011      	b.n	800afc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d012      	beq.n	800afca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3310      	adds	r3, #16
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 fd05 	bl	800b9b8 <xTaskRemoveFromEventList>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d001      	beq.n	800afb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afb4:	f000 fddc 	bl	800bb70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	3b01      	subs	r3, #1
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dce9      	bgt.n	800af9c <prvUnlockQueue+0x60>
 800afc8:	e000      	b.n	800afcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	22ff      	movs	r2, #255	; 0xff
 800afd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afd4:	f001 fc36 	bl	800c844 <vPortExitCritical>
}
 800afd8:	bf00      	nop
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afe8:	f001 fbfc 	bl	800c7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aff4:	2301      	movs	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	e001      	b.n	800affe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800affe:	f001 fc21 	bl	800c844 <vPortExitCritical>

	return xReturn;
 800b002:	68fb      	ldr	r3, [r7, #12]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b014:	f001 fbe6 	bl	800c7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b020:	429a      	cmp	r2, r3
 800b022:	d102      	bne.n	800b02a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b024:	2301      	movs	r3, #1
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	e001      	b.n	800b02e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b02e:	f001 fc09 	bl	800c844 <vPortExitCritical>

	return xReturn;
 800b032:	68fb      	ldr	r3, [r7, #12]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b046:	2300      	movs	r3, #0
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	e014      	b.n	800b076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b04c:	4a0f      	ldr	r2, [pc, #60]	; (800b08c <vQueueAddToRegistry+0x50>)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10b      	bne.n	800b070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b058:	490c      	ldr	r1, [pc, #48]	; (800b08c <vQueueAddToRegistry+0x50>)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	683a      	ldr	r2, [r7, #0]
 800b05e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b062:	4a0a      	ldr	r2, [pc, #40]	; (800b08c <vQueueAddToRegistry+0x50>)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	4413      	add	r3, r2
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b06e:	e006      	b.n	800b07e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3301      	adds	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b07      	cmp	r3, #7
 800b07a:	d9e7      	bls.n	800b04c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	2000544c 	.word	0x2000544c

0800b090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0a0:	f001 fba0 	bl	800c7e4 <vPortEnterCritical>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0aa:	b25b      	sxtb	r3, r3
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d103      	bne.n	800b0ba <vQueueWaitForMessageRestricted+0x2a>
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0c0:	b25b      	sxtb	r3, r3
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d103      	bne.n	800b0d0 <vQueueWaitForMessageRestricted+0x40>
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0d0:	f001 fbb8 	bl	800c844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d106      	bne.n	800b0ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	3324      	adds	r3, #36	; 0x24
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 fc3b 	bl	800b960 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0ea:	6978      	ldr	r0, [r7, #20]
 800b0ec:	f7ff ff26 	bl	800af3c <prvUnlockQueue>
	}
 800b0f0:	bf00      	nop
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08e      	sub	sp, #56	; 0x38
 800b0fc:	af04      	add	r7, sp, #16
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	623b      	str	r3, [r7, #32]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	2b00      	cmp	r3, #0
 800b126:	d10a      	bne.n	800b13e <xTaskCreateStatic+0x46>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	f383 8811 	msr	BASEPRI, r3
 800b130:	f3bf 8f6f 	isb	sy
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	61fb      	str	r3, [r7, #28]
}
 800b13a:	bf00      	nop
 800b13c:	e7fe      	b.n	800b13c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b13e:	235c      	movs	r3, #92	; 0x5c
 800b140:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2b5c      	cmp	r3, #92	; 0x5c
 800b146:	d00a      	beq.n	800b15e <xTaskCreateStatic+0x66>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	61bb      	str	r3, [r7, #24]
}
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b15e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	2b00      	cmp	r3, #0
 800b164:	d01e      	beq.n	800b1a4 <xTaskCreateStatic+0xac>
 800b166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d01b      	beq.n	800b1a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b174:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b17e:	2300      	movs	r3, #0
 800b180:	9303      	str	r3, [sp, #12]
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	9302      	str	r3, [sp, #8]
 800b186:	f107 0314 	add.w	r3, r7, #20
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 f850 	bl	800b23c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b19c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b19e:	f000 f8dd 	bl	800b35c <prvAddNewTaskToReadyList>
 800b1a2:	e001      	b.n	800b1a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1a8:	697b      	ldr	r3, [r7, #20]
	}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3728      	adds	r7, #40	; 0x28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b08c      	sub	sp, #48	; 0x30
 800b1b6:	af04      	add	r7, sp, #16
 800b1b8:	60f8      	str	r0, [r7, #12]
 800b1ba:	60b9      	str	r1, [r7, #8]
 800b1bc:	603b      	str	r3, [r7, #0]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f001 fc2e 	bl	800ca28 <pvPortMalloc>
 800b1cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00e      	beq.n	800b1f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1d4:	205c      	movs	r0, #92	; 0x5c
 800b1d6:	f001 fc27 	bl	800ca28 <pvPortMalloc>
 800b1da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	631a      	str	r2, [r3, #48]	; 0x30
 800b1e8:	e005      	b.n	800b1f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1ea:	6978      	ldr	r0, [r7, #20]
 800b1ec:	f001 fce8 	bl	800cbc0 <vPortFree>
 800b1f0:	e001      	b.n	800b1f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d017      	beq.n	800b22c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b204:	88fa      	ldrh	r2, [r7, #6]
 800b206:	2300      	movs	r3, #0
 800b208:	9303      	str	r3, [sp, #12]
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	9302      	str	r3, [sp, #8]
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 f80e 	bl	800b23c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b220:	69f8      	ldr	r0, [r7, #28]
 800b222:	f000 f89b 	bl	800b35c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b226:	2301      	movs	r3, #1
 800b228:	61bb      	str	r3, [r7, #24]
 800b22a:	e002      	b.n	800b232 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b22c:	f04f 33ff 	mov.w	r3, #4294967295
 800b230:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b232:	69bb      	ldr	r3, [r7, #24]
	}
 800b234:	4618      	mov	r0, r3
 800b236:	3720      	adds	r7, #32
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	461a      	mov	r2, r3
 800b254:	21a5      	movs	r1, #165	; 0xa5
 800b256:	f008 fb8d 	bl	8013974 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b264:	3b01      	subs	r3, #1
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	f003 0307 	and.w	r3, r3, #7
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	617b      	str	r3, [r7, #20]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d01f      	beq.n	800b2da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b29a:	2300      	movs	r3, #0
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	e012      	b.n	800b2c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	7819      	ldrb	r1, [r3, #0]
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	3334      	adds	r3, #52	; 0x34
 800b2b0:	460a      	mov	r2, r1
 800b2b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d006      	beq.n	800b2ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	61fb      	str	r3, [r7, #28]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2b0f      	cmp	r3, #15
 800b2ca:	d9e9      	bls.n	800b2a0 <prvInitialiseNewTask+0x64>
 800b2cc:	e000      	b.n	800b2d0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b2ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2d8:	e003      	b.n	800b2e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e4:	2b37      	cmp	r3, #55	; 0x37
 800b2e6:	d901      	bls.n	800b2ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2e8:	2337      	movs	r3, #55	; 0x37
 800b2ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	3304      	adds	r3, #4
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff f978 	bl	800a5f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	3318      	adds	r3, #24
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff f973 	bl	800a5f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	2200      	movs	r2, #0
 800b32c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	68f9      	ldr	r1, [r7, #12]
 800b33a:	69b8      	ldr	r0, [r7, #24]
 800b33c:	f001 f928 	bl	800c590 <pxPortInitialiseStack>
 800b340:	4602      	mov	r2, r0
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b352:	bf00      	nop
 800b354:	3720      	adds	r7, #32
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b364:	f001 fa3e 	bl	800c7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b368:	4b2d      	ldr	r3, [pc, #180]	; (800b420 <prvAddNewTaskToReadyList+0xc4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3301      	adds	r3, #1
 800b36e:	4a2c      	ldr	r2, [pc, #176]	; (800b420 <prvAddNewTaskToReadyList+0xc4>)
 800b370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b372:	4b2c      	ldr	r3, [pc, #176]	; (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d109      	bne.n	800b38e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b37a:	4a2a      	ldr	r2, [pc, #168]	; (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b380:	4b27      	ldr	r3, [pc, #156]	; (800b420 <prvAddNewTaskToReadyList+0xc4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d110      	bne.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b388:	f000 fc16 	bl	800bbb8 <prvInitialiseTaskLists>
 800b38c:	e00d      	b.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b38e:	4b26      	ldr	r3, [pc, #152]	; (800b428 <prvAddNewTaskToReadyList+0xcc>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d109      	bne.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b396:	4b23      	ldr	r3, [pc, #140]	; (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d802      	bhi.n	800b3aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3a4:	4a1f      	ldr	r2, [pc, #124]	; (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3aa:	4b20      	ldr	r3, [pc, #128]	; (800b42c <prvAddNewTaskToReadyList+0xd0>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	4a1e      	ldr	r2, [pc, #120]	; (800b42c <prvAddNewTaskToReadyList+0xd0>)
 800b3b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	; (800b42c <prvAddNewTaskToReadyList+0xd0>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c0:	4b1b      	ldr	r3, [pc, #108]	; (800b430 <prvAddNewTaskToReadyList+0xd4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d903      	bls.n	800b3d0 <prvAddNewTaskToReadyList+0x74>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	4a18      	ldr	r2, [pc, #96]	; (800b430 <prvAddNewTaskToReadyList+0xd4>)
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d4:	4613      	mov	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	4413      	add	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4a15      	ldr	r2, [pc, #84]	; (800b434 <prvAddNewTaskToReadyList+0xd8>)
 800b3de:	441a      	add	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	f7ff f913 	bl	800a612 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3ec:	f001 fa2a 	bl	800c844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3f0:	4b0d      	ldr	r3, [pc, #52]	; (800b428 <prvAddNewTaskToReadyList+0xcc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00e      	beq.n	800b416 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3f8:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <prvAddNewTaskToReadyList+0xc8>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	429a      	cmp	r2, r3
 800b404:	d207      	bcs.n	800b416 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b406:	4b0c      	ldr	r3, [pc, #48]	; (800b438 <prvAddNewTaskToReadyList+0xdc>)
 800b408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b416:	bf00      	nop
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20001660 	.word	0x20001660
 800b424:	2000118c 	.word	0x2000118c
 800b428:	2000166c 	.word	0x2000166c
 800b42c:	2000167c 	.word	0x2000167c
 800b430:	20001668 	.word	0x20001668
 800b434:	20001190 	.word	0x20001190
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b444:	2300      	movs	r3, #0
 800b446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d017      	beq.n	800b47e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <vTaskDelay+0x60>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00a      	beq.n	800b46c <vTaskDelay+0x30>
	__asm volatile
 800b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	60bb      	str	r3, [r7, #8]
}
 800b468:	bf00      	nop
 800b46a:	e7fe      	b.n	800b46a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b46c:	f000 f880 	bl	800b570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b470:	2100      	movs	r1, #0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fcea 	bl	800be4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b478:	f000 f888 	bl	800b58c <xTaskResumeAll>
 800b47c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d107      	bne.n	800b494 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b484:	4b06      	ldr	r3, [pc, #24]	; (800b4a0 <vTaskDelay+0x64>)
 800b486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20001688 	.word	0x20001688
 800b4a0:	e000ed04 	.word	0xe000ed04

0800b4a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4b2:	463a      	mov	r2, r7
 800b4b4:	1d39      	adds	r1, r7, #4
 800b4b6:	f107 0308 	add.w	r3, r7, #8
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff f848 	bl	800a550 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	9202      	str	r2, [sp, #8]
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	460a      	mov	r2, r1
 800b4d2:	4921      	ldr	r1, [pc, #132]	; (800b558 <vTaskStartScheduler+0xb4>)
 800b4d4:	4821      	ldr	r0, [pc, #132]	; (800b55c <vTaskStartScheduler+0xb8>)
 800b4d6:	f7ff fe0f 	bl	800b0f8 <xTaskCreateStatic>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	4a20      	ldr	r2, [pc, #128]	; (800b560 <vTaskStartScheduler+0xbc>)
 800b4de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4e0:	4b1f      	ldr	r3, [pc, #124]	; (800b560 <vTaskStartScheduler+0xbc>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	e001      	b.n	800b4f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d102      	bne.n	800b4fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4f8:	f000 fcfc 	bl	800bef4 <xTimerCreateTimerTask>
 800b4fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d116      	bne.n	800b532 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	613b      	str	r3, [r7, #16]
}
 800b516:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b518:	4b12      	ldr	r3, [pc, #72]	; (800b564 <vTaskStartScheduler+0xc0>)
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295
 800b51e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b520:	4b11      	ldr	r3, [pc, #68]	; (800b568 <vTaskStartScheduler+0xc4>)
 800b522:	2201      	movs	r2, #1
 800b524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b526:	4b11      	ldr	r3, [pc, #68]	; (800b56c <vTaskStartScheduler+0xc8>)
 800b528:	2200      	movs	r2, #0
 800b52a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b52c:	f001 f8b8 	bl	800c6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b530:	e00e      	b.n	800b550 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b538:	d10a      	bne.n	800b550 <vTaskStartScheduler+0xac>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	60fb      	str	r3, [r7, #12]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vTaskStartScheduler+0xaa>
}
 800b550:	bf00      	nop
 800b552:	3718      	adds	r7, #24
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	08013c00 	.word	0x08013c00
 800b55c:	0800bb89 	.word	0x0800bb89
 800b560:	20001684 	.word	0x20001684
 800b564:	20001680 	.word	0x20001680
 800b568:	2000166c 	.word	0x2000166c
 800b56c:	20001664 	.word	0x20001664

0800b570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b570:	b480      	push	{r7}
 800b572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b574:	4b04      	ldr	r3, [pc, #16]	; (800b588 <vTaskSuspendAll+0x18>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3301      	adds	r3, #1
 800b57a:	4a03      	ldr	r2, [pc, #12]	; (800b588 <vTaskSuspendAll+0x18>)
 800b57c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b57e:	bf00      	nop
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	20001688 	.word	0x20001688

0800b58c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b592:	2300      	movs	r3, #0
 800b594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b596:	2300      	movs	r3, #0
 800b598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b59a:	4b42      	ldr	r3, [pc, #264]	; (800b6a4 <xTaskResumeAll+0x118>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10a      	bne.n	800b5b8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	603b      	str	r3, [r7, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	e7fe      	b.n	800b5b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5b8:	f001 f914 	bl	800c7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5bc:	4b39      	ldr	r3, [pc, #228]	; (800b6a4 <xTaskResumeAll+0x118>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	4a38      	ldr	r2, [pc, #224]	; (800b6a4 <xTaskResumeAll+0x118>)
 800b5c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5c6:	4b37      	ldr	r3, [pc, #220]	; (800b6a4 <xTaskResumeAll+0x118>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d162      	bne.n	800b694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5ce:	4b36      	ldr	r3, [pc, #216]	; (800b6a8 <xTaskResumeAll+0x11c>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d05e      	beq.n	800b694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5d6:	e02f      	b.n	800b638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d8:	4b34      	ldr	r3, [pc, #208]	; (800b6ac <xTaskResumeAll+0x120>)
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3318      	adds	r3, #24
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7ff f871 	bl	800a6cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7ff f86c 	bl	800a6cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f8:	4b2d      	ldr	r3, [pc, #180]	; (800b6b0 <xTaskResumeAll+0x124>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d903      	bls.n	800b608 <xTaskResumeAll+0x7c>
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	4a2a      	ldr	r2, [pc, #168]	; (800b6b0 <xTaskResumeAll+0x124>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4a27      	ldr	r2, [pc, #156]	; (800b6b4 <xTaskResumeAll+0x128>)
 800b616:	441a      	add	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f7fe fff7 	bl	800a612 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b628:	4b23      	ldr	r3, [pc, #140]	; (800b6b8 <xTaskResumeAll+0x12c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	429a      	cmp	r2, r3
 800b630:	d302      	bcc.n	800b638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b632:	4b22      	ldr	r3, [pc, #136]	; (800b6bc <xTaskResumeAll+0x130>)
 800b634:	2201      	movs	r2, #1
 800b636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b638:	4b1c      	ldr	r3, [pc, #112]	; (800b6ac <xTaskResumeAll+0x120>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1cb      	bne.n	800b5d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b646:	f000 fb55 	bl	800bcf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b64a:	4b1d      	ldr	r3, [pc, #116]	; (800b6c0 <xTaskResumeAll+0x134>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d010      	beq.n	800b678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b656:	f000 f847 	bl	800b6e8 <xTaskIncrementTick>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b660:	4b16      	ldr	r3, [pc, #88]	; (800b6bc <xTaskResumeAll+0x130>)
 800b662:	2201      	movs	r2, #1
 800b664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	3b01      	subs	r3, #1
 800b66a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f1      	bne.n	800b656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b672:	4b13      	ldr	r3, [pc, #76]	; (800b6c0 <xTaskResumeAll+0x134>)
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b678:	4b10      	ldr	r3, [pc, #64]	; (800b6bc <xTaskResumeAll+0x130>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b680:	2301      	movs	r3, #1
 800b682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b684:	4b0f      	ldr	r3, [pc, #60]	; (800b6c4 <xTaskResumeAll+0x138>)
 800b686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b68a:	601a      	str	r2, [r3, #0]
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b694:	f001 f8d6 	bl	800c844 <vPortExitCritical>

	return xAlreadyYielded;
 800b698:	68bb      	ldr	r3, [r7, #8]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20001688 	.word	0x20001688
 800b6a8:	20001660 	.word	0x20001660
 800b6ac:	20001620 	.word	0x20001620
 800b6b0:	20001668 	.word	0x20001668
 800b6b4:	20001190 	.word	0x20001190
 800b6b8:	2000118c 	.word	0x2000118c
 800b6bc:	20001674 	.word	0x20001674
 800b6c0:	20001670 	.word	0x20001670
 800b6c4:	e000ed04 	.word	0xe000ed04

0800b6c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6ce:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <xTaskGetTickCount+0x1c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6d4:	687b      	ldr	r3, [r7, #4]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	20001664 	.word	0x20001664

0800b6e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6f2:	4b4f      	ldr	r3, [pc, #316]	; (800b830 <xTaskIncrementTick+0x148>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 808f 	bne.w	800b81a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b6fc:	4b4d      	ldr	r3, [pc, #308]	; (800b834 <xTaskIncrementTick+0x14c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b704:	4a4b      	ldr	r2, [pc, #300]	; (800b834 <xTaskIncrementTick+0x14c>)
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d120      	bne.n	800b752 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b710:	4b49      	ldr	r3, [pc, #292]	; (800b838 <xTaskIncrementTick+0x150>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <xTaskIncrementTick+0x48>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <xTaskIncrementTick+0x46>
 800b730:	4b41      	ldr	r3, [pc, #260]	; (800b838 <xTaskIncrementTick+0x150>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	4b41      	ldr	r3, [pc, #260]	; (800b83c <xTaskIncrementTick+0x154>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a3f      	ldr	r2, [pc, #252]	; (800b838 <xTaskIncrementTick+0x150>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	4a3f      	ldr	r2, [pc, #252]	; (800b83c <xTaskIncrementTick+0x154>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	4b3e      	ldr	r3, [pc, #248]	; (800b840 <xTaskIncrementTick+0x158>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3301      	adds	r3, #1
 800b74a:	4a3d      	ldr	r2, [pc, #244]	; (800b840 <xTaskIncrementTick+0x158>)
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	f000 fad1 	bl	800bcf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b752:	4b3c      	ldr	r3, [pc, #240]	; (800b844 <xTaskIncrementTick+0x15c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d349      	bcc.n	800b7f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b75c:	4b36      	ldr	r3, [pc, #216]	; (800b838 <xTaskIncrementTick+0x150>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d104      	bne.n	800b770 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b766:	4b37      	ldr	r3, [pc, #220]	; (800b844 <xTaskIncrementTick+0x15c>)
 800b768:	f04f 32ff 	mov.w	r2, #4294967295
 800b76c:	601a      	str	r2, [r3, #0]
					break;
 800b76e:	e03f      	b.n	800b7f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b770:	4b31      	ldr	r3, [pc, #196]	; (800b838 <xTaskIncrementTick+0x150>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d203      	bcs.n	800b790 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b788:	4a2e      	ldr	r2, [pc, #184]	; (800b844 <xTaskIncrementTick+0x15c>)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b78e:	e02f      	b.n	800b7f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	3304      	adds	r3, #4
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe ff99 	bl	800a6cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d004      	beq.n	800b7ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	3318      	adds	r3, #24
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe ff90 	bl	800a6cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b0:	4b25      	ldr	r3, [pc, #148]	; (800b848 <xTaskIncrementTick+0x160>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d903      	bls.n	800b7c0 <xTaskIncrementTick+0xd8>
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	4a22      	ldr	r2, [pc, #136]	; (800b848 <xTaskIncrementTick+0x160>)
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009b      	lsls	r3, r3, #2
 800b7cc:	4a1f      	ldr	r2, [pc, #124]	; (800b84c <xTaskIncrementTick+0x164>)
 800b7ce:	441a      	add	r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f7fe ff1b 	bl	800a612 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	4b1b      	ldr	r3, [pc, #108]	; (800b850 <xTaskIncrementTick+0x168>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d3b8      	bcc.n	800b75c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7ee:	e7b5      	b.n	800b75c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b7f0:	4b17      	ldr	r3, [pc, #92]	; (800b850 <xTaskIncrementTick+0x168>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f6:	4915      	ldr	r1, [pc, #84]	; (800b84c <xTaskIncrementTick+0x164>)
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	440b      	add	r3, r1
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b01      	cmp	r3, #1
 800b806:	d901      	bls.n	800b80c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b808:	2301      	movs	r3, #1
 800b80a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b80c:	4b11      	ldr	r3, [pc, #68]	; (800b854 <xTaskIncrementTick+0x16c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b814:	2301      	movs	r3, #1
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	e004      	b.n	800b824 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b81a:	4b0f      	ldr	r3, [pc, #60]	; (800b858 <xTaskIncrementTick+0x170>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	4a0d      	ldr	r2, [pc, #52]	; (800b858 <xTaskIncrementTick+0x170>)
 800b822:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b824:	697b      	ldr	r3, [r7, #20]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20001688 	.word	0x20001688
 800b834:	20001664 	.word	0x20001664
 800b838:	20001618 	.word	0x20001618
 800b83c:	2000161c 	.word	0x2000161c
 800b840:	20001678 	.word	0x20001678
 800b844:	20001680 	.word	0x20001680
 800b848:	20001668 	.word	0x20001668
 800b84c:	20001190 	.word	0x20001190
 800b850:	2000118c 	.word	0x2000118c
 800b854:	20001674 	.word	0x20001674
 800b858:	20001670 	.word	0x20001670

0800b85c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b085      	sub	sp, #20
 800b860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b862:	4b28      	ldr	r3, [pc, #160]	; (800b904 <vTaskSwitchContext+0xa8>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b86a:	4b27      	ldr	r3, [pc, #156]	; (800b908 <vTaskSwitchContext+0xac>)
 800b86c:	2201      	movs	r2, #1
 800b86e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b870:	e041      	b.n	800b8f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b872:	4b25      	ldr	r3, [pc, #148]	; (800b908 <vTaskSwitchContext+0xac>)
 800b874:	2200      	movs	r2, #0
 800b876:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b878:	4b24      	ldr	r3, [pc, #144]	; (800b90c <vTaskSwitchContext+0xb0>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]
 800b87e:	e010      	b.n	800b8a2 <vTaskSwitchContext+0x46>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10a      	bne.n	800b89c <vTaskSwitchContext+0x40>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	607b      	str	r3, [r7, #4]
}
 800b898:	bf00      	nop
 800b89a:	e7fe      	b.n	800b89a <vTaskSwitchContext+0x3e>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	491b      	ldr	r1, [pc, #108]	; (800b910 <vTaskSwitchContext+0xb4>)
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0e4      	beq.n	800b880 <vTaskSwitchContext+0x24>
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4a13      	ldr	r2, [pc, #76]	; (800b910 <vTaskSwitchContext+0xb4>)
 800b8c2:	4413      	add	r3, r2
 800b8c4:	60bb      	str	r3, [r7, #8]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	605a      	str	r2, [r3, #4]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	3308      	adds	r3, #8
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d104      	bne.n	800b8e6 <vTaskSwitchContext+0x8a>
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	605a      	str	r2, [r3, #4]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	4a09      	ldr	r2, [pc, #36]	; (800b914 <vTaskSwitchContext+0xb8>)
 800b8ee:	6013      	str	r3, [r2, #0]
 800b8f0:	4a06      	ldr	r2, [pc, #24]	; (800b90c <vTaskSwitchContext+0xb0>)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6013      	str	r3, [r2, #0]
}
 800b8f6:	bf00      	nop
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	20001688 	.word	0x20001688
 800b908:	20001674 	.word	0x20001674
 800b90c:	20001668 	.word	0x20001668
 800b910:	20001190 	.word	0x20001190
 800b914:	2000118c 	.word	0x2000118c

0800b918 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d10a      	bne.n	800b93e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	60fb      	str	r3, [r7, #12]
}
 800b93a:	bf00      	nop
 800b93c:	e7fe      	b.n	800b93c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b93e:	4b07      	ldr	r3, [pc, #28]	; (800b95c <vTaskPlaceOnEventList+0x44>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3318      	adds	r3, #24
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7fe fe87 	bl	800a65a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b94c:	2101      	movs	r1, #1
 800b94e:	6838      	ldr	r0, [r7, #0]
 800b950:	f000 fa7c 	bl	800be4c <prvAddCurrentTaskToDelayedList>
}
 800b954:	bf00      	nop
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	2000118c 	.word	0x2000118c

0800b960 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10a      	bne.n	800b988 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	617b      	str	r3, [r7, #20]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3318      	adds	r3, #24
 800b98e:	4619      	mov	r1, r3
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7fe fe3e 	bl	800a612 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9a2:	6879      	ldr	r1, [r7, #4]
 800b9a4:	68b8      	ldr	r0, [r7, #8]
 800b9a6:	f000 fa51 	bl	800be4c <prvAddCurrentTaskToDelayedList>
	}
 800b9aa:	bf00      	nop
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	2000118c 	.word	0x2000118c

0800b9b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	60fb      	str	r3, [r7, #12]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	3318      	adds	r3, #24
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fe fe6f 	bl	800a6cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9ee:	4b1e      	ldr	r3, [pc, #120]	; (800ba68 <xTaskRemoveFromEventList+0xb0>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d11d      	bne.n	800ba32 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe fe66 	bl	800a6cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba04:	4b19      	ldr	r3, [pc, #100]	; (800ba6c <xTaskRemoveFromEventList+0xb4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d903      	bls.n	800ba14 <xTaskRemoveFromEventList+0x5c>
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	4a16      	ldr	r2, [pc, #88]	; (800ba6c <xTaskRemoveFromEventList+0xb4>)
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4a13      	ldr	r2, [pc, #76]	; (800ba70 <xTaskRemoveFromEventList+0xb8>)
 800ba22:	441a      	add	r2, r3
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	3304      	adds	r3, #4
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f7fe fdf1 	bl	800a612 <vListInsertEnd>
 800ba30:	e005      	b.n	800ba3e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	3318      	adds	r3, #24
 800ba36:	4619      	mov	r1, r3
 800ba38:	480e      	ldr	r0, [pc, #56]	; (800ba74 <xTaskRemoveFromEventList+0xbc>)
 800ba3a:	f7fe fdea 	bl	800a612 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba42:	4b0d      	ldr	r3, [pc, #52]	; (800ba78 <xTaskRemoveFromEventList+0xc0>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d905      	bls.n	800ba58 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba50:	4b0a      	ldr	r3, [pc, #40]	; (800ba7c <xTaskRemoveFromEventList+0xc4>)
 800ba52:	2201      	movs	r2, #1
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	e001      	b.n	800ba5c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba5c:	697b      	ldr	r3, [r7, #20]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3718      	adds	r7, #24
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20001688 	.word	0x20001688
 800ba6c:	20001668 	.word	0x20001668
 800ba70:	20001190 	.word	0x20001190
 800ba74:	20001620 	.word	0x20001620
 800ba78:	2000118c 	.word	0x2000118c
 800ba7c:	20001674 	.word	0x20001674

0800ba80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba88:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <vTaskInternalSetTimeOutState+0x24>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba90:	4b05      	ldr	r3, [pc, #20]	; (800baa8 <vTaskInternalSetTimeOutState+0x28>)
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	605a      	str	r2, [r3, #4]
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	20001678 	.word	0x20001678
 800baa8:	20001664 	.word	0x20001664

0800baac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	613b      	str	r3, [r7, #16]
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10a      	bne.n	800baee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	60fb      	str	r3, [r7, #12]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800baee:	f000 fe79 	bl	800c7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800baf2:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <xTaskCheckForTimeOut+0xbc>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	69ba      	ldr	r2, [r7, #24]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0a:	d102      	bne.n	800bb12 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	61fb      	str	r3, [r7, #28]
 800bb10:	e023      	b.n	800bb5a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <xTaskCheckForTimeOut+0xc0>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d007      	beq.n	800bb2e <xTaskCheckForTimeOut+0x82>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	69ba      	ldr	r2, [r7, #24]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d302      	bcc.n	800bb2e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	61fb      	str	r3, [r7, #28]
 800bb2c:	e015      	b.n	800bb5a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d20b      	bcs.n	800bb50 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	1ad2      	subs	r2, r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff ff9b 	bl	800ba80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	61fb      	str	r3, [r7, #28]
 800bb4e:	e004      	b.n	800bb5a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2200      	movs	r2, #0
 800bb54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb56:	2301      	movs	r3, #1
 800bb58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb5a:	f000 fe73 	bl	800c844 <vPortExitCritical>

	return xReturn;
 800bb5e:	69fb      	ldr	r3, [r7, #28]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	20001664 	.word	0x20001664
 800bb6c:	20001678 	.word	0x20001678

0800bb70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb70:	b480      	push	{r7}
 800bb72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb74:	4b03      	ldr	r3, [pc, #12]	; (800bb84 <vTaskMissedYield+0x14>)
 800bb76:	2201      	movs	r2, #1
 800bb78:	601a      	str	r2, [r3, #0]
}
 800bb7a:	bf00      	nop
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	20001674 	.word	0x20001674

0800bb88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb90:	f000 f852 	bl	800bc38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb94:	4b06      	ldr	r3, [pc, #24]	; (800bbb0 <prvIdleTask+0x28>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d9f9      	bls.n	800bb90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb9c:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <prvIdleTask+0x2c>)
 800bb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba2:	601a      	str	r2, [r3, #0]
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbac:	e7f0      	b.n	800bb90 <prvIdleTask+0x8>
 800bbae:	bf00      	nop
 800bbb0:	20001190 	.word	0x20001190
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	607b      	str	r3, [r7, #4]
 800bbc2:	e00c      	b.n	800bbde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4a12      	ldr	r2, [pc, #72]	; (800bc18 <prvInitialiseTaskLists+0x60>)
 800bbd0:	4413      	add	r3, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fcf0 	bl	800a5b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	607b      	str	r3, [r7, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b37      	cmp	r3, #55	; 0x37
 800bbe2:	d9ef      	bls.n	800bbc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbe4:	480d      	ldr	r0, [pc, #52]	; (800bc1c <prvInitialiseTaskLists+0x64>)
 800bbe6:	f7fe fce7 	bl	800a5b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbea:	480d      	ldr	r0, [pc, #52]	; (800bc20 <prvInitialiseTaskLists+0x68>)
 800bbec:	f7fe fce4 	bl	800a5b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbf0:	480c      	ldr	r0, [pc, #48]	; (800bc24 <prvInitialiseTaskLists+0x6c>)
 800bbf2:	f7fe fce1 	bl	800a5b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbf6:	480c      	ldr	r0, [pc, #48]	; (800bc28 <prvInitialiseTaskLists+0x70>)
 800bbf8:	f7fe fcde 	bl	800a5b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbfc:	480b      	ldr	r0, [pc, #44]	; (800bc2c <prvInitialiseTaskLists+0x74>)
 800bbfe:	f7fe fcdb 	bl	800a5b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc02:	4b0b      	ldr	r3, [pc, #44]	; (800bc30 <prvInitialiseTaskLists+0x78>)
 800bc04:	4a05      	ldr	r2, [pc, #20]	; (800bc1c <prvInitialiseTaskLists+0x64>)
 800bc06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvInitialiseTaskLists+0x7c>)
 800bc0a:	4a05      	ldr	r2, [pc, #20]	; (800bc20 <prvInitialiseTaskLists+0x68>)
 800bc0c:	601a      	str	r2, [r3, #0]
}
 800bc0e:	bf00      	nop
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20001190 	.word	0x20001190
 800bc1c:	200015f0 	.word	0x200015f0
 800bc20:	20001604 	.word	0x20001604
 800bc24:	20001620 	.word	0x20001620
 800bc28:	20001634 	.word	0x20001634
 800bc2c:	2000164c 	.word	0x2000164c
 800bc30:	20001618 	.word	0x20001618
 800bc34:	2000161c 	.word	0x2000161c

0800bc38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc3e:	e019      	b.n	800bc74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc40:	f000 fdd0 	bl	800c7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc44:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <prvCheckTasksWaitingTermination+0x50>)
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	68db      	ldr	r3, [r3, #12]
 800bc4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fd3b 	bl	800a6cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <prvCheckTasksWaitingTermination+0x54>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	4a0b      	ldr	r2, [pc, #44]	; (800bc8c <prvCheckTasksWaitingTermination+0x54>)
 800bc5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <prvCheckTasksWaitingTermination+0x58>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	4a0a      	ldr	r2, [pc, #40]	; (800bc90 <prvCheckTasksWaitingTermination+0x58>)
 800bc68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc6a:	f000 fdeb 	bl	800c844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f810 	bl	800bc94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc74:	4b06      	ldr	r3, [pc, #24]	; (800bc90 <prvCheckTasksWaitingTermination+0x58>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1e1      	bne.n	800bc40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20001634 	.word	0x20001634
 800bc8c:	20001660 	.word	0x20001660
 800bc90:	20001648 	.word	0x20001648

0800bc94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d108      	bne.n	800bcb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 ff88 	bl	800cbc0 <vPortFree>
				vPortFree( pxTCB );
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 ff85 	bl	800cbc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcb6:	e018      	b.n	800bcea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d103      	bne.n	800bcca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 ff7c 	bl	800cbc0 <vPortFree>
	}
 800bcc8:	e00f      	b.n	800bcea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d00a      	beq.n	800bcea <prvDeleteTCB+0x56>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60fb      	str	r3, [r7, #12]
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <prvDeleteTCB+0x54>
	}
 800bcea:	bf00      	nop
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
	...

0800bcf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcfa:	4b0c      	ldr	r3, [pc, #48]	; (800bd2c <prvResetNextTaskUnblockTime+0x38>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d104      	bne.n	800bd0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <prvResetNextTaskUnblockTime+0x3c>)
 800bd06:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd0c:	e008      	b.n	800bd20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd0e:	4b07      	ldr	r3, [pc, #28]	; (800bd2c <prvResetNextTaskUnblockTime+0x38>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4a04      	ldr	r2, [pc, #16]	; (800bd30 <prvResetNextTaskUnblockTime+0x3c>)
 800bd1e:	6013      	str	r3, [r2, #0]
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr
 800bd2c:	20001618 	.word	0x20001618
 800bd30:	20001680 	.word	0x20001680

0800bd34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd3a:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <xTaskGetSchedulerState+0x34>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d102      	bne.n	800bd48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd42:	2301      	movs	r3, #1
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	e008      	b.n	800bd5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd48:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <xTaskGetSchedulerState+0x38>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd50:	2302      	movs	r3, #2
 800bd52:	607b      	str	r3, [r7, #4]
 800bd54:	e001      	b.n	800bd5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd56:	2300      	movs	r3, #0
 800bd58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd5a:	687b      	ldr	r3, [r7, #4]
	}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	2000166c 	.word	0x2000166c
 800bd6c:	20001688 	.word	0x20001688

0800bd70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d056      	beq.n	800be34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd86:	4b2e      	ldr	r3, [pc, #184]	; (800be40 <xTaskPriorityDisinherit+0xd0>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	693a      	ldr	r2, [r7, #16]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d00a      	beq.n	800bda6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	60bb      	str	r3, [r7, #8]
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc8:	1e5a      	subs	r2, r3, #1
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d02c      	beq.n	800be34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d128      	bne.n	800be34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3304      	adds	r3, #4
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fc70 	bl	800a6cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be04:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <xTaskPriorityDisinherit+0xd4>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d903      	bls.n	800be14 <xTaskPriorityDisinherit+0xa4>
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	4a0c      	ldr	r2, [pc, #48]	; (800be44 <xTaskPriorityDisinherit+0xd4>)
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	4613      	mov	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	4a09      	ldr	r2, [pc, #36]	; (800be48 <xTaskPriorityDisinherit+0xd8>)
 800be22:	441a      	add	r2, r3
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	3304      	adds	r3, #4
 800be28:	4619      	mov	r1, r3
 800be2a:	4610      	mov	r0, r2
 800be2c:	f7fe fbf1 	bl	800a612 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be30:	2301      	movs	r3, #1
 800be32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be34:	697b      	ldr	r3, [r7, #20]
	}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	2000118c 	.word	0x2000118c
 800be44:	20001668 	.word	0x20001668
 800be48:	20001190 	.word	0x20001190

0800be4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be56:	4b21      	ldr	r3, [pc, #132]	; (800bedc <prvAddCurrentTaskToDelayedList+0x90>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be5c:	4b20      	ldr	r3, [pc, #128]	; (800bee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe fc32 	bl	800a6cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d10a      	bne.n	800be86 <prvAddCurrentTaskToDelayedList+0x3a>
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d007      	beq.n	800be86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be76:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4619      	mov	r1, r3
 800be7e:	4819      	ldr	r0, [pc, #100]	; (800bee4 <prvAddCurrentTaskToDelayedList+0x98>)
 800be80:	f7fe fbc7 	bl	800a612 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be84:	e026      	b.n	800bed4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4413      	add	r3, r2
 800be8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be8e:	4b14      	ldr	r3, [pc, #80]	; (800bee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d209      	bcs.n	800beb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be9e:	4b12      	ldr	r3, [pc, #72]	; (800bee8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	4b0f      	ldr	r3, [pc, #60]	; (800bee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7fe fbd5 	bl	800a65a <vListInsert>
}
 800beb0:	e010      	b.n	800bed4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beb2:	4b0e      	ldr	r3, [pc, #56]	; (800beec <prvAddCurrentTaskToDelayedList+0xa0>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	4b0a      	ldr	r3, [pc, #40]	; (800bee0 <prvAddCurrentTaskToDelayedList+0x94>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3304      	adds	r3, #4
 800bebc:	4619      	mov	r1, r3
 800bebe:	4610      	mov	r0, r2
 800bec0:	f7fe fbcb 	bl	800a65a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bec4:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	429a      	cmp	r2, r3
 800becc:	d202      	bcs.n	800bed4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bece:	4a08      	ldr	r2, [pc, #32]	; (800bef0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	6013      	str	r3, [r2, #0]
}
 800bed4:	bf00      	nop
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	20001664 	.word	0x20001664
 800bee0:	2000118c 	.word	0x2000118c
 800bee4:	2000164c 	.word	0x2000164c
 800bee8:	2000161c 	.word	0x2000161c
 800beec:	20001618 	.word	0x20001618
 800bef0:	20001680 	.word	0x20001680

0800bef4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b08a      	sub	sp, #40	; 0x28
 800bef8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800befa:	2300      	movs	r3, #0
 800befc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800befe:	f000 fb07 	bl	800c510 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bf02:	4b1c      	ldr	r3, [pc, #112]	; (800bf74 <xTimerCreateTimerTask+0x80>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d021      	beq.n	800bf4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bf12:	1d3a      	adds	r2, r7, #4
 800bf14:	f107 0108 	add.w	r1, r7, #8
 800bf18:	f107 030c 	add.w	r3, r7, #12
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fe fb31 	bl	800a584 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	9202      	str	r2, [sp, #8]
 800bf2a:	9301      	str	r3, [sp, #4]
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	2300      	movs	r3, #0
 800bf32:	460a      	mov	r2, r1
 800bf34:	4910      	ldr	r1, [pc, #64]	; (800bf78 <xTimerCreateTimerTask+0x84>)
 800bf36:	4811      	ldr	r0, [pc, #68]	; (800bf7c <xTimerCreateTimerTask+0x88>)
 800bf38:	f7ff f8de 	bl	800b0f8 <xTaskCreateStatic>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	4a10      	ldr	r2, [pc, #64]	; (800bf80 <xTimerCreateTimerTask+0x8c>)
 800bf40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bf42:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <xTimerCreateTimerTask+0x8c>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d001      	beq.n	800bf4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	613b      	str	r3, [r7, #16]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bf6a:	697b      	ldr	r3, [r7, #20]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	200016bc 	.word	0x200016bc
 800bf78:	08013c08 	.word	0x08013c08
 800bf7c:	0800c0b9 	.word	0x0800c0b9
 800bf80:	200016c0 	.word	0x200016c0

0800bf84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08a      	sub	sp, #40	; 0x28
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	607a      	str	r2, [r7, #4]
 800bf90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	623b      	str	r3, [r7, #32]
}
 800bfae:	bf00      	nop
 800bfb0:	e7fe      	b.n	800bfb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfb2:	4b1a      	ldr	r3, [pc, #104]	; (800c01c <xTimerGenericCommand+0x98>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d02a      	beq.n	800c010 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2b05      	cmp	r3, #5
 800bfca:	dc18      	bgt.n	800bffe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfcc:	f7ff feb2 	bl	800bd34 <xTaskGetSchedulerState>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d109      	bne.n	800bfea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfd6:	4b11      	ldr	r3, [pc, #68]	; (800c01c <xTimerGenericCommand+0x98>)
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	f107 0110 	add.w	r1, r7, #16
 800bfde:	2300      	movs	r3, #0
 800bfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe2:	f7fe fca1 	bl	800a928 <xQueueGenericSend>
 800bfe6:	6278      	str	r0, [r7, #36]	; 0x24
 800bfe8:	e012      	b.n	800c010 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bfea:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <xTimerGenericCommand+0x98>)
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f107 0110 	add.w	r1, r7, #16
 800bff2:	2300      	movs	r3, #0
 800bff4:	2200      	movs	r2, #0
 800bff6:	f7fe fc97 	bl	800a928 <xQueueGenericSend>
 800bffa:	6278      	str	r0, [r7, #36]	; 0x24
 800bffc:	e008      	b.n	800c010 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bffe:	4b07      	ldr	r3, [pc, #28]	; (800c01c <xTimerGenericCommand+0x98>)
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f107 0110 	add.w	r1, r7, #16
 800c006:	2300      	movs	r3, #0
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	f7fe fd8b 	bl	800ab24 <xQueueGenericSendFromISR>
 800c00e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c012:	4618      	mov	r0, r3
 800c014:	3728      	adds	r7, #40	; 0x28
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	200016bc 	.word	0x200016bc

0800c020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b088      	sub	sp, #32
 800c024:	af02      	add	r7, sp, #8
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c02a:	4b22      	ldr	r3, [pc, #136]	; (800c0b4 <prvProcessExpiredTimer+0x94>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	3304      	adds	r3, #4
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fe fb47 	bl	800a6cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d022      	beq.n	800c092 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	699a      	ldr	r2, [r3, #24]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	18d1      	adds	r1, r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	683a      	ldr	r2, [r7, #0]
 800c058:	6978      	ldr	r0, [r7, #20]
 800c05a:	f000 f8d1 	bl	800c200 <prvInsertTimerInActiveList>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d01f      	beq.n	800c0a4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c064:	2300      	movs	r3, #0
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	2300      	movs	r3, #0
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	2100      	movs	r1, #0
 800c06e:	6978      	ldr	r0, [r7, #20]
 800c070:	f7ff ff88 	bl	800bf84 <xTimerGenericCommand>
 800c074:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d113      	bne.n	800c0a4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	60fb      	str	r3, [r7, #12]
}
 800c08e:	bf00      	nop
 800c090:	e7fe      	b.n	800c090 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c098:	f023 0301 	bic.w	r3, r3, #1
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	6978      	ldr	r0, [r7, #20]
 800c0aa:	4798      	blx	r3
}
 800c0ac:	bf00      	nop
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	200016b4 	.word	0x200016b4

0800c0b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0c0:	f107 0308 	add.w	r3, r7, #8
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 f857 	bl	800c178 <prvGetNextExpireTime>
 800c0ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 f803 	bl	800c0dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c0d6:	f000 f8d5 	bl	800c284 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0da:	e7f1      	b.n	800c0c0 <prvTimerTask+0x8>

0800c0dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0e6:	f7ff fa43 	bl	800b570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0ea:	f107 0308 	add.w	r3, r7, #8
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f866 	bl	800c1c0 <prvSampleTimeNow>
 800c0f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d130      	bne.n	800c15e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10a      	bne.n	800c118 <prvProcessTimerOrBlockTask+0x3c>
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	429a      	cmp	r2, r3
 800c108:	d806      	bhi.n	800c118 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c10a:	f7ff fa3f 	bl	800b58c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c10e:	68f9      	ldr	r1, [r7, #12]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ff85 	bl	800c020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c116:	e024      	b.n	800c162 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d008      	beq.n	800c130 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <prvProcessTimerOrBlockTask+0x90>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <prvProcessTimerOrBlockTask+0x50>
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <prvProcessTimerOrBlockTask+0x52>
 800c12c:	2300      	movs	r3, #0
 800c12e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c130:	4b0f      	ldr	r3, [pc, #60]	; (800c170 <prvProcessTimerOrBlockTask+0x94>)
 800c132:	6818      	ldr	r0, [r3, #0]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	4619      	mov	r1, r3
 800c13e:	f7fe ffa7 	bl	800b090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c142:	f7ff fa23 	bl	800b58c <xTaskResumeAll>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c14c:	4b09      	ldr	r3, [pc, #36]	; (800c174 <prvProcessTimerOrBlockTask+0x98>)
 800c14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	f3bf 8f6f 	isb	sy
}
 800c15c:	e001      	b.n	800c162 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c15e:	f7ff fa15 	bl	800b58c <xTaskResumeAll>
}
 800c162:	bf00      	nop
 800c164:	3710      	adds	r7, #16
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	200016b8 	.word	0x200016b8
 800c170:	200016bc 	.word	0x200016bc
 800c174:	e000ed04 	.word	0xe000ed04

0800c178 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c180:	4b0e      	ldr	r3, [pc, #56]	; (800c1bc <prvGetNextExpireTime+0x44>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d101      	bne.n	800c18e <prvGetNextExpireTime+0x16>
 800c18a:	2201      	movs	r2, #1
 800c18c:	e000      	b.n	800c190 <prvGetNextExpireTime+0x18>
 800c18e:	2200      	movs	r2, #0
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d105      	bne.n	800c1a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <prvGetNextExpireTime+0x44>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	60fb      	str	r3, [r7, #12]
 800c1a6:	e001      	b.n	800c1ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	200016b4 	.word	0x200016b4

0800c1c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c1c8:	f7ff fa7e 	bl	800b6c8 <xTaskGetTickCount>
 800c1cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c1ce:	4b0b      	ldr	r3, [pc, #44]	; (800c1fc <prvSampleTimeNow+0x3c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d205      	bcs.n	800c1e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c1d8:	f000 f936 	bl	800c448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	e002      	b.n	800c1ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1ea:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <prvSampleTimeNow+0x3c>)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	200016c4 	.word	0x200016c4

0800c200 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	429a      	cmp	r2, r3
 800c224:	d812      	bhi.n	800c24c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	1ad2      	subs	r2, r2, r3
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	699b      	ldr	r3, [r3, #24]
 800c230:	429a      	cmp	r2, r3
 800c232:	d302      	bcc.n	800c23a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c234:	2301      	movs	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	e01b      	b.n	800c272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c23a:	4b10      	ldr	r3, [pc, #64]	; (800c27c <prvInsertTimerInActiveList+0x7c>)
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3304      	adds	r3, #4
 800c242:	4619      	mov	r1, r3
 800c244:	4610      	mov	r0, r2
 800c246:	f7fe fa08 	bl	800a65a <vListInsert>
 800c24a:	e012      	b.n	800c272 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	429a      	cmp	r2, r3
 800c252:	d206      	bcs.n	800c262 <prvInsertTimerInActiveList+0x62>
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d302      	bcc.n	800c262 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c25c:	2301      	movs	r3, #1
 800c25e:	617b      	str	r3, [r7, #20]
 800c260:	e007      	b.n	800c272 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c262:	4b07      	ldr	r3, [pc, #28]	; (800c280 <prvInsertTimerInActiveList+0x80>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3304      	adds	r3, #4
 800c26a:	4619      	mov	r1, r3
 800c26c:	4610      	mov	r0, r2
 800c26e:	f7fe f9f4 	bl	800a65a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c272:	697b      	ldr	r3, [r7, #20]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	200016b8 	.word	0x200016b8
 800c280:	200016b4 	.word	0x200016b4

0800c284 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08e      	sub	sp, #56	; 0x38
 800c288:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c28a:	e0ca      	b.n	800c422 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	da18      	bge.n	800c2c4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c292:	1d3b      	adds	r3, r7, #4
 800c294:	3304      	adds	r3, #4
 800c296:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10a      	bne.n	800c2b4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	61fb      	str	r3, [r7, #28]
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ba:	6850      	ldr	r0, [r2, #4]
 800c2bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2be:	6892      	ldr	r2, [r2, #8]
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f2c0 80aa 	blt.w	800c420 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	695b      	ldr	r3, [r3, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d004      	beq.n	800c2e2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	3304      	adds	r3, #4
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fe f9f5 	bl	800a6cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2e2:	463b      	mov	r3, r7
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7ff ff6b 	bl	800c1c0 <prvSampleTimeNow>
 800c2ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b09      	cmp	r3, #9
 800c2f0:	f200 8097 	bhi.w	800c422 <prvProcessReceivedCommands+0x19e>
 800c2f4:	a201      	add	r2, pc, #4	; (adr r2, 800c2fc <prvProcessReceivedCommands+0x78>)
 800c2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2fa:	bf00      	nop
 800c2fc:	0800c325 	.word	0x0800c325
 800c300:	0800c325 	.word	0x0800c325
 800c304:	0800c325 	.word	0x0800c325
 800c308:	0800c399 	.word	0x0800c399
 800c30c:	0800c3ad 	.word	0x0800c3ad
 800c310:	0800c3f7 	.word	0x0800c3f7
 800c314:	0800c325 	.word	0x0800c325
 800c318:	0800c325 	.word	0x0800c325
 800c31c:	0800c399 	.word	0x0800c399
 800c320:	0800c3ad 	.word	0x0800c3ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c32a:	f043 0301 	orr.w	r3, r3, #1
 800c32e:	b2da      	uxtb	r2, r3
 800c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	18d1      	adds	r1, r2, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c344:	f7ff ff5c 	bl	800c200 <prvInsertTimerInActiveList>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d069      	beq.n	800c422 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c354:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c35c:	f003 0304 	and.w	r3, r3, #4
 800c360:	2b00      	cmp	r3, #0
 800c362:	d05e      	beq.n	800c422 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	441a      	add	r2, r3
 800c36c:	2300      	movs	r3, #0
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	2300      	movs	r3, #0
 800c372:	2100      	movs	r1, #0
 800c374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c376:	f7ff fe05 	bl	800bf84 <xTimerGenericCommand>
 800c37a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d14f      	bne.n	800c422 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	61bb      	str	r3, [r7, #24]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c39e:	f023 0301 	bic.w	r3, r3, #1
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c3aa:	e03a      	b.n	800c422 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b2:	f043 0301 	orr.w	r3, r3, #1
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10a      	bne.n	800c3e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	617b      	str	r3, [r7, #20]
}
 800c3de:	bf00      	nop
 800c3e0:	e7fe      	b.n	800c3e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e4:	699a      	ldr	r2, [r3, #24]
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	18d1      	adds	r1, r2, r3
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f0:	f7ff ff06 	bl	800c200 <prvInsertTimerInActiveList>
					break;
 800c3f4:	e015      	b.n	800c422 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c406:	f000 fbdb 	bl	800cbc0 <vPortFree>
 800c40a:	e00a      	b.n	800c422 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c412:	f023 0301 	bic.w	r3, r3, #1
 800c416:	b2da      	uxtb	r2, r3
 800c418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c41e:	e000      	b.n	800c422 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c420:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c422:	4b08      	ldr	r3, [pc, #32]	; (800c444 <prvProcessReceivedCommands+0x1c0>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	1d39      	adds	r1, r7, #4
 800c428:	2200      	movs	r2, #0
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe fc16 	bl	800ac5c <xQueueReceive>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	f47f af2a 	bne.w	800c28c <prvProcessReceivedCommands+0x8>
	}
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	3730      	adds	r7, #48	; 0x30
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	200016bc 	.word	0x200016bc

0800c448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c44e:	e048      	b.n	800c4e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c450:	4b2d      	ldr	r3, [pc, #180]	; (800c508 <prvSwitchTimerLists+0xc0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45a:	4b2b      	ldr	r3, [pc, #172]	; (800c508 <prvSwitchTimerLists+0xc0>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3304      	adds	r3, #4
 800c468:	4618      	mov	r0, r3
 800c46a:	f7fe f92f 	bl	800a6cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c47c:	f003 0304 	and.w	r3, r3, #4
 800c480:	2b00      	cmp	r3, #0
 800c482:	d02e      	beq.n	800c4e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	4413      	add	r3, r2
 800c48c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	429a      	cmp	r2, r3
 800c494:	d90e      	bls.n	800c4b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4a2:	4b19      	ldr	r3, [pc, #100]	; (800c508 <prvSwitchTimerLists+0xc0>)
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	f7fe f8d4 	bl	800a65a <vListInsert>
 800c4b2:	e016      	b.n	800c4e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9300      	str	r3, [sp, #0]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	2100      	movs	r1, #0
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f7ff fd60 	bl	800bf84 <xTimerGenericCommand>
 800c4c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	603b      	str	r3, [r7, #0]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4e2:	4b09      	ldr	r3, [pc, #36]	; (800c508 <prvSwitchTimerLists+0xc0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1b1      	bne.n	800c450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4ec:	4b06      	ldr	r3, [pc, #24]	; (800c508 <prvSwitchTimerLists+0xc0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4f2:	4b06      	ldr	r3, [pc, #24]	; (800c50c <prvSwitchTimerLists+0xc4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a04      	ldr	r2, [pc, #16]	; (800c508 <prvSwitchTimerLists+0xc0>)
 800c4f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c4fa:	4a04      	ldr	r2, [pc, #16]	; (800c50c <prvSwitchTimerLists+0xc4>)
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	6013      	str	r3, [r2, #0]
}
 800c500:	bf00      	nop
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	200016b4 	.word	0x200016b4
 800c50c:	200016b8 	.word	0x200016b8

0800c510 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c516:	f000 f965 	bl	800c7e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c51a:	4b15      	ldr	r3, [pc, #84]	; (800c570 <prvCheckForValidListAndQueue+0x60>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d120      	bne.n	800c564 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c522:	4814      	ldr	r0, [pc, #80]	; (800c574 <prvCheckForValidListAndQueue+0x64>)
 800c524:	f7fe f848 	bl	800a5b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c528:	4813      	ldr	r0, [pc, #76]	; (800c578 <prvCheckForValidListAndQueue+0x68>)
 800c52a:	f7fe f845 	bl	800a5b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c52e:	4b13      	ldr	r3, [pc, #76]	; (800c57c <prvCheckForValidListAndQueue+0x6c>)
 800c530:	4a10      	ldr	r2, [pc, #64]	; (800c574 <prvCheckForValidListAndQueue+0x64>)
 800c532:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c534:	4b12      	ldr	r3, [pc, #72]	; (800c580 <prvCheckForValidListAndQueue+0x70>)
 800c536:	4a10      	ldr	r2, [pc, #64]	; (800c578 <prvCheckForValidListAndQueue+0x68>)
 800c538:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c53a:	2300      	movs	r3, #0
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	4b11      	ldr	r3, [pc, #68]	; (800c584 <prvCheckForValidListAndQueue+0x74>)
 800c540:	4a11      	ldr	r2, [pc, #68]	; (800c588 <prvCheckForValidListAndQueue+0x78>)
 800c542:	2110      	movs	r1, #16
 800c544:	200a      	movs	r0, #10
 800c546:	f7fe f953 	bl	800a7f0 <xQueueGenericCreateStatic>
 800c54a:	4603      	mov	r3, r0
 800c54c:	4a08      	ldr	r2, [pc, #32]	; (800c570 <prvCheckForValidListAndQueue+0x60>)
 800c54e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c550:	4b07      	ldr	r3, [pc, #28]	; (800c570 <prvCheckForValidListAndQueue+0x60>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d005      	beq.n	800c564 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <prvCheckForValidListAndQueue+0x60>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	490b      	ldr	r1, [pc, #44]	; (800c58c <prvCheckForValidListAndQueue+0x7c>)
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe fd6c 	bl	800b03c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c564:	f000 f96e 	bl	800c844 <vPortExitCritical>
}
 800c568:	bf00      	nop
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	200016bc 	.word	0x200016bc
 800c574:	2000168c 	.word	0x2000168c
 800c578:	200016a0 	.word	0x200016a0
 800c57c:	200016b4 	.word	0x200016b4
 800c580:	200016b8 	.word	0x200016b8
 800c584:	20001768 	.word	0x20001768
 800c588:	200016c8 	.word	0x200016c8
 800c58c:	08013c10 	.word	0x08013c10

0800c590 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3b04      	subs	r3, #4
 800c5a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	3b04      	subs	r3, #4
 800c5ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	f023 0201 	bic.w	r2, r3, #1
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3b04      	subs	r3, #4
 800c5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5c0:	4a0c      	ldr	r2, [pc, #48]	; (800c5f4 <pxPortInitialiseStack+0x64>)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3b14      	subs	r3, #20
 800c5ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5cc:	687a      	ldr	r2, [r7, #4]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f06f 0202 	mvn.w	r2, #2
 800c5de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3b20      	subs	r3, #32
 800c5e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	0800c5f9 	.word	0x0800c5f9

0800c5f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c602:	4b12      	ldr	r3, [pc, #72]	; (800c64c <prvTaskExitError+0x54>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c60a:	d00a      	beq.n	800c622 <prvTaskExitError+0x2a>
	__asm volatile
 800c60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c610:	f383 8811 	msr	BASEPRI, r3
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	60fb      	str	r3, [r7, #12]
}
 800c61e:	bf00      	nop
 800c620:	e7fe      	b.n	800c620 <prvTaskExitError+0x28>
	__asm volatile
 800c622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	60bb      	str	r3, [r7, #8]
}
 800c634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c636:	bf00      	nop
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0fc      	beq.n	800c638 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c63e:	bf00      	nop
 800c640:	bf00      	nop
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	200000c8 	.word	0x200000c8

0800c650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c650:	4b07      	ldr	r3, [pc, #28]	; (800c670 <pxCurrentTCBConst2>)
 800c652:	6819      	ldr	r1, [r3, #0]
 800c654:	6808      	ldr	r0, [r1, #0]
 800c656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65a:	f380 8809 	msr	PSP, r0
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f04f 0000 	mov.w	r0, #0
 800c666:	f380 8811 	msr	BASEPRI, r0
 800c66a:	4770      	bx	lr
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst2>:
 800c670:	2000118c 	.word	0x2000118c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c678:	4808      	ldr	r0, [pc, #32]	; (800c69c <prvPortStartFirstTask+0x24>)
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	6800      	ldr	r0, [r0, #0]
 800c67e:	f380 8808 	msr	MSP, r0
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f380 8814 	msr	CONTROL, r0
 800c68a:	b662      	cpsie	i
 800c68c:	b661      	cpsie	f
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	df00      	svc	0
 800c698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c69a:	bf00      	nop
 800c69c:	e000ed08 	.word	0xe000ed08

0800c6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6a6:	4b46      	ldr	r3, [pc, #280]	; (800c7c0 <xPortStartScheduler+0x120>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a46      	ldr	r2, [pc, #280]	; (800c7c4 <xPortStartScheduler+0x124>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d10a      	bne.n	800c6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	613b      	str	r3, [r7, #16]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6c6:	4b3e      	ldr	r3, [pc, #248]	; (800c7c0 <xPortStartScheduler+0x120>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a3f      	ldr	r2, [pc, #252]	; (800c7c8 <xPortStartScheduler+0x128>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d10a      	bne.n	800c6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6e6:	4b39      	ldr	r3, [pc, #228]	; (800c7cc <xPortStartScheduler+0x12c>)
 800c6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	4b31      	ldr	r3, [pc, #196]	; (800c7d0 <xPortStartScheduler+0x130>)
 800c70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c70e:	4b31      	ldr	r3, [pc, #196]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c710:	2207      	movs	r2, #7
 800c712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c714:	e009      	b.n	800c72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c716:	4b2f      	ldr	r3, [pc, #188]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	4a2d      	ldr	r2, [pc, #180]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	b2db      	uxtb	r3, r3
 800c728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c732:	2b80      	cmp	r3, #128	; 0x80
 800c734:	d0ef      	beq.n	800c716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c736:	4b27      	ldr	r3, [pc, #156]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f1c3 0307 	rsb	r3, r3, #7
 800c73e:	2b04      	cmp	r3, #4
 800c740:	d00a      	beq.n	800c758 <xPortStartScheduler+0xb8>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	60bb      	str	r3, [r7, #8]
}
 800c754:	bf00      	nop
 800c756:	e7fe      	b.n	800c756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c758:	4b1e      	ldr	r3, [pc, #120]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	021b      	lsls	r3, r3, #8
 800c75e:	4a1d      	ldr	r2, [pc, #116]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c762:	4b1c      	ldr	r3, [pc, #112]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c76a:	4a1a      	ldr	r2, [pc, #104]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	b2da      	uxtb	r2, r3
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c776:	4b18      	ldr	r3, [pc, #96]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c782:	4b15      	ldr	r3, [pc, #84]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a14      	ldr	r2, [pc, #80]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c78e:	f000 f8dd 	bl	800c94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c792:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <xPortStartScheduler+0x13c>)
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c798:	f000 f8fc 	bl	800c994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c79c:	4b10      	ldr	r3, [pc, #64]	; (800c7e0 <xPortStartScheduler+0x140>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a0f      	ldr	r2, [pc, #60]	; (800c7e0 <xPortStartScheduler+0x140>)
 800c7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7a8:	f7ff ff66 	bl	800c678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7ac:	f7ff f856 	bl	800b85c <vTaskSwitchContext>
	prvTaskExitError();
 800c7b0:	f7ff ff22 	bl	800c5f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	e000ed00 	.word	0xe000ed00
 800c7c4:	410fc271 	.word	0x410fc271
 800c7c8:	410fc270 	.word	0x410fc270
 800c7cc:	e000e400 	.word	0xe000e400
 800c7d0:	200017b8 	.word	0x200017b8
 800c7d4:	200017bc 	.word	0x200017bc
 800c7d8:	e000ed20 	.word	0xe000ed20
 800c7dc:	200000c8 	.word	0x200000c8
 800c7e0:	e000ef34 	.word	0xe000ef34

0800c7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	607b      	str	r3, [r7, #4]
}
 800c7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <vPortEnterCritical+0x58>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3301      	adds	r3, #1
 800c804:	4a0d      	ldr	r2, [pc, #52]	; (800c83c <vPortEnterCritical+0x58>)
 800c806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c808:	4b0c      	ldr	r3, [pc, #48]	; (800c83c <vPortEnterCritical+0x58>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d10f      	bne.n	800c830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c810:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <vPortEnterCritical+0x5c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00a      	beq.n	800c830 <vPortEnterCritical+0x4c>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	f383 8811 	msr	BASEPRI, r3
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	603b      	str	r3, [r7, #0]
}
 800c82c:	bf00      	nop
 800c82e:	e7fe      	b.n	800c82e <vPortEnterCritical+0x4a>
	}
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	200000c8 	.word	0x200000c8
 800c840:	e000ed04 	.word	0xe000ed04

0800c844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c84a:	4b12      	ldr	r3, [pc, #72]	; (800c894 <vPortExitCritical+0x50>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10a      	bne.n	800c868 <vPortExitCritical+0x24>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	607b      	str	r3, [r7, #4]
}
 800c864:	bf00      	nop
 800c866:	e7fe      	b.n	800c866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c868:	4b0a      	ldr	r3, [pc, #40]	; (800c894 <vPortExitCritical+0x50>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	4a09      	ldr	r2, [pc, #36]	; (800c894 <vPortExitCritical+0x50>)
 800c870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c872:	4b08      	ldr	r3, [pc, #32]	; (800c894 <vPortExitCritical+0x50>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d105      	bne.n	800c886 <vPortExitCritical+0x42>
 800c87a:	2300      	movs	r3, #0
 800c87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	f383 8811 	msr	BASEPRI, r3
}
 800c884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c886:	bf00      	nop
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	200000c8 	.word	0x200000c8
	...

0800c8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8a0:	f3ef 8009 	mrs	r0, PSP
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	4b15      	ldr	r3, [pc, #84]	; (800c900 <pxCurrentTCBConst>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	f01e 0f10 	tst.w	lr, #16
 800c8b0:	bf08      	it	eq
 800c8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ba:	6010      	str	r0, [r2, #0]
 800c8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8c4:	f380 8811 	msr	BASEPRI, r0
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f7fe ffc4 	bl	800b85c <vTaskSwitchContext>
 800c8d4:	f04f 0000 	mov.w	r0, #0
 800c8d8:	f380 8811 	msr	BASEPRI, r0
 800c8dc:	bc09      	pop	{r0, r3}
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	6808      	ldr	r0, [r1, #0]
 800c8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e6:	f01e 0f10 	tst.w	lr, #16
 800c8ea:	bf08      	it	eq
 800c8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8f0:	f380 8809 	msr	PSP, r0
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	f3af 8000 	nop.w

0800c900 <pxCurrentTCBConst>:
 800c900:	2000118c 	.word	0x2000118c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop

0800c908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	607b      	str	r3, [r7, #4]
}
 800c920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c922:	f7fe fee1 	bl	800b6e8 <xTaskIncrementTick>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d003      	beq.n	800c934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <xPortSysTickHandler+0x40>)
 800c92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	2300      	movs	r3, #0
 800c936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f383 8811 	msr	BASEPRI, r3
}
 800c93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c94c:	b480      	push	{r7}
 800c94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <vPortSetupTimerInterrupt+0x34>)
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <vPortSetupTimerInterrupt+0x38>)
 800c958:	2200      	movs	r2, #0
 800c95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <vPortSetupTimerInterrupt+0x3c>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a0a      	ldr	r2, [pc, #40]	; (800c98c <vPortSetupTimerInterrupt+0x40>)
 800c962:	fba2 2303 	umull	r2, r3, r2, r3
 800c966:	099b      	lsrs	r3, r3, #6
 800c968:	4a09      	ldr	r2, [pc, #36]	; (800c990 <vPortSetupTimerInterrupt+0x44>)
 800c96a:	3b01      	subs	r3, #1
 800c96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c96e:	4b04      	ldr	r3, [pc, #16]	; (800c980 <vPortSetupTimerInterrupt+0x34>)
 800c970:	2207      	movs	r2, #7
 800c972:	601a      	str	r2, [r3, #0]
}
 800c974:	bf00      	nop
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	e000e010 	.word	0xe000e010
 800c984:	e000e018 	.word	0xe000e018
 800c988:	20000004 	.word	0x20000004
 800c98c:	10624dd3 	.word	0x10624dd3
 800c990:	e000e014 	.word	0xe000e014

0800c994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9a4 <vPortEnableVFP+0x10>
 800c998:	6801      	ldr	r1, [r0, #0]
 800c99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c99e:	6001      	str	r1, [r0, #0]
 800c9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9a2:	bf00      	nop
 800c9a4:	e000ed88 	.word	0xe000ed88

0800c9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9ae:	f3ef 8305 	mrs	r3, IPSR
 800c9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b0f      	cmp	r3, #15
 800c9b8:	d914      	bls.n	800c9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9ba:	4a17      	ldr	r2, [pc, #92]	; (800ca18 <vPortValidateInterruptPriority+0x70>)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9c4:	4b15      	ldr	r3, [pc, #84]	; (800ca1c <vPortValidateInterruptPriority+0x74>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	7afa      	ldrb	r2, [r7, #11]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d20a      	bcs.n	800c9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	607b      	str	r3, [r7, #4]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ca20 <vPortValidateInterruptPriority+0x78>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ca24 <vPortValidateInterruptPriority+0x7c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d90a      	bls.n	800ca0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	603b      	str	r3, [r7, #0]
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <vPortValidateInterruptPriority+0x60>
	}
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	e000e3f0 	.word	0xe000e3f0
 800ca1c:	200017b8 	.word	0x200017b8
 800ca20:	e000ed0c 	.word	0xe000ed0c
 800ca24:	200017bc 	.word	0x200017bc

0800ca28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	; 0x28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca34:	f7fe fd9c 	bl	800b570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca38:	4b5b      	ldr	r3, [pc, #364]	; (800cba8 <pvPortMalloc+0x180>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca40:	f000 f920 	bl	800cc84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca44:	4b59      	ldr	r3, [pc, #356]	; (800cbac <pvPortMalloc+0x184>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f040 8093 	bne.w	800cb78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01d      	beq.n	800ca94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca58:	2208      	movs	r2, #8
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d014      	beq.n	800ca94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	3308      	adds	r3, #8
 800ca72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <pvPortMalloc+0x6c>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	617b      	str	r3, [r7, #20]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d06e      	beq.n	800cb78 <pvPortMalloc+0x150>
 800ca9a:	4b45      	ldr	r3, [pc, #276]	; (800cbb0 <pvPortMalloc+0x188>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d869      	bhi.n	800cb78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caa4:	4b43      	ldr	r3, [pc, #268]	; (800cbb4 <pvPortMalloc+0x18c>)
 800caa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caa8:	4b42      	ldr	r3, [pc, #264]	; (800cbb4 <pvPortMalloc+0x18c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caae:	e004      	b.n	800caba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d903      	bls.n	800cacc <pvPortMalloc+0xa4>
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1f1      	bne.n	800cab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cacc:	4b36      	ldr	r3, [pc, #216]	; (800cba8 <pvPortMalloc+0x180>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d050      	beq.n	800cb78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2208      	movs	r2, #8
 800cadc:	4413      	add	r3, r2
 800cade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	2308      	movs	r3, #8
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d91f      	bls.n	800cb38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	f003 0307 	and.w	r3, r3, #7
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <pvPortMalloc+0xf8>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	613b      	str	r3, [r7, #16]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb32:	69b8      	ldr	r0, [r7, #24]
 800cb34:	f000 f908 	bl	800cd48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb38:	4b1d      	ldr	r3, [pc, #116]	; (800cbb0 <pvPortMalloc+0x188>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	4a1b      	ldr	r2, [pc, #108]	; (800cbb0 <pvPortMalloc+0x188>)
 800cb44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb46:	4b1a      	ldr	r3, [pc, #104]	; (800cbb0 <pvPortMalloc+0x188>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	4b1b      	ldr	r3, [pc, #108]	; (800cbb8 <pvPortMalloc+0x190>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d203      	bcs.n	800cb5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb52:	4b17      	ldr	r3, [pc, #92]	; (800cbb0 <pvPortMalloc+0x188>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a18      	ldr	r2, [pc, #96]	; (800cbb8 <pvPortMalloc+0x190>)
 800cb58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	4b13      	ldr	r3, [pc, #76]	; (800cbac <pvPortMalloc+0x184>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <pvPortMalloc+0x194>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3301      	adds	r3, #1
 800cb74:	4a11      	ldr	r2, [pc, #68]	; (800cbbc <pvPortMalloc+0x194>)
 800cb76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb78:	f7fe fd08 	bl	800b58c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	f003 0307 	and.w	r3, r3, #7
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00a      	beq.n	800cb9c <pvPortMalloc+0x174>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	60fb      	str	r3, [r7, #12]
}
 800cb98:	bf00      	nop
 800cb9a:	e7fe      	b.n	800cb9a <pvPortMalloc+0x172>
	return pvReturn;
 800cb9c:	69fb      	ldr	r3, [r7, #28]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3728      	adds	r7, #40	; 0x28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	200053c8 	.word	0x200053c8
 800cbac:	200053dc 	.word	0x200053dc
 800cbb0:	200053cc 	.word	0x200053cc
 800cbb4:	200053c0 	.word	0x200053c0
 800cbb8:	200053d0 	.word	0x200053d0
 800cbbc:	200053d4 	.word	0x200053d4

0800cbc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d04d      	beq.n	800cc6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbd2:	2308      	movs	r3, #8
 800cbd4:	425b      	negs	r3, r3
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	4413      	add	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <vPortFree+0xb8>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4013      	ands	r3, r2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <vPortFree+0x44>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	60fb      	str	r3, [r7, #12]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00a      	beq.n	800cc22 <vPortFree+0x62>
	__asm volatile
 800cc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc10:	f383 8811 	msr	BASEPRI, r3
 800cc14:	f3bf 8f6f 	isb	sy
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	60bb      	str	r3, [r7, #8]
}
 800cc1e:	bf00      	nop
 800cc20:	e7fe      	b.n	800cc20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <vPortFree+0xb8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01e      	beq.n	800cc6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d11a      	bne.n	800cc6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	4b0e      	ldr	r3, [pc, #56]	; (800cc78 <vPortFree+0xb8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	43db      	mvns	r3, r3
 800cc42:	401a      	ands	r2, r3
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc48:	f7fe fc92 	bl	800b570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	4b0a      	ldr	r3, [pc, #40]	; (800cc7c <vPortFree+0xbc>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4413      	add	r3, r2
 800cc56:	4a09      	ldr	r2, [pc, #36]	; (800cc7c <vPortFree+0xbc>)
 800cc58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc5a:	6938      	ldr	r0, [r7, #16]
 800cc5c:	f000 f874 	bl	800cd48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc60:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <vPortFree+0xc0>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3301      	adds	r3, #1
 800cc66:	4a06      	ldr	r2, [pc, #24]	; (800cc80 <vPortFree+0xc0>)
 800cc68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc6a:	f7fe fc8f 	bl	800b58c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc6e:	bf00      	nop
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	200053dc 	.word	0x200053dc
 800cc7c:	200053cc 	.word	0x200053cc
 800cc80:	200053d8 	.word	0x200053d8

0800cc84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc90:	4b27      	ldr	r3, [pc, #156]	; (800cd30 <prvHeapInit+0xac>)
 800cc92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00c      	beq.n	800ccb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	3307      	adds	r3, #7
 800cca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f023 0307 	bic.w	r3, r3, #7
 800ccaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	4a1f      	ldr	r2, [pc, #124]	; (800cd30 <prvHeapInit+0xac>)
 800ccb4:	4413      	add	r3, r2
 800ccb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccbc:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <prvHeapInit+0xb0>)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccc2:	4b1c      	ldr	r3, [pc, #112]	; (800cd34 <prvHeapInit+0xb0>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	4413      	add	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccd0:	2208      	movs	r2, #8
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f023 0307 	bic.w	r3, r3, #7
 800ccde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	4a15      	ldr	r2, [pc, #84]	; (800cd38 <prvHeapInit+0xb4>)
 800cce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cce6:	4b14      	ldr	r3, [pc, #80]	; (800cd38 <prvHeapInit+0xb4>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2200      	movs	r2, #0
 800ccec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccee:	4b12      	ldr	r3, [pc, #72]	; (800cd38 <prvHeapInit+0xb4>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd04:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <prvHeapInit+0xb4>)
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	4a0a      	ldr	r2, [pc, #40]	; (800cd3c <prvHeapInit+0xb8>)
 800cd12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	4a09      	ldr	r2, [pc, #36]	; (800cd40 <prvHeapInit+0xbc>)
 800cd1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd1c:	4b09      	ldr	r3, [pc, #36]	; (800cd44 <prvHeapInit+0xc0>)
 800cd1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd22:	601a      	str	r2, [r3, #0]
}
 800cd24:	bf00      	nop
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	200017c0 	.word	0x200017c0
 800cd34:	200053c0 	.word	0x200053c0
 800cd38:	200053c8 	.word	0x200053c8
 800cd3c:	200053d0 	.word	0x200053d0
 800cd40:	200053cc 	.word	0x200053cc
 800cd44:	200053dc 	.word	0x200053dc

0800cd48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd50:	4b28      	ldr	r3, [pc, #160]	; (800cdf4 <prvInsertBlockIntoFreeList+0xac>)
 800cd52:	60fb      	str	r3, [r7, #12]
 800cd54:	e002      	b.n	800cd5c <prvInsertBlockIntoFreeList+0x14>
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d8f7      	bhi.n	800cd56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	4413      	add	r3, r2
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d108      	bne.n	800cd8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	441a      	add	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	441a      	add	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d118      	bne.n	800cdd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <prvInsertBlockIntoFreeList+0xb0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d00d      	beq.n	800cdc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	441a      	add	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	601a      	str	r2, [r3, #0]
 800cdc4:	e008      	b.n	800cdd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdc6:	4b0c      	ldr	r3, [pc, #48]	; (800cdf8 <prvInsertBlockIntoFreeList+0xb0>)
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	601a      	str	r2, [r3, #0]
 800cdce:	e003      	b.n	800cdd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d002      	beq.n	800cde6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cde6:	bf00      	nop
 800cde8:	3714      	adds	r7, #20
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	200053c0 	.word	0x200053c0
 800cdf8:	200053c8 	.word	0x200053c8

0800cdfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce00:	2201      	movs	r2, #1
 800ce02:	4912      	ldr	r1, [pc, #72]	; (800ce4c <MX_USB_DEVICE_Init+0x50>)
 800ce04:	4812      	ldr	r0, [pc, #72]	; (800ce50 <MX_USB_DEVICE_Init+0x54>)
 800ce06:	f7fc f8ef 	bl	8008fe8 <USBD_Init>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d004      	beq.n	800ce1a <MX_USB_DEVICE_Init+0x1e>
  {
	usb_failed2 = 1;
 800ce10:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <MX_USB_DEVICE_Init+0x58>)
 800ce12:	2201      	movs	r2, #1
 800ce14:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ce16:	f7f5 f815 	bl	8001e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800ce1a:	490f      	ldr	r1, [pc, #60]	; (800ce58 <MX_USB_DEVICE_Init+0x5c>)
 800ce1c:	480c      	ldr	r0, [pc, #48]	; (800ce50 <MX_USB_DEVICE_Init+0x54>)
 800ce1e:	f7fc f913 	bl	8009048 <USBD_RegisterClass>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d004      	beq.n	800ce32 <MX_USB_DEVICE_Init+0x36>
  {
	  usb_failed2 = 1;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <MX_USB_DEVICE_Init+0x58>)
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ce2e:	f7f5 f809 	bl	8001e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce32:	4807      	ldr	r0, [pc, #28]	; (800ce50 <MX_USB_DEVICE_Init+0x54>)
 800ce34:	f7fc f92f 	bl	8009096 <USBD_Start>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d004      	beq.n	800ce48 <MX_USB_DEVICE_Init+0x4c>
  {
	  usb_failed2 = 1;
 800ce3e:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <MX_USB_DEVICE_Init+0x58>)
 800ce40:	2201      	movs	r2, #1
 800ce42:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 800ce44:	f7f4 fffe 	bl	8001e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce48:	bf00      	nop
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	200000cc 	.word	0x200000cc
 800ce50:	2000548c 	.word	0x2000548c
 800ce54:	200053e0 	.word	0x200053e0
 800ce58:	20000018 	.word	0x20000018

0800ce5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	2212      	movs	r2, #18
 800ce6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce6e:	4b03      	ldr	r3, [pc, #12]	; (800ce7c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	200000e8 	.word	0x200000e8

0800ce80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	4603      	mov	r3, r0
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	2204      	movs	r2, #4
 800ce90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce92:	4b03      	ldr	r3, [pc, #12]	; (800cea0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	200000fc 	.word	0x200000fc

0800cea4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	4603      	mov	r3, r0
 800ceac:	6039      	str	r1, [r7, #0]
 800ceae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d105      	bne.n	800cec2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	4907      	ldr	r1, [pc, #28]	; (800ced8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ceba:	4808      	ldr	r0, [pc, #32]	; (800cedc <USBD_FS_ProductStrDescriptor+0x38>)
 800cebc:	f7fd f92b 	bl	800a116 <USBD_GetString>
 800cec0:	e004      	b.n	800cecc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cec2:	683a      	ldr	r2, [r7, #0]
 800cec4:	4904      	ldr	r1, [pc, #16]	; (800ced8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cec6:	4805      	ldr	r0, [pc, #20]	; (800cedc <USBD_FS_ProductStrDescriptor+0x38>)
 800cec8:	f7fd f925 	bl	800a116 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cecc:	4b02      	ldr	r3, [pc, #8]	; (800ced8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3708      	adds	r7, #8
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	2000575c 	.word	0x2000575c
 800cedc:	08013c18 	.word	0x08013c18

0800cee0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	6039      	str	r1, [r7, #0]
 800ceea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	4904      	ldr	r1, [pc, #16]	; (800cf00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cef0:	4804      	ldr	r0, [pc, #16]	; (800cf04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cef2:	f7fd f910 	bl	800a116 <USBD_GetString>
  return USBD_StrDesc;
 800cef6:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	2000575c 	.word	0x2000575c
 800cf04:	08013c30 	.word	0x08013c30

0800cf08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	6039      	str	r1, [r7, #0]
 800cf12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	221a      	movs	r2, #26
 800cf18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf1a:	f000 f843 	bl	800cfa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf1e:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	20000100 	.word	0x20000100

0800cf2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	6039      	str	r1, [r7, #0]
 800cf36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d105      	bne.n	800cf4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	4907      	ldr	r1, [pc, #28]	; (800cf60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf42:	4808      	ldr	r0, [pc, #32]	; (800cf64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf44:	f7fd f8e7 	bl	800a116 <USBD_GetString>
 800cf48:	e004      	b.n	800cf54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	4904      	ldr	r1, [pc, #16]	; (800cf60 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf4e:	4805      	ldr	r0, [pc, #20]	; (800cf64 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf50:	f7fd f8e1 	bl	800a116 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf54:	4b02      	ldr	r3, [pc, #8]	; (800cf60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	2000575c 	.word	0x2000575c
 800cf64:	08013c44 	.word	0x08013c44

0800cf68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	6039      	str	r1, [r7, #0]
 800cf72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf74:	79fb      	ldrb	r3, [r7, #7]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d105      	bne.n	800cf86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf7a:	683a      	ldr	r2, [r7, #0]
 800cf7c:	4907      	ldr	r1, [pc, #28]	; (800cf9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf7e:	4808      	ldr	r0, [pc, #32]	; (800cfa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf80:	f7fd f8c9 	bl	800a116 <USBD_GetString>
 800cf84:	e004      	b.n	800cf90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	4904      	ldr	r1, [pc, #16]	; (800cf9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf8a:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf8c:	f7fd f8c3 	bl	800a116 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf90:	4b02      	ldr	r3, [pc, #8]	; (800cf9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	2000575c 	.word	0x2000575c
 800cfa0:	08013c50 	.word	0x08013c50

0800cfa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cfaa:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <Get_SerialNum+0x44>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cfb0:	4b0e      	ldr	r3, [pc, #56]	; (800cfec <Get_SerialNum+0x48>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfb6:	4b0e      	ldr	r3, [pc, #56]	; (800cff0 <Get_SerialNum+0x4c>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cfca:	2208      	movs	r2, #8
 800cfcc:	4909      	ldr	r1, [pc, #36]	; (800cff4 <Get_SerialNum+0x50>)
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f000 f814 	bl	800cffc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cfd4:	2204      	movs	r2, #4
 800cfd6:	4908      	ldr	r1, [pc, #32]	; (800cff8 <Get_SerialNum+0x54>)
 800cfd8:	68b8      	ldr	r0, [r7, #8]
 800cfda:	f000 f80f 	bl	800cffc <IntToUnicode>
  }
}
 800cfde:	bf00      	nop
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	1fff7a10 	.word	0x1fff7a10
 800cfec:	1fff7a14 	.word	0x1fff7a14
 800cff0:	1fff7a18 	.word	0x1fff7a18
 800cff4:	20000102 	.word	0x20000102
 800cff8:	20000112 	.word	0x20000112

0800cffc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b087      	sub	sp, #28
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	4613      	mov	r3, r2
 800d008:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d00e:	2300      	movs	r3, #0
 800d010:	75fb      	strb	r3, [r7, #23]
 800d012:	e027      	b.n	800d064 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	0f1b      	lsrs	r3, r3, #28
 800d018:	2b09      	cmp	r3, #9
 800d01a:	d80b      	bhi.n	800d034 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	0f1b      	lsrs	r3, r3, #28
 800d020:	b2da      	uxtb	r2, r3
 800d022:	7dfb      	ldrb	r3, [r7, #23]
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	4619      	mov	r1, r3
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	440b      	add	r3, r1
 800d02c:	3230      	adds	r2, #48	; 0x30
 800d02e:	b2d2      	uxtb	r2, r2
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	e00a      	b.n	800d04a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	0f1b      	lsrs	r3, r3, #28
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	7dfb      	ldrb	r3, [r7, #23]
 800d03c:	005b      	lsls	r3, r3, #1
 800d03e:	4619      	mov	r1, r3
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	440b      	add	r3, r1
 800d044:	3237      	adds	r2, #55	; 0x37
 800d046:	b2d2      	uxtb	r2, r2
 800d048:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	011b      	lsls	r3, r3, #4
 800d04e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d050:	7dfb      	ldrb	r3, [r7, #23]
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	3301      	adds	r3, #1
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	4413      	add	r3, r2
 800d05a:	2200      	movs	r2, #0
 800d05c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
 800d060:	3301      	adds	r3, #1
 800d062:	75fb      	strb	r3, [r7, #23]
 800d064:	7dfa      	ldrb	r2, [r7, #23]
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d3d3      	bcc.n	800d014 <IntToUnicode+0x18>
  }
}
 800d06c:	bf00      	nop
 800d06e:	bf00      	nop
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
	...

0800d07c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d084:	f107 0314 	add.w	r3, r7, #20
 800d088:	2200      	movs	r2, #0
 800d08a:	601a      	str	r2, [r3, #0]
 800d08c:	605a      	str	r2, [r3, #4]
 800d08e:	609a      	str	r2, [r3, #8]
 800d090:	60da      	str	r2, [r3, #12]
 800d092:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d09c:	d13a      	bne.n	800d114 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d09e:	2300      	movs	r3, #0
 800d0a0:	613b      	str	r3, [r7, #16]
 800d0a2:	4b1e      	ldr	r3, [pc, #120]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a6:	4a1d      	ldr	r2, [pc, #116]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0a8:	f043 0301 	orr.w	r3, r3, #1
 800d0ac:	6313      	str	r3, [r2, #48]	; 0x30
 800d0ae:	4b1b      	ldr	r3, [pc, #108]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	613b      	str	r3, [r7, #16]
 800d0b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d0ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d0be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0cc:	230a      	movs	r3, #10
 800d0ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0d0:	f107 0314 	add.w	r3, r7, #20
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4812      	ldr	r0, [pc, #72]	; (800d120 <HAL_PCD_MspInit+0xa4>)
 800d0d8:	f7f5 fd3a 	bl	8002b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0dc:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e0:	4a0e      	ldr	r2, [pc, #56]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0e6:	6353      	str	r3, [r2, #52]	; 0x34
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f0:	4a0a      	ldr	r2, [pc, #40]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0f6:	6453      	str	r3, [r2, #68]	; 0x44
 800d0f8:	4b08      	ldr	r3, [pc, #32]	; (800d11c <HAL_PCD_MspInit+0xa0>)
 800d0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d104:	2200      	movs	r2, #0
 800d106:	2105      	movs	r1, #5
 800d108:	2043      	movs	r0, #67	; 0x43
 800d10a:	f7f5 fcf7 	bl	8002afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d10e:	2043      	movs	r0, #67	; 0x43
 800d110:	f7f5 fd10 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d114:	bf00      	nop
 800d116:	3728      	adds	r7, #40	; 0x28
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	40023800 	.word	0x40023800
 800d120:	40020000 	.word	0x40020000

0800d124 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f7fb fff6 	bl	800912c <USBD_LL_SetupStage>
}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d15a:	78fa      	ldrb	r2, [r7, #3]
 800d15c:	6879      	ldr	r1, [r7, #4]
 800d15e:	4613      	mov	r3, r2
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	1a9b      	subs	r3, r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	440b      	add	r3, r1
 800d168:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	78fb      	ldrb	r3, [r7, #3]
 800d170:	4619      	mov	r1, r3
 800d172:	f7fc f830 	bl	80091d6 <USBD_LL_DataOutStage>
}
 800d176:	bf00      	nop
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b082      	sub	sp, #8
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	460b      	mov	r3, r1
 800d188:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d190:	78fa      	ldrb	r2, [r7, #3]
 800d192:	6879      	ldr	r1, [r7, #4]
 800d194:	4613      	mov	r3, r2
 800d196:	00db      	lsls	r3, r3, #3
 800d198:	1a9b      	subs	r3, r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	440b      	add	r3, r1
 800d19e:	3348      	adds	r3, #72	; 0x48
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	78fb      	ldrb	r3, [r7, #3]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	f7fc f879 	bl	800929c <USBD_LL_DataInStage>
}
 800d1aa:	bf00      	nop
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fc f98d 	bl	80094e0 <USBD_LL_SOF>
}
 800d1c6:	bf00      	nop
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b084      	sub	sp, #16
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d102      	bne.n	800d1e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
 800d1e6:	e008      	b.n	800d1fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d102      	bne.n	800d1f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	73fb      	strb	r3, [r7, #15]
 800d1f4:	e001      	b.n	800d1fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1f6:	f7f4 fe25 	bl	8001e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d200:	7bfa      	ldrb	r2, [r7, #15]
 800d202:	4611      	mov	r1, r2
 800d204:	4618      	mov	r0, r3
 800d206:	f7fc f92d 	bl	8009464 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d210:	4618      	mov	r0, r3
 800d212:	f7fc f8d9 	bl	80093c8 <USBD_LL_Reset>
}
 800d216:	bf00      	nop
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fc f928 	bl	8009484 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	6812      	ldr	r2, [r2, #0]
 800d242:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6a1b      	ldr	r3, [r3, #32]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d005      	beq.n	800d260 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d254:	4b04      	ldr	r3, [pc, #16]	; (800d268 <HAL_PCD_SuspendCallback+0x48>)
 800d256:	691b      	ldr	r3, [r3, #16]
 800d258:	4a03      	ldr	r2, [pc, #12]	; (800d268 <HAL_PCD_SuspendCallback+0x48>)
 800d25a:	f043 0306 	orr.w	r3, r3, #6
 800d25e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d260:	bf00      	nop
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	e000ed00 	.word	0xe000ed00

0800d26c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fc f918 	bl	80094b0 <USBD_LL_Resume>
}
 800d280:	bf00      	nop
 800d282:	3708      	adds	r7, #8
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d29a:	78fa      	ldrb	r2, [r7, #3]
 800d29c:	4611      	mov	r1, r2
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fc f966 	bl	8009570 <USBD_LL_IsoOUTIncomplete>
}
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2be:	78fa      	ldrb	r2, [r7, #3]
 800d2c0:	4611      	mov	r1, r2
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fc f92e 	bl	8009524 <USBD_LL_IsoINIncomplete>
}
 800d2c8:	bf00      	nop
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fc f96c 	bl	80095bc <USBD_LL_DevConnected>
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fc f969 	bl	80095d2 <USBD_LL_DevDisconnected>
}
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b01      	cmp	r3, #1
 800d316:	d13c      	bne.n	800d392 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d318:	4a20      	ldr	r2, [pc, #128]	; (800d39c <USBD_LL_Init+0x94>)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4a1e      	ldr	r2, [pc, #120]	; (800d39c <USBD_LL_Init+0x94>)
 800d324:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d328:	4b1c      	ldr	r3, [pc, #112]	; (800d39c <USBD_LL_Init+0x94>)
 800d32a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d32e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d330:	4b1a      	ldr	r3, [pc, #104]	; (800d39c <USBD_LL_Init+0x94>)
 800d332:	2206      	movs	r2, #6
 800d334:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d336:	4b19      	ldr	r3, [pc, #100]	; (800d39c <USBD_LL_Init+0x94>)
 800d338:	2202      	movs	r2, #2
 800d33a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d33c:	4b17      	ldr	r3, [pc, #92]	; (800d39c <USBD_LL_Init+0x94>)
 800d33e:	2200      	movs	r2, #0
 800d340:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d342:	4b16      	ldr	r3, [pc, #88]	; (800d39c <USBD_LL_Init+0x94>)
 800d344:	2202      	movs	r2, #2
 800d346:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d348:	4b14      	ldr	r3, [pc, #80]	; (800d39c <USBD_LL_Init+0x94>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d34e:	4b13      	ldr	r3, [pc, #76]	; (800d39c <USBD_LL_Init+0x94>)
 800d350:	2200      	movs	r2, #0
 800d352:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d354:	4b11      	ldr	r3, [pc, #68]	; (800d39c <USBD_LL_Init+0x94>)
 800d356:	2200      	movs	r2, #0
 800d358:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d35a:	4b10      	ldr	r3, [pc, #64]	; (800d39c <USBD_LL_Init+0x94>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d360:	4b0e      	ldr	r3, [pc, #56]	; (800d39c <USBD_LL_Init+0x94>)
 800d362:	2200      	movs	r2, #0
 800d364:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d366:	480d      	ldr	r0, [pc, #52]	; (800d39c <USBD_LL_Init+0x94>)
 800d368:	f7f6 fa13 	bl	8003792 <HAL_PCD_Init>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d372:	f7f4 fd67 	bl	8001e44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d376:	2180      	movs	r1, #128	; 0x80
 800d378:	4808      	ldr	r0, [pc, #32]	; (800d39c <USBD_LL_Init+0x94>)
 800d37a:	f7f7 fb8c 	bl	8004a96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d37e:	2240      	movs	r2, #64	; 0x40
 800d380:	2100      	movs	r1, #0
 800d382:	4806      	ldr	r0, [pc, #24]	; (800d39c <USBD_LL_Init+0x94>)
 800d384:	f7f7 fb40 	bl	8004a08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d388:	2280      	movs	r2, #128	; 0x80
 800d38a:	2101      	movs	r1, #1
 800d38c:	4803      	ldr	r0, [pc, #12]	; (800d39c <USBD_LL_Init+0x94>)
 800d38e:	f7f7 fb3b 	bl	8004a08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	2000595c 	.word	0x2000595c

0800d3a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7f6 fb0f 	bl	80039da <HAL_PCD_Start>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c0:	7bfb      	ldrb	r3, [r7, #15]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 f97e 	bl	800d6c4 <USBD_Get_USB_Status>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	4608      	mov	r0, r1
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	70fb      	strb	r3, [r7, #3]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70bb      	strb	r3, [r7, #2]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3fe:	78bb      	ldrb	r3, [r7, #2]
 800d400:	883a      	ldrh	r2, [r7, #0]
 800d402:	78f9      	ldrb	r1, [r7, #3]
 800d404:	f7f6 ff20 	bl	8004248 <HAL_PCD_EP_Open>
 800d408:	4603      	mov	r3, r0
 800d40a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 f958 	bl	800d6c4 <USBD_Get_USB_Status>
 800d414:	4603      	mov	r3, r0
 800d416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d418:	7bbb      	ldrb	r3, [r7, #14]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b084      	sub	sp, #16
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	460b      	mov	r3, r1
 800d42c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d43c:	78fa      	ldrb	r2, [r7, #3]
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7f6 ff69 	bl	8004318 <HAL_PCD_EP_Close>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f000 f939 	bl	800d6c4 <USBD_Get_USB_Status>
 800d452:	4603      	mov	r3, r0
 800d454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d456:	7bbb      	ldrb	r3, [r7, #14]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d47a:	78fa      	ldrb	r2, [r7, #3]
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f7 f829 	bl	80044d6 <HAL_PCD_EP_SetStall>
 800d484:	4603      	mov	r3, r0
 800d486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 f91a 	bl	800d6c4 <USBD_Get_USB_Status>
 800d490:	4603      	mov	r3, r0
 800d492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d494:	7bbb      	ldrb	r3, [r7, #14]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4b8:	78fa      	ldrb	r2, [r7, #3]
 800d4ba:	4611      	mov	r1, r2
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7f7 f86e 	bl	800459e <HAL_PCD_EP_ClrStall>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f000 f8fb 	bl	800d6c4 <USBD_Get_USB_Status>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da0b      	bge.n	800d510 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d4f8:	78fb      	ldrb	r3, [r7, #3]
 800d4fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4fe:	68f9      	ldr	r1, [r7, #12]
 800d500:	4613      	mov	r3, r2
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	1a9b      	subs	r3, r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	440b      	add	r3, r1
 800d50a:	333e      	adds	r3, #62	; 0x3e
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	e00b      	b.n	800d528 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d510:	78fb      	ldrb	r3, [r7, #3]
 800d512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d516:	68f9      	ldr	r1, [r7, #12]
 800d518:	4613      	mov	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	1a9b      	subs	r3, r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	440b      	add	r3, r1
 800d522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d526:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d540:	2300      	movs	r3, #0
 800d542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d54e:	78fa      	ldrb	r2, [r7, #3]
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7f6 fe53 	bl	80041fe <HAL_PCD_SetAddress>
 800d558:	4603      	mov	r3, r0
 800d55a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	4618      	mov	r0, r3
 800d560:	f000 f8b0 	bl	800d6c4 <USBD_Get_USB_Status>
 800d564:	4603      	mov	r3, r0
 800d566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d568:	7bbb      	ldrb	r3, [r7, #14]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}

0800d572 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b086      	sub	sp, #24
 800d576:	af00      	add	r7, sp, #0
 800d578:	60f8      	str	r0, [r7, #12]
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	603b      	str	r3, [r7, #0]
 800d57e:	460b      	mov	r3, r1
 800d580:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d590:	7af9      	ldrb	r1, [r7, #11]
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	f7f6 ff54 	bl	8004442 <HAL_PCD_EP_Transmit>
 800d59a:	4603      	mov	r3, r0
 800d59c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 f88f 	bl	800d6c4 <USBD_Get_USB_Status>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	607a      	str	r2, [r7, #4]
 800d5be:	603b      	str	r3, [r7, #0]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5d2:	7af9      	ldrb	r1, [r7, #11]
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	f7f6 fee8 	bl	80043ac <HAL_PCD_EP_Receive>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f86e 	bl	800d6c4 <USBD_Get_USB_Status>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3718      	adds	r7, #24
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
	...

0800d5f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d604:	78fb      	ldrb	r3, [r7, #3]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <HAL_PCDEx_LPM_Callback+0x18>
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d01f      	beq.n	800d64e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d60e:	e03b      	b.n	800d688 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a1b      	ldr	r3, [r3, #32]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d007      	beq.n	800d628 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d618:	f7f3 fc26 	bl	8000e68 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d61c:	4b1c      	ldr	r3, [pc, #112]	; (800d690 <HAL_PCDEx_LPM_Callback+0x98>)
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	4a1b      	ldr	r2, [pc, #108]	; (800d690 <HAL_PCDEx_LPM_Callback+0x98>)
 800d622:	f023 0306 	bic.w	r3, r3, #6
 800d626:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	6812      	ldr	r2, [r2, #0]
 800d636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d63a:	f023 0301 	bic.w	r3, r3, #1
 800d63e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d646:	4618      	mov	r0, r3
 800d648:	f7fb ff32 	bl	80094b0 <USBD_LL_Resume>
    break;
 800d64c:	e01c      	b.n	800d688 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	6812      	ldr	r2, [r2, #0]
 800d65c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d660:	f043 0301 	orr.w	r3, r3, #1
 800d664:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fb ff09 	bl	8009484 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d005      	beq.n	800d686 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <HAL_PCDEx_LPM_Callback+0x98>)
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	4a04      	ldr	r2, [pc, #16]	; (800d690 <HAL_PCDEx_LPM_Callback+0x98>)
 800d680:	f043 0306 	orr.w	r3, r3, #6
 800d684:	6113      	str	r3, [r2, #16]
    break;
 800d686:	bf00      	nop
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	e000ed00 	.word	0xe000ed00

0800d694 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d69c:	4b03      	ldr	r3, [pc, #12]	; (800d6ac <USBD_static_malloc+0x18>)
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	370c      	adds	r7, #12
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	200053e4 	.word	0x200053e4

0800d6b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]

}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr

0800d6c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d6d2:	79fb      	ldrb	r3, [r7, #7]
 800d6d4:	2b03      	cmp	r3, #3
 800d6d6:	d817      	bhi.n	800d708 <USBD_Get_USB_Status+0x44>
 800d6d8:	a201      	add	r2, pc, #4	; (adr r2, 800d6e0 <USBD_Get_USB_Status+0x1c>)
 800d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6de:	bf00      	nop
 800d6e0:	0800d6f1 	.word	0x0800d6f1
 800d6e4:	0800d6f7 	.word	0x0800d6f7
 800d6e8:	0800d6fd 	.word	0x0800d6fd
 800d6ec:	0800d703 	.word	0x0800d703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f4:	e00b      	b.n	800d70e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fa:	e008      	b.n	800d70e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d700:	e005      	b.n	800d70e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d702:	2303      	movs	r3, #3
 800d704:	73fb      	strb	r3, [r7, #15]
    break;
 800d706:	e002      	b.n	800d70e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d708:	2303      	movs	r3, #3
 800d70a:	73fb      	strb	r3, [r7, #15]
    break;
 800d70c:	bf00      	nop
  }
  return usb_status;
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3714      	adds	r7, #20
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	4608      	mov	r0, r1
 800d726:	4611      	mov	r1, r2
 800d728:	461a      	mov	r2, r3
 800d72a:	4603      	mov	r3, r0
 800d72c:	70fb      	strb	r3, [r7, #3]
 800d72e:	460b      	mov	r3, r1
 800d730:	70bb      	strb	r3, [r7, #2]
 800d732:	4613      	mov	r3, r2
 800d734:	707b      	strb	r3, [r7, #1]
                return 0;
 800d736:	2300      	movs	r3, #0
        }
 800d738:	4618      	mov	r0, r3
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	4608      	mov	r0, r1
 800d74e:	4611      	mov	r1, r2
 800d750:	461a      	mov	r2, r3
 800d752:	4603      	mov	r3, r0
 800d754:	70fb      	strb	r3, [r7, #3]
 800d756:	460b      	mov	r3, r1
 800d758:	70bb      	strb	r3, [r7, #2]
 800d75a:	4613      	mov	r3, r2
 800d75c:	707b      	strb	r3, [r7, #1]
                return 0;
 800d75e:	2300      	movs	r3, #0
        }
 800d760:	4618      	mov	r0, r3
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
                return 0;
 800d774:	2300      	movs	r3, #0
        }
 800d776:	4618      	mov	r0, r3
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800d782:	b480      	push	{r7}
 800d784:	b083      	sub	sp, #12
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
                return 0;
 800d78a:	2300      	movs	r3, #0
        }
 800d78c:	4618      	mov	r0, r3
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
                return 0;
 800d7a0:	2300      	movs	r3, #0
        }
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr

0800d7ae <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 800d7ae:	b480      	push	{r7}
 800d7b0:	b083      	sub	sp, #12
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	70fb      	strb	r3, [r7, #3]
                return;
 800d7ba:	bf00      	nop
        } // Note used for hubs only!
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	807b      	strh	r3, [r7, #2]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	803b      	strh	r3, [r7, #0]
                return false;
 800d7d6:	2300      	movs	r3, #0
        }
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	70fb      	strb	r3, [r7, #3]
                return false;
 800d7f0:	2300      	movs	r3, #0
        }
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800d7fe:	b480      	push	{r7}
 800d800:	b083      	sub	sp, #12
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
                return true;
 800d80a:	2301      	movs	r3, #1
        }
 800d80c:	4618      	mov	r0, r3
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800d820:	687b      	ldr	r3, [r7, #4]
        };
 800d822:	4618      	mov	r0, r3
 800d824:	370c      	adds	r7, #12
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800d82e:	b480      	push	{r7}
 800d830:	b085      	sub	sp, #20
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	2b0f      	cmp	r3, #15
 800d840:	d812      	bhi.n	800d868 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800d842:	7bfa      	ldrb	r2, [r7, #15]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	321e      	adds	r2, #30
 800d848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d107      	bne.n	800d860 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800d850:	7bfa      	ldrb	r2, [r7, #15]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	321e      	adds	r2, #30
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 800d85c:	2300      	movs	r3, #0
 800d85e:	e004      	b.n	800d86a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800d860:	7bfb      	ldrb	r3, [r7, #15]
 800d862:	3301      	adds	r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
 800d866:	e7e9      	b.n	800d83c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 800d868:	23d3      	movs	r3, #211	; 0xd3
        };
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 800d876:	b480      	push	{r7}
 800d878:	b083      	sub	sp, #12
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	701a      	strb	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	705a      	strb	r2, [r3, #1]
 800d88a:	2200      	movs	r2, #0
 800d88c:	709a      	strb	r2, [r3, #2]
 800d88e:	2200      	movs	r2, #0
 800d890:	70da      	strb	r2, [r3, #3]
 800d892:	2200      	movs	r2, #0
 800d894:	711a      	strb	r2, [r3, #4]
        };
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4618      	mov	r0, r3
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr

0800d8a4 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	711a      	strb	r2, [r3, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	715a      	strb	r2, [r3, #5]
        };
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr

0800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	781a      	ldrb	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	715a      	strb	r2, [r3, #5]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	795a      	ldrb	r2, [r3, #5]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	711a      	strb	r2, [r3, #4]
        };
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 800d8fc:	b480      	push	{r7}
 800d8fe:	b083      	sub	sp, #12
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2200      	movs	r2, #0
 800d90e:	711a      	strb	r2, [r3, #4]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	80da      	strh	r2, [r3, #6]
        };
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4618      	mov	r0, r3
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	601a      	str	r2, [r3, #0]
                countDown = 0;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	80da      	strh	r2, [r3, #6]
        };
 800d93e:	bf00      	nop
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	60f8      	str	r0, [r7, #12]
 800d952:	60b9      	str	r1, [r7, #8]
 800d954:	607a      	str	r2, [r7, #4]
 800d956:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	791b      	ldrb	r3, [r3, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d002      	beq.n	800d966 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800d960:	2b01      	cmp	r3, #1
 800d962:	d009      	beq.n	800d978 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 800d964:	e029      	b.n	800d9ba <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	887a      	ldrh	r2, [r7, #2]
 800d96a:	80da      	strh	r2, [r3, #6]
                                nStage++;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	791b      	ldrb	r3, [r3, #4]
 800d970:	3301      	adds	r3, #1
 800d972:	b2da      	uxtb	r2, r3
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d015      	beq.n	800d9ac <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d011      	beq.n	800d9ac <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	88db      	ldrh	r3, [r3, #6]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	b29a      	uxth	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	80da      	strh	r2, [r3, #6]
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	1c5a      	adds	r2, r3, #1
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	801a      	strh	r2, [r3, #0]
 800d9aa:	e7e5      	b.n	800d978 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	88db      	ldrh	r3, [r3, #6]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	88db      	ldrh	r3, [r3, #6]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bf0c      	ite	eq
 800d9c2:	2301      	moveq	r3, #1
 800d9c4:	2300      	movne	r3, #0
 800d9c6:	b2db      	uxtb	r3, r3
        };
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	4608      	mov	r0, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	70fb      	strb	r3, [r7, #3]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70bb      	strb	r3, [r7, #2]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	707b      	strb	r3, [r7, #1]
        };
 800d9ee:	bf00      	nop
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
	...

0800d9fc <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	4a04      	ldr	r2, [pc, #16]	; (800da18 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	08014c20 	.word	0x08014c20

0800da1c <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	4a04      	ldr	r2, [pc, #16]	; (800da38 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	601a      	str	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4618      	mov	r0, r3
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr
 800da38:	08014c08 	.word	0x08014c08

0800da3c <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
                return bAddress;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 800da4a:	4618      	mov	r0, r3
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr

0800da56 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 800da56:	b480      	push	{r7}
 800da58:	b083      	sub	sp, #12
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	460b      	mov	r3, r1
 800da7a:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 800da7c:	78fb      	ldrb	r3, [r7, #3]
 800da7e:	2be0      	cmp	r3, #224	; 0xe0
 800da80:	bf0c      	ite	eq
 800da82:	2301      	moveq	r3, #1
 800da84:	2300      	movne	r3, #0
 800da86:	b2db      	uxtb	r3, r3
        };
 800da88:	4618      	mov	r0, r3
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	460b      	mov	r3, r1
 800da9e:	807b      	strh	r3, [r7, #2]
 800daa0:	4613      	mov	r3, r2
 800daa2:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 800daa4:	887b      	ldrh	r3, [r7, #2]
 800daa6:	f640 225c 	movw	r2, #2652	; 0xa5c
 800daaa:	4293      	cmp	r3, r2
 800daac:	d104      	bne.n	800dab8 <_ZN3BTD8VIDPIDOKEtt+0x24>
 800daae:	883b      	ldrh	r3, [r7, #0]
 800dab0:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d009      	beq.n	800dacc <_ZN3BTD8VIDPIDOKEtt+0x38>
 800dab8:	887b      	ldrh	r3, [r7, #2]
 800daba:	f240 520d 	movw	r2, #1293	; 0x50d
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d106      	bne.n	800dad0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
 800dac2:	883b      	ldrh	r3, [r7, #0]
 800dac4:	f240 625a 	movw	r2, #1626	; 0x65a
 800dac8:	4293      	cmp	r3, r2
 800daca:	d101      	bne.n	800dad0 <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 800dacc:	2301      	movs	r3, #1
 800dace:	e02d      	b.n	800db2c <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7d1b      	ldrb	r3, [r3, #20]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d113      	bne.n	800db00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	7d5b      	ldrb	r3, [r3, #21]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10f      	bne.n	800db00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7d9b      	ldrb	r3, [r3, #22]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10b      	bne.n	800db00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	7ddb      	ldrb	r3, [r3, #23]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d107      	bne.n	800db00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	7e1b      	ldrb	r3, [r3, #24]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d103      	bne.n	800db00 <_ZN3BTD8VIDPIDOKEtt+0x6c>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7e5b      	ldrb	r3, [r3, #25]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d014      	beq.n	800db2a <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800db00:	887b      	ldrh	r3, [r7, #2]
 800db02:	f240 524c 	movw	r2, #1356	; 0x54c
 800db06:	4293      	cmp	r3, r2
 800db08:	d10f      	bne.n	800db2a <_ZN3BTD8VIDPIDOKEtt+0x96>
 800db0a:	883b      	ldrh	r3, [r7, #0]
 800db0c:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800db10:	d009      	beq.n	800db26 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800db12:	883b      	ldrh	r3, [r7, #0]
 800db14:	f240 422f 	movw	r2, #1071	; 0x42f
 800db18:	4293      	cmp	r3, r2
 800db1a:	d004      	beq.n	800db26 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800db1c:	883b      	ldrh	r3, [r7, #0]
 800db1e:	f240 32d5 	movw	r2, #981	; 0x3d5
 800db22:	4293      	cmp	r3, r2
 800db24:	d101      	bne.n	800db2a <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 800db26:	2301      	movs	r3, #1
 800db28:	e000      	b.n	800db2c <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 800db2a:	2300      	movs	r3, #0
        };
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 800db38:	b580      	push	{r7, lr}
 800db3a:	b084      	sub	sp, #16
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
 800db40:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff ff59 	bl	800d9fc <_ZN15USBDeviceConfigC1Ev>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	3304      	adds	r3, #4
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff ff64 	bl	800da1c <_ZN17UsbConfigXtracterC1Ev>
 800db54:	4a2b      	ldr	r2, [pc, #172]	; (800dc04 <_ZN3BTDC1EP3USB+0xcc>)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	4a2b      	ldr	r2, [pc, #172]	; (800dc08 <_ZN3BTDC1EP3USB+0xd0>)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	605a      	str	r2, [r3, #4]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	64da      	str	r2, [r3, #76]	; 0x4c
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	661a      	str	r2, [r3, #96]	; 0x60
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	73fb      	strb	r3, [r7, #15]
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d80a      	bhi.n	800dbdc <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	3318      	adds	r3, #24
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	73fb      	strb	r3, [r7, #15]
 800dbda:	e7f1      	b.n	800dbc0 <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 fa7d 	bl	800e0dc <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d006      	beq.n	800dbf8 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7ff fe1b 	bl	800d82e <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	08014bc8 	.word	0x08014bc8
 800dc08:	08014bfc 	.word	0x08014bfc

0800dc0c <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 800dc0c:	b590      	push	{r4, r7, lr}
 800dc0e:	b08f      	sub	sp, #60	; 0x3c
 800dc10:	af02      	add	r7, sp, #8
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	4608      	mov	r0, r1
 800dc16:	4611      	mov	r1, r2
 800dc18:	461a      	mov	r2, r3
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	70fb      	strb	r3, [r7, #3]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	70bb      	strb	r3, [r7, #2]
 800dc22:	4613      	mov	r3, r2
 800dc24:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 800dc26:	2312      	movs	r3, #18
 800dc28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 800dc2c:	f107 0308 	add.w	r3, r7, #8
 800dc30:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 fa4e 	bl	800e0dc <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff fde7 	bl	800d818 <_ZN3USB14GetAddressPoolEv>
 800dc4a:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d001      	beq.n	800dc5a <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 800dc56:	23d9      	movs	r3, #217	; 0xd9
 800dc58:	e087      	b.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2100      	movs	r1, #0
 800dc62:	69f8      	ldr	r0, [r7, #28]
 800dc64:	4798      	blx	r3
 800dc66:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 800dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dc6e:	23d6      	movs	r3, #214	; 0xd6
 800dc70:	e07b      	b.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d101      	bne.n	800dc7e <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 800dc7a:	23d7      	movs	r3, #215	; 0xd7
 800dc7c:	e075      	b.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f103 0251 	add.w	r2, r3, #81	; 0x51
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	787a      	ldrb	r2, [r7, #1]
 800dc92:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dc98:	f107 0308 	add.w	r3, r7, #8
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	2312      	movs	r3, #18
 800dca0:	2200      	movs	r2, #0
 800dca2:	2100      	movs	r1, #0
 800dca4:	f005 fa13 	bl	80130ce <_ZN3USB11getDevDescrEhhtPh>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	6a3a      	ldr	r2, [r7, #32]
 800dcb2:	601a      	str	r2, [r3, #0]

        if(rcode)
 800dcb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d146      	bne.n	800dd4a <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	681c      	ldr	r4, [r3, #0]
 800dcc4:	78bb      	ldrb	r3, [r7, #2]
 800dcc6:	78f9      	ldrb	r1, [r7, #3]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	69f8      	ldr	r0, [r7, #28]
 800dccc:	47a0      	blx	r4
 800dcce:	4603      	mov	r3, r0
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d101      	bne.n	800dce6 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800dce2:	23d4      	movs	r3, #212	; 0xd4
 800dce4:	e041      	b.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 800dce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce8:	791b      	ldrb	r3, [r3, #4]
 800dcea:	2b09      	cmp	r3, #9
 800dcec:	d017      	beq.n	800dd1e <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	79da      	ldrb	r2, [r3, #7]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	7c5a      	ldrb	r2, [r3, #17]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800dd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd04:	891b      	ldrh	r3, [r3, #8]
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	895b      	ldrh	r3, [r3, #10]
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 800dd1a:	23e0      	movs	r3, #224	; 0xe0
 800dd1c:	e025      	b.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800dd1e:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f005 fa6b 	bl	8013208 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800dd32:	23d1      	movs	r3, #209	; 0xd1
 800dd34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	4798      	blx	r3
        return rcode;
 800dd44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd48:	e00f      	b.n	800dd6a <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 800dd4a:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 800dd4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd50:	2b0d      	cmp	r3, #13
 800dd52:	d002      	beq.n	800dd5a <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 800dd54:	23e1      	movs	r3, #225	; 0xe1
 800dd56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	3308      	adds	r3, #8
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	4798      	blx	r3
        return rcode;
 800dd66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3734      	adds	r7, #52	; 0x34
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd90      	pop	{r4, r7, pc}

0800dd72 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b096      	sub	sp, #88	; 0x58
 800dd76:	af02      	add	r7, sp, #8
 800dd78:	6078      	str	r0, [r7, #4]
 800dd7a:	4608      	mov	r0, r1
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	461a      	mov	r2, r3
 800dd80:	4603      	mov	r3, r0
 800dd82:	70fb      	strb	r3, [r7, #3]
 800dd84:	460b      	mov	r3, r1
 800dd86:	70bb      	strb	r3, [r7, #2]
 800dd88:	4613      	mov	r3, r2
 800dd8a:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800dd92:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7ff fd38 	bl	800d818 <_ZN3USB14GetAddressPoolEv>
 800dda8:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ddaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ddba:	4798      	blx	r3
 800ddbc:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 800ddbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800ddc4:	23d6      	movs	r3, #214	; 0xd6
 800ddc6:	e185      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x362>
        }

        delay(300); // Assign new address to the device
 800ddc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ddcc:	f7f4 fdba 	bl	8002944 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ddda:	2200      	movs	r2, #0
 800dddc:	2100      	movs	r1, #0
 800ddde:	f005 fa13 	bl	8013208 <_ZN3USB7setAddrEhhh>
 800dde2:	4603      	mov	r3, r0
 800dde4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 800dde8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d003      	beq.n	800ddf8 <_ZN3BTD4InitEhhb+0x86>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 800ddf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	719a      	strb	r2, [r3, #6]
                goto Fail;
 800ddf6:	e165      	b.n	800e0c4 <_ZN3BTD4InitEhhb+0x352>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 800ddf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 800ddfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	687a      	ldr	r2, [r7, #4]
 800de06:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 800de0a:	4611      	mov	r1, r2
 800de0c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800de0e:	4798      	blx	r3
 800de10:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 800de12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de14:	2b00      	cmp	r3, #0
 800de16:	d101      	bne.n	800de1c <_ZN3BTD4InitEhhb+0xaa>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800de18:	23d6      	movs	r3, #214	; 0xd6
 800de1a:	e15b      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x362>
        }

        p->lowspeed = lowspeed;
 800de1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de1e:	787a      	ldrb	r2, [r7, #1]
 800de20:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	3351      	adds	r3, #81	; 0x51
 800de30:	2201      	movs	r2, #1
 800de32:	f004 f8dc 	bl	8011fee <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800de36:	4603      	mov	r3, r0
 800de38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 800de3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de40:	2b00      	cmp	r3, #0
 800de42:	f040 8128 	bne.w	800e096 <_ZN3BTD4InitEhhb+0x324>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800de4c:	f240 524c 	movw	r2, #1356	; 0x54c
 800de50:	4293      	cmp	r3, r2
 800de52:	d177      	bne.n	800df44 <_ZN3BTD4InitEhhb+0x1d2>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de5a:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800de5e:	d00d      	beq.n	800de7c <_ZN3BTD4InitEhhb+0x10a>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de66:	f240 422f 	movw	r2, #1071	; 0x42f
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d006      	beq.n	800de7c <_ZN3BTD4InitEhhb+0x10a>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800de74:	f240 32d5 	movw	r2, #981	; 0x3d5
 800de78:	4293      	cmp	r3, r2
 800de7a:	d163      	bne.n	800df44 <_ZN3BTD4InitEhhb+0x1d2>
                delay(100);
 800de7c:	2064      	movs	r0, #100	; 0x64
 800de7e:	f7f4 fd61 	bl	8002944 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800de92:	2301      	movs	r3, #1
 800de94:	f005 f9e6 	bl	8013264 <_ZN3USB7setConfEhhh>
 800de98:	4603      	mov	r3, r0
 800de9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800de9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f040 80f9 	bne.w	800e09a <_ZN3BTD4InitEhhb+0x328>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	7d1b      	ldrb	r3, [r3, #20]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d113      	bne.n	800ded8 <_ZN3BTD4InitEhhb+0x166>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	7d5b      	ldrb	r3, [r3, #21]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d10f      	bne.n	800ded8 <_ZN3BTD4InitEhhb+0x166>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	7d9b      	ldrb	r3, [r3, #22]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10b      	bne.n	800ded8 <_ZN3BTD4InitEhhb+0x166>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7ddb      	ldrb	r3, [r3, #23]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d107      	bne.n	800ded8 <_ZN3BTD4InitEhhb+0x166>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7e1b      	ldrb	r3, [r3, #24]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d103      	bne.n	800ded8 <_ZN3BTD4InitEhhb+0x166>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	7e5b      	ldrb	r3, [r3, #25]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d019      	beq.n	800df0c <_ZN3BTD4InitEhhb+0x19a>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800dede:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800dee2:	d006      	beq.n	800def2 <_ZN3BTD4InitEhhb+0x180>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800deea:	f240 422f 	movw	r2, #1071	; 0x42f
 800deee:	4293      	cmp	r3, r2
 800def0:	d106      	bne.n	800df00 <_ZN3BTD4InitEhhb+0x18e>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3314      	adds	r3, #20
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f002 f8b0 	bl	801005e <_ZN3BTD9setBdaddrEPh>
 800defe:	e005      	b.n	800df0c <_ZN3BTD4InitEhhb+0x19a>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3314      	adds	r3, #20
 800df04:	4619      	mov	r1, r3
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f002 f8e9 	bl	80100de <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800df1c:	2300      	movs	r3, #0
 800df1e:	f005 f9a1 	bl	8013264 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800df2c:	2300      	movs	r3, #0
 800df2e:	2200      	movs	r2, #0
 800df30:	f005 f96a 	bl	8013208 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	3308      	adds	r3, #8
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 800df40:	23d1      	movs	r3, #209	; 0xd1
 800df42:	e0c7      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x362>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800df44:	2300      	movs	r3, #0
 800df46:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800df4a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800df4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800df52:	429a      	cmp	r2, r3
 800df54:	d25e      	bcs.n	800e014 <_ZN3BTD4InitEhhb+0x2a2>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800df5c:	f640 225c 	movw	r2, #2652	; 0xa5c
 800df60:	4293      	cmp	r3, r2
 800df62:	d106      	bne.n	800df72 <_ZN3BTD4InitEhhb+0x200>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df6a:	f242 12e8 	movw	r2, #8680	; 0x21e8
 800df6e:	4293      	cmp	r3, r2
 800df70:	d00d      	beq.n	800df8e <_ZN3BTD4InitEhhb+0x21c>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800df78:	f240 520d 	movw	r2, #1293	; 0x50d
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d120      	bne.n	800dfc2 <_ZN3BTD4InitEhhb+0x250>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800df86:	f240 625a 	movw	r2, #1626	; 0x65a
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d119      	bne.n	800dfc2 <_ZN3BTD4InitEhhb+0x250>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	1d1a      	adds	r2, r3, #4
 800df92:	f107 0308 	add.w	r3, r7, #8
 800df96:	4611      	mov	r1, r2
 800df98:	4618      	mov	r0, r3
 800df9a:	f002 f8f3 	bl	8010184 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dfa8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dfac:	f107 0308 	add.w	r3, r7, #8
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f005 f8da 	bl	801316e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dfc0:	e018      	b.n	800dff4 <_ZN3BTD4InitEhhb+0x282>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	1d1a      	adds	r2, r3, #4
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f002 f927 	bl	8010220 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800dfdc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800dfe0:	f107 0308 	add.w	r3, r7, #8
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f005 f8c0 	bl	801316e <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 800dfee:	4603      	mov	r3, r0
 800dff0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 800dff4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d150      	bne.n	800e09e <_ZN3BTD4InitEhhb+0x32c>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e002:	2b03      	cmp	r3, #3
 800e004:	d805      	bhi.n	800e012 <_ZN3BTD4InitEhhb+0x2a0>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 800e006:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800e00a:	3301      	adds	r3, #1
 800e00c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e010:	e79b      	b.n	800df4a <_ZN3BTD4InitEhhb+0x1d8>
                                break;
 800e012:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d945      	bls.n	800e0aa <_ZN3BTD4InitEhhb+0x338>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	3351      	adds	r3, #81	; 0x51
 800e032:	f003 ffdc 	bl	8011fee <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e03c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e040:	2b00      	cmp	r3, #0
 800e042:	d12e      	bne.n	800e0a2 <_ZN3BTD4InitEhhb+0x330>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e05a:	f005 f903 	bl	8013264 <_ZN3USB7setConfEhhh>
 800e05e:	4603      	mov	r3, r0
 800e060:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 800e064:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11c      	bne.n	800e0a6 <_ZN3BTD4InitEhhb+0x334>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2264      	movs	r2, #100	; 0x64
 800e070:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 800e092:	2300      	movs	r3, #0
 800e094:	e01e      	b.n	800e0d4 <_ZN3BTD4InitEhhb+0x362>
                goto FailSetDevTblEntry;
 800e096:	bf00      	nop
 800e098:	e014      	b.n	800e0c4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800e09a:	bf00      	nop
 800e09c:	e012      	b.n	800e0c4 <_ZN3BTD4InitEhhb+0x352>
                                goto FailGetConfDescr;
 800e09e:	bf00      	nop
 800e0a0:	e010      	b.n	800e0c4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetDevTblEntry;
 800e0a2:	bf00      	nop
 800e0a4:	e00e      	b.n	800e0c4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailSetConfDescr;
 800e0a6:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 800e0a8:	e00c      	b.n	800e0c4 <_ZN3BTD4InitEhhb+0x352>
                        goto FailUnknownDevice;
 800e0aa:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f005 f8a5 	bl	8013208 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800e0be:	23d1      	movs	r3, #209	; 0xd1
 800e0c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	4798      	blx	r3
        return rcode;
 800e0d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3750      	adds	r7, #80	; 0x50
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d845      	bhi.n	800e17a <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 800e0ee:	7bfa      	ldrb	r2, [r7, #15]
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	4413      	add	r3, r2
 800e0f8:	440b      	add	r3, r1
 800e0fa:	3351      	adds	r3, #81	; 0x51
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 800e100:	7bfb      	ldrb	r3, [r7, #15]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <_ZN3BTD10InitializeEv+0x2e>
 800e106:	2000      	movs	r0, #0
 800e108:	e000      	b.n	800e10c <_ZN3BTD10InitializeEv+0x30>
 800e10a:	2008      	movs	r0, #8
 800e10c:	7bfa      	ldrb	r2, [r7, #15]
 800e10e:	6879      	ldr	r1, [r7, #4]
 800e110:	4613      	mov	r3, r2
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	4413      	add	r3, r2
 800e116:	440b      	add	r3, r1
 800e118:	3352      	adds	r3, #82	; 0x52
 800e11a:	4602      	mov	r2, r0
 800e11c:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 800e11e:	7bfa      	ldrb	r2, [r7, #15]
 800e120:	6879      	ldr	r1, [r7, #4]
 800e122:	4613      	mov	r3, r2
 800e124:	005b      	lsls	r3, r3, #1
 800e126:	4413      	add	r3, r2
 800e128:	440b      	add	r3, r1
 800e12a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e12e:	78d3      	ldrb	r3, [r2, #3]
 800e130:	f36f 0300 	bfc	r3, #0, #1
 800e134:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 800e136:	7bfa      	ldrb	r2, [r7, #15]
 800e138:	6879      	ldr	r1, [r7, #4]
 800e13a:	4613      	mov	r3, r2
 800e13c:	005b      	lsls	r3, r3, #1
 800e13e:	4413      	add	r3, r2
 800e140:	440b      	add	r3, r1
 800e142:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e146:	78d3      	ldrb	r3, [r2, #3]
 800e148:	f36f 0341 	bfc	r3, #1, #1
 800e14c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <_ZN3BTD10InitializeEv+0x7c>
 800e154:	2101      	movs	r1, #1
 800e156:	e000      	b.n	800e15a <_ZN3BTD10InitializeEv+0x7e>
 800e158:	210f      	movs	r1, #15
 800e15a:	7bfa      	ldrb	r2, [r7, #15]
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	4613      	mov	r3, r2
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4413      	add	r3, r2
 800e164:	4403      	add	r3, r0
 800e166:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e16a:	78d3      	ldrb	r3, [r2, #3]
 800e16c:	f361 0387 	bfi	r3, r1, #2, #6
 800e170:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	3301      	adds	r3, #1
 800e176:	73fb      	strb	r3, [r7, #15]
 800e178:	e7b6      	b.n	800e0e8 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	2b03      	cmp	r3, #3
 800e182:	d81c      	bhi.n	800e1be <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 800e184:	7bfb      	ldrb	r3, [r7, #15]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	3318      	adds	r3, #24
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d010      	beq.n	800e1b6 <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	3318      	adds	r3, #24
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	4413      	add	r3, r2
 800e19e:	6859      	ldr	r1, [r3, #4]
 800e1a0:	7bfb      	ldrb	r3, [r7, #15]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	3318      	adds	r3, #24
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4608      	mov	r0, r1
 800e1b4:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	73fb      	strb	r3, [r7, #15]
 800e1bc:	e7df      	b.n	800e17e <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2200      	movs	r2, #0
 800e210:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 800e214:	bf00      	nop
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	4608      	mov	r0, r1
 800e226:	4611      	mov	r1, r2
 800e228:	461a      	mov	r2, r3
 800e22a:	4603      	mov	r3, r0
 800e22c:	70fb      	strb	r3, [r7, #3]
 800e22e:	460b      	mov	r3, r1
 800e230:	70bb      	strb	r3, [r7, #2]
 800e232:	4613      	mov	r3, r2
 800e234:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 800e236:	787b      	ldrb	r3, [r7, #1]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d15d      	bne.n	800e2f8 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	78fa      	ldrb	r2, [r7, #3]
 800e240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	78db      	ldrb	r3, [r3, #3]
 800e248:	f003 0303 	and.w	r3, r3, #3
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d114      	bne.n	800e27a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	789b      	ldrb	r3, [r3, #2]
 800e254:	b25b      	sxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	da0f      	bge.n	800e27a <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 800e25a:	2301      	movs	r3, #1
 800e25c:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 800e25e:	7bfa      	ldrb	r2, [r7, #15]
 800e260:	6879      	ldr	r1, [r7, #4]
 800e262:	4613      	mov	r3, r2
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	4413      	add	r3, r2
 800e268:	440b      	add	r3, r1
 800e26a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800e26e:	78d3      	ldrb	r3, [r2, #3]
 800e270:	2101      	movs	r1, #1
 800e272:	f361 0387 	bfi	r3, r1, #2, #6
 800e276:	70d3      	strb	r3, [r2, #3]
 800e278:	e00e      	b.n	800e298 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	78db      	ldrb	r3, [r3, #3]
 800e27e:	f003 0303 	and.w	r3, r3, #3
 800e282:	2b02      	cmp	r3, #2
 800e284:	d13a      	bne.n	800e2fc <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	789b      	ldrb	r3, [r3, #2]
 800e28a:	b25b      	sxtb	r3, r3
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	da01      	bge.n	800e294 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 800e290:	2302      	movs	r3, #2
 800e292:	e000      	b.n	800e296 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 800e294:	2303      	movs	r3, #3
 800e296:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	789b      	ldrb	r3, [r3, #2]
 800e29c:	7bfa      	ldrb	r2, [r7, #15]
 800e29e:	f003 030f 	and.w	r3, r3, #15
 800e2a2:	b2d8      	uxtb	r0, r3
 800e2a4:	6879      	ldr	r1, [r7, #4]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4413      	add	r3, r2
 800e2ac:	440b      	add	r3, r1
 800e2ae:	3351      	adds	r3, #81	; 0x51
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	889b      	ldrh	r3, [r3, #4]
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	7bfa      	ldrb	r2, [r7, #15]
 800e2bc:	b2d8      	uxtb	r0, r3
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	4413      	add	r3, r2
 800e2c6:	440b      	add	r3, r1
 800e2c8:	3352      	adds	r3, #82	; 0x52
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	799b      	ldrb	r3, [r3, #6]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d204      	bcs.n	800e2e6 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	799a      	ldrb	r2, [r3, #6]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	b2da      	uxtb	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800e2f6:	e002      	b.n	800e2fe <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 800e2f8:	bf00      	nop
 800e2fa:	e000      	b.n	800e2fe <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 800e2fc:	bf00      	nop
}
 800e2fe:	3714      	adds	r7, #20
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 800e308:	f1a0 0004 	sub.w	r0, r0, #4
 800e30c:	f7ff bf86 	b.w	800e21c <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

0800e310 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff fedf 	bl	800e0dc <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e322:	4618      	mov	r0, r3
 800e324:	f7ff fa78 	bl	800d818 <_ZN3USB14GetAddressPoolEv>
 800e328:	4603      	mov	r3, r0
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	3208      	adds	r2, #8
 800e32e:	6812      	ldr	r2, [r2, #0]
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 800e336:	4618      	mov	r0, r3
 800e338:	4790      	blx	r2
        return 0;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800e352:	f083 0301 	eor.w	r3, r3, #1
 800e356:	b2db      	uxtb	r3, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d001      	beq.n	800e360 <_ZN3BTD4PollEv+0x1c>
                return 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	e01d      	b.n	800e39c <_ZN3BTD4PollEv+0x58>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 800e360:	f7f4 fae4 	bl	800292c <HAL_GetTick>
 800e364:	4602      	mov	r2, r0
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e36a:	1ad3      	subs	r3, r2, r3
 800e36c:	43db      	mvns	r3, r3
 800e36e:	0fdb      	lsrs	r3, r3, #31
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	d011      	beq.n	800e39a <_ZN3BTD4PollEv+0x56>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 800e376:	f7f4 fad9 	bl	800292c <HAL_GetTick>
 800e37a:	4602      	mov	r2, r0
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800e382:	441a      	add	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f80b 	bl	800e3a4 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fb22 	bl	800e9d8 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fe4b 	bl	800f030 <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 800e3a4:	b5b0      	push	{r4, r5, r7, lr}
 800e3a6:	b088      	sub	sp, #32
 800e3a8:	af02      	add	r7, sp, #8
 800e3aa:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 800e3ac:	2340      	movs	r3, #64	; 0x40
 800e3ae:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3389      	adds	r3, #137	; 0x89
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800e3ca:	f107 050c 	add.w	r5, r7, #12
 800e3ce:	9201      	str	r2, [sp, #4]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	462b      	mov	r3, r5
 800e3d4:	4622      	mov	r2, r4
 800e3d6:	f003 ff72 	bl	80122be <_ZN3USB10inTransferEhhPtPhh>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d003      	beq.n	800e3ec <_ZN3BTD14HCI_event_taskEv+0x48>
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
 800e3e6:	2b04      	cmp	r3, #4
 800e3e8:	f040 82f1 	bne.w	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	2b35      	cmp	r3, #53	; 0x35
 800e3f6:	f200 82ea 	bhi.w	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e5e1 	.word	0x0800e5e1
 800e404:	0800e641 	.word	0x0800e641
 800e408:	0800e799 	.word	0x0800e799
 800e40c:	0800e883 	.word	0x0800e883
 800e410:	0800e7f5 	.word	0x0800e7f5
 800e414:	0800e941 	.word	0x0800e941
 800e418:	0800e827 	.word	0x0800e827
 800e41c:	0800e9b9 	.word	0x0800e9b9
 800e420:	0800e9b9 	.word	0x0800e9b9
 800e424:	0800e9cf 	.word	0x0800e9cf
 800e428:	0800e9cf 	.word	0x0800e9cf
 800e42c:	0800e9b9 	.word	0x0800e9b9
 800e430:	0800e9b9 	.word	0x0800e9b9
 800e434:	0800e4d9 	.word	0x0800e4d9
 800e438:	0800e9b9 	.word	0x0800e9b9
 800e43c:	0800e9cf 	.word	0x0800e9cf
 800e440:	0800e9cf 	.word	0x0800e9cf
 800e444:	0800e9b9 	.word	0x0800e9b9
 800e448:	0800e9b9 	.word	0x0800e9b9
 800e44c:	0800e9cf 	.word	0x0800e9cf
 800e450:	0800e9cf 	.word	0x0800e9cf
 800e454:	0800e90f 	.word	0x0800e90f
 800e458:	0800e939 	.word	0x0800e939
 800e45c:	0800e9b9 	.word	0x0800e9b9
 800e460:	0800e9b9 	.word	0x0800e9b9
 800e464:	0800e9b9 	.word	0x0800e9b9
 800e468:	0800e9b9 	.word	0x0800e9b9
 800e46c:	0800e9cf 	.word	0x0800e9cf
 800e470:	0800e9cf 	.word	0x0800e9cf
 800e474:	0800e9cf 	.word	0x0800e9cf
 800e478:	0800e9cf 	.word	0x0800e9cf
 800e47c:	0800e9b9 	.word	0x0800e9b9
 800e480:	0800e9cf 	.word	0x0800e9cf
 800e484:	0800e9cf 	.word	0x0800e9cf
 800e488:	0800e9cf 	.word	0x0800e9cf
 800e48c:	0800e9cf 	.word	0x0800e9cf
 800e490:	0800e9cf 	.word	0x0800e9cf
 800e494:	0800e9cf 	.word	0x0800e9cf
 800e498:	0800e9cf 	.word	0x0800e9cf
 800e49c:	0800e9cf 	.word	0x0800e9cf
 800e4a0:	0800e9cf 	.word	0x0800e9cf
 800e4a4:	0800e9cf 	.word	0x0800e9cf
 800e4a8:	0800e9cf 	.word	0x0800e9cf
 800e4ac:	0800e9cf 	.word	0x0800e9cf
 800e4b0:	0800e9cf 	.word	0x0800e9cf
 800e4b4:	0800e9cf 	.word	0x0800e9cf
 800e4b8:	0800e9cf 	.word	0x0800e9cf
 800e4bc:	0800e9cf 	.word	0x0800e9cf
 800e4c0:	0800e9a9 	.word	0x0800e9a9
 800e4c4:	0800e9b9 	.word	0x0800e9b9
 800e4c8:	0800e9b1 	.word	0x0800e9b1
 800e4cc:	0800e9cf 	.word	0x0800e9cf
 800e4d0:	0800e9cf 	.word	0x0800e9cf
 800e4d4:	0800e9b9 	.word	0x0800e9b9
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f040 826c 	bne.w	800e9bc <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e4ea:	f043 0301 	orr.w	r3, r3, #1
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d114      	bne.n	800e52a <_ZN3BTD14HCI_event_taskEv+0x186>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e506:	2b10      	cmp	r3, #16
 800e508:	d10f      	bne.n	800e52a <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e520:	b29a      	uxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e528:	e059      	b.n	800e5de <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e530:	2b04      	cmp	r3, #4
 800e532:	d12a      	bne.n	800e58a <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e53a:	2b10      	cmp	r3, #16
 800e53c:	d125      	bne.n	800e58a <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d114      	bne.n	800e576 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10f      	bne.n	800e576 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e55c:	f003 0308 	and.w	r3, r3, #8
 800e560:	2b00      	cmp	r3, #0
 800e562:	d004      	beq.n	800e56e <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800e56c:	e003      	b.n	800e576 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e57c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e580:	b29a      	uxth	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800e588:	e029      	b.n	800e5de <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e590:	2b09      	cmp	r3, #9
 800e592:	f040 8213 	bne.w	800e9bc <_ZN3BTD14HCI_event_taskEv+0x618>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e59c:	2b10      	cmp	r3, #16
 800e59e:	f040 820d 	bne.w	800e9bc <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	75fb      	strb	r3, [r7, #23]
 800e5a6:	7dfb      	ldrb	r3, [r7, #23]
 800e5a8:	2b05      	cmp	r3, #5
 800e5aa:	d80e      	bhi.n	800e5ca <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800e5ac:	7dfb      	ldrb	r3, [r7, #23]
 800e5ae:	1d9a      	adds	r2, r3, #6
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	440a      	add	r2, r1
 800e5b6:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	4413      	add	r3, r2
 800e5be:	460a      	mov	r2, r1
 800e5c0:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800e5c2:	7dfb      	ldrb	r3, [r7, #23]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	75fb      	strb	r3, [r7, #23]
 800e5c8:	e7ed      	b.n	800e5a6 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e5d0:	f043 0320 	orr.w	r3, r3, #32
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800e5dc:	e1ee      	b.n	800e9bc <_ZN3BTD14HCI_event_taskEv+0x618>
 800e5de:	e1ed      	b.n	800e9bc <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e5e6:	2b04      	cmp	r3, #4
 800e5e8:	d921      	bls.n	800e62e <_ZN3BTD14HCI_event_taskEv+0x28a>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d104      	bne.n	800e5fe <_ZN3BTD14HCI_event_taskEv+0x25a>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d017      	beq.n	800e62e <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	220a      	movs	r2, #10
 800e62a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e634:	3301      	adds	r3, #1
 800e636:	b2da      	uxtb	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800e63e:	e1c6      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e646:	2b00      	cmp	r3, #0
 800e648:	f000 81ba 	beq.w	800e9c0 <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e64c:	2300      	movs	r3, #0
 800e64e:	75bb      	strb	r3, [r7, #22]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e656:	7dba      	ldrb	r2, [r7, #22]
 800e658:	429a      	cmp	r2, r3
 800e65a:	f080 81b1 	bcs.w	800e9c0 <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	b2da      	uxtb	r2, r3
 800e668:	7dbb      	ldrb	r3, [r7, #22]
 800e66a:	4619      	mov	r1, r3
 800e66c:	0049      	lsls	r1, r1, #1
 800e66e:	440b      	add	r3, r1
 800e670:	b2db      	uxtb	r3, r3
 800e672:	4413      	add	r3, r2
 800e674:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800e676:	2300      	movs	r3, #0
 800e678:	757b      	strb	r3, [r7, #21]
 800e67a:	7d7b      	ldrb	r3, [r7, #21]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d811      	bhi.n	800e6a4 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800e680:	7d7b      	ldrb	r3, [r7, #21]
 800e682:	1d1a      	adds	r2, r3, #4
 800e684:	7bbb      	ldrb	r3, [r7, #14]
 800e686:	441a      	add	r2, r3
 800e688:	7d7b      	ldrb	r3, [r7, #21]
 800e68a:	6879      	ldr	r1, [r7, #4]
 800e68c:	440a      	add	r2, r1
 800e68e:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	4413      	add	r3, r2
 800e696:	460a      	mov	r2, r1
 800e698:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800e69c:	7d7b      	ldrb	r3, [r7, #21]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	757b      	strb	r3, [r7, #21]
 800e6a2:	e7ea      	b.n	800e67a <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d038      	beq.n	800e720 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d133      	bne.n	800e720 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e6be:	2b05      	cmp	r3, #5
 800e6c0:	d12e      	bne.n	800e720 <_ZN3BTD14HCI_event_taskEv+0x37c>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e6c8:	f003 030c 	and.w	r3, r3, #12
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d027      	beq.n	800e720 <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800e6d8:	2300      	movs	r3, #0
 800e6da:	753b      	strb	r3, [r7, #20]
 800e6dc:	7d3b      	ldrb	r3, [r7, #20]
 800e6de:	2b05      	cmp	r3, #5
 800e6e0:	d814      	bhi.n	800e70c <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e6e2:	7d3b      	ldrb	r3, [r7, #20]
 800e6e4:	1cd9      	adds	r1, r3, #3
 800e6e6:	7dba      	ldrb	r2, [r7, #22]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	4413      	add	r3, r2
 800e6ee:	005b      	lsls	r3, r3, #1
 800e6f0:	18ca      	adds	r2, r1, r3
 800e6f2:	7d3b      	ldrb	r3, [r7, #20]
 800e6f4:	6879      	ldr	r1, [r7, #4]
 800e6f6:	440a      	add	r2, r1
 800e6f8:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	4413      	add	r3, r2
 800e700:	460a      	mov	r2, r1
 800e702:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e704:	7d3b      	ldrb	r3, [r7, #20]
 800e706:	3301      	adds	r3, #1
 800e708:	753b      	strb	r3, [r7, #20]
 800e70a:	e7e7      	b.n	800e6dc <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e71e:	e03a      	b.n	800e796 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e726:	2b00      	cmp	r3, #0
 800e728:	d031      	beq.n	800e78e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e730:	f003 030f 	and.w	r3, r3, #15
 800e734:	2b05      	cmp	r3, #5
 800e736:	d12a      	bne.n	800e78e <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e73e:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e742:	2b00      	cmp	r3, #0
 800e744:	d023      	beq.n	800e78e <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800e746:	2300      	movs	r3, #0
 800e748:	74fb      	strb	r3, [r7, #19]
 800e74a:	7cfb      	ldrb	r3, [r7, #19]
 800e74c:	2b05      	cmp	r3, #5
 800e74e:	d814      	bhi.n	800e77a <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800e750:	7cfb      	ldrb	r3, [r7, #19]
 800e752:	1cd9      	adds	r1, r3, #3
 800e754:	7dba      	ldrb	r2, [r7, #22]
 800e756:	4613      	mov	r3, r2
 800e758:	005b      	lsls	r3, r3, #1
 800e75a:	4413      	add	r3, r2
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	18ca      	adds	r2, r1, r3
 800e760:	7cfb      	ldrb	r3, [r7, #19]
 800e762:	6879      	ldr	r1, [r7, #4]
 800e764:	440a      	add	r2, r1
 800e766:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	4413      	add	r3, r2
 800e76e:	460a      	mov	r2, r1
 800e770:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800e772:	7cfb      	ldrb	r3, [r7, #19]
 800e774:	3301      	adds	r3, #1
 800e776:	74fb      	strb	r3, [r7, #19]
 800e778:	e7e7      	b.n	800e74a <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e784:	b29a      	uxth	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800e78c:	e003      	b.n	800e796 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800e78e:	7dbb      	ldrb	r3, [r7, #22]
 800e790:	3301      	adds	r3, #1
 800e792:	75bb      	strb	r3, [r7, #22]
 800e794:	e75c      	b.n	800e650 <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800e796:	e113      	b.n	800e9c0 <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e79e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d11a      	bne.n	800e7ea <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e7ba:	b21a      	sxth	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e7c2:	021b      	lsls	r3, r3, #8
 800e7c4:	b21b      	sxth	r3, r3
 800e7c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e7ca:	b21b      	sxth	r3, r3
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	b21b      	sxth	r3, r3
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e7dc:	f043 0302 	orr.w	r3, r3, #2
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800e7e8:	e0f1      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2206      	movs	r2, #6
 800e7ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e7f2:	e0ec      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f040 80e2 	bne.w	800e9c4 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e806:	f043 0304 	orr.w	r3, r3, #4
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e818:	f023 0302 	bic.w	r3, r3, #2
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e824:	e0ce      	b.n	800e9c4 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f040 80cb 	bne.w	800e9c8 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e832:	2300      	movs	r3, #0
 800e834:	74bb      	strb	r3, [r7, #18]
 800e836:	7cbb      	ldrb	r3, [r7, #18]
 800e838:	2b1d      	cmp	r3, #29
 800e83a:	d818      	bhi.n	800e86e <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800e83c:	7cbb      	ldrb	r3, [r7, #18]
 800e83e:	f103 0209 	add.w	r2, r3, #9
 800e842:	7cbb      	ldrb	r3, [r7, #18]
 800e844:	6879      	ldr	r1, [r7, #4]
 800e846:	440a      	add	r2, r1
 800e848:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	4413      	add	r3, r2
 800e850:	460a      	mov	r2, r1
 800e852:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800e856:	7cbb      	ldrb	r3, [r7, #18]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	4413      	add	r3, r2
 800e85c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800e860:	2b00      	cmp	r3, #0
 800e862:	d003      	beq.n	800e86c <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800e864:	7cbb      	ldrb	r3, [r7, #18]
 800e866:	3301      	adds	r3, #1
 800e868:	74bb      	strb	r3, [r7, #18]
 800e86a:	e7e4      	b.n	800e836 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800e86c:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e874:	f043 0308 	orr.w	r3, r3, #8
 800e878:	b29a      	uxth	r2, r3
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800e880:	e0a2      	b.n	800e9c8 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800e882:	2300      	movs	r3, #0
 800e884:	747b      	strb	r3, [r7, #17]
 800e886:	7c7b      	ldrb	r3, [r7, #17]
 800e888:	2b05      	cmp	r3, #5
 800e88a:	d80e      	bhi.n	800e8aa <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800e88c:	7c7b      	ldrb	r3, [r7, #17]
 800e88e:	1c9a      	adds	r2, r3, #2
 800e890:	7c7b      	ldrb	r3, [r7, #17]
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	440a      	add	r2, r1
 800e896:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	4413      	add	r3, r2
 800e89e:	460a      	mov	r2, r1
 800e8a0:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800e8a2:	7c7b      	ldrb	r3, [r7, #17]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	747b      	strb	r3, [r7, #17]
 800e8a8:	e7ed      	b.n	800e886 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	743b      	strb	r3, [r7, #16]
 800e8ae:	7c3b      	ldrb	r3, [r7, #16]
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d810      	bhi.n	800e8d6 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800e8b4:	7c3b      	ldrb	r3, [r7, #16]
 800e8b6:	f103 0208 	add.w	r2, r3, #8
 800e8ba:	7c3b      	ldrb	r3, [r7, #16]
 800e8bc:	6879      	ldr	r1, [r7, #4]
 800e8be:	440a      	add	r2, r1
 800e8c0:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	460a      	mov	r2, r1
 800e8ca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800e8ce:	7c3b      	ldrb	r3, [r7, #16]
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	743b      	strb	r3, [r7, #16]
 800e8d4:	e7eb      	b.n	800e8ae <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800e8dc:	f003 030f 	and.w	r3, r3, #15
 800e8e0:	2b05      	cmp	r3, #5
 800e8e2:	d10a      	bne.n	800e8fa <_ZN3BTD14HCI_event_taskEv+0x556>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800e8ea:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d003      	beq.n	800e8fa <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800e900:	f043 0310 	orr.w	r3, r3, #16
 800e904:	b29a      	uxth	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800e90c:	e05f      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 feec 	bl	800f6f6 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800e91e:	e056      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f000 fee4 	bl	800f6f6 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800e92e:	e04e      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 ff93 	bl	800f85c <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800e936:	e04a      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 ffca 	bl	800f8d2 <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800e93e:	e046      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800e946:	2b00      	cmp	r3, #0
 800e948:	d123      	bne.n	800e992 <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00c      	beq.n	800e96e <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e95a:	f083 0301 	eor.w	r3, r3, #1
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800e96c:	e02e      	b.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800e974:	2b00      	cmp	r3, #0
 800e976:	d029      	beq.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x628>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e97e:	f083 0301 	eor.w	r3, r3, #1
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d021      	beq.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800e990:	e01c      	b.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	8b5b      	ldrh	r3, [r3, #26]
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f001 f882 	bl	800faa2 <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2210      	movs	r2, #16
 800e9a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800e9a6:	e011      	b.n	800e9cc <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 ffcd 	bl	800f948 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800e9ae:	e00e      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f001 f810 	bl	800f9d6 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800e9b6:	e00a      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800e9b8:	bf00      	nop
 800e9ba:	e008      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9bc:	bf00      	nop
 800e9be:	e006      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9c0:	bf00      	nop
 800e9c2:	e004      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9c4:	bf00      	nop
 800e9c6:	e002      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9c8:	bf00      	nop
 800e9ca:	e000      	b.n	800e9ce <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800e9cc:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800e9ce:	bf00      	nop
 800e9d0:	3718      	adds	r7, #24
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e9d6:	bf00      	nop

0800e9d8 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9e6:	2b13      	cmp	r3, #19
 800e9e8:	f200 82ef 	bhi.w	800efca <_ZN3BTD8HCI_taskEv+0x5f2>
 800e9ec:	a201      	add	r2, pc, #4	; (adr r2, 800e9f4 <_ZN3BTD8HCI_taskEv+0x1c>)
 800e9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f2:	bf00      	nop
 800e9f4:	0800ea45 	.word	0x0800ea45
 800e9f8:	0800ea7f 	.word	0x0800ea7f
 800e9fc:	0800eb05 	.word	0x0800eb05
 800ea00:	0800eb25 	.word	0x0800eb25
 800ea04:	0800eb45 	.word	0x0800eb45
 800ea08:	0800eb99 	.word	0x0800eb99
 800ea0c:	0800ec3f 	.word	0x0800ec3f
 800ea10:	0800ec6d 	.word	0x0800ec6d
 800ea14:	0800eca7 	.word	0x0800eca7
 800ea18:	0800eccf 	.word	0x0800eccf
 800ea1c:	0800ed05 	.word	0x0800ed05
 800ea20:	0800ed63 	.word	0x0800ed63
 800ea24:	0800eda1 	.word	0x0800eda1
 800ea28:	0800eec7 	.word	0x0800eec7
 800ea2c:	0800efcb 	.word	0x0800efcb
 800ea30:	0800ef0d 	.word	0x0800ef0d
 800ea34:	0800ef3b 	.word	0x0800ef3b
 800ea38:	0800ebcf 	.word	0x0800ebcf
 800ea3c:	0800ec05 	.word	0x0800ec05
 800ea40:	0800ec25 	.word	0x0800ec25
                case HCI_INIT_STATE:
                        hci_counter++;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800ea60:	429a      	cmp	r2, r3
 800ea62:	f240 82b4 	bls.w	800efce <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 fb7d 	bl	800f166 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800ea7c:	e2a7      	b.n	800efce <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ea84:	3301      	adds	r3, #1
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2202      	movs	r2, #2
 800eaa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f001 f830 	bl	800fb12 <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800eab2:	e28e      	b.n	800efd2 <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800eac0:	429a      	cmp	r2, r3
 800eac2:	f240 8286 	bls.w	800efd2 <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800eacc:	461a      	mov	r2, r3
 800eace:	0092      	lsls	r2, r2, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	005b      	lsls	r3, r3, #1
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800eae2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800eae6:	d904      	bls.n	800eaf2 <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800eaee:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800eb02:	e266      	b.n	800efd2 <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 8261 	beq.w	800efd6 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2203      	movs	r2, #3
 800eb18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 fb72 	bl	800f206 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800eb22:	e258      	b.n	800efd6 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb2a:	f003 0320 	and.w	r3, r3, #32
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 8253 	beq.w	800efda <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fb8a 	bl	800f24e <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2204      	movs	r2, #4
 800eb3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eb42:	e24a      	b.n	800efda <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 8245 	beq.w	800efde <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00a      	beq.n	800eb72 <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	68db      	ldr	r3, [r3, #12]
 800eb60:	4619      	mov	r1, r3
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 fc5d 	bl	800f422 <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2205      	movs	r2, #5
 800eb6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800eb70:	e235      	b.n	800efde <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d008      	beq.n	800eb8e <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 fb89 	bl	800f296 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2211      	movs	r2, #17
 800eb88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eb8c:	e227      	b.n	800efde <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2206      	movs	r2, #6
 800eb92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eb96:	e222      	b.n	800efde <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f000 821d 	beq.w	800efe2 <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d008      	beq.n	800ebc4 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 fb6e 	bl	800f296 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2211      	movs	r2, #17
 800ebbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ebc2:	e20e      	b.n	800efe2 <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2206      	movs	r2, #6
 800ebc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ebcc:	e209      	b.n	800efe2 <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ebd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 8204 	beq.w	800efe6 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d008      	beq.n	800ebfa <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800ebe8:	2101      	movs	r1, #1
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 fc9d 	bl	800f52a <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2212      	movs	r2, #18
 800ebf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800ebf8:	e1f5      	b.n	800efe6 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2206      	movs	r2, #6
 800ebfe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ec02:	e1f0      	b.n	800efe6 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 81eb 	beq.w	800efea <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 fc4d 	bl	800f4b4 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2213      	movs	r2, #19
 800ec1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ec22:	e1e2      	b.n	800efea <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec2a:	f003 0301 	and.w	r3, r3, #1
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f000 81dd 	beq.w	800efee <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2206      	movs	r2, #6
 800ec38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ec3c:	e1d7      	b.n	800efee <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <_ZN3BTD8HCI_taskEv+0x27a>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d007      	beq.n	800ec62 <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fc8f 	bl	800f576 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2207      	movs	r2, #7
 800ec5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800ec60:	e1d8      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	220a      	movs	r2, #10
 800ec66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ec6a:	e1d3      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f000 81bb 	beq.w	800eff2 <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f000 fcb2 	bl	800f5e6 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d007      	beq.n	800ec9c <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 fb74 	bl	800f37a <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	220c      	movs	r2, #12
 800ec96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800ec9a:	e1aa      	b.n	800eff2 <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2208      	movs	r2, #8
 800eca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eca4:	e1a5      	b.n	800eff2 <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ecac:	f003 0301 	and.w	r3, r3, #1
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	f000 81a0 	beq.w	800eff6 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fcac 	bl	800f61c <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2209      	movs	r2, #9
 800ecc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800eccc:	e193      	b.n	800eff6 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ecd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 818e 	beq.w	800effa <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ece4:	f003 0302 	and.w	r3, r3, #2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d007      	beq.n	800ecfc <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 fead 	bl	800fa4c <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	220a      	movs	r2, #10
 800ecf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800ecfa:	e17e      	b.n	800effa <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 fc8d 	bl	800f61c <_ZN3BTD11hci_connectEv>
                        break;
 800ed02:	e17a      	b.n	800effa <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed0a:	f083 0301 	eor.w	r3, r3, #1
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f000 8174 	beq.w	800effe <_ZN3BTD8HCI_taskEv+0x626>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed1c:	f083 0301 	eor.w	r3, r3, #1
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f000 816b 	beq.w	800effe <_ZN3BTD8HCI_taskEv+0x626>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ed2e:	f083 0301 	eor.w	r3, r3, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 8162 	beq.w	800effe <_ZN3BTD8HCI_taskEv+0x626>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ed40:	f083 0301 	eor.w	r3, r3, #1
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 8159 	beq.w	800effe <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fa29 	bl	800f1a4 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	220b      	movs	r2, #11
 800ed5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ed60:	e14d      	b.n	800effe <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ed68:	f003 0310 	and.w	r3, r3, #16
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00a      	beq.n	800ed86 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 faff 	bl	800f37a <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	220c      	movs	r2, #12
 800ed80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800ed84:	e13d      	b.n	800f002 <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ed8c:	f003 0304 	and.w	r3, r3, #4
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 8136 	beq.w	800f002 <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2210      	movs	r2, #16
 800ed9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800ed9e:	e130      	b.n	800f002 <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eda6:	f003 0308 	and.w	r3, r3, #8
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f000 812b 	beq.w	800f006 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3322      	adds	r3, #34	; 0x22
 800edb4:	2208      	movs	r2, #8
 800edb6:	4999      	ldr	r1, [pc, #612]	; (800f01c <_ZN3BTD8HCI_taskEv+0x644>)
 800edb8:	4618      	mov	r0, r3
 800edba:	f004 fe27 	bl	8013a0c <strncmp>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d147      	bne.n	800ee54 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3322      	adds	r3, #34	; 0x22
 800ede8:	2216      	movs	r2, #22
 800edea:	498d      	ldr	r1, [pc, #564]	; (800f020 <_ZN3BTD8HCI_taskEv+0x648>)
 800edec:	4618      	mov	r0, r3
 800edee:	f004 fe0d 	bl	8013a0c <strncmp>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d104      	bne.n	800ee02 <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2201      	movs	r2, #1
 800edfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee00:	e028      	b.n	800ee54 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	3322      	adds	r3, #34	; 0x22
 800ee06:	2216      	movs	r2, #22
 800ee08:	4986      	ldr	r1, [pc, #536]	; (800f024 <_ZN3BTD8HCI_taskEv+0x64c>)
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f004 fdfe 	bl	8013a0c <strncmp>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d110      	bne.n	800ee38 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee36:	e00d      	b.n	800ee54 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	3322      	adds	r3, #34	; 0x22
 800ee3c:	2213      	movs	r2, #19
 800ee3e:	497a      	ldr	r1, [pc, #488]	; (800f028 <_ZN3BTD8HCI_taskEv+0x650>)
 800ee40:	4618      	mov	r0, r3
 800ee42:	f004 fde3 	bl	8013a0c <strncmp>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d103      	bne.n	800ee54 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d117      	bne.n	800ee8e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800ee64:	2b25      	cmp	r3, #37	; 0x25
 800ee66:	d112      	bne.n	800ee8e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800ee6e:	2b08      	cmp	r3, #8
 800ee70:	d10d      	bne.n	800ee8e <_ZN3BTD8HCI_taskEv+0x4b6>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	3322      	adds	r3, #34	; 0x22
 800ee76:	2213      	movs	r2, #19
 800ee78:	496c      	ldr	r1, [pc, #432]	; (800f02c <_ZN3BTD8HCI_taskEv+0x654>)
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f004 fdc6 	bl	8013a0c <strncmp>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d103      	bne.n	800ee8e <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d104      	bne.n	800eea2 <_ZN3BTD8HCI_taskEv+0x4ca>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d009      	beq.n	800eeb6 <_ZN3BTD8HCI_taskEv+0x4de>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d004      	beq.n	800eeb6 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2208      	movs	r2, #8
 800eeb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800eeb4:	e0a7      	b.n	800f006 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fa17 	bl	800f2ea <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	220d      	movs	r2, #13
 800eec0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800eec4:	e09f      	b.n	800f006 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800eecc:	f003 0302 	and.w	r3, r3, #2
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	f000 809a 	beq.w	800f00a <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d003      	beq.n	800eee8 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2201      	movs	r2, #1
 800eee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2200      	movs	r2, #0
 800eef2:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	220f      	movs	r2, #15
 800ef06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ef0a:	e07e      	b.n	800f00a <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ef12:	3301      	adds	r3, #1
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ef22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef26:	d972      	bls.n	800f00e <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	220a      	movs	r2, #10
 800ef34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ef38:	e069      	b.n	800f00e <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ef40:	f003 0304 	and.w	r3, r3, #4
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d064      	beq.n	800f012 <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3389      	adds	r3, #137	; 0x89
 800ef54:	2240      	movs	r2, #64	; 0x40
 800ef56:	2100      	movs	r1, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f004 fd0b 	bl	8013974 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	33c9      	adds	r3, #201	; 0xc9
 800ef62:	2240      	movs	r2, #64	; 0x40
 800ef64:	2100      	movs	r1, #0
 800ef66:	4618      	mov	r0, r3
 800ef68:	f004 fd04 	bl	8013974 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	220a      	movs	r2, #10
 800efc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800efc8:	e023      	b.n	800f012 <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800efca:	bf00      	nop
 800efcc:	e022      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efce:	bf00      	nop
 800efd0:	e020      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efd2:	bf00      	nop
 800efd4:	e01e      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efd6:	bf00      	nop
 800efd8:	e01c      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efda:	bf00      	nop
 800efdc:	e01a      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efde:	bf00      	nop
 800efe0:	e018      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efe2:	bf00      	nop
 800efe4:	e016      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efe6:	bf00      	nop
 800efe8:	e014      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efea:	bf00      	nop
 800efec:	e012      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800efee:	bf00      	nop
 800eff0:	e010      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eff2:	bf00      	nop
 800eff4:	e00e      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800eff6:	bf00      	nop
 800eff8:	e00c      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800effa:	bf00      	nop
 800effc:	e00a      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800effe:	bf00      	nop
 800f000:	e008      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f002:	bf00      	nop
 800f004:	e006      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f006:	bf00      	nop
 800f008:	e004      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f00a:	bf00      	nop
 800f00c:	e002      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f00e:	bf00      	nop
 800f010:	e000      	b.n	800f014 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800f012:	bf00      	nop
        }
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	08013c60 	.word	0x08013c60
 800f020:	08013c6c 	.word	0x08013c6c
 800f024:	08013c84 	.word	0x08013c84
 800f028:	08013c9c 	.word	0x08013c9c
 800f02c:	08013cb0 	.word	0x08013cb0

0800f030 <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800f030:	b5b0      	push	{r4, r5, r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af02      	add	r7, sp, #8
 800f036:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800f038:	2340      	movs	r3, #64	; 0x40
 800f03a:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	33c9      	adds	r3, #201	; 0xc9
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800f056:	f107 050a 	add.w	r5, r7, #10
 800f05a:	9201      	str	r2, [sp, #4]
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	462b      	mov	r3, r5
 800f060:	4622      	mov	r2, r4
 800f062:	f003 f92c 	bl	80122be <_ZN3USB10inTransferEhhPtPhh>
 800f066:	4603      	mov	r3, r0
 800f068:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800f06a:	7b7b      	ldrb	r3, [r7, #13]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d125      	bne.n	800f0bc <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800f070:	897b      	ldrh	r3, [r7, #10]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d022      	beq.n	800f0bc <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
 800f07c:	2b03      	cmp	r3, #3
 800f07e:	d81d      	bhi.n	800f0bc <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800f080:	7bfb      	ldrb	r3, [r7, #15]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	3318      	adds	r3, #24
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	4413      	add	r3, r2
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d011      	beq.n	800f0b4 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	3318      	adds	r3, #24
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	6858      	ldr	r0, [r3, #4]
 800f09c:	7bfb      	ldrb	r3, [r7, #15]
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	3318      	adds	r3, #24
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	4413      	add	r3, r2
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	32c9      	adds	r2, #201	; 0xc9
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	73fb      	strb	r3, [r7, #15]
 800f0ba:	e7de      	b.n	800f07a <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73bb      	strb	r3, [r7, #14]
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	2b03      	cmp	r3, #3
 800f0c4:	d81c      	bhi.n	800f100 <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800f0c6:	7bbb      	ldrb	r3, [r7, #14]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	3318      	adds	r3, #24
 800f0cc:	009b      	lsls	r3, r3, #2
 800f0ce:	4413      	add	r3, r2
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d010      	beq.n	800f0f8 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800f0d6:	7bbb      	ldrb	r3, [r7, #14]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	3318      	adds	r3, #24
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4413      	add	r3, r2
 800f0e0:	6859      	ldr	r1, [r3, #4]
 800f0e2:	7bbb      	ldrb	r3, [r7, #14]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	3318      	adds	r3, #24
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4608      	mov	r0, r1
 800f0f6:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800f0f8:	7bbb      	ldrb	r3, [r7, #14]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	73bb      	strb	r3, [r7, #14]
 800f0fe:	e7df      	b.n	800f0c0 <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800f100:	bf00      	nop
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bdb0      	pop	{r4, r5, r7, pc}

0800f108 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08c      	sub	sp, #48	; 0x30
 800f10c:	af08      	add	r7, sp, #32
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	4613      	mov	r3, r2
 800f114:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f11c:	f023 0301 	bic.w	r3, r3, #1
 800f120:	b29a      	uxth	r2, r3
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800f138:	2300      	movs	r3, #0
 800f13a:	9307      	str	r3, [sp, #28]
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	9306      	str	r3, [sp, #24]
 800f140:	88fb      	ldrh	r3, [r7, #6]
 800f142:	9305      	str	r3, [sp, #20]
 800f144:	88fb      	ldrh	r3, [r7, #6]
 800f146:	9304      	str	r3, [sp, #16]
 800f148:	2300      	movs	r3, #0
 800f14a:	9303      	str	r3, [sp, #12]
 800f14c:	2300      	movs	r3, #0
 800f14e:	9302      	str	r3, [sp, #8]
 800f150:	2300      	movs	r3, #0
 800f152:	9301      	str	r3, [sp, #4]
 800f154:	2300      	movs	r3, #0
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	2320      	movs	r3, #32
 800f15a:	f002 ffd8 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800f15e:	bf00      	nop
 800f160:	3710      	adds	r7, #16
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}

0800f166 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800f166:	b580      	push	{r7, lr}
 800f168:	b082      	sub	sp, #8
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2203      	movs	r2, #3
 800f17a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	220c      	movs	r2, #12
 800f182:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	3389      	adds	r3, #137	; 0x89
 800f192:	2203      	movs	r2, #3
 800f194:	4619      	mov	r1, r3
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff ffb6 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f19c:	bf00      	nop
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f1b2:	f023 0310 	bic.w	r3, r3, #16
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	221a      	movs	r2, #26
 800f1c2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	220c      	movs	r2, #12
 800f1ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d004      	beq.n	800f1e8 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2203      	movs	r2, #3
 800f1e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800f1e6:	e003      	b.n	800f1f0 <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	3389      	adds	r3, #137	; 0x89
 800f1f4:	2204      	movs	r2, #4
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7ff ff85 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f1fe:	bf00      	nop
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f214:	f023 0320 	bic.w	r3, r3, #32
 800f218:	b29a      	uxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2209      	movs	r2, #9
 800f224:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2210      	movs	r2, #16
 800f22c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	3389      	adds	r3, #137	; 0x89
 800f23c:	2203      	movs	r2, #3
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff ff61 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f25c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f260:	b29a      	uxth	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2210      	movs	r2, #16
 800f274:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	3389      	adds	r3, #137	; 0x89
 800f284:	2203      	movs	r2, #3
 800f286:	4619      	mov	r1, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7ff ff3d 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f28e:	bf00      	nop
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800f296:	b580      	push	{r7, lr}
 800f298:	b082      	sub	sp, #8
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	460b      	mov	r3, r1
 800f2a0:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f2a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2204      	movs	r2, #4
 800f2b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2210      	movs	r2, #16
 800f2c0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	78fa      	ldrb	r2, [r7, #3]
 800f2d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3389      	adds	r3, #137	; 0x89
 800f2d8:	2204      	movs	r2, #4
 800f2da:	4619      	mov	r1, r3
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ff13 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f2e2:	bf00      	nop
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f2f8:	f023 0302 	bic.w	r3, r3, #2
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2209      	movs	r2, #9
 800f308:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2204      	movs	r2, #4
 800f310:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2207      	movs	r2, #7
 800f318:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	7f1a      	ldrb	r2, [r3, #28]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	7f5a      	ldrb	r2, [r3, #29]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	7f9a      	ldrb	r2, [r3, #30]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	7fda      	ldrb	r2, [r3, #31]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	3389      	adds	r3, #137	; 0x89
 800f368:	220a      	movs	r2, #10
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff fecb 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f372:	bf00      	nop
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b082      	sub	sp, #8
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f388:	f023 0308 	bic.w	r3, r3, #8
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2219      	movs	r2, #25
 800f398:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2204      	movs	r2, #4
 800f3a0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	220a      	movs	r2, #10
 800f3a8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	7f1a      	ldrb	r2, [r3, #28]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	7f5a      	ldrb	r2, [r3, #29]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	7f9a      	ldrb	r2, [r3, #30]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	7fda      	ldrb	r2, [r3, #31]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3389      	adds	r3, #137	; 0x89
 800f410:	220d      	movs	r2, #13
 800f412:	4619      	mov	r1, r3
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7ff fe77 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f41a:	bf00      	nop
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800f422:	b590      	push	{r4, r7, lr}
 800f424:	b085      	sub	sp, #20
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2213      	movs	r2, #19
 800f430:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	220c      	movs	r2, #12
 800f438:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800f43c:	6838      	ldr	r0, [r7, #0]
 800f43e:	f7f0 fee7 	bl	8000210 <strlen>
 800f442:	4603      	mov	r3, r0
 800f444:	b2db      	uxtb	r3, r3
 800f446:	3301      	adds	r3, #1
 800f448:	b2da      	uxtb	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800f450:	2300      	movs	r3, #0
 800f452:	73fb      	strb	r3, [r7, #15]
 800f454:	7bfc      	ldrb	r4, [r7, #15]
 800f456:	6838      	ldr	r0, [r7, #0]
 800f458:	f7f0 feda 	bl	8000210 <strlen>
 800f45c:	4603      	mov	r3, r0
 800f45e:	429c      	cmp	r4, r3
 800f460:	d20e      	bcs.n	800f480 <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	683a      	ldr	r2, [r7, #0]
 800f466:	441a      	add	r2, r3
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	3303      	adds	r3, #3
 800f46c:	7811      	ldrb	r1, [r2, #0]
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	4413      	add	r3, r2
 800f472:	460a      	mov	r2, r1
 800f474:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	3301      	adds	r3, #1
 800f47c:	73fb      	strb	r3, [r7, #15]
 800f47e:	e7e9      	b.n	800f454 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	3303      	adds	r3, #3
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	4413      	add	r3, r2
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800f494:	6838      	ldr	r0, [r7, #0]
 800f496:	f7f0 febb 	bl	8000210 <strlen>
 800f49a:	4603      	mov	r3, r0
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	3304      	adds	r3, #4
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f7ff fe2e 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f4ac:	bf00      	nop
 800f4ae:	3714      	adds	r7, #20
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd90      	pop	{r4, r7, pc}

0800f4b4 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	220c      	movs	r2, #12
 800f4c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2208      	movs	r2, #8
 800f4d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	22ff      	movs	r2, #255	; 0xff
 800f4d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	22ff      	movs	r2, #255	; 0xff
 800f4e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	22ff      	movs	r2, #255	; 0xff
 800f4e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	22ff      	movs	r2, #255	; 0xff
 800f4f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	22ff      	movs	r2, #255	; 0xff
 800f4f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	221f      	movs	r2, #31
 800f500:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	22ff      	movs	r2, #255	; 0xff
 800f508:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	3389      	adds	r3, #137	; 0x89
 800f518:	220b      	movs	r2, #11
 800f51a:	4619      	mov	r1, r3
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff fdf3 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f522:	bf00      	nop
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b082      	sub	sp, #8
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	460b      	mov	r3, r1
 800f534:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2256      	movs	r2, #86	; 0x56
 800f53a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	220c      	movs	r2, #12
 800f542:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2201      	movs	r2, #1
 800f54a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800f54e:	78fb      	ldrb	r3, [r7, #3]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800f554:	2201      	movs	r2, #1
 800f556:	e000      	b.n	800f55a <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800f558:	2200      	movs	r2, #0
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	3389      	adds	r3, #137	; 0x89
 800f564:	2204      	movs	r2, #4
 800f566:	4619      	mov	r1, r3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7ff fdcd 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f56e:	bf00      	nop
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f588:	b29a      	uxth	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2204      	movs	r2, #4
 800f59c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2205      	movs	r2, #5
 800f5a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2233      	movs	r2, #51	; 0x33
 800f5ac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	228b      	movs	r2, #139	; 0x8b
 800f5b4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	229e      	movs	r2, #158	; 0x9e
 800f5bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2230      	movs	r2, #48	; 0x30
 800f5c4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	220a      	movs	r2, #10
 800f5cc:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3389      	adds	r3, #137	; 0x89
 800f5d4:	2208      	movs	r2, #8
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff fd95 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f5de:	bf00      	nop
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800f5e6:	b580      	push	{r7, lr}
 800f5e8:	b082      	sub	sp, #8
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2204      	movs	r2, #4
 800f5fa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	3389      	adds	r3, #137	; 0x89
 800f60a:	2203      	movs	r2, #3
 800f60c:	4619      	mov	r1, r3
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f7ff fd7a 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f614:	bf00      	nop
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	331c      	adds	r3, #28
 800f628:	4619      	mov	r1, r3
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 f804 	bl	800f638 <_ZN3BTD11hci_connectEPh>
}
 800f630:	bf00      	nop
 800f632:	3708      	adds	r7, #8
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800f648:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2205      	movs	r2, #5
 800f658:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2204      	movs	r2, #4
 800f660:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	220d      	movs	r2, #13
 800f668:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	781a      	ldrb	r2, [r3, #0]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	785a      	ldrb	r2, [r3, #1]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	789a      	ldrb	r2, [r3, #2]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	78da      	ldrb	r2, [r3, #3]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	791a      	ldrb	r2, [r3, #4]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	795a      	ldrb	r2, [r3, #5]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2218      	movs	r2, #24
 800f6ac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	22cc      	movs	r2, #204	; 0xcc
 800f6b4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	3389      	adds	r3, #137	; 0x89
 800f6e4:	2210      	movs	r2, #16
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7ff fd0d 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f6ee:	bf00      	nop
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800f6f6:	b590      	push	{r4, r7, lr}
 800f6f8:	b085      	sub	sp, #20
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	220d      	movs	r2, #13
 800f702:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2204      	movs	r2, #4
 800f70a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2217      	movs	r2, #23
 800f712:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7f1a      	ldrb	r2, [r3, #28]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	7f5a      	ldrb	r2, [r3, #29]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	7f9a      	ldrb	r2, [r3, #30]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	7fda      	ldrb	r2, [r3, #31]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d03f      	beq.n	800f7e0 <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2206      	movs	r2, #6
 800f764:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d013      	beq.n	800f79a <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800f772:	2300      	movs	r3, #0
 800f774:	73fb      	strb	r3, [r7, #15]
 800f776:	7bfb      	ldrb	r3, [r7, #15]
 800f778:	2b05      	cmp	r3, #5
 800f77a:	d822      	bhi.n	800f7c2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800f77c:	7bfa      	ldrb	r2, [r7, #15]
 800f77e:	7bfb      	ldrb	r3, [r7, #15]
 800f780:	330a      	adds	r3, #10
 800f782:	6879      	ldr	r1, [r7, #4]
 800f784:	440a      	add	r2, r1
 800f786:	7d11      	ldrb	r1, [r2, #20]
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	4413      	add	r3, r2
 800f78c:	460a      	mov	r2, r1
 800f78e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f792:	7bfb      	ldrb	r3, [r7, #15]
 800f794:	3301      	adds	r3, #1
 800f796:	73fb      	strb	r3, [r7, #15]
 800f798:	e7ed      	b.n	800f776 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800f79a:	2300      	movs	r3, #0
 800f79c:	73bb      	strb	r3, [r7, #14]
 800f79e:	7bbb      	ldrb	r3, [r7, #14]
 800f7a0:	2b05      	cmp	r3, #5
 800f7a2:	d80e      	bhi.n	800f7c2 <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800f7a4:	7bba      	ldrb	r2, [r7, #14]
 800f7a6:	7bbb      	ldrb	r3, [r7, #14]
 800f7a8:	330a      	adds	r3, #10
 800f7aa:	6879      	ldr	r1, [r7, #4]
 800f7ac:	440a      	add	r2, r1
 800f7ae:	7f11      	ldrb	r1, [r2, #28]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	460a      	mov	r2, r1
 800f7b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800f7ba:	7bbb      	ldrb	r3, [r7, #14]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	73bb      	strb	r3, [r7, #14]
 800f7c0:	e7ed      	b.n	800f79e <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800f7c2:	2310      	movs	r3, #16
 800f7c4:	737b      	strb	r3, [r7, #13]
 800f7c6:	7b7b      	ldrb	r3, [r7, #13]
 800f7c8:	2b19      	cmp	r3, #25
 800f7ca:	d83c      	bhi.n	800f846 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800f7cc:	7b7b      	ldrb	r3, [r7, #13]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800f7d8:	7b7b      	ldrb	r3, [r7, #13]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	737b      	strb	r3, [r7, #13]
 800f7de:	e7f2      	b.n	800f7c6 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	691b      	ldr	r3, [r3, #16]
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7f0 fd13 	bl	8000210 <strlen>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	b2da      	uxtb	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	733b      	strb	r3, [r7, #12]
 800f7f8:	7b3c      	ldrb	r4, [r7, #12]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	691b      	ldr	r3, [r3, #16]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f0 fd06 	bl	8000210 <strlen>
 800f804:	4603      	mov	r3, r0
 800f806:	429c      	cmp	r4, r3
 800f808:	d20f      	bcs.n	800f82a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	691a      	ldr	r2, [r3, #16]
 800f80e:	7b3b      	ldrb	r3, [r7, #12]
 800f810:	441a      	add	r2, r3
 800f812:	7b3b      	ldrb	r3, [r7, #12]
 800f814:	330a      	adds	r3, #10
 800f816:	7811      	ldrb	r1, [r2, #0]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	4413      	add	r3, r2
 800f81c:	460a      	mov	r2, r1
 800f81e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800f822:	7b3b      	ldrb	r3, [r7, #12]
 800f824:	3301      	adds	r3, #1
 800f826:	733b      	strb	r3, [r7, #12]
 800f828:	e7e6      	b.n	800f7f8 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800f82a:	7b3b      	ldrb	r3, [r7, #12]
 800f82c:	2b0f      	cmp	r3, #15
 800f82e:	d80a      	bhi.n	800f846 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800f830:	7b3b      	ldrb	r3, [r7, #12]
 800f832:	330a      	adds	r3, #10
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	4413      	add	r3, r2
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800f83e:	7b3b      	ldrb	r3, [r7, #12]
 800f840:	3301      	adds	r3, #1
 800f842:	733b      	strb	r3, [r7, #12]
 800f844:	e7f1      	b.n	800f82a <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3389      	adds	r3, #137	; 0x89
 800f84a:	221a      	movs	r2, #26
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff fc5a 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f854:	bf00      	nop
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd90      	pop	{r4, r7, pc}

0800f85c <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	220e      	movs	r2, #14
 800f868:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2204      	movs	r2, #4
 800f870:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2206      	movs	r2, #6
 800f878:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	7f1a      	ldrb	r2, [r3, #28]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	7f5a      	ldrb	r2, [r3, #29]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	7f9a      	ldrb	r2, [r3, #30]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7fda      	ldrb	r2, [r3, #31]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3389      	adds	r3, #137	; 0x89
 800f8c0:	2209      	movs	r2, #9
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff fc1f 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f8ca:	bf00      	nop
 800f8cc:	3708      	adds	r7, #8
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b082      	sub	sp, #8
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	220c      	movs	r2, #12
 800f8de:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2204      	movs	r2, #4
 800f8e6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2206      	movs	r2, #6
 800f8ee:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	7f1a      	ldrb	r2, [r3, #28]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	7f5a      	ldrb	r2, [r3, #29]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	7f9a      	ldrb	r2, [r3, #30]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	7fda      	ldrb	r2, [r3, #31]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	3389      	adds	r3, #137	; 0x89
 800f936:	2209      	movs	r2, #9
 800f938:	4619      	mov	r1, r3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f7ff fbe4 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	222b      	movs	r2, #43	; 0x2b
 800f954:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2204      	movs	r2, #4
 800f95c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2209      	movs	r2, #9
 800f964:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	7f1a      	ldrb	r2, [r3, #28]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	7f5a      	ldrb	r2, [r3, #29]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	7f9a      	ldrb	r2, [r3, #30]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	7fda      	ldrb	r2, [r3, #31]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2203      	movs	r2, #3
 800f9ac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	3389      	adds	r3, #137	; 0x89
 800f9c4:	220c      	movs	r2, #12
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f7ff fb9d 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800f9ce:	bf00      	nop
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}

0800f9d6 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b082      	sub	sp, #8
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	222c      	movs	r2, #44	; 0x2c
 800f9e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2204      	movs	r2, #4
 800f9ea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2206      	movs	r2, #6
 800f9f2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	7f1a      	ldrb	r2, [r3, #28]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	7f5a      	ldrb	r2, [r3, #29]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	7f9a      	ldrb	r2, [r3, #30]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	7fda      	ldrb	r2, [r3, #31]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f893 2020 	ldrb.w	r2, [r3, #32]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3389      	adds	r3, #137	; 0x89
 800fa3a:	2209      	movs	r2, #9
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f7ff fb62 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800fa44:	bf00      	nop
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2211      	movs	r2, #17
 800fa58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2204      	movs	r2, #4
 800fa60:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2202      	movs	r2, #2
 800fa68:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	8b5b      	ldrh	r3, [r3, #26]
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	8b5b      	ldrh	r3, [r3, #26]
 800fa7c:	121b      	asrs	r3, r3, #8
 800fa7e:	b2db      	uxtb	r3, r3
 800fa80:	f003 030f 	and.w	r3, r3, #15
 800fa84:	b2da      	uxtb	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	3389      	adds	r3, #137	; 0x89
 800fa90:	2205      	movs	r2, #5
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7ff fb37 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800fa9a:	bf00      	nop
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b082      	sub	sp, #8
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	460b      	mov	r3, r1
 800faac:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800fab4:	f023 0304 	bic.w	r3, r3, #4
 800fab8:	b29a      	uxth	r2, r3
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2206      	movs	r2, #6
 800fac4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2204      	movs	r2, #4
 800facc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2203      	movs	r2, #3
 800fad4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800fad8:	887b      	ldrh	r3, [r7, #2]
 800fada:	b2da      	uxtb	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800fae2:	887b      	ldrh	r3, [r7, #2]
 800fae4:	121b      	asrs	r3, r3, #8
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	f003 030f 	and.w	r3, r3, #15
 800faec:	b2da      	uxtb	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2213      	movs	r2, #19
 800faf8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	3389      	adds	r3, #137	; 0x89
 800fb00:	2206      	movs	r2, #6
 800fb02:	4619      	mov	r1, r3
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7ff faff 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800fb0a:	bf00      	nop
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b082      	sub	sp, #8
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2224      	movs	r2, #36	; 0x24
 800fb1e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	220c      	movs	r2, #12
 800fb26:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2203      	movs	r2, #3
 800fb2e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2204      	movs	r2, #4
 800fb36:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2208      	movs	r2, #8
 800fb3e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3389      	adds	r3, #137	; 0x89
 800fb4e:	2206      	movs	r2, #6
 800fb50:	4619      	mov	r1, r3
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7ff fad8 	bl	800f108 <_ZN3BTD11HCI_CommandEPht>
}
 800fb58:	bf00      	nop
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800fb60:	b5b0      	push	{r4, r5, r7, lr}
 800fb62:	b08a      	sub	sp, #40	; 0x28
 800fb64:	af02      	add	r7, sp, #8
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	607a      	str	r2, [r7, #4]
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	817b      	strh	r3, [r7, #10]
 800fb70:	4613      	mov	r3, r2
 800fb72:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800fb74:	466b      	mov	r3, sp
 800fb76:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800fb78:	7a7b      	ldrb	r3, [r7, #9]
 800fb7a:	1ddc      	adds	r4, r3, #7
 800fb7c:	61bc      	str	r4, [r7, #24]
 800fb7e:	4623      	mov	r3, r4
 800fb80:	3301      	adds	r3, #1
 800fb82:	4618      	mov	r0, r3
 800fb84:	f04f 0100 	mov.w	r1, #0
 800fb88:	f04f 0200 	mov.w	r2, #0
 800fb8c:	f04f 0300 	mov.w	r3, #0
 800fb90:	00cb      	lsls	r3, r1, #3
 800fb92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800fb96:	00c2      	lsls	r2, r0, #3
 800fb98:	4623      	mov	r3, r4
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f04f 0100 	mov.w	r1, #0
 800fba2:	f04f 0200 	mov.w	r2, #0
 800fba6:	f04f 0300 	mov.w	r3, #0
 800fbaa:	00cb      	lsls	r3, r1, #3
 800fbac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800fbb0:	00c2      	lsls	r2, r0, #3
 800fbb2:	4623      	mov	r3, r4
 800fbb4:	3301      	adds	r3, #1
 800fbb6:	3307      	adds	r3, #7
 800fbb8:	08db      	lsrs	r3, r3, #3
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	ebad 0d03 	sub.w	sp, sp, r3
 800fbc0:	ab02      	add	r3, sp, #8
 800fbc2:	3300      	adds	r3, #0
 800fbc4:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800fbc6:	897b      	ldrh	r3, [r7, #10]
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800fbce:	897b      	ldrh	r3, [r7, #10]
 800fbd0:	121b      	asrs	r3, r3, #8
 800fbd2:	b25b      	sxtb	r3, r3
 800fbd4:	f003 030f 	and.w	r3, r3, #15
 800fbd8:	b25b      	sxtb	r3, r3
 800fbda:	f043 0320 	orr.w	r3, r3, #32
 800fbde:	b25b      	sxtb	r3, r3
 800fbe0:	b2da      	uxtb	r2, r3
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800fbe6:	7a7b      	ldrb	r3, [r7, #9]
 800fbe8:	3304      	adds	r3, #4
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800fbf0:	7a7b      	ldrb	r3, [r7, #9]
 800fbf2:	3304      	adds	r3, #4
 800fbf4:	121b      	asrs	r3, r3, #8
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	7a7a      	ldrb	r2, [r7, #9]
 800fc00:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800fc02:	7a7b      	ldrb	r3, [r7, #9]
 800fc04:	121b      	asrs	r3, r3, #8
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800fc12:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fc1a:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	83fb      	strh	r3, [r7, #30]
 800fc20:	7a7b      	ldrb	r3, [r7, #9]
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	8bfa      	ldrh	r2, [r7, #30]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d20b      	bcs.n	800fc42 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800fc2a:	8bfb      	ldrh	r3, [r7, #30]
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	441a      	add	r2, r3
 800fc30:	8bfb      	ldrh	r3, [r7, #30]
 800fc32:	3308      	adds	r3, #8
 800fc34:	7811      	ldrb	r1, [r2, #0]
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800fc3a:	8bfb      	ldrh	r3, [r7, #30]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	83fb      	strh	r3, [r7, #30]
 800fc40:	e7ee      	b.n	800fc20 <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800fc52:	7a7b      	ldrb	r3, [r7, #9]
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	3308      	adds	r3, #8
 800fc58:	b29c      	uxth	r4, r3
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	9300      	str	r3, [sp, #0]
 800fc5e:	4623      	mov	r3, r4
 800fc60:	f002 fc34 	bl	80124cc <_ZN3USB11outTransferEhhtPh>
 800fc64:	4603      	mov	r3, r0
 800fc66:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800fc68:	7cfb      	ldrb	r3, [r7, #19]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d002      	beq.n	800fc74 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800fc6e:	2064      	movs	r0, #100	; 0x64
 800fc70:	f7f2 fe68 	bl	8002944 <HAL_Delay>
 800fc74:	46ad      	mov	sp, r5
}
 800fc76:	bf00      	nop
 800fc78:	3720      	adds	r7, #32
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bdb0      	pop	{r4, r5, r7, pc}

0800fc7e <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b086      	sub	sp, #24
 800fc82:	af02      	add	r7, sp, #8
 800fc84:	60f8      	str	r0, [r7, #12]
 800fc86:	607b      	str	r3, [r7, #4]
 800fc88:	460b      	mov	r3, r1
 800fc8a:	817b      	strh	r3, [r7, #10]
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2202      	movs	r2, #2
 800fc94:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	7a7a      	ldrb	r2, [r7, #9]
 800fc9c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2204      	movs	r2, #4
 800fca4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800fcb0:	8b3b      	ldrh	r3, [r7, #24]
 800fcb2:	b2da      	uxtb	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800fcba:	8b3b      	ldrh	r3, [r7, #24]
 800fcbc:	121b      	asrs	r3, r3, #8
 800fcbe:	b2da      	uxtb	r2, r3
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	781a      	ldrb	r2, [r3, #0]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	785a      	ldrb	r2, [r3, #1]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fce0:	8979      	ldrh	r1, [r7, #10]
 800fce2:	2300      	movs	r3, #0
 800fce4:	9301      	str	r3, [sp, #4]
 800fce6:	2301      	movs	r3, #1
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	2308      	movs	r3, #8
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f7ff ff37 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fcf2:	bf00      	nop
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b086      	sub	sp, #24
 800fcfe:	af02      	add	r7, sp, #8
 800fd00:	60f8      	str	r0, [r7, #12]
 800fd02:	607b      	str	r3, [r7, #4]
 800fd04:	460b      	mov	r3, r1
 800fd06:	817b      	strh	r3, [r7, #10]
 800fd08:	4613      	mov	r3, r2
 800fd0a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2203      	movs	r2, #3
 800fd10:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	7a7a      	ldrb	r2, [r7, #9]
 800fd18:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2208      	movs	r2, #8
 800fd20:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	781a      	ldrb	r2, [r3, #0]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	785a      	ldrb	r2, [r3, #1]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	781a      	ldrb	r2, [r3, #0]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	785a      	ldrb	r2, [r3, #1]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	7f3a      	ldrb	r2, [r7, #28]
 800fd58:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fd7a:	8979      	ldrh	r1, [r7, #10]
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9301      	str	r3, [sp, #4]
 800fd80:	2301      	movs	r3, #1
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	230c      	movs	r3, #12
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f7ff feea 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fd8c:	bf00      	nop
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b086      	sub	sp, #24
 800fd98:	af02      	add	r7, sp, #8
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	607b      	str	r3, [r7, #4]
 800fd9e:	460b      	mov	r3, r1
 800fda0:	817b      	strh	r3, [r7, #10]
 800fda2:	4613      	mov	r3, r2
 800fda4:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2204      	movs	r2, #4
 800fdaa:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	7a7a      	ldrb	r2, [r7, #9]
 800fdb2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2208      	movs	r2, #8
 800fdba:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	781a      	ldrb	r2, [r3, #0]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	785a      	ldrb	r2, [r3, #1]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2200      	movs	r2, #0
 800fdde:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2201      	movs	r2, #1
 800fdee:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	22ff      	movs	r2, #255	; 0xff
 800fdfe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	22ff      	movs	r2, #255	; 0xff
 800fe06:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800fe10:	8979      	ldrh	r1, [r7, #10]
 800fe12:	2300      	movs	r3, #0
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	2301      	movs	r3, #1
 800fe18:	9300      	str	r3, [sp, #0]
 800fe1a:	230c      	movs	r3, #12
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f7ff fe9f 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fe22:	bf00      	nop
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b086      	sub	sp, #24
 800fe2e:	af02      	add	r7, sp, #8
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	607b      	str	r3, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	817b      	strh	r3, [r7, #10]
 800fe38:	4613      	mov	r3, r2
 800fe3a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2205      	movs	r2, #5
 800fe40:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	7a7a      	ldrb	r2, [r7, #9]
 800fe48:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	220a      	movs	r2, #10
 800fe50:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	781a      	ldrb	r2, [r3, #0]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	785a      	ldrb	r2, [r3, #1]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	2200      	movs	r2, #0
 800fe84:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2201      	movs	r2, #1
 800fe94:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2202      	movs	r2, #2
 800fe9c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	22a0      	movs	r2, #160	; 0xa0
 800fea4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2202      	movs	r2, #2
 800feac:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f203 1209 	addw	r2, r3, #265	; 0x109
 800feb6:	8979      	ldrh	r1, [r7, #10]
 800feb8:	2300      	movs	r3, #0
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	2301      	movs	r3, #1
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	230e      	movs	r3, #14
 800fec2:	68f8      	ldr	r0, [r7, #12]
 800fec4:	f7ff fe4c 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800fec8:	bf00      	nop
 800feca:	3710      	adds	r7, #16
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af02      	add	r7, sp, #8
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	607b      	str	r3, [r7, #4]
 800feda:	460b      	mov	r3, r1
 800fedc:	817b      	strh	r3, [r7, #10]
 800fede:	4613      	mov	r3, r2
 800fee0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2206      	movs	r2, #6
 800fee6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	7a7a      	ldrb	r2, [r7, #9]
 800feee:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2204      	movs	r2, #4
 800fef6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	2200      	movs	r2, #0
 800fefe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	781a      	ldrb	r2, [r3, #0]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	785a      	ldrb	r2, [r3, #1]
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	781a      	ldrb	r2, [r3, #0]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	785a      	ldrb	r2, [r3, #1]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ff30:	8979      	ldrh	r1, [r7, #10]
 800ff32:	2300      	movs	r3, #0
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	2301      	movs	r3, #1
 800ff38:	9300      	str	r3, [sp, #0]
 800ff3a:	2308      	movs	r3, #8
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f7ff fe0f 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ff42:	bf00      	nop
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b086      	sub	sp, #24
 800ff4e:	af02      	add	r7, sp, #8
 800ff50:	60f8      	str	r0, [r7, #12]
 800ff52:	607b      	str	r3, [r7, #4]
 800ff54:	460b      	mov	r3, r1
 800ff56:	817b      	strh	r3, [r7, #10]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2207      	movs	r2, #7
 800ff60:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	7a7a      	ldrb	r2, [r7, #9]
 800ff68:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	2204      	movs	r2, #4
 800ff70:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2200      	movs	r2, #0
 800ff78:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	781a      	ldrb	r2, [r3, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	785a      	ldrb	r2, [r3, #1]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	781a      	ldrb	r2, [r3, #0]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	785a      	ldrb	r2, [r3, #1]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ffaa:	8979      	ldrh	r1, [r7, #10]
 800ffac:	2300      	movs	r3, #0
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	2308      	movs	r3, #8
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f7ff fdd2 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ffbc:	bf00      	nop
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af02      	add	r7, sp, #8
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	4608      	mov	r0, r1
 800ffce:	4611      	mov	r1, r2
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	807b      	strh	r3, [r7, #2]
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	707b      	strb	r3, [r7, #1]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	220b      	movs	r2, #11
 800ffe2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	787a      	ldrb	r2, [r7, #1]
 800ffea:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2208      	movs	r2, #8
 800fff2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	783a      	ldrb	r2, [r7, #0]
 8010002:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	7c3a      	ldrb	r2, [r7, #16]
 801000a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2200      	movs	r2, #0
 801003a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f203 1209 	addw	r2, r3, #265	; 0x109
 8010044:	8879      	ldrh	r1, [r7, #2]
 8010046:	2300      	movs	r3, #0
 8010048:	9301      	str	r3, [sp, #4]
 801004a:	2301      	movs	r3, #1
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	230c      	movs	r3, #12
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7ff fd85 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8010056:	bf00      	nop
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 801005e:	b580      	push	{r7, lr}
 8010060:	b08e      	sub	sp, #56	; 0x38
 8010062:	af08      	add	r7, sp, #32
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 8010068:	2301      	movs	r3, #1
 801006a:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 801006c:	2300      	movs	r3, #0
 801006e:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 8010070:	2300      	movs	r3, #0
 8010072:	75fb      	strb	r3, [r7, #23]
 8010074:	7dfb      	ldrb	r3, [r7, #23]
 8010076:	2b05      	cmp	r3, #5
 8010078:	d811      	bhi.n	801009e <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	f1c3 0305 	rsb	r3, r3, #5
 8010080:	461a      	mov	r2, r3
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	441a      	add	r2, r3
 8010086:	7dfb      	ldrb	r3, [r7, #23]
 8010088:	3302      	adds	r3, #2
 801008a:	7812      	ldrb	r2, [r2, #0]
 801008c:	f107 0118 	add.w	r1, r7, #24
 8010090:	440b      	add	r3, r1
 8010092:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	3301      	adds	r3, #1
 801009a:	75fb      	strb	r3, [r7, #23]
 801009c:	e7ea      	b.n	8010074 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 80100ae:	2300      	movs	r3, #0
 80100b0:	9307      	str	r3, [sp, #28]
 80100b2:	f107 030c 	add.w	r3, r7, #12
 80100b6:	9306      	str	r3, [sp, #24]
 80100b8:	2308      	movs	r3, #8
 80100ba:	9305      	str	r3, [sp, #20]
 80100bc:	2308      	movs	r3, #8
 80100be:	9304      	str	r3, [sp, #16]
 80100c0:	2300      	movs	r3, #0
 80100c2:	9303      	str	r3, [sp, #12]
 80100c4:	2303      	movs	r3, #3
 80100c6:	9302      	str	r3, [sp, #8]
 80100c8:	23f5      	movs	r3, #245	; 0xf5
 80100ca:	9301      	str	r3, [sp, #4]
 80100cc:	2309      	movs	r3, #9
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	2321      	movs	r3, #33	; 0x21
 80100d2:	f002 f81c 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 80100d6:	bf00      	nop
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 80100de:	b580      	push	{r7, lr}
 80100e0:	b08e      	sub	sp, #56	; 0x38
 80100e2:	af08      	add	r7, sp, #32
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 80100e8:	2305      	movs	r3, #5
 80100ea:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 80100ec:	2310      	movs	r3, #16
 80100ee:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 80100f0:	2301      	movs	r3, #1
 80100f2:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 80100f4:	2302      	movs	r3, #2
 80100f6:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 80100f8:	2312      	movs	r3, #18
 80100fa:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 80100fc:	2300      	movs	r3, #0
 80100fe:	75fb      	strb	r3, [r7, #23]
 8010100:	7dfb      	ldrb	r3, [r7, #23]
 8010102:	2b05      	cmp	r3, #5
 8010104:	d80e      	bhi.n	8010124 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 8010106:	7dfb      	ldrb	r3, [r7, #23]
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	441a      	add	r2, r3
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	3301      	adds	r3, #1
 8010110:	7812      	ldrb	r2, [r2, #0]
 8010112:	f107 0118 	add.w	r1, r7, #24
 8010116:	440b      	add	r3, r1
 8010118:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 801011c:	7dfb      	ldrb	r3, [r7, #23]
 801011e:	3301      	adds	r3, #1
 8010120:	75fb      	strb	r3, [r7, #23]
 8010122:	e7ed      	b.n	8010100 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8010134:	2300      	movs	r3, #0
 8010136:	9307      	str	r3, [sp, #28]
 8010138:	f107 030c 	add.w	r3, r7, #12
 801013c:	9306      	str	r3, [sp, #24]
 801013e:	230b      	movs	r3, #11
 8010140:	9305      	str	r3, [sp, #20]
 8010142:	230b      	movs	r3, #11
 8010144:	9304      	str	r3, [sp, #16]
 8010146:	2300      	movs	r3, #0
 8010148:	9303      	str	r3, [sp, #12]
 801014a:	2303      	movs	r3, #3
 801014c:	9302      	str	r3, [sp, #8]
 801014e:	2305      	movs	r3, #5
 8010150:	9301      	str	r3, [sp, #4]
 8010152:	2309      	movs	r3, #9
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	2321      	movs	r3, #33	; 0x21
 8010158:	f001 ffd9 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 801015c:	bf00      	nop
 801015e:	3718      	adds	r7, #24
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 8010164:	b480      	push	{r7}
 8010166:	b083      	sub	sp, #12
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	4a04      	ldr	r2, [pc, #16]	; (8010180 <_ZN13USBReadParserC1Ev+0x1c>)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	601a      	str	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4618      	mov	r0, r3
 8010176:	370c      	adds	r7, #12
 8010178:	46bd      	mov	sp, r7
 801017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017e:	4770      	bx	lr
 8010180:	08014c14 	.word	0x08014c14

08010184 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4618      	mov	r0, r3
 8010192:	f7ff ffe7 	bl	8010164 <_ZN13USBReadParserC1Ev>
 8010196:	4a21      	ldr	r2, [pc, #132]	; (801021c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	683a      	ldr	r2, [r7, #0]
 80101a0:	605a      	str	r2, [r3, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	3308      	adds	r3, #8
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fd fb65 	bl	800d876 <_ZN16MultiValueBufferC1Ev>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	3310      	adds	r3, #16
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fd fb77 	bl	800d8a4 <_ZN20MultiByteValueParserC1Ev>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	3318      	adds	r3, #24
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fd fb9e 	bl	800d8fc <_ZN11ByteSkipperC1Ev>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f103 0220 	add.w	r2, r3, #32
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f103 0210 	add.w	r2, r3, #16
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	3308      	adds	r3, #8
 80101f6:	4619      	mov	r1, r3
 80101f8:	4610      	mov	r0, r2
 80101fa:	f7fd fb67 	bl	800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f103 0218 	add.w	r2, r3, #24
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	3308      	adds	r3, #8
 8010208:	4619      	mov	r1, r3
 801020a:	4610      	mov	r0, r2
 801020c:	f7fd fb8a 	bl	800d924 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4618      	mov	r0, r3
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	08014bbc 	.word	0x08014bbc

08010220 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
UseOr(false) {
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f7ff ff99 	bl	8010164 <_ZN13USBReadParserC1Ev>
 8010232:	4a21      	ldr	r2, [pc, #132]	; (80102b8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	601a      	str	r2, [r3, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	605a      	str	r2, [r3, #4]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	3308      	adds	r3, #8
 8010242:	4618      	mov	r0, r3
 8010244:	f7fd fb17 	bl	800d876 <_ZN16MultiValueBufferC1Ev>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3310      	adds	r3, #16
 801024c:	4618      	mov	r0, r3
 801024e:	f7fd fb29 	bl	800d8a4 <_ZN20MultiByteValueParserC1Ev>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	3318      	adds	r3, #24
 8010256:	4618      	mov	r0, r3
 8010258:	f7fd fb50 	bl	800d8fc <_ZN11ByteSkipperC1Ev>
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2200      	movs	r2, #0
 8010268:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f103 0220 	add.w	r2, r3, #32
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f103 0210 	add.w	r2, r3, #16
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	3308      	adds	r3, #8
 8010292:	4619      	mov	r1, r3
 8010294:	4610      	mov	r0, r2
 8010296:	f7fd fb19 	bl	800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f103 0218 	add.w	r2, r3, #24
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	3308      	adds	r3, #8
 80102a4:	4619      	mov	r1, r3
 80102a6:	4610      	mov	r0, r2
 80102a8:	f7fd fb3c 	bl	800d924 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	08014bb0 	.word	0x08014bb0

080102bc <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 80102bc:	b580      	push	{r7, lr}
 80102be:	b086      	sub	sp, #24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	607a      	str	r2, [r7, #4]
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	460b      	mov	r3, r1
 80102ca:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 80102cc:	897b      	ldrh	r3, [r7, #10]
 80102ce:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	613b      	str	r3, [r7, #16]

        while(cntdn)
 80102d4:	8afb      	ldrh	r3, [r7, #22]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00f      	beq.n	80102fa <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 80102da:	f107 0216 	add.w	r2, r7, #22
 80102de:	f107 0310 	add.w	r3, r7, #16
 80102e2:	4619      	mov	r1, r3
 80102e4:	68f8      	ldr	r0, [r7, #12]
 80102e6:	f000 f82d 	bl	8010344 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 80102ea:	4603      	mov	r3, r0
 80102ec:	f083 0301 	eor.w	r3, r3, #1
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d100      	bne.n	80102f8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 80102f6:	e7ed      	b.n	80102d4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 80102f8:	bf00      	nop
}
 80102fa:	3718      	adds	r7, #24
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	607a      	str	r2, [r7, #4]
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	460b      	mov	r3, r1
 801030e:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 8010310:	897b      	ldrh	r3, [r7, #10]
 8010312:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	613b      	str	r3, [r7, #16]
        while(cntdn)
 8010318:	8afb      	ldrh	r3, [r7, #22]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00f      	beq.n	801033e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 801031e:	f107 0216 	add.w	r2, r7, #22
 8010322:	f107 0310 	add.w	r3, r7, #16
 8010326:	4619      	mov	r1, r3
 8010328:	68f8      	ldr	r0, [r7, #12]
 801032a:	f000 f981 	bl	8010630 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 801032e:	4603      	mov	r3, r0
 8010330:	f083 0301 	eor.w	r3, r3, #1
 8010334:	b2db      	uxtb	r3, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	d100      	bne.n	801033c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 801033a:	e7ed      	b.n	8010318 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 801033c:	bf00      	nop
}
 801033e:	3718      	adds	r7, #24
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010346:	b089      	sub	sp, #36	; 0x24
 8010348:	af02      	add	r7, sp, #8
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	3320      	adds	r3, #32
 8010354:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	3320      	adds	r3, #32
 801035a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010362:	2b04      	cmp	r3, #4
 8010364:	f200 815e 	bhi.w	8010624 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010368:	a201      	add	r2, pc, #4	; (adr r2, 8010370 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 801036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801036e:	bf00      	nop
 8010370:	08010385 	.word	0x08010385
 8010374:	080103a5 	.word	0x080103a5
 8010378:	080103e7 	.word	0x080103e7
 801037c:	080103fb 	.word	0x080103fb
 8010380:	080104bf 	.word	0x080104bf
                case 0:
                        theBuffer.valueSize = 2;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2202      	movs	r2, #2
 8010388:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f103 0210 	add.w	r2, r3, #16
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	3308      	adds	r3, #8
 8010394:	4619      	mov	r1, r3
 8010396:	4610      	mov	r0, r2
 8010398:	f7fd fa98 	bl	800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	3310      	adds	r3, #16
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	68b9      	ldr	r1, [r7, #8]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f003 fa49 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80103b2:	4603      	mov	r3, r0
 80103b4:	f083 0301 	eor.w	r3, r3, #1
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d001      	beq.n	80103c2 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80103be:	2300      	movs	r3, #0
 80103c0:	e131      	b.n	8010626 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80103c8:	781a      	ldrb	r2, [r3, #0]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80103d6:	785a      	ldrb	r2, [r3, #1]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2202      	movs	r2, #2
 80103e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	3320      	adds	r3, #32
 80103ea:	1c9a      	adds	r2, r3, #2
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2203      	movs	r2, #3
 80103f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010400:	3b02      	subs	r3, #2
 8010402:	2b1f      	cmp	r3, #31
 8010404:	d847      	bhi.n	8010496 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 8010406:	a201      	add	r2, pc, #4	; (adr r2, 801040c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 8010408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801040c:	08010497 	.word	0x08010497
 8010410:	08010497 	.word	0x08010497
 8010414:	0801048d 	.word	0x0801048d
 8010418:	08010497 	.word	0x08010497
 801041c:	08010497 	.word	0x08010497
 8010420:	08010497 	.word	0x08010497
 8010424:	08010497 	.word	0x08010497
 8010428:	08010497 	.word	0x08010497
 801042c:	08010497 	.word	0x08010497
 8010430:	08010497 	.word	0x08010497
 8010434:	08010497 	.word	0x08010497
 8010438:	08010497 	.word	0x08010497
 801043c:	08010497 	.word	0x08010497
 8010440:	08010497 	.word	0x08010497
 8010444:	08010497 	.word	0x08010497
 8010448:	08010497 	.word	0x08010497
 801044c:	08010497 	.word	0x08010497
 8010450:	08010497 	.word	0x08010497
 8010454:	08010497 	.word	0x08010497
 8010458:	08010497 	.word	0x08010497
 801045c:	08010497 	.word	0x08010497
 8010460:	08010497 	.word	0x08010497
 8010464:	08010497 	.word	0x08010497
 8010468:	08010497 	.word	0x08010497
 801046c:	08010497 	.word	0x08010497
 8010470:	08010497 	.word	0x08010497
 8010474:	08010497 	.word	0x08010497
 8010478:	08010497 	.word	0x08010497
 801047c:	08010497 	.word	0x08010497
 8010480:	08010497 	.word	0x08010497
 8010484:	08010497 	.word	0x08010497
 8010488:	08010497 	.word	0x08010497
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2200      	movs	r2, #0
 8010490:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010494:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801049c:	3b02      	subs	r3, #2
 801049e:	b2da      	uxtb	r2, r3
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f103 0210 	add.w	r2, r3, #16
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	3308      	adds	r3, #8
 80104ae:	4619      	mov	r1, r3
 80104b0:	4610      	mov	r0, r2
 80104b2:	f7fd fa0b 	bl	800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2204      	movs	r2, #4
 80104ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104c4:	2b05      	cmp	r3, #5
 80104c6:	d055      	beq.n	8010574 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80104c8:	2b05      	cmp	r3, #5
 80104ca:	f300 8085 	bgt.w	80105d8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d002      	beq.n	80104d8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80104d2:	2b04      	cmp	r3, #4
 80104d4:	d015      	beq.n	8010502 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80104d6:	e07f      	b.n	80105d8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	3310      	adds	r3, #16
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	68b9      	ldr	r1, [r7, #8]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f003 f9af 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80104e6:	4603      	mov	r3, r0
 80104e8:	f083 0301 	eor.w	r3, r3, #1
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d001      	beq.n	80104f6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80104f2:	2300      	movs	r3, #0
 80104f4:	e097      	b.n	8010626 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	795a      	ldrb	r2, [r3, #5]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 8010500:	e086      	b.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	3310      	adds	r3, #16
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	68b9      	ldr	r1, [r7, #8]
 801050a:	4618      	mov	r0, r3
 801050c:	f003 f99a 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010510:	4603      	mov	r3, r0
 8010512:	f083 0301 	eor.w	r3, r3, #1
 8010516:	b2db      	uxtb	r3, r3
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 801051c:	2300      	movs	r3, #0
 801051e:	e082      	b.n	8010626 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	795b      	ldrb	r3, [r3, #5]
 8010524:	2be0      	cmp	r3, #224	; 0xe0
 8010526:	d16c      	bne.n	8010602 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	799b      	ldrb	r3, [r3, #6]
 801052c:	2b01      	cmp	r3, #1
 801052e:	d16a      	bne.n	8010606 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010536:	2b00      	cmp	r3, #0
 8010538:	d004      	beq.n	8010544 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	79db      	ldrb	r3, [r3, #7]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d104      	bne.n	801054c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 8010542:	e065      	b.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	79db      	ldrb	r3, [r3, #7]
 8010548:	2b01      	cmp	r3, #1
 801054a:	d15e      	bne.n	801060a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2201      	movs	r2, #1
 8010550:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	789a      	ldrb	r2, [r3, #2]
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	78da      	ldrb	r2, [r3, #3]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	79da      	ldrb	r2, [r3, #7]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 8010572:	e04d      	b.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	3310      	adds	r3, #16
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	68b9      	ldr	r1, [r7, #8]
 801057c:	4618      	mov	r0, r3
 801057e:	f003 f961 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 8010582:	4603      	mov	r3, r0
 8010584:	f083 0301 	eor.w	r3, r3, #1
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d001      	beq.n	8010592 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801058e:	2300      	movs	r3, #0
 8010590:	e049      	b.n	8010626 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010598:	2b00      	cmp	r3, #0
 801059a:	d038      	beq.n	801060e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d034      	beq.n	801060e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	6858      	ldr	r0, [r3, #4]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	681c      	ldr	r4, [r3, #0]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	3220      	adds	r2, #32
 80105cc:	9201      	str	r2, [sp, #4]
 80105ce:	9300      	str	r3, [sp, #0]
 80105d0:	4633      	mov	r3, r6
 80105d2:	462a      	mov	r2, r5
 80105d4:	47a0      	blx	r4
                                        break;
 80105d6:	e01a      	b.n	801060e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f103 0018 	add.w	r0, r3, #24
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	3b02      	subs	r3, #2
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	687a      	ldr	r2, [r7, #4]
 80105ec:	68b9      	ldr	r1, [r7, #8]
 80105ee:	f7fd f9ac 	bl	800d94a <_ZN11ByteSkipper4SkipEPPhPtt>
 80105f2:	4603      	mov	r3, r0
 80105f4:	f083 0301 	eor.w	r3, r3, #1
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d008      	beq.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80105fe:	2300      	movs	r3, #0
 8010600:	e011      	b.n	8010626 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 8010602:	bf00      	nop
 8010604:	e004      	b.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 8010606:	bf00      	nop
 8010608:	e002      	b.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 801060a:	bf00      	nop
 801060c:	e000      	b.n	8010610 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 801060e:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f103 0220 	add.w	r2, r3, #32
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2200      	movs	r2, #0
 8010620:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 8010624:	2301      	movs	r3, #1
}
 8010626:	4618      	mov	r0, r3
 8010628:	371c      	adds	r7, #28
 801062a:	46bd      	mov	sp, r7
 801062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801062e:	bf00      	nop

08010630 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 8010630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010632:	b089      	sub	sp, #36	; 0x24
 8010634:	af02      	add	r7, sp, #8
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	3320      	adds	r3, #32
 8010640:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	3320      	adds	r3, #32
 8010646:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801064e:	2b04      	cmp	r3, #4
 8010650:	f200 815e 	bhi.w	8010910 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 8010654:	a201      	add	r2, pc, #4	; (adr r2, 801065c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 8010656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801065a:	bf00      	nop
 801065c:	08010671 	.word	0x08010671
 8010660:	08010691 	.word	0x08010691
 8010664:	080106d3 	.word	0x080106d3
 8010668:	080106e7 	.word	0x080106e7
 801066c:	080107ab 	.word	0x080107ab
                        theBuffer.valueSize = 2;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2202      	movs	r2, #2
 8010674:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	f103 0210 	add.w	r2, r3, #16
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	3308      	adds	r3, #8
 8010680:	4619      	mov	r1, r3
 8010682:	4610      	mov	r0, r2
 8010684:	f7fd f922 	bl	800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2201      	movs	r2, #1
 801068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	3310      	adds	r3, #16
 8010694:	687a      	ldr	r2, [r7, #4]
 8010696:	68b9      	ldr	r1, [r7, #8]
 8010698:	4618      	mov	r0, r3
 801069a:	f003 f8d3 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801069e:	4603      	mov	r3, r0
 80106a0:	f083 0301 	eor.w	r3, r3, #1
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d001      	beq.n	80106ae <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 80106aa:	2300      	movs	r3, #0
 80106ac:	e131      	b.n	8010912 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80106b4:	781a      	ldrb	r2, [r3, #0]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80106c2:	785a      	ldrb	r2, [r3, #1]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2202      	movs	r2, #2
 80106ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	3320      	adds	r3, #32
 80106d6:	1c9a      	adds	r2, r3, #2
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2203      	movs	r2, #3
 80106e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80106ec:	3b02      	subs	r3, #2
 80106ee:	2b1f      	cmp	r3, #31
 80106f0:	d847      	bhi.n	8010782 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 80106f2:	a201      	add	r2, pc, #4	; (adr r2, 80106f8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 80106f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f8:	08010783 	.word	0x08010783
 80106fc:	08010783 	.word	0x08010783
 8010700:	08010779 	.word	0x08010779
 8010704:	08010783 	.word	0x08010783
 8010708:	08010783 	.word	0x08010783
 801070c:	08010783 	.word	0x08010783
 8010710:	08010783 	.word	0x08010783
 8010714:	08010783 	.word	0x08010783
 8010718:	08010783 	.word	0x08010783
 801071c:	08010783 	.word	0x08010783
 8010720:	08010783 	.word	0x08010783
 8010724:	08010783 	.word	0x08010783
 8010728:	08010783 	.word	0x08010783
 801072c:	08010783 	.word	0x08010783
 8010730:	08010783 	.word	0x08010783
 8010734:	08010783 	.word	0x08010783
 8010738:	08010783 	.word	0x08010783
 801073c:	08010783 	.word	0x08010783
 8010740:	08010783 	.word	0x08010783
 8010744:	08010783 	.word	0x08010783
 8010748:	08010783 	.word	0x08010783
 801074c:	08010783 	.word	0x08010783
 8010750:	08010783 	.word	0x08010783
 8010754:	08010783 	.word	0x08010783
 8010758:	08010783 	.word	0x08010783
 801075c:	08010783 	.word	0x08010783
 8010760:	08010783 	.word	0x08010783
 8010764:	08010783 	.word	0x08010783
 8010768:	08010783 	.word	0x08010783
 801076c:	08010783 	.word	0x08010783
 8010770:	08010783 	.word	0x08010783
 8010774:	08010783 	.word	0x08010783
                                        isGoodInterface = false;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2200      	movs	r2, #0
 801077c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 8010780:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010788:	3b02      	subs	r3, #2
 801078a:	b2da      	uxtb	r2, r3
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f103 0210 	add.w	r2, r3, #16
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	3308      	adds	r3, #8
 801079a:	4619      	mov	r1, r3
 801079c:	4610      	mov	r0, r2
 801079e:	f7fd f895 	bl	800d8cc <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2204      	movs	r2, #4
 80107a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80107b0:	2b05      	cmp	r3, #5
 80107b2:	d055      	beq.n	8010860 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 80107b4:	2b05      	cmp	r3, #5
 80107b6:	f300 8085 	bgt.w	80108c4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d002      	beq.n	80107c4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 80107be:	2b04      	cmp	r3, #4
 80107c0:	d015      	beq.n	80107ee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 80107c2:	e07f      	b.n	80108c4 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3310      	adds	r3, #16
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	68b9      	ldr	r1, [r7, #8]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f003 f839 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80107d2:	4603      	mov	r3, r0
 80107d4:	f083 0301 	eor.w	r3, r3, #1
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 80107de:	2300      	movs	r3, #0
 80107e0:	e097      	b.n	8010912 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	795a      	ldrb	r2, [r3, #5]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 80107ec:	e086      	b.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	3310      	adds	r3, #16
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	68b9      	ldr	r1, [r7, #8]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f003 f824 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 80107fc:	4603      	mov	r3, r0
 80107fe:	f083 0301 	eor.w	r3, r3, #1
 8010802:	b2db      	uxtb	r3, r3
 8010804:	2b00      	cmp	r3, #0
 8010806:	d001      	beq.n	801080c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 8010808:	2300      	movs	r3, #0
 801080a:	e082      	b.n	8010912 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	795b      	ldrb	r3, [r3, #5]
 8010810:	2bff      	cmp	r3, #255	; 0xff
 8010812:	d16c      	bne.n	80108ee <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	799b      	ldrb	r3, [r3, #6]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d16a      	bne.n	80108f2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010822:	2b00      	cmp	r3, #0
 8010824:	d004      	beq.n	8010830 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	79db      	ldrb	r3, [r3, #7]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d104      	bne.n	8010838 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 801082e:	e065      	b.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	79db      	ldrb	r3, [r3, #7]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d15e      	bne.n	80108f6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2201      	movs	r2, #1
 801083c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	789a      	ldrb	r2, [r3, #2]
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	78da      	ldrb	r2, [r3, #3]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	79da      	ldrb	r2, [r3, #7]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 801085e:	e04d      	b.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	3310      	adds	r3, #16
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	68b9      	ldr	r1, [r7, #8]
 8010868:	4618      	mov	r0, r3
 801086a:	f002 ffeb 	bl	8013844 <_ZN20MultiByteValueParser5ParseEPPhPt>
 801086e:	4603      	mov	r3, r0
 8010870:	f083 0301 	eor.w	r3, r3, #1
 8010874:	b2db      	uxtb	r3, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	d001      	beq.n	801087e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 801087a:	2300      	movs	r3, #0
 801087c:	e049      	b.n	8010912 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010884:	2b00      	cmp	r3, #0
 8010886:	d038      	beq.n	80108fa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d034      	beq.n	80108fa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6858      	ldr	r0, [r3, #4]
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	681c      	ldr	r4, [r3, #0]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	3220      	adds	r2, #32
 80108b8:	9201      	str	r2, [sp, #4]
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	4633      	mov	r3, r6
 80108be:	462a      	mov	r2, r5
 80108c0:	47a0      	blx	r4
                                        break;
 80108c2:	e01a      	b.n	80108fa <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f103 0018 	add.w	r0, r3, #24
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	3b02      	subs	r3, #2
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	68b9      	ldr	r1, [r7, #8]
 80108da:	f7fd f836 	bl	800d94a <_ZN11ByteSkipper4SkipEPPhPtt>
 80108de:	4603      	mov	r3, r0
 80108e0:	f083 0301 	eor.w	r3, r3, #1
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d008      	beq.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 80108ea:	2300      	movs	r3, #0
 80108ec:	e011      	b.n	8010912 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 80108ee:	bf00      	nop
 80108f0:	e004      	b.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 80108f2:	bf00      	nop
 80108f4:	e002      	b.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 80108f6:	bf00      	nop
 80108f8:	e000      	b.n	80108fc <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 80108fa:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f103 0220 	add.w	r2, r3, #32
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2200      	movs	r2, #0
 801090c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 8010910:	2301      	movs	r3, #1
}
 8010912:	4618      	mov	r0, r3
 8010914:	371c      	adds	r7, #28
 8010916:	46bd      	mov	sp, r7
 8010918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801091a:	bf00      	nop

0801091c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 801091c:	b480      	push	{r7}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010926:	2300      	movs	r3, #0
 8010928:	73fb      	strb	r3, [r7, #15]
 801092a:	7bfb      	ldrb	r3, [r7, #15]
 801092c:	2b03      	cmp	r3, #3
 801092e:	d815      	bhi.n	801095c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 8010930:	7bfb      	ldrb	r3, [r7, #15]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	3318      	adds	r3, #24
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4413      	add	r3, r2
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d109      	bne.n	8010954 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	687a      	ldr	r2, [r7, #4]
 8010944:	3318      	adds	r3, #24
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	4413      	add	r3, r2
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 801094e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010952:	e005      	b.n	8010960 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 8010954:	7bfb      	ldrb	r3, [r7, #15]
 8010956:	3301      	adds	r3, #1
 8010958:	73fb      	strb	r3, [r7, #15]
 801095a:	e7e6      	b.n	801092a <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 801095c:	f04f 33ff 	mov.w	r3, #4294967295
        };
 8010960:	4618      	mov	r0, r3
 8010962:	3714      	adds	r7, #20
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
 8010976:	4a0a      	ldr	r2, [pc, #40]	; (80109a0 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	601a      	str	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	683a      	ldr	r2, [r7, #0]
 8010980:	609a      	str	r2, [r3, #8]
                if(pBtd)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	689b      	ldr	r3, [r3, #8]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d005      	beq.n	8010996 <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	689b      	ldr	r3, [r3, #8]
 801098e:	6879      	ldr	r1, [r7, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	f7ff ffc3 	bl	801091c <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	08014c78 	.word	0x08014c78

080109a4 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	4613      	mov	r3, r2
 80109b0:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	461a      	mov	r2, r3
 80109b8:	88fb      	ldrh	r3, [r7, #6]
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	429a      	cmp	r2, r3
 80109be:	d10b      	bne.n	80109d8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	3301      	adds	r3, #1
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	461a      	mov	r2, r3
 80109c8:	88fb      	ldrh	r3, [r7, #6]
 80109ca:	121b      	asrs	r3, r3, #8
 80109cc:	f043 0320 	orr.w	r3, r3, #32
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d101      	bne.n	80109d8 <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 80109d4:	2301      	movs	r3, #1
 80109d6:	e000      	b.n	80109da <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 80109d8:	2300      	movs	r3, #0
        }
 80109da:	4618      	mov	r0, r3
 80109dc:	3714      	adds	r7, #20
 80109de:	46bd      	mov	sp, r7
 80109e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e4:	4770      	bx	lr

080109e6 <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 80109e6:	b480      	push	{r7}
 80109e8:	b085      	sub	sp, #20
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	60f8      	str	r0, [r7, #12]
 80109ee:	460b      	mov	r3, r1
 80109f0:	607a      	str	r2, [r7, #4]
 80109f2:	72fb      	strb	r3, [r7, #11]
                return;
 80109f4:	bf00      	nop
        };
 80109f6:	3714      	adds	r7, #20
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr

08010a00 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 8010a00:	b480      	push	{r7}
 8010a02:	b083      	sub	sp, #12
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
                return;
 8010a08:	bf00      	nop
        };
 8010a0a:	370c      	adds	r7, #12
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a12:	4770      	bx	lr

08010a14 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 8010a14:	b480      	push	{r7}
 8010a16:	b083      	sub	sp, #12
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
                return;
 8010a1c:	bf00      	nop
        }
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	603b      	str	r3, [r7, #0]
 8010a34:	4613      	mov	r3, r2
 8010a36:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	68b9      	ldr	r1, [r7, #8]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7ff ff95 	bl	801096c <_ZN16BluetoothServiceC1EP3BTD>
 8010a42:	4a1f      	ldr	r2, [pc, #124]	; (8010ac0 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010a50:	2300      	movs	r3, #0
 8010a52:	75fb      	strb	r3, [r7, #23]
 8010a54:	7dfb      	ldrb	r3, [r7, #23]
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d809      	bhi.n	8010a6e <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 8010a5a:	7dfa      	ldrb	r2, [r7, #23]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3208      	adds	r2, #8
 8010a60:	2100      	movs	r1, #0
 8010a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 8010a66:	7dfb      	ldrb	r3, [r7, #23]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	75fb      	strb	r3, [r7, #23]
 8010a6c:	e7f2      	b.n	8010a54 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	689b      	ldr	r3, [r3, #8]
 8010a72:	79fa      	ldrb	r2, [r7, #7]
 8010a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	689b      	ldr	r3, [r3, #8]
 8010a7c:	683a      	ldr	r2, [r7, #0]
 8010a7e:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2250      	movs	r2, #80	; 0x50
 8010a84:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2270      	movs	r2, #112	; 0x70
 8010a94:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2271      	movs	r2, #113	; 0x71
 8010aa4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f000 f807 	bl	8010ac4 <_ZN5BTHID5ResetEv>
}
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3718      	adds	r7, #24
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}
 8010ac0:	08014c4c 	.word	0x08014c4c

08010ac4 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
        connected = false;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	220a      	movs	r2, #10
 8010aec:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3320      	adds	r3, #32
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	4798      	blx	r3
}
 8010b02:	bf00      	nop
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 8010b0a:	b590      	push	{r4, r7, lr}
 8010b0c:	b085      	sub	sp, #20
 8010b0e:	af02      	add	r7, sp, #8
 8010b10:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d014      	beq.n	8010b46 <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6898      	ldr	r0, [r3, #8]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	8999      	ldrh	r1, [r3, #12]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	7d1b      	ldrb	r3, [r3, #20]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	b2da      	uxtb	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	751a      	strb	r2, [r3, #20]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	7d1a      	ldrb	r2, [r3, #20]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f103 041b 	add.w	r4, r3, #27
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	336f      	adds	r3, #111	; 0x6f
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	4623      	mov	r3, r4
 8010b42:	f7ff f9c5 	bl	800fed0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6898      	ldr	r0, [r3, #8]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	8999      	ldrh	r1, [r3, #12]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	7d1b      	ldrb	r3, [r3, #20]
 8010b52:	3301      	adds	r3, #1
 8010b54:	b2da      	uxtb	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	751a      	strb	r2, [r3, #20]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	7d1a      	ldrb	r2, [r3, #20]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f103 0418 	add.w	r4, r3, #24
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	336d      	adds	r3, #109	; 0x6d
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	4623      	mov	r3, r4
 8010b6c:	f7ff f9b0 	bl	800fed0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	3308      	adds	r3, #8
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	220e      	movs	r2, #14
 8010b80:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2209      	movs	r2, #9
 8010b86:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 8010b8a:	bf00      	nop
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd90      	pop	{r4, r7, pc}

08010b92 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 8010b92:	b590      	push	{r4, r7, lr}
 8010b94:	b087      	sub	sp, #28
 8010b96:	af02      	add	r7, sp, #8
 8010b98:	6078      	str	r0, [r7, #4]
 8010b9a:	6039      	str	r1, [r7, #0]
        if(!connected) {
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7d5b      	ldrb	r3, [r3, #21]
 8010ba0:	f083 0301 	eor.w	r3, r3, #1
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d023      	beq.n	8010bf2 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	3308      	adds	r3, #8
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	2b02      	cmp	r3, #2
 8010bb2:	d11e      	bne.n	8010bf2 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	330c      	adds	r3, #12
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	461a      	mov	r2, r3
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	330d      	adds	r3, #13
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	021b      	lsls	r3, r3, #8
 8010bc4:	4313      	orrs	r3, r2
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d113      	bne.n	8010bf2 <_ZN5BTHID7ACLDataEPh+0x60>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	689b      	ldr	r3, [r3, #8]
 8010bce:	7a9b      	ldrb	r3, [r3, #10]
 8010bd0:	f083 0301 	eor.w	r3, r3, #1
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d00b      	beq.n	8010bf2 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	2201      	movs	r2, #1
 8010be0:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	689b      	ldr	r3, [r3, #8]
 8010be6:	8b5a      	ldrh	r2, [r3, #26]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	220a      	movs	r2, #10
 8010bf0:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	7a5b      	ldrb	r3, [r3, #9]
 8010bf8:	f083 0301 	eor.w	r3, r3, #1
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d03a      	beq.n	8010c78 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	689b      	ldr	r3, [r3, #8]
 8010c06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d034      	beq.n	8010c78 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	7d5b      	ldrb	r3, [r3, #21]
 8010c12:	f083 0301 	eor.w	r3, r3, #1
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d02d      	beq.n	8010c78 <_ZN5BTHID7ACLDataEPh+0xe6>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8010c22:	f083 0301 	eor.w	r3, r3, #1
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d025      	beq.n	8010c78 <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	2b02      	cmp	r3, #2
 8010c34:	d120      	bne.n	8010c78 <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	330c      	adds	r3, #12
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	330d      	adds	r3, #13
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	021b      	lsls	r3, r3, #8
 8010c46:	4313      	orrs	r3, r2
 8010c48:	2b11      	cmp	r3, #17
 8010c4a:	d115      	bne.n	8010c78 <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	2200      	movs	r2, #0
 8010c52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2201      	movs	r2, #1
 8010c62:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	8b5a      	ldrh	r2, [r3, #26]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	899b      	ldrh	r3, [r3, #12]
 8010c7e:	461a      	mov	r2, r3
 8010c80:	6839      	ldr	r1, [r7, #0]
 8010c82:	f7ff fe8f 	bl	80109a4 <_ZN16BluetoothService14checkHciHandleEPht>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 83d9 	beq.w	8011440 <_ZN5BTHID7ACLDataEPh+0x8ae>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	3306      	adds	r3, #6
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	461a      	mov	r2, r3
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	3307      	adds	r3, #7
 8010c9a:	781b      	ldrb	r3, [r3, #0]
 8010c9c:	021b      	lsls	r3, r3, #8
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	f040 829b 	bne.w	80111dc <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	3308      	adds	r3, #8
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	f000 83c1 	beq.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	2b03      	cmp	r3, #3
 8010cba:	f040 808d 	bne.w	8010dd8 <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	3310      	adds	r3, #16
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	461a      	mov	r2, r3
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	3311      	adds	r3, #17
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	021b      	lsls	r3, r3, #8
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f040 83af 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	3312      	adds	r3, #18
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	3313      	adds	r3, #19
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	021b      	lsls	r3, r3, #8
 8010ce6:	4313      	orrs	r3, r2
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f040 83a3 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	330e      	adds	r3, #14
 8010cf2:	781a      	ldrb	r2, [r3, #0]
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d124      	bne.n	8010d48 <_ZN5BTHID7ACLDataEPh+0x1b6>
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	330f      	adds	r3, #15
 8010d02:	781a      	ldrb	r2, [r3, #0]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d11c      	bne.n	8010d48 <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	7a5a      	ldrb	r2, [r3, #9]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	7b1a      	ldrb	r2, [r3, #12]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	7b5a      	ldrb	r2, [r3, #13]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	7d1b      	ldrb	r3, [r3, #20]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	b2da      	uxtb	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6898      	ldr	r0, [r3, #8]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	8999      	ldrh	r1, [r3, #12]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	7d1a      	ldrb	r2, [r3, #20]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	331b      	adds	r3, #27
 8010d42:	f7ff f827 	bl	800fd94 <_ZN3BTD20l2cap_config_requestEthPh>
 8010d46:	e375      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	330e      	adds	r3, #14
 8010d4c:	781a      	ldrb	r2, [r3, #0]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d11a      	bne.n	8010d8e <_ZN5BTHID7ACLDataEPh+0x1fc>
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	330f      	adds	r3, #15
 8010d5c:	781a      	ldrb	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d112      	bne.n	8010d8e <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	7a5a      	ldrb	r2, [r3, #9]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	7b1a      	ldrb	r2, [r3, #12]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	7b5a      	ldrb	r2, [r3, #13]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	691b      	ldr	r3, [r3, #16]
 8010d84:	f043 0204 	orr.w	r2, r3, #4
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	611a      	str	r2, [r3, #16]
 8010d8c:	e352      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	330e      	adds	r3, #14
 8010d92:	781a      	ldrb	r2, [r3, #0]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	f040 834a 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	330f      	adds	r3, #15
 8010da4:	781a      	ldrb	r2, [r3, #0]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010dac:	429a      	cmp	r2, r3
 8010dae:	f040 8341 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	7a5a      	ldrb	r2, [r3, #9]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	7b1a      	ldrb	r2, [r3, #12]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	7b5a      	ldrb	r2, [r3, #13]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	691b      	ldr	r3, [r3, #16]
 8010dce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	611a      	str	r2, [r3, #16]
 8010dd6:	e32d      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	3308      	adds	r3, #8
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d15a      	bne.n	8010e98 <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	330c      	adds	r3, #12
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	461a      	mov	r2, r3
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	330d      	adds	r3, #13
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	021b      	lsls	r3, r3, #8
 8010df2:	4313      	orrs	r3, r2
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d112      	bne.n	8010e1e <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	7a5a      	ldrb	r2, [r3, #9]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	7b9a      	ldrb	r2, [r3, #14]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	7bda      	ldrb	r2, [r3, #15]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	691b      	ldr	r3, [r3, #16]
 8010e14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	611a      	str	r2, [r3, #16]
 8010e1c:	e30a      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	330c      	adds	r3, #12
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	461a      	mov	r2, r3
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	330d      	adds	r3, #13
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	021b      	lsls	r3, r3, #8
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	2b11      	cmp	r3, #17
 8010e32:	d112      	bne.n	8010e5a <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	7a5a      	ldrb	r2, [r3, #9]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	7b9a      	ldrb	r2, [r3, #14]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	7bda      	ldrb	r2, [r3, #15]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	691b      	ldr	r3, [r3, #16]
 8010e50:	f043 0201 	orr.w	r2, r3, #1
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	611a      	str	r2, [r3, #16]
 8010e58:	e2ec      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	330c      	adds	r3, #12
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	461a      	mov	r2, r3
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	330d      	adds	r3, #13
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	021b      	lsls	r3, r3, #8
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	2b13      	cmp	r3, #19
 8010e6e:	f040 82e1 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        identifier = l2capinbuf[9];
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	7a5a      	ldrb	r2, [r3, #9]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	7b9a      	ldrb	r2, [r3, #14]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	7bda      	ldrb	r2, [r3, #15]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	f043 0210 	orr.w	r2, r3, #16
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	611a      	str	r2, [r3, #16]
 8010e96:	e2cd      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 8010e98:	683b      	ldr	r3, [r7, #0]
 8010e9a:	3308      	adds	r3, #8
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	2b05      	cmp	r3, #5
 8010ea0:	d15e      	bne.n	8010f60 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	3310      	adds	r3, #16
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	3311      	adds	r3, #17
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	021b      	lsls	r3, r3, #8
 8010eb2:	4313      	orrs	r3, r2
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f040 82bd 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	330c      	adds	r3, #12
 8010ebe:	781a      	ldrb	r2, [r3, #0]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d112      	bne.n	8010ef0 <_ZN5BTHID7ACLDataEPh+0x35e>
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	330d      	adds	r3, #13
 8010ece:	781a      	ldrb	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d10a      	bne.n	8010ef0 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	7a5a      	ldrb	r2, [r3, #9]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	691b      	ldr	r3, [r3, #16]
 8010ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	611a      	str	r2, [r3, #16]
 8010eee:	e2a1      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	330c      	adds	r3, #12
 8010ef4:	781a      	ldrb	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d112      	bne.n	8010f26 <_ZN5BTHID7ACLDataEPh+0x394>
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	330d      	adds	r3, #13
 8010f04:	781a      	ldrb	r2, [r3, #0]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d10a      	bne.n	8010f26 <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	7a5a      	ldrb	r2, [r3, #9]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	691b      	ldr	r3, [r3, #16]
 8010f1c:	f043 0202 	orr.w	r2, r3, #2
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	611a      	str	r2, [r3, #16]
 8010f24:	e286      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	330c      	adds	r3, #12
 8010f2a:	781a      	ldrb	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010f32:	429a      	cmp	r2, r3
 8010f34:	f040 827e 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	330d      	adds	r3, #13
 8010f3c:	781a      	ldrb	r2, [r3, #0]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010f44:	429a      	cmp	r2, r3
 8010f46:	f040 8275 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	7a5a      	ldrb	r2, [r3, #9]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	f043 0220 	orr.w	r2, r3, #32
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	611a      	str	r2, [r3, #16]
 8010f5e:	e269      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	3308      	adds	r3, #8
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	2b04      	cmp	r3, #4
 8010f68:	d155      	bne.n	8011016 <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	330c      	adds	r3, #12
 8010f6e:	781a      	ldrb	r2, [r3, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d113      	bne.n	8010fa2 <_ZN5BTHID7ACLDataEPh+0x410>
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	330d      	adds	r3, #13
 8010f7e:	781a      	ldrb	r2, [r3, #0]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d10b      	bne.n	8010fa2 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6898      	ldr	r0, [r3, #8]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	8999      	ldrh	r1, [r3, #12]
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	3309      	adds	r3, #9
 8010f96:	781a      	ldrb	r2, [r3, #0]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	331b      	adds	r3, #27
 8010f9c:	f7fe ff45 	bl	800fe2a <_ZN3BTD21l2cap_config_responseEthPh>
 8010fa0:	e248      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	330c      	adds	r3, #12
 8010fa6:	781a      	ldrb	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d113      	bne.n	8010fda <_ZN5BTHID7ACLDataEPh+0x448>
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	330d      	adds	r3, #13
 8010fb6:	781a      	ldrb	r2, [r3, #0]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d10b      	bne.n	8010fda <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6898      	ldr	r0, [r3, #8]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	8999      	ldrh	r1, [r3, #12]
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	3309      	adds	r3, #9
 8010fce:	781a      	ldrb	r2, [r3, #0]
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	3316      	adds	r3, #22
 8010fd4:	f7fe ff29 	bl	800fe2a <_ZN3BTD21l2cap_config_responseEthPh>
 8010fd8:	e22c      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	330c      	adds	r3, #12
 8010fde:	781a      	ldrb	r2, [r3, #0]
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	f040 8224 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	330d      	adds	r3, #13
 8010ff0:	781a      	ldrb	r2, [r3, #0]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	f040 821b 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6898      	ldr	r0, [r3, #8]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	8999      	ldrh	r1, [r3, #12]
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	3309      	adds	r3, #9
 801100a:	781a      	ldrb	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	3318      	adds	r3, #24
 8011010:	f7fe ff0b 	bl	800fe2a <_ZN3BTD21l2cap_config_responseEthPh>
 8011014:	e20e      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	3308      	adds	r3, #8
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b06      	cmp	r3, #6
 801101e:	d170      	bne.n	8011102 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	330c      	adds	r3, #12
 8011024:	781a      	ldrb	r2, [r3, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801102c:	429a      	cmp	r2, r3
 801102e:	d112      	bne.n	8011056 <_ZN5BTHID7ACLDataEPh+0x4c4>
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	330d      	adds	r3, #13
 8011034:	781a      	ldrb	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 801103c:	429a      	cmp	r2, r3
 801103e:	d10a      	bne.n	8011056 <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	7a5a      	ldrb	r2, [r3, #9]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	691b      	ldr	r3, [r3, #16]
 801104c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	611a      	str	r2, [r3, #16]
 8011054:	e1ee      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	330c      	adds	r3, #12
 801105a:	781a      	ldrb	r2, [r3, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8011062:	429a      	cmp	r2, r3
 8011064:	d121      	bne.n	80110aa <_ZN5BTHID7ACLDataEPh+0x518>
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	330d      	adds	r3, #13
 801106a:	781a      	ldrb	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011072:	429a      	cmp	r2, r3
 8011074:	d119      	bne.n	80110aa <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	7a5a      	ldrb	r2, [r3, #9]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6898      	ldr	r0, [r3, #8]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	8999      	ldrh	r1, [r3, #12]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	7d1a      	ldrb	r2, [r3, #20]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	3316      	adds	r3, #22
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	4623      	mov	r3, r4
 8011098:	f7fe ff57 	bl	800ff4a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	3308      	adds	r3, #8
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	4798      	blx	r3
 80110a8:	e1c4      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	330c      	adds	r3, #12
 80110ae:	781a      	ldrb	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80110b6:	429a      	cmp	r2, r3
 80110b8:	f040 81bc 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	330d      	adds	r3, #13
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80110c8:	429a      	cmp	r2, r3
 80110ca:	f040 81b3 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	7a5a      	ldrb	r2, [r3, #9]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6898      	ldr	r0, [r3, #8]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	8999      	ldrh	r1, [r3, #12]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7d1a      	ldrb	r2, [r3, #20]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	3318      	adds	r3, #24
 80110ec:	9300      	str	r3, [sp, #0]
 80110ee:	4623      	mov	r3, r4
 80110f0:	f7fe ff2b 	bl	800ff4a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	3308      	adds	r3, #8
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	4798      	blx	r3
 8011100:	e198      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	3308      	adds	r3, #8
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	2b07      	cmp	r3, #7
 801110a:	d14c      	bne.n	80111a6 <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	330c      	adds	r3, #12
 8011110:	781a      	ldrb	r2, [r3, #0]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	7edb      	ldrb	r3, [r3, #27]
 8011116:	429a      	cmp	r2, r3
 8011118:	d111      	bne.n	801113e <_ZN5BTHID7ACLDataEPh+0x5ac>
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	330d      	adds	r3, #13
 801111e:	781a      	ldrb	r2, [r3, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	7f1b      	ldrb	r3, [r3, #28]
 8011124:	429a      	cmp	r2, r3
 8011126:	d10a      	bne.n	801113e <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	7a5a      	ldrb	r2, [r3, #9]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	611a      	str	r2, [r3, #16]
 801113c:	e17a      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	330c      	adds	r3, #12
 8011142:	781a      	ldrb	r2, [r3, #0]
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	7d9b      	ldrb	r3, [r3, #22]
 8011148:	429a      	cmp	r2, r3
 801114a:	d111      	bne.n	8011170 <_ZN5BTHID7ACLDataEPh+0x5de>
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	330d      	adds	r3, #13
 8011150:	781a      	ldrb	r2, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	7ddb      	ldrb	r3, [r3, #23]
 8011156:	429a      	cmp	r2, r3
 8011158:	d10a      	bne.n	8011170 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	7a5a      	ldrb	r2, [r3, #9]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	f043 0208 	orr.w	r2, r3, #8
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	611a      	str	r2, [r3, #16]
 801116e:	e161      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	330c      	adds	r3, #12
 8011174:	781a      	ldrb	r2, [r3, #0]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	7e1b      	ldrb	r3, [r3, #24]
 801117a:	429a      	cmp	r2, r3
 801117c:	f040 815a 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	330d      	adds	r3, #13
 8011184:	781a      	ldrb	r2, [r3, #0]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	7e5b      	ldrb	r3, [r3, #25]
 801118a:	429a      	cmp	r2, r3
 801118c:	f040 8152 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	7a5a      	ldrb	r2, [r3, #9]
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	691b      	ldr	r3, [r3, #16]
 801119c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	611a      	str	r2, [r3, #16]
 80111a4:	e146      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	3308      	adds	r3, #8
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	2b0a      	cmp	r3, #10
 80111ae:	f040 8141 	bne.w	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	7a5a      	ldrb	r2, [r3, #9]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6898      	ldr	r0, [r3, #8]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	8999      	ldrh	r1, [r3, #12]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	7d1a      	ldrb	r2, [r3, #20]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	330c      	adds	r3, #12
 80111ca:	781c      	ldrb	r4, [r3, #0]
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	330d      	adds	r3, #13
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	9300      	str	r3, [sp, #0]
 80111d4:	4623      	mov	r3, r4
 80111d6:	f7fe fef5 	bl	800ffc4 <_ZN3BTD26l2cap_information_responseEthhh>
 80111da:	e12b      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	3306      	adds	r3, #6
 80111e0:	781a      	ldrb	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80111e8:	429a      	cmp	r2, r3
 80111ea:	f040 8087 	bne.w	80112fc <_ZN5BTHID7ACLDataEPh+0x76a>
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	3307      	adds	r3, #7
 80111f2:	781a      	ldrb	r2, [r3, #0]
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d17e      	bne.n	80112fc <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	3308      	adds	r3, #8
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	2b02      	cmp	r3, #2
 8011206:	d131      	bne.n	801126c <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2203      	movs	r2, #3
 801120c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	7a5a      	ldrb	r2, [r3, #9]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	7a9a      	ldrb	r2, [r3, #10]
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2200      	movs	r2, #0
 8011228:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2205      	movs	r2, #5
 8011230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	3328      	adds	r3, #40	; 0x28
 8011260:	220a      	movs	r2, #10
 8011262:	4619      	mov	r1, r3
 8011264:	6878      	ldr	r0, [r7, #4]
 8011266:	f000 fb6d 	bl	8011944 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801126a:	e0e0      	b.n	801142e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	3308      	adds	r3, #8
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	2b04      	cmp	r3, #4
 8011274:	d131      	bne.n	80112da <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2205      	movs	r2, #5
 801127a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	7a5a      	ldrb	r2, [r3, #9]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	7a9a      	ldrb	r2, [r3, #10]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2205      	movs	r2, #5
 801129e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2202      	movs	r2, #2
 80112ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2235      	movs	r2, #53	; 0x35
 80112b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2200      	movs	r2, #0
 80112be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2200      	movs	r2, #0
 80112c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	3328      	adds	r3, #40	; 0x28
 80112ce:	220a      	movs	r2, #10
 80112d0:	4619      	mov	r1, r3
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 fb36 	bl	8011944 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80112d8:	e0a9      	b.n	801142e <_ZN5BTHID7ACLDataEPh+0x89c>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	3308      	adds	r3, #8
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	2b06      	cmp	r3, #6
 80112e2:	f040 80a4 	bne.w	801142e <_ZN5BTHID7ACLDataEPh+0x89c>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	3309      	adds	r3, #9
 80112ea:	7819      	ldrb	r1, [r3, #0]
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	330a      	adds	r3, #10
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	461a      	mov	r2, r3
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f000 fb3f 	bl	8011978 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 80112fa:	e098      	b.n	801142e <_ZN5BTHID7ACLDataEPh+0x89c>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	3306      	adds	r3, #6
 8011300:	781a      	ldrb	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8011308:	429a      	cmp	r2, r3
 801130a:	d162      	bne.n	80113d2 <_ZN5BTHID7ACLDataEPh+0x840>
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	3307      	adds	r3, #7
 8011310:	781a      	ldrb	r2, [r3, #0]
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8011318:	429a      	cmp	r2, r3
 801131a:	d15a      	bne.n	80113d2 <_ZN5BTHID7ACLDataEPh+0x840>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	3308      	adds	r3, #8
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	2ba1      	cmp	r3, #161	; 0xa1
 8011324:	f040 8085 	bne.w	8011432 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 8011328:	f7f1 fb00 	bl	800292c <HAL_GetTick>
 801132c:	4602      	mov	r2, r0
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	3305      	adds	r3, #5
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	021b      	lsls	r3, r3, #8
 801133a:	b21a      	sxth	r2, r3
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	3304      	adds	r3, #4
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	b21b      	sxth	r3, r3
 8011344:	4313      	orrs	r3, r2
 8011346:	b21b      	sxth	r3, r3
 8011348:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	3314      	adds	r3, #20
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	89fa      	ldrh	r2, [r7, #14]
 8011354:	b2d2      	uxtb	r2, r2
 8011356:	3a01      	subs	r2, #1
 8011358:	b2d1      	uxtb	r1, r2
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	3209      	adds	r2, #9
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	3309      	adds	r3, #9
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d002      	beq.n	8011372 <_ZN5BTHID7ACLDataEPh+0x7e0>
 801136c:	2b02      	cmp	r3, #2
 801136e:	d016      	beq.n	801139e <_ZN5BTHID7ACLDataEPh+0x80c>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 8011370:	e05f      	b.n	8011432 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6a1b      	ldr	r3, [r3, #32]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d027      	beq.n	80113ca <_ZN5BTHID7ACLDataEPh+0x838>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6a18      	ldr	r0, [r3, #32]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6a1b      	ldr	r3, [r3, #32]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	681c      	ldr	r4, [r3, #0]
 8011386:	89fb      	ldrh	r3, [r7, #14]
 8011388:	b2db      	uxtb	r3, r3
 801138a:	3b02      	subs	r3, #2
 801138c:	b2da      	uxtb	r2, r3
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	330a      	adds	r3, #10
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	4613      	mov	r3, r2
 8011396:	2200      	movs	r2, #0
 8011398:	6879      	ldr	r1, [r7, #4]
 801139a:	47a0      	blx	r4
                                                break;
 801139c:	e015      	b.n	80113ca <_ZN5BTHID7ACLDataEPh+0x838>
                                                if(pRptParser[MOUSE_PARSER_ID])
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d013      	beq.n	80113ce <_ZN5BTHID7ACLDataEPh+0x83c>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681c      	ldr	r4, [r3, #0]
 80113b2:	89fb      	ldrh	r3, [r7, #14]
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	3b02      	subs	r3, #2
 80113b8:	b2da      	uxtb	r2, r3
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	330a      	adds	r3, #10
 80113be:	9300      	str	r3, [sp, #0]
 80113c0:	4613      	mov	r3, r2
 80113c2:	2200      	movs	r2, #0
 80113c4:	6879      	ldr	r1, [r7, #4]
 80113c6:	47a0      	blx	r4
                                                break;
 80113c8:	e001      	b.n	80113ce <_ZN5BTHID7ACLDataEPh+0x83c>
                                                break;
 80113ca:	bf00      	nop
 80113cc:	e031      	b.n	8011432 <_ZN5BTHID7ACLDataEPh+0x8a0>
                                                break;
 80113ce:	bf00      	nop
                        }
 80113d0:	e02f      	b.n	8011432 <_ZN5BTHID7ACLDataEPh+0x8a0>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	3306      	adds	r3, #6
 80113d6:	781a      	ldrb	r2, [r3, #0]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80113de:	429a      	cmp	r2, r3
 80113e0:	d128      	bne.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	3307      	adds	r3, #7
 80113e6:	781a      	ldrb	r2, [r3, #0]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d120      	bne.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	3308      	adds	r3, #8
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	2ba3      	cmp	r3, #163	; 0xa3
 80113fa:	d11b      	bne.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	3305      	adds	r3, #5
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	021b      	lsls	r3, r3, #8
 8011404:	b21a      	sxth	r2, r3
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	3304      	adds	r3, #4
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	b21b      	sxth	r3, r3
 801140e:	4313      	orrs	r3, r2
 8011410:	b21b      	sxth	r3, r3
 8011412:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	3318      	adds	r3, #24
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	89ba      	ldrh	r2, [r7, #12]
 801141e:	b2d2      	uxtb	r2, r2
 8011420:	3a01      	subs	r2, #1
 8011422:	b2d1      	uxtb	r1, r2
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	3209      	adds	r2, #9
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	4798      	blx	r3
 801142c:	e002      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 801142e:	bf00      	nop
 8011430:	e000      	b.n	8011434 <_ZN5BTHID7ACLDataEPh+0x8a2>
                        }
 8011432:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f000 f807 	bl	8011448 <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 f8b4 	bl	80115a8 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 8011440:	bf00      	nop
 8011442:	3714      	adds	r7, #20
 8011444:	46bd      	mov	sp, r7
 8011446:	bd90      	pop	{r4, r7, pc}

08011448 <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 8011448:	b5b0      	push	{r4, r5, r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af02      	add	r7, sp, #8
 801144e:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	7e9b      	ldrb	r3, [r3, #26]
 8011454:	2b0e      	cmp	r3, #14
 8011456:	f000 8084 	beq.w	8011562 <_ZN5BTHID8SDP_taskEv+0x11a>
 801145a:	2b0e      	cmp	r3, #14
 801145c:	f300 809f 	bgt.w	801159e <_ZN5BTHID8SDP_taskEv+0x156>
 8011460:	2b0a      	cmp	r3, #10
 8011462:	d002      	beq.n	801146a <_ZN5BTHID8SDP_taskEv+0x22>
 8011464:	2b0b      	cmp	r3, #11
 8011466:	d068      	beq.n	801153a <_ZN5BTHID8SDP_taskEv+0xf2>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 8011468:	e099      	b.n	801159e <_ZN5BTHID8SDP_taskEv+0x156>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	691b      	ldr	r3, [r3, #16]
 801146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011472:	2b00      	cmp	r3, #0
 8011474:	d041      	beq.n	80114fa <_ZN5BTHID8SDP_taskEv+0xb2>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	691b      	ldr	r3, [r3, #16]
 801147a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6898      	ldr	r0, [r3, #8]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	8999      	ldrh	r1, [r3, #12]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	7d1a      	ldrb	r2, [r3, #20]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	331b      	adds	r3, #27
 8011498:	2501      	movs	r5, #1
 801149a:	9501      	str	r5, [sp, #4]
 801149c:	9300      	str	r3, [sp, #0]
 801149e:	4623      	mov	r3, r4
 80114a0:	f7fe fc2b 	bl	800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80114a4:	2001      	movs	r0, #1
 80114a6:	f7f1 fa4d 	bl	8002944 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6898      	ldr	r0, [r3, #8]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8999      	ldrh	r1, [r3, #12]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	7d1a      	ldrb	r2, [r3, #20]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	331b      	adds	r3, #27
 80114c0:	2500      	movs	r5, #0
 80114c2:	9501      	str	r5, [sp, #4]
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	4623      	mov	r3, r4
 80114c8:	f7fe fc17 	bl	800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	7d1b      	ldrb	r3, [r3, #20]
 80114d0:	3301      	adds	r3, #1
 80114d2:	b2da      	uxtb	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	751a      	strb	r2, [r3, #20]
                                delay(1);
 80114d8:	2001      	movs	r0, #1
 80114da:	f7f1 fa33 	bl	8002944 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6898      	ldr	r0, [r3, #8]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	8999      	ldrh	r1, [r3, #12]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	7d1a      	ldrb	r2, [r3, #20]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	331b      	adds	r3, #27
 80114ee:	f7fe fc51 	bl	800fd94 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	220b      	movs	r2, #11
 80114f6:	769a      	strb	r2, [r3, #26]
                        break;
 80114f8:	e04c      	b.n	8011594 <_ZN5BTHID8SDP_taskEv+0x14c>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011502:	2b00      	cmp	r3, #0
 8011504:	d046      	beq.n	8011594 <_ZN5BTHID8SDP_taskEv+0x14c>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	691b      	ldr	r3, [r3, #16]
 801150a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2200      	movs	r2, #0
 8011516:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	6898      	ldr	r0, [r3, #8]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	8999      	ldrh	r1, [r3, #12]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	7d1a      	ldrb	r2, [r3, #20]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	331b      	adds	r3, #27
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	4623      	mov	r3, r4
 8011534:	f7fe fd09 	bl	800ff4a <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 8011538:	e02c      	b.n	8011594 <_ZN5BTHID8SDP_taskEv+0x14c>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	691b      	ldr	r3, [r3, #16]
 801153e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011542:	2b00      	cmp	r3, #0
 8011544:	d028      	beq.n	8011598 <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	691b      	ldr	r3, [r3, #16]
 801154a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2201      	movs	r2, #1
 8011556:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	220a      	movs	r2, #10
 801155e:	769a      	strb	r2, [r3, #26]
                        break;
 8011560:	e01a      	b.n	8011598 <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	691b      	ldr	r3, [r3, #16]
 8011566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801156a:	2b00      	cmp	r3, #0
 801156c:	d016      	beq.n	801159c <_ZN5BTHID8SDP_taskEv+0x154>
                                pBtd->hci_disconnect(hci_handle);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	689a      	ldr	r2, [r3, #8]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	899b      	ldrh	r3, [r3, #12]
 8011576:	4619      	mov	r1, r3
 8011578:	4610      	mov	r0, r2
 801157a:	f7fe fa92 	bl	800faa2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011584:	819a      	strh	r2, [r3, #12]
                                Reset();
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3308      	adds	r3, #8
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	4798      	blx	r3
                        break;
 8011592:	e003      	b.n	801159c <_ZN5BTHID8SDP_taskEv+0x154>
                        break;
 8011594:	bf00      	nop
 8011596:	e002      	b.n	801159e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 8011598:	bf00      	nop
 801159a:	e000      	b.n	801159e <_ZN5BTHID8SDP_taskEv+0x156>
                        break;
 801159c:	bf00      	nop
}
 801159e:	bf00      	nop
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080115a8 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 80115a8:	b5b0      	push	{r4, r5, r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af02      	add	r7, sp, #8
 80115ae:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80115b6:	3b01      	subs	r3, #1
 80115b8:	2b08      	cmp	r3, #8
 80115ba:	f200 812c 	bhi.w	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
 80115be:	a201      	add	r2, pc, #4	; (adr r2, 80115c4 <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 80115c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c4:	080117f5 	.word	0x080117f5
 80115c8:	0801168f 	.word	0x0801168f
 80115cc:	080116c7 	.word	0x080116c7
 80115d0:	080115e9 	.word	0x080115e9
 80115d4:	080117c1 	.word	0x080117c1
 80115d8:	08011607 	.word	0x08011607
 80115dc:	0801170f 	.word	0x0801170f
 80115e0:	08011745 	.word	0x08011745
 80115e4:	08011781 	.word	0x08011781
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	691b      	ldr	r3, [r3, #16]
 80115ec:	f003 0302 	and.w	r3, r3, #2
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 8101 	beq.w	80117f8 <_ZN5BTHID10L2CAP_taskEv+0x250>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f000 f9f9 	bl	80119ee <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2206      	movs	r2, #6
 8011600:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011604:	e0f8      	b.n	80117f8 <_ZN5BTHID10L2CAP_taskEv+0x250>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	691b      	ldr	r3, [r3, #16]
 801160a:	f003 0310 	and.w	r3, r3, #16
 801160e:	2b00      	cmp	r3, #0
 8011610:	f000 80f4 	beq.w	80117fc <_ZN5BTHID10L2CAP_taskEv+0x254>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6898      	ldr	r0, [r3, #8]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	8999      	ldrh	r1, [r3, #12]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	7d1a      	ldrb	r2, [r3, #20]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	3318      	adds	r3, #24
 801162a:	2501      	movs	r5, #1
 801162c:	9501      	str	r5, [sp, #4]
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	4623      	mov	r3, r4
 8011632:	f7fe fb62 	bl	800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 8011636:	2001      	movs	r0, #1
 8011638:	f7f1 f984 	bl	8002944 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6898      	ldr	r0, [r3, #8]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	8999      	ldrh	r1, [r3, #12]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	7d1a      	ldrb	r2, [r3, #20]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	3318      	adds	r3, #24
 8011652:	2500      	movs	r5, #0
 8011654:	9501      	str	r5, [sp, #4]
 8011656:	9300      	str	r3, [sp, #0]
 8011658:	4623      	mov	r3, r4
 801165a:	f7fe fb4e 	bl	800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	7d1b      	ldrb	r3, [r3, #20]
 8011662:	3301      	adds	r3, #1
 8011664:	b2da      	uxtb	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	751a      	strb	r2, [r3, #20]
                                delay(1);
 801166a:	2001      	movs	r0, #1
 801166c:	f7f1 f96a 	bl	8002944 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6898      	ldr	r0, [r3, #8]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8999      	ldrh	r1, [r3, #12]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	7d1a      	ldrb	r2, [r3, #20]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	3318      	adds	r3, #24
 8011680:	f7fe fb88 	bl	800fd94 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2208      	movs	r2, #8
 8011688:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801168c:	e0b6      	b.n	80117fc <_ZN5BTHID10L2CAP_taskEv+0x254>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	691b      	ldr	r3, [r3, #16]
 8011692:	f003 0304 	and.w	r3, r3, #4
 8011696:	2b00      	cmp	r3, #0
 8011698:	f000 80b2 	beq.w	8011800 <_ZN5BTHID10L2CAP_taskEv+0x258>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	7d1b      	ldrb	r3, [r3, #20]
 80116a0:	3301      	adds	r3, #1
 80116a2:	b2da      	uxtb	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6898      	ldr	r0, [r3, #8]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	8999      	ldrh	r1, [r3, #12]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	7d1a      	ldrb	r2, [r3, #20]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	3316      	adds	r3, #22
 80116b8:	f7fe fb6c 	bl	800fd94 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2203      	movs	r2, #3
 80116c0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80116c4:	e09c      	b.n	8011800 <_ZN5BTHID10L2CAP_taskEv+0x258>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	f003 0302 	and.w	r3, r3, #2
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f000 8098 	beq.w	8011804 <_ZN5BTHID10L2CAP_taskEv+0x25c>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f98a 	bl	80119ee <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 80116da:	2001      	movs	r0, #1
 80116dc:	f7f1 f932 	bl	8002944 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	7d1b      	ldrb	r3, [r3, #20]
 80116e4:	3301      	adds	r3, #1
 80116e6:	b2da      	uxtb	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6898      	ldr	r0, [r3, #8]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	8999      	ldrh	r1, [r3, #12]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	7d1a      	ldrb	r2, [r3, #20]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	336d      	adds	r3, #109	; 0x6d
 80116fc:	2413      	movs	r4, #19
 80116fe:	9400      	str	r4, [sp, #0]
 8011700:	f7fe fabd 	bl	800fc7e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2207      	movs	r2, #7
 8011708:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801170c:	e07a      	b.n	8011804 <_ZN5BTHID10L2CAP_taskEv+0x25c>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	691b      	ldr	r3, [r3, #16]
 8011712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011716:	2b00      	cmp	r3, #0
 8011718:	d076      	beq.n	8011808 <_ZN5BTHID10L2CAP_taskEv+0x260>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	7d1b      	ldrb	r3, [r3, #20]
 801171e:	3301      	adds	r3, #1
 8011720:	b2da      	uxtb	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6898      	ldr	r0, [r3, #8]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	8999      	ldrh	r1, [r3, #12]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	7d1a      	ldrb	r2, [r3, #20]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	3318      	adds	r3, #24
 8011736:	f7fe fb2d 	bl	800fd94 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2208      	movs	r2, #8
 801173e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 8011742:	e061      	b.n	8011808 <_ZN5BTHID10L2CAP_taskEv+0x260>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	f003 0320 	and.w	r3, r3, #32
 801174c:	2b00      	cmp	r3, #0
 801174e:	d05d      	beq.n	801180c <_ZN5BTHID10L2CAP_taskEv+0x264>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	689b      	ldr	r3, [r3, #8]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	689b      	ldr	r3, [r3, #8]
 801175e:	2200      	movs	r2, #0
 8011760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2201      	movs	r2, #1
 8011768:	755a      	strb	r2, [r3, #21]
                                onInit();
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	3310      	adds	r3, #16
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2201      	movs	r2, #1
 801177a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 801177e:	e045      	b.n	801180c <_ZN5BTHID10L2CAP_taskEv+0x264>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011788:	2b00      	cmp	r3, #0
 801178a:	d041      	beq.n	8011810 <_ZN5BTHID10L2CAP_taskEv+0x268>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	7d1b      	ldrb	r3, [r3, #20]
 8011790:	3301      	adds	r3, #1
 8011792:	b2da      	uxtb	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	6898      	ldr	r0, [r3, #8]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	8999      	ldrh	r1, [r3, #12]
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	7d1a      	ldrb	r2, [r3, #20]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f103 0416 	add.w	r4, r3, #22
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	336b      	adds	r3, #107	; 0x6b
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	4623      	mov	r3, r4
 80117b2:	f7fe fb8d 	bl	800fed0 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2205      	movs	r2, #5
 80117ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80117be:	e027      	b.n	8011810 <_ZN5BTHID10L2CAP_taskEv+0x268>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	691b      	ldr	r3, [r3, #16]
 80117c4:	f003 0308 	and.w	r3, r3, #8
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d023      	beq.n	8011814 <_ZN5BTHID10L2CAP_taskEv+0x26c>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	689a      	ldr	r2, [r3, #8]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	899b      	ldrh	r3, [r3, #12]
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7fe f963 	bl	800faa2 <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117e2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 80117f2:	e00f      	b.n	8011814 <_ZN5BTHID10L2CAP_taskEv+0x26c>
                        break;
 80117f4:	bf00      	nop
 80117f6:	e00e      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80117f8:	bf00      	nop
 80117fa:	e00c      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 80117fc:	bf00      	nop
 80117fe:	e00a      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011800:	bf00      	nop
 8011802:	e008      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011804:	bf00      	nop
 8011806:	e006      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011808:	bf00      	nop
 801180a:	e004      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 801180c:	bf00      	nop
 801180e:	e002      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011810:	bf00      	nop
 8011812:	e000      	b.n	8011816 <_ZN5BTHID10L2CAP_taskEv+0x26e>
                        break;
 8011814:	bf00      	nop
        }
}
 8011816:	bf00      	nop
 8011818:	3708      	adds	r7, #8
 801181a:	46bd      	mov	sp, r7
 801181c:	bdb0      	pop	{r4, r5, r7, pc}
 801181e:	bf00      	nop

08011820 <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 8011820:	b5b0      	push	{r4, r5, r7, lr}
 8011822:	b084      	sub	sp, #16
 8011824:	af02      	add	r7, sp, #8
 8011826:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 801182e:	2b00      	cmp	r3, #0
 8011830:	f040 8084 	bne.w	801193c <_ZN5BTHID3RunEv+0x11c>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801183c:	2b00      	cmp	r3, #0
 801183e:	d03a      	beq.n	80118b6 <_ZN5BTHID3RunEv+0x96>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	7a5b      	ldrb	r3, [r3, #9]
 8011846:	f083 0301 	eor.w	r3, r3, #1
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	d032      	beq.n	80118b6 <_ZN5BTHID3RunEv+0x96>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	7d5b      	ldrb	r3, [r3, #21]
 8011854:	f083 0301 	eor.w	r3, r3, #1
 8011858:	b2db      	uxtb	r3, r3
 801185a:	2b00      	cmp	r3, #0
 801185c:	d02b      	beq.n	80118b6 <_ZN5BTHID3RunEv+0x96>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011864:	f083 0301 	eor.w	r3, r3, #1
 8011868:	b2db      	uxtb	r3, r3
 801186a:	2b00      	cmp	r3, #0
 801186c:	d023      	beq.n	80118b6 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	2201      	movs	r2, #1
 8011874:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2201      	movs	r2, #1
 801187a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	689b      	ldr	r3, [r3, #8]
 8011882:	8b5a      	ldrh	r2, [r3, #26]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2200      	movs	r2, #0
 8011892:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6898      	ldr	r0, [r3, #8]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	8999      	ldrh	r1, [r3, #12]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	7d1a      	ldrb	r2, [r3, #20]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	336b      	adds	r3, #107	; 0x6b
 80118a4:	2411      	movs	r4, #17
 80118a6:	9400      	str	r4, [sp, #0]
 80118a8:	f7fe f9e9 	bl	800fc7e <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2202      	movs	r2, #2
 80118b0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 80118b4:	e041      	b.n	801193a <_ZN5BTHID3RunEv+0x11a>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	f003 0301 	and.w	r3, r3, #1
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d03b      	beq.n	801193a <_ZN5BTHID3RunEv+0x11a>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6898      	ldr	r0, [r3, #8]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	8999      	ldrh	r1, [r3, #12]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	7d1a      	ldrb	r2, [r3, #20]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3316      	adds	r3, #22
 80118d8:	2501      	movs	r5, #1
 80118da:	9501      	str	r5, [sp, #4]
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	4623      	mov	r3, r4
 80118e0:	f7fe fa0b 	bl	800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 80118e4:	2001      	movs	r0, #1
 80118e6:	f7f1 f82d 	bl	8002944 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6898      	ldr	r0, [r3, #8]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	8999      	ldrh	r1, [r3, #12]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	7d1a      	ldrb	r2, [r3, #20]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	3316      	adds	r3, #22
 8011900:	2500      	movs	r5, #0
 8011902:	9501      	str	r5, [sp, #4]
 8011904:	9300      	str	r3, [sp, #0]
 8011906:	4623      	mov	r3, r4
 8011908:	f7fe f9f7 	bl	800fcfa <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	7d1b      	ldrb	r3, [r3, #20]
 8011910:	3301      	adds	r3, #1
 8011912:	b2da      	uxtb	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	751a      	strb	r2, [r3, #20]
                                delay(1);
 8011918:	2001      	movs	r0, #1
 801191a:	f7f1 f813 	bl	8002944 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6898      	ldr	r0, [r3, #8]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	8999      	ldrh	r1, [r3, #12]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	7d1a      	ldrb	r2, [r3, #20]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	3316      	adds	r3, #22
 801192e:	f7fe fa31 	bl	800fd94 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2204      	movs	r2, #4
 8011936:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 801193a:	bf00      	nop
        }
}
 801193c:	bf00      	nop
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bdb0      	pop	{r4, r5, r7, pc}

08011944 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 8011944:	b590      	push	{r4, r7, lr}
 8011946:	b087      	sub	sp, #28
 8011948:	af02      	add	r7, sp, #8
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	4613      	mov	r3, r2
 8011950:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	6898      	ldr	r0, [r3, #8]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	8999      	ldrh	r1, [r3, #12]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	7edb      	ldrb	r3, [r3, #27]
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	7f12      	ldrb	r2, [r2, #28]
 8011962:	79fc      	ldrb	r4, [r7, #7]
 8011964:	9201      	str	r2, [sp, #4]
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	4623      	mov	r3, r4
 801196a:	68ba      	ldr	r2, [r7, #8]
 801196c:	f7fe f8f8 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011970:	bf00      	nop
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	bd90      	pop	{r4, r7, pc}

08011978 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
 8011984:	4613      	mov	r3, r2
 8011986:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2207      	movs	r2, #7
 801198c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	78fa      	ldrb	r2, [r7, #3]
 8011994:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	78ba      	ldrb	r2, [r7, #2]
 801199c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2205      	movs	r2, #5
 80119ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2202      	movs	r2, #2
 80119bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2235      	movs	r2, #53	; 0x35
 80119c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2200      	movs	r2, #0
 80119cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	3328      	adds	r3, #40	; 0x28
 80119dc:	220a      	movs	r2, #10
 80119de:	4619      	mov	r1, r3
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7ff ffaf 	bl	8011944 <_ZN5BTHID11SDP_CommandEPhh>
}
 80119e6:	bf00      	nop
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 80119ee:	b590      	push	{r4, r7, lr}
 80119f0:	b087      	sub	sp, #28
 80119f2:	af02      	add	r7, sp, #8
 80119f4:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d008      	beq.n	8011a12 <_ZN5BTHID11setProtocolEv+0x24>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	d003      	beq.n	8011a12 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011a18:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6898      	ldr	r0, [r3, #8]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	8999      	ldrh	r1, [r3, #12]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	7d9b      	ldrb	r3, [r3, #22]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	7dd2      	ldrb	r2, [r2, #23]
 8011a30:	f107 040f 	add.w	r4, r7, #15
 8011a34:	9201      	str	r2, [sp, #4]
 8011a36:	9300      	str	r3, [sp, #0]
 8011a38:	2301      	movs	r3, #1
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	f7fe f890 	bl	800fb60 <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 8011a40:	bf00      	nop
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd90      	pop	{r4, r7, pc}

08011a48 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	460b      	mov	r3, r1
 8011a52:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 8011a54:	78fb      	ldrb	r3, [r7, #3]
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d86e      	bhi.n	8011b38 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 8011a5a:	a201      	add	r2, pc, #4	; (adr r2, 8011a60 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 8011a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a60:	08011a71 	.word	0x08011a71
 8011a64:	08011aa3 	.word	0x08011aa3
 8011a68:	08011ad5 	.word	0x08011ad5
 8011a6c:	08011b07 	.word	0x08011b07
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	7a1b      	ldrb	r3, [r3, #8]
 8011a74:	f003 030f 	and.w	r3, r3, #15
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b07      	cmp	r3, #7
 8011a7c:	d00d      	beq.n	8011a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	7a1b      	ldrb	r3, [r3, #8]
 8011a82:	f003 030f 	and.w	r3, r3, #15
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d006      	beq.n	8011a9a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	7a1b      	ldrb	r3, [r3, #8]
 8011a90:	f003 030f 	and.w	r3, r3, #15
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d101      	bne.n	8011a9e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e04d      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	e04b      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	7a1b      	ldrb	r3, [r3, #8]
 8011aa6:	f003 030f 	and.w	r3, r3, #15
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d00d      	beq.n	8011acc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	7a1b      	ldrb	r3, [r3, #8]
 8011ab4:	f003 030f 	and.w	r3, r3, #15
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	d006      	beq.n	8011acc <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	7a1b      	ldrb	r3, [r3, #8]
 8011ac2:	f003 030f 	and.w	r3, r3, #15
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	2b03      	cmp	r3, #3
 8011aca:	d101      	bne.n	8011ad0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 8011acc:	2301      	movs	r3, #1
 8011ace:	e034      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	e032      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	7a1b      	ldrb	r3, [r3, #8]
 8011ad8:	f003 030f 	and.w	r3, r3, #15
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b03      	cmp	r3, #3
 8011ae0:	d00d      	beq.n	8011afe <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	7a1b      	ldrb	r3, [r3, #8]
 8011ae6:	f003 030f 	and.w	r3, r3, #15
 8011aea:	b2db      	uxtb	r3, r3
 8011aec:	2b04      	cmp	r3, #4
 8011aee:	d006      	beq.n	8011afe <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	7a1b      	ldrb	r3, [r3, #8]
 8011af4:	f003 030f 	and.w	r3, r3, #15
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b05      	cmp	r3, #5
 8011afc:	d101      	bne.n	8011b02 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 8011afe:	2301      	movs	r3, #1
 8011b00:	e01b      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011b02:	2300      	movs	r3, #0
 8011b04:	e019      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	7a1b      	ldrb	r3, [r3, #8]
 8011b0a:	f003 030f 	and.w	r3, r3, #15
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	2b05      	cmp	r3, #5
 8011b12:	d00d      	beq.n	8011b30 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	7a1b      	ldrb	r3, [r3, #8]
 8011b18:	f003 030f 	and.w	r3, r3, #15
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	2b06      	cmp	r3, #6
 8011b20:	d006      	beq.n	8011b30 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	7a1b      	ldrb	r3, [r3, #8]
 8011b26:	f003 030f 	and.w	r3, r3, #15
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b07      	cmp	r3, #7
 8011b2e:	d101      	bne.n	8011b34 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 8011b30:	2301      	movs	r3, #1
 8011b32:	e002      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 8011b34:	2300      	movs	r3, #0
 8011b36:	e000      	b.n	8011b3a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 8011b38:	2300      	movs	r3, #0
        }
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	370c      	adds	r7, #12
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop

08011b48 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 8011b54:	78fb      	ldrb	r3, [r7, #3]
 8011b56:	2b03      	cmp	r3, #3
 8011b58:	d806      	bhi.n	8011b68 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 8011b5a:	78fb      	ldrb	r3, [r7, #3]
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f7ff ff72 	bl	8011a48 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011b64:	4603      	mov	r3, r0
 8011b66:	e011      	b.n	8011b8c <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011b70:	4619      	mov	r1, r3
 8011b72:	78fb      	ldrb	r3, [r7, #3]
 8011b74:	4a07      	ldr	r2, [pc, #28]	; (8011b94 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 8011b76:	4413      	add	r3, r2
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8011b7e:	f003 0301 	and.w	r3, r3, #1
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bf14      	ite	ne
 8011b86:	2301      	movne	r3, #1
 8011b88:	2300      	moveq	r3, #0
 8011b8a:	b2db      	uxtb	r3, r3
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3708      	adds	r7, #8
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}
 8011b94:	08014c8c 	.word	0x08014c8c

08011b98 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 8011ba4:	78fb      	ldrb	r3, [r7, #3]
 8011ba6:	4a1b      	ldr	r2, [pc, #108]	; (8011c14 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 8011ba8:	4413      	add	r3, r2
 8011baa:	781b      	ldrb	r3, [r3, #0]
 8011bac:	461a      	mov	r2, r3
 8011bae:	2301      	movs	r3, #1
 8011bb0:	4093      	lsls	r3, r2
 8011bb2:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011bbe:	021b      	lsls	r3, r3, #8
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	4013      	ands	r3, r2
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	bf14      	ite	ne
 8011bcc:	2301      	movne	r3, #1
 8011bce:	2300      	moveq	r3, #0
 8011bd0:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8011bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011bdc:	021b      	lsls	r3, r3, #8
 8011bde:	4313      	orrs	r3, r2
 8011be0:	461a      	mov	r2, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	43db      	mvns	r3, r3
 8011be6:	4013      	ands	r3, r2
 8011be8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	b2d1      	uxtb	r1, r2
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	4301      	orrs	r1, r0
 8011bf4:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011bf8:	0a12      	lsrs	r2, r2, #8
 8011bfa:	b292      	uxth	r2, r2
 8011bfc:	2100      	movs	r1, #0
 8011bfe:	430a      	orrs	r2, r1
 8011c00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 8011c04:	7afb      	ldrb	r3, [r7, #11]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	08014c8c 	.word	0x08014c8c

08011c18 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	460b      	mov	r3, r1
 8011c22:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 8011c24:	78fb      	ldrb	r3, [r7, #3]
 8011c26:	2b08      	cmp	r3, #8
 8011c28:	d102      	bne.n	8011c30 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	7adb      	ldrb	r3, [r3, #11]
 8011c2e:	e006      	b.n	8011c3e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 8011c30:	78fb      	ldrb	r3, [r7, #3]
 8011c32:	2b09      	cmp	r3, #9
 8011c34:	d102      	bne.n	8011c3c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	7b1b      	ldrb	r3, [r3, #12]
 8011c3a:	e000      	b.n	8011c3e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 8011c4a:	b480      	push	{r7}
 8011c4c:	b083      	sub	sp, #12
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	460b      	mov	r3, r1
 8011c54:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 8011c56:	78fb      	ldrb	r3, [r7, #3]
 8011c58:	687a      	ldr	r2, [r7, #4]
 8011c5a:	4413      	add	r3, r2
 8011c5c:	791b      	ldrb	r3, [r3, #4]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	370c      	adds	r7, #12
 8011c62:	46bd      	mov	sp, r7
 8011c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c68:	4770      	bx	lr

08011c6a <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b086      	sub	sp, #24
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	60f8      	str	r0, [r7, #12]
 8011c72:	460b      	mov	r3, r1
 8011c74:	607a      	str	r2, [r7, #4]
 8011c76:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 8011c78:	7afb      	ldrb	r3, [r7, #11]
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	f240 80a6 	bls.w	8011dcc <_ZN9PS4Parser5ParseEhPh+0x162>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f000 80a2 	beq.w	8011dcc <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d10e      	bne.n	8011cae <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	1d18      	adds	r0, r3, #4
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	1c59      	adds	r1, r3, #1
 8011c98:	7afb      	ldrb	r3, [r7, #11]
 8011c9a:	3b01      	subs	r3, #1
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	2b3c      	cmp	r3, #60	; 0x3c
 8011ca0:	bf28      	it	cs
 8011ca2:	233c      	movcs	r3, #60	; 0x3c
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	f001 fe56 	bl	8013958 <memcpy>
 8011cac:	e016      	b.n	8011cdc <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	2b11      	cmp	r3, #17
 8011cb4:	f040 8098 	bne.w	8011de8 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 8011cb8:	7afb      	ldrb	r3, [r7, #11]
 8011cba:	2b03      	cmp	r3, #3
 8011cbc:	f240 8096 	bls.w	8011dec <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	1d18      	adds	r0, r3, #4
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	1cd9      	adds	r1, r3, #3
 8011cc8:	7afb      	ldrb	r3, [r7, #11]
 8011cca:	3b03      	subs	r3, #3
 8011ccc:	b2db      	uxtb	r3, r3
 8011cce:	2b3c      	cmp	r3, #60	; 0x3c
 8011cd0:	bf28      	it	cs
 8011cd2:	233c      	movcs	r3, #60	; 0x3c
 8011cd4:	b2db      	uxtb	r3, r3
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f001 fe3e 	bl	8013958 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	f3c3 0217 	ubfx	r2, r3, #0, #24
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce8:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d06d      	beq.n	8011dcc <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	689b      	ldr	r3, [r3, #8]
 8011cf4:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfe:	f3c3 0317 	ubfx	r3, r3, #0, #24
 8011d02:	43db      	mvns	r3, r3
 8011d04:	4013      	ands	r3, r2
 8011d06:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	b2d1      	uxtb	r1, r2
 8011d0e:	2000      	movs	r0, #0
 8011d10:	4301      	orrs	r1, r0
 8011d12:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8011d16:	0a12      	lsrs	r2, r2, #8
 8011d18:	b292      	uxth	r2, r2
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	430a      	orrs	r2, r1
 8011d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	689b      	ldr	r3, [r3, #8]
 8011d26:	f3c3 0117 	ubfx	r1, r3, #0, #24
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011d2e:	f361 0317 	bfi	r3, r1, #0, #24
 8011d32:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 8011d34:	2300      	movs	r3, #0
 8011d36:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 8011d38:	2100      	movs	r1, #0
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f7ff fe84 	bl	8011a48 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d003      	beq.n	8011d4e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 8011d46:	7dfb      	ldrb	r3, [r7, #23]
 8011d48:	f043 0301 	orr.w	r3, r3, #1
 8011d4c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 8011d4e:	2101      	movs	r1, #1
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f7ff fe79 	bl	8011a48 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d003      	beq.n	8011d64 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 8011d5c:	7dfb      	ldrb	r3, [r7, #23]
 8011d5e:	f043 0302 	orr.w	r3, r3, #2
 8011d62:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 8011d64:	2102      	movs	r1, #2
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f7ff fe6e 	bl	8011a48 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d003      	beq.n	8011d7a <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 8011d72:	7dfb      	ldrb	r3, [r7, #23]
 8011d74:	f043 0304 	orr.w	r3, r3, #4
 8011d78:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 8011d7a:	2103      	movs	r1, #3
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f7ff fe63 	bl	8011a48 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d003      	beq.n	8011d90 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 8011d88:	7dfb      	ldrb	r3, [r7, #23]
 8011d8a:	f043 0308 	orr.w	r3, r3, #8
 8011d8e:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011d96:	7dfa      	ldrb	r2, [r7, #23]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d017      	beq.n	8011dcc <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8011da2:	b25b      	sxtb	r3, r3
 8011da4:	43db      	mvns	r3, r3
 8011da6:	b25a      	sxtb	r2, r3
 8011da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dac:	4013      	ands	r3, r2
 8011dae:	b25b      	sxtb	r3, r3
 8011db0:	f003 030f 	and.w	r3, r3, #15
 8011db4:	b2d9      	uxtb	r1, r3
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011dbc:	f361 0303 	bfi	r3, r1, #0, #4
 8011dc0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	7dfa      	ldrb	r2, [r7, #23]
 8011dc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00b      	beq.n	8011dee <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	3246      	adds	r2, #70	; 0x46
 8011de0:	4611      	mov	r1, r2
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	4798      	blx	r3
 8011de6:	e002      	b.n	8011dee <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 8011de8:	bf00      	nop
 8011dea:	e000      	b.n	8011dee <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 8011dec:	bf00      	nop
}
 8011dee:	3718      	adds	r7, #24
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 8011df4:	b480      	push	{r7}
 8011df6:	b085      	sub	sp, #20
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	73fb      	strb	r3, [r7, #15]
 8011e00:	7bfb      	ldrb	r3, [r7, #15]
 8011e02:	2b03      	cmp	r3, #3
 8011e04:	d808      	bhi.n	8011e18 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 8011e06:	7bfb      	ldrb	r3, [r7, #15]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	227f      	movs	r2, #127	; 0x7f
 8011e0e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 8011e10:	7bfb      	ldrb	r3, [r7, #15]
 8011e12:	3301      	adds	r3, #1
 8011e14:	73fb      	strb	r3, [r7, #15]
 8011e16:	e7f3      	b.n	8011e00 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 8011e18:	687a      	ldr	r2, [r7, #4]
 8011e1a:	6893      	ldr	r3, [r2, #8]
 8011e1c:	f36f 0317 	bfc	r3, #0, #24
 8011e20:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011e26:	f36f 0317 	bfc	r3, #0, #24
 8011e2a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	73fb      	strb	r3, [r7, #15]
 8011e30:	7bfb      	ldrb	r3, [r7, #15]
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d808      	bhi.n	8011e48 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 8011e36:	7bfb      	ldrb	r3, [r7, #15]
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
 8011e42:	3301      	adds	r3, #1
 8011e44:	73fb      	strb	r3, [r7, #15]
 8011e46:	e7f3      	b.n	8011e30 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011e48:	2300      	movs	r3, #0
 8011e4a:	73fb      	strb	r3, [r7, #15]
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d81b      	bhi.n	8011e8a <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011e52:	2300      	movs	r3, #0
 8011e54:	73bb      	strb	r3, [r7, #14]
 8011e56:	7bbb      	ldrb	r3, [r7, #14]
 8011e58:	2b01      	cmp	r3, #1
 8011e5a:	d812      	bhi.n	8011e82 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 8011e5c:	7bfa      	ldrb	r2, [r7, #15]
 8011e5e:	7bbb      	ldrb	r3, [r7, #14]
 8011e60:	6879      	ldr	r1, [r7, #4]
 8011e62:	0098      	lsls	r0, r3, #2
 8011e64:	4613      	mov	r3, r2
 8011e66:	00db      	lsls	r3, r3, #3
 8011e68:	4413      	add	r3, r2
 8011e6a:	4403      	add	r3, r0
 8011e6c:	440b      	add	r3, r1
 8011e6e:	f103 0220 	add.w	r2, r3, #32
 8011e72:	7993      	ldrb	r3, [r2, #6]
 8011e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e78:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 8011e7a:	7bbb      	ldrb	r3, [r7, #14]
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	73bb      	strb	r3, [r7, #14]
 8011e80:	e7e9      	b.n	8011e56 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 8011e82:	7bfb      	ldrb	r3, [r7, #15]
 8011e84:	3301      	adds	r3, #1
 8011e86:	73fb      	strb	r3, [r7, #15]
 8011e88:	e7e0      	b.n	8011e4c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	7a13      	ldrb	r3, [r2, #8]
 8011e8e:	2108      	movs	r1, #8
 8011e90:	f361 0303 	bfi	r3, r1, #0, #4
 8011e94:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 8011e9c:	2108      	movs	r1, #8
 8011e9e:	f361 0303 	bfi	r3, r1, #0, #4
 8011ea2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 8011eac:	f36f 0303 	bfc	r3, #0, #4
 8011eb0:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 8011f0c:	bf00      	nop
 8011f0e:	3714      	adds	r7, #20
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	2180      	movs	r1, #128	; 0x80
 8011f1e:	4803      	ldr	r0, [pc, #12]	; (8011f2c <_ZN2P95IsSetEv+0x14>)
 8011f20:	f7f0 ffaa 	bl	8002e78 <HAL_GPIO_ReadPin>
 8011f24:	4603      	mov	r3, r0
 8011f26:	4618      	mov	r0, r3
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	40020800 	.word	0x40020800

08011f30 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f001 f9bb 	bl	80132b4 <_ZN8MAX3421eI3P102P9EC1Ev>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f001 f9d3 	bl	80132ec <_ZN15AddressPoolImplILh16EEC1Ev>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 8011f4e:	4b05      	ldr	r3, [pc, #20]	; (8011f64 <_ZN3USBC1Ev+0x34>)
 8011f50:	2211      	movs	r2, #17
 8011f52:	701a      	strb	r2, [r3, #0]
        init();
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 f807 	bl	8011f68 <_ZN3USB4initEv>
}
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	200053f9 	.word	0x200053f9

08011f68 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 8011f78:	bf00      	nop
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr

08011f84 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b086      	sub	sp, #24
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	70fb      	strb	r3, [r7, #3]
 8011f90:	4613      	mov	r3, r2
 8011f92:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	78fa      	ldrb	r2, [r7, #3]
 8011f98:	4611      	mov	r1, r2
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f001 f9e0 	bl	8013360 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8011fa0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d003      	beq.n	8011fb0 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d101      	bne.n	8011fb4 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	e018      	b.n	8011fe6 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 8011fba:	2300      	movs	r3, #0
 8011fbc:	74fb      	strb	r3, [r7, #19]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	795b      	ldrb	r3, [r3, #5]
 8011fc2:	7cfa      	ldrb	r2, [r7, #19]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d20d      	bcs.n	8011fe4 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	78ba      	ldrb	r2, [r7, #2]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d101      	bne.n	8011fd6 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	e007      	b.n	8011fe6 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	3303      	adds	r3, #3
 8011fda:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 8011fdc:	7cfb      	ldrb	r3, [r7, #19]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	74fb      	strb	r3, [r7, #19]
 8011fe2:	e7ec      	b.n	8011fbe <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}

08011fee <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 8011fee:	b580      	push	{r7, lr}
 8011ff0:	b086      	sub	sp, #24
 8011ff2:	af00      	add	r7, sp, #0
 8011ff4:	60f8      	str	r0, [r7, #12]
 8011ff6:	607b      	str	r3, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	72fb      	strb	r3, [r7, #11]
 8011ffc:	4613      	mov	r3, r2
 8011ffe:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 8012006:	23d8      	movs	r3, #216	; 0xd8
 8012008:	e015      	b.n	8012036 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	7afa      	ldrb	r2, [r7, #11]
 801200e:	4611      	mov	r1, r2
 8012010:	4618      	mov	r0, r3
 8012012:	f001 f9a5 	bl	8013360 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012016:	6178      	str	r0, [r7, #20]

        if(!p)
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d101      	bne.n	8012022 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 801201e:	23d6      	movs	r3, #214	; 0xd6
 8012020:	e009      	b.n	8012036 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	7afa      	ldrb	r2, [r7, #11]
 8012026:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	7aba      	ldrb	r2, [r7, #10]
 8012032:	715a      	strb	r2, [r3, #5]

        return 0;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	3718      	adds	r7, #24
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}

0801203e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 801203e:	b580      	push	{r7, lr}
 8012040:	b086      	sub	sp, #24
 8012042:	af00      	add	r7, sp, #0
 8012044:	60f8      	str	r0, [r7, #12]
 8012046:	607b      	str	r3, [r7, #4]
 8012048:	460b      	mov	r3, r1
 801204a:	72fb      	strb	r3, [r7, #11]
 801204c:	4613      	mov	r3, r2
 801204e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	7afa      	ldrb	r2, [r7, #11]
 8012054:	4611      	mov	r1, r2
 8012056:	4618      	mov	r0, r3
 8012058:	f001 f982 	bl	8013360 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 801205c:	6178      	str	r0, [r7, #20]

        if(!p)
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d101      	bne.n	8012068 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012064:	23d6      	movs	r3, #214	; 0xd6
 8012066:	e04e      	b.n	8012106 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d101      	bne.n	8012074 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 8012070:	23d7      	movs	r3, #215	; 0xd7
 8012072:	e048      	b.n	8012106 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 8012074:	7aba      	ldrb	r2, [r7, #10]
 8012076:	7afb      	ldrb	r3, [r7, #11]
 8012078:	4619      	mov	r1, r3
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f7ff ff82 	bl	8011f84 <_ZN3USB14getEpInfoEntryEhh>
 8012080:	4602      	mov	r2, r0
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d101      	bne.n	8012092 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 801208e:	23db      	movs	r3, #219	; 0xdb
 8012090:	e039      	b.n	8012106 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	789b      	ldrb	r3, [r3, #2]
 8012098:	f3c3 0385 	ubfx	r3, r3, #2, #6
 801209c:	b2db      	uxtb	r3, r3
 801209e:	2b0f      	cmp	r3, #15
 80120a0:	bf28      	it	cs
 80120a2:	230f      	movcs	r3, #15
 80120a4:	b2db      	uxtb	r3, r3
 80120a6:	461a      	mov	r2, r3
 80120a8:	2301      	movs	r3, #1
 80120aa:	4093      	lsls	r3, r2
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	6a3b      	ldr	r3, [r7, #32]
 80120b0:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	881b      	ldrh	r3, [r3, #0]
 80120b6:	3b01      	subs	r3, #1
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	6a3b      	ldr	r3, [r7, #32]
 80120bc:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 80120be:	7afb      	ldrb	r3, [r7, #11]
 80120c0:	461a      	mov	r2, r3
 80120c2:	21e0      	movs	r1, #224	; 0xe0
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f7ef ff21 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 80120ca:	21d8      	movs	r1, #216	; 0xd8
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f7ef ff6f 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80120d2:	4603      	mov	r3, r0
 80120d4:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	799b      	ldrb	r3, [r3, #6]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d009      	beq.n	80120f2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 80120e4:	7cfb      	ldrb	r3, [r7, #19]
 80120e6:	4313      	orrs	r3, r2
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	f043 0302 	orr.w	r3, r3, #2
 80120ee:	b2db      	uxtb	r3, r3
 80120f0:	e003      	b.n	80120fa <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 80120f2:	7cfb      	ldrb	r3, [r7, #19]
 80120f4:	f023 0306 	bic.w	r3, r3, #6
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	461a      	mov	r2, r3
 80120fc:	21d8      	movs	r1, #216	; 0xd8
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f7ef ff04 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3718      	adds	r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 801210e:	b590      	push	{r4, r7, lr}
 8012110:	b08b      	sub	sp, #44	; 0x2c
 8012112:	af02      	add	r7, sp, #8
 8012114:	6078      	str	r0, [r7, #4]
 8012116:	4608      	mov	r0, r1
 8012118:	4611      	mov	r1, r2
 801211a:	461a      	mov	r2, r3
 801211c:	4603      	mov	r3, r0
 801211e:	70fb      	strb	r3, [r7, #3]
 8012120:	460b      	mov	r3, r1
 8012122:	70bb      	strb	r3, [r7, #2]
 8012124:	4613      	mov	r3, r2
 8012126:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 8012128:	2300      	movs	r3, #0
 801212a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 801212c:	2300      	movs	r3, #0
 801212e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 8012130:	2300      	movs	r3, #0
 8012132:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 8012134:	f107 000c 	add.w	r0, r7, #12
 8012138:	78ba      	ldrb	r2, [r7, #2]
 801213a:	78f9      	ldrb	r1, [r7, #3]
 801213c:	f107 030a 	add.w	r3, r7, #10
 8012140:	9300      	str	r3, [sp, #0]
 8012142:	4603      	mov	r3, r0
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7ff ff7a 	bl	801203e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 801214a:	4603      	mov	r3, r0
 801214c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 801214e:	7ffb      	ldrb	r3, [r7, #31]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d001      	beq.n	8012158 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 8012154:	7ffb      	ldrb	r3, [r7, #31]
 8012156:	e0ae      	b.n	80122b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 8012158:	787b      	ldrb	r3, [r7, #1]
 801215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801215e:	2b00      	cmp	r3, #0
 8012160:	bfcc      	ite	gt
 8012162:	2301      	movgt	r3, #1
 8012164:	2300      	movle	r3, #0
 8012166:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8012168:	787b      	ldrb	r3, [r7, #1]
 801216a:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 801216c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8012170:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 8012172:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012176:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 8012178:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801217c:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 801217e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012180:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 8012182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012186:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 8012188:	f107 0310 	add.w	r3, r7, #16
 801218c:	2208      	movs	r2, #8
 801218e:	2120      	movs	r1, #32
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f001 f90b 	bl	80133ac <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 8012196:	897b      	ldrh	r3, [r7, #10]
 8012198:	78ba      	ldrb	r2, [r7, #2]
 801219a:	2110      	movs	r1, #16
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f000 faf2 	bl	8012786 <_ZN3USB11dispatchPktEhht>
 80121a2:	4603      	mov	r3, r0
 80121a4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 80121a6:	7ffb      	ldrb	r3, [r7, #31]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d001      	beq.n	80121b0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 80121ac:	7ffb      	ldrb	r3, [r7, #31]
 80121ae:	e082      	b.n	80122b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 80121b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d072      	beq.n	801229c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 80121b6:	7efb      	ldrb	r3, [r7, #27]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d057      	beq.n	801226c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 80121bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80121c0:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	7893      	ldrb	r3, [r2, #2]
 80121c6:	f043 0302 	orr.w	r3, r3, #2
 80121ca:	7093      	strb	r3, [r2, #2]

                        while(left) {
 80121cc:	8bbb      	ldrh	r3, [r7, #28]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d05f      	beq.n	8012292 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 80121d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80121d6:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 80121d8:	68f9      	ldr	r1, [r7, #12]
 80121da:	897a      	ldrh	r2, [r7, #10]
 80121dc:	f107 0008 	add.w	r0, r7, #8
 80121e0:	2300      	movs	r3, #0
 80121e2:	9301      	str	r3, [sp, #4]
 80121e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	4603      	mov	r3, r0
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 f8a6 	bl	801233c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 80121f0:	4603      	mov	r3, r0
 80121f2:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 80121f4:	7ffb      	ldrb	r3, [r7, #31]
 80121f6:	2b06      	cmp	r3, #6
 80121f8:	d114      	bne.n	8012224 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 80121fa:	21f8      	movs	r1, #248	; 0xf8
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f7ef fed7 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012202:	4603      	mov	r3, r0
 8012204:	f003 0320 	and.w	r3, r3, #32
 8012208:	2b00      	cmp	r3, #0
 801220a:	bf0c      	ite	eq
 801220c:	2301      	moveq	r3, #1
 801220e:	2300      	movne	r3, #0
 8012210:	b2db      	uxtb	r3, r3
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	b2d9      	uxtb	r1, r3
 801221a:	7893      	ldrb	r3, [r2, #2]
 801221c:	f361 0341 	bfi	r3, r1, #1, #1
 8012220:	7093      	strb	r3, [r2, #2]
 8012222:	e7d3      	b.n	80121cc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 8012224:	7ffb      	ldrb	r3, [r7, #31]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d001      	beq.n	801222e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 801222a:	7ffb      	ldrb	r3, [r7, #31]
 801222c:	e043      	b.n	80122b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 801222e:	7ffb      	ldrb	r3, [r7, #31]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d111      	bne.n	8012258 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 8012234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012236:	2b00      	cmp	r3, #0
 8012238:	d00e      	beq.n	8012258 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 801223a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	681c      	ldr	r4, [r3, #0]
 8012240:	8939      	ldrh	r1, [r7, #8]
 8012242:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012246:	8bbb      	ldrh	r3, [r7, #28]
 8012248:	1ad3      	subs	r3, r2, r3
 801224a:	b29b      	uxth	r3, r3
 801224c:	833b      	strh	r3, [r7, #24]
 801224e:	f107 0318 	add.w	r3, r7, #24
 8012252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012254:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012256:	47a0      	blx	r4

                                left -= read;
 8012258:	893b      	ldrh	r3, [r7, #8]
 801225a:	8bba      	ldrh	r2, [r7, #28]
 801225c:	1ad3      	subs	r3, r2, r3
 801225e:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 8012260:	893b      	ldrh	r3, [r7, #8]
 8012262:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012266:	429a      	cmp	r2, r3
 8012268:	d812      	bhi.n	8012290 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 801226a:	e7af      	b.n	80121cc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 801226c:	68fa      	ldr	r2, [r7, #12]
 801226e:	7893      	ldrb	r3, [r2, #2]
 8012270:	f043 0301 	orr.w	r3, r3, #1
 8012274:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 8012276:	68f9      	ldr	r1, [r7, #12]
 8012278:	897a      	ldrh	r2, [r7, #10]
 801227a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 801227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	4603      	mov	r3, r0
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 f953 	bl	8012530 <_ZN3USB11OutTransferEP6EpInfottPh>
 801228a:	4603      	mov	r3, r0
 801228c:	77fb      	strb	r3, [r7, #31]
 801228e:	e000      	b.n	8012292 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 8012290:	bf00      	nop
                }
                if(rcode) //return error
 8012292:	7ffb      	ldrb	r3, [r7, #31]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d001      	beq.n	801229c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 8012298:	7ffb      	ldrb	r3, [r7, #31]
 801229a:	e00c      	b.n	80122b6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 801229c:	7efb      	ldrb	r3, [r7, #27]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d001      	beq.n	80122a6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 80122a2:	21a0      	movs	r1, #160	; 0xa0
 80122a4:	e000      	b.n	80122a8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 80122a6:	2180      	movs	r1, #128	; 0x80
 80122a8:	897b      	ldrh	r3, [r7, #10]
 80122aa:	78ba      	ldrb	r2, [r7, #2]
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 fa6a 	bl	8012786 <_ZN3USB11dispatchPktEhht>
 80122b2:	4603      	mov	r3, r0
 80122b4:	bf00      	nop
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3724      	adds	r7, #36	; 0x24
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd90      	pop	{r4, r7, pc}

080122be <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 80122be:	b580      	push	{r7, lr}
 80122c0:	b08a      	sub	sp, #40	; 0x28
 80122c2:	af02      	add	r7, sp, #8
 80122c4:	60f8      	str	r0, [r7, #12]
 80122c6:	607b      	str	r3, [r7, #4]
 80122c8:	460b      	mov	r3, r1
 80122ca:	72fb      	strb	r3, [r7, #11]
 80122cc:	4613      	mov	r3, r2
 80122ce:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 80122d0:	2300      	movs	r3, #0
 80122d2:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 80122d4:	2300      	movs	r3, #0
 80122d6:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80122d8:	f107 0018 	add.w	r0, r7, #24
 80122dc:	7aba      	ldrb	r2, [r7, #10]
 80122de:	7af9      	ldrb	r1, [r7, #11]
 80122e0:	f107 0316 	add.w	r3, r7, #22
 80122e4:	9300      	str	r3, [sp, #0]
 80122e6:	4603      	mov	r3, r0
 80122e8:	68f8      	ldr	r0, [r7, #12]
 80122ea:	f7ff fea8 	bl	801203e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 80122ee:	4603      	mov	r3, r0
 80122f0:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 80122f2:	7ffb      	ldrb	r3, [r7, #31]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d010      	beq.n	801231a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 80122f8:	7ffb      	ldrb	r3, [r7, #31]
 80122fa:	2181      	movs	r1, #129	; 0x81
 80122fc:	4618      	mov	r0, r3
 80122fe:	f001 f883 	bl	8013408 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 8012302:	7afb      	ldrb	r3, [r7, #11]
 8012304:	2181      	movs	r1, #129	; 0x81
 8012306:	4618      	mov	r0, r3
 8012308:	f001 f87e 	bl	8013408 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 801230c:	7abb      	ldrb	r3, [r7, #10]
 801230e:	2181      	movs	r1, #129	; 0x81
 8012310:	4618      	mov	r0, r3
 8012312:	f001 f879 	bl	8013408 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 8012316:	7ffb      	ldrb	r3, [r7, #31]
 8012318:	e00c      	b.n	8012334 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 801231a:	69b9      	ldr	r1, [r7, #24]
 801231c:	8afa      	ldrh	r2, [r7, #22]
 801231e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012322:	9301      	str	r3, [sp, #4]
 8012324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	68f8      	ldr	r0, [r7, #12]
 801232c:	f000 f806 	bl	801233c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 8012330:	4603      	mov	r3, r0
 8012332:	bf00      	nop
}
 8012334:	4618      	mov	r0, r3
 8012336:	3720      	adds	r7, #32
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 801233c:	b580      	push	{r7, lr}
 801233e:	b086      	sub	sp, #24
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	603b      	str	r3, [r7, #0]
 8012348:	4613      	mov	r3, r2
 801234a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 801234c:	2300      	movs	r3, #0
 801234e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	881b      	ldrh	r3, [r3, #0]
 8012354:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	785b      	ldrb	r3, [r3, #1]
 801235a:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	2200      	movs	r2, #0
 8012360:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	789b      	ldrb	r3, [r3, #2]
 8012366:	f003 0302 	and.w	r3, r3, #2
 801236a:	b2db      	uxtb	r3, r3
 801236c:	2b00      	cmp	r3, #0
 801236e:	d001      	beq.n	8012374 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 8012370:	2320      	movs	r3, #32
 8012372:	e000      	b.n	8012376 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 8012374:	2310      	movs	r3, #16
 8012376:	461a      	mov	r2, r3
 8012378:	21e8      	movs	r1, #232	; 0xe8
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7ef fdc6 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	781a      	ldrb	r2, [r3, #0]
 8012384:	88fb      	ldrh	r3, [r7, #6]
 8012386:	2100      	movs	r1, #0
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f000 f9fc 	bl	8012786 <_ZN3USB11dispatchPktEhht>
 801238e:	4603      	mov	r3, r0
 8012390:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 8012392:	7dfb      	ldrb	r3, [r7, #23]
 8012394:	2b06      	cmp	r3, #6
 8012396:	d123      	bne.n	80123e0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 8012398:	21f8      	movs	r1, #248	; 0xf8
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f7ef fe08 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123a0:	4603      	mov	r3, r0
 80123a2:	f003 0310 	and.w	r3, r3, #16
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	bf0c      	ite	eq
 80123aa:	2301      	moveq	r3, #1
 80123ac:	2300      	movne	r3, #0
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	f003 0301 	and.w	r3, r3, #1
 80123b4:	b2d9      	uxtb	r1, r3
 80123b6:	68ba      	ldr	r2, [r7, #8]
 80123b8:	7893      	ldrb	r3, [r2, #2]
 80123ba:	f361 0341 	bfi	r3, r1, #1, #1
 80123be:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	789b      	ldrb	r3, [r3, #2]
 80123c4:	f003 0302 	and.w	r3, r3, #2
 80123c8:	b2db      	uxtb	r3, r3
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d001      	beq.n	80123d2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 80123ce:	2320      	movs	r3, #32
 80123d0:	e000      	b.n	80123d4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 80123d2:	2310      	movs	r3, #16
 80123d4:	461a      	mov	r2, r3
 80123d6:	21e8      	movs	r1, #232	; 0xe8
 80123d8:	68f8      	ldr	r0, [r7, #12]
 80123da:	f7ef fd97 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 80123de:	e06e      	b.n	80124be <_ZN3USB10InTransferEP6EpInfotPtPhh+0x182>
                }
                if(rcode) {
 80123e0:	7dfb      	ldrb	r3, [r7, #23]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d16c      	bne.n	80124c0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x184>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 80123e6:	21c8      	movs	r1, #200	; 0xc8
 80123e8:	68f8      	ldr	r0, [r7, #12]
 80123ea:	f7ef fde1 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80123ee:	4603      	mov	r3, r0
 80123f0:	f003 0304 	and.w	r3, r3, #4
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	bf0c      	ite	eq
 80123f8:	2301      	moveq	r3, #1
 80123fa:	2300      	movne	r3, #0
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d002      	beq.n	8012408 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 8012402:	23f0      	movs	r3, #240	; 0xf0
 8012404:	75fb      	strb	r3, [r7, #23]
                        break;
 8012406:	e05c      	b.n	80124c2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 8012408:	2130      	movs	r1, #48	; 0x30
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f7ef fdd0 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012410:	4603      	mov	r3, r0
 8012412:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 8012414:	7dba      	ldrb	r2, [r7, #22]
 8012416:	8a7b      	ldrh	r3, [r7, #18]
 8012418:	429a      	cmp	r2, r3
 801241a:	dd01      	ble.n	8012420 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 801241c:	8a7b      	ldrh	r3, [r7, #18]
 801241e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 8012420:	683b      	ldr	r3, [r7, #0]
 8012422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012426:	b29b      	uxth	r3, r3
 8012428:	8a7a      	ldrh	r2, [r7, #18]
 801242a:	1ad3      	subs	r3, r2, r3
 801242c:	b29b      	uxth	r3, r3
 801242e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 8012430:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012434:	2b00      	cmp	r3, #0
 8012436:	da01      	bge.n	801243c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 8012438:	2300      	movs	r3, #0
 801243a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 801243c:	7dba      	ldrb	r2, [r7, #22]
 801243e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012442:	4293      	cmp	r3, r2
 8012444:	bfa8      	it	ge
 8012446:	4613      	movge	r3, r2
 8012448:	b2da      	uxtb	r2, r3
 801244a:	6a3b      	ldr	r3, [r7, #32]
 801244c:	2108      	movs	r1, #8
 801244e:	68f8      	ldr	r0, [r7, #12]
 8012450:	f000 ffe6 	bl	8013420 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 8012454:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 8012456:	2204      	movs	r2, #4
 8012458:	21c8      	movs	r1, #200	; 0xc8
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f7ef fd56 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	881a      	ldrh	r2, [r3, #0]
 8012464:	7dbb      	ldrb	r3, [r7, #22]
 8012466:	b29b      	uxth	r3, r3
 8012468:	4413      	add	r3, r2
 801246a:	b29a      	uxth	r2, r3
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 8012470:	7dba      	ldrb	r2, [r7, #22]
 8012472:	7c7b      	ldrb	r3, [r7, #17]
 8012474:	429a      	cmp	r2, r3
 8012476:	d304      	bcc.n	8012482 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	881b      	ldrh	r3, [r3, #0]
 801247c:	8a7a      	ldrh	r2, [r7, #18]
 801247e:	429a      	cmp	r2, r3
 8012480:	d813      	bhi.n	80124aa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 8012482:	21f8      	movs	r1, #248	; 0xf8
 8012484:	68f8      	ldr	r0, [r7, #12]
 8012486:	f7ef fd93 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801248a:	4603      	mov	r3, r0
 801248c:	f003 0310 	and.w	r3, r3, #16
 8012490:	2b00      	cmp	r3, #0
 8012492:	d001      	beq.n	8012498 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 8012494:	2101      	movs	r1, #1
 8012496:	e000      	b.n	801249a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 8012498:	2100      	movs	r1, #0
 801249a:	68ba      	ldr	r2, [r7, #8]
 801249c:	7893      	ldrb	r3, [r2, #2]
 801249e:	f361 0341 	bfi	r3, r1, #1, #1
 80124a2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 80124a4:	2300      	movs	r3, #0
 80124a6:	75fb      	strb	r3, [r7, #23]
                        break;
 80124a8:	e00b      	b.n	80124c2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x186>
                } else if(bInterval > 0)
 80124aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f43f af66 	beq.w	8012380 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 80124b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f0 fa43 	bl	8002944 <HAL_Delay>
        } //while( 1 )
 80124be:	e75f      	b.n	8012380 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 80124c0:	bf00      	nop
        return ( rcode);
 80124c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80124c4:	4618      	mov	r0, r3
 80124c6:	3718      	adds	r7, #24
 80124c8:	46bd      	mov	sp, r7
 80124ca:	bd80      	pop	{r7, pc}

080124cc <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b088      	sub	sp, #32
 80124d0:	af02      	add	r7, sp, #8
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	4608      	mov	r0, r1
 80124d6:	4611      	mov	r1, r2
 80124d8:	461a      	mov	r2, r3
 80124da:	4603      	mov	r3, r0
 80124dc:	70fb      	strb	r3, [r7, #3]
 80124de:	460b      	mov	r3, r1
 80124e0:	70bb      	strb	r3, [r7, #2]
 80124e2:	4613      	mov	r3, r2
 80124e4:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 80124e6:	2300      	movs	r3, #0
 80124e8:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 80124ea:	2300      	movs	r3, #0
 80124ec:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 80124ee:	f107 0010 	add.w	r0, r7, #16
 80124f2:	78ba      	ldrb	r2, [r7, #2]
 80124f4:	78f9      	ldrb	r1, [r7, #3]
 80124f6:	f107 030e 	add.w	r3, r7, #14
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	4603      	mov	r3, r0
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f7ff fd9d 	bl	801203e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 8012504:	4603      	mov	r3, r0
 8012506:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 8012508:	7dfb      	ldrb	r3, [r7, #23]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d001      	beq.n	8012512 <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 801250e:	7dfb      	ldrb	r3, [r7, #23]
 8012510:	e00a      	b.n	8012528 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 8012512:	6939      	ldr	r1, [r7, #16]
 8012514:	89fa      	ldrh	r2, [r7, #14]
 8012516:	8838      	ldrh	r0, [r7, #0]
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	9300      	str	r3, [sp, #0]
 801251c:	4603      	mov	r3, r0
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 f806 	bl	8012530 <_ZN3USB11OutTransferEP6EpInfottPh>
 8012524:	4603      	mov	r3, r0
 8012526:	bf00      	nop
}
 8012528:	4618      	mov	r0, r3
 801252a:	3718      	adds	r7, #24
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 8012530:	b580      	push	{r7, lr}
 8012532:	b08a      	sub	sp, #40	; 0x28
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	4611      	mov	r1, r2
 801253c:	461a      	mov	r2, r3
 801253e:	460b      	mov	r3, r1
 8012540:	80fb      	strh	r3, [r7, #6]
 8012542:	4613      	mov	r3, r2
 8012544:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 8012546:	2300      	movs	r3, #0
 8012548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 801254c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801254e:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 8012550:	88bb      	ldrh	r3, [r7, #4]
 8012552:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	785b      	ldrb	r3, [r3, #1]
 8012558:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 801255a:	7efb      	ldrb	r3, [r7, #27]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d002      	beq.n	8012566 <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 8012560:	7efb      	ldrb	r3, [r7, #27]
 8012562:	2b40      	cmp	r3, #64	; 0x40
 8012564:	d901      	bls.n	801256a <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 8012566:	23da      	movs	r3, #218	; 0xda
 8012568:	e109      	b.n	801277e <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 801256a:	f7f0 f9df 	bl	800292c <HAL_GetTick>
 801256e:	4603      	mov	r3, r0
 8012570:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012574:	3308      	adds	r3, #8
 8012576:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	789b      	ldrb	r3, [r3, #2]
 801257c:	f003 0301 	and.w	r3, r3, #1
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2b00      	cmp	r3, #0
 8012584:	d001      	beq.n	801258a <_ZN3USB11OutTransferEP6EpInfottPh+0x5a>
 8012586:	2380      	movs	r3, #128	; 0x80
 8012588:	e000      	b.n	801258c <_ZN3USB11OutTransferEP6EpInfottPh+0x5c>
 801258a:	2340      	movs	r3, #64	; 0x40
 801258c:	461a      	mov	r2, r3
 801258e:	21e8      	movs	r1, #232	; 0xe8
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f7ef fcbb 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 8012596:	8bbb      	ldrh	r3, [r7, #28]
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 80da 	beq.w	8012752 <_ZN3USB11OutTransferEP6EpInfottPh+0x222>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 80125a4:	2300      	movs	r3, #0
 80125a6:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 80125a8:	7efb      	ldrb	r3, [r7, #27]
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	8bba      	ldrh	r2, [r7, #28]
 80125ae:	4293      	cmp	r3, r2
 80125b0:	bf28      	it	cs
 80125b2:	4613      	movcs	r3, r2
 80125b4:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 80125b6:	8a7b      	ldrh	r3, [r7, #18]
 80125b8:	b2da      	uxtb	r2, r3
 80125ba:	6a3b      	ldr	r3, [r7, #32]
 80125bc:	2110      	movs	r1, #16
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f000 fef4 	bl	80133ac <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 80125c4:	8a7b      	ldrh	r3, [r7, #18]
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	461a      	mov	r2, r3
 80125ca:	2138      	movs	r1, #56	; 0x38
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f7ef fc9d 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	f043 0320 	orr.w	r3, r3, #32
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	461a      	mov	r2, r3
 80125de:	21f0      	movs	r1, #240	; 0xf0
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	f7ef fc93 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 80125e6:	21c8      	movs	r1, #200	; 0xc8
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f7ef fce1 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80125ee:	4603      	mov	r3, r0
 80125f0:	b25b      	sxtb	r3, r3
 80125f2:	43db      	mvns	r3, r3
 80125f4:	b2db      	uxtb	r3, r3
 80125f6:	09db      	lsrs	r3, r3, #7
 80125f8:	b2db      	uxtb	r3, r3
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d000      	beq.n	8012600 <_ZN3USB11OutTransferEP6EpInfottPh+0xd0>
 80125fe:	e7f2      	b.n	80125e6 <_ZN3USB11OutTransferEP6EpInfottPh+0xb6>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012600:	2280      	movs	r2, #128	; 0x80
 8012602:	21c8      	movs	r1, #200	; 0xc8
 8012604:	68f8      	ldr	r0, [r7, #12]
 8012606:	f7ef fc81 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 801260a:	21f8      	movs	r1, #248	; 0xf8
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7ef fccf 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012612:	4603      	mov	r3, r0
 8012614:	f003 030f 	and.w	r3, r3, #15
 8012618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012620:	2b00      	cmp	r3, #0
 8012622:	d008      	beq.n	8012636 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012624:	f7f0 f982 	bl	800292c <HAL_GetTick>
 8012628:	4602      	mov	r2, r0
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	1ad3      	subs	r3, r2, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	da01      	bge.n	8012636 <_ZN3USB11OutTransferEP6EpInfottPh+0x106>
 8012632:	2301      	movs	r3, #1
 8012634:	e000      	b.n	8012638 <_ZN3USB11OutTransferEP6EpInfottPh+0x108>
 8012636:	2300      	movs	r3, #0
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 8081 	beq.w	8012740 <_ZN3USB11OutTransferEP6EpInfottPh+0x210>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 801263e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012642:	2b0e      	cmp	r3, #14
 8012644:	d012      	beq.n	801266c <_ZN3USB11OutTransferEP6EpInfottPh+0x13c>
 8012646:	2b0e      	cmp	r3, #14
 8012648:	f300 8085 	bgt.w	8012756 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
 801264c:	2b04      	cmp	r3, #4
 801264e:	d002      	beq.n	8012656 <_ZN3USB11OutTransferEP6EpInfottPh+0x126>
 8012650:	2b06      	cmp	r3, #6
 8012652:	d015      	beq.n	8012680 <_ZN3USB11OutTransferEP6EpInfottPh+0x150>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 8012654:	e07f      	b.n	8012756 <_ZN3USB11OutTransferEP6EpInfottPh+0x226>
                                        nak_count++;
 8012656:	8bfb      	ldrh	r3, [r7, #30]
 8012658:	3301      	adds	r3, #1
 801265a:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 801265c:	88fb      	ldrh	r3, [r7, #6]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d032      	beq.n	80126c8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
 8012662:	8bfa      	ldrh	r2, [r7, #30]
 8012664:	88fb      	ldrh	r3, [r7, #6]
 8012666:	429a      	cmp	r2, r3
 8012668:	d12e      	bne.n	80126c8 <_ZN3USB11OutTransferEP6EpInfottPh+0x198>
                                                goto breakout;
 801266a:	e075      	b.n	8012758 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        retry_count++;
 801266c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012670:	3301      	adds	r3, #1
 8012672:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 8012676:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801267a:	2b03      	cmp	r3, #3
 801267c:	d126      	bne.n	80126cc <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
                                                goto breakout;
 801267e:	e06b      	b.n	8012758 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 8012680:	21f8      	movs	r1, #248	; 0xf8
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	f7ef fc94 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012688:	4603      	mov	r3, r0
 801268a:	f003 0320 	and.w	r3, r3, #32
 801268e:	2b00      	cmp	r3, #0
 8012690:	bf0c      	ite	eq
 8012692:	2301      	moveq	r3, #1
 8012694:	2300      	movne	r3, #0
 8012696:	b2db      	uxtb	r3, r3
 8012698:	f003 0301 	and.w	r3, r3, #1
 801269c:	b2d9      	uxtb	r1, r3
 801269e:	68ba      	ldr	r2, [r7, #8]
 80126a0:	7893      	ldrb	r3, [r2, #2]
 80126a2:	f361 0300 	bfi	r3, r1, #0, #1
 80126a6:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	789b      	ldrb	r3, [r3, #2]
 80126ac:	f003 0301 	and.w	r3, r3, #1
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <_ZN3USB11OutTransferEP6EpInfottPh+0x18a>
 80126b6:	2380      	movs	r3, #128	; 0x80
 80126b8:	e000      	b.n	80126bc <_ZN3USB11OutTransferEP6EpInfottPh+0x18c>
 80126ba:	2340      	movs	r3, #64	; 0x40
 80126bc:	461a      	mov	r2, r3
 80126be:	21e8      	movs	r1, #232	; 0xe8
 80126c0:	68f8      	ldr	r0, [r7, #12]
 80126c2:	f7ef fc23 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 80126c6:	e002      	b.n	80126ce <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80126c8:	bf00      	nop
 80126ca:	e000      	b.n	80126ce <_ZN3USB11OutTransferEP6EpInfottPh+0x19e>
                                        break;
 80126cc:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 80126ce:	2200      	movs	r2, #0
 80126d0:	2138      	movs	r1, #56	; 0x38
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7ef fc1a 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	781b      	ldrb	r3, [r3, #0]
 80126dc:	461a      	mov	r2, r3
 80126de:	2110      	movs	r1, #16
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f7ef fc13 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 80126e6:	8a7b      	ldrh	r3, [r7, #18]
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	461a      	mov	r2, r3
 80126ec:	2138      	movs	r1, #56	; 0x38
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	f7ef fc0c 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	f043 0320 	orr.w	r3, r3, #32
 80126fc:	b2db      	uxtb	r3, r3
 80126fe:	461a      	mov	r2, r3
 8012700:	21f0      	movs	r1, #240	; 0xf0
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7ef fc02 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 8012708:	21c8      	movs	r1, #200	; 0xc8
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f7ef fc50 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012710:	4603      	mov	r3, r0
 8012712:	b25b      	sxtb	r3, r3
 8012714:	43db      	mvns	r3, r3
 8012716:	b2db      	uxtb	r3, r3
 8012718:	09db      	lsrs	r3, r3, #7
 801271a:	b2db      	uxtb	r3, r3
 801271c:	2b00      	cmp	r3, #0
 801271e:	d000      	beq.n	8012722 <_ZN3USB11OutTransferEP6EpInfottPh+0x1f2>
 8012720:	e7f2      	b.n	8012708 <_ZN3USB11OutTransferEP6EpInfottPh+0x1d8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 8012722:	2280      	movs	r2, #128	; 0x80
 8012724:	21c8      	movs	r1, #200	; 0xc8
 8012726:	68f8      	ldr	r0, [r7, #12]
 8012728:	f7ef fbf0 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 801272c:	21f8      	movs	r1, #248	; 0xf8
 801272e:	68f8      	ldr	r0, [r7, #12]
 8012730:	f7ef fc3e 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012734:	4603      	mov	r3, r0
 8012736:	f003 030f 	and.w	r3, r3, #15
 801273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 801273e:	e76d      	b.n	801261c <_ZN3USB11OutTransferEP6EpInfottPh+0xec>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 8012740:	8bba      	ldrh	r2, [r7, #28]
 8012742:	8a7b      	ldrh	r3, [r7, #18]
 8012744:	1ad3      	subs	r3, r2, r3
 8012746:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 8012748:	8a7b      	ldrh	r3, [r7, #18]
 801274a:	6a3a      	ldr	r2, [r7, #32]
 801274c:	4413      	add	r3, r2
 801274e:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 8012750:	e721      	b.n	8012596 <_ZN3USB11OutTransferEP6EpInfottPh+0x66>
        }//while( bytes_left...
breakout:
 8012752:	bf00      	nop
 8012754:	e000      	b.n	8012758 <_ZN3USB11OutTransferEP6EpInfottPh+0x228>
                                        goto breakout;
 8012756:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 8012758:	21f8      	movs	r1, #248	; 0xf8
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f7ef fc28 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012760:	4603      	mov	r3, r0
 8012762:	f003 0320 	and.w	r3, r3, #32
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <_ZN3USB11OutTransferEP6EpInfottPh+0x23e>
 801276a:	2101      	movs	r1, #1
 801276c:	e000      	b.n	8012770 <_ZN3USB11OutTransferEP6EpInfottPh+0x240>
 801276e:	2100      	movs	r1, #0
 8012770:	68ba      	ldr	r2, [r7, #8]
 8012772:	7893      	ldrb	r3, [r2, #2]
 8012774:	f361 0300 	bfi	r3, r1, #0, #1
 8012778:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 801277a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801277e:	4618      	mov	r0, r3
 8012780:	3728      	adds	r7, #40	; 0x28
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}

08012786 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 8012786:	b580      	push	{r7, lr}
 8012788:	b086      	sub	sp, #24
 801278a:	af00      	add	r7, sp, #0
 801278c:	6078      	str	r0, [r7, #4]
 801278e:	4608      	mov	r0, r1
 8012790:	4611      	mov	r1, r2
 8012792:	461a      	mov	r2, r3
 8012794:	4603      	mov	r3, r0
 8012796:	70fb      	strb	r3, [r7, #3]
 8012798:	460b      	mov	r3, r1
 801279a:	70bb      	strb	r3, [r7, #2]
 801279c:	4613      	mov	r3, r2
 801279e:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 80127a0:	f7f0 f8c4 	bl	800292c <HAL_GetTick>
 80127a4:	4603      	mov	r3, r0
 80127a6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80127aa:	3308      	adds	r3, #8
 80127ac:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 80127ae:	2300      	movs	r3, #0
 80127b0:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 80127b2:	2300      	movs	r3, #0
 80127b4:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 80127ba:	f7f0 f8b7 	bl	800292c <HAL_GetTick>
 80127be:	4602      	mov	r2, r0
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	0fdb      	lsrs	r3, r3, #31
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d04c      	beq.n	8012866 <_ZN3USB11dispatchPktEhht+0xe0>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 80127cc:	78fa      	ldrb	r2, [r7, #3]
 80127ce:	78bb      	ldrb	r3, [r7, #2]
 80127d0:	4313      	orrs	r3, r2
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	461a      	mov	r2, r3
 80127d6:	21f0      	movs	r1, #240	; 0xf0
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f7ef fb97 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 80127de:	23ff      	movs	r3, #255	; 0xff
 80127e0:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 80127e2:	f7f0 f8a3 	bl	800292c <HAL_GetTick>
 80127e6:	4602      	mov	r2, r0
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	0fdb      	lsrs	r3, r3, #31
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d010      	beq.n	8012816 <_ZN3USB11dispatchPktEhht+0x90>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 80127f4:	21c8      	movs	r1, #200	; 0xc8
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7ef fbda 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80127fc:	4603      	mov	r3, r0
 80127fe:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 8012800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012804:	2b00      	cmp	r3, #0
 8012806:	daec      	bge.n	80127e2 <_ZN3USB11dispatchPktEhht+0x5c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 8012808:	2280      	movs	r2, #128	; 0x80
 801280a:	21c8      	movs	r1, #200	; 0xc8
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7ef fb7d 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 8012812:	2300      	movs	r3, #0
 8012814:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 8012816:	21f8      	movs	r1, #248	; 0xf8
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ef fbc9 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801281e:	4603      	mov	r3, r0
 8012820:	f003 030f 	and.w	r3, r3, #15
 8012824:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 8012826:	7dfb      	ldrb	r3, [r7, #23]
 8012828:	2b04      	cmp	r3, #4
 801282a:	d002      	beq.n	8012832 <_ZN3USB11dispatchPktEhht+0xac>
 801282c:	2b0e      	cmp	r3, #14
 801282e:	d00c      	beq.n	801284a <_ZN3USB11dispatchPktEhht+0xc4>
 8012830:	e013      	b.n	801285a <_ZN3USB11dispatchPktEhht+0xd4>
                        case hrNAK:
                                nak_count++;
 8012832:	8abb      	ldrh	r3, [r7, #20]
 8012834:	3301      	adds	r3, #1
 8012836:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 8012838:	883b      	ldrh	r3, [r7, #0]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00f      	beq.n	801285e <_ZN3USB11dispatchPktEhht+0xd8>
 801283e:	8aba      	ldrh	r2, [r7, #20]
 8012840:	883b      	ldrh	r3, [r7, #0]
 8012842:	429a      	cmp	r2, r3
 8012844:	d10b      	bne.n	801285e <_ZN3USB11dispatchPktEhht+0xd8>
                                        return (rcode);
 8012846:	7dfb      	ldrb	r3, [r7, #23]
 8012848:	e00e      	b.n	8012868 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 801284a:	7dbb      	ldrb	r3, [r7, #22]
 801284c:	3301      	adds	r3, #1
 801284e:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 8012850:	7dbb      	ldrb	r3, [r7, #22]
 8012852:	2b03      	cmp	r3, #3
 8012854:	d105      	bne.n	8012862 <_ZN3USB11dispatchPktEhht+0xdc>
                                        return (rcode);
 8012856:	7dfb      	ldrb	r3, [r7, #23]
 8012858:	e006      	b.n	8012868 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
                        default:
                                return (rcode);
 801285a:	7dfb      	ldrb	r3, [r7, #23]
 801285c:	e004      	b.n	8012868 <_ZN3USB11dispatchPktEhht+0xe2>
                                break;
 801285e:	bf00      	nop
 8012860:	e7ab      	b.n	80127ba <_ZN3USB11dispatchPktEhht+0x34>
                                break;
 8012862:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 8012864:	e7a9      	b.n	80127ba <_ZN3USB11dispatchPktEhht+0x34>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 8012866:	7dfb      	ldrb	r3, [r7, #23]
}
 8012868:	4618      	mov	r0, r3
 801286a:	3718      	adds	r7, #24
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 8012878:	2300      	movs	r3, #0
 801287a:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f000 fdfd 	bl	801347c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f000 fe12 	bl	80134ac <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 8012888:	4603      	mov	r3, r0
 801288a:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 801288c:	7b3b      	ldrb	r3, [r7, #12]
 801288e:	2b03      	cmp	r3, #3
 8012890:	d82e      	bhi.n	80128f0 <_ZN3USB4TaskEv+0x80>
 8012892:	a201      	add	r2, pc, #4	; (adr r2, 8012898 <_ZN3USB4TaskEv+0x28>)
 8012894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012898:	080128b5 	.word	0x080128b5
 801289c:	080128a9 	.word	0x080128a9
 80128a0:	080128d1 	.word	0x080128d1
 80128a4:	080128cd 	.word	0x080128cd
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 80128a8:	4bbf      	ldr	r3, [pc, #764]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 80128aa:	2213      	movs	r2, #19
 80128ac:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80128ae:	2300      	movs	r3, #0
 80128b0:	73fb      	strb	r3, [r7, #15]
                        break;
 80128b2:	e01d      	b.n	80128f0 <_ZN3USB4TaskEv+0x80>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 80128b4:	4bbc      	ldr	r3, [pc, #752]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128bc:	2b10      	cmp	r3, #16
 80128be:	d002      	beq.n	80128c6 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 80128c0:	4bb9      	ldr	r3, [pc, #740]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 80128c2:	2211      	movs	r2, #17
 80128c4:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 80128c6:	2300      	movs	r3, #0
 80128c8:	73fb      	strb	r3, [r7, #15]
                        break;
 80128ca:	e011      	b.n	80128f0 <_ZN3USB4TaskEv+0x80>
                case LSHOST:

                        lowspeed = true;
 80128cc:	2301      	movs	r3, #1
 80128ce:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 80128d0:	4bb5      	ldr	r3, [pc, #724]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128d8:	2b10      	cmp	r3, #16
 80128da:	d108      	bne.n	80128ee <_ZN3USB4TaskEv+0x7e>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 80128dc:	f7f0 f826 	bl	800292c <HAL_GetTick>
 80128e0:	4603      	mov	r3, r0
 80128e2:	33c8      	adds	r3, #200	; 0xc8
 80128e4:	4ab1      	ldr	r2, [pc, #708]	; (8012bac <_ZN3USB4TaskEv+0x33c>)
 80128e6:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80128e8:	4baf      	ldr	r3, [pc, #700]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 80128ea:	2220      	movs	r2, #32
 80128ec:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 80128ee:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 80128f0:	2300      	movs	r3, #0
 80128f2:	73bb      	strb	r3, [r7, #14]
 80128f4:	7bbb      	ldrb	r3, [r7, #14]
 80128f6:	2b0f      	cmp	r3, #15
 80128f8:	d81b      	bhi.n	8012932 <_ZN3USB4TaskEv+0xc2>
                if(devConfig[i])
 80128fa:	7bba      	ldrb	r2, [r7, #14]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	321e      	adds	r2, #30
 8012900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d010      	beq.n	801292a <_ZN3USB4TaskEv+0xba>
                        rcode = devConfig[i]->Poll();
 8012908:	7bba      	ldrb	r2, [r7, #14]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	321e      	adds	r2, #30
 801290e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012912:	7bba      	ldrb	r2, [r7, #14]
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	321e      	adds	r2, #30
 8012918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	330c      	adds	r3, #12
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	4608      	mov	r0, r1
 8012924:	4798      	blx	r3
 8012926:	4603      	mov	r3, r0
 8012928:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 801292a:	7bbb      	ldrb	r3, [r7, #14]
 801292c:	3301      	adds	r3, #1
 801292e:	73bb      	strb	r3, [r7, #14]
 8012930:	e7e0      	b.n	80128f4 <_ZN3USB4TaskEv+0x84>

        switch(usb_task_state) {
 8012932:	4b9d      	ldr	r3, [pc, #628]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	2ba0      	cmp	r3, #160	; 0xa0
 8012938:	f000 8123 	beq.w	8012b82 <_ZN3USB4TaskEv+0x312>
 801293c:	2ba0      	cmp	r3, #160	; 0xa0
 801293e:	f300 812f 	bgt.w	8012ba0 <_ZN3USB4TaskEv+0x330>
 8012942:	2b90      	cmp	r3, #144	; 0x90
 8012944:	f000 811f 	beq.w	8012b86 <_ZN3USB4TaskEv+0x316>
 8012948:	2b90      	cmp	r3, #144	; 0x90
 801294a:	f300 8129 	bgt.w	8012ba0 <_ZN3USB4TaskEv+0x330>
 801294e:	2b80      	cmp	r3, #128	; 0x80
 8012950:	f000 80fe 	beq.w	8012b50 <_ZN3USB4TaskEv+0x2e0>
 8012954:	2b80      	cmp	r3, #128	; 0x80
 8012956:	f300 8123 	bgt.w	8012ba0 <_ZN3USB4TaskEv+0x330>
 801295a:	2b51      	cmp	r3, #81	; 0x51
 801295c:	f000 80ea 	beq.w	8012b34 <_ZN3USB4TaskEv+0x2c4>
 8012960:	2b51      	cmp	r3, #81	; 0x51
 8012962:	f300 811d 	bgt.w	8012ba0 <_ZN3USB4TaskEv+0x330>
 8012966:	2b40      	cmp	r3, #64	; 0x40
 8012968:	dc6a      	bgt.n	8012a40 <_ZN3USB4TaskEv+0x1d0>
 801296a:	2b11      	cmp	r3, #17
 801296c:	f2c0 8118 	blt.w	8012ba0 <_ZN3USB4TaskEv+0x330>
 8012970:	3b11      	subs	r3, #17
 8012972:	2b2f      	cmp	r3, #47	; 0x2f
 8012974:	f200 8114 	bhi.w	8012ba0 <_ZN3USB4TaskEv+0x330>
 8012978:	a201      	add	r2, pc, #4	; (adr r2, 8012980 <_ZN3USB4TaskEv+0x110>)
 801297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801297e:	bf00      	nop
 8012980:	08012a47 	.word	0x08012a47
 8012984:	08012b8b 	.word	0x08012b8b
 8012988:	08012b8b 	.word	0x08012b8b
 801298c:	08012ba1 	.word	0x08012ba1
 8012990:	08012ba1 	.word	0x08012ba1
 8012994:	08012ba1 	.word	0x08012ba1
 8012998:	08012ba1 	.word	0x08012ba1
 801299c:	08012ba1 	.word	0x08012ba1
 80129a0:	08012ba1 	.word	0x08012ba1
 80129a4:	08012ba1 	.word	0x08012ba1
 80129a8:	08012ba1 	.word	0x08012ba1
 80129ac:	08012ba1 	.word	0x08012ba1
 80129b0:	08012ba1 	.word	0x08012ba1
 80129b4:	08012ba1 	.word	0x08012ba1
 80129b8:	08012ba1 	.word	0x08012ba1
 80129bc:	08012a97 	.word	0x08012a97
 80129c0:	08012ba1 	.word	0x08012ba1
 80129c4:	08012ba1 	.word	0x08012ba1
 80129c8:	08012ba1 	.word	0x08012ba1
 80129cc:	08012ba1 	.word	0x08012ba1
 80129d0:	08012ba1 	.word	0x08012ba1
 80129d4:	08012ba1 	.word	0x08012ba1
 80129d8:	08012ba1 	.word	0x08012ba1
 80129dc:	08012ba1 	.word	0x08012ba1
 80129e0:	08012ba1 	.word	0x08012ba1
 80129e4:	08012ba1 	.word	0x08012ba1
 80129e8:	08012ba1 	.word	0x08012ba1
 80129ec:	08012ba1 	.word	0x08012ba1
 80129f0:	08012ba1 	.word	0x08012ba1
 80129f4:	08012ba1 	.word	0x08012ba1
 80129f8:	08012ba1 	.word	0x08012ba1
 80129fc:	08012ab3 	.word	0x08012ab3
 8012a00:	08012ba1 	.word	0x08012ba1
 8012a04:	08012ba1 	.word	0x08012ba1
 8012a08:	08012ba1 	.word	0x08012ba1
 8012a0c:	08012ba1 	.word	0x08012ba1
 8012a10:	08012ba1 	.word	0x08012ba1
 8012a14:	08012ba1 	.word	0x08012ba1
 8012a18:	08012ba1 	.word	0x08012ba1
 8012a1c:	08012ba1 	.word	0x08012ba1
 8012a20:	08012ba1 	.word	0x08012ba1
 8012a24:	08012ba1 	.word	0x08012ba1
 8012a28:	08012ba1 	.word	0x08012ba1
 8012a2c:	08012ba1 	.word	0x08012ba1
 8012a30:	08012ba1 	.word	0x08012ba1
 8012a34:	08012ba1 	.word	0x08012ba1
 8012a38:	08012ba1 	.word	0x08012ba1
 8012a3c:	08012ac5 	.word	0x08012ac5
 8012a40:	2b50      	cmp	r3, #80	; 0x50
 8012a42:	d05f      	beq.n	8012b04 <_ZN3USB4TaskEv+0x294>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 8012a44:	e0ac      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        init();
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff fa8e 	bl	8011f68 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	737b      	strb	r3, [r7, #13]
 8012a50:	7b7b      	ldrb	r3, [r7, #13]
 8012a52:	2b0f      	cmp	r3, #15
 8012a54:	d81b      	bhi.n	8012a8e <_ZN3USB4TaskEv+0x21e>
                                if(devConfig[i])
 8012a56:	7b7a      	ldrb	r2, [r7, #13]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	321e      	adds	r2, #30
 8012a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d010      	beq.n	8012a86 <_ZN3USB4TaskEv+0x216>
                                        rcode = devConfig[i]->Release();
 8012a64:	7b7a      	ldrb	r2, [r7, #13]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	321e      	adds	r2, #30
 8012a6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012a6e:	7b7a      	ldrb	r2, [r7, #13]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	321e      	adds	r2, #30
 8012a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	3308      	adds	r3, #8
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4608      	mov	r0, r1
 8012a80:	4798      	blx	r3
 8012a82:	4603      	mov	r3, r0
 8012a84:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 8012a86:	7b7b      	ldrb	r3, [r7, #13]
 8012a88:	3301      	adds	r3, #1
 8012a8a:	737b      	strb	r3, [r7, #13]
 8012a8c:	e7e0      	b.n	8012a50 <_ZN3USB4TaskEv+0x1e0>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8012a8e:	4b46      	ldr	r3, [pc, #280]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012a90:	2212      	movs	r2, #18
 8012a92:	701a      	strb	r2, [r3, #0]
                        break;
 8012a94:	e084      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 8012a96:	f7ef ff49 	bl	800292c <HAL_GetTick>
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	4b43      	ldr	r3, [pc, #268]	; (8012bac <_ZN3USB4TaskEv+0x33c>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	43db      	mvns	r3, r3
 8012aa4:	0fdb      	lsrs	r3, r3, #31
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d070      	beq.n	8012b8e <_ZN3USB4TaskEv+0x31e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8012aac:	4b3e      	ldr	r3, [pc, #248]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012aae:	2230      	movs	r2, #48	; 0x30
 8012ab0:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	21e8      	movs	r1, #232	; 0xe8
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7ef fa28 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8012abc:	4b3a      	ldr	r3, [pc, #232]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012abe:	2240      	movs	r2, #64	; 0x40
 8012ac0:	701a      	strb	r2, [r3, #0]
                        break;
 8012ac2:	e06d      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 8012ac4:	21e8      	movs	r1, #232	; 0xe8
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7ef fa72 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012acc:	4603      	mov	r3, r0
 8012ace:	f003 0301 	and.w	r3, r3, #1
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	bf0c      	ite	eq
 8012ad6:	2301      	moveq	r3, #1
 8012ad8:	2300      	movne	r3, #0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d058      	beq.n	8012b92 <_ZN3USB4TaskEv+0x322>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 8012ae0:	21d8      	movs	r1, #216	; 0xd8
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ef fa64 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	f043 0308 	orr.w	r3, r3, #8
 8012aee:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 8012af0:	7b3b      	ldrb	r3, [r7, #12]
 8012af2:	461a      	mov	r2, r3
 8012af4:	21d8      	movs	r1, #216	; 0xd8
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7ef fa08 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8012afc:	4b2a      	ldr	r3, [pc, #168]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012afe:	2250      	movs	r2, #80	; 0x50
 8012b00:	701a      	strb	r2, [r3, #0]
                        break;
 8012b02:	e046      	b.n	8012b92 <_ZN3USB4TaskEv+0x322>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 8012b04:	21c8      	movs	r1, #200	; 0xc8
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f7ef fa52 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	bf14      	ite	ne
 8012b16:	2301      	movne	r3, #1
 8012b18:	2300      	moveq	r3, #0
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d03a      	beq.n	8012b96 <_ZN3USB4TaskEv+0x326>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 8012b20:	4b21      	ldr	r3, [pc, #132]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012b22:	2251      	movs	r2, #81	; 0x51
 8012b24:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 8012b26:	f7ef ff01 	bl	800292c <HAL_GetTick>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	3314      	adds	r3, #20
 8012b2e:	4a1f      	ldr	r2, [pc, #124]	; (8012bac <_ZN3USB4TaskEv+0x33c>)
 8012b30:	6013      	str	r3, [r2, #0]
                        break;
 8012b32:	e030      	b.n	8012b96 <_ZN3USB4TaskEv+0x326>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 8012b34:	f7ef fefa 	bl	800292c <HAL_GetTick>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	4b1c      	ldr	r3, [pc, #112]	; (8012bac <_ZN3USB4TaskEv+0x33c>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	43db      	mvns	r3, r3
 8012b42:	0fdb      	lsrs	r3, r3, #31
 8012b44:	b2db      	uxtb	r3, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d027      	beq.n	8012b9a <_ZN3USB4TaskEv+0x32a>
 8012b4a:	4b17      	ldr	r3, [pc, #92]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012b4c:	2280      	movs	r2, #128	; 0x80
 8012b4e:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 8012b50:	7bfb      	ldrb	r3, [r7, #15]
 8012b52:	2200      	movs	r2, #0
 8012b54:	2100      	movs	r1, #0
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f920 	bl	8012d9c <_ZN3USB11ConfiguringEhhb>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 8012b60:	7afb      	ldrb	r3, [r7, #11]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d009      	beq.n	8012b7a <_ZN3USB4TaskEv+0x30a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 8012b66:	7afb      	ldrb	r3, [r7, #11]
 8012b68:	2bd2      	cmp	r3, #210	; 0xd2
 8012b6a:	d018      	beq.n	8012b9e <_ZN3USB4TaskEv+0x32e>
                                        usb_error = rcode;
 8012b6c:	4a10      	ldr	r2, [pc, #64]	; (8012bb0 <_ZN3USB4TaskEv+0x340>)
 8012b6e:	7afb      	ldrb	r3, [r7, #11]
 8012b70:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 8012b72:	4b0d      	ldr	r3, [pc, #52]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012b74:	22a0      	movs	r2, #160	; 0xa0
 8012b76:	701a      	strb	r2, [r3, #0]
                        break;
 8012b78:	e011      	b.n	8012b9e <_ZN3USB4TaskEv+0x32e>
                                usb_task_state = USB_STATE_RUNNING;
 8012b7a:	4b0b      	ldr	r3, [pc, #44]	; (8012ba8 <_ZN3USB4TaskEv+0x338>)
 8012b7c:	2290      	movs	r2, #144	; 0x90
 8012b7e:	701a      	strb	r2, [r3, #0]
                        break;
 8012b80:	e00d      	b.n	8012b9e <_ZN3USB4TaskEv+0x32e>
                        break;
 8012b82:	bf00      	nop
 8012b84:	e00c      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b86:	bf00      	nop
 8012b88:	e00a      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b8a:	bf00      	nop
 8012b8c:	e008      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8012b8e:	bf00      	nop
 8012b90:	e006      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b92:	bf00      	nop
 8012b94:	e004      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b96:	bf00      	nop
 8012b98:	e002      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        else break; // don't fall through
 8012b9a:	bf00      	nop
 8012b9c:	e000      	b.n	8012ba0 <_ZN3USB4TaskEv+0x330>
                        break;
 8012b9e:	bf00      	nop
}
 8012ba0:	bf00      	nop
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	200053f9 	.word	0x200053f9
 8012bac:	200053fc 	.word	0x200053fc
 8012bb0:	200053f8 	.word	0x200053f8

08012bb4 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b086      	sub	sp, #24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	4608      	mov	r0, r1
 8012bbe:	4611      	mov	r1, r2
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	70fb      	strb	r3, [r7, #3]
 8012bc6:	460b      	mov	r3, r1
 8012bc8:	70bb      	strb	r3, [r7, #2]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	617b      	str	r3, [r7, #20]
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2100      	movs	r1, #0
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f000 fbc0 	bl	8013360 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012be0:	6178      	str	r0, [r7, #20]

        if(!p0)
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d101      	bne.n	8012bec <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012be8:	23d6      	movs	r3, #214	; 0xd6
 8012bea:	e03a      	b.n	8012c62 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d101      	bne.n	8012bf8 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 8012bf4:	23d7      	movs	r3, #215	; 0xd7
 8012bf6:	e034      	b.n	8012c62 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	787a      	ldrb	r2, [r7, #1]
 8012bfc:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	78bb      	ldrb	r3, [r7, #2]
 8012c02:	78f9      	ldrb	r1, [r7, #3]
 8012c04:	2200      	movs	r2, #0
 8012c06:	f000 fc5f 	bl	80134c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 8012c0e:	7bfb      	ldrb	r3, [r7, #15]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d101      	bne.n	8012c18 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 8012c14:	23d4      	movs	r3, #212	; 0xd4
 8012c16:	e024      	b.n	8012c62 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	7bfa      	ldrb	r2, [r7, #15]
 8012c1c:	4611      	mov	r1, r2
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 fb9e 	bl	8013360 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 8012c24:	6138      	str	r0, [r7, #16]

        if(!p)
 8012c26:	693b      	ldr	r3, [r7, #16]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d101      	bne.n	8012c30 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012c2c:	23d6      	movs	r3, #214	; 0xd6
 8012c2e:	e018      	b.n	8012c62 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	787a      	ldrb	r2, [r7, #1]
 8012c34:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 8012c36:	7bfb      	ldrb	r3, [r7, #15]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	2100      	movs	r1, #0
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 fae3 	bl	8013208 <_ZN3USB7setAddrEhhh>
 8012c42:	4603      	mov	r3, r0
 8012c44:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 8012c46:	7bbb      	ldrb	r3, [r7, #14]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d009      	beq.n	8012c60 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	7bfa      	ldrb	r2, [r7, #15]
 8012c50:	4611      	mov	r1, r2
 8012c52:	4618      	mov	r0, r3
 8012c54:	f000 fcd0 	bl	80135f8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 8012c5c:	7bbb      	ldrb	r3, [r7, #14]
 8012c5e:	e000      	b.n	8012c62 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 8012c60:	2300      	movs	r3, #0
};
 8012c62:	4618      	mov	r0, r3
 8012c64:	3718      	adds	r7, #24
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}

08012c6a <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 8012c6a:	b590      	push	{r4, r7, lr}
 8012c6c:	b085      	sub	sp, #20
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
 8012c72:	4608      	mov	r0, r1
 8012c74:	4611      	mov	r1, r2
 8012c76:	461a      	mov	r2, r3
 8012c78:	4603      	mov	r3, r0
 8012c7a:	70fb      	strb	r3, [r7, #3]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	70bb      	strb	r3, [r7, #2]
 8012c80:	4613      	mov	r3, r2
 8012c82:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 8012c84:	2300      	movs	r3, #0
 8012c86:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 8012c88:	78fa      	ldrb	r2, [r7, #3]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	321e      	adds	r2, #30
 8012c8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c92:	78fa      	ldrb	r2, [r7, #3]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	321e      	adds	r2, #30
 8012c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	3304      	adds	r3, #4
 8012ca0:	681c      	ldr	r4, [r3, #0]
 8012ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ca6:	787a      	ldrb	r2, [r7, #1]
 8012ca8:	78b9      	ldrb	r1, [r7, #2]
 8012caa:	47a0      	blx	r4
 8012cac:	4603      	mov	r3, r0
 8012cae:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 8012cb0:	7bbb      	ldrb	r3, [r7, #14]
 8012cb2:	2be0      	cmp	r3, #224	; 0xe0
 8012cb4:	d11c      	bne.n	8012cf0 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 8012cb6:	78bb      	ldrb	r3, [r7, #2]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d108      	bne.n	8012cce <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	21e8      	movs	r1, #232	; 0xe8
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7ef f923 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012cc6:	2066      	movs	r0, #102	; 0x66
 8012cc8:	f7ef fe3c 	bl	8002944 <HAL_Delay>
 8012ccc:	e022      	b.n	8012d14 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012cce:	78ba      	ldrb	r2, [r7, #2]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	321e      	adds	r2, #30
 8012cd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012cd8:	78ba      	ldrb	r2, [r7, #2]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	321e      	adds	r2, #30
 8012cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	3314      	adds	r3, #20
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	787a      	ldrb	r2, [r7, #1]
 8012cea:	4611      	mov	r1, r2
 8012cec:	4798      	blx	r3
 8012cee:	e011      	b.n	8012d14 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012cf0:	7bbb      	ldrb	r3, [r7, #14]
 8012cf2:	2b0d      	cmp	r3, #13
 8012cf4:	d109      	bne.n	8012d0a <_ZN3USB13AttemptConfigEhhhb+0xa0>
 8012cf6:	7bfb      	ldrb	r3, [r7, #15]
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	d806      	bhi.n	8012d0a <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 8012cfc:	2064      	movs	r0, #100	; 0x64
 8012cfe:	f7ef fe21 	bl	8002944 <HAL_Delay>
                retries++;
 8012d02:	7bfb      	ldrb	r3, [r7, #15]
 8012d04:	3301      	adds	r3, #1
 8012d06:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012d08:	e7be      	b.n	8012c88 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 8012d0a:	7bbb      	ldrb	r3, [r7, #14]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d001      	beq.n	8012d14 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 8012d10:	7bbb      	ldrb	r3, [r7, #14]
 8012d12:	e03f      	b.n	8012d94 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 8012d14:	78fa      	ldrb	r2, [r7, #3]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	321e      	adds	r2, #30
 8012d1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d1e:	78fa      	ldrb	r2, [r7, #3]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	321e      	adds	r2, #30
 8012d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	681c      	ldr	r4, [r3, #0]
 8012d2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d30:	787a      	ldrb	r2, [r7, #1]
 8012d32:	78b9      	ldrb	r1, [r7, #2]
 8012d34:	47a0      	blx	r4
 8012d36:	4603      	mov	r3, r0
 8012d38:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 8012d3a:	7bbb      	ldrb	r3, [r7, #14]
 8012d3c:	2b0d      	cmp	r3, #13
 8012d3e:	d109      	bne.n	8012d54 <_ZN3USB13AttemptConfigEhhhb+0xea>
 8012d40:	7bfb      	ldrb	r3, [r7, #15]
 8012d42:	2b02      	cmp	r3, #2
 8012d44:	d806      	bhi.n	8012d54 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 8012d46:	2064      	movs	r0, #100	; 0x64
 8012d48:	f7ef fdfc 	bl	8002944 <HAL_Delay>
                retries++;
 8012d4c:	7bfb      	ldrb	r3, [r7, #15]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	73fb      	strb	r3, [r7, #15]
                goto again;
 8012d52:	e799      	b.n	8012c88 <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 8012d54:	7bbb      	ldrb	r3, [r7, #14]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d01b      	beq.n	8012d92 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 8012d5a:	78bb      	ldrb	r3, [r7, #2]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d108      	bne.n	8012d72 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 8012d60:	2201      	movs	r2, #1
 8012d62:	21e8      	movs	r1, #232	; 0xe8
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f7ef f8d1 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 8012d6a:	2066      	movs	r0, #102	; 0x66
 8012d6c:	f7ef fdea 	bl	8002944 <HAL_Delay>
 8012d70:	e00f      	b.n	8012d92 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 8012d72:	78ba      	ldrb	r2, [r7, #2]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	321e      	adds	r2, #30
 8012d78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012d7c:	78ba      	ldrb	r2, [r7, #2]
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	321e      	adds	r2, #30
 8012d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	3314      	adds	r3, #20
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	787a      	ldrb	r2, [r7, #1]
 8012d8e:	4611      	mov	r1, r2
 8012d90:	4798      	blx	r3
                }
        }
        return rcode;
 8012d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3714      	adds	r7, #20
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd90      	pop	{r4, r7, pc}

08012d9c <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b090      	sub	sp, #64	; 0x40
 8012da0:	af02      	add	r7, sp, #8
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	4608      	mov	r0, r1
 8012da6:	4611      	mov	r1, r2
 8012da8:	461a      	mov	r2, r3
 8012daa:	4603      	mov	r3, r0
 8012dac:	70fb      	strb	r3, [r7, #3]
 8012dae:	460b      	mov	r3, r1
 8012db0:	70bb      	strb	r3, [r7, #2]
 8012db2:	4613      	mov	r3, r2
 8012db4:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 8012db6:	2300      	movs	r3, #0
 8012db8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 8012dbc:	f107 030c 	add.w	r3, r7, #12
 8012dc0:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 8012dce:	2308      	movs	r3, #8
 8012dd0:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 8012dd2:	7abb      	ldrb	r3, [r7, #10]
 8012dd4:	f36f 0300 	bfc	r3, #0, #1
 8012dd8:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 8012dda:	7abb      	ldrb	r3, [r7, #10]
 8012ddc:	f36f 0341 	bfc	r3, #1, #1
 8012de0:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 8012de2:	7abb      	ldrb	r3, [r7, #10]
 8012de4:	220f      	movs	r2, #15
 8012de6:	f362 0387 	bfi	r3, r2, #2, #6
 8012dea:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7fa fd13 	bl	800d818 <_ZN3USB14GetAddressPoolEv>
 8012df2:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 8012df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dfe:	4798      	blx	r3
 8012e00:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 8012e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d101      	bne.n	8012e0c <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8012e08:	23d6      	movs	r3, #214	; 0xd6
 8012e0a:	e15c      	b.n	80130c6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 8012e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 8012e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e14:	f107 0208 	add.w	r2, r7, #8
 8012e18:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 8012e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1c:	787a      	ldrb	r2, [r7, #1]
 8012e1e:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 8012e20:	f107 030c 	add.w	r3, r7, #12
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	2312      	movs	r3, #18
 8012e28:	2200      	movs	r2, #0
 8012e2a:	2100      	movs	r1, #0
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f000 f94e 	bl	80130ce <_ZN3USB11getDevDescrEhhtPh>
 8012e32:	4603      	mov	r3, r0
 8012e34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 8012e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e3c:	601a      	str	r2, [r3, #0]

        if(rcode) {
 8012e3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d002      	beq.n	8012e4c <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 8012e46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012e4a:	e13c      	b.n	80130c6 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 8012e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4e:	7a1a      	ldrb	r2, [r3, #8]
 8012e50:	7a5b      	ldrb	r3, [r3, #9]
 8012e52:	021b      	lsls	r3, r3, #8
 8012e54:	4313      	orrs	r3, r2
 8012e56:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 8012e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5a:	7a9a      	ldrb	r2, [r3, #10]
 8012e5c:	7adb      	ldrb	r3, [r3, #11]
 8012e5e:	021b      	lsls	r3, r3, #8
 8012e60:	4313      	orrs	r3, r2
 8012e62:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 8012e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e66:	791b      	ldrb	r3, [r3, #4]
 8012e68:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 8012e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e6c:	795b      	ldrb	r3, [r3, #5]
 8012e6e:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012e70:	2300      	movs	r3, #0
 8012e72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e7a:	2b0f      	cmp	r3, #15
 8012e7c:	f200 8081 	bhi.w	8012f82 <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012e80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	321e      	adds	r2, #30
 8012e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d06e      	beq.n	8012f6e <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012e90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	321e      	adds	r2, #30
 8012e98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012e9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	321e      	adds	r2, #30
 8012ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	3310      	adds	r3, #16
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	4608      	mov	r0, r1
 8012eb0:	4798      	blx	r3
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	bf14      	ite	ne
 8012eb8:	2301      	movne	r3, #1
 8012eba:	2300      	moveq	r3, #0
 8012ebc:	b2db      	uxtb	r3, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d157      	bne.n	8012f72 <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 8012ec2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	321e      	adds	r2, #30
 8012eca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ece:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	321e      	adds	r2, #30
 8012ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	3320      	adds	r3, #32
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	7fba      	ldrb	r2, [r7, #30]
 8012ee2:	4611      	mov	r1, r2
 8012ee4:	4798      	blx	r3
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d02b      	beq.n	8012f44 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012eec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	321e      	adds	r2, #30
 8012ef4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012ef8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	321e      	adds	r2, #30
 8012f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	3318      	adds	r3, #24
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	8c3a      	ldrh	r2, [r7, #32]
 8012f0c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8012f0e:	4798      	blx	r3
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d114      	bne.n	8012f40 <_ZN3USB11ConfiguringEhhb+0x1a4>
 8012f16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	321e      	adds	r2, #30
 8012f1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012f22:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	321e      	adds	r2, #30
 8012f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	331c      	adds	r3, #28
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	7ffa      	ldrb	r2, [r7, #31]
 8012f36:	4611      	mov	r1, r2
 8012f38:	4798      	blx	r3
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <_ZN3USB11ConfiguringEhhb+0x1a8>
 8012f40:	2301      	movs	r3, #1
 8012f42:	e000      	b.n	8012f46 <_ZN3USB11ConfiguringEhhb+0x1aa>
 8012f44:	2300      	movs	r3, #0
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d014      	beq.n	8012f74 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 8012f4a:	78b8      	ldrb	r0, [r7, #2]
 8012f4c:	78fa      	ldrb	r2, [r7, #3]
 8012f4e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8012f52:	787b      	ldrb	r3, [r7, #1]
 8012f54:	9300      	str	r3, [sp, #0]
 8012f56:	4603      	mov	r3, r0
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fe86 	bl	8012c6a <_ZN3USB13AttemptConfigEhhhb>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 8012f64:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f68:	2bd1      	cmp	r3, #209	; 0xd1
 8012f6a:	d109      	bne.n	8012f80 <_ZN3USB11ConfiguringEhhb+0x1e4>
 8012f6c:	e002      	b.n	8012f74 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 8012f6e:	bf00      	nop
 8012f70:	e000      	b.n	8012f74 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012f72:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f78:	3301      	adds	r3, #1
 8012f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f7e:	e77a      	b.n	8012e76 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 8012f80:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 8012f82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f86:	2b0f      	cmp	r3, #15
 8012f88:	d802      	bhi.n	8012f90 <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 8012f8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012f8e:	e09a      	b.n	80130c6 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 8012f90:	2300      	movs	r3, #0
 8012f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f9a:	2b0f      	cmp	r3, #15
 8012f9c:	f200 8088 	bhi.w	80130b0 <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 8012fa0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	321e      	adds	r2, #30
 8012fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d074      	beq.n	801309a <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 8012fb0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	321e      	adds	r2, #30
 8012fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fbc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	321e      	adds	r2, #30
 8012fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	3310      	adds	r3, #16
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	4608      	mov	r0, r1
 8012fd0:	4798      	blx	r3
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	bf14      	ite	ne
 8012fd8:	2301      	movne	r3, #1
 8012fda:	2300      	moveq	r3, #0
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d15d      	bne.n	801309e <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 8012fe2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	321e      	adds	r2, #30
 8012fea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012fee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	321e      	adds	r2, #30
 8012ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3320      	adds	r3, #32
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	7fba      	ldrb	r2, [r7, #30]
 8013002:	4611      	mov	r1, r2
 8013004:	4798      	blx	r3
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d02b      	beq.n	8013064 <_ZN3USB11ConfiguringEhhb+0x2c8>
 801300c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	321e      	adds	r2, #30
 8013014:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013018:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	321e      	adds	r2, #30
 8013020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3318      	adds	r3, #24
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	8c3a      	ldrh	r2, [r7, #32]
 801302c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 801302e:	4798      	blx	r3
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d114      	bne.n	8013060 <_ZN3USB11ConfiguringEhhb+0x2c4>
 8013036:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	321e      	adds	r2, #30
 801303e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013042:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	321e      	adds	r2, #30
 801304a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	331c      	adds	r3, #28
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	7ffa      	ldrb	r2, [r7, #31]
 8013056:	4611      	mov	r1, r2
 8013058:	4798      	blx	r3
 801305a:	4603      	mov	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	d001      	beq.n	8013064 <_ZN3USB11ConfiguringEhhb+0x2c8>
 8013060:	2301      	movs	r3, #1
 8013062:	e000      	b.n	8013066 <_ZN3USB11ConfiguringEhhb+0x2ca>
 8013064:	2300      	movs	r3, #0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d11b      	bne.n	80130a2 <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 801306a:	78b8      	ldrb	r0, [r7, #2]
 801306c:	78fa      	ldrb	r2, [r7, #3]
 801306e:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8013072:	787b      	ldrb	r3, [r7, #1]
 8013074:	9300      	str	r3, [sp, #0]
 8013076:	4603      	mov	r3, r0
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f7ff fdf6 	bl	8012c6a <_ZN3USB13AttemptConfigEhhhb>
 801307e:	4603      	mov	r3, r0
 8013080:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 8013084:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013088:	2bd1      	cmp	r3, #209	; 0xd1
 801308a:	d00b      	beq.n	80130a4 <_ZN3USB11ConfiguringEhhb+0x308>
 801308c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013090:	2bd9      	cmp	r3, #217	; 0xd9
 8013092:	d007      	beq.n	80130a4 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 8013094:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8013098:	e015      	b.n	80130c6 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 801309a:	bf00      	nop
 801309c:	e002      	b.n	80130a4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 801309e:	bf00      	nop
 80130a0:	e000      	b.n	80130a4 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 80130a2:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 80130a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130a8:	3301      	adds	r3, #1
 80130aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80130ae:	e772      	b.n	8012f96 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 80130b0:	787b      	ldrb	r3, [r7, #1]
 80130b2:	78ba      	ldrb	r2, [r7, #2]
 80130b4:	78f9      	ldrb	r1, [r7, #3]
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f7ff fd7c 	bl	8012bb4 <_ZN3USB17DefaultAddressingEhhb>
 80130bc:	4603      	mov	r3, r0
 80130be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 80130c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3738      	adds	r7, #56	; 0x38
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}

080130ce <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 80130ce:	b580      	push	{r7, lr}
 80130d0:	b08a      	sub	sp, #40	; 0x28
 80130d2:	af08      	add	r7, sp, #32
 80130d4:	6078      	str	r0, [r7, #4]
 80130d6:	4608      	mov	r0, r1
 80130d8:	4611      	mov	r1, r2
 80130da:	461a      	mov	r2, r3
 80130dc:	4603      	mov	r3, r0
 80130de:	70fb      	strb	r3, [r7, #3]
 80130e0:	460b      	mov	r3, r1
 80130e2:	70bb      	strb	r3, [r7, #2]
 80130e4:	4613      	mov	r3, r2
 80130e6:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 80130e8:	78ba      	ldrb	r2, [r7, #2]
 80130ea:	78f9      	ldrb	r1, [r7, #3]
 80130ec:	2300      	movs	r3, #0
 80130ee:	9307      	str	r3, [sp, #28]
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	9306      	str	r3, [sp, #24]
 80130f4:	883b      	ldrh	r3, [r7, #0]
 80130f6:	9305      	str	r3, [sp, #20]
 80130f8:	883b      	ldrh	r3, [r7, #0]
 80130fa:	9304      	str	r3, [sp, #16]
 80130fc:	2300      	movs	r3, #0
 80130fe:	9303      	str	r3, [sp, #12]
 8013100:	2301      	movs	r3, #1
 8013102:	9302      	str	r3, [sp, #8]
 8013104:	2300      	movs	r3, #0
 8013106:	9301      	str	r3, [sp, #4]
 8013108:	2306      	movs	r3, #6
 801310a:	9300      	str	r3, [sp, #0]
 801310c:	2380      	movs	r3, #128	; 0x80
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f7fe fffd 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013114:	4603      	mov	r3, r0
}
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 801311e:	b580      	push	{r7, lr}
 8013120:	b08a      	sub	sp, #40	; 0x28
 8013122:	af08      	add	r7, sp, #32
 8013124:	6078      	str	r0, [r7, #4]
 8013126:	4608      	mov	r0, r1
 8013128:	4611      	mov	r1, r2
 801312a:	461a      	mov	r2, r3
 801312c:	4603      	mov	r3, r0
 801312e:	70fb      	strb	r3, [r7, #3]
 8013130:	460b      	mov	r3, r1
 8013132:	70bb      	strb	r3, [r7, #2]
 8013134:	4613      	mov	r3, r2
 8013136:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 8013138:	78ba      	ldrb	r2, [r7, #2]
 801313a:	78f9      	ldrb	r1, [r7, #3]
 801313c:	2300      	movs	r3, #0
 801313e:	9307      	str	r3, [sp, #28]
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	9306      	str	r3, [sp, #24]
 8013144:	883b      	ldrh	r3, [r7, #0]
 8013146:	9305      	str	r3, [sp, #20]
 8013148:	883b      	ldrh	r3, [r7, #0]
 801314a:	9304      	str	r3, [sp, #16]
 801314c:	2300      	movs	r3, #0
 801314e:	9303      	str	r3, [sp, #12]
 8013150:	2302      	movs	r3, #2
 8013152:	9302      	str	r3, [sp, #8]
 8013154:	7c3b      	ldrb	r3, [r7, #16]
 8013156:	9301      	str	r3, [sp, #4]
 8013158:	2306      	movs	r3, #6
 801315a:	9300      	str	r3, [sp, #0]
 801315c:	2380      	movs	r3, #128	; 0x80
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7fe ffd5 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 8013164:	4603      	mov	r3, r0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3708      	adds	r7, #8
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}

0801316e <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 801316e:	b580      	push	{r7, lr}
 8013170:	b09e      	sub	sp, #120	; 0x78
 8013172:	af08      	add	r7, sp, #32
 8013174:	6078      	str	r0, [r7, #4]
 8013176:	4608      	mov	r0, r1
 8013178:	4611      	mov	r1, r2
 801317a:	461a      	mov	r2, r3
 801317c:	4603      	mov	r3, r0
 801317e:	70fb      	strb	r3, [r7, #3]
 8013180:	460b      	mov	r3, r1
 8013182:	70bb      	strb	r3, [r7, #2]
 8013184:	4613      	mov	r3, r2
 8013186:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 8013188:	2340      	movs	r3, #64	; 0x40
 801318a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 801318e:	f107 030c 	add.w	r3, r7, #12
 8013192:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 8013194:	78ba      	ldrb	r2, [r7, #2]
 8013196:	78f9      	ldrb	r1, [r7, #3]
 8013198:	f107 030c 	add.w	r3, r7, #12
 801319c:	9301      	str	r3, [sp, #4]
 801319e:	787b      	ldrb	r3, [r7, #1]
 80131a0:	9300      	str	r3, [sp, #0]
 80131a2:	2309      	movs	r3, #9
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f7ff ffba 	bl	801311e <_ZN3USB12getConfDescrEhhthPh>
 80131aa:	4603      	mov	r3, r0
 80131ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 80131b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 80131b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80131bc:	e020      	b.n	8013200 <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 80131be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131c0:	789a      	ldrb	r2, [r3, #2]
 80131c2:	78db      	ldrb	r3, [r3, #3]
 80131c4:	021b      	lsls	r3, r3, #8
 80131c6:	4313      	orrs	r3, r2
 80131c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 80131cc:	78ba      	ldrb	r2, [r7, #2]
 80131ce:	78f9      	ldrb	r1, [r7, #3]
 80131d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131d2:	9307      	str	r3, [sp, #28]
 80131d4:	f107 030c 	add.w	r3, r7, #12
 80131d8:	9306      	str	r3, [sp, #24]
 80131da:	2340      	movs	r3, #64	; 0x40
 80131dc:	9305      	str	r3, [sp, #20]
 80131de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80131e2:	9304      	str	r3, [sp, #16]
 80131e4:	2300      	movs	r3, #0
 80131e6:	9303      	str	r3, [sp, #12]
 80131e8:	2302      	movs	r3, #2
 80131ea:	9302      	str	r3, [sp, #8]
 80131ec:	787b      	ldrb	r3, [r7, #1]
 80131ee:	9301      	str	r3, [sp, #4]
 80131f0:	2306      	movs	r3, #6
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	2380      	movs	r3, #128	; 0x80
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7fe ff89 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80131fc:	4603      	mov	r3, r0
 80131fe:	bf00      	nop
}
 8013200:	4618      	mov	r0, r3
 8013202:	3758      	adds	r7, #88	; 0x58
 8013204:	46bd      	mov	sp, r7
 8013206:	bd80      	pop	{r7, pc}

08013208 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 8013208:	b580      	push	{r7, lr}
 801320a:	b08c      	sub	sp, #48	; 0x30
 801320c:	af08      	add	r7, sp, #32
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	4608      	mov	r0, r1
 8013212:	4611      	mov	r1, r2
 8013214:	461a      	mov	r2, r3
 8013216:	4603      	mov	r3, r0
 8013218:	70fb      	strb	r3, [r7, #3]
 801321a:	460b      	mov	r3, r1
 801321c:	70bb      	strb	r3, [r7, #2]
 801321e:	4613      	mov	r3, r2
 8013220:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 8013222:	78ba      	ldrb	r2, [r7, #2]
 8013224:	78f9      	ldrb	r1, [r7, #3]
 8013226:	2300      	movs	r3, #0
 8013228:	9307      	str	r3, [sp, #28]
 801322a:	2300      	movs	r3, #0
 801322c:	9306      	str	r3, [sp, #24]
 801322e:	2300      	movs	r3, #0
 8013230:	9305      	str	r3, [sp, #20]
 8013232:	2300      	movs	r3, #0
 8013234:	9304      	str	r3, [sp, #16]
 8013236:	2300      	movs	r3, #0
 8013238:	9303      	str	r3, [sp, #12]
 801323a:	2300      	movs	r3, #0
 801323c:	9302      	str	r3, [sp, #8]
 801323e:	787b      	ldrb	r3, [r7, #1]
 8013240:	9301      	str	r3, [sp, #4]
 8013242:	2305      	movs	r3, #5
 8013244:	9300      	str	r3, [sp, #0]
 8013246:	2300      	movs	r3, #0
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7fe ff60 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 801324e:	4603      	mov	r3, r0
 8013250:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 8013252:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8013256:	f7ef fb75 	bl	8002944 <HAL_Delay>
        return rcode;
 801325a:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 801325c:	4618      	mov	r0, r3
 801325e:	3710      	adds	r7, #16
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 8013264:	b580      	push	{r7, lr}
 8013266:	b08a      	sub	sp, #40	; 0x28
 8013268:	af08      	add	r7, sp, #32
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	4608      	mov	r0, r1
 801326e:	4611      	mov	r1, r2
 8013270:	461a      	mov	r2, r3
 8013272:	4603      	mov	r3, r0
 8013274:	70fb      	strb	r3, [r7, #3]
 8013276:	460b      	mov	r3, r1
 8013278:	70bb      	strb	r3, [r7, #2]
 801327a:	4613      	mov	r3, r2
 801327c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 801327e:	78ba      	ldrb	r2, [r7, #2]
 8013280:	78f9      	ldrb	r1, [r7, #3]
 8013282:	2300      	movs	r3, #0
 8013284:	9307      	str	r3, [sp, #28]
 8013286:	2300      	movs	r3, #0
 8013288:	9306      	str	r3, [sp, #24]
 801328a:	2300      	movs	r3, #0
 801328c:	9305      	str	r3, [sp, #20]
 801328e:	2300      	movs	r3, #0
 8013290:	9304      	str	r3, [sp, #16]
 8013292:	2300      	movs	r3, #0
 8013294:	9303      	str	r3, [sp, #12]
 8013296:	2300      	movs	r3, #0
 8013298:	9302      	str	r3, [sp, #8]
 801329a:	787b      	ldrb	r3, [r7, #1]
 801329c:	9301      	str	r3, [sp, #4]
 801329e:	2309      	movs	r3, #9
 80132a0:	9300      	str	r3, [sp, #0]
 80132a2:	2300      	movs	r3, #0
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f7fe ff32 	bl	801210e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 80132aa:	4603      	mov	r3, r0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3708      	adds	r7, #8
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 80132b4:	b480      	push	{r7}
 80132b6:	b083      	sub	sp, #12
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
};
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4618      	mov	r0, r3
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr
	...

080132cc <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
 80132d4:	4a04      	ldr	r2, [pc, #16]	; (80132e8 <_ZN11AddressPoolC1Ev+0x1c>)
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	601a      	str	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4618      	mov	r0, r3
 80132de:	370c      	adds	r7, #12
 80132e0:	46bd      	mov	sp, r7
 80132e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e6:	4770      	bx	lr
 80132e8:	08014cbc 	.word	0x08014cbc

080132ec <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7ff ffe8 	bl	80132cc <_ZN11AddressPoolC1Ev>
 80132fc:	4a17      	ldr	r2, [pc, #92]	; (801335c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	601a      	str	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2200      	movs	r2, #0
 8013306:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 8013308:	2100      	movs	r1, #0
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 f990 	bl	8013630 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	1d1a      	adds	r2, r3, #4
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2200      	movs	r2, #0
 8013322:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2208      	movs	r2, #8
 8013328:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 801332a:	687a      	ldr	r2, [r7, #4]
 801332c:	7993      	ldrb	r3, [r2, #6]
 801332e:	f36f 0300 	bfc	r3, #0, #1
 8013332:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	7993      	ldrb	r3, [r2, #6]
 8013338:	f36f 0341 	bfc	r3, #1, #1
 801333c:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 801333e:	687a      	ldr	r2, [r7, #4]
 8013340:	7993      	ldrb	r3, [r2, #6]
 8013342:	210f      	movs	r1, #15
 8013344:	f361 0387 	bfi	r3, r1, #2, #6
 8013348:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f000 f9a1 	bl	8013692 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	4618      	mov	r0, r3
 8013354:	3708      	adds	r7, #8
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	08014ca8 	.word	0x08014ca8

08013360 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	460b      	mov	r3, r1
 801336a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 801336c:	78fb      	ldrb	r3, [r7, #3]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d102      	bne.n	8013378 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	3308      	adds	r3, #8
 8013376:	e014      	b.n	80133a2 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 8013378:	78fb      	ldrb	r3, [r7, #3]
 801337a:	4619      	mov	r1, r3
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f000 f9a1 	bl	80136c4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013382:	4603      	mov	r3, r0
 8013384:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 8013386:	7bfb      	ldrb	r3, [r7, #15]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d008      	beq.n	801339e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	f103 0108 	add.w	r1, r3, #8
 8013392:	7bfa      	ldrb	r2, [r7, #15]
 8013394:	4613      	mov	r3, r2
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	1a9b      	subs	r3, r3, r2
 801339a:	440b      	add	r3, r1
 801339c:	e000      	b.n	80133a0 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 801339e:	2300      	movs	r3, #0
 80133a0:	bf00      	nop
        };
 80133a2:	4618      	mov	r0, r3
 80133a4:	3710      	adds	r7, #16
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
	...

080133ac <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b086      	sub	sp, #24
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	60f8      	str	r0, [r7, #12]
 80133b4:	607b      	str	r3, [r7, #4]
 80133b6:	460b      	mov	r3, r1
 80133b8:	72fb      	strb	r3, [r7, #11]
 80133ba:	4613      	mov	r3, r2
 80133bc:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 80133be:	f7ed faa1 	bl	8000904 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 80133c2:	7afb      	ldrb	r3, [r7, #11]
 80133c4:	f043 0302 	orr.w	r3, r3, #2
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 80133cc:	f107 0117 	add.w	r1, r7, #23
 80133d0:	f04f 33ff 	mov.w	r3, #4294967295
 80133d4:	2201      	movs	r2, #1
 80133d6:	480b      	ldr	r0, [pc, #44]	; (8013404 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80133d8:	f7f2 fce1 	bl	8005d9e <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 80133dc:	7abb      	ldrb	r3, [r7, #10]
 80133de:	b29a      	uxth	r2, r3
 80133e0:	f04f 33ff 	mov.w	r3, #4294967295
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	4807      	ldr	r0, [pc, #28]	; (8013404 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 80133e8:	f7f2 fcd9 	bl	8005d9e <HAL_SPI_Transmit>
        data_p += nbytes;
 80133ec:	7abb      	ldrb	r3, [r7, #10]
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	4413      	add	r3, r2
 80133f2:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 80133f4:	f7ed fa7a 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 80133f8:	687b      	ldr	r3, [r7, #4]
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3718      	adds	r7, #24
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	20000320 	.word	0x20000320

08013408 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 8013408:	b480      	push	{r7}
 801340a:	b083      	sub	sp, #12
 801340c:	af00      	add	r7, sp, #0
 801340e:	4603      	mov	r3, r0
 8013410:	6039      	str	r1, [r7, #0]
 8013412:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 8013414:	bf00      	nop
 8013416:	370c      	adds	r7, #12
 8013418:	46bd      	mov	sp, r7
 801341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341e:	4770      	bx	lr

08013420 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	607b      	str	r3, [r7, #4]
 801342a:	460b      	mov	r3, r1
 801342c:	72fb      	strb	r3, [r7, #11]
 801342e:	4613      	mov	r3, r2
 8013430:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 8013432:	f7ed fa67 	bl	8000904 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8013436:	f107 010b 	add.w	r1, r7, #11
 801343a:	f04f 33ff 	mov.w	r3, #4294967295
 801343e:	2201      	movs	r2, #1
 8013440:	480d      	ldr	r0, [pc, #52]	; (8013478 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 8013442:	f7f2 fcac 	bl	8005d9e <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 8013446:	7abb      	ldrb	r3, [r7, #10]
 8013448:	461a      	mov	r2, r3
 801344a:	2100      	movs	r1, #0
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f000 fa91 	bl	8013974 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 8013452:	7abb      	ldrb	r3, [r7, #10]
 8013454:	b29a      	uxth	r2, r3
 8013456:	f04f 33ff 	mov.w	r3, #4294967295
 801345a:	6879      	ldr	r1, [r7, #4]
 801345c:	4806      	ldr	r0, [pc, #24]	; (8013478 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 801345e:	f7f2 fdda 	bl	8006016 <HAL_SPI_Receive>
        data_p += nbytes;
 8013462:	7abb      	ldrb	r3, [r7, #10]
 8013464:	687a      	ldr	r2, [r7, #4]
 8013466:	4413      	add	r3, r2
 8013468:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 801346a:	f7ed fa3f 	bl	80008ec <_ZN3P103SetEv>
        return ( data_p);
 801346e:	687b      	ldr	r3, [r7, #4]
}
 8013470:	4618      	mov	r0, r3
 8013472:	3710      	adds	r7, #16
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	20000320 	.word	0x20000320

0801347c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 801347c:	b580      	push	{r7, lr}
 801347e:	b084      	sub	sp, #16
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 8013484:	2300      	movs	r3, #0
 8013486:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 8013488:	f7fe fd46 	bl	8011f18 <_ZN2P95IsSetEv>
 801348c:	4603      	mov	r3, r0
 801348e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 8013490:	7bbb      	ldrb	r3, [r7, #14]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d104      	bne.n	80134a0 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 f937 	bl	801370a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 801349c:	4603      	mov	r3, r0
 801349e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 80134a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3710      	adds	r7, #16
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
	...

080134ac <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 80134ac:	b480      	push	{r7}
 80134ae:	b083      	sub	sp, #12
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
                return vbusState;
 80134b4:	4b03      	ldr	r3, [pc, #12]	; (80134c4 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 80134b6:	781b      	ldrb	r3, [r3, #0]
        };
 80134b8:	4618      	mov	r0, r3
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr
 80134c4:	200006b0 	.word	0x200006b0

080134c8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b084      	sub	sp, #16
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	4608      	mov	r0, r1
 80134d2:	4611      	mov	r1, r2
 80134d4:	461a      	mov	r2, r3
 80134d6:	4603      	mov	r3, r0
 80134d8:	70fb      	strb	r3, [r7, #3]
 80134da:	460b      	mov	r3, r1
 80134dc:	70bb      	strb	r3, [r7, #2]
 80134de:	4613      	mov	r3, r2
 80134e0:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 80134e2:	78fb      	ldrb	r3, [r7, #3]
 80134e4:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 80134e6:	7b3b      	ldrb	r3, [r7, #12]
 80134e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d102      	bne.n	80134f8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 80134f2:	787b      	ldrb	r3, [r7, #1]
 80134f4:	2b07      	cmp	r3, #7
 80134f6:	d901      	bls.n	80134fc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 80134f8:	2300      	movs	r3, #0
 80134fa:	e079      	b.n	80135f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 80134fc:	78bb      	ldrb	r3, [r7, #2]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d005      	beq.n	801350e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	79db      	ldrb	r3, [r3, #7]
 8013506:	2b07      	cmp	r3, #7
 8013508:	d101      	bne.n	801350e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 801350a:	2300      	movs	r3, #0
 801350c:	e070      	b.n	80135f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 801350e:	2100      	movs	r1, #0
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f000 f8d7 	bl	80136c4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 8013516:	4603      	mov	r3, r0
 8013518:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 801351a:	7bfb      	ldrb	r3, [r7, #15]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d101      	bne.n	8013524 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 8013520:	2300      	movs	r3, #0
 8013522:	e065      	b.n	80135f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 8013524:	7b3b      	ldrb	r3, [r7, #12]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d124      	bne.n	8013574 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 801352a:	78bb      	ldrb	r3, [r7, #2]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00f      	beq.n	8013550 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 8013530:	7bfa      	ldrb	r2, [r7, #15]
 8013532:	6879      	ldr	r1, [r7, #4]
 8013534:	4613      	mov	r3, r2
 8013536:	00db      	lsls	r3, r3, #3
 8013538:	1a9b      	subs	r3, r3, r2
 801353a:	440b      	add	r3, r1
 801353c:	330c      	adds	r3, #12
 801353e:	2241      	movs	r2, #65	; 0x41
 8013540:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	79db      	ldrb	r3, [r3, #7]
 8013546:	3301      	adds	r3, #1
 8013548:	b2da      	uxtb	r2, r3
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	71da      	strb	r2, [r3, #7]
 801354e:	e008      	b.n	8013562 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 8013550:	7bfa      	ldrb	r2, [r7, #15]
 8013552:	6879      	ldr	r1, [r7, #4]
 8013554:	4613      	mov	r3, r2
 8013556:	00db      	lsls	r3, r3, #3
 8013558:	1a9b      	subs	r3, r3, r2
 801355a:	440b      	add	r3, r1
 801355c:	330c      	adds	r3, #12
 801355e:	2201      	movs	r2, #1
 8013560:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 8013562:	7bfa      	ldrb	r2, [r7, #15]
 8013564:	6879      	ldr	r1, [r7, #4]
 8013566:	4613      	mov	r3, r2
 8013568:	00db      	lsls	r3, r3, #3
 801356a:	1a9b      	subs	r3, r3, r2
 801356c:	440b      	add	r3, r1
 801356e:	330c      	adds	r3, #12
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	e03d      	b.n	80135f0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 8013574:	2300      	movs	r3, #0
 8013576:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 8013578:	7b3b      	ldrb	r3, [r7, #12]
 801357a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801357e:	b2da      	uxtb	r2, r3
 8013580:	7a3b      	ldrb	r3, [r7, #8]
 8013582:	f362 03c5 	bfi	r3, r2, #3, #3
 8013586:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 8013588:	78bb      	ldrb	r3, [r7, #2]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d013      	beq.n	80135b6 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 801358e:	7a3b      	ldrb	r3, [r7, #8]
 8013590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013594:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	79db      	ldrb	r3, [r3, #7]
 801359a:	3301      	adds	r3, #1
 801359c:	b2da      	uxtb	r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	71da      	strb	r2, [r3, #7]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	79db      	ldrb	r3, [r3, #7]
 80135a6:	f003 0307 	and.w	r3, r3, #7
 80135aa:	b2da      	uxtb	r2, r3
 80135ac:	7a3b      	ldrb	r3, [r7, #8]
 80135ae:	f362 0302 	bfi	r3, r2, #0, #3
 80135b2:	723b      	strb	r3, [r7, #8]
 80135b4:	e00b      	b.n	80135ce <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 80135b6:	7a3b      	ldrb	r3, [r7, #8]
 80135b8:	f36f 1386 	bfc	r3, #6, #1
 80135bc:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 80135be:	787b      	ldrb	r3, [r7, #1]
 80135c0:	f003 0307 	and.w	r3, r3, #7
 80135c4:	b2da      	uxtb	r2, r3
 80135c6:	7a3b      	ldrb	r3, [r7, #8]
 80135c8:	f362 0302 	bfi	r3, r2, #0, #3
 80135cc:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 80135ce:	7bfa      	ldrb	r2, [r7, #15]
 80135d0:	6879      	ldr	r1, [r7, #4]
 80135d2:	4613      	mov	r3, r2
 80135d4:	00db      	lsls	r3, r3, #3
 80135d6:	1a9b      	subs	r3, r3, r2
 80135d8:	440b      	add	r3, r1
 80135da:	330c      	adds	r3, #12
 80135dc:	7a3a      	ldrb	r2, [r7, #8]
 80135de:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 80135e0:	7bfa      	ldrb	r2, [r7, #15]
 80135e2:	6879      	ldr	r1, [r7, #4]
 80135e4:	4613      	mov	r3, r2
 80135e6:	00db      	lsls	r3, r3, #3
 80135e8:	1a9b      	subs	r3, r3, r2
 80135ea:	440b      	add	r3, r1
 80135ec:	330c      	adds	r3, #12
 80135ee:	781b      	ldrb	r3, [r3, #0]
        };
 80135f0:	4618      	mov	r0, r3
 80135f2:	3710      	adds	r7, #16
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	460b      	mov	r3, r1
 8013602:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 8013604:	78fb      	ldrb	r3, [r7, #3]
 8013606:	2b41      	cmp	r3, #65	; 0x41
 8013608:	d103      	bne.n	8013612 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f000 f841 	bl	8013692 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 8013610:	e00b      	b.n	801362a <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 8013612:	78fb      	ldrb	r3, [r7, #3]
 8013614:	4619      	mov	r1, r3
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 f854 	bl	80136c4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 801361c:	4603      	mov	r3, r0
 801361e:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 8013620:	7bfb      	ldrb	r3, [r7, #15]
 8013622:	4619      	mov	r1, r3
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f000 f893 	bl	8013750 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 801362a:	3710      	adds	r7, #16
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 8013630:	b480      	push	{r7}
 8013632:	b083      	sub	sp, #12
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	460b      	mov	r3, r1
 801363a:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 801363c:	78fa      	ldrb	r2, [r7, #3]
 801363e:	6879      	ldr	r1, [r7, #4]
 8013640:	4613      	mov	r3, r2
 8013642:	00db      	lsls	r3, r3, #3
 8013644:	1a9b      	subs	r3, r3, r2
 8013646:	440b      	add	r3, r1
 8013648:	330c      	adds	r3, #12
 801364a:	2200      	movs	r2, #0
 801364c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 801364e:	78fa      	ldrb	r2, [r7, #3]
 8013650:	6879      	ldr	r1, [r7, #4]
 8013652:	4613      	mov	r3, r2
 8013654:	00db      	lsls	r3, r3, #3
 8013656:	1a9b      	subs	r3, r3, r2
 8013658:	440b      	add	r3, r1
 801365a:	330d      	adds	r3, #13
 801365c:	2201      	movs	r2, #1
 801365e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 8013660:	78fa      	ldrb	r2, [r7, #3]
 8013662:	6879      	ldr	r1, [r7, #4]
 8013664:	4613      	mov	r3, r2
 8013666:	00db      	lsls	r3, r3, #3
 8013668:	1a9b      	subs	r3, r3, r2
 801366a:	440b      	add	r3, r1
 801366c:	330e      	adds	r3, #14
 801366e:	2200      	movs	r2, #0
 8013670:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 8013672:	78fa      	ldrb	r2, [r7, #3]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	1d19      	adds	r1, r3, #4
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	4613      	mov	r3, r2
 801367c:	00db      	lsls	r3, r3, #3
 801367e:	1a9b      	subs	r3, r3, r2
 8013680:	4403      	add	r3, r0
 8013682:	3308      	adds	r3, #8
 8013684:	6019      	str	r1, [r3, #0]
        };
 8013686:	bf00      	nop
 8013688:	370c      	adds	r7, #12
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr

08013692 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 8013692:	b580      	push	{r7, lr}
 8013694:	b084      	sub	sp, #16
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 801369a:	2301      	movs	r3, #1
 801369c:	73fb      	strb	r3, [r7, #15]
 801369e:	7bfb      	ldrb	r3, [r7, #15]
 80136a0:	2b0f      	cmp	r3, #15
 80136a2:	d808      	bhi.n	80136b6 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 80136a4:	7bfb      	ldrb	r3, [r7, #15]
 80136a6:	4619      	mov	r1, r3
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7ff ffc1 	bl	8013630 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
 80136b0:	3301      	adds	r3, #1
 80136b2:	73fb      	strb	r3, [r7, #15]
 80136b4:	e7f3      	b.n	801369e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	71da      	strb	r2, [r3, #7]
        };
 80136bc:	bf00      	nop
 80136be:	3710      	adds	r7, #16
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 80136c4:	b480      	push	{r7}
 80136c6:	b085      	sub	sp, #20
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80136d0:	2301      	movs	r3, #1
 80136d2:	73fb      	strb	r3, [r7, #15]
 80136d4:	7bfb      	ldrb	r3, [r7, #15]
 80136d6:	2b0f      	cmp	r3, #15
 80136d8:	d810      	bhi.n	80136fc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 80136da:	7bfa      	ldrb	r2, [r7, #15]
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	4613      	mov	r3, r2
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	1a9b      	subs	r3, r3, r2
 80136e4:	440b      	add	r3, r1
 80136e6:	330c      	adds	r3, #12
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	78fa      	ldrb	r2, [r7, #3]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d101      	bne.n	80136f4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 80136f0:	7bfb      	ldrb	r3, [r7, #15]
 80136f2:	e004      	b.n	80136fe <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 80136f4:	7bfb      	ldrb	r3, [r7, #15]
 80136f6:	3301      	adds	r3, #1
 80136f8:	73fb      	strb	r3, [r7, #15]
 80136fa:	e7eb      	b.n	80136d4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 80136fc:	2300      	movs	r3, #0
        };
 80136fe:	4618      	mov	r0, r3
 8013700:	3714      	adds	r7, #20
 8013702:	46bd      	mov	sp, r7
 8013704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013708:	4770      	bx	lr

0801370a <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 801370a:	b580      	push	{r7, lr}
 801370c:	b084      	sub	sp, #16
 801370e:	af00      	add	r7, sp, #0
 8013710:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 8013712:	2300      	movs	r3, #0
 8013714:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 8013716:	21c8      	movs	r1, #200	; 0xc8
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7ee fc49 	bl	8001fb0 <_ZN8MAX3421eI3P102P9E5regRdEh>
 801371e:	4603      	mov	r3, r0
 8013720:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 8013722:	7bbb      	ldrb	r3, [r7, #14]
 8013724:	f003 0320 	and.w	r3, r3, #32
 8013728:	2b00      	cmp	r3, #0
 801372a:	d006      	beq.n	801373a <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f7ee fc61 	bl	8001ff4 <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 8013732:	7bfb      	ldrb	r3, [r7, #15]
 8013734:	f043 0320 	orr.w	r3, r3, #32
 8013738:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 801373a:	7bfb      	ldrb	r3, [r7, #15]
 801373c:	461a      	mov	r2, r3
 801373e:	21c8      	movs	r1, #200	; 0xc8
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ee fbe3 	bl	8001f0c <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 8013746:	7bfb      	ldrb	r3, [r7, #15]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 801375c:	78fb      	ldrb	r3, [r7, #3]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d03a      	beq.n	80137d8 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 8013762:	78fa      	ldrb	r2, [r7, #3]
 8013764:	6879      	ldr	r1, [r7, #4]
 8013766:	4613      	mov	r3, r2
 8013768:	00db      	lsls	r3, r3, #3
 801376a:	1a9b      	subs	r3, r3, r2
 801376c:	440b      	add	r3, r1
 801376e:	330c      	adds	r3, #12
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 8013774:	7b3b      	ldrb	r3, [r7, #12]
 8013776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801377a:	b2db      	uxtb	r3, r3
 801377c:	2b00      	cmp	r3, #0
 801377e:	d025      	beq.n	80137cc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 8013780:	2301      	movs	r3, #1
 8013782:	73fb      	strb	r3, [r7, #15]
 8013784:	7bfb      	ldrb	r3, [r7, #15]
 8013786:	461a      	mov	r2, r3
 8013788:	7b39      	ldrb	r1, [r7, #12]
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f000 f828 	bl	80137e0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 8013790:	4603      	mov	r3, r0
 8013792:	73fb      	strb	r3, [r7, #15]
 8013794:	7bfb      	ldrb	r3, [r7, #15]
 8013796:	2b00      	cmp	r3, #0
 8013798:	bf14      	ite	ne
 801379a:	2301      	movne	r3, #1
 801379c:	2300      	moveq	r3, #0
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d005      	beq.n	80137b0 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 80137a4:	7bfb      	ldrb	r3, [r7, #15]
 80137a6:	4619      	mov	r1, r3
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7ff ffd1 	bl	8013750 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 80137ae:	e7e9      	b.n	8013784 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	79db      	ldrb	r3, [r3, #7]
 80137b4:	7b3a      	ldrb	r2, [r7, #12]
 80137b6:	f3c2 0202 	ubfx	r2, r2, #0, #3
 80137ba:	b2d2      	uxtb	r2, r2
 80137bc:	4293      	cmp	r3, r2
 80137be:	d105      	bne.n	80137cc <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	79db      	ldrb	r3, [r3, #7]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 80137cc:	78fb      	ldrb	r3, [r7, #3]
 80137ce:	4619      	mov	r1, r3
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f7ff ff2d 	bl	8013630 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 80137d6:	e000      	b.n	80137da <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 80137d8:	bf00      	nop
        }
 80137da:	3710      	adds	r7, #16
 80137dc:	46bd      	mov	sp, r7
 80137de:	bd80      	pop	{r7, pc}

080137e0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 80137e0:	b480      	push	{r7}
 80137e2:	b085      	sub	sp, #20
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
 80137e8:	7039      	strb	r1, [r7, #0]
 80137ea:	4613      	mov	r3, r2
 80137ec:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 80137ee:	78fb      	ldrb	r3, [r7, #3]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d004      	beq.n	80137fe <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80137f4:	78fb      	ldrb	r3, [r7, #3]
 80137f6:	2b0f      	cmp	r3, #15
 80137f8:	d801      	bhi.n	80137fe <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 80137fa:	78fb      	ldrb	r3, [r7, #3]
 80137fc:	e000      	b.n	8013800 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 80137fe:	2301      	movs	r3, #1
 8013800:	73fb      	strb	r3, [r7, #15]
 8013802:	7bfb      	ldrb	r3, [r7, #15]
 8013804:	2b0f      	cmp	r3, #15
 8013806:	d816      	bhi.n	8013836 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 8013808:	7bfa      	ldrb	r2, [r7, #15]
 801380a:	6879      	ldr	r1, [r7, #4]
 801380c:	4613      	mov	r3, r2
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	1a9b      	subs	r3, r3, r2
 8013812:	440b      	add	r3, r1
 8013814:	3308      	adds	r3, #8
 8013816:	791b      	ldrb	r3, [r3, #4]
 8013818:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 801381c:	b2da      	uxtb	r2, r3
 801381e:	783b      	ldrb	r3, [r7, #0]
 8013820:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013824:	b2db      	uxtb	r3, r3
 8013826:	429a      	cmp	r2, r3
 8013828:	d101      	bne.n	801382e <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 801382a:	7bfb      	ldrb	r3, [r7, #15]
 801382c:	e004      	b.n	8013838 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 801382e:	7bfb      	ldrb	r3, [r7, #15]
 8013830:	3301      	adds	r3, #1
 8013832:	73fb      	strb	r3, [r7, #15]
 8013834:	e7e5      	b.n	8013802 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 8013836:	2300      	movs	r3, #0
        };
 8013838:	4618      	mov	r0, r3
 801383a:	3714      	adds	r7, #20
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr

08013844 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 8013844:	b480      	push	{r7}
 8013846:	b085      	sub	sp, #20
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d101      	bne.n	801385c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 8013858:	2300      	movs	r3, #0
 801385a:	e031      	b.n	80138c0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	791b      	ldrb	r3, [r3, #4]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d022      	beq.n	80138aa <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	881b      	ldrh	r3, [r3, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d01e      	beq.n	80138aa <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	68f9      	ldr	r1, [r7, #12]
 8013876:	7949      	ldrb	r1, [r1, #5]
 8013878:	4608      	mov	r0, r1
 801387a:	68f9      	ldr	r1, [r7, #12]
 801387c:	7909      	ldrb	r1, [r1, #4]
 801387e:	1a41      	subs	r1, r0, r1
 8013880:	440b      	add	r3, r1
 8013882:	7812      	ldrb	r2, [r2, #0]
 8013884:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	791b      	ldrb	r3, [r3, #4]
 801388a:	3b01      	subs	r3, #1
 801388c:	b2da      	uxtb	r2, r3
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	711a      	strb	r2, [r3, #4]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	881b      	ldrh	r3, [r3, #0]
 8013896:	3b01      	subs	r3, #1
 8013898:	b29a      	uxth	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	801a      	strh	r2, [r3, #0]
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	1c5a      	adds	r2, r3, #1
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	601a      	str	r2, [r3, #0]
 80138a8:	e7d8      	b.n	801385c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	791b      	ldrb	r3, [r3, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d001      	beq.n	80138b6 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e004      	b.n	80138c0 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	795a      	ldrb	r2, [r3, #5]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	711a      	strb	r2, [r3, #4]
        return true;
 80138be:	2301      	movs	r3, #1
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3714      	adds	r7, #20
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <__cxa_pure_virtual>:
 80138cc:	b508      	push	{r3, lr}
 80138ce:	f000 f80d 	bl	80138ec <_ZSt9terminatev>

080138d2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80138d2:	b508      	push	{r3, lr}
 80138d4:	4780      	blx	r0
 80138d6:	f000 f80e 	bl	80138f6 <abort>
	...

080138dc <_ZSt13get_terminatev>:
 80138dc:	4b02      	ldr	r3, [pc, #8]	; (80138e8 <_ZSt13get_terminatev+0xc>)
 80138de:	6818      	ldr	r0, [r3, #0]
 80138e0:	f3bf 8f5b 	dmb	ish
 80138e4:	4770      	bx	lr
 80138e6:	bf00      	nop
 80138e8:	2000011c 	.word	0x2000011c

080138ec <_ZSt9terminatev>:
 80138ec:	b508      	push	{r3, lr}
 80138ee:	f7ff fff5 	bl	80138dc <_ZSt13get_terminatev>
 80138f2:	f7ff ffee 	bl	80138d2 <_ZN10__cxxabiv111__terminateEPFvvE>

080138f6 <abort>:
 80138f6:	b508      	push	{r3, lr}
 80138f8:	2006      	movs	r0, #6
 80138fa:	f000 f86b 	bl	80139d4 <raise>
 80138fe:	2001      	movs	r0, #1
 8013900:	f7ee fdf0 	bl	80024e4 <_exit>

08013904 <__errno>:
 8013904:	4b01      	ldr	r3, [pc, #4]	; (801390c <__errno+0x8>)
 8013906:	6818      	ldr	r0, [r3, #0]
 8013908:	4770      	bx	lr
 801390a:	bf00      	nop
 801390c:	20000120 	.word	0x20000120

08013910 <__libc_init_array>:
 8013910:	b570      	push	{r4, r5, r6, lr}
 8013912:	4d0d      	ldr	r5, [pc, #52]	; (8013948 <__libc_init_array+0x38>)
 8013914:	4c0d      	ldr	r4, [pc, #52]	; (801394c <__libc_init_array+0x3c>)
 8013916:	1b64      	subs	r4, r4, r5
 8013918:	10a4      	asrs	r4, r4, #2
 801391a:	2600      	movs	r6, #0
 801391c:	42a6      	cmp	r6, r4
 801391e:	d109      	bne.n	8013934 <__libc_init_array+0x24>
 8013920:	4d0b      	ldr	r5, [pc, #44]	; (8013950 <__libc_init_array+0x40>)
 8013922:	4c0c      	ldr	r4, [pc, #48]	; (8013954 <__libc_init_array+0x44>)
 8013924:	f000 f884 	bl	8013a30 <_init>
 8013928:	1b64      	subs	r4, r4, r5
 801392a:	10a4      	asrs	r4, r4, #2
 801392c:	2600      	movs	r6, #0
 801392e:	42a6      	cmp	r6, r4
 8013930:	d105      	bne.n	801393e <__libc_init_array+0x2e>
 8013932:	bd70      	pop	{r4, r5, r6, pc}
 8013934:	f855 3b04 	ldr.w	r3, [r5], #4
 8013938:	4798      	blx	r3
 801393a:	3601      	adds	r6, #1
 801393c:	e7ee      	b.n	801391c <__libc_init_array+0xc>
 801393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013942:	4798      	blx	r3
 8013944:	3601      	adds	r6, #1
 8013946:	e7f2      	b.n	801392e <__libc_init_array+0x1e>
 8013948:	08014d30 	.word	0x08014d30
 801394c:	08014d30 	.word	0x08014d30
 8013950:	08014d30 	.word	0x08014d30
 8013954:	08014d38 	.word	0x08014d38

08013958 <memcpy>:
 8013958:	440a      	add	r2, r1
 801395a:	4291      	cmp	r1, r2
 801395c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013960:	d100      	bne.n	8013964 <memcpy+0xc>
 8013962:	4770      	bx	lr
 8013964:	b510      	push	{r4, lr}
 8013966:	f811 4b01 	ldrb.w	r4, [r1], #1
 801396a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801396e:	4291      	cmp	r1, r2
 8013970:	d1f9      	bne.n	8013966 <memcpy+0xe>
 8013972:	bd10      	pop	{r4, pc}

08013974 <memset>:
 8013974:	4402      	add	r2, r0
 8013976:	4603      	mov	r3, r0
 8013978:	4293      	cmp	r3, r2
 801397a:	d100      	bne.n	801397e <memset+0xa>
 801397c:	4770      	bx	lr
 801397e:	f803 1b01 	strb.w	r1, [r3], #1
 8013982:	e7f9      	b.n	8013978 <memset+0x4>

08013984 <_raise_r>:
 8013984:	291f      	cmp	r1, #31
 8013986:	b538      	push	{r3, r4, r5, lr}
 8013988:	4604      	mov	r4, r0
 801398a:	460d      	mov	r5, r1
 801398c:	d904      	bls.n	8013998 <_raise_r+0x14>
 801398e:	2316      	movs	r3, #22
 8013990:	6003      	str	r3, [r0, #0]
 8013992:	f04f 30ff 	mov.w	r0, #4294967295
 8013996:	bd38      	pop	{r3, r4, r5, pc}
 8013998:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801399a:	b112      	cbz	r2, 80139a2 <_raise_r+0x1e>
 801399c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139a0:	b94b      	cbnz	r3, 80139b6 <_raise_r+0x32>
 80139a2:	4620      	mov	r0, r4
 80139a4:	f000 f830 	bl	8013a08 <_getpid_r>
 80139a8:	462a      	mov	r2, r5
 80139aa:	4601      	mov	r1, r0
 80139ac:	4620      	mov	r0, r4
 80139ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139b2:	f000 b817 	b.w	80139e4 <_kill_r>
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d00a      	beq.n	80139d0 <_raise_r+0x4c>
 80139ba:	1c59      	adds	r1, r3, #1
 80139bc:	d103      	bne.n	80139c6 <_raise_r+0x42>
 80139be:	2316      	movs	r3, #22
 80139c0:	6003      	str	r3, [r0, #0]
 80139c2:	2001      	movs	r0, #1
 80139c4:	e7e7      	b.n	8013996 <_raise_r+0x12>
 80139c6:	2400      	movs	r4, #0
 80139c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139cc:	4628      	mov	r0, r5
 80139ce:	4798      	blx	r3
 80139d0:	2000      	movs	r0, #0
 80139d2:	e7e0      	b.n	8013996 <_raise_r+0x12>

080139d4 <raise>:
 80139d4:	4b02      	ldr	r3, [pc, #8]	; (80139e0 <raise+0xc>)
 80139d6:	4601      	mov	r1, r0
 80139d8:	6818      	ldr	r0, [r3, #0]
 80139da:	f7ff bfd3 	b.w	8013984 <_raise_r>
 80139de:	bf00      	nop
 80139e0:	20000120 	.word	0x20000120

080139e4 <_kill_r>:
 80139e4:	b538      	push	{r3, r4, r5, lr}
 80139e6:	4d07      	ldr	r5, [pc, #28]	; (8013a04 <_kill_r+0x20>)
 80139e8:	2300      	movs	r3, #0
 80139ea:	4604      	mov	r4, r0
 80139ec:	4608      	mov	r0, r1
 80139ee:	4611      	mov	r1, r2
 80139f0:	602b      	str	r3, [r5, #0]
 80139f2:	f7ee fd67 	bl	80024c4 <_kill>
 80139f6:	1c43      	adds	r3, r0, #1
 80139f8:	d102      	bne.n	8013a00 <_kill_r+0x1c>
 80139fa:	682b      	ldr	r3, [r5, #0]
 80139fc:	b103      	cbz	r3, 8013a00 <_kill_r+0x1c>
 80139fe:	6023      	str	r3, [r4, #0]
 8013a00:	bd38      	pop	{r3, r4, r5, pc}
 8013a02:	bf00      	nop
 8013a04:	20005d64 	.word	0x20005d64

08013a08 <_getpid_r>:
 8013a08:	f7ee bd54 	b.w	80024b4 <_getpid>

08013a0c <strncmp>:
 8013a0c:	b510      	push	{r4, lr}
 8013a0e:	b16a      	cbz	r2, 8013a2c <strncmp+0x20>
 8013a10:	3901      	subs	r1, #1
 8013a12:	1884      	adds	r4, r0, r2
 8013a14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013a18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013a1c:	4293      	cmp	r3, r2
 8013a1e:	d103      	bne.n	8013a28 <strncmp+0x1c>
 8013a20:	42a0      	cmp	r0, r4
 8013a22:	d001      	beq.n	8013a28 <strncmp+0x1c>
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1f5      	bne.n	8013a14 <strncmp+0x8>
 8013a28:	1a98      	subs	r0, r3, r2
 8013a2a:	bd10      	pop	{r4, pc}
 8013a2c:	4610      	mov	r0, r2
 8013a2e:	e7fc      	b.n	8013a2a <strncmp+0x1e>

08013a30 <_init>:
 8013a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a32:	bf00      	nop
 8013a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a36:	bc08      	pop	{r3}
 8013a38:	469e      	mov	lr, r3
 8013a3a:	4770      	bx	lr

08013a3c <_fini>:
 8013a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3e:	bf00      	nop
 8013a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a42:	bc08      	pop	{r3}
 8013a44:	469e      	mov	lr, r3
 8013a46:	4770      	bx	lr
