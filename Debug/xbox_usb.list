
xbox_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f544  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800f708  0800f708  0001f708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa20  0800fa20  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa20  0800fa20  0001fa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa28  0800fa28  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fa28  0800fa28  0001fa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa30  0800fa30  0001fa30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800fa34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  200001dc  0800fc10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  0800fc10  00020f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c4a5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b95  00000000  00000000  0006c6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00073248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001758  00000000  00000000  00074ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c494  00000000  00000000  00076238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff0c  00000000  00000000  000a26cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef382  00000000  00000000  000c25d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b195a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b60  00000000  00000000  001b19b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001dc 	.word	0x200001dc
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800f6f0 	.word	0x0800f6f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	0800f6f0 	.word	0x0800f6f0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d101      	bne.n	8000520 <_ZN5Print5writeEPKc+0x14>
 800051c:	2300      	movs	r3, #0
 800051e:	e00d      	b.n	800053c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3304      	adds	r3, #4
 8000526:	681c      	ldr	r4, [r3, #0]
 8000528:	6838      	ldr	r0, [r7, #0]
 800052a:	f7ff fe6b 	bl	8000204 <strlen>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	6839      	ldr	r1, [r7, #0]
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	47a0      	blx	r4
 8000538:	4603      	mov	r3, r0
 800053a:	bf00      	nop
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1c59      	adds	r1, r3, #1
 8000572:	60b9      	str	r1, [r7, #8]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4619      	mov	r1, r3
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	4790      	blx	r2
 800057c:	4602      	mov	r2, r0
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	617b      	str	r3, [r7, #20]
  while (size--) {
 8000584:	e7e6      	b.n	8000554 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8000586:	697b      	ldr	r3, [r7, #20]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3718      	adds	r7, #24
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800059a:	6839      	ldr	r1, [r7, #0]
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f805 	bl	80005ac <_ZN5Print5printEPKc>
 80005a2:	4603      	mov	r3, r0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  return write(str);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff ffa7 	bl	800050c <_ZN5Print5writeEPKc>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <_ZN11SerialClass5writeEh>:
#include "SerialClass.h"

size_t SerialClass::write(uint8_t data) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
	return write(&data, 1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3304      	adds	r3, #4
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	1cf9      	adds	r1, r7, #3
 80005de:	2201      	movs	r2, #1
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	4798      	blx	r3
 80005e4:	4603      	mov	r3, r0
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZN11SerialClass5writeEPKhj>:

size_t SerialClass::write(const uint8_t *buffer, size_t size) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
	uint8_t *pBuffer = (uint8_t*)buffer;
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(pUART_Handle, pBuffer, size, HAL_MAX_DELAY);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6918      	ldr	r0, [r3, #16]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b29a      	uxth	r2, r3
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	6979      	ldr	r1, [r7, #20]
 800060c:	f005 f841 	bl	8005692 <HAL_UART_Transmit>
	return size;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_ZN11SerialClass4readEv>:

int SerialClass::read() {
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	uint8_t data;
	HAL_UART_Receive(pUART_Handle, &data, 1, HAL_MAX_DELAY);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6918      	ldr	r0, [r3, #16]
 8000626:	f107 010f 	add.w	r1, r7, #15
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2201      	movs	r2, #1
 8000630:	f005 f8c1 	bl	80057b6 <HAL_UART_Receive>
	return data;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_ZN11SerialClass9availableEv>:

int SerialClass::available() {
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
	return -1;
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_ZN11SerialClass4peekEv>:

int SerialClass::peek() {
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
	return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_ZN11SerialClass5flushEv>:

void SerialClass::flush() {
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <_ZN5PrintC1Ev+0x24>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	0800f7f8 	.word	0x0800f7f8

080006ac <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffe4 	bl	8000684 <_ZN5PrintC1Ev>
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <_ZN6StreamC1Ev+0x28>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	0800f870 	.word	0x0800f870

080006d8 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>:
#include "Stream.h"
#include "stm32f4xx_hal.h"

class SerialClass : public Stream {
public:
	SerialClass(UART_HandleTypeDef *UART_Handle) : pUART_Handle(UART_Handle) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffe1 	bl	80006ac <_ZN6StreamC1Ev>
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <_ZN11SerialClassC1EP20__UART_HandleTypeDef+0x28>)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	611a      	str	r2, [r3, #16]
	};
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800f808 	.word	0x0800f808

08000704 <_ZN2P910SetDirReadEv>:
MAKE_PIN(P4, GPIOB, GPIO_PIN_5); // D4
MAKE_PIN(P5, GPIOB, GPIO_PIN_4); // D5
MAKE_PIN(P6, GPIOB, GPIO_PIN_10); // D6
MAKE_PIN(P7, GPIOA, GPIO_PIN_8); // D7
MAKE_PIN(P8, GPIOA, GPIO_PIN_9); // D8
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	4903      	ldr	r1, [pc, #12]	; (8000728 <_ZN2P910SetDirReadEv+0x24>)
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <_ZN2P910SetDirReadEv+0x28>)
 800071e:	f001 fdb3 	bl	8002288 <HAL_GPIO_Init>
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001f8 	.word	0x200001f8
 800072c:	40020800 	.word	0x40020800

08000730 <_ZN3P103SetEv>:
MAKE_PIN(P10, GPIOB, GPIO_PIN_6); // D10
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
 8000734:	2201      	movs	r2, #1
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <_ZN3P103SetEv+0x14>)
 800073a:	f001 ff51 	bl	80025e0 <HAL_GPIO_WritePin>
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40020400 	.word	0x40020400

08000748 <_ZN3P105ClearEv>:
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
 800074c:	2200      	movs	r2, #0
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <_ZN3P105ClearEv+0x14>)
 8000752:	f001 ff45 	bl	80025e0 <HAL_GPIO_WritePin>
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400

08000760 <_ZN3P1011SetDirWriteEv>:
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000766:	2240      	movs	r2, #64	; 0x40
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 800076c:	2201      	movs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	4902      	ldr	r1, [pc, #8]	; (8000788 <_ZN3P1011SetDirWriteEv+0x28>)
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <_ZN3P1011SetDirWriteEv+0x2c>)
 8000780:	f001 fd82 	bl	8002288 <HAL_GPIO_Init>
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000020c 	.word	0x2000020c
 800078c:	40020400 	.word	0x40020400

08000790 <_ZN3BTD11pairWithHIDEv>:
        bool motionPlusInside;
        /** True if it's a Wii U Pro Controller. */
        bool wiiUProController;

        /** Call this function to pair with a HID device */
        void pairWithHID() {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
                waitingForConnection = false;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	721a      	strb	r2, [r3, #8]
                pairWithHIDDevice = true;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                hci_state = HCI_CHECK_DEVICE_SERVICE;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2206      	movs	r2, #6
 80007aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        };
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <_ZN5BTHID4pairEv>:

        /** True if a device is connected */
        bool connected;

        /** Call this to start the pairing sequence with a device */
        void pair(void) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
                if(pBtd)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <_ZN5BTHID4pairEv+0x1a>
                        pBtd->pairWithHID();
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffde 	bl	8000790 <_ZN3BTD11pairWithHIDEv>
        };
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <_ZN5BTHID6onInitEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        void onInit() {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
                if(pFuncOnInit)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <_ZN5BTHID6onInitEv+0x16>
                        pFuncOnInit(); // Call the user function
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4798      	blx	r3
                OnInitBTHID();
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	331c      	adds	r3, #28
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	4798      	blx	r3
        };
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <_ZN5BTHID21ParseBTHIDControlDataEhPh>:
        };
        /**
         * Same as ParseBTHIDData for reports that are sent through the
         * interrupt pipe (in response to a GET_REPORT).
         */
        virtual void ParseBTHIDControlData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	460b      	mov	r3, r1
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	72fb      	strb	r3, [r7, #11]
                return;
 8000814:	bf00      	nop
        }
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_ZN9PS4ParserC1Ev>:

/** This class parses all the data sent by the PS4 controller */
class PS4Parser {
public:
        /** Constructor for the PS4Parser class. */
        PS4Parser() {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <_ZN9PS4ParserC1Ev+0x20>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	601a      	str	r2, [r3, #0]
                Reset();
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f00d f908 	bl	800da44 <_ZN9PS4Parser5ResetEv>
        };
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800f864 	.word	0x0800f864

08000844 <_ZN9PS4Parser10isTouchingEhh>:
         * @param  xyId   The controller sends out three packets with the same structure.
         *                The third one will contain the last measure, but if you read from the controller then there is only be data in the first one.
         *                For that reason it will be set to 0 if the argument is omitted.
         * @return        Returns true if the specific finger is touching the touchpad.
         */
        bool isTouching(uint8_t finger = 0, uint8_t xyId = 0) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	70bb      	strb	r3, [r7, #2]
                return !(ps4Data.xy[xyId].finger[finger].touching); // The bit is cleared when a finger is touching the touchpad
 8000854:	78ba      	ldrb	r2, [r7, #2]
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	0098      	lsls	r0, r3, #2
 800085c:	4613      	mov	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	4413      	add	r3, r2
 8000862:	4403      	add	r3, r0
 8000864:	440b      	add	r3, r1
 8000866:	3320      	adds	r3, #32
 8000868:	799b      	ldrb	r3, [r3, #6]
 800086a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
        };
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>:

        /**
         * Turn on rumble.
         * @param mode Either ::RumbleHigh or ::RumbleLow.
         */
        void setRumbleOn(RumbleEnum mode) {
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	70fb      	strb	r3, [r7, #3]
                if (mode == RumbleLow)
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	2b20      	cmp	r3, #32
 8000892:	d105      	bne.n	80008a0 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x1e>
                        setRumbleOn(0x00, 0xFF);
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	2100      	movs	r1, #0
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 f80a 	bl	80008b2 <_ZN9PS4Parser11setRumbleOnEhh>
                else
                        setRumbleOn(0xFF, 0x00);
        };
 800089e:	e004      	b.n	80008aa <_ZN9PS4Parser11setRumbleOnE10RumbleEnum+0x28>
                        setRumbleOn(0xFF, 0x00);
 80008a0:	2200      	movs	r2, #0
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f804 	bl	80008b2 <_ZN9PS4Parser11setRumbleOnEhh>
        };
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_ZN9PS4Parser11setRumbleOnEhh>:
        /**
         * Turn on rumble.
         * @param bigRumble   Value for big motor.
         * @param smallRumble Value for small motor.
         */
        void setRumbleOn(uint8_t bigRumble, uint8_t smallRumble) {
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	70bb      	strb	r3, [r7, #2]
                ps4Output.bigRumble = bigRumble;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	78fa      	ldrb	r2, [r7, #3]
 80008c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                ps4Output.smallRumble = smallRumble;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	78ba      	ldrb	r2, [r7, #2]
 80008ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                ps4Output.reportChanged = true;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2201      	movs	r2, #1
 80008d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_ZN9PS4Parser6setLedEhhh>:

        /**
         * Use this to set the color using RGB values.
         * @param r,g,b RGB value.
         */
        void setLed(uint8_t r, uint8_t g, uint8_t b) {
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	4608      	mov	r0, r1
 80008f0:	4611      	mov	r1, r2
 80008f2:	461a      	mov	r2, r3
 80008f4:	4603      	mov	r3, r0
 80008f6:	70fb      	strb	r3, [r7, #3]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70bb      	strb	r3, [r7, #2]
 80008fc:	4613      	mov	r3, r2
 80008fe:	707b      	strb	r3, [r7, #1]
                ps4Output.r = r;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	78fa      	ldrb	r2, [r7, #3]
 8000904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                ps4Output.g = g;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	78ba      	ldrb	r2, [r7, #2]
 800090c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                ps4Output.b = b;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	787a      	ldrb	r2, [r7, #1]
 8000914:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                ps4Output.reportChanged = true;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2201      	movs	r2, #1
 800091c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_ZN9PS4Parser6setLedE10ColorsEnum>:

        /**
         * Use this to set the color using the predefined colors in ::ColorsEnum.
         * @param color The desired color.
         */
        void setLed(ColorsEnum color) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
                setLed((uint8_t)(color >> 16), (uint8_t)(color >> 8), (uint8_t)(color));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	141b      	asrs	r3, r3, #16
 800093a:	b2d9      	uxtb	r1, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	121b      	asrs	r3, r3, #8
 8000940:	b2da      	uxtb	r2, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffcd 	bl	80008e6 <_ZN9PS4Parser6setLedEhhh>
        };
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <_ZN9PS4Parser11setLedFlashEhh>:
        /**
         * Set the LEDs flash time.
         * @param flashOn  Time to flash bright (255 = 2.5 seconds).
         * @param flashOff Time to flash dark (255 = 2.5 seconds).
         */
        void setLedFlash(uint8_t flashOn, uint8_t flashOff) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	70fb      	strb	r3, [r7, #3]
 8000960:	4613      	mov	r3, r2
 8000962:	70bb      	strb	r3, [r7, #2]
                ps4Output.flashOn = flashOn;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	78fa      	ldrb	r2, [r7, #3]
 8000968:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
                ps4Output.flashOff = flashOff;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	78ba      	ldrb	r2, [r7, #2]
 8000970:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                ps4Output.reportChanged = true;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2201      	movs	r2, #1
 8000978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        };
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <_ZN5PS4BTC1EP3BTDbPKc>:
         * Constructor for the PS4BT class.
         * @param  p     Pointer to the BTD class instance.
         * @param  pair  Set this to true in order to pair with the device. If the argument is omitted then it will not pair with it. One can use ::PAIR to set it to true.
         * @param  pin   Write the pin to BTD#btdPin. If argument is omitted, then "0000" will be used.
         */
        PS4BT(BTD *p, bool pair = false, const char *pin = "0000") :
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	71fb      	strb	r3, [r7, #7]
        BTHID(p, pair, pin) {
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68b9      	ldr	r1, [r7, #8]
 80009a0:	f00b fe5c 	bl	800c65c <_ZN5BTHIDC1EP3BTDbPKc>
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3378      	adds	r3, #120	; 0x78
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff39 	bl	8000820 <_ZN9PS4ParserC1Ev>
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <_ZN5PS4BTC1EP3BTDbPKc+0x48>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <_ZN5PS4BTC1EP3BTDbPKc+0x4c>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	679a      	str	r2, [r3, #120]	; 0x78
                PS4Parser::Reset();
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3378      	adds	r3, #120	; 0x78
 80009be:	4618      	mov	r0, r3
 80009c0:	f00d f840 	bl	800da44 <_ZN9PS4Parser5ResetEv>
        };
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800f828 	.word	0x0800f828
 80009d4:	0800f858 	.word	0x0800f858

080009d8 <_ZN5PS4BT9connectedEv>:

        /**
         * Used to check if a PS4 controller is connected.
         * @return Returns true if it is connected.
         */
        bool connected() {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
                return BTHID::connected;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7d5b      	ldrb	r3, [r3, #21]
        };
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <_ZN5PS4BT14ParseBTHIDDataEhPh>:
        /**
         * Used to parse Bluetooth HID data.
         * @param len The length of the incoming data.
         * @param buf Pointer to the data buffer.
         */
        virtual void ParseBTHIDData(uint8_t len, uint8_t *buf) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	460b      	mov	r3, r1
 80009fa:	607a      	str	r2, [r7, #4]
 80009fc:	72fb      	strb	r3, [r7, #11]
                PS4Parser::Parse(len, buf);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	3378      	adds	r3, #120	; 0x78
 8000a02:	7af9      	ldrb	r1, [r7, #11]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f00c ff57 	bl	800d8ba <_ZN9PS4Parser5ParseEhPh>
        };
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <_ZN5PS4BT11OnInitBTHIDEv>:
        /**
         * Called when a device is successfully initialized.
         * Use attachOnInit(void (*funcOnInit)(void)) to call your own function.
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void OnInitBTHID() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3378      	adds	r3, #120	; 0x78
 8000a20:	4618      	mov	r0, r3
 8000a22:	f00d f80f 	bl	800da44 <_ZN9PS4Parser5ResetEv>
                enable_sixaxis(); // Make the controller send out the entire output report
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f855 	bl	8000ad6 <_ZN5PS4BT14enable_sixaxisEv>
                if (!pFuncOnInit)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d105      	bne.n	8000a40 <_ZN5PS4BT11OnInitBTHIDEv+0x2c>
                        setLed(Blue); // Only call this is a user function has not been set
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3378      	adds	r3, #120	; 0x78
 8000a38:	21ff      	movs	r1, #255	; 0xff
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff76 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
        };
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_ZN5PS4BT10ResetBTHIDEv>:

        /** Used to reset the different buffers to there default values */
        virtual void ResetBTHID() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
                PS4Parser::Reset();
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3378      	adds	r3, #120	; 0x78
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00c fff5 	bl	800da44 <_ZN9PS4Parser5ResetEv>
        };
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>:
        /**@}*/

        /** @name PS4Parser implementation */
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b096      	sub	sp, #88	; 0x58
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
                uint8_t buf[79];
                memset(buf, 0, sizeof(buf));
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	224f      	movs	r2, #79	; 0x4f
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00e fddd 	bl	800f634 <memset>

                buf[0] = 0x52; // HID BT Set_report (0x50) | Report Type (Output 0x02)
 8000a7a:	2352      	movs	r3, #82	; 0x52
 8000a7c:	723b      	strb	r3, [r7, #8]
                buf[1] = 0x11; // Report ID
 8000a7e:	2311      	movs	r3, #17
 8000a80:	727b      	strb	r3, [r7, #9]
                buf[2] = 0x80;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	72bb      	strb	r3, [r7, #10]
                buf[4]= 0xFF;
 8000a86:	23ff      	movs	r3, #255	; 0xff
 8000a88:	733b      	strb	r3, [r7, #12]

                buf[7] = output->smallRumble; // Small Rumble
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	785b      	ldrb	r3, [r3, #1]
 8000a8e:	73fb      	strb	r3, [r7, #15]
                buf[8] = output->bigRumble; // Big rumble
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	743b      	strb	r3, [r7, #16]

                buf[9] = output->r; // Red
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	789b      	ldrb	r3, [r3, #2]
 8000a9a:	747b      	strb	r3, [r7, #17]
                buf[10] = output->g; // Green
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	74bb      	strb	r3, [r7, #18]
                buf[11] = output->b; // Blue
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	74fb      	strb	r3, [r7, #19]

                buf[12] = output->flashOn; // Time to flash bright (255 = 2.5 seconds)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	795b      	ldrb	r3, [r3, #5]
 8000aac:	753b      	strb	r3, [r7, #20]
                buf[13] = output->flashOff; // Time to flash dark (255 = 2.5 seconds)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	799b      	ldrb	r3, [r3, #6]
 8000ab2:	757b      	strb	r3, [r7, #21]

                output->reportChanged = false;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	71da      	strb	r2, [r3, #7]

                // The PS4 console actually set the four last bytes to a CRC32 checksum, but it seems like it is actually not needed

                HID_Command(buf, sizeof(buf));
 8000aba:	f107 0308 	add.w	r3, r7, #8
 8000abe:	224f      	movs	r2, #79	; 0x4f
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f81a 	bl	8000afc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000ac8:	bf00      	nop
 8000aca:	3758      	adds	r7, #88	; 0x58
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_ZThn120_N5PS4BT16sendOutputReportEP9PS4Output>:
        virtual void sendOutputReport(PS4Output *output) { // Source: https://github.com/chrippa/ds4drv
 8000ad0:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
 8000ad4:	e7c5      	b.n	8000a62 <_ZN5PS4BT16sendOutputReportEP9PS4Output>

08000ad6 <_ZN5PS4BT14enable_sixaxisEv>:
        /**@}*/

private:
        void enable_sixaxis() { // Command used to make the PS4 controller send out the entire output report
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
                uint8_t buf[2];
                buf[0] = 0x43; // HID BT Get_report (0x40) | Report Type (Feature 0x03)
 8000ade:	2343      	movs	r3, #67	; 0x43
 8000ae0:	733b      	strb	r3, [r7, #12]
                buf[1] = 0x02; // Report ID
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	737b      	strb	r3, [r7, #13]

                HID_Command(buf, 2);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2202      	movs	r2, #2
 8000aec:	4619      	mov	r1, r3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f804 	bl	8000afc <_ZN5PS4BT11HID_CommandEPhh>
        };
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN5PS4BT11HID_CommandEPhh>:

        void HID_Command(uint8_t *data, uint8_t nbytes) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	4613      	mov	r3, r2
 8000b08:	71fb      	strb	r3, [r7, #7]
                pBtd->L2CAP_Command(hci_handle, data, nbytes, control_scid[0], control_scid[1]);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6898      	ldr	r0, [r3, #8]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	8999      	ldrh	r1, [r3, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	7d9b      	ldrb	r3, [r3, #22]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	7dd2      	ldrb	r2, [r2, #23]
 8000b1a:	79fc      	ldrb	r4, [r7, #7]
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4623      	mov	r3, r4
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f00a fe32 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
        };
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 ff71 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 fa93 	bl	8001064 <SystemClock_Config>
//  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
//  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3e:	f000 fc0b 	bl	8001358 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000b42:	f000 fbdb 	bl	80012fc <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8000b46:	f000 fb9d 	bl	8001284 <_ZL12MX_SPI1_Initv>
  MX_USB_DEVICE_Init();
 8000b4a:	f007 ff55 	bl	80089f8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000b4e:	f000 fb3d 	bl	80011cc <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  SPI_Handle = hspi1;
 8000b52:	4ac1      	ldr	r2, [pc, #772]	; (8000e58 <main+0x328>)
 8000b54:	4bc1      	ldr	r3, [pc, #772]	; (8000e5c <main+0x32c>)
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2358      	movs	r3, #88	; 0x58
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f00e fd5b 	bl	800f618 <memcpy>
  UART_Handle = huart2;
 8000b62:	4abf      	ldr	r2, [pc, #764]	; (8000e60 <main+0x330>)
 8000b64:	4bbf      	ldr	r3, [pc, #764]	; (8000e64 <main+0x334>)
 8000b66:	4610      	mov	r0, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2344      	movs	r3, #68	; 0x44
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	f00e fd53 	bl	800f618 <memcpy>

  struct gameHID_t gameHID;
  gameHID.JoyX = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	70bb      	strb	r3, [r7, #2]
  gameHID.JoyY = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	70fb      	strb	r3, [r7, #3]
  gameHID.Joy2X = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	713b      	strb	r3, [r7, #4]
  gameHID.Joy2Y = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	717b      	strb	r3, [r7, #5]
  gameHID.Joy_LT = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	703b      	strb	r3, [r7, #0]
  gameHID.Joy_RT = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	707b      	strb	r3, [r7, #1]
  uint8_t RightHatY_val;

  uint8_t L2_val;
  uint8_t R2_val;

  if (Usb.Init() == -1) {
 8000b8a:	48b7      	ldr	r0, [pc, #732]	; (8000e68 <main+0x338>)
 8000b8c:	f000 fc43 	bl	8001416 <_ZN8MAX3421eI3P102P9E4InitEv>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <main+0x7c>
  		Serial.print(F("\r\nOSC did not start"));
 8000ba2:	49b2      	ldr	r1, [pc, #712]	; (8000e6c <main+0x33c>)
 8000ba4:	48b2      	ldr	r0, [pc, #712]	; (8000e70 <main+0x340>)
 8000ba6:	f7ff fcf3 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  		while (1); // Halt
 8000baa:	e7fe      	b.n	8000baa <main+0x7a>
  	}
  	Serial.print(F("\r\nPS4 Bluetooth Library Started"));
 8000bac:	49b1      	ldr	r1, [pc, #708]	; (8000e74 <main+0x344>)
 8000bae:	48b0      	ldr	r0, [pc, #704]	; (8000e70 <main+0x340>)
 8000bb0:	f7ff fcee 	bl	8000590 <_ZN5Print5printEPK19__FlashStringHelper>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Usb.Task();
 8000bb4:	48ac      	ldr	r0, [pc, #688]	; (8000e68 <main+0x338>)
 8000bb6:	f00d fca1 	bl	800e4fc <_ZN3USB4TaskEv>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2208      	movs	r2, #8
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	48ad      	ldr	r0, [pc, #692]	; (8000e78 <main+0x348>)
 8000bc2:	f006 fd29 	bl	8007618 <USBD_HID_SendReport>

		if (PS4.connected()) {
 8000bc6:	48ad      	ldr	r0, [pc, #692]	; (8000e7c <main+0x34c>)
 8000bc8:	f7ff ff06 	bl	80009d8 <_ZN5PS4BT9connectedEv>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 821b 	beq.w	800100a <main+0x4da>
			LeftHatX_val = PS4.getAnalogHat(LeftHatX);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	48aa      	ldr	r0, [pc, #680]	; (8000e80 <main+0x350>)
 8000bd8:	f00c fe5f 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73bb      	strb	r3, [r7, #14]
			LeftHatY_val = PS4.getAnalogHat(LeftHatY);
 8000be0:	2101      	movs	r1, #1
 8000be2:	48a7      	ldr	r0, [pc, #668]	; (8000e80 <main+0x350>)
 8000be4:	f00c fe59 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000be8:	4603      	mov	r3, r0
 8000bea:	737b      	strb	r3, [r7, #13]
			RightHatX_val = PS4.getAnalogHat(RightHatX);
 8000bec:	2102      	movs	r1, #2
 8000bee:	48a4      	ldr	r0, [pc, #656]	; (8000e80 <main+0x350>)
 8000bf0:	f00c fe53 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	733b      	strb	r3, [r7, #12]
			RightHatY_val = PS4.getAnalogHat(RightHatY);
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	48a1      	ldr	r0, [pc, #644]	; (8000e80 <main+0x350>)
 8000bfc:	f00c fe4d 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c00:	4603      	mov	r3, r0
 8000c02:	72fb      	strb	r3, [r7, #11]

			if (LeftHatX_val > 137 || LeftHatX_val < 117 || LeftHatY_val > 137 || LeftHatY_val < 117 || RightHatX_val > 137 || RightHatX_val < 117 || RightHatY_val > 137 || RightHatY_val < 117) {
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	2b89      	cmp	r3, #137	; 0x89
 8000c08:	d814      	bhi.n	8000c34 <main+0x104>
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	2b74      	cmp	r3, #116	; 0x74
 8000c0e:	d911      	bls.n	8000c34 <main+0x104>
 8000c10:	7b7b      	ldrb	r3, [r7, #13]
 8000c12:	2b89      	cmp	r3, #137	; 0x89
 8000c14:	d80e      	bhi.n	8000c34 <main+0x104>
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	2b74      	cmp	r3, #116	; 0x74
 8000c1a:	d90b      	bls.n	8000c34 <main+0x104>
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	2b89      	cmp	r3, #137	; 0x89
 8000c20:	d808      	bhi.n	8000c34 <main+0x104>
 8000c22:	7b3b      	ldrb	r3, [r7, #12]
 8000c24:	2b74      	cmp	r3, #116	; 0x74
 8000c26:	d905      	bls.n	8000c34 <main+0x104>
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	2b89      	cmp	r3, #137	; 0x89
 8000c2c:	d802      	bhi.n	8000c34 <main+0x104>
 8000c2e:	7afb      	ldrb	r3, [r7, #11]
 8000c30:	2b74      	cmp	r3, #116	; 0x74
 8000c32:	d824      	bhi.n	8000c7e <main+0x14e>

				gameHID.JoyX = PS4.getAnalogHat(LeftHatX) - 128;
 8000c34:	2100      	movs	r1, #0
 8000c36:	4892      	ldr	r0, [pc, #584]	; (8000e80 <main+0x350>)
 8000c38:	f00c fe2f 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	3b80      	subs	r3, #128	; 0x80
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = PS4.getAnalogHat(LeftHatY) - 128;
 8000c46:	2101      	movs	r1, #1
 8000c48:	488d      	ldr	r0, [pc, #564]	; (8000e80 <main+0x350>)
 8000c4a:	f00c fe26 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	3b80      	subs	r3, #128	; 0x80
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = PS4.getAnalogHat(RightHatX) - 128;
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4889      	ldr	r0, [pc, #548]	; (8000e80 <main+0x350>)
 8000c5c:	f00c fe1d 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c60:	4603      	mov	r3, r0
 8000c62:	3b80      	subs	r3, #128	; 0x80
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = PS4.getAnalogHat(RightHatY) - 128;
 8000c6a:	2103      	movs	r1, #3
 8000c6c:	4884      	ldr	r0, [pc, #528]	; (8000e80 <main+0x350>)
 8000c6e:	f00c fe14 	bl	800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>
 8000c72:	4603      	mov	r3, r0
 8000c74:	3b80      	subs	r3, #128	; 0x80
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	717b      	strb	r3, [r7, #5]
 8000c7c:	e007      	b.n	8000c8e <main+0x15e>
				//Serial.print(F("\tRightHatX: "));
				//Serial.print(PS4.getAnalogHat(RightHatX));
				//Serial.print(F("\tRightHatY: "));
				//Serial.print(PS4.getAnalogHat(RightHatY));
			} else {
				gameHID.JoyX = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	70bb      	strb	r3, [r7, #2]
				gameHID.JoyY = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	70fb      	strb	r3, [r7, #3]
				gameHID.Joy2X = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	713b      	strb	r3, [r7, #4]
				gameHID.Joy2Y = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	717b      	strb	r3, [r7, #5]
			}

			//if (PS4.getAnalogButton(L2) || PS4.getAnalogButton(R2)) { // These are the only analog buttons on the PS4 controller
				gameHID.Joy_LT = PS4.getAnalogButton(L2) - 128;
 8000c8e:	2108      	movs	r1, #8
 8000c90:	487b      	ldr	r0, [pc, #492]	; (8000e80 <main+0x350>)
 8000c92:	f00c fde9 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000c96:	4603      	mov	r3, r0
 8000c98:	3b80      	subs	r3, #128	; 0x80
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	703b      	strb	r3, [r7, #0]
				gameHID.Joy_RT = PS4.getAnalogButton(R2) - 128;
 8000ca0:	2109      	movs	r1, #9
 8000ca2:	4877      	ldr	r0, [pc, #476]	; (8000e80 <main+0x350>)
 8000ca4:	f00c fde0 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	3b80      	subs	r3, #128	; 0x80
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	707b      	strb	r3, [r7, #1]
				//Serial.print(F("\r\nL2: "));
				//Serial.print(PS4.getAnalogButton(L2));
				//Serial.print(F("\tR2: "));
				//Serial.print(PS4.getAnalogButton(R2));
			//}
			if (PS4.getAnalogButton(L2) != oldL2Value || PS4.getAnalogButton(R2) != oldR2Value) // Only write value if it's different
 8000cb2:	2108      	movs	r1, #8
 8000cb4:	4872      	ldr	r0, [pc, #456]	; (8000e80 <main+0x350>)
 8000cb6:	f00c fdd7 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <main+0x354>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d109      	bne.n	8000cda <main+0x1aa>
 8000cc6:	2109      	movs	r1, #9
 8000cc8:	486d      	ldr	r0, [pc, #436]	; (8000e80 <main+0x350>)
 8000cca:	f00c fdcd 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <main+0x358>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d001      	beq.n	8000cde <main+0x1ae>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <main+0x1b0>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00f      	beq.n	8000d04 <main+0x1d4>
				PS4.setRumbleOn(PS4.getAnalogButton(L2), PS4.getAnalogButton(R2));
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	4866      	ldr	r0, [pc, #408]	; (8000e80 <main+0x350>)
 8000ce8:	f00c fdbe 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461c      	mov	r4, r3
 8000cf0:	2109      	movs	r1, #9
 8000cf2:	4863      	ldr	r0, [pc, #396]	; (8000e80 <main+0x350>)
 8000cf4:	f00c fdb8 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4621      	mov	r1, r4
 8000cfe:	4860      	ldr	r0, [pc, #384]	; (8000e80 <main+0x350>)
 8000d00:	f7ff fdd7 	bl	80008b2 <_ZN9PS4Parser11setRumbleOnEhh>
			oldL2Value = PS4.getAnalogButton(L2);
 8000d04:	2108      	movs	r1, #8
 8000d06:	485e      	ldr	r0, [pc, #376]	; (8000e80 <main+0x350>)
 8000d08:	f00c fdae 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <main+0x354>)
 8000d12:	701a      	strb	r2, [r3, #0]
			oldR2Value = PS4.getAnalogButton(R2);
 8000d14:	2109      	movs	r1, #9
 8000d16:	485a      	ldr	r0, [pc, #360]	; (8000e80 <main+0x350>)
 8000d18:	f00c fda6 	bl	800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b59      	ldr	r3, [pc, #356]	; (8000e88 <main+0x358>)
 8000d22:	701a      	strb	r2, [r3, #0]
//			Serial.print(F("\r\nL2: "));
//			Serial.print(gameHID.Joy_LT);

			if (PS4.getButtonClick(PS)) {
 8000d24:	2110      	movs	r1, #16
 8000d26:	4856      	ldr	r0, [pc, #344]	; (8000e80 <main+0x350>)
 8000d28:	f00c fd5e 	bl	800d7e8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <main+0x212>
				gameHID.ps4ButtonsTag.button_ps = 1;
 8000d32:	79bb      	ldrb	r3, [r7, #6]
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	71bb      	strb	r3, [r7, #6]
				//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
				//Serial.print(F("\r\nPS"));
				PS4.disconnect();
 8000d3a:	4850      	ldr	r0, [pc, #320]	; (8000e7c <main+0x34c>)
 8000d3c:	f00b fcff 	bl	800c73e <_ZN5BTHID10disconnectEv>
 8000d40:	e15c      	b.n	8000ffc <main+0x4cc>
			} else {
				if (PS4.getButtonPress(TRIANGLE)) {
 8000d42:	210c      	movs	r1, #12
 8000d44:	484e      	ldr	r0, [pc, #312]	; (8000e80 <main+0x350>)
 8000d46:	f00c fd27 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d008      	beq.n	8000d62 <main+0x232>
					gameHID.ps4ButtonsTag.button_triangle = 1;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	71fb      	strb	r3, [r7, #7]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nTraingle"));
					PS4.setRumbleOn(RumbleLow);
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4849      	ldr	r0, [pc, #292]	; (8000e80 <main+0x350>)
 8000d5c:	f7ff fd91 	bl	8000882 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
 8000d60:	e003      	b.n	8000d6a <main+0x23a>
				} else {
					gameHID.ps4ButtonsTag.button_triangle = 0;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f36f 0300 	bfc	r3, #0, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(CIRCLE)) {
 8000d6a:	210d      	movs	r1, #13
 8000d6c:	4844      	ldr	r0, [pc, #272]	; (8000e80 <main+0x350>)
 8000d6e:	f00c fd13 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <main+0x25a>
					gameHID.ps4ButtonsTag.button_circle = 1;
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7e:	71bb      	strb	r3, [r7, #6]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCircle"));
					PS4.setRumbleOn(RumbleHigh);
 8000d80:	2110      	movs	r1, #16
 8000d82:	483f      	ldr	r0, [pc, #252]	; (8000e80 <main+0x350>)
 8000d84:	f7ff fd7d 	bl	8000882 <_ZN9PS4Parser11setRumbleOnE10RumbleEnum>
 8000d88:	e003      	b.n	8000d92 <main+0x262>
				} else {
					gameHID.ps4ButtonsTag.button_circle = 0;
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	f36f 13c7 	bfc	r3, #7, #1
 8000d90:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(CROSS)) {
 8000d92:	210e      	movs	r1, #14
 8000d94:	483a      	ldr	r0, [pc, #232]	; (8000e80 <main+0x350>)
 8000d96:	f00c fcff 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d009      	beq.n	8000db4 <main+0x284>
					gameHID.ps4ButtonsTag.button_cross = 1;
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	71bb      	strb	r3, [r7, #6]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nCross"));
					PS4.setLedFlash(10, 10); // Set it to blink rapidly
 8000da8:	220a      	movs	r2, #10
 8000daa:	210a      	movs	r1, #10
 8000dac:	4834      	ldr	r0, [pc, #208]	; (8000e80 <main+0x350>)
 8000dae:	f7ff fdd1 	bl	8000954 <_ZN9PS4Parser11setLedFlashEhh>
 8000db2:	e003      	b.n	8000dbc <main+0x28c>
				} else {
					gameHID.ps4ButtonsTag.button_cross = 0;;
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	f36f 1386 	bfc	r3, #6, #1
 8000dba:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(SQUARE)) {
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	4830      	ldr	r0, [pc, #192]	; (8000e80 <main+0x350>)
 8000dc0:	f00c fcea 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d009      	beq.n	8000dde <main+0x2ae>
					gameHID.ps4ButtonsTag.button_square = 1;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	71fb      	strb	r3, [r7, #7]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nSquare"));
					PS4.setLedFlash(0, 0); // Turn off blinking
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	482a      	ldr	r0, [pc, #168]	; (8000e80 <main+0x350>)
 8000dd8:	f7ff fdbc 	bl	8000954 <_ZN9PS4Parser11setLedFlashEhh>
 8000ddc:	e003      	b.n	8000de6 <main+0x2b6>
				} else {
					gameHID.ps4ButtonsTag.button_square = 0;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f36f 0341 	bfc	r3, #1, #1
 8000de4:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(UP)) {
 8000de6:	2100      	movs	r1, #0
 8000de8:	4825      	ldr	r0, [pc, #148]	; (8000e80 <main+0x350>)
 8000dea:	f00c fcd5 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d009      	beq.n	8000e08 <main+0x2d8>
					gameHID.ps4ButtonsTag.button_dpad_up = 1;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	71fb      	strb	r3, [r7, #7]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nUp"));
					PS4.setLed(Red);
 8000dfc:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <main+0x350>)
 8000e02:	f7ff fd93 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000e06:	e003      	b.n	8000e10 <main+0x2e0>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_up = 0;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f36f 0382 	bfc	r3, #2, #1
 8000e0e:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(RIGHT)) {
 8000e10:	2101      	movs	r1, #1
 8000e12:	481b      	ldr	r0, [pc, #108]	; (8000e80 <main+0x350>)
 8000e14:	f00c fcc0 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d008      	beq.n	8000e30 <main+0x300>
					gameHID.ps4ButtonsTag.button_dpad_right = 1;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	71fb      	strb	r3, [r7, #7]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nRight"));
					PS4.setLed(Blue);
 8000e26:	21ff      	movs	r1, #255	; 0xff
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <main+0x350>)
 8000e2a:	f7ff fd7f 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000e2e:	e003      	b.n	8000e38 <main+0x308>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_right = 0;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f36f 03c3 	bfc	r3, #3, #1
 8000e36:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(DOWN)) {
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4811      	ldr	r0, [pc, #68]	; (8000e80 <main+0x350>)
 8000e3c:	f00c fcac 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d024      	beq.n	8000e90 <main+0x360>
					gameHID.ps4ButtonsTag.button_dpad_down = 1;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	71fb      	strb	r3, [r7, #7]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nDown"));
					PS4.setLed(Yellow);
 8000e4e:	490f      	ldr	r1, [pc, #60]	; (8000e8c <main+0x35c>)
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <main+0x350>)
 8000e52:	f7ff fd6b 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000e56:	e01f      	b.n	8000e98 <main+0x368>
 8000e58:	20000304 	.word	0x20000304
 8000e5c:	20000268 	.word	0x20000268
 8000e60:	2000035c 	.word	0x2000035c
 8000e64:	200002c0 	.word	0x200002c0
 8000e68:	200003b4 	.word	0x200003b4
 8000e6c:	0800f708 	.word	0x0800f708
 8000e70:	200003a0 	.word	0x200003a0
 8000e74:	0800f71c 	.word	0x0800f71c
 8000e78:	20000678 	.word	0x20000678
 8000e7c:	20000588 	.word	0x20000588
 8000e80:	20000600 	.word	0x20000600
 8000e84:	20000652 	.word	0x20000652
 8000e88:	20000653 	.word	0x20000653
 8000e8c:	00ffeb04 	.word	0x00ffeb04
				} else {
					gameHID.ps4ButtonsTag.button_dpad_down = 0;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f36f 1345 	bfc	r3, #5, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(LEFT)) {
 8000e98:	2103      	movs	r1, #3
 8000e9a:	486b      	ldr	r0, [pc, #428]	; (8001048 <main+0x518>)
 8000e9c:	f00c fc7c 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <main+0x38a>
					gameHID.ps4ButtonsTag.button_dpad_left = 1;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	71fb      	strb	r3, [r7, #7]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nLeft"));
					PS4.setLed(Green);
 8000eae:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000eb2:	4865      	ldr	r0, [pc, #404]	; (8001048 <main+0x518>)
 8000eb4:	f7ff fd3a 	bl	800092c <_ZN9PS4Parser6setLedE10ColorsEnum>
 8000eb8:	e003      	b.n	8000ec2 <main+0x392>
				} else {
					gameHID.ps4ButtonsTag.button_dpad_left = 0;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f36f 1304 	bfc	r3, #4, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(L1)) {
 8000ec2:	210a      	movs	r1, #10
 8000ec4:	4860      	ldr	r0, [pc, #384]	; (8001048 <main+0x518>)
 8000ec6:	f00c fc67 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <main+0x3aa>
					gameHID.ps4ButtonsTag.button_left_trigger = 1;
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	f043 0320 	orr.w	r3, r3, #32
 8000ed6:	71bb      	strb	r3, [r7, #6]
 8000ed8:	e003      	b.n	8000ee2 <main+0x3b2>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL1"));
				} else {
					gameHID.ps4ButtonsTag.button_left_trigger = 0;
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	f36f 1345 	bfc	r3, #5, #1
 8000ee0:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(L3)) {
 8000ee2:	2106      	movs	r1, #6
 8000ee4:	4858      	ldr	r0, [pc, #352]	; (8001048 <main+0x518>)
 8000ee6:	f00c fc57 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <main+0x3ca>
					gameHID.ps4ButtonsTag.button_left_thumb = 1;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	e003      	b.n	8000f02 <main+0x3d2>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nL3"));
				} else {
					gameHID.ps4ButtonsTag.button_left_thumb = 0;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f36f 1386 	bfc	r3, #6, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
				}
				if (PS4.getButtonPress(R1)) {
 8000f02:	210b      	movs	r1, #11
 8000f04:	4850      	ldr	r0, [pc, #320]	; (8001048 <main+0x518>)
 8000f06:	f00c fc47 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <main+0x3ea>
					gameHID.ps4ButtonsTag.button_right_trigger = 1;
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	71bb      	strb	r3, [r7, #6]
 8000f18:	e003      	b.n	8000f22 <main+0x3f2>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR1"));
				} else {
					gameHID.ps4ButtonsTag.button_right_trigger = 0;
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	f36f 1304 	bfc	r3, #4, #1
 8000f20:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonPress(R3)) {
 8000f22:	2107      	movs	r1, #7
 8000f24:	4848      	ldr	r0, [pc, #288]	; (8001048 <main+0x518>)
 8000f26:	f00c fc37 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <main+0x40a>
					gameHID.ps4ButtonsTag.button_right_thumb = 1;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e003      	b.n	8000f42 <main+0x412>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nR3"));
				} else {
					gameHID.ps4ButtonsTag.button_right_thumb = 0;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f36f 13c7 	bfc	r3, #7, #1
 8000f40:	71fb      	strb	r3, [r7, #7]
				}

				if (PS4.getButtonPress(SHARE)) {
 8000f42:	2104      	movs	r1, #4
 8000f44:	4840      	ldr	r0, [pc, #256]	; (8001048 <main+0x518>)
 8000f46:	f00c fc27 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <main+0x42a>
					gameHID.ps4ButtonsTag.button_share = 1;
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	71bb      	strb	r3, [r7, #6]
 8000f58:	e003      	b.n	8000f62 <main+0x432>
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nShare"));
				} else {
					gameHID.ps4ButtonsTag.button_share = 0;
 8000f5a:	79bb      	ldrb	r3, [r7, #6]
 8000f5c:	f36f 03c3 	bfc	r3, #3, #1
 8000f60:	71bb      	strb	r3, [r7, #6]
				}

				if (PS4.getButtonPress(OPTIONS)) {
 8000f62:	2105      	movs	r1, #5
 8000f64:	4838      	ldr	r0, [pc, #224]	; (8001048 <main+0x518>)
 8000f66:	f00c fc17 	bl	800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <main+0x458>
					gameHID.ps4ButtonsTag.button_start = 1;
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	71bb      	strb	r3, [r7, #6]
					//USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
					//Serial.print(F("\r\nOptions"));
					printAngle = !printAngle;
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <main+0x51c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	f083 0301 	eor.w	r3, r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <main+0x51c>)
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e003      	b.n	8000f90 <main+0x460>
				} else {
					gameHID.ps4ButtonsTag.button_start = 0;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	f36f 0382 	bfc	r3, #2, #1
 8000f8e:	71bb      	strb	r3, [r7, #6]
				}
				if (PS4.getButtonClick(TOUCHPAD)) {
 8000f90:	2111      	movs	r1, #17
 8000f92:	482d      	ldr	r0, [pc, #180]	; (8001048 <main+0x518>)
 8000f94:	f00c fc28 	bl	800d7e8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <main+0x47c>
					//Serial.print(F("\r\nTouchpad"));
					printTouch = !printTouch;
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <main+0x520>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <main+0x520>)
 8000faa:	701a      	strb	r2, [r3, #0]
					//Serial.print(PS4.getAngle(Pitch));
					//Serial.print("\tRoll: ");
					//Serial.print(PS4.getAngle(Roll));
				}

				if (printTouch) { // Print the x, y coordinates of the touchpad
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <main+0x520>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d023      	beq.n	8000ffc <main+0x4cc>
					if (PS4.isTouching(0) || PS4.isTouching(1)) // Print newline and carriage return if any of the fingers are touching the touchpad
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <main+0x518>)
 8000fba:	f7ff fc43 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d107      	bne.n	8000fd4 <main+0x4a4>
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	481f      	ldr	r0, [pc, #124]	; (8001048 <main+0x518>)
 8000fca:	f7ff fc3b 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <main+0x4a8>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <main+0x4aa>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00e      	beq.n	8000ffc <main+0x4cc>
						//Serial.print(F("\r\n"));
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d809      	bhi.n	8000ffc <main+0x4cc>
						if (PS4.isTouching(i)) { // Print the position of the finger if it is touching the touchpad
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4816      	ldr	r0, [pc, #88]	; (8001048 <main+0x518>)
 8000ff0:	f7ff fc28 	bl	8000844 <_ZN9PS4Parser10isTouchingEhh>
					for (uint8_t i = 0; i < 2; i++) { // The touchpad track two fingers
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e7f2      	b.n	8000fe2 <main+0x4b2>
					}
				}


			}
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &gameHID, sizeof(struct gameHID_t));
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2208      	movs	r2, #8
 8001000:	4619      	mov	r1, r3
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <main+0x524>)
 8001004:	f006 fb08 	bl	8007618 <USBD_HID_SendReport>
 8001008:	e5d4      	b.n	8000bb4 <main+0x84>
		} else if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	4812      	ldr	r0, [pc, #72]	; (8001058 <main+0x528>)
 8001010:	f001 face 	bl	80025b0 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	bf0c      	ite	eq
 800101a:	2301      	moveq	r3, #1
 800101c:	2300      	movne	r3, #0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00d      	beq.n	8001040 <main+0x510>
		    if (!buttonPressed) {
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <main+0x52c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <main+0x508>
		    	//Serial.print(F("\r\nButton Pressed"));
		        PS4.pair(); // Start paring routine if user button was just pressed
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <main+0x530>)
 8001034:	f7ff fbc1 	bl	80007ba <_ZN5BTHID4pairEv>
		    }
		    buttonPressed = true;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <main+0x52c>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
 800103e:	e5b9      	b.n	8000bb4 <main+0x84>
		} else
		    buttonPressed = false;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <main+0x52c>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
  }
 8001046:	e5b5      	b.n	8000bb4 <main+0x84>
 8001048:	20000600 	.word	0x20000600
 800104c:	20000650 	.word	0x20000650
 8001050:	20000651 	.word	0x20000651
 8001054:	20000678 	.word	0x20000678
 8001058:	40020800 	.word	0x40020800
 800105c:	20000654 	.word	0x20000654
 8001060:	20000588 	.word	0x20000588

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	; 0xb0
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f00e fade 	bl	800f634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	225c      	movs	r2, #92	; 0x5c
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f00e facf 	bl	800f634 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <SystemClock_Config+0x15c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <SystemClock_Config+0x15c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <SystemClock_Config+0x15c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <SystemClock_Config+0x160>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010be:	4a41      	ldr	r2, [pc, #260]	; (80011c4 <SystemClock_Config+0x160>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <SystemClock_Config+0x160>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010f2:	2348      	movs	r3, #72	; 0x48
 80010f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010fe:	2303      	movs	r3, #3
 8001100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fa2c 	bl	800456c <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf14      	ite	ne
 800111a:	2301      	movne	r3, #1
 800111c:	2300      	moveq	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001124:	f000 f972 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001138:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001142:	2102      	movs	r1, #2
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fc1b 	bl	8003980 <HAL_RCC_ClockConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf14      	ite	ne
 8001150:	2301      	movne	r3, #1
 8001152:	2300      	moveq	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800115a:	f000 f957 	bl	800140c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800115e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001162:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001164:	2300      	movs	r3, #0
 8001166:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fd21 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001182:	f000 f943 	bl	800140c <Error_Handler>
  }
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_10);
 8001186:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800118a:	210a      	movs	r1, #10
 800118c:	4618      	mov	r0, r3
 800118e:	f002 fbf7 	bl	8003980 <HAL_RCC_ClockConfig>

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000000); // NOTE: Edited, so it increments every us
 8001192:	f002 fcdb 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8001196:	4603      	mov	r3, r0
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemClock_Config+0x164>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	4618      	mov	r0, r3
 80011a2:	f001 f848 	bl	8002236 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011a6:	2004      	movs	r0, #4
 80011a8:	f001 f852 	bl	8002250 <HAL_SYSTICK_CLKSourceConfig>

	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0); // SysTick_IRQn interrupt configuration
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f001 f815 	bl	80021e2 <HAL_NVIC_SetPriority>

}
 80011b8:	bf00      	nop
 80011ba:	37b0      	adds	r7, #176	; 0xb0
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000
 80011c8:	431bde83 	.word	0x431bde83

080011cc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 80011e0:	4a26      	ldr	r2, [pc, #152]	; (800127c <_ZL12MX_ADC1_Initv+0xb0>)
 80011e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 8001206:	2200      	movs	r2, #0
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <_ZL12MX_ADC1_Initv+0xb4>)
 800120e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 8001218:	2201      	movs	r2, #1
 800121a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 8001226:	2201      	movs	r2, #1
 8001228:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 800122c:	f000 fc8c 	bl	8001b48 <HAL_ADC_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001240:	f000 f8e4 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001244:	230d      	movs	r3, #13
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <_ZL12MX_ADC1_Initv+0xac>)
 8001256:	f000 fcbb 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	bf14      	ite	ne
 8001260:	2301      	movne	r3, #1
 8001262:	2300      	moveq	r3, #0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800126a:	f000 f8cf 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000220 	.word	0x20000220
 800127c:	40012000 	.word	0x40012000
 8001280:	0f000001 	.word	0x0f000001

08001284 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 800128a:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <_ZL12MX_SPI1_Initv+0x74>)
 800128c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 8001290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012b8:	2218      	movs	r2, #24
 80012ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <_ZL12MX_SPI1_Initv+0x70>)
 80012d6:	f003 fbe7 	bl	8004aa8 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80012ea:	f000 f88f 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000268 	.word	0x20000268
 80012f8:	40013000 	.word	0x40013000

080012fc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b12      	ldr	r3, [pc, #72]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001334:	f004 f960 	bl	80055f8 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001348:	f000 f860 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200002c0 	.word	0x200002c0
 8001354:	40004400 	.word	0x40004400

08001358 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a22      	ldr	r2, [pc, #136]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <_ZL12MX_GPIO_Initv+0xa8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZL12MX_GPIO_Initv+0xac>)
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <_ZL12MX_GPIO_Initv+0xb0>)
 80013f4:	f000 ff48 	bl	8002288 <HAL_GPIO_Init>

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	10210000 	.word	0x10210000
 8001408:	40020800 	.word	0x40020800

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>

08001416 <_ZN8MAX3421eI3P102P9E4InitEv>:
        return ( i);
}

/* initialize MAX3421E. Set Host mode, pullups, and stuff. Returns 0 if success, -1 if not */
template< typename SPI_SS, typename INTR >
int8_t MAX3421e< SPI_SS, INTR >::Init() {
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
        XMEM_ACQUIRE_SPI();
        // Moved here.
        // you really should not init hardware in the constructor when it involves locks.
        // Also avoids the vbus flicker issue confusing some devices.
        /* pin and peripheral setup */
        SPI_SS::SetDirWrite();
 800141e:	f7ff f99f 	bl	8000760 <_ZN3P1011SetDirWriteEv>
        SPI_SS::Set();
 8001422:	f7ff f985 	bl	8000730 <_ZN3P103SetEv>
        spi::init();
 8001426:	f000 f845 	bl	80014b4 <_ZN3SPiI3P133P113P123P10E4initEv>
        INTR::SetDirRead();
 800142a:	f7ff f96b 	bl	8000704 <_ZN2P910SetDirReadEv>
        XMEM_RELEASE_SPI();
        /* MAX3421E - full-duplex SPI, level interrupt */
        // GPX pin on. Moved here, otherwise we flicker the vbus.
        regWr(rPINCTL, (bmFDUPSPI | bmINTLEVEL));
 800142e:	2218      	movs	r2, #24
 8001430:	2188      	movs	r1, #136	; 0x88
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f846 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        if(reset() == 0) { //OSCOKIRQ hasn't asserted in time
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f865 	bl	8001508 <_ZN8MAX3421eI3P102P9E5resetEv>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <_ZN8MAX3421eI3P102P9E4InitEv+0x3e>
                return ( -1);
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e02b      	b.n	80014ac <_ZN8MAX3421eI3P102P9E4InitEv+0x96>
        }

        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST); // set pull-downs, Host
 8001454:	22c1      	movs	r2, #193	; 0xc1
 8001456:	21d8      	movs	r1, #216	; 0xd8
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f833 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        regWr(rHIEN, bmCONDETIE | bmFRAMEIE); //connection detection
 800145e:	2260      	movs	r2, #96	; 0x60
 8001460:	21d0      	movs	r1, #208	; 0xd0
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f82e 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        /* check if device is connected */
        regWr(rHCTL, bmSAMPLEBUS); // sample USB bus
 8001468:	2204      	movs	r2, #4
 800146a:	21e8      	movs	r1, #232	; 0xe8
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f829 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(!(regRd(rHCTL) & bmSAMPLEBUS)); //wait for sample operation to finish
 8001472:	21e8      	movs	r1, #232	; 0xe8
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f877 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800147a:	4603      	mov	r3, r0
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d000      	beq.n	8001490 <_ZN8MAX3421eI3P102P9E4InitEv+0x7a>
 800148e:	e7f0      	b.n	8001472 <_ZN8MAX3421eI3P102P9E4InitEv+0x5c>

        busprobe(); //check if anything is connected
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f88b 	bl	80015ac <_ZN8MAX3421eI3P102P9E8busprobeEv>

        regWr(rHIRQ, bmCONDETIRQ); //clear connection detect interrupt
 8001496:	2220      	movs	r2, #32
 8001498:	21c8      	movs	r1, #200	; 0xc8
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f812 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rCPUCTL, 0x01); //enable interrupt pin
 80014a0:	2201      	movs	r2, #1
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f80d 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return ( 0);
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN3SPiI3P133P113P123P10E4initEv>:
        static void init() {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
        }
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>:
void MAX3421e< SPI_SS, INTR >::regWr(uint8_t reg, uint8_t data) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
 80014d0:	4613      	mov	r3, r2
 80014d2:	70bb      	strb	r3, [r7, #2]
        SPI_SS::Clear();
 80014d4:	f7ff f938 	bl	8000748 <_ZN3P105ClearEv>
        c[0] = reg | 0x02;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	733b      	strb	r3, [r7, #12]
        c[1] = data;
 80014e2:	78bb      	ldrb	r3, [r7, #2]
 80014e4:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&SPI_Handle, c, 2, HAL_MAX_DELAY);
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2202      	movs	r2, #2
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <_ZN8MAX3421eI3P102P9E5regWrEhh+0x40>)
 80014f2:	f003 fb62 	bl	8004bba <HAL_SPI_Transmit>
        SPI_SS::Set();
 80014f6:	f7ff f91b 	bl	8000730 <_ZN3P103SetEv>
        return;
 80014fa:	bf00      	nop
};
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000304 	.word	0x20000304

08001508 <_ZN8MAX3421eI3P102P9E5resetEv>:
uint16_t MAX3421e< SPI_SS, INTR >::reset() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
        uint16_t i = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	81fb      	strh	r3, [r7, #14]
        regWr(rUSBCTL, bmCHIPRES);
 8001514:	2220      	movs	r2, #32
 8001516:	2178      	movs	r1, #120	; 0x78
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffd3 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        regWr(rUSBCTL, 0x00);
 800151e:	2200      	movs	r2, #0
 8001520:	2178      	movs	r1, #120	; 0x78
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffce 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        while(++i) {
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	3301      	adds	r3, #1
 800152c:	81fb      	strh	r3, [r7, #14]
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00f      	beq.n	800155e <_ZN8MAX3421eI3P102P9E5resetEv+0x56>
                if((regRd(rUSBIRQ) & bmOSCOKIRQ)) {
 800153e:	2168      	movs	r1, #104	; 0x68
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f811 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 8001546:	4603      	mov	r3, r0
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d100      	bne.n	800155c <_ZN8MAX3421eI3P102P9E5resetEv+0x54>
        while(++i) {
 800155a:	e7e5      	b.n	8001528 <_ZN8MAX3421eI3P102P9E5resetEv+0x20>
                        break;
 800155c:	bf00      	nop
        return ( i);
 800155e:	89fb      	ldrh	r3, [r7, #14]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN8MAX3421eI3P102P9E5regRdEh>:
uint8_t MAX3421e< SPI_SS, INTR >::regRd(uint8_t reg) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
        SPI_SS::Clear();
 8001574:	f7ff f8e8 	bl	8000748 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 8001578:	1cf9      	adds	r1, r7, #3
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	2201      	movs	r2, #1
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001582:	f003 fb1a 	bl	8004bba <HAL_SPI_Transmit>
        uint8_t rv = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
        HAL_SPI_Receive(&SPI_Handle, &rv, 1, HAL_MAX_DELAY);
 800158a:	f107 010f 	add.w	r1, r7, #15
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	2201      	movs	r2, #1
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <_ZN8MAX3421eI3P102P9E5regRdEh+0x40>)
 8001596:	f003 fc4c 	bl	8004e32 <HAL_SPI_Receive>
        SPI_SS::Set();
 800159a:	f7ff f8c9 	bl	8000730 <_ZN3P103SetEv>
        return (rv);
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000304 	.word	0x20000304

080015ac <_ZN8MAX3421eI3P102P9E8busprobeEv>:
        return ( 0);
}

/* probe bus to determine device presence and speed and switch host to this speed */
template< typename SPI_SS, typename INTR >
void MAX3421e< SPI_SS, INTR >::busprobe() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
        uint8_t bus_sample;
        bus_sample = regRd(rHRSL); //Get J,K status
 80015b4:	21f8      	movs	r1, #248	; 0xf8
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffd6 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]
        bus_sample &= (bmJSTATUS | bmKSTATUS); //zero the rest of the byte
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c6:	73fb      	strb	r3, [r7, #15]
        switch(bus_sample) { //start full-speed or low-speed host
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2bc0      	cmp	r3, #192	; 0xc0
 80015cc:	d04a      	beq.n	8001664 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xb8>
 80015ce:	2bc0      	cmp	r3, #192	; 0xc0
 80015d0:	dc55      	bgt.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80015d2:	2b80      	cmp	r3, #128	; 0x80
 80015d4:	d006      	beq.n	80015e4 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x38>
 80015d6:	2b80      	cmp	r3, #128	; 0x80
 80015d8:	dc51      	bgt.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d046      	beq.n	800166c <_ZN8MAX3421eI3P102P9E8busprobeEv+0xc0>
 80015de:	2b40      	cmp	r3, #64	; 0x40
 80015e0:	d020      	beq.n	8001624 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x78>
                case( bmSE0): //disconnected state
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
                        vbusState = SE0;
                        break;
        }//end switch( bus_sample )
}
 80015e2:	e04c      	b.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 80015e4:	21d8      	movs	r1, #216	; 0xd8
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffbe 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <_ZN8MAX3421eI3P102P9E8busprobeEv+0x66>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001600:	22c9      	movs	r2, #201	; 0xc9
 8001602:	21d8      	movs	r1, #216	; 0xd8
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff5d 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800160c:	2202      	movs	r2, #2
 800160e:	701a      	strb	r2, [r3, #0]
                        break;
 8001610:	e035      	b.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001612:	22cb      	movs	r2, #203	; 0xcb
 8001614:	21d8      	movs	r1, #216	; 0xd8
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff54 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800161e:	2203      	movs	r2, #3
 8001620:	701a      	strb	r2, [r3, #0]
                        break;
 8001622:	e02c      	b.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        if((regRd(rMODE) & bmLOWSPEED) == 0) {
 8001624:	21d8      	movs	r1, #216	; 0xd8
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff9e 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800162c:	4603      	mov	r3, r0
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf0c      	ite	eq
 8001636:	2301      	moveq	r3, #1
 8001638:	2300      	movne	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xa6>
                                regWr(rMODE, MODE_LS_HOST); //start low-speed host
 8001640:	22cb      	movs	r2, #203	; 0xcb
 8001642:	21d8      	movs	r1, #216	; 0xd8
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff3d 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = LSHOST;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800164c:	2203      	movs	r2, #3
 800164e:	701a      	strb	r2, [r3, #0]
                        break;
 8001650:	e015      	b.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                                regWr(rMODE, MODE_FS_HOST); //start full-speed host
 8001652:	22c9      	movs	r2, #201	; 0xc9
 8001654:	21d8      	movs	r1, #216	; 0xd8
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff34 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                vbusState = FSHOST;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 800165e:	2202      	movs	r2, #2
 8001660:	701a      	strb	r2, [r3, #0]
                        break;
 8001662:	e00c      	b.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        vbusState = SE1;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
                        break;
 800166a:	e008      	b.n	800167e <_ZN8MAX3421eI3P102P9E8busprobeEv+0xd2>
                        regWr(rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ);
 800166c:	22d1      	movs	r2, #209	; 0xd1
 800166e:	21d8      	movs	r1, #216	; 0xd8
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff27 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        vbusState = SE0;
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <_ZN8MAX3421eI3P102P9E8busprobeEv+0xdc>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
                        break;
 800167c:	bf00      	nop
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000655 	.word	0x20000655

0800168c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d115      	bne.n	80016c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d110      	bne.n	80016c8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
SerialClass Serial(&huart2);
 80016a6:	490a      	ldr	r1, [pc, #40]	; (80016d0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80016aa:	f7ff f815 	bl	80006d8 <_ZN11SerialClassC1EP20__UART_HandleTypeDef>
USB Usb;
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80016b0:	f00c fa66 	bl	800db80 <_ZN3USBC1Ev>
BTD Btd(&Usb);
 80016b4:	4908      	ldr	r1, [pc, #32]	; (80016d8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016b8:	f008 f844 	bl	8009744 <_ZN3BTDC1EP3USB>
PS4BT PS4(&Btd);
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80016be:	2200      	movs	r2, #0
 80016c0:	4906      	ldr	r1, [pc, #24]	; (80016dc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80016c2:	4808      	ldr	r0, [pc, #32]	; (80016e4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80016c4:	f7ff f960 	bl	8000988 <_ZN5PS4BTC1EP3BTDbPKc>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200002c0 	.word	0x200002c0
 80016d4:	200003a0 	.word	0x200003a0
 80016d8:	200003b4 	.word	0x200003b4
 80016dc:	20000470 	.word	0x20000470
 80016e0:	0800f73c 	.word	0x0800f73c
 80016e4:	20000588 	.word	0x20000588

080016e8 <_GLOBAL__sub_I_hadc1>:
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff ffcb 	bl	800168c <_Z41__static_initialization_and_destruction_0ii>
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001736:	2007      	movs	r0, #7
 8001738:	f000 fd48 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_ADC_MspInit+0x7c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d127      	bne.n	80017ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_ADC_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a2:	2308      	movs	r3, #8
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a6:	2303      	movs	r3, #3
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_ADC_MspInit+0x84>)
 80017b6:	f000 fd67 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40012000 	.word	0x40012000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020800 	.word	0x40020800

080017d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_SPI_MspInit+0x84>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d12b      	bne.n	800184a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_SPI_MspInit+0x88>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_SPI_MspInit+0x88>)
 80017fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_SPI_MspInit+0x88>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_SPI_MspInit+0x88>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <HAL_SPI_MspInit+0x88>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_SPI_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800182a:	23e0      	movs	r3, #224	; 0xe0
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183a:	2305      	movs	r3, #5
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_SPI_MspInit+0x8c>)
 8001846:	f000 fd1f 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40013000 	.word	0x40013000
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0x84>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12b      	bne.n	80018da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_UART_MspInit+0x88>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_UART_MspInit+0x88>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_UART_MspInit+0x88>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_UART_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_UART_MspInit+0x88>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_UART_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ba:	230c      	movs	r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_UART_MspInit+0x8c>)
 80018d6:	f000 fcd7 	bl	8002288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <NMI_Handler+0x4>

080018f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <MemManage_Handler+0x4>

08001902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001906:	e7fe      	b.n	8001906 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler+0x4>

0800190e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f8c0 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <OTG_FS_IRQHandler+0x10>)
 800194a:	f000 ffb9 	bl	80028c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000b48 	.word	0x20000b48

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001972:	f00d fe27 	bl	800f5c4 <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
	return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800199a:	e7fe      	b.n	800199a <_exit+0x12>

0800199c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <SystemInit+0x28>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <SystemInit+0x28>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SystemInit+0x28>)
 80019b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b6:	609a      	str	r2, [r3, #8]
#endif
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ce:	e003      	b.n	80019d8 <LoopCopyDataInit>

080019d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019d6:	3104      	adds	r1, #4

080019d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019e0:	d3f6      	bcc.n	80019d0 <CopyDataInit>
  ldr  r2, =_sbss
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019e4:	e002      	b.n	80019ec <LoopFillZerobss>

080019e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019e8:	f842 3b04 	str.w	r3, [r2], #4

080019ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019f0:	d3f9      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019f2:	f7ff ffd3 	bl	800199c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f00d fdeb 	bl	800f5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7ff f899 	bl	8000b30 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a04:	0800fa34 	.word	0x0800fa34
  ldr  r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a0c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001a10:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001a14:	20000f54 	.word	0x20000f54

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_Init+0x40>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_Init+0x40>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_Init+0x40>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 fbc1 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fe52 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fbd9 	bl	8002236 <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 fba1 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000674 	.word	0x20000674

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000674 	.word	0x20000674

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e033      	b.n	8001bc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fdee 	bl	8001748 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b8e:	f023 0302 	bic.w	r3, r3, #2
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f94a 	bl	8001e34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb6:	e001      	b.n	8001bbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x1c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e113      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x244>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	d925      	bls.n	8001c48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68d9      	ldr	r1, [r3, #12]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4618      	mov	r0, r3
 8001c34:	4603      	mov	r3, r0
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4403      	add	r3, r0
 8001c3a:	3b1e      	subs	r3, #30
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	e022      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4403      	add	r3, r0
 8001c84:	409a      	lsls	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d824      	bhi.n	8001ce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b05      	subs	r3, #5
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cde:	e04c      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d824      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	; 0x23
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	3b23      	subs	r3, #35	; 0x23
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d30:	e023      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b41      	subs	r3, #65	; 0x41
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b41      	subs	r3, #65	; 0x41
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_ADC_ConfigChannel+0x250>)
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <HAL_ADC_ConfigChannel+0x254>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d10f      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d8>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b12      	cmp	r3, #18
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_ADC_ConfigChannel+0x254>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d12b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_ADC_ConfigChannel+0x258>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_ADC_ConfigChannel+0x1f4>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b11      	cmp	r3, #17
 8001dc2:	d122      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_ADC_ConfigChannel+0x258>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_ADC_ConfigChannel+0x25c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_ADC_ConfigChannel+0x260>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9a      	lsrs	r2, r3, #18
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012300 	.word	0x40012300
 8001e24:	40012000 	.word	0x40012000
 8001e28:	10000012 	.word	0x10000012
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e3c:	4b79      	ldr	r3, [pc, #484]	; (8002024 <ADC_Init+0x1f0>)
 8001e3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	021a      	lsls	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	4a58      	ldr	r2, [pc, #352]	; (8002028 <ADC_Init+0x1f4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6899      	ldr	r1, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e00f      	b.n	8001f32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0202 	bic.w	r2, r2, #2
 8001f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7e1b      	ldrb	r3, [r3, #24]
 8001f4c:	005a      	lsls	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	035a      	lsls	r2, r3, #13
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	e007      	b.n	8001fa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	051a      	lsls	r2, r3, #20
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fea:	025a      	lsls	r2, r3, #9
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6899      	ldr	r1, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	029a      	lsls	r2, r3, #10
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40012300 	.word	0x40012300
 8002028:	0f000001 	.word	0x0f000001

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d106      	bne.n	800226c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002264:	f043 0304 	orr.w	r3, r3, #4
 8002268:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800226a:	e005      	b.n	8002278 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e165      	b.n	8002570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8154 	bne.w	800256a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ae 	beq.w	800256a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_GPIO_Init+0x300>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a5c      	ldr	r2, [pc, #368]	; (8002588 <HAL_GPIO_Init+0x300>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <HAL_GPIO_Init+0x300>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <HAL_GPIO_Init+0x304>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4f      	ldr	r2, [pc, #316]	; (8002590 <HAL_GPIO_Init+0x308>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x21a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4e      	ldr	r2, [pc, #312]	; (8002594 <HAL_GPIO_Init+0x30c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x216>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4d      	ldr	r2, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x310>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x212>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x314>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x20e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_GPIO_Init+0x318>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x20a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_GPIO_Init+0x31c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x206>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a49      	ldr	r2, [pc, #292]	; (80025a8 <HAL_GPIO_Init+0x320>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x202>
 8002486:	2306      	movs	r3, #6
 8002488:	e00c      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800248a:	2307      	movs	r3, #7
 800248c:	e00a      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800248e:	2305      	movs	r3, #5
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 8002492:	2304      	movs	r3, #4
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	; (800258c <HAL_GPIO_Init+0x304>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_GPIO_Init+0x324>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e6:	4a31      	ldr	r2, [pc, #196]	; (80025ac <HAL_GPIO_Init+0x324>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <HAL_GPIO_Init+0x324>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002516:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253a:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_GPIO_Init+0x324>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f ae96 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40021400 	.word	0x40021400
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40013c00 	.word	0x40013c00

080025b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e001      	b.n	80025d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025fc:	e003      	b.n	8002606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	619a      	str	r2, [r3, #24]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002614:	b08f      	sub	sp, #60	; 0x3c
 8002616:	af0a      	add	r7, sp, #40	; 0x28
 8002618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e116      	b.n	8002852 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f006 fb22 	bl	8008c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2203      	movs	r2, #3
 8002648:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fc71 	bl	8005f4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	687e      	ldr	r6, [r7, #4]
 8002670:	466d      	mov	r5, sp
 8002672:	f106 0410 	add.w	r4, r6, #16
 8002676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002678:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800267c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800267e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002682:	e885 0003 	stmia.w	r5, {r0, r1}
 8002686:	1d33      	adds	r3, r6, #4
 8002688:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268a:	6838      	ldr	r0, [r7, #0]
 800268c:	f003 fb48 	bl	8005d20 <USB_CoreInit>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0d7      	b.n	8002852 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fc5f 	bl	8005f6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e04a      	b.n	800274a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	333d      	adds	r3, #61	; 0x3d
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	333c      	adds	r3, #60	; 0x3c
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	b298      	uxth	r0, r3
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3342      	adds	r3, #66	; 0x42
 80026f0:	4602      	mov	r2, r0
 80026f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	333f      	adds	r3, #63	; 0x3f
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3344      	adds	r3, #68	; 0x44
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	1a9b      	subs	r3, r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	3348      	adds	r3, #72	; 0x48
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	3350      	adds	r3, #80	; 0x50
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	3301      	adds	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d3af      	bcc.n	80026b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e044      	b.n	80027e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002786:	7bfa      	ldrb	r2, [r7, #15]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	3301      	adds	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d3b5      	bcc.n	800275a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	687e      	ldr	r6, [r7, #4]
 80027f6:	466d      	mov	r5, sp
 80027f8:	f106 0410 	add.w	r4, r6, #16
 80027fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002804:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002808:	e885 0003 	stmia.w	r5, {r0, r1}
 800280c:	1d33      	adds	r3, r6, #4
 800280e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002810:	6838      	ldr	r0, [r7, #0]
 8002812:	f003 fbd5 	bl	8005fc0 <USB_DevInit>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e014      	b.n	8002852 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 f879 	bl	8003938 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 fc10 	bl	8007070 <USB_DevDisconnect>

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800285a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_PCD_Start+0x1c>
 8002872:	2302      	movs	r3, #2
 8002874:	e020      	b.n	80028b8 <HAL_PCD_Start+0x5e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	2b01      	cmp	r3, #1
 8002884:	d109      	bne.n	800289a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fb42 	bl	8005f28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 fbc0 	bl	800702e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028c0:	b590      	push	{r4, r7, lr}
 80028c2:	b08d      	sub	sp, #52	; 0x34
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fc7e 	bl	80071d8 <USB_GetMode>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 83ca 	bne.w	8003078 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 fbe2 	bl	80070b2 <USB_ReadInterrupts>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 83c0 	beq.w	8003076 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fbd9 	bl	80070b2 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f002 0202 	and.w	r2, r2, #2
 8002918:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f004 fbc7 	bl	80070b2 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b10      	cmp	r3, #16
 800292c:	d161      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0210 	bic.w	r2, r2, #16
 800293c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 020f 	and.w	r2, r3, #15
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	3304      	adds	r3, #4
 800295c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	0c5b      	lsrs	r3, r3, #17
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	2b02      	cmp	r3, #2
 8002968:	d124      	bne.n	80029b4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d035      	beq.n	80029e2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002984:	b29b      	uxth	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	6a38      	ldr	r0, [r7, #32]
 800298a:	f004 fa2d 	bl	8006de8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299a:	441a      	add	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ac:	441a      	add	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	619a      	str	r2, [r3, #24]
 80029b2:	e016      	b.n	80029e2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	0c5b      	lsrs	r3, r3, #17
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d110      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029c6:	2208      	movs	r2, #8
 80029c8:	4619      	mov	r1, r3
 80029ca:	6a38      	ldr	r0, [r7, #32]
 80029cc:	f004 fa0c 	bl	8006de8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029dc:	441a      	add	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0210 	orr.w	r2, r2, #16
 80029f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 fb5b 	bl	80070b2 <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a06:	d16e      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 fb61 	bl	80070d8 <USB_ReadDevAllOutEpInterrupt>
 8002a16:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a18:	e062      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d057      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 fb86 	bl	8007140 <USB_ReadDevOutEPInterrupt>
 8002a34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00c      	beq.n	8002a5a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2301      	movs	r3, #1
 8002a50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fdc5 	bl	80035e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	461a      	mov	r2, r3
 8002a72:	2308      	movs	r3, #8
 8002a74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 febf 	bl	80037fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	2310      	movs	r3, #16
 8002a98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002acc:	461a      	mov	r2, r3
 8002ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d199      	bne.n	8002a1a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f004 fae1 	bl	80070b2 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002afa:	f040 80c0 	bne.w	8002c7e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fb02 	bl	800710c <USB_ReadDevAllInEpInterrupt>
 8002b08:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b0e:	e0b2      	b.n	8002c76 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80a7 	beq.w	8002c6a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 fb28 	bl	800717c <USB_ReadDevInEPInterrupt>
 8002b2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d057      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	2201      	movs	r2, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69f9      	ldr	r1, [r7, #28]
 8002b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b58:	4013      	ands	r3, r2
 8002b5a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d132      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3348      	adds	r3, #72	; 0x48
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4403      	add	r3, r0
 8002b96:	3344      	adds	r3, #68	; 0x44
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4419      	add	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4403      	add	r3, r0
 8002baa:	3348      	adds	r3, #72	; 0x48
 8002bac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d113      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x31c>
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3350      	adds	r3, #80	; 0x50
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	f004 fb30 	bl	800723c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f006 f8d1 	bl	8008d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2308      	movs	r3, #8
 8002c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c36:	461a      	mov	r2, r3
 8002c38:	2340      	movs	r3, #64	; 0x40
 8002c3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	2302      	movs	r3, #2
 8002c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fc30 	bl	80034ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f af49 	bne.w	8002b10 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 fa15 	bl	80070b2 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c92:	d122      	bne.n	8002cda <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d108      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cba:	2100      	movs	r1, #0
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f006 faa1 	bl	8009204 <HAL_PCDEx_LPM_Callback>
 8002cc2:	e002      	b.n	8002cca <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f006 f8d7 	bl	8008e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 f9e7 	bl	80070b2 <USB_ReadInterrupts>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cee:	d112      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d102      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f006 f893 	bl	8008e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d14:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f9c9 	bl	80070b2 <USB_ReadInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2a:	d121      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002d3a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d111      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	f003 020f 	and.w	r2, r3, #15
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d60:	2101      	movs	r1, #1
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f006 fa4e 	bl	8009204 <HAL_PCDEx_LPM_Callback>
 8002d68:	e002      	b.n	8002d70 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f006 f85e 	bl	8008e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 f99c 	bl	80070b2 <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	f040 80c7 	bne.w	8002f16 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2110      	movs	r1, #16
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fa6a 	bl	800627c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dac:	e056      	b.n	8002e5c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	0151      	lsls	r1, r2, #5
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002de0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e26:	0151      	lsls	r1, r2, #5
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	440a      	add	r2, r1
 8002e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e38:	015a      	lsls	r2, r3, #5
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e46:	0151      	lsls	r1, r2, #5
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	440a      	add	r2, r1
 8002e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	3301      	adds	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3a3      	bcc.n	8002dae <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e92:	f043 030b 	orr.w	r3, r3, #11
 8002e96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ea8:	f043 030b 	orr.w	r3, r3, #11
 8002eac:	6453      	str	r3, [r2, #68]	; 0x44
 8002eae:	e015      	b.n	8002edc <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ec2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ec6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed6:	f043 030b 	orr.w	r3, r3, #11
 8002eda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f00:	461a      	mov	r2, r3
 8002f02:	f004 f99b 	bl	800723c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 f8c9 	bl	80070b2 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2a:	d124      	bne.n	8002f76 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 f95f 	bl	80071f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f9ff 	bl	800633e <USB_GetDevSpeed>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681c      	ldr	r4, [r3, #0]
 8002f4c:	f000 fdfe 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8002f50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f002 ff42 	bl	8005de4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f005 ff3a 	bl	8008dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f004 f899 	bl	80070b2 <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d10a      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f005 ff17 	bl	8008dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f002 0208 	and.w	r2, r2, #8
 8002f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f004 f884 	bl	80070b2 <USB_ReadInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f005 ff79 	bl	8008eb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 f869 	bl	80070b2 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fea:	d10f      	bne.n	800300c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f005 ff4c 	bl	8008e94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800300a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f004 f84e 	bl	80070b2 <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d10a      	bne.n	8003038 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f005 ff5a 	bl	8008edc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f004 f838 	bl	80070b2 <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d115      	bne.n	8003078 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f005 ff4a 	bl	8008ef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	e000      	b.n	8003078 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003076:	bf00      	nop
    }
  }
}
 8003078:	3734      	adds	r7, #52	; 0x34
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}

0800307e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	460b      	mov	r3, r1
 8003088:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_PCD_SetAddress+0x1a>
 8003094:	2302      	movs	r3, #2
 8003096:	e013      	b.n	80030c0 <HAL_PCD_SetAddress+0x42>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 ff96 	bl	8006fe2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	70fb      	strb	r3, [r7, #3]
 80030da:	460b      	mov	r3, r1
 80030dc:	803b      	strh	r3, [r7, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da0f      	bge.n	800310e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	3338      	adds	r3, #56	; 0x38
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	705a      	strb	r2, [r3, #1]
 800310c:	e00f      	b.n	800312e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	3304      	adds	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800313a:	883a      	ldrh	r2, [r7, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	78ba      	ldrb	r2, [r7, #2]
 8003144:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003158:	78bb      	ldrb	r3, [r7, #2]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d102      	bne.n	8003164 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_PCD_EP_Open+0xaa>
 800316e:	2302      	movs	r3, #2
 8003170:	e00e      	b.n	8003190 <HAL_PCD_EP_Open+0xc8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 f901 	bl	8006388 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800318e:	7afb      	ldrb	r3, [r7, #11]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da0f      	bge.n	80031cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 020f 	and.w	r2, r3, #15
 80031b2:	4613      	mov	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	3338      	adds	r3, #56	; 0x38
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4413      	add	r3, r2
 80031c0:	3304      	adds	r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	705a      	strb	r2, [r3, #1]
 80031ca:	e00f      	b.n	80031ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	f003 020f 	and.w	r2, r3, #15
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_PCD_EP_Close+0x6e>
 8003202:	2302      	movs	r3, #2
 8003204:	e00e      	b.n	8003224 <HAL_PCD_EP_Close+0x8c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68f9      	ldr	r1, [r7, #12]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 f93f 	bl	8006498 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	460b      	mov	r3, r1
 800323a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323c:	7afb      	ldrb	r3, [r7, #11]
 800323e:	f003 020f 	and.w	r2, r3, #15
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	3304      	adds	r3, #4
 8003254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	b2da      	uxtb	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	6979      	ldr	r1, [r7, #20]
 80032a0:	f003 fc1a 	bl	8006ad8 <USB_EP0StartXfer>
 80032a4:	e008      	b.n	80032b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	f003 f9cc 	bl	8006650 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	460b      	mov	r3, r1
 80032d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2201      	movs	r2, #1
 8003300:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	b2da      	uxtb	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	f003 fbd0 	bl	8006ad8 <USB_EP0StartXfer>
 8003338:	e008      	b.n	800334c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	6979      	ldr	r1, [r7, #20]
 8003348:	f003 f982 	bl	8006650 <USB_EPStartXfer>
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	460b      	mov	r3, r1
 8003360:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 020f 	and.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	d901      	bls.n	8003374 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e050      	b.n	8003416 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003378:	2b00      	cmp	r3, #0
 800337a:	da0f      	bge.n	800339c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	3338      	adds	r3, #56	; 0x38
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	705a      	strb	r2, [r3, #1]
 800339a:	e00d      	b.n	80033b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_PCD_EP_SetStall+0x82>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e01e      	b.n	8003416 <HAL_PCD_EP_SetStall+0xc0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68f9      	ldr	r1, [r7, #12]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f003 fd27 	bl	8006e3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003406:	461a      	mov	r2, r3
 8003408:	f003 ff18 	bl	800723c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 020f 	and.w	r2, r3, #15
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d901      	bls.n	800343c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e042      	b.n	80034c2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800343c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003440:	2b00      	cmp	r3, #0
 8003442:	da0f      	bge.n	8003464 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	f003 020f 	and.w	r2, r3, #15
 800344a:	4613      	mov	r3, r2
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	3338      	adds	r3, #56	; 0x38
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	3304      	adds	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	705a      	strb	r2, [r3, #1]
 8003462:	e00f      	b.n	8003484 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_EP_ClrStall+0x86>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e00e      	b.n	80034c2 <HAL_PCD_EP_ClrStall+0xa4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fd2f 	bl	8006f16 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b08a      	sub	sp, #40	; 0x28
 80034ce:	af02      	add	r7, sp, #8
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3338      	adds	r3, #56	; 0x38
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d901      	bls.n	8003502 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06c      	b.n	80035dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	429a      	cmp	r2, r3
 8003516:	d902      	bls.n	800351e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3303      	adds	r3, #3
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003526:	e02b      	b.n	8003580 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	695a      	ldr	r2, [r3, #20]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	429a      	cmp	r2, r3
 800353c:	d902      	bls.n	8003544 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3303      	adds	r3, #3
 8003548:	089b      	lsrs	r3, r3, #2
 800354a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	68d9      	ldr	r1, [r3, #12]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800355c:	b2db      	uxtb	r3, r3
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4603      	mov	r3, r0
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f003 fc0b 	bl	8006d7e <USB_WritePacket>

    ep->xfer_buff  += len;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	441a      	add	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	b29b      	uxth	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d809      	bhi.n	80035aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800359e:	429a      	cmp	r2, r3
 80035a0:	d203      	bcs.n	80035aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1be      	bne.n	8003528 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d811      	bhi.n	80035da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d6:	4013      	ands	r3, r2
 80035d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	333c      	adds	r3, #60	; 0x3c
 80035fc:	3304      	adds	r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b01      	cmp	r3, #1
 8003618:	f040 80a0 	bne.w	800375c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d015      	beq.n	8003652 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4a72      	ldr	r2, [pc, #456]	; (80037f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800362a:	4293      	cmp	r3, r2
 800362c:	f240 80dd 	bls.w	80037ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80d7 	beq.w	80037ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	461a      	mov	r2, r3
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	e0cb      	b.n	80037ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d009      	beq.n	8003670 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	461a      	mov	r2, r3
 800366a:	2320      	movs	r3, #32
 800366c:	6093      	str	r3, [r2, #8]
 800366e:	e0bc      	b.n	80037ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 80b7 	bne.w	80037ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a5d      	ldr	r2, [pc, #372]	; (80037f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d90f      	bls.n	80036a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	461a      	mov	r2, r3
 800369c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	e0a2      	b.n	80037ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	0159      	lsls	r1, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	440b      	add	r3, r1
 80036c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80036ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80036de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4419      	add	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4403      	add	r3, r0
 8003718:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800371c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d114      	bne.n	800374e <PCD_EP_OutXfrComplete_int+0x16a>
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d108      	bne.n	800374e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003746:	461a      	mov	r2, r3
 8003748:	2101      	movs	r1, #1
 800374a:	f003 fd77 	bl	800723c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f005 fafd 	bl	8008d54 <HAL_PCD_DataOutStageCallback>
 800375a:	e046      	b.n	80037ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a26      	ldr	r2, [pc, #152]	; (80037f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d124      	bne.n	80037ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377a:	461a      	mov	r2, r3
 800377c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003780:	6093      	str	r3, [r2, #8]
 8003782:	e032      	b.n	80037ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	2320      	movs	r3, #32
 800379e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4619      	mov	r1, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f005 fad4 	bl	8008d54 <HAL_PCD_DataOutStageCallback>
 80037ac:	e01d      	b.n	80037ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d114      	bne.n	80037de <PCD_EP_OutXfrComplete_int+0x1fa>
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d108      	bne.n	80037de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037d6:	461a      	mov	r2, r3
 80037d8:	2100      	movs	r1, #0
 80037da:	f003 fd2f 	bl	800723c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f005 fab5 	bl	8008d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	4f54300a 	.word	0x4f54300a
 80037f8:	4f54310a 	.word	0x4f54310a

080037fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	333c      	adds	r3, #60	; 0x3c
 8003814:	3304      	adds	r3, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a15      	ldr	r2, [pc, #84]	; (8003884 <PCD_EP_OutSetupPacket_int+0x88>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d90e      	bls.n	8003850 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	461a      	mov	r2, r3
 800384a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f005 fa6d 	bl	8008d30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <PCD_EP_OutSetupPacket_int+0x88>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d90c      	bls.n	8003878 <PCD_EP_OutSetupPacket_int+0x7c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003870:	461a      	mov	r2, r3
 8003872:	2101      	movs	r1, #1
 8003874:	f003 fce2 	bl	800723c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	4f54300a 	.word	0x4f54300a

08003888 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
 8003894:	4613      	mov	r3, r2
 8003896:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038a6:	883b      	ldrh	r3, [r7, #0]
 80038a8:	0419      	lsls	r1, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28
 80038b4:	e028      	b.n	8003908 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
 80038c8:	e00d      	b.n	80038e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
 80038d0:	3340      	adds	r3, #64	; 0x40
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	0c1b      	lsrs	r3, r3, #16
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	3301      	adds	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	7bfa      	ldrb	r2, [r7, #15]
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d3ec      	bcc.n	80038ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038f0:	883b      	ldrh	r3, [r7, #0]
 80038f2:	0418      	lsls	r0, r3, #16
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4302      	orrs	r2, r0
 8003900:	3340      	adds	r3, #64	; 0x40
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396a:	f043 0303 	orr.w	r3, r3, #3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0cc      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d90c      	bls.n	80039bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b65      	ldr	r3, [pc, #404]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b63      	ldr	r3, [pc, #396]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b8      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ec:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	494d      	ldr	r1, [pc, #308]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d044      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d119      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e06f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e067      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4934      	ldr	r1, [pc, #208]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a70:	f7fe f83a 	bl	8001ae8 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fe f836 	bl	8001ae8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e04f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d20c      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	490e      	ldr	r1, [pc, #56]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b06:	f000 fb7f 	bl	8004208 <HAL_RCC_GetSysClockFreq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd ff9a 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023c00 	.word	0x40023c00
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	0800f888 	.word	0x0800f888
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000004 	.word	0x20000004

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b68:	f7ff fff0 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	0800f898 	.word	0x0800f898

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b90:	f7ff ffdc 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0b5b      	lsrs	r3, r3, #13
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	0800f898 	.word	0x0800f898

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003bec:	4b6f      	ldr	r3, [pc, #444]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	496c      	ldr	r1, [pc, #432]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d010      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c20:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	4960      	ldr	r1, [pc, #384]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d017      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c48:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	4955      	ldr	r1, [pc, #340]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c66:	d101      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003c74:	2301      	movs	r3, #1
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d017      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c84:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	4946      	ldr	r1, [pc, #280]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca2:	d101      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 808a 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	4b39      	ldr	r3, [pc, #228]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a38      	ldr	r2, [pc, #224]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b36      	ldr	r3, [pc, #216]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cde:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a33      	ldr	r2, [pc, #204]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cea:	f7fd fefd 	bl	8001ae8 <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cf2:	f7fd fef9 	bl	8001ae8 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e278      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d04:	4b2a      	ldr	r3, [pc, #168]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d10:	4b26      	ldr	r3, [pc, #152]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d18:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d02f      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d2e:	4b1f      	ldr	r3, [pc, #124]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d36:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d114      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fd fec7 	bl	8001ae8 <HAL_GetTick>
 8003d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd fec3 	bl	8001ae8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e240      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0ee      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8c:	d114      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	4902      	ldr	r1, [pc, #8]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42470e40 	.word	0x42470e40
 8003db8:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a49      	ldr	r2, [pc, #292]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dc2:	6093      	str	r3, [r2, #8]
 8003dc4:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd0:	4944      	ldr	r1, [pc, #272]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003de8:	4b3f      	ldr	r3, [pc, #252]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003dea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003df8:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	4937      	ldr	r1, [pc, #220]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e1a:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e20:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	492e      	ldr	r1, [pc, #184]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d011      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	4926      	ldr	r1, [pc, #152]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	491a      	ldr	r1, [pc, #104]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d011      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e94:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9c:	4911      	ldr	r1, [pc, #68]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec0:	f040 80ff 	bne.w	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fe0d 	bl	8001ae8 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ed2:	f7fd fe09 	bl	8001ae8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d907      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e188      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	424711e0 	.word	0x424711e0
 8003eec:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ef0:	4b7e      	ldr	r3, [pc, #504]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ea      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d028      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d124      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f24:	4b71      	ldr	r3, [pc, #452]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	3301      	adds	r3, #1
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f36:	4b6d      	ldr	r3, [pc, #436]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	0e1b      	lsrs	r3, r3, #24
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	3b01      	subs	r3, #1
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	071b      	lsls	r3, r3, #28
 8003f66:	4961      	ldr	r1, [pc, #388]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d035      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f98:	d130      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f9a:	4b54      	ldr	r3, [pc, #336]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fac:	4b4f      	ldr	r3, [pc, #316]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb2:	0f1b      	lsrs	r3, r3, #28
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	071b      	lsls	r3, r3, #28
 8003fdc:	4943      	ldr	r1, [pc, #268]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fe4:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fea:	f023 021f 	bic.w	r2, r3, #31
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	493d      	ldr	r1, [pc, #244]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004004:	2b00      	cmp	r3, #0
 8004006:	d029      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004010:	d124      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	0f1b      	lsrs	r3, r3, #28
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	019b      	lsls	r3, r3, #6
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	431a      	orrs	r2, r3
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	071b      	lsls	r3, r3, #28
 8004054:	4925      	ldr	r1, [pc, #148]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d016      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	071b      	lsls	r3, r3, #28
 800408e:	4917      	ldr	r1, [pc, #92]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800409c:	f7fd fd24 	bl	8001ae8 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040a4:	f7fd fd20 	bl	8001ae8 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e09f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 8095 	bne.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040d0:	f7fd fd0a 	bl	8001ae8 <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d6:	e00f      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040d8:	f7fd fd06 	bl	8001ae8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d908      	bls.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e085      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800
 80040f0:	42470068 	.word	0x42470068
 80040f4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040f8:	4b41      	ldr	r3, [pc, #260]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004104:	d0e8      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02b      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	2b00      	cmp	r3, #0
 800412c:	d127      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800412e:	4b34      	ldr	r3, [pc, #208]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	3301      	adds	r3, #1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	431a      	orrs	r2, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	3b01      	subs	r3, #1
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	4928      	ldr	r1, [pc, #160]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004164:	4b26      	ldr	r3, [pc, #152]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	3b01      	subs	r3, #1
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	4922      	ldr	r1, [pc, #136]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01d      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004192:	d118      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	0e1b      	lsrs	r3, r3, #24
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	019b      	lsls	r3, r3, #6
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	085b      	lsrs	r3, r3, #1
 80041b4:	3b01      	subs	r3, #1
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	4910      	ldr	r1, [pc, #64]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fd fc8c 	bl	8001ae8 <HAL_GetTick>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041d4:	f7fd fc88 	bl	8001ae8 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e007      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f2:	d1ef      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3730      	adds	r7, #48	; 0x30
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800
 8004204:	42470070 	.word	0x42470070

08004208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800420c:	b088      	sub	sp, #32
 800420e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004224:	4bce      	ldr	r3, [pc, #824]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b0c      	cmp	r3, #12
 800422e:	f200 818d 	bhi.w	800454c <HAL_RCC_GetSysClockFreq+0x344>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_RCC_GetSysClockFreq+0x30>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	0800454d 	.word	0x0800454d
 8004240:	0800454d 	.word	0x0800454d
 8004244:	0800454d 	.word	0x0800454d
 8004248:	08004273 	.word	0x08004273
 800424c:	0800454d 	.word	0x0800454d
 8004250:	0800454d 	.word	0x0800454d
 8004254:	0800454d 	.word	0x0800454d
 8004258:	08004279 	.word	0x08004279
 800425c:	0800454d 	.word	0x0800454d
 8004260:	0800454d 	.word	0x0800454d
 8004264:	0800454d 	.word	0x0800454d
 8004268:	080043ed 	.word	0x080043ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4bbd      	ldr	r3, [pc, #756]	; (8004564 <HAL_RCC_GetSysClockFreq+0x35c>)
 800426e:	61bb      	str	r3, [r7, #24]
       break;
 8004270:	e16f      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4bbd      	ldr	r3, [pc, #756]	; (8004568 <HAL_RCC_GetSysClockFreq+0x360>)
 8004274:	61bb      	str	r3, [r7, #24]
      break;
 8004276:	e16c      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4bb9      	ldr	r3, [pc, #740]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4bb7      	ldr	r3, [pc, #732]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d053      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4bb4      	ldr	r3, [pc, #720]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	461a      	mov	r2, r3
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	ea02 0400 	and.w	r4, r2, r0
 80042a6:	603c      	str	r4, [r7, #0]
 80042a8:	400b      	ands	r3, r1
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	014b      	lsls	r3, r1, #5
 80042be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042c2:	0142      	lsls	r2, r0, #5
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	4623      	mov	r3, r4
 80042ca:	1ac0      	subs	r0, r0, r3
 80042cc:	462b      	mov	r3, r5
 80042ce:	eb61 0103 	sbc.w	r1, r1, r3
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	018b      	lsls	r3, r1, #6
 80042dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042e0:	0182      	lsls	r2, r0, #6
 80042e2:	1a12      	subs	r2, r2, r0
 80042e4:	eb63 0301 	sbc.w	r3, r3, r1
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	00d9      	lsls	r1, r3, #3
 80042f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042f6:	00d0      	lsls	r0, r2, #3
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4621      	mov	r1, r4
 80042fe:	1852      	adds	r2, r2, r1
 8004300:	4629      	mov	r1, r5
 8004302:	eb43 0101 	adc.w	r1, r3, r1
 8004306:	460b      	mov	r3, r1
 8004308:	f04f 0000 	mov.w	r0, #0
 800430c:	f04f 0100 	mov.w	r1, #0
 8004310:	0259      	lsls	r1, r3, #9
 8004312:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004316:	0250      	lsls	r0, r2, #9
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	461a      	mov	r2, r3
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	f7fb ff74 	bl	8000214 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	e04c      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004336:	4b8a      	ldr	r3, [pc, #552]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	461a      	mov	r2, r3
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	ea02 0a00 	and.w	sl, r2, r0
 800434e:	ea03 0b01 	and.w	fp, r3, r1
 8004352:	4650      	mov	r0, sl
 8004354:	4659      	mov	r1, fp
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	014b      	lsls	r3, r1, #5
 8004360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004364:	0142      	lsls	r2, r0, #5
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	ebb0 000a 	subs.w	r0, r0, sl
 800436e:	eb61 010b 	sbc.w	r1, r1, fp
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	018b      	lsls	r3, r1, #6
 800437c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004380:	0182      	lsls	r2, r0, #6
 8004382:	1a12      	subs	r2, r2, r0
 8004384:	eb63 0301 	sbc.w	r3, r3, r1
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	00d9      	lsls	r1, r3, #3
 8004392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004396:	00d0      	lsls	r0, r2, #3
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	eb12 020a 	adds.w	r2, r2, sl
 80043a0:	eb43 030b 	adc.w	r3, r3, fp
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	0299      	lsls	r1, r3, #10
 80043ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043b2:	0290      	lsls	r0, r2, #10
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	461a      	mov	r2, r3
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f7fb ff26 	bl	8000214 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d0:	4b63      	ldr	r3, [pc, #396]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	3301      	adds	r3, #1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e8:	61bb      	str	r3, [r7, #24]
      break;
 80043ea:	e0b2      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ec:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f6:	4b5a      	ldr	r3, [pc, #360]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04d      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	ea02 0800 	and.w	r8, r2, r0
 800441a:	ea03 0901 	and.w	r9, r3, r1
 800441e:	4640      	mov	r0, r8
 8004420:	4649      	mov	r1, r9
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	014b      	lsls	r3, r1, #5
 800442c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004430:	0142      	lsls	r2, r0, #5
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	ebb0 0008 	subs.w	r0, r0, r8
 800443a:	eb61 0109 	sbc.w	r1, r1, r9
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	018b      	lsls	r3, r1, #6
 8004448:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800444c:	0182      	lsls	r2, r0, #6
 800444e:	1a12      	subs	r2, r2, r0
 8004450:	eb63 0301 	sbc.w	r3, r3, r1
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	00d9      	lsls	r1, r3, #3
 800445e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004462:	00d0      	lsls	r0, r2, #3
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	eb12 0208 	adds.w	r2, r2, r8
 800446c:	eb43 0309 	adc.w	r3, r3, r9
 8004470:	f04f 0000 	mov.w	r0, #0
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	0259      	lsls	r1, r3, #9
 800447a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800447e:	0250      	lsls	r0, r2, #9
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	f7fb fec0 	bl	8000214 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	e04a      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	461a      	mov	r2, r3
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ae:	f04f 0100 	mov.w	r1, #0
 80044b2:	ea02 0400 	and.w	r4, r2, r0
 80044b6:	ea03 0501 	and.w	r5, r3, r1
 80044ba:	4620      	mov	r0, r4
 80044bc:	4629      	mov	r1, r5
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	014b      	lsls	r3, r1, #5
 80044c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044cc:	0142      	lsls	r2, r0, #5
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	1b00      	subs	r0, r0, r4
 80044d4:	eb61 0105 	sbc.w	r1, r1, r5
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	018b      	lsls	r3, r1, #6
 80044e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044e6:	0182      	lsls	r2, r0, #6
 80044e8:	1a12      	subs	r2, r2, r0
 80044ea:	eb63 0301 	sbc.w	r3, r3, r1
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 0100 	mov.w	r1, #0
 80044f6:	00d9      	lsls	r1, r3, #3
 80044f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044fc:	00d0      	lsls	r0, r2, #3
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	1912      	adds	r2, r2, r4
 8004504:	eb45 0303 	adc.w	r3, r5, r3
 8004508:	f04f 0000 	mov.w	r0, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	0299      	lsls	r1, r3, #10
 8004512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004516:	0290      	lsls	r0, r2, #10
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	461a      	mov	r2, r3
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	f7fb fe74 	bl	8000214 <__aeabi_uldivmod>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4613      	mov	r3, r2
 8004532:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <HAL_RCC_GetSysClockFreq+0x358>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0f1b      	lsrs	r3, r3, #28
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	61bb      	str	r3, [r7, #24]
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <HAL_RCC_GetSysClockFreq+0x35c>)
 800454e:	61bb      	str	r3, [r7, #24]
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	69bb      	ldr	r3, [r7, #24]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3720      	adds	r7, #32
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	00f42400 	.word	0x00f42400
 8004568:	007a1200 	.word	0x007a1200

0800456c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e28d      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8083 	beq.w	8004692 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800458c:	4b94      	ldr	r3, [pc, #592]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b04      	cmp	r3, #4
 8004596:	d019      	beq.n	80045cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004598:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045a4:	4b8e      	ldr	r3, [pc, #568]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b0:	d00c      	beq.n	80045cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b2:	4b8b      	ldr	r3, [pc, #556]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	d112      	bne.n	80045e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045be:	4b88      	ldr	r3, [pc, #544]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ca:	d10b      	bne.n	80045e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	4b84      	ldr	r3, [pc, #528]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05b      	beq.n	8004690 <HAL_RCC_OscConfig+0x124>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d157      	bne.n	8004690 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e25a      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d106      	bne.n	80045fc <HAL_RCC_OscConfig+0x90>
 80045ee:	4b7c      	ldr	r3, [pc, #496]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a7b      	ldr	r2, [pc, #492]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e01d      	b.n	8004638 <HAL_RCC_OscConfig+0xcc>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0xb4>
 8004606:	4b76      	ldr	r3, [pc, #472]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a75      	ldr	r2, [pc, #468]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800460c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b73      	ldr	r3, [pc, #460]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a72      	ldr	r2, [pc, #456]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0xcc>
 8004620:	4b6f      	ldr	r3, [pc, #444]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a6e      	ldr	r2, [pc, #440]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b6c      	ldr	r3, [pc, #432]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6b      	ldr	r2, [pc, #428]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fa52 	bl	8001ae8 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004648:	f7fd fa4e 	bl	8001ae8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b64      	cmp	r3, #100	; 0x64
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e21f      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465a:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0xdc>
 8004666:	e014      	b.n	8004692 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fd fa3e 	bl	8001ae8 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004670:	f7fd fa3a 	bl	8001ae8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e20b      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004682:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x104>
 800468e:	e000      	b.n	8004692 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d06f      	beq.n	800477e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800469e:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046aa:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d105      	bne.n	80046c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d11c      	bne.n	8004708 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ce:	4b44      	ldr	r3, [pc, #272]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d116      	bne.n	8004708 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x186>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e1d3      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4937      	ldr	r1, [pc, #220]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004706:	e03a      	b.n	800477e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCC_OscConfig+0x278>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fd f9e7 	bl	8001ae8 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800471e:	f7fd f9e3 	bl	8001ae8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e1b4      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4925      	ldr	r1, [pc, #148]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 800474c:	4313      	orrs	r3, r2
 800474e:	600b      	str	r3, [r1, #0]
 8004750:	e015      	b.n	800477e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_RCC_OscConfig+0x278>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fd f9c6 	bl	8001ae8 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004760:	f7fd f9c2 	bl	8001ae8 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e193      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	4b1b      	ldr	r3, [pc, #108]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f0      	bne.n	8004760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d036      	beq.n	80047f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <HAL_RCC_OscConfig+0x27c>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fd f9a6 	bl	8001ae8 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a0:	f7fd f9a2 	bl	8001ae8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e173      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_OscConfig+0x274>)
 80047b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x234>
 80047be:	e01b      	b.n	80047f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <HAL_RCC_OscConfig+0x27c>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c6:	f7fd f98f 	bl	8001ae8 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047cc:	e00e      	b.n	80047ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ce:	f7fd f98b 	bl	8001ae8 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d907      	bls.n	80047ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e15c      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
 80047e0:	40023800 	.word	0x40023800
 80047e4:	42470000 	.word	0x42470000
 80047e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ec:	4b8a      	ldr	r3, [pc, #552]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1ea      	bne.n	80047ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 8097 	beq.w	8004934 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4b83      	ldr	r3, [pc, #524]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10f      	bne.n	8004836 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6413      	str	r3, [r2, #64]	; 0x40
 8004826:	4b7c      	ldr	r3, [pc, #496]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004832:	2301      	movs	r3, #1
 8004834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	4b79      	ldr	r3, [pc, #484]	; (8004a1c <HAL_RCC_OscConfig+0x4b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d118      	bne.n	8004874 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCC_OscConfig+0x4b0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a75      	ldr	r2, [pc, #468]	; (8004a1c <HAL_RCC_OscConfig+0x4b0>)
 8004848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484e:	f7fd f94b 	bl	8001ae8 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004856:	f7fd f947 	bl	8001ae8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e118      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004868:	4b6c      	ldr	r3, [pc, #432]	; (8004a1c <HAL_RCC_OscConfig+0x4b0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <HAL_RCC_OscConfig+0x31e>
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
 8004888:	e01c      	b.n	80048c4 <HAL_RCC_OscConfig+0x358>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b05      	cmp	r3, #5
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x340>
 8004892:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	4a60      	ldr	r2, [pc, #384]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	6713      	str	r3, [r2, #112]	; 0x70
 800489e:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70
 80048aa:	e00b      	b.n	80048c4 <HAL_RCC_OscConfig+0x358>
 80048ac:	4b5a      	ldr	r3, [pc, #360]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	4a59      	ldr	r2, [pc, #356]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	6713      	str	r3, [r2, #112]	; 0x70
 80048b8:	4b57      	ldr	r3, [pc, #348]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a56      	ldr	r2, [pc, #344]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048be:	f023 0304 	bic.w	r3, r3, #4
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fd f90c 	bl	8001ae8 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fd f908 	bl	8001ae8 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0d7      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ea:	4b4b      	ldr	r3, [pc, #300]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0ee      	beq.n	80048d4 <HAL_RCC_OscConfig+0x368>
 80048f6:	e014      	b.n	8004922 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd f8f6 	bl	8001ae8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fd f8f2 	bl	8001ae8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e0c1      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004916:	4b40      	ldr	r3, [pc, #256]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ee      	bne.n	8004900 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d105      	bne.n	8004934 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004928:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	4a3a      	ldr	r2, [pc, #232]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 800492e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80ad 	beq.w	8004a98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b08      	cmp	r3, #8
 8004948:	d060      	beq.n	8004a0c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d145      	bne.n	80049de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004952:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_RCC_OscConfig+0x4b4>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd f8c6 	bl	8001ae8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd f8c2 	bl	8001ae8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e093      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	019b      	lsls	r3, r3, #6
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	085b      	lsrs	r3, r3, #1
 8004996:	3b01      	subs	r3, #1
 8004998:	041b      	lsls	r3, r3, #16
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	071b      	lsls	r3, r3, #28
 80049aa:	491b      	ldr	r1, [pc, #108]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b0:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_RCC_OscConfig+0x4b4>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fd f897 	bl	8001ae8 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049be:	f7fd f893 	bl	8001ae8 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e064      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d0:	4b11      	ldr	r3, [pc, #68]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x452>
 80049dc:	e05c      	b.n	8004a98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_RCC_OscConfig+0x4b4>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd f880 	bl	8001ae8 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd f87c 	bl	8001ae8 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e04d      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCC_OscConfig+0x4ac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x480>
 8004a0a:	e045      	b.n	8004a98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d107      	bne.n	8004a24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e040      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a24:	4b1f      	ldr	r3, [pc, #124]	; (8004aa4 <HAL_RCC_OscConfig+0x538>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d030      	beq.n	8004a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d129      	bne.n	8004a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d122      	bne.n	8004a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d119      	bne.n	8004a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d10f      	bne.n	8004a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d107      	bne.n	8004a94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800

08004aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e07b      	b.n	8004bb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d009      	beq.n	8004ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61da      	str	r2, [r3, #28]
 8004ad2:	e005      	b.n	8004ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fe68 	bl	80017d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b64:	ea42 0103 	orr.w	r1, r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
 8004b7e:	f003 0104 	and.w	r1, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	f003 0210 	and.w	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b088      	sub	sp, #32
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_SPI_Transmit+0x22>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e126      	b.n	8004e2a <HAL_SPI_Transmit+0x270>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be4:	f7fc ff80 	bl	8001ae8 <HAL_GetTick>
 8004be8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bea:	88fb      	ldrh	r3, [r7, #6]
 8004bec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bfe:	e10b      	b.n	8004e18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Transmit+0x52>
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c10:	e102      	b.n	8004e18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2203      	movs	r2, #3
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c58:	d10f      	bne.n	8004c7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d007      	beq.n	8004c98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca0:	d14b      	bne.n	8004d3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <HAL_SPI_Transmit+0xf6>
 8004caa:	8afb      	ldrh	r3, [r7, #22]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d13e      	bne.n	8004d2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	881a      	ldrh	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cd4:	e02b      	b.n	8004d2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d112      	bne.n	8004d0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	881a      	ldrh	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf4:	1c9a      	adds	r2, r3, #2
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d08:	e011      	b.n	8004d2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d0a:	f7fc feed 	bl	8001ae8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d803      	bhi.n	8004d22 <HAL_SPI_Transmit+0x168>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x16e>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d2c:	e074      	b.n	8004e18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1ce      	bne.n	8004cd6 <HAL_SPI_Transmit+0x11c>
 8004d38:	e04c      	b.n	8004dd4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0x18e>
 8004d42:	8afb      	ldrh	r3, [r7, #22]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d140      	bne.n	8004dca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d6e:	e02c      	b.n	8004dca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d113      	bne.n	8004da6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004da4:	e011      	b.n	8004dca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da6:	f7fc fe9f 	bl	8001ae8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d803      	bhi.n	8004dbe <HAL_SPI_Transmit+0x204>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Transmit+0x20a>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc8:	e026      	b.n	8004e18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1cd      	bne.n	8004d70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fbcb 	bl	8005574 <SPI_EndRxTxTransaction>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e000      	b.n	8004e18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b088      	sub	sp, #32
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4e:	d112      	bne.n	8004e76 <HAL_SPI_Receive+0x44>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10e      	bne.n	8004e76 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e60:	88fa      	ldrh	r2, [r7, #6]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4613      	mov	r3, r2
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 f8f1 	bl	8005054 <HAL_SPI_TransmitReceive>
 8004e72:	4603      	mov	r3, r0
 8004e74:	e0ea      	b.n	800504c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_SPI_Receive+0x52>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e0e3      	b.n	800504c <HAL_SPI_Receive+0x21a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e8c:	f7fc fe2c 	bl	8001ae8 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ea2:	e0ca      	b.n	800503a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_SPI_Receive+0x7e>
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eb4:	e0c1      	b.n	800503a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efc:	d10f      	bne.n	8004f1e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d007      	beq.n	8004f3c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d162      	bne.n	800500a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f44:	e02e      	b.n	8004fa4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d115      	bne.n	8004f80 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f103 020c 	add.w	r2, r3, #12
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f7e:	e011      	b.n	8004fa4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f80:	f7fc fdb2 	bl	8001ae8 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d803      	bhi.n	8004f98 <HAL_SPI_Receive+0x166>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d102      	bne.n	8004f9e <HAL_SPI_Receive+0x16c>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fa2:	e04a      	b.n	800503a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1cb      	bne.n	8004f46 <HAL_SPI_Receive+0x114>
 8004fae:	e031      	b.n	8005014 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d113      	bne.n	8004fe6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	1c9a      	adds	r2, r3, #2
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fe4:	e011      	b.n	800500a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe6:	f7fc fd7f 	bl	8001ae8 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d803      	bhi.n	8004ffe <HAL_SPI_Receive+0x1cc>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_Receive+0x1d2>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005008:	e017      	b.n	800503a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1cd      	bne.n	8004fb0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fa45 	bl	80054a8 <SPI_EndRxTransaction>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
 8005036:	e000      	b.n	800503a <HAL_SPI_Receive+0x208>
  }

error :
 8005038:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	; 0x30
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005062:	2301      	movs	r3, #1
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_SPI_TransmitReceive+0x26>
 8005076:	2302      	movs	r3, #2
 8005078:	e18a      	b.n	8005390 <HAL_SPI_TransmitReceive+0x33c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005082:	f7fc fd31 	bl	8001ae8 <HAL_GetTick>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005098:	887b      	ldrh	r3, [r7, #2]
 800509a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800509c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d00f      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x70>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050aa:	d107      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d103      	bne.n	80050bc <HAL_SPI_TransmitReceive+0x68>
 80050b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d003      	beq.n	80050c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050c2:	e15b      	b.n	800537c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x82>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0x82>
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050dc:	e14e      	b.n	800537c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d003      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2205      	movs	r2, #5
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	887a      	ldrh	r2, [r7, #2]
 800511a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d007      	beq.n	8005146 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005144:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514e:	d178      	bne.n	8005242 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_SPI_TransmitReceive+0x10a>
 8005158:	8b7b      	ldrh	r3, [r7, #26]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d166      	bne.n	800522c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005182:	e053      	b.n	800522c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d11b      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x176>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d016      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x176>
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d113      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	881a      	ldrh	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	1c9a      	adds	r2, r3, #2
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d119      	bne.n	800520c <HAL_SPI_TransmitReceive+0x1b8>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d014      	beq.n	800520c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	b292      	uxth	r2, r2
 80051ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005208:	2301      	movs	r3, #1
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800520c:	f7fc fc6c 	bl	8001ae8 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005218:	429a      	cmp	r2, r3
 800521a:	d807      	bhi.n	800522c <HAL_SPI_TransmitReceive+0x1d8>
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d003      	beq.n	800522c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800522a:	e0a7      	b.n	800537c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1a6      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x130>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1a1      	bne.n	8005184 <HAL_SPI_TransmitReceive+0x130>
 8005240:	e07c      	b.n	800533c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x1fc>
 800524a:	8b7b      	ldrh	r3, [r7, #26]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d16b      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	330c      	adds	r3, #12
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005276:	e057      	b.n	8005328 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d11c      	bne.n	80052c0 <HAL_SPI_TransmitReceive+0x26c>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d017      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x26c>
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d114      	bne.n	80052c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	330c      	adds	r3, #12
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d119      	bne.n	8005302 <HAL_SPI_TransmitReceive+0x2ae>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d014      	beq.n	8005302 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052fe:	2301      	movs	r3, #1
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005302:	f7fc fbf1 	bl	8001ae8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800530e:	429a      	cmp	r2, r3
 8005310:	d803      	bhi.n	800531a <HAL_SPI_TransmitReceive+0x2c6>
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d102      	bne.n	8005320 <HAL_SPI_TransmitReceive+0x2cc>
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005326:	e029      	b.n	800537c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1a2      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x224>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d19d      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f917 	bl	8005574 <SPI_EndRxTxTransaction>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005358:	e010      	b.n	800537c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	e000      	b.n	800537c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800537a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800538c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005390:	4618      	mov	r0, r3
 8005392:	3730      	adds	r7, #48	; 0x30
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a8:	f7fc fb9e 	bl	8001ae8 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b8:	f7fc fb96 	bl	8001ae8 <HAL_GetTick>
 80053bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053be:	4b39      	ldr	r3, [pc, #228]	; (80054a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	015b      	lsls	r3, r3, #5
 80053c4:	0d1b      	lsrs	r3, r3, #20
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ce:	e054      	b.n	800547a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d050      	beq.n	800547a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d8:	f7fc fb86 	bl	8001ae8 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d902      	bls.n	80053ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d13d      	bne.n	800546a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d111      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005410:	d004      	beq.n	800541c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541a:	d107      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005434:	d10f      	bne.n	8005456 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005454:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e017      	b.n	800549a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3b01      	subs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d19b      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000

080054a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054bc:	d111      	bne.n	80054e2 <SPI_EndRxTransaction+0x3a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d004      	beq.n	80054d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d107      	bne.n	80054e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ea:	d12a      	bne.n	8005542 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f4:	d012      	beq.n	800551c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2200      	movs	r2, #0
 80054fe:	2180      	movs	r1, #128	; 0x80
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7ff ff49 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d02d      	beq.n	8005568 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e026      	b.n	800556a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	2101      	movs	r1, #1
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f7ff ff36 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01a      	beq.n	8005568 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e013      	b.n	800556a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2200      	movs	r2, #0
 800554a:	2101      	movs	r1, #1
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff23 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f043 0220 	orr.w	r2, r3, #32
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e000      	b.n	800556a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <SPI_EndRxTxTransaction+0x7c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <SPI_EndRxTxTransaction+0x80>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	0d5b      	lsrs	r3, r3, #21
 800558c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005590:	fb02 f303 	mul.w	r3, r2, r3
 8005594:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559e:	d112      	bne.n	80055c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2200      	movs	r2, #0
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f7ff fef4 	bl	8005398 <SPI_WaitFlagStateUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d016      	beq.n	80055e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e00f      	b.n	80055e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d0f2      	beq.n	80055c6 <SPI_EndRxTxTransaction+0x52>
 80055e0:	e000      	b.n	80055e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80055e2:	bf00      	nop
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000000 	.word	0x20000000
 80055f4:	165e9f81 	.word	0x165e9f81

080055f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e03f      	b.n	800568a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fc f91e 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2224      	movs	r2, #36	; 0x24
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800563a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f9a7 	bl	8005990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b08a      	sub	sp, #40	; 0x28
 8005696:	af02      	add	r7, sp, #8
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	4613      	mov	r3, r2
 80056a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d17c      	bne.n	80057ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_UART_Transmit+0x2c>
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e075      	b.n	80057ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_UART_Transmit+0x3e>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e06e      	b.n	80057ae <HAL_UART_Transmit+0x11c>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2221      	movs	r2, #33	; 0x21
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056e6:	f7fc f9ff 	bl	8001ae8 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	88fa      	ldrh	r2, [r7, #6]
 80056f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	d108      	bne.n	8005714 <HAL_UART_Transmit+0x82>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	e003      	b.n	800571c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005724:	e02a      	b.n	800577c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2200      	movs	r2, #0
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f8e2 	bl	80058fa <UART_WaitOnFlagUntilTimeout>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e036      	b.n	80057ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	3302      	adds	r3, #2
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e007      	b.n	800576e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	3301      	adds	r3, #1
 800576c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1cf      	bne.n	8005726 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2200      	movs	r2, #0
 800578e:	2140      	movs	r1, #64	; 0x40
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f8b2 	bl	80058fa <UART_WaitOnFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e006      	b.n	80057ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b08a      	sub	sp, #40	; 0x28
 80057ba:	af02      	add	r7, sp, #8
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	f040 808c 	bne.w	80058f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_UART_Receive+0x2e>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e084      	b.n	80058f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Receive+0x40>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e07d      	b.n	80058f2 <HAL_UART_Receive+0x13c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2222      	movs	r2, #34	; 0x22
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005812:	f7fc f969 	bl	8001ae8 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	88fa      	ldrh	r2, [r7, #6]
 8005822:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d108      	bne.n	8005840 <HAL_UART_Receive+0x8a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e003      	b.n	8005848 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005850:	e043      	b.n	80058da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	2120      	movs	r1, #32
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f84c 	bl	80058fa <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e042      	b.n	80058f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10c      	bne.n	800588c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	b29a      	uxth	r2, r3
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	3302      	adds	r3, #2
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e01f      	b.n	80058cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	d007      	beq.n	80058a6 <HAL_UART_Receive+0xf0>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <HAL_UART_Receive+0xfe>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1b6      	bne.n	8005852 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590a:	e02c      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d028      	beq.n	8005966 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <UART_WaitOnFlagUntilTimeout+0x30>
 800591a:	f7fc f8e5 	bl	8001ae8 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d21d      	bcs.n	8005966 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005938:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695a      	ldr	r2, [r3, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e00f      	b.n	8005986 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	4013      	ands	r3, r2
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	429a      	cmp	r2, r3
 8005974:	bf0c      	ite	eq
 8005976:	2301      	moveq	r3, #1
 8005978:	2300      	movne	r3, #0
 800597a:	b2db      	uxtb	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	429a      	cmp	r2, r3
 8005982:	d0c3      	beq.n	800590c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	b09f      	sub	sp, #124	; 0x7c
 8005996:	af00      	add	r7, sp, #0
 8005998:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800599a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a6:	68d9      	ldr	r1, [r3, #12]
 80059a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	ea40 0301 	orr.w	r3, r0, r1
 80059b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059d4:	f021 010c 	bic.w	r1, r1, #12
 80059d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059de:	430b      	orrs	r3, r1
 80059e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80059ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ee:	6999      	ldr	r1, [r3, #24]
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	ea40 0301 	orr.w	r3, r0, r1
 80059f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4bc5      	ldr	r3, [pc, #788]	; (8005d14 <UART_SetConfig+0x384>)
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d004      	beq.n	8005a0e <UART_SetConfig+0x7e>
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4bc3      	ldr	r3, [pc, #780]	; (8005d18 <UART_SetConfig+0x388>)
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d103      	bne.n	8005a16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a0e:	f7fe f8bd 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8005a12:	6778      	str	r0, [r7, #116]	; 0x74
 8005a14:	e002      	b.n	8005a1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a16:	f7fe f8a5 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8005a1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a24:	f040 80b6 	bne.w	8005b94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a2a:	461c      	mov	r4, r3
 8005a2c:	f04f 0500 	mov.w	r5, #0
 8005a30:	4622      	mov	r2, r4
 8005a32:	462b      	mov	r3, r5
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	6439      	str	r1, [r7, #64]	; 0x40
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a40:	1912      	adds	r2, r2, r4
 8005a42:	eb45 0303 	adc.w	r3, r5, r3
 8005a46:	f04f 0000 	mov.w	r0, #0
 8005a4a:	f04f 0100 	mov.w	r1, #0
 8005a4e:	00d9      	lsls	r1, r3, #3
 8005a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a54:	00d0      	lsls	r0, r2, #3
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	1911      	adds	r1, r2, r4
 8005a5c:	6639      	str	r1, [r7, #96]	; 0x60
 8005a5e:	416b      	adcs	r3, r5
 8005a60:	667b      	str	r3, [r7, #100]	; 0x64
 8005a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	1891      	adds	r1, r2, r2
 8005a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a70:	415b      	adcs	r3, r3
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a7c:	f7fa fbca 	bl	8000214 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4ba5      	ldr	r3, [pc, #660]	; (8005d1c <UART_SetConfig+0x38c>)
 8005a86:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	011e      	lsls	r6, r3, #4
 8005a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a90:	461c      	mov	r4, r3
 8005a92:	f04f 0500 	mov.w	r5, #0
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	1891      	adds	r1, r2, r2
 8005a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a9e:	415b      	adcs	r3, r3
 8005aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005aa6:	1912      	adds	r2, r2, r4
 8005aa8:	eb45 0303 	adc.w	r3, r5, r3
 8005aac:	f04f 0000 	mov.w	r0, #0
 8005ab0:	f04f 0100 	mov.w	r1, #0
 8005ab4:	00d9      	lsls	r1, r3, #3
 8005ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aba:	00d0      	lsls	r0, r2, #3
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	1911      	adds	r1, r2, r4
 8005ac2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ac4:	416b      	adcs	r3, r5
 8005ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	461a      	mov	r2, r3
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ade:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ae2:	f7fa fb97 	bl	8000214 <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4b8c      	ldr	r3, [pc, #560]	; (8005d1c <UART_SetConfig+0x38c>)
 8005aec:	fba3 1302 	umull	r1, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	2164      	movs	r1, #100	; 0x64
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	3332      	adds	r3, #50	; 0x32
 8005afe:	4a87      	ldr	r2, [pc, #540]	; (8005d1c <UART_SetConfig+0x38c>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b0c:	441e      	add	r6, r3
 8005b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b10:	4618      	mov	r0, r3
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	1894      	adds	r4, r2, r2
 8005b1c:	623c      	str	r4, [r7, #32]
 8005b1e:	415b      	adcs	r3, r3
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
 8005b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b26:	1812      	adds	r2, r2, r0
 8005b28:	eb41 0303 	adc.w	r3, r1, r3
 8005b2c:	f04f 0400 	mov.w	r4, #0
 8005b30:	f04f 0500 	mov.w	r5, #0
 8005b34:	00dd      	lsls	r5, r3, #3
 8005b36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b3a:	00d4      	lsls	r4, r2, #3
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	462b      	mov	r3, r5
 8005b40:	1814      	adds	r4, r2, r0
 8005b42:	653c      	str	r4, [r7, #80]	; 0x50
 8005b44:	414b      	adcs	r3, r1
 8005b46:	657b      	str	r3, [r7, #84]	; 0x54
 8005b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	1891      	adds	r1, r2, r2
 8005b54:	61b9      	str	r1, [r7, #24]
 8005b56:	415b      	adcs	r3, r3
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b62:	f7fa fb57 	bl	8000214 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b6c      	ldr	r3, [pc, #432]	; (8005d1c <UART_SetConfig+0x38c>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	; 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3332      	adds	r3, #50	; 0x32
 8005b7e:	4a67      	ldr	r2, [pc, #412]	; (8005d1c <UART_SetConfig+0x38c>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 0207 	and.w	r2, r3, #7
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4432      	add	r2, r6
 8005b90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b92:	e0b9      	b.n	8005d08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b96:	461c      	mov	r4, r3
 8005b98:	f04f 0500 	mov.w	r5, #0
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	6139      	str	r1, [r7, #16]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bac:	1912      	adds	r2, r2, r4
 8005bae:	eb45 0303 	adc.w	r3, r5, r3
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	00d9      	lsls	r1, r3, #3
 8005bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bc0:	00d0      	lsls	r0, r2, #3
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	eb12 0804 	adds.w	r8, r2, r4
 8005bca:	eb43 0905 	adc.w	r9, r3, r5
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f04f 0100 	mov.w	r1, #0
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	008b      	lsls	r3, r1, #2
 8005be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005be6:	0082      	lsls	r2, r0, #2
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa fb12 	bl	8000214 <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4b49      	ldr	r3, [pc, #292]	; (8005d1c <UART_SetConfig+0x38c>)
 8005bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	011e      	lsls	r6, r3, #4
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	4618      	mov	r0, r3
 8005c02:	f04f 0100 	mov.w	r1, #0
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	1894      	adds	r4, r2, r2
 8005c0c:	60bc      	str	r4, [r7, #8]
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c16:	1812      	adds	r2, r2, r0
 8005c18:	eb41 0303 	adc.w	r3, r1, r3
 8005c1c:	f04f 0400 	mov.w	r4, #0
 8005c20:	f04f 0500 	mov.w	r5, #0
 8005c24:	00dd      	lsls	r5, r3, #3
 8005c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c2a:	00d4      	lsls	r4, r2, #3
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	462b      	mov	r3, r5
 8005c30:	1814      	adds	r4, r2, r0
 8005c32:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c34:	414b      	adcs	r3, r1
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f04f 0100 	mov.w	r1, #0
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	008b      	lsls	r3, r1, #2
 8005c4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c50:	0082      	lsls	r2, r0, #2
 8005c52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c56:	f7fa fadd 	bl	8000214 <__aeabi_uldivmod>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4b2f      	ldr	r3, [pc, #188]	; (8005d1c <UART_SetConfig+0x38c>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	2164      	movs	r1, #100	; 0x64
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	3332      	adds	r3, #50	; 0x32
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <UART_SetConfig+0x38c>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c7e:	441e      	add	r6, r3
 8005c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c82:	4618      	mov	r0, r3
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	1894      	adds	r4, r2, r2
 8005c8e:	603c      	str	r4, [r7, #0]
 8005c90:	415b      	adcs	r3, r3
 8005c92:	607b      	str	r3, [r7, #4]
 8005c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c98:	1812      	adds	r2, r2, r0
 8005c9a:	eb41 0303 	adc.w	r3, r1, r3
 8005c9e:	f04f 0400 	mov.w	r4, #0
 8005ca2:	f04f 0500 	mov.w	r5, #0
 8005ca6:	00dd      	lsls	r5, r3, #3
 8005ca8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cac:	00d4      	lsls	r4, r2, #3
 8005cae:	4622      	mov	r2, r4
 8005cb0:	462b      	mov	r3, r5
 8005cb2:	eb12 0a00 	adds.w	sl, r2, r0
 8005cb6:	eb43 0b01 	adc.w	fp, r3, r1
 8005cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f04f 0100 	mov.w	r1, #0
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cd2:	0082      	lsls	r2, r0, #2
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	f7fa fa9c 	bl	8000214 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <UART_SetConfig+0x38c>)
 8005ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2164      	movs	r1, #100	; 0x64
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <UART_SetConfig+0x38c>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4432      	add	r2, r6
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	377c      	adds	r7, #124	; 0x7c
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	40011000 	.word	0x40011000
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	51eb851f 	.word	0x51eb851f

08005d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d20:	b084      	sub	sp, #16
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	f107 001c 	add.w	r0, r7, #28
 8005d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d122      	bne.n	8005d7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d105      	bne.n	8005d72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fac0 	bl	80072f8 <USB_CoreReset>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	e01a      	b.n	8005db4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f001 fab4 	bl	80072f8 <USB_CoreReset>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
 8005da6:	e005      	b.n	8005db4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d10b      	bne.n	8005dd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f043 0206 	orr.w	r2, r3, #6
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dde:	b004      	add	sp, #16
 8005de0:	4770      	bx	lr
	...

08005de4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d165      	bne.n	8005ec4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a41      	ldr	r2, [pc, #260]	; (8005f00 <USB_SetTurnaroundTime+0x11c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d906      	bls.n	8005e0e <USB_SetTurnaroundTime+0x2a>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a40      	ldr	r2, [pc, #256]	; (8005f04 <USB_SetTurnaroundTime+0x120>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d202      	bcs.n	8005e0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e08:	230f      	movs	r3, #15
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e062      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a3c      	ldr	r2, [pc, #240]	; (8005f04 <USB_SetTurnaroundTime+0x120>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d306      	bcc.n	8005e24 <USB_SetTurnaroundTime+0x40>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a3b      	ldr	r2, [pc, #236]	; (8005f08 <USB_SetTurnaroundTime+0x124>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d202      	bcs.n	8005e24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e1e:	230e      	movs	r3, #14
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e057      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a38      	ldr	r2, [pc, #224]	; (8005f08 <USB_SetTurnaroundTime+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d306      	bcc.n	8005e3a <USB_SetTurnaroundTime+0x56>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4a37      	ldr	r2, [pc, #220]	; (8005f0c <USB_SetTurnaroundTime+0x128>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d202      	bcs.n	8005e3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e34:	230d      	movs	r3, #13
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e04c      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a33      	ldr	r2, [pc, #204]	; (8005f0c <USB_SetTurnaroundTime+0x128>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d306      	bcc.n	8005e50 <USB_SetTurnaroundTime+0x6c>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a32      	ldr	r2, [pc, #200]	; (8005f10 <USB_SetTurnaroundTime+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d802      	bhi.n	8005e50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e041      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a2f      	ldr	r2, [pc, #188]	; (8005f10 <USB_SetTurnaroundTime+0x12c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d906      	bls.n	8005e66 <USB_SetTurnaroundTime+0x82>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a2e      	ldr	r2, [pc, #184]	; (8005f14 <USB_SetTurnaroundTime+0x130>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d802      	bhi.n	8005e66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e60:	230b      	movs	r3, #11
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	e036      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4a2a      	ldr	r2, [pc, #168]	; (8005f14 <USB_SetTurnaroundTime+0x130>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d906      	bls.n	8005e7c <USB_SetTurnaroundTime+0x98>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <USB_SetTurnaroundTime+0x134>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d802      	bhi.n	8005e7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e76:	230a      	movs	r3, #10
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e02b      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <USB_SetTurnaroundTime+0x134>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d906      	bls.n	8005e92 <USB_SetTurnaroundTime+0xae>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <USB_SetTurnaroundTime+0x138>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d202      	bcs.n	8005e92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e8c:	2309      	movs	r3, #9
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e020      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a21      	ldr	r2, [pc, #132]	; (8005f1c <USB_SetTurnaroundTime+0x138>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d306      	bcc.n	8005ea8 <USB_SetTurnaroundTime+0xc4>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a20      	ldr	r2, [pc, #128]	; (8005f20 <USB_SetTurnaroundTime+0x13c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d802      	bhi.n	8005ea8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e015      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <USB_SetTurnaroundTime+0x13c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d906      	bls.n	8005ebe <USB_SetTurnaroundTime+0xda>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <USB_SetTurnaroundTime+0x140>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d202      	bcs.n	8005ebe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005eb8:	2307      	movs	r3, #7
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e00a      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ebe:	2306      	movs	r3, #6
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e007      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005eca:	2309      	movs	r3, #9
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e001      	b.n	8005ed4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ed0:	2309      	movs	r3, #9
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	029b      	lsls	r3, r3, #10
 8005ee8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005eec:	431a      	orrs	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	00d8acbf 	.word	0x00d8acbf
 8005f04:	00e4e1c0 	.word	0x00e4e1c0
 8005f08:	00f42400 	.word	0x00f42400
 8005f0c:	01067380 	.word	0x01067380
 8005f10:	011a499f 	.word	0x011a499f
 8005f14:	01312cff 	.word	0x01312cff
 8005f18:	014ca43f 	.word	0x014ca43f
 8005f1c:	016e3600 	.word	0x016e3600
 8005f20:	01a6ab1f 	.word	0x01a6ab1f
 8005f24:	01e84800 	.word	0x01e84800

08005f28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f043 0201 	orr.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d106      	bne.n	8005f98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	e00b      	b.n	8005fb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e001      	b.n	8005fb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e003      	b.n	8005fb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fb0:	2032      	movs	r0, #50	; 0x32
 8005fb2:	f7fb fda5 	bl	8001b00 <HAL_Delay>

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e009      	b.n	8005ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3340      	adds	r3, #64	; 0x40
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b0e      	cmp	r3, #14
 8005ff8:	d9f2      	bls.n	8005fe0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11c      	bne.n	800603a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600e:	f043 0302 	orr.w	r3, r3, #2
 8006012:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e005      	b.n	8006046 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800604c:	461a      	mov	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	4619      	mov	r1, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006060:	461a      	mov	r2, r3
 8006062:	680b      	ldr	r3, [r1, #0]
 8006064:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10c      	bne.n	8006086 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d104      	bne.n	800607c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006072:	2100      	movs	r1, #0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f949 	bl	800630c <USB_SetDevSpeed>
 800607a:	e008      	b.n	800608e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800607c:	2101      	movs	r1, #1
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f944 	bl	800630c <USB_SetDevSpeed>
 8006084:	e003      	b.n	800608e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006086:	2103      	movs	r1, #3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f93f 	bl	800630c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800608e:	2110      	movs	r1, #16
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f8f3 	bl	800627c <USB_FlushTxFifo>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f911 	bl	80062c8 <USB_FlushRxFifo>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	461a      	mov	r2, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	461a      	mov	r2, r3
 80060c4:	2300      	movs	r3, #0
 80060c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ce:	461a      	mov	r2, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	e043      	b.n	8006162 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f0:	d118      	bne.n	8006124 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	461a      	mov	r2, r3
 8006106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e013      	b.n	8006136 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	461a      	mov	r2, r3
 800611c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e008      	b.n	8006136 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006130:	461a      	mov	r2, r3
 8006132:	2300      	movs	r3, #0
 8006134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	461a      	mov	r2, r3
 8006144:	2300      	movs	r3, #0
 8006146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	461a      	mov	r2, r3
 8006156:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800615a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	3301      	adds	r3, #1
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d3b7      	bcc.n	80060da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800616a:	2300      	movs	r3, #0
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	e043      	b.n	80061f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006186:	d118      	bne.n	80061ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	461a      	mov	r2, r3
 800619c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e013      	b.n	80061cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	461a      	mov	r2, r3
 80061b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e008      	b.n	80061cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d8:	461a      	mov	r2, r3
 80061da:	2300      	movs	r3, #0
 80061dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	461a      	mov	r2, r3
 80061ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	3301      	adds	r3, #1
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d3b7      	bcc.n	8006170 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f043 0210 	orr.w	r2, r3, #16
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <USB_DevInit+0x2b8>)
 800623a:	4313      	orrs	r3, r2
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d005      	beq.n	8006252 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f043 0208 	orr.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d107      	bne.n	8006268 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006260:	f043 0304 	orr.w	r3, r3, #4
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr
 8006278:	803c3800 	.word	0x803c3800

0800627c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <USB_FlushTxFifo+0x48>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e006      	b.n	80062b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d0f0      	beq.n	8006296 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	00030d40 	.word	0x00030d40

080062c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2210      	movs	r2, #16
 80062d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <USB_FlushRxFifo+0x40>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0310 	and.w	r3, r3, #16
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d0f0      	beq.n	80062da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	00030d40 	.word	0x00030d40

0800630c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800633e:	b480      	push	{r7}
 8006340:	b087      	sub	sp, #28
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0306 	and.w	r3, r3, #6
 8006356:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d102      	bne.n	8006364 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]
 8006362:	e00a      	b.n	800637a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d002      	beq.n	8006370 <USB_GetDevSpeed+0x32>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b06      	cmp	r3, #6
 800636e:	d102      	bne.n	8006376 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006370:	2302      	movs	r3, #2
 8006372:	75fb      	strb	r3, [r7, #23]
 8006374:	e001      	b.n	800637a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006376:	230f      	movs	r3, #15
 8006378:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
}
 800637c:	4618      	mov	r0, r3
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d13a      	bne.n	800641a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	68f9      	ldr	r1, [r7, #12]
 80063be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d155      	bne.n	8006488 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	059b      	lsls	r3, r3, #22
 80063fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006400:	4313      	orrs	r3, r2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e036      	b.n	8006488 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	2101      	movs	r1, #1
 800642c:	fa01 f303 	lsl.w	r3, r1, r3
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	68f9      	ldr	r1, [r7, #12]
 8006434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006438:	4313      	orrs	r3, r2
 800643a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11a      	bne.n	8006488 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	78db      	ldrb	r3, [r3, #3]
 800646c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800646e:	430b      	orrs	r3, r1
 8006470:	4313      	orrs	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
	...

08006498 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d161      	bne.n	8006578 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ca:	d11f      	bne.n	800650c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006506:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800650a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	2101      	movs	r1, #1
 800651e:	fa01 f303 	lsl.w	r3, r1, r3
 8006522:	b29b      	uxth	r3, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800652c:	4013      	ands	r3, r2
 800652e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2101      	movs	r1, #1
 8006542:	fa01 f303 	lsl.w	r3, r1, r3
 8006546:	b29b      	uxth	r3, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006550:	4013      	ands	r3, r2
 8006552:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	0159      	lsls	r1, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	440b      	add	r3, r1
 800656a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656e:	4619      	mov	r1, r3
 8006570:	4b35      	ldr	r3, [pc, #212]	; (8006648 <USB_DeactivateEndpoint+0x1b0>)
 8006572:	4013      	ands	r3, r2
 8006574:	600b      	str	r3, [r1, #0]
 8006576:	e060      	b.n	800663a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800658a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658e:	d11f      	bne.n	80065d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	2101      	movs	r1, #1
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	43db      	mvns	r3, r3
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f0:	4013      	ands	r3, r2
 80065f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	43db      	mvns	r3, r3
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006614:	4013      	ands	r3, r2
 8006616:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	0159      	lsls	r1, r3, #5
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	440b      	add	r3, r1
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	4619      	mov	r1, r3
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <USB_DeactivateEndpoint+0x1b4>)
 8006636:	4013      	ands	r3, r2
 8006638:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	ec337800 	.word	0xec337800
 800664c:	eff37800 	.word	0xeff37800

08006650 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	785b      	ldrb	r3, [r3, #1]
 800666c:	2b01      	cmp	r3, #1
 800666e:	f040 815c 	bne.w	800692a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d132      	bne.n	80066e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006694:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006698:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800669c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	0cdb      	lsrs	r3, r3, #19
 80066da:	04db      	lsls	r3, r3, #19
 80066dc:	6113      	str	r3, [r2, #16]
 80066de:	e074      	b.n	80067ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	0cdb      	lsrs	r3, r3, #19
 80066fc:	04db      	lsls	r3, r3, #19
 80066fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800671e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6959      	ldr	r1, [r3, #20]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	440b      	add	r3, r1
 800673c:	1e59      	subs	r1, r3, #1
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	fbb1 f3f3 	udiv	r3, r1, r3
 8006746:	04d9      	lsls	r1, r3, #19
 8006748:	4b9d      	ldr	r3, [pc, #628]	; (80069c0 <USB_EPStartXfer+0x370>)
 800674a:	400b      	ands	r3, r1
 800674c:	69b9      	ldr	r1, [r7, #24]
 800674e:	0148      	lsls	r0, r1, #5
 8006750:	69f9      	ldr	r1, [r7, #28]
 8006752:	4401      	add	r1, r0
 8006754:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006758:	4313      	orrs	r3, r2
 800675a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006772:	69b9      	ldr	r1, [r7, #24]
 8006774:	0148      	lsls	r0, r1, #5
 8006776:	69f9      	ldr	r1, [r7, #28]
 8006778:	4401      	add	r1, r0
 800677a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800677e:	4313      	orrs	r3, r2
 8006780:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	78db      	ldrb	r3, [r3, #3]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d11f      	bne.n	80067ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d14b      	bne.n	8006868 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e4:	461a      	mov	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	78db      	ldrb	r3, [r3, #3]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d128      	bne.n	8006846 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d110      	bne.n	8006826 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	e00f      	b.n	8006846 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006844:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	440a      	add	r2, r1
 800685c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e12f      	b.n	8006ac8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006882:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006886:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	78db      	ldrb	r3, [r3, #3]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d015      	beq.n	80068bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 8117 	beq.w	8006ac8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	2101      	movs	r1, #1
 80068ac:	fa01 f303 	lsl.w	r3, r1, r3
 80068b0:	69f9      	ldr	r1, [r7, #28]
 80068b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b6:	4313      	orrs	r3, r2
 80068b8:	634b      	str	r3, [r1, #52]	; 0x34
 80068ba:	e105      	b.n	8006ac8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d110      	bne.n	80068ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e00f      	b.n	800690e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800690c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68d9      	ldr	r1, [r3, #12]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	b298      	uxth	r0, r3
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	4603      	mov	r3, r0
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fa2b 	bl	8006d7e <USB_WritePacket>
 8006928:	e0ce      	b.n	8006ac8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006944:	0cdb      	lsrs	r3, r3, #19
 8006946:	04db      	lsls	r3, r3, #19
 8006948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006968:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800696c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d126      	bne.n	80069c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800698c:	69b9      	ldr	r1, [r7, #24]
 800698e:	0148      	lsls	r0, r1, #5
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	4401      	add	r1, r0
 8006994:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006998:	4313      	orrs	r3, r2
 800699a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ba:	6113      	str	r3, [r2, #16]
 80069bc:	e036      	b.n	8006a2c <USB_EPStartXfer+0x3dc>
 80069be:	bf00      	nop
 80069c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	695a      	ldr	r2, [r3, #20]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	8afb      	ldrh	r3, [r7, #22]
 80069ea:	04d9      	lsls	r1, r3, #19
 80069ec:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <USB_EPStartXfer+0x484>)
 80069ee:	400b      	ands	r3, r1
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	0148      	lsls	r0, r1, #5
 80069f4:	69f9      	ldr	r1, [r7, #28]
 80069f6:	4401      	add	r1, r0
 80069f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069fc:	4313      	orrs	r3, r2
 80069fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	8af9      	ldrh	r1, [r7, #22]
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	0148      	lsls	r0, r1, #5
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	4401      	add	r1, r0
 8006a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10d      	bne.n	8006a4e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68d9      	ldr	r1, [r3, #12]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	460a      	mov	r2, r1
 8006a4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	78db      	ldrb	r3, [r3, #3]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d128      	bne.n	8006aa8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e00f      	b.n	8006aa8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	1ff80000 	.word	0x1ff80000

08006ad8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	f040 80cd 	bne.w	8006c94 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d132      	bne.n	8006b68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b60:	0cdb      	lsrs	r3, r3, #19
 8006b62:	04db      	lsls	r3, r3, #19
 8006b64:	6113      	str	r3, [r2, #16]
 8006b66:	e04e      	b.n	8006c06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b82:	0cdb      	lsrs	r3, r3, #19
 8006b84:	04db      	lsls	r3, r3, #19
 8006b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006baa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf6:	6939      	ldr	r1, [r7, #16]
 8006bf8:	0148      	lsls	r0, r1, #5
 8006bfa:	6979      	ldr	r1, [r7, #20]
 8006bfc:	4401      	add	r1, r0
 8006bfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d11e      	bne.n	8006c4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	461a      	mov	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e092      	b.n	8006d70 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d07e      	beq.n	8006d70 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	2101      	movs	r1, #1
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	6979      	ldr	r1, [r7, #20]
 8006c8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	634b      	str	r3, [r1, #52]	; 0x34
 8006c92:	e06d      	b.n	8006d70 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cae:	0cdb      	lsrs	r3, r3, #19
 8006cb0:	04db      	lsls	r3, r3, #19
 8006cb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cd2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cd6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d1e:	6939      	ldr	r1, [r7, #16]
 8006d20:	0148      	lsls	r0, r1, #5
 8006d22:	6979      	ldr	r1, [r7, #20]
 8006d24:	4401      	add	r1, r0
 8006d26:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10d      	bne.n	8006d50 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	68d9      	ldr	r1, [r3, #12]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b089      	sub	sp, #36	; 0x24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	4611      	mov	r1, r2
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	71fb      	strb	r3, [r7, #7]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d11a      	bne.n	8006dda <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006da4:	88bb      	ldrh	r3, [r7, #4]
 8006da6:	3303      	adds	r3, #3
 8006da8:	089b      	lsrs	r3, r3, #2
 8006daa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dac:	2300      	movs	r3, #0
 8006dae:	61bb      	str	r3, [r7, #24]
 8006db0:	e00f      	b.n	8006dd2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	031a      	lsls	r2, r3, #12
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d3eb      	bcc.n	8006db2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3724      	adds	r7, #36	; 0x24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	4613      	mov	r3, r2
 8006df4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	3303      	adds	r3, #3
 8006e02:	089b      	lsrs	r3, r3, #2
 8006e04:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e00b      	b.n	8006e24 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3301      	adds	r3, #1
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d3ef      	bcc.n	8006e0c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e2c:	69fb      	ldr	r3, [r7, #28]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3724      	adds	r7, #36	; 0x24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d12c      	bne.n	8006eb0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	db12      	blt.n	8006e8e <USB_EPSetStall+0x54>
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00f      	beq.n	8006e8e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e8c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	015a      	lsls	r2, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4413      	add	r3, r2
 8006e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	0151      	lsls	r1, r2, #5
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	440a      	add	r2, r1
 8006ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	e02b      	b.n	8006f08 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	db12      	blt.n	8006ee8 <USB_EPSetStall+0xae>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d128      	bne.n	8006f84 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	78db      	ldrb	r3, [r3, #3]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d003      	beq.n	8006f62 <USB_EPClearStall+0x4c>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	78db      	ldrb	r3, [r3, #3]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d138      	bne.n	8006fd4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e027      	b.n	8006fd4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d003      	beq.n	8006fb4 <USB_EPClearStall+0x9e>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	78db      	ldrb	r3, [r3, #3]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d10f      	bne.n	8006fd4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	460b      	mov	r3, r1
 8006fec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007000:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007004:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007048:	f023 0303 	bic.w	r3, r3, #3
 800704c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705c:	f023 0302 	bic.w	r3, r3, #2
 8007060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800709e:	f043 0302 	orr.w	r3, r3, #2
 80070a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4013      	ands	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4013      	ands	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	0c1b      	lsrs	r3, r3, #16
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	b29b      	uxth	r3, r3
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	4013      	ands	r3, r2
 800716c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800716e:	68bb      	ldr	r3, [r7, #8]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	460b      	mov	r3, r1
 8007186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071a0:	78fb      	ldrb	r3, [r7, #3]
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
 80071ac:	01db      	lsls	r3, r3, #7
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4013      	ands	r3, r2
 80071c8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071ca:	68bb      	ldr	r3, [r7, #8]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	f003 0301 	and.w	r3, r3, #1
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007212:	f023 0307 	bic.w	r3, r3, #7
 8007216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800722a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	460b      	mov	r3, r1
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	333c      	adds	r3, #60	; 0x3c
 8007252:	3304      	adds	r3, #4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4a26      	ldr	r2, [pc, #152]	; (80072f4 <USB_EP0_OutStart+0xb8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d90a      	bls.n	8007276 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800726c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007270:	d101      	bne.n	8007276 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	e037      	b.n	80072e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007290:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a4:	f043 0318 	orr.w	r3, r3, #24
 80072a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d10f      	bne.n	80072e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	4f54300a 	.word	0x4f54300a

080072f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	4a13      	ldr	r2, [pc, #76]	; (800735c <USB_CoreReset+0x64>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d901      	bls.n	8007316 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e01b      	b.n	800734e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	daf2      	bge.n	8007304 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f043 0201 	orr.w	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4a09      	ldr	r2, [pc, #36]	; (800735c <USB_CoreReset+0x64>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d901      	bls.n	8007340 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e006      	b.n	800734e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	d0f0      	beq.n	800732e <USB_CoreReset+0x36>

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	00030d40 	.word	0x00030d40

08007360 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800736c:	2010      	movs	r0, #16
 800736e:	f001 ff97 	bl	80092a0 <USBD_static_malloc>
 8007372:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d105      	bne.n	8007386 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007382:	2302      	movs	r3, #2
 8007384:	e01b      	b.n	80073be <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	7c1b      	ldrb	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2207      	movs	r2, #7
 800739a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800739c:	e002      	b.n	80073a4 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	220a      	movs	r2, #10
 80073a2:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80073a4:	2304      	movs	r3, #4
 80073a6:	2203      	movs	r2, #3
 80073a8:	2181      	movs	r1, #129	; 0x81
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fe19 	bl	8008fe2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80073d2:	2181      	movs	r1, #129	; 0x81
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 fe2a 	bl	800902e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d009      	beq.n	8007404 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 ff60 	bl	80092bc <USBD_static_free>
    pdev->pClassData = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007420:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e0e8      	b.n	8007606 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800743c:	2b00      	cmp	r3, #0
 800743e:	d046      	beq.n	80074ce <USBD_HID_Setup+0xbe>
 8007440:	2b20      	cmp	r3, #32
 8007442:	f040 80d8 	bne.w	80075f6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	3b02      	subs	r3, #2
 800744c:	2b09      	cmp	r3, #9
 800744e:	d836      	bhi.n	80074be <USBD_HID_Setup+0xae>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <USBD_HID_Setup+0x48>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	080074af 	.word	0x080074af
 800745c:	0800748f 	.word	0x0800748f
 8007460:	080074bf 	.word	0x080074bf
 8007464:	080074bf 	.word	0x080074bf
 8007468:	080074bf 	.word	0x080074bf
 800746c:	080074bf 	.word	0x080074bf
 8007470:	080074bf 	.word	0x080074bf
 8007474:	080074bf 	.word	0x080074bf
 8007478:	0800749d 	.word	0x0800749d
 800747c:	08007481 	.word	0x08007481
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	885b      	ldrh	r3, [r3, #2]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]
          break;
 800748c:	e01e      	b.n	80074cc <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 fa4c 	bl	8008932 <USBD_CtlSendData>
          break;
 800749a:	e017      	b.n	80074cc <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	885b      	ldrh	r3, [r3, #2]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	605a      	str	r2, [r3, #4]
          break;
 80074ac:	e00e      	b.n	80074cc <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3304      	adds	r3, #4
 80074b2:	2201      	movs	r2, #1
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fa3b 	bl	8008932 <USBD_CtlSendData>
          break;
 80074bc:	e006      	b.n	80074cc <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f9c5 	bl	8008850 <USBD_CtlError>
          ret = USBD_FAIL;
 80074c6:	2303      	movs	r3, #3
 80074c8:	75fb      	strb	r3, [r7, #23]
          break;
 80074ca:	bf00      	nop
      }
      break;
 80074cc:	e09a      	b.n	8007604 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	2b0b      	cmp	r3, #11
 80074d4:	f200 8086 	bhi.w	80075e4 <USBD_HID_Setup+0x1d4>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_HID_Setup+0xd0>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007511 	.word	0x08007511
 80074e4:	080075f3 	.word	0x080075f3
 80074e8:	080075e5 	.word	0x080075e5
 80074ec:	080075e5 	.word	0x080075e5
 80074f0:	080075e5 	.word	0x080075e5
 80074f4:	080075e5 	.word	0x080075e5
 80074f8:	0800753b 	.word	0x0800753b
 80074fc:	080075e5 	.word	0x080075e5
 8007500:	080075e5 	.word	0x080075e5
 8007504:	080075e5 	.word	0x080075e5
 8007508:	08007593 	.word	0x08007593
 800750c:	080075bd 	.word	0x080075bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b03      	cmp	r3, #3
 800751a:	d107      	bne.n	800752c <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800751c:	f107 030a 	add.w	r3, r7, #10
 8007520:	2202      	movs	r2, #2
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fa04 	bl	8008932 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800752a:	e063      	b.n	80075f4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 f98e 	bl	8008850 <USBD_CtlError>
            ret = USBD_FAIL;
 8007534:	2303      	movs	r3, #3
 8007536:	75fb      	strb	r3, [r7, #23]
          break;
 8007538:	e05c      	b.n	80075f4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b22      	cmp	r3, #34	; 0x22
 8007544:	d108      	bne.n	8007558 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	88db      	ldrh	r3, [r3, #6]
 800754a:	2b4a      	cmp	r3, #74	; 0x4a
 800754c:	bf28      	it	cs
 800754e:	234a      	movcs	r3, #74	; 0x4a
 8007550:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8007552:	4b2f      	ldr	r3, [pc, #188]	; (8007610 <USBD_HID_Setup+0x200>)
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	e015      	b.n	8007584 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	0a1b      	lsrs	r3, r3, #8
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b21      	cmp	r3, #33	; 0x21
 8007562:	d108      	bne.n	8007576 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8007564:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <USBD_HID_Setup+0x204>)
 8007566:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	88db      	ldrh	r3, [r3, #6]
 800756c:	2b09      	cmp	r3, #9
 800756e:	bf28      	it	cs
 8007570:	2309      	movcs	r3, #9
 8007572:	82bb      	strh	r3, [r7, #20]
 8007574:	e006      	b.n	8007584 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 f969 	bl	8008850 <USBD_CtlError>
            ret = USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	75fb      	strb	r3, [r7, #23]
            break;
 8007582:	e037      	b.n	80075f4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007584:	8abb      	ldrh	r3, [r7, #20]
 8007586:	461a      	mov	r2, r3
 8007588:	6939      	ldr	r1, [r7, #16]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f001 f9d1 	bl	8008932 <USBD_CtlSendData>
          break;
 8007590:	e030      	b.n	80075f4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b03      	cmp	r3, #3
 800759c:	d107      	bne.n	80075ae <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3308      	adds	r3, #8
 80075a2:	2201      	movs	r2, #1
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f9c3 	bl	8008932 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ac:	e022      	b.n	80075f4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f94d 	bl	8008850 <USBD_CtlError>
            ret = USBD_FAIL;
 80075b6:	2303      	movs	r3, #3
 80075b8:	75fb      	strb	r3, [r7, #23]
          break;
 80075ba:	e01b      	b.n	80075f4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d106      	bne.n	80075d6 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	885b      	ldrh	r3, [r3, #2]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075d4:	e00e      	b.n	80075f4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f939 	bl	8008850 <USBD_CtlError>
            ret = USBD_FAIL;
 80075de:	2303      	movs	r3, #3
 80075e0:	75fb      	strb	r3, [r7, #23]
          break;
 80075e2:	e007      	b.n	80075f4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f932 	bl	8008850 <USBD_CtlError>
          ret = USBD_FAIL;
 80075ec:	2303      	movs	r3, #3
 80075ee:	75fb      	strb	r3, [r7, #23]
          break;
 80075f0:	e000      	b.n	80075f4 <USBD_HID_Setup+0x1e4>
          break;
 80075f2:	bf00      	nop
      }
      break;
 80075f4:	e006      	b.n	8007604 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f929 	bl	8008850 <USBD_CtlError>
      ret = USBD_FAIL;
 80075fe:	2303      	movs	r3, #3
 8007600:	75fb      	strb	r3, [r7, #23]
      break;
 8007602:	bf00      	nop
  }

  return (uint8_t)ret;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200000c8 	.word	0x200000c8
 8007614:	200000b0 	.word	0x200000b0

08007618 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800762c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8007634:	2303      	movs	r3, #3
 8007636:	e013      	b.n	8007660 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b03      	cmp	r3, #3
 8007642:	d10c      	bne.n	800765e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	7b1b      	ldrb	r3, [r3, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d108      	bne.n	800765e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2201      	movs	r2, #1
 8007650:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	2181      	movs	r1, #129	; 0x81
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f001 fd90 	bl	800917e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2222      	movs	r2, #34	; 0x22
 8007674:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8007676:	4b03      	ldr	r3, [pc, #12]	; (8007684 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	20000044 	.word	0x20000044

08007688 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2222      	movs	r2, #34	; 0x22
 8007694:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8007696:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	20000068 	.word	0x20000068

080076a8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2222      	movs	r2, #34	; 0x22
 80076b4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80076b6:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	2000008c 	.word	0x2000008c

080076c8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076da:	2200      	movs	r2, #0
 80076dc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	220a      	movs	r2, #10
 80076f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	200000bc 	.word	0x200000bc

0800770c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	e01f      	b.n	8007764 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	79fa      	ldrb	r2, [r7, #7]
 8007756:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fbdb 	bl	8008f14 <USBD_LL_Init>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d101      	bne.n	8007784 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	e016      	b.n	80077b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	f107 020e 	add.w	r2, r7, #14
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	4602      	mov	r2, r0
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 fbf2 	bl	8008fac <USBD_LL_Start>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80077f4:	2303      	movs	r3, #3
 80077f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	78fa      	ldrb	r2, [r7, #3]
 800780c:	4611      	mov	r1, r2
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007816:	7bfb      	ldrb	r3, [r7, #15]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	4611      	mov	r1, r2
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
  }

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f000 ffba 	bl	80087dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007884:	f003 031f 	and.w	r3, r3, #31
 8007888:	2b02      	cmp	r3, #2
 800788a:	d01a      	beq.n	80078c2 <USBD_LL_SetupStage+0x72>
 800788c:	2b02      	cmp	r3, #2
 800788e:	d822      	bhi.n	80078d6 <USBD_LL_SetupStage+0x86>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <USBD_LL_SetupStage+0x4a>
 8007894:	2b01      	cmp	r3, #1
 8007896:	d00a      	beq.n	80078ae <USBD_LL_SetupStage+0x5e>
 8007898:	e01d      	b.n	80078d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa62 	bl	8007d6c <USBD_StdDevReq>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]
      break;
 80078ac:	e020      	b.n	80078f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fac6 	bl	8007e48 <USBD_StdItfReq>
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
      break;
 80078c0:	e016      	b.n	80078f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fb05 	bl	8007eda <USBD_StdEPReq>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e00c      	b.n	80078f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fbc1 	bl	800906c <USBD_LL_StallEP>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
      break;
 80078ee:	bf00      	nop
  }

  return ret;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b086      	sub	sp, #24
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	460b      	mov	r3, r1
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d138      	bne.n	8007980 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800791c:	2b03      	cmp	r3, #3
 800791e:	d14a      	bne.n	80079b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	429a      	cmp	r2, r3
 800792a:	d913      	bls.n	8007954 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	1ad2      	subs	r2, r2, r3
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	4293      	cmp	r3, r2
 8007944:	bf28      	it	cs
 8007946:	4613      	movcs	r3, r2
 8007948:	461a      	mov	r2, r3
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f001 f81c 	bl	800898a <USBD_CtlContinueRx>
 8007952:	e030      	b.n	80079b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b03      	cmp	r3, #3
 800795e:	d10b      	bne.n	8007978 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f001 f817 	bl	80089ac <USBD_CtlSendStatus>
 800797e:	e01a      	b.n	80079b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b03      	cmp	r3, #3
 800798a:	d114      	bne.n	80079b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	7afa      	ldrb	r2, [r7, #11]
 80079a2:	4611      	mov	r1, r2
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	4798      	blx	r3
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
 80079b4:	e000      	b.n	80079b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	460b      	mov	r3, r1
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079ce:	7afb      	ldrb	r3, [r7, #11]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d16b      	bne.n	8007aac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3314      	adds	r3, #20
 80079d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d156      	bne.n	8007a92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d914      	bls.n	8007a1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	1ad2      	subs	r2, r2, r3
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	461a      	mov	r2, r3
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 ffae 	bl	8008968 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2100      	movs	r1, #0
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f001 fbd4 	bl	80091c0 <USBD_LL_PrepareReceive>
 8007a18:	e03b      	b.n	8007a92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d11c      	bne.n	8007a60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d316      	bcc.n	8007a60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d20f      	bcs.n	8007a60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a40:	2200      	movs	r2, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 ff8f 	bl	8008968 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a52:	2300      	movs	r3, #0
 8007a54:	2200      	movs	r2, #0
 8007a56:	2100      	movs	r1, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f001 fbb1 	bl	80091c0 <USBD_LL_PrepareReceive>
 8007a5e:	e018      	b.n	8007a92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d10b      	bne.n	8007a84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a84:	2180      	movs	r1, #128	; 0x80
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f001 faf0 	bl	800906c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 ffa0 	bl	80089d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d122      	bne.n	8007ae2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff fe98 	bl	80077d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007aaa:	e01a      	b.n	8007ae2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d114      	bne.n	8007ae2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00e      	beq.n	8007ae2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	7afa      	ldrb	r2, [r7, #11]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	4798      	blx	r3
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007ade:	7dfb      	ldrb	r3, [r7, #23]
 8007ae0:	e000      	b.n	8007ae4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e02f      	b.n	8007b80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d009      	beq.n	8007b4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	6852      	ldr	r2, [r2, #4]
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	4611      	mov	r1, r2
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b4a:	2340      	movs	r3, #64	; 0x40
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fa46 	bl	8008fe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2240      	movs	r2, #64	; 0x40
 8007b62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b66:	2340      	movs	r3, #64	; 0x40
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2180      	movs	r1, #128	; 0x80
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 fa38 	bl	8008fe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2240      	movs	r2, #64	; 0x40
 8007b7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d106      	bne.n	8007bf6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e012      	b.n	8007c40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d10b      	bne.n	8007c3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e014      	b.n	8007c8c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d10d      	bne.n	8007c8a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	4611      	mov	r1, r2
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e014      	b.n	8007cd8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d10d      	bne.n	8007cd6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d009      	beq.n	8007d24 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6852      	ldr	r2, [r2, #4]
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	4611      	mov	r1, r2
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
  }

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	3301      	adds	r3, #1
 8007d44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d4c:	8a3b      	ldrh	r3, [r7, #16]
 8007d4e:	021b      	lsls	r3, r3, #8
 8007d50:	b21a      	sxth	r2, r3
 8007d52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b21b      	sxth	r3, r3
 8007d5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
	...

08007d6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d005      	beq.n	8007d92 <USBD_StdDevReq+0x26>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d853      	bhi.n	8007e32 <USBD_StdDevReq+0xc6>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <USBD_StdDevReq+0x3a>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d14f      	bne.n	8007e32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	e04a      	b.n	8007e3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	785b      	ldrb	r3, [r3, #1]
 8007daa:	2b09      	cmp	r3, #9
 8007dac:	d83b      	bhi.n	8007e26 <USBD_StdDevReq+0xba>
 8007dae:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <USBD_StdDevReq+0x48>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007e1d 	.word	0x08007e1d
 8007dbc:	08007e27 	.word	0x08007e27
 8007dc0:	08007e13 	.word	0x08007e13
 8007dc4:	08007e27 	.word	0x08007e27
 8007dc8:	08007de7 	.word	0x08007de7
 8007dcc:	08007ddd 	.word	0x08007ddd
 8007dd0:	08007e27 	.word	0x08007e27
 8007dd4:	08007dff 	.word	0x08007dff
 8007dd8:	08007df1 	.word	0x08007df1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9de 	bl	80081a0 <USBD_GetDescriptor>
          break;
 8007de4:	e024      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fb6d 	bl	80084c8 <USBD_SetAddress>
          break;
 8007dee:	e01f      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fbac 	bl	8008550 <USBD_SetConfig>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]
          break;
 8007dfc:	e018      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dfe:	6839      	ldr	r1, [r7, #0]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fc4b 	bl	800869c <USBD_GetConfig>
          break;
 8007e06:	e013      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc7c 	bl	8008708 <USBD_GetStatus>
          break;
 8007e10:	e00e      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fcab 	bl	8008770 <USBD_SetFeature>
          break;
 8007e1a:	e009      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fcba 	bl	8008798 <USBD_ClrFeature>
          break;
 8007e24:	e004      	b.n	8007e30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fd11 	bl	8008850 <USBD_CtlError>
          break;
 8007e2e:	bf00      	nop
      }
      break;
 8007e30:	e004      	b.n	8007e3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fd0b 	bl	8008850 <USBD_CtlError>
      break;
 8007e3a:	bf00      	nop
  }

  return ret;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop

08007e48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e5e:	2b40      	cmp	r3, #64	; 0x40
 8007e60:	d005      	beq.n	8007e6e <USBD_StdItfReq+0x26>
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d82f      	bhi.n	8007ec6 <USBD_StdItfReq+0x7e>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <USBD_StdItfReq+0x26>
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d12b      	bne.n	8007ec6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d81d      	bhi.n	8007eb8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	889b      	ldrh	r3, [r3, #4]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d813      	bhi.n	8007eae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	88db      	ldrh	r3, [r3, #6]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d110      	bne.n	8007ec2 <USBD_StdItfReq+0x7a>
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10d      	bne.n	8007ec2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fd80 	bl	80089ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007eac:	e009      	b.n	8007ec2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fccd 	bl	8008850 <USBD_CtlError>
          break;
 8007eb6:	e004      	b.n	8007ec2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fcc8 	bl	8008850 <USBD_CtlError>
          break;
 8007ec0:	e000      	b.n	8007ec4 <USBD_StdItfReq+0x7c>
          break;
 8007ec2:	bf00      	nop
      }
      break;
 8007ec4:	e004      	b.n	8007ed0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fcc1 	bl	8008850 <USBD_CtlError>
      break;
 8007ece:	bf00      	nop
  }

  return ret;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	889b      	ldrh	r3, [r3, #4]
 8007eec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ef6:	2b40      	cmp	r3, #64	; 0x40
 8007ef8:	d007      	beq.n	8007f0a <USBD_StdEPReq+0x30>
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	f200 8145 	bhi.w	800818a <USBD_StdEPReq+0x2b0>
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00c      	beq.n	8007f1e <USBD_StdEPReq+0x44>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	f040 8140 	bne.w	800818a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	e13a      	b.n	8008194 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d007      	beq.n	8007f36 <USBD_StdEPReq+0x5c>
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	f300 8129 	bgt.w	800817e <USBD_StdEPReq+0x2a4>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d07f      	beq.n	8008030 <USBD_StdEPReq+0x156>
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d03c      	beq.n	8007fae <USBD_StdEPReq+0xd4>
 8007f34:	e123      	b.n	800817e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d002      	beq.n	8007f48 <USBD_StdEPReq+0x6e>
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d016      	beq.n	8007f74 <USBD_StdEPReq+0x9a>
 8007f46:	e02c      	b.n	8007fa2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <USBD_StdEPReq+0x90>
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d00a      	beq.n	8007f6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f887 	bl	800906c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f883 	bl	800906c <USBD_LL_StallEP>
 8007f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f68:	e020      	b.n	8007fac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc6f 	bl	8008850 <USBD_CtlError>
              break;
 8007f72:	e01b      	b.n	8007fac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	885b      	ldrh	r3, [r3, #2]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10e      	bne.n	8007f9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <USBD_StdEPReq+0xc0>
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b80      	cmp	r3, #128	; 0x80
 8007f86:	d008      	beq.n	8007f9a <USBD_StdEPReq+0xc0>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d104      	bne.n	8007f9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 f869 	bl	800906c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fd06 	bl	80089ac <USBD_CtlSendStatus>

              break;
 8007fa0:	e004      	b.n	8007fac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fc53 	bl	8008850 <USBD_CtlError>
              break;
 8007faa:	bf00      	nop
          }
          break;
 8007fac:	e0ec      	b.n	8008188 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d002      	beq.n	8007fc0 <USBD_StdEPReq+0xe6>
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d016      	beq.n	8007fec <USBD_StdEPReq+0x112>
 8007fbe:	e030      	b.n	8008022 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00d      	beq.n	8007fe2 <USBD_StdEPReq+0x108>
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b80      	cmp	r3, #128	; 0x80
 8007fca:	d00a      	beq.n	8007fe2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f84b 	bl	800906c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fd6:	2180      	movs	r1, #128	; 0x80
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f847 	bl	800906c <USBD_LL_StallEP>
 8007fde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fe0:	e025      	b.n	800802e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fc33 	bl	8008850 <USBD_CtlError>
              break;
 8007fea:	e020      	b.n	800802e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	885b      	ldrh	r3, [r3, #2]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11b      	bne.n	800802c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f851 	bl	80090aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fccf 	bl	80089ac <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008020:	e004      	b.n	800802c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc13 	bl	8008850 <USBD_CtlError>
              break;
 800802a:	e000      	b.n	800802e <USBD_StdEPReq+0x154>
              break;
 800802c:	bf00      	nop
          }
          break;
 800802e:	e0ab      	b.n	8008188 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d002      	beq.n	8008042 <USBD_StdEPReq+0x168>
 800803c:	2b03      	cmp	r3, #3
 800803e:	d032      	beq.n	80080a6 <USBD_StdEPReq+0x1cc>
 8008040:	e097      	b.n	8008172 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d007      	beq.n	8008058 <USBD_StdEPReq+0x17e>
 8008048:	7bbb      	ldrb	r3, [r7, #14]
 800804a:	2b80      	cmp	r3, #128	; 0x80
 800804c:	d004      	beq.n	8008058 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fbfd 	bl	8008850 <USBD_CtlError>
                break;
 8008056:	e091      	b.n	800817c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800805c:	2b00      	cmp	r3, #0
 800805e:	da0b      	bge.n	8008078 <USBD_StdEPReq+0x19e>
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	3310      	adds	r3, #16
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4413      	add	r3, r2
 8008074:	3304      	adds	r3, #4
 8008076:	e00b      	b.n	8008090 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800807e:	4613      	mov	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2202      	movs	r2, #2
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fc47 	bl	8008932 <USBD_CtlSendData>
              break;
 80080a4:	e06a      	b.n	800817c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da11      	bge.n	80080d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	f003 020f 	and.w	r2, r3, #15
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	3324      	adds	r3, #36	; 0x24
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d117      	bne.n	80080f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fbc0 	bl	8008850 <USBD_CtlError>
                  break;
 80080d0:	e054      	b.n	800817c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	f003 020f 	and.w	r2, r3, #15
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d104      	bne.n	80080f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fbad 	bl	8008850 <USBD_CtlError>
                  break;
 80080f6:	e041      	b.n	800817c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	da0b      	bge.n	8008118 <USBD_StdEPReq+0x23e>
 8008100:	7bbb      	ldrb	r3, [r7, #14]
 8008102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008106:	4613      	mov	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	3310      	adds	r3, #16
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	4413      	add	r3, r2
 8008114:	3304      	adds	r3, #4
 8008116:	e00b      	b.n	8008130 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4413      	add	r3, r2
 800812e:	3304      	adds	r3, #4
 8008130:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <USBD_StdEPReq+0x264>
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d103      	bne.n	8008146 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e00e      	b.n	8008164 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 ffcc 	bl	80090e8 <USBD_LL_IsStallEP>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2201      	movs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e002      	b.n	8008164 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	2202      	movs	r2, #2
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fbe1 	bl	8008932 <USBD_CtlSendData>
              break;
 8008170:	e004      	b.n	800817c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fb6b 	bl	8008850 <USBD_CtlError>
              break;
 800817a:	bf00      	nop
          }
          break;
 800817c:	e004      	b.n	8008188 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fb65 	bl	8008850 <USBD_CtlError>
          break;
 8008186:	bf00      	nop
      }
      break;
 8008188:	e004      	b.n	8008194 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fb5f 	bl	8008850 <USBD_CtlError>
      break;
 8008192:	bf00      	nop
  }

  return ret;
 8008194:	7bfb      	ldrb	r3, [r7, #15]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
	...

080081a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	0a1b      	lsrs	r3, r3, #8
 80081bc:	b29b      	uxth	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	2b0e      	cmp	r3, #14
 80081c2:	f200 8152 	bhi.w	800846a <USBD_GetDescriptor+0x2ca>
 80081c6:	a201      	add	r2, pc, #4	; (adr r2, 80081cc <USBD_GetDescriptor+0x2c>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	0800823d 	.word	0x0800823d
 80081d0:	08008255 	.word	0x08008255
 80081d4:	08008295 	.word	0x08008295
 80081d8:	0800846b 	.word	0x0800846b
 80081dc:	0800846b 	.word	0x0800846b
 80081e0:	0800840b 	.word	0x0800840b
 80081e4:	08008437 	.word	0x08008437
 80081e8:	0800846b 	.word	0x0800846b
 80081ec:	0800846b 	.word	0x0800846b
 80081f0:	0800846b 	.word	0x0800846b
 80081f4:	0800846b 	.word	0x0800846b
 80081f8:	0800846b 	.word	0x0800846b
 80081fc:	0800846b 	.word	0x0800846b
 8008200:	0800846b 	.word	0x0800846b
 8008204:	08008209 	.word	0x08008209
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00b      	beq.n	800822c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	7c12      	ldrb	r2, [r2, #16]
 8008220:	f107 0108 	add.w	r1, r7, #8
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
 8008228:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800822a:	e126      	b.n	800847a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fb0e 	bl	8008850 <USBD_CtlError>
        err++;
 8008234:	7afb      	ldrb	r3, [r7, #11]
 8008236:	3301      	adds	r3, #1
 8008238:	72fb      	strb	r3, [r7, #11]
      break;
 800823a:	e11e      	b.n	800847a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	7c12      	ldrb	r2, [r2, #16]
 8008248:	f107 0108 	add.w	r1, r7, #8
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
 8008250:	60f8      	str	r0, [r7, #12]
      break;
 8008252:	e112      	b.n	800847a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	7c1b      	ldrb	r3, [r3, #16]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10d      	bne.n	8008278 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008264:	f107 0208 	add.w	r2, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	2202      	movs	r2, #2
 8008274:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008276:	e100      	b.n	800847a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	f107 0208 	add.w	r2, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3301      	adds	r3, #1
 800828e:	2202      	movs	r2, #2
 8008290:	701a      	strb	r2, [r3, #0]
      break;
 8008292:	e0f2      	b.n	800847a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	885b      	ldrh	r3, [r3, #2]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b05      	cmp	r3, #5
 800829c:	f200 80ac 	bhi.w	80083f8 <USBD_GetDescriptor+0x258>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBD_GetDescriptor+0x108>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082c1 	.word	0x080082c1
 80082ac:	080082f5 	.word	0x080082f5
 80082b0:	08008329 	.word	0x08008329
 80082b4:	0800835d 	.word	0x0800835d
 80082b8:	08008391 	.word	0x08008391
 80082bc:	080083c5 	.word	0x080083c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00b      	beq.n	80082e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7c12      	ldrb	r2, [r2, #16]
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	4610      	mov	r0, r2
 80082de:	4798      	blx	r3
 80082e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082e2:	e091      	b.n	8008408 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fab2 	bl	8008850 <USBD_CtlError>
            err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
          break;
 80082f2:	e089      	b.n	8008408 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008316:	e077      	b.n	8008408 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fa98 	bl	8008850 <USBD_CtlError>
            err++;
 8008320:	7afb      	ldrb	r3, [r7, #11]
 8008322:	3301      	adds	r3, #1
 8008324:	72fb      	strb	r3, [r7, #11]
          break;
 8008326:	e06f      	b.n	8008408 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	7c12      	ldrb	r2, [r2, #16]
 8008340:	f107 0108 	add.w	r1, r7, #8
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
 8008348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834a:	e05d      	b.n	8008408 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fa7e 	bl	8008850 <USBD_CtlError>
            err++;
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	3301      	adds	r3, #1
 8008358:	72fb      	strb	r3, [r7, #11]
          break;
 800835a:	e055      	b.n	8008408 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00b      	beq.n	8008380 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	7c12      	ldrb	r2, [r2, #16]
 8008374:	f107 0108 	add.w	r1, r7, #8
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
 800837c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837e:	e043      	b.n	8008408 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa64 	bl	8008850 <USBD_CtlError>
            err++;
 8008388:	7afb      	ldrb	r3, [r7, #11]
 800838a:	3301      	adds	r3, #1
 800838c:	72fb      	strb	r3, [r7, #11]
          break;
 800838e:	e03b      	b.n	8008408 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	7c12      	ldrb	r2, [r2, #16]
 80083a8:	f107 0108 	add.w	r1, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b2:	e029      	b.n	8008408 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083b4:	6839      	ldr	r1, [r7, #0]
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa4a 	bl	8008850 <USBD_CtlError>
            err++;
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	3301      	adds	r3, #1
 80083c0:	72fb      	strb	r3, [r7, #11]
          break;
 80083c2:	e021      	b.n	8008408 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	7c12      	ldrb	r2, [r2, #16]
 80083dc:	f107 0108 	add.w	r1, r7, #8
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083e6:	e00f      	b.n	8008408 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa30 	bl	8008850 <USBD_CtlError>
            err++;
 80083f0:	7afb      	ldrb	r3, [r7, #11]
 80083f2:	3301      	adds	r3, #1
 80083f4:	72fb      	strb	r3, [r7, #11]
          break;
 80083f6:	e007      	b.n	8008408 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa28 	bl	8008850 <USBD_CtlError>
          err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008406:	bf00      	nop
      }
      break;
 8008408:	e037      	b.n	800847a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7c1b      	ldrb	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	f107 0208 	add.w	r2, r7, #8
 800841e:	4610      	mov	r0, r2
 8008420:	4798      	blx	r3
 8008422:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008424:	e029      	b.n	800847a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa11 	bl	8008850 <USBD_CtlError>
        err++;
 800842e:	7afb      	ldrb	r3, [r7, #11]
 8008430:	3301      	adds	r3, #1
 8008432:	72fb      	strb	r3, [r7, #11]
      break;
 8008434:	e021      	b.n	800847a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7c1b      	ldrb	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10d      	bne.n	800845a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	f107 0208 	add.w	r2, r7, #8
 800844a:	4610      	mov	r0, r2
 800844c:	4798      	blx	r3
 800844e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3301      	adds	r3, #1
 8008454:	2207      	movs	r2, #7
 8008456:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008458:	e00f      	b.n	800847a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f9f7 	bl	8008850 <USBD_CtlError>
        err++;
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	3301      	adds	r3, #1
 8008466:	72fb      	strb	r3, [r7, #11]
      break;
 8008468:	e007      	b.n	800847a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f9ef 	bl	8008850 <USBD_CtlError>
      err++;
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	3301      	adds	r3, #1
 8008476:	72fb      	strb	r3, [r7, #11]
      break;
 8008478:	bf00      	nop
  }

  if (err != 0U)
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d11e      	bne.n	80084be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	88db      	ldrh	r3, [r3, #6]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d016      	beq.n	80084b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008488:	893b      	ldrh	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	88da      	ldrh	r2, [r3, #6]
 8008492:	893b      	ldrh	r3, [r7, #8]
 8008494:	4293      	cmp	r3, r2
 8008496:	bf28      	it	cs
 8008498:	4613      	movcs	r3, r2
 800849a:	b29b      	uxth	r3, r3
 800849c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800849e:	893b      	ldrh	r3, [r7, #8]
 80084a0:	461a      	mov	r2, r3
 80084a2:	68f9      	ldr	r1, [r7, #12]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fa44 	bl	8008932 <USBD_CtlSendData>
 80084aa:	e009      	b.n	80084c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9ce 	bl	8008850 <USBD_CtlError>
 80084b4:	e004      	b.n	80084c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa78 	bl	80089ac <USBD_CtlSendStatus>
 80084bc:	e000      	b.n	80084c0 <USBD_GetDescriptor+0x320>
    return;
 80084be:	bf00      	nop
  }
}
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop

080084c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	889b      	ldrh	r3, [r3, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d131      	bne.n	800853e <USBD_SetAddress+0x76>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	88db      	ldrh	r3, [r3, #6]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12d      	bne.n	800853e <USBD_SetAddress+0x76>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	885b      	ldrh	r3, [r3, #2]
 80084e6:	2b7f      	cmp	r3, #127	; 0x7f
 80084e8:	d829      	bhi.n	800853e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	885b      	ldrh	r3, [r3, #2]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d104      	bne.n	800850c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f9a3 	bl	8008850 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850a:	e01d      	b.n	8008548 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7bfa      	ldrb	r2, [r7, #15]
 8008510:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fe11 	bl	8009140 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa44 	bl	80089ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2202      	movs	r2, #2
 800852e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008532:	e009      	b.n	8008548 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853c:	e004      	b.n	8008548 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f985 	bl	8008850 <USBD_CtlError>
  }
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	885b      	ldrh	r3, [r3, #2]
 8008562:	b2da      	uxtb	r2, r3
 8008564:	4b4c      	ldr	r3, [pc, #304]	; (8008698 <USBD_SetConfig+0x148>)
 8008566:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008568:	4b4b      	ldr	r3, [pc, #300]	; (8008698 <USBD_SetConfig+0x148>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d905      	bls.n	800857c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f96c 	bl	8008850 <USBD_CtlError>
    return USBD_FAIL;
 8008578:	2303      	movs	r3, #3
 800857a:	e088      	b.n	800868e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b02      	cmp	r3, #2
 8008586:	d002      	beq.n	800858e <USBD_SetConfig+0x3e>
 8008588:	2b03      	cmp	r3, #3
 800858a:	d025      	beq.n	80085d8 <USBD_SetConfig+0x88>
 800858c:	e071      	b.n	8008672 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800858e:	4b42      	ldr	r3, [pc, #264]	; (8008698 <USBD_SetConfig+0x148>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d01c      	beq.n	80085d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008596:	4b40      	ldr	r3, [pc, #256]	; (8008698 <USBD_SetConfig+0x148>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085a0:	4b3d      	ldr	r3, [pc, #244]	; (8008698 <USBD_SetConfig+0x148>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7ff f91e 	bl	80077e8 <USBD_SetClassConfig>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d004      	beq.n	80085c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f949 	bl	8008850 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085be:	e065      	b.n	800868c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f9f3 	bl	80089ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2203      	movs	r2, #3
 80085ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085ce:	e05d      	b.n	800868c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f9eb 	bl	80089ac <USBD_CtlSendStatus>
      break;
 80085d6:	e059      	b.n	800868c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085d8:	4b2f      	ldr	r3, [pc, #188]	; (8008698 <USBD_SetConfig+0x148>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d112      	bne.n	8008606 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085e8:	4b2b      	ldr	r3, [pc, #172]	; (8008698 <USBD_SetConfig+0x148>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085f2:	4b29      	ldr	r3, [pc, #164]	; (8008698 <USBD_SetConfig+0x148>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff f911 	bl	8007820 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f9d4 	bl	80089ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008604:	e042      	b.n	800868c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008606:	4b24      	ldr	r3, [pc, #144]	; (8008698 <USBD_SetConfig+0x148>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d02a      	beq.n	800866a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff f8ff 	bl	8007820 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <USBD_SetConfig+0x148>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800862c:	4b1a      	ldr	r3, [pc, #104]	; (8008698 <USBD_SetConfig+0x148>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff f8d8 	bl	80077e8 <USBD_SetClassConfig>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00f      	beq.n	8008662 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f903 	bl	8008850 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff f8e4 	bl	8007820 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008660:	e014      	b.n	800868c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f9a2 	bl	80089ac <USBD_CtlSendStatus>
      break;
 8008668:	e010      	b.n	800868c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f99e 	bl	80089ac <USBD_CtlSendStatus>
      break;
 8008670:	e00c      	b.n	800868c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f8eb 	bl	8008850 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <USBD_SetConfig+0x148>)
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7ff f8cd 	bl	8007820 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008686:	2303      	movs	r3, #3
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	bf00      	nop
  }

  return ret;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000656 	.word	0x20000656

0800869c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	88db      	ldrh	r3, [r3, #6]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d004      	beq.n	80086b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8cd 	bl	8008850 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086b6:	e023      	b.n	8008700 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	dc02      	bgt.n	80086ca <USBD_GetConfig+0x2e>
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dc03      	bgt.n	80086d0 <USBD_GetConfig+0x34>
 80086c8:	e015      	b.n	80086f6 <USBD_GetConfig+0x5a>
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d00b      	beq.n	80086e6 <USBD_GetConfig+0x4a>
 80086ce:	e012      	b.n	80086f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3308      	adds	r3, #8
 80086da:	2201      	movs	r2, #1
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f927 	bl	8008932 <USBD_CtlSendData>
        break;
 80086e4:	e00c      	b.n	8008700 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3304      	adds	r3, #4
 80086ea:	2201      	movs	r2, #1
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f91f 	bl	8008932 <USBD_CtlSendData>
        break;
 80086f4:	e004      	b.n	8008700 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f8a9 	bl	8008850 <USBD_CtlError>
        break;
 80086fe:	bf00      	nop
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	3b01      	subs	r3, #1
 800871c:	2b02      	cmp	r3, #2
 800871e:	d81e      	bhi.n	800875e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	88db      	ldrh	r3, [r3, #6]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d004      	beq.n	8008732 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f890 	bl	8008850 <USBD_CtlError>
        break;
 8008730:	e01a      	b.n	8008768 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f043 0202 	orr.w	r2, r3, #2
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	330c      	adds	r3, #12
 8008752:	2202      	movs	r2, #2
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f8eb 	bl	8008932 <USBD_CtlSendData>
      break;
 800875c:	e004      	b.n	8008768 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f875 	bl	8008850 <USBD_CtlError>
      break;
 8008766:	bf00      	nop
  }
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d106      	bne.n	8008790 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f90e 	bl	80089ac <USBD_CtlSendStatus>
  }
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d80b      	bhi.n	80087c8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	885b      	ldrh	r3, [r3, #2]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d10c      	bne.n	80087d2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f8f3 	bl	80089ac <USBD_CtlSendStatus>
      }
      break;
 80087c6:	e004      	b.n	80087d2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f840 	bl	8008850 <USBD_CtlError>
      break;
 80087d0:	e000      	b.n	80087d4 <USBD_ClrFeature+0x3c>
      break;
 80087d2:	bf00      	nop
  }
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3301      	adds	r3, #1
 80087f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	781a      	ldrb	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3301      	adds	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fa91 	bl	8007d2e <SWAPBYTE>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff fa84 	bl	8007d2e <SWAPBYTE>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f7ff fa77 	bl	8007d2e <SWAPBYTE>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	80da      	strh	r2, [r3, #6]
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800885a:	2180      	movs	r1, #128	; 0x80
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fc05 	bl	800906c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fc01 	bl	800906c <USBD_LL_StallEP>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	60f8      	str	r0, [r7, #12]
 800887a:	60b9      	str	r1, [r7, #8]
 800887c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d036      	beq.n	80088f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800888c:	6938      	ldr	r0, [r7, #16]
 800888e:	f000 f836 	bl	80088fe <USBD_GetLen>
 8008892:	4603      	mov	r3, r0
 8008894:	3301      	adds	r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	7812      	ldrb	r2, [r2, #0]
 80088aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	3301      	adds	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	4413      	add	r3, r2
 80088b8:	2203      	movs	r2, #3
 80088ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	3301      	adds	r3, #1
 80088c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088c2:	e013      	b.n	80088ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	4413      	add	r3, r2
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	7812      	ldrb	r2, [r2, #0]
 80088ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	3301      	adds	r3, #1
 80088d4:	613b      	str	r3, [r7, #16]
    idx++;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	3301      	adds	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e7      	bne.n	80088c4 <USBD_GetString+0x52>
 80088f4:	e000      	b.n	80088f8 <USBD_GetString+0x86>
    return;
 80088f6:	bf00      	nop
  }
}
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800890e:	e005      	b.n	800891c <USBD_GetLen+0x1e>
  {
    len++;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	3301      	adds	r3, #1
 8008914:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	3301      	adds	r3, #1
 800891a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f5      	bne.n	8008910 <USBD_GetLen+0x12>
  }

  return len;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2202      	movs	r2, #2
 8008942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	2100      	movs	r1, #0
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fc10 	bl	800917e <USBD_LL_Transmit>

  return USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	2100      	movs	r1, #0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fbff 	bl	800917e <USBD_LL_Transmit>

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	2100      	movs	r1, #0
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 fc0f 	bl	80091c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2204      	movs	r2, #4
 80089b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089bc:	2300      	movs	r3, #0
 80089be:	2200      	movs	r2, #0
 80089c0:	2100      	movs	r1, #0
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fbdb 	bl	800917e <USBD_LL_Transmit>

  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2205      	movs	r2, #5
 80089de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089e2:	2300      	movs	r3, #0
 80089e4:	2200      	movs	r2, #0
 80089e6:	2100      	movs	r1, #0
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbe9 	bl	80091c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089fc:	2200      	movs	r2, #0
 80089fe:	490e      	ldr	r1, [pc, #56]	; (8008a38 <MX_USB_DEVICE_Init+0x40>)
 8008a00:	480e      	ldr	r0, [pc, #56]	; (8008a3c <MX_USB_DEVICE_Init+0x44>)
 8008a02:	f7fe fe83 	bl	800770c <USBD_Init>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a0c:	f7f8 fcfe 	bl	800140c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008a10:	490b      	ldr	r1, [pc, #44]	; (8008a40 <MX_USB_DEVICE_Init+0x48>)
 8008a12:	480a      	ldr	r0, [pc, #40]	; (8008a3c <MX_USB_DEVICE_Init+0x44>)
 8008a14:	f7fe feaa 	bl	800776c <USBD_RegisterClass>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a1e:	f7f8 fcf5 	bl	800140c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a22:	4806      	ldr	r0, [pc, #24]	; (8008a3c <MX_USB_DEVICE_Init+0x44>)
 8008a24:	f7fe fec9 	bl	80077ba <USBD_Start>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a2e:	f7f8 fced 	bl	800140c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a32:	bf00      	nop
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000114 	.word	0x20000114
 8008a3c:	20000678 	.word	0x20000678
 8008a40:	2000000c 	.word	0x2000000c

08008a44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6039      	str	r1, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2212      	movs	r2, #18
 8008a54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a56:	4b03      	ldr	r3, [pc, #12]	; (8008a64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20000134 	.word	0x20000134

08008a68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2204      	movs	r2, #4
 8008a78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a7a:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	20000154 	.word	0x20000154

08008a8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4907      	ldr	r1, [pc, #28]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008aa2:	4808      	ldr	r0, [pc, #32]	; (8008ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008aa4:	f7ff fee5 	bl	8008872 <USBD_GetString>
 8008aa8:	e004      	b.n	8008ab4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4904      	ldr	r1, [pc, #16]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008aae:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ab0:	f7ff fedf 	bl	8008872 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000948 	.word	0x20000948
 8008ac4:	0800f744 	.word	0x0800f744

08008ac8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	4904      	ldr	r1, [pc, #16]	; (8008ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ad8:	4804      	ldr	r0, [pc, #16]	; (8008aec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ada:	f7ff feca 	bl	8008872 <USBD_GetString>
  return USBD_StrDesc;
 8008ade:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20000948 	.word	0x20000948
 8008aec:	0800f75c 	.word	0x0800f75c

08008af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	221a      	movs	r2, #26
 8008b00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b02:	f000 f855 	bl	8008bb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b06:	4b02      	ldr	r3, [pc, #8]	; (8008b10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000158 	.word	0x20000158

08008b14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d105      	bne.n	8008b32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	4907      	ldr	r1, [pc, #28]	; (8008b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b2a:	4808      	ldr	r0, [pc, #32]	; (8008b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b2c:	f7ff fea1 	bl	8008872 <USBD_GetString>
 8008b30:	e004      	b.n	8008b3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	4904      	ldr	r1, [pc, #16]	; (8008b48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b36:	4805      	ldr	r0, [pc, #20]	; (8008b4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b38:	f7ff fe9b 	bl	8008872 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b3c:	4b02      	ldr	r3, [pc, #8]	; (8008b48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000948 	.word	0x20000948
 8008b4c:	0800f770 	.word	0x0800f770

08008b50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d105      	bne.n	8008b6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	4907      	ldr	r1, [pc, #28]	; (8008b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b66:	4808      	ldr	r0, [pc, #32]	; (8008b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b68:	f7ff fe83 	bl	8008872 <USBD_GetString>
 8008b6c:	e004      	b.n	8008b78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	4904      	ldr	r1, [pc, #16]	; (8008b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b72:	4805      	ldr	r0, [pc, #20]	; (8008b88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b74:	f7ff fe7d 	bl	8008872 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b78:	4b02      	ldr	r3, [pc, #8]	; (8008b84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20000948 	.word	0x20000948
 8008b88:	0800f77c 	.word	0x0800f77c

08008b8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	220c      	movs	r2, #12
 8008b9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008b9e:	4b03      	ldr	r3, [pc, #12]	; (8008bac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	20000148 	.word	0x20000148

08008bb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <Get_SerialNum+0x44>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bbc:	4b0e      	ldr	r3, [pc, #56]	; (8008bf8 <Get_SerialNum+0x48>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bc2:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <Get_SerialNum+0x4c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bd6:	2208      	movs	r2, #8
 8008bd8:	4909      	ldr	r1, [pc, #36]	; (8008c00 <Get_SerialNum+0x50>)
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f814 	bl	8008c08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008be0:	2204      	movs	r2, #4
 8008be2:	4908      	ldr	r1, [pc, #32]	; (8008c04 <Get_SerialNum+0x54>)
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f000 f80f 	bl	8008c08 <IntToUnicode>
  }
}
 8008bea:	bf00      	nop
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	1fff7a10 	.word	0x1fff7a10
 8008bf8:	1fff7a14 	.word	0x1fff7a14
 8008bfc:	1fff7a18 	.word	0x1fff7a18
 8008c00:	2000015a 	.word	0x2000015a
 8008c04:	2000016a 	.word	0x2000016a

08008c08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
 8008c1e:	e027      	b.n	8008c70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0f1b      	lsrs	r3, r3, #28
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d80b      	bhi.n	8008c40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	0f1b      	lsrs	r3, r3, #28
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	4619      	mov	r1, r3
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	440b      	add	r3, r1
 8008c38:	3230      	adds	r2, #48	; 0x30
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	e00a      	b.n	8008c56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0f1b      	lsrs	r3, r3, #28
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	440b      	add	r3, r1
 8008c50:	3237      	adds	r2, #55	; 0x37
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	3301      	adds	r3, #1
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	4413      	add	r3, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	75fb      	strb	r3, [r7, #23]
 8008c70:	7dfa      	ldrb	r2, [r7, #23]
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d3d3      	bcc.n	8008c20 <IntToUnicode+0x18>
  }
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	609a      	str	r2, [r3, #8]
 8008c9c:	60da      	str	r2, [r3, #12]
 8008c9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ca8:	d13a      	bne.n	8008d20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb2:	4a1d      	ldr	r2, [pc, #116]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cb4:	f043 0301 	orr.w	r3, r3, #1
 8008cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008cc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cd8:	230a      	movs	r3, #10
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cdc:	f107 0314 	add.w	r3, r7, #20
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4812      	ldr	r0, [pc, #72]	; (8008d2c <HAL_PCD_MspInit+0xa4>)
 8008ce4:	f7f9 fad0 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ce8:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cec:	4a0e      	ldr	r2, [pc, #56]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf2:	6353      	str	r3, [r2, #52]	; 0x34
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfc:	4a0a      	ldr	r2, [pc, #40]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d02:	6453      	str	r3, [r2, #68]	; 0x44
 8008d04:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <HAL_PCD_MspInit+0xa0>)
 8008d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d0c:	60fb      	str	r3, [r7, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d10:	2200      	movs	r2, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	2043      	movs	r0, #67	; 0x43
 8008d16:	f7f9 fa64 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d1a:	2043      	movs	r0, #67	; 0x43
 8008d1c:	f7f9 fa7d 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d20:	bf00      	nop
 8008d22:	3728      	adds	r7, #40	; 0x28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40023800 	.word	0x40023800
 8008d2c:	40020000 	.word	0x40020000

08008d30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d44:	4619      	mov	r1, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	f7fe fd82 	bl	8007850 <USBD_LL_SetupStage>
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	440b      	add	r3, r1
 8008d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7fe fdbc 	bl	80078fa <USBD_LL_DataOutStage>
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	3348      	adds	r3, #72	; 0x48
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	4619      	mov	r1, r3
 8008db2:	f7fe fe05 	bl	80079c0 <USBD_LL_DataInStage>
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe ff19 	bl	8007c04 <USBD_LL_SOF>
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008de2:	2301      	movs	r3, #1
 8008de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
 8008df2:	e008      	b.n	8008e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d102      	bne.n	8008e02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	e001      	b.n	8008e06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008e02:	f7f8 fb03 	bl	800140c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e0c:	7bfa      	ldrb	r2, [r7, #15]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe feb9 	bl	8007b88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fe65 	bl	8007aec <USBD_LL_Reset>
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe feb4 	bl	8007ba8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6812      	ldr	r2, [r2, #0]
 8008e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <HAL_PCD_SuspendCallback+0x48>)
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <HAL_PCD_SuspendCallback+0x48>)
 8008e66:	f043 0306 	orr.w	r3, r3, #6
 8008e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	e000ed00 	.word	0xe000ed00

08008e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fea4 	bl	8007bd4 <USBD_LL_Resume>
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fef2 	bl	8007c94 <USBD_LL_IsoOUTIncomplete>
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe feba 	bl	8007c48 <USBD_LL_IsoINIncomplete>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fef8 	bl	8007ce0 <USBD_LL_DevConnected>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fef5 	bl	8007cf6 <USBD_LL_DevDisconnected>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d13c      	bne.n	8008f9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f24:	4a20      	ldr	r2, [pc, #128]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f34:	4b1c      	ldr	r3, [pc, #112]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008f3c:	4b1a      	ldr	r3, [pc, #104]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f3e:	2206      	movs	r2, #6
 8008f40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f42:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f44:	2202      	movs	r2, #2
 8008f46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f48:	4b17      	ldr	r3, [pc, #92]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f4e:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f50:	2202      	movs	r2, #2
 8008f52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f54:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f60:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f66:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f72:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f74:	f7f9 fb4d 	bl	8002612 <HAL_PCD_Init>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f7e:	f7f8 fa45 	bl	800140c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	4808      	ldr	r0, [pc, #32]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f86:	f7fa fcc6 	bl	8003916 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f8a:	2240      	movs	r2, #64	; 0x40
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4806      	ldr	r0, [pc, #24]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f90:	f7fa fc7a 	bl	8003888 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f94:	2280      	movs	r2, #128	; 0x80
 8008f96:	2101      	movs	r1, #1
 8008f98:	4803      	ldr	r0, [pc, #12]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f9a:	f7fa fc75 	bl	8003888 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20000b48 	.word	0x20000b48

08008fac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7f9 fc49 	bl	800285a <HAL_PCD_Start>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f97e 	bl	80092d0 <USBD_Get_USB_Status>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	70fb      	strb	r3, [r7, #3]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70bb      	strb	r3, [r7, #2]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800900a:	78bb      	ldrb	r3, [r7, #2]
 800900c:	883a      	ldrh	r2, [r7, #0]
 800900e:	78f9      	ldrb	r1, [r7, #3]
 8009010:	f7fa f85a 	bl	80030c8 <HAL_PCD_EP_Open>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f958 	bl	80092d0 <USBD_Get_USB_Status>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7fa f8a3 	bl	8003198 <HAL_PCD_EP_Close>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f939 	bl	80092d0 <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7fa f963 	bl	8003356 <HAL_PCD_EP_SetStall>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f91a 	bl	80092d0 <USBD_Get_USB_Status>
 800909c:	4603      	mov	r3, r0
 800909e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fa f9a8 	bl	800341e <HAL_PCD_EP_ClrStall>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8fb 	bl	80092d0 <USBD_Get_USB_Status>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090de:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009100:	2b00      	cmp	r3, #0
 8009102:	da0b      	bge.n	800911c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	4613      	mov	r3, r2
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	333e      	adds	r3, #62	; 0x3e
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	e00b      	b.n	8009134 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009132:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7f9 ff8d 	bl	800307e <HAL_PCD_SetAddress>
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4618      	mov	r0, r3
 800916c:	f000 f8b0 	bl	80092d0 <USBD_Get_USB_Status>
 8009170:	4603      	mov	r3, r0
 8009172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009174:	7bbb      	ldrb	r3, [r7, #14]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	460b      	mov	r3, r1
 800918c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800919c:	7af9      	ldrb	r1, [r7, #11]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	f7fa f88e 	bl	80032c2 <HAL_PCD_EP_Transmit>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f88f 	bl	80092d0 <USBD_Get_USB_Status>
 80091b2:	4603      	mov	r3, r0
 80091b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	460b      	mov	r3, r1
 80091ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80091de:	7af9      	ldrb	r1, [r7, #11]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	f7fa f822 	bl	800322c <HAL_PCD_EP_Receive>
 80091e8:	4603      	mov	r3, r0
 80091ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f86e 	bl	80092d0 <USBD_Get_USB_Status>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_PCDEx_LPM_Callback+0x18>
 8009216:	2b01      	cmp	r3, #1
 8009218:	d01f      	beq.n	800925a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800921a:	e03b      	b.n	8009294 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d007      	beq.n	8009234 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009224:	f7f7 ff1e 	bl	8001064 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009228:	4b1c      	ldr	r3, [pc, #112]	; (800929c <HAL_PCDEx_LPM_Callback+0x98>)
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	4a1b      	ldr	r2, [pc, #108]	; (800929c <HAL_PCDEx_LPM_Callback+0x98>)
 800922e:	f023 0306 	bic.w	r3, r3, #6
 8009232:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	6812      	ldr	r2, [r2, #0]
 8009242:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009246:	f023 0301 	bic.w	r3, r3, #1
 800924a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fcbe 	bl	8007bd4 <USBD_LL_Resume>
    break;
 8009258:	e01c      	b.n	8009294 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800926c:	f043 0301 	orr.w	r3, r3, #1
 8009270:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fc95 	bl	8007ba8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009286:	4b05      	ldr	r3, [pc, #20]	; (800929c <HAL_PCDEx_LPM_Callback+0x98>)
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	4a04      	ldr	r2, [pc, #16]	; (800929c <HAL_PCDEx_LPM_Callback+0x98>)
 800928c:	f043 0306 	orr.w	r3, r3, #6
 8009290:	6113      	str	r3, [r2, #16]
    break;
 8009292:	bf00      	nop
}
 8009294:	bf00      	nop
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	e000ed00 	.word	0xe000ed00

080092a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80092a8:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <USBD_static_malloc+0x18>)
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20000658 	.word	0x20000658

080092bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]

}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d817      	bhi.n	8009314 <USBD_Get_USB_Status+0x44>
 80092e4:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <USBD_Get_USB_Status+0x1c>)
 80092e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ea:	bf00      	nop
 80092ec:	080092fd 	.word	0x080092fd
 80092f0:	08009303 	.word	0x08009303
 80092f4:	08009309 	.word	0x08009309
 80092f8:	0800930f 	.word	0x0800930f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009300:	e00b      	b.n	800931a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	73fb      	strb	r3, [r7, #15]
    break;
 8009306:	e008      	b.n	800931a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]
    break;
 800930c:	e005      	b.n	800931a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800930e:	2303      	movs	r3, #3
 8009310:	73fb      	strb	r3, [r7, #15]
    break;
 8009312:	e002      	b.n	800931a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009314:	2303      	movs	r3, #3
 8009316:	73fb      	strb	r3, [r7, #15]
    break;
 8009318:	bf00      	nop
  }
  return usb_status;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <_ZN15USBDeviceConfig4InitEhhb>:
#define USB_STATE_ERROR                                     0xa0

class USBDeviceConfig {
public:

        virtual uint8_t Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	4608      	mov	r0, r1
 8009332:	4611      	mov	r1, r2
 8009334:	461a      	mov	r2, r3
 8009336:	4603      	mov	r3, r0
 8009338:	70fb      	strb	r3, [r7, #3]
 800933a:	460b      	mov	r3, r1
 800933c:	70bb      	strb	r3, [r7, #2]
 800933e:	4613      	mov	r3, r2
 8009340:	707b      	strb	r3, [r7, #1]
                return 0;
 8009342:	2300      	movs	r3, #0
        }
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <_ZN15USBDeviceConfig15ConfigureDeviceEhhb>:

        virtual uint8_t ConfigureDevice(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed __attribute__((unused))) {
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	461a      	mov	r2, r3
 800935e:	4603      	mov	r3, r0
 8009360:	70fb      	strb	r3, [r7, #3]
 8009362:	460b      	mov	r3, r1
 8009364:	70bb      	strb	r3, [r7, #2]
 8009366:	4613      	mov	r3, r2
 8009368:	707b      	strb	r3, [r7, #1]
                return 0;
 800936a:	2300      	movs	r3, #0
        }
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <_ZN15USBDeviceConfig7ReleaseEv>:

        virtual uint8_t Release() {
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
                return 0;
 8009380:	2300      	movs	r3, #0
        }
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <_ZN15USBDeviceConfig4PollEv>:

        virtual uint8_t Poll() {
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
                return 0;
 8009396:	2300      	movs	r3, #0
        }
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <_ZN15USBDeviceConfig10GetAddressEv>:

        virtual uint8_t GetAddress() {
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
                return 0;
 80093ac:	2300      	movs	r3, #0
        }
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <_ZN15USBDeviceConfig12ResetHubPortEh>:

        virtual void ResetHubPort(uint8_t port __attribute__((unused))) {
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
                return;
 80093c6:	bf00      	nop
        } // Note used for hubs only!
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <_ZN15USBDeviceConfig8VIDPIDOKEtt>:

        virtual bool VIDPIDOK(uint16_t vid __attribute__((unused)), uint16_t pid __attribute__((unused))) {
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	460b      	mov	r3, r1
 80093dc:	807b      	strh	r3, [r7, #2]
 80093de:	4613      	mov	r3, r2
 80093e0:	803b      	strh	r3, [r7, #0]
                return false;
 80093e2:	2300      	movs	r3, #0
        }
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <_ZN15USBDeviceConfig10DEVCLASSOKEh>:

        virtual bool DEVCLASSOK(uint8_t klass __attribute__((unused))) {
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
                return false;
 80093fc:	2300      	movs	r3, #0
        }
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <_ZN15USBDeviceConfig13DEVSUBCLASSOKEh>:

        virtual bool DEVSUBCLASSOK(uint8_t subklass __attribute__((unused))) {
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	70fb      	strb	r3, [r7, #3]
                return true;
 8009416:	2301      	movs	r3, #1
        }
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <_ZN3USB14GetAddressPoolEv>:

        void ResetHubPreMask() {
                bmHubPre &= (~bmHUBPRE);
        };

        AddressPool& GetAddressPool() {
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
                return (AddressPool&)addrPool;
 800942c:	687b      	ldr	r3, [r7, #4]
        };
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>:

        uint8_t RegisterDeviceClass(USBDeviceConfig *pdev) {
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	2b0f      	cmp	r3, #15
 800944c:	d812      	bhi.n	8009474 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3a>
                        if(!devConfig[i]) {
 800944e:	7bfa      	ldrb	r2, [r7, #15]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	321e      	adds	r2, #30
 8009454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d107      	bne.n	800946c <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x32>
                                devConfig[i] = pdev;
 800945c:	7bfa      	ldrb	r2, [r7, #15]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	321e      	adds	r2, #30
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                return 0;
 8009468:	2300      	movs	r3, #0
 800946a:	e004      	b.n	8009476 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0x3c>
                for(uint8_t i = 0; i < USB_NUMDEVICES; i++) {
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	3301      	adds	r3, #1
 8009470:	73fb      	strb	r3, [r7, #15]
 8009472:	e7e9      	b.n	8009448 <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig+0xe>
                        }
                }
                return USB_ERROR_UNABLE_TO_REGISTER_DEVICE_CLASS;
 8009474:	23d3      	movs	r3, #211	; 0xd3
        };
 8009476:	4618      	mov	r0, r3
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <_ZN16MultiValueBufferC1Ev>:
        uint8_t valueSize;
        void *pValue;

public:

        MultiValueBuffer() : valueSize(0), pValue(NULL) {
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	705a      	strb	r2, [r3, #1]
 8009496:	2200      	movs	r2, #0
 8009498:	709a      	strb	r2, [r3, #2]
 800949a:	2200      	movs	r2, #0
 800949c:	70da      	strb	r2, [r3, #3]
 800949e:	2200      	movs	r2, #0
 80094a0:	711a      	strb	r2, [r3, #4]
        };
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4618      	mov	r0, r3
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <_ZN20MultiByteValueParserC1Ev>:
        uint8_t countDown;
        uint8_t valueSize;

public:

        MultiByteValueParser() : pBuf(NULL), countDown(0), valueSize(0) {
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	711a      	strb	r2, [r3, #4]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	715a      	strb	r2, [r3, #5]
        };
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>:

        const uint8_t* GetBuffer() {
                return pBuf;
        };

        void Initialize(MultiValueBuffer * const pbuf) {
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	601a      	str	r2, [r3, #0]
                countDown = valueSize = pbuf->valueSize;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	715a      	strb	r2, [r3, #5]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	795a      	ldrb	r2, [r3, #5]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	711a      	strb	r2, [r3, #4]
        };
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <_ZN11ByteSkipperC1Ev>:
        uint8_t nStage;
        uint16_t countDown;

public:

        ByteSkipper() : pBuf(NULL), nStage(0), countDown(0) {
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	711a      	strb	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	80da      	strh	r2, [r3, #6]
        };
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>:

        void Initialize(MultiValueBuffer *pbuf) {
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
                pBuf = (uint8_t*)pbuf->pValue;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	601a      	str	r2, [r3, #0]
                countDown = 0;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	80da      	strh	r2, [r3, #6]
        };
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <_ZN11ByteSkipper4SkipEPPhPtt>:

        bool Skip(uint8_t **pp, uint16_t *pcntdn, uint16_t bytes_to_skip) {
 8009556:	b480      	push	{r7}
 8009558:	b085      	sub	sp, #20
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	60b9      	str	r1, [r7, #8]
 8009560:	607a      	str	r2, [r7, #4]
 8009562:	807b      	strh	r3, [r7, #2]
                switch(nStage) {
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	791b      	ldrb	r3, [r3, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <_ZN11ByteSkipper4SkipEPPhPtt+0x1c>
 800956c:	2b01      	cmp	r3, #1
 800956e:	d009      	beq.n	8009584 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>
 8009570:	e029      	b.n	80095c6 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                        case 0:
                                countDown = bytes_to_skip;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	887a      	ldrh	r2, [r7, #2]
 8009576:	80da      	strh	r2, [r3, #6]
                                nStage++;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	791b      	ldrb	r3, [r3, #4]
 800957c:	3301      	adds	r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	711a      	strb	r2, [r3, #4]
                                // fall through
                        case 1:
                                for(; countDown && (*pcntdn); countDown--, (*pp)++, (*pcntdn)--);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	88db      	ldrh	r3, [r3, #6]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d015      	beq.n	80095b8 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d011      	beq.n	80095b8 <_ZN11ByteSkipper4SkipEPPhPtt+0x62>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	88db      	ldrh	r3, [r3, #6]
 8009598:	3b01      	subs	r3, #1
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	80da      	strh	r2, [r3, #6]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	801a      	strh	r2, [r3, #0]
 80095b6:	e7e5      	b.n	8009584 <_ZN11ByteSkipper4SkipEPPhPtt+0x2e>

                                if(!countDown)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	88db      	ldrh	r3, [r3, #6]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <_ZN11ByteSkipper4SkipEPPhPtt+0x70>
                                        nStage = 0;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	711a      	strb	r2, [r3, #4]
                };
                return (!countDown);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88db      	ldrh	r3, [r3, #6]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bf0c      	ite	eq
 80095ce:	2301      	moveq	r3, #1
 80095d0:	2300      	movne	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
        };
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <_ZN17UsbConfigXtracter14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
class UsbConfigXtracter {
public:
        //virtual void ConfigXtract(const USB_CONFIGURATION_DESCRIPTOR *conf) = 0;
        //virtual void InterfaceXtract(uint8_t conf, const USB_INTERFACE_DESCRIPTOR *iface) = 0;

        virtual void EndpointXtract(uint8_t conf __attribute__((unused)), uint8_t iface __attribute__((unused)), uint8_t alt __attribute__((unused)), uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *ep __attribute__((unused))) {
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	461a      	mov	r2, r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	70fb      	strb	r3, [r7, #3]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70bb      	strb	r3, [r7, #2]
 80095f6:	4613      	mov	r3, r2
 80095f8:	707b      	strb	r3, [r7, #1]
        };
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <_ZN15USBDeviceConfigC1Ev>:
class USBDeviceConfig {
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4a04      	ldr	r2, [pc, #16]	; (8009624 <_ZN15USBDeviceConfigC1Ev+0x1c>)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	0800f918 	.word	0x0800f918

08009628 <_ZN17UsbConfigXtracterC1Ev>:
class UsbConfigXtracter {
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	4a04      	ldr	r2, [pc, #16]	; (8009644 <_ZN17UsbConfigXtracterC1Ev+0x1c>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	0800f900 	.word	0x0800f900

08009648 <_ZN3BTD10GetAddressEv>:
        virtual uint8_t GetAddress() {
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
                return bAddress;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
        };
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <_ZN3BTD7isReadyEv>:
        virtual bool isReady() {
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
                return bPollEnable;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
        };
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <_ZN3BTD10DEVCLASSOKEh>:
        virtual bool DEVCLASSOK(uint8_t klass) {
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
                return (klass == USB_CLASS_WIRELESS_CTRL);
 8009688:	78fb      	ldrb	r3, [r7, #3]
 800968a:	2be0      	cmp	r3, #224	; 0xe0
 800968c:	bf0c      	ite	eq
 800968e:	2301      	moveq	r3, #1
 8009690:	2300      	movne	r3, #0
 8009692:	b2db      	uxtb	r3, r3
        };
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <_ZN3BTD8VIDPIDOKEtt>:
        virtual bool VIDPIDOK(uint16_t vid, uint16_t pid) {
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	807b      	strh	r3, [r7, #2]
 80096ac:	4613      	mov	r3, r2
 80096ae:	803b      	strh	r3, [r7, #0]
                if((vid == IOGEAR_GBU521_VID && pid == IOGEAR_GBU521_PID) || (vid == BELKIN_F8T065BF_VID && pid == BELKIN_F8T065BF_PID))
 80096b0:	887b      	ldrh	r3, [r7, #2]
 80096b2:	f640 225c 	movw	r2, #2652	; 0xa5c
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d104      	bne.n	80096c4 <_ZN3BTD8VIDPIDOKEtt+0x24>
 80096ba:	883b      	ldrh	r3, [r7, #0]
 80096bc:	f242 12e8 	movw	r2, #8680	; 0x21e8
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d009      	beq.n	80096d8 <_ZN3BTD8VIDPIDOKEtt+0x38>
 80096c4:	887b      	ldrh	r3, [r7, #2]
 80096c6:	f240 520d 	movw	r2, #1293	; 0x50d
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d106      	bne.n	80096dc <_ZN3BTD8VIDPIDOKEtt+0x3c>
 80096ce:	883b      	ldrh	r3, [r7, #0]
 80096d0:	f240 625a 	movw	r2, #1626	; 0x65a
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d101      	bne.n	80096dc <_ZN3BTD8VIDPIDOKEtt+0x3c>
                        return true;
 80096d8:	2301      	movs	r3, #1
 80096da:	e02d      	b.n	8009738 <_ZN3BTD8VIDPIDOKEtt+0x98>
                if(my_bdaddr[0] != 0x00 || my_bdaddr[1] != 0x00 || my_bdaddr[2] != 0x00 || my_bdaddr[3] != 0x00 || my_bdaddr[4] != 0x00 || my_bdaddr[5] != 0x00) { // Check if Bluetooth address is set
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7d1b      	ldrb	r3, [r3, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d113      	bne.n	800970c <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7d5b      	ldrb	r3, [r3, #21]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10f      	bne.n	800970c <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7d9b      	ldrb	r3, [r3, #22]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10b      	bne.n	800970c <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	7ddb      	ldrb	r3, [r3, #23]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d107      	bne.n	800970c <_ZN3BTD8VIDPIDOKEtt+0x6c>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7e1b      	ldrb	r3, [r3, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <_ZN3BTD8VIDPIDOKEtt+0x6c>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	7e5b      	ldrb	r3, [r3, #25]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d014      	beq.n	8009736 <_ZN3BTD8VIDPIDOKEtt+0x96>
                        if(vid == PS3_VID && (pid == PS3_PID || pid == PS3NAVIGATION_PID || pid == PS3MOVE_PID))
 800970c:	887b      	ldrh	r3, [r7, #2]
 800970e:	f240 524c 	movw	r2, #1356	; 0x54c
 8009712:	4293      	cmp	r3, r2
 8009714:	d10f      	bne.n	8009736 <_ZN3BTD8VIDPIDOKEtt+0x96>
 8009716:	883b      	ldrh	r3, [r7, #0]
 8009718:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800971c:	d009      	beq.n	8009732 <_ZN3BTD8VIDPIDOKEtt+0x92>
 800971e:	883b      	ldrh	r3, [r7, #0]
 8009720:	f240 422f 	movw	r2, #1071	; 0x42f
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <_ZN3BTD8VIDPIDOKEtt+0x92>
 8009728:	883b      	ldrh	r3, [r7, #0]
 800972a:	f240 32d5 	movw	r2, #981	; 0x3d5
 800972e:	4293      	cmp	r3, r2
 8009730:	d101      	bne.n	8009736 <_ZN3BTD8VIDPIDOKEtt+0x96>
                                return true;
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <_ZN3BTD8VIDPIDOKEtt+0x98>
                return false;
 8009736:	2300      	movs	r3, #0
        };
 8009738:	4618      	mov	r0, r3
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <_ZN3BTDC1EP3USB>:
const uint8_t BTD::BTD_CONTROL_PIPE = 0;
const uint8_t BTD::BTD_EVENT_PIPE = 1;
const uint8_t BTD::BTD_DATAIN_PIPE = 2;
const uint8_t BTD::BTD_DATAOUT_PIPE = 3;

BTD::BTD(USB *p) :
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
bAddress(0), // Device address - mandatory
bNumEP(1), // If config descriptor needs to be parsed
qNextPollTime(0), // Reset NextPollTime
pollInterval(0),
simple_pairing_supported(false),
bPollEnable(false) // Don't start polling before dongle is connected
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4618      	mov	r0, r3
 8009752:	f7ff ff59 	bl	8009608 <_ZN15USBDeviceConfigC1Ev>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3304      	adds	r3, #4
 800975a:	4618      	mov	r0, r3
 800975c:	f7ff ff64 	bl	8009628 <_ZN17UsbConfigXtracterC1Ev>
 8009760:	4a2b      	ldr	r2, [pc, #172]	; (8009810 <_ZN3BTDC1EP3USB+0xcc>)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	4a2b      	ldr	r2, [pc, #172]	; (8009814 <_ZN3BTDC1EP3USB+0xd0>)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	605a      	str	r2, [r3, #4]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	64da      	str	r2, [r3, #76]	; 0x4c
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	661a      	str	r2, [r3, #96]	; 0x60
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
{
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d80a      	bhi.n	80097e8 <_ZN3BTDC1EP3USB+0xa4>
                btService[i] = NULL;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	3318      	adds	r3, #24
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	2200      	movs	r2, #0
 80097de:	605a      	str	r2, [r3, #4]
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	3301      	adds	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
 80097e6:	e7f1      	b.n	80097cc <_ZN3BTDC1EP3USB+0x88>

        Initialize(); // Set all variables, endpoint structs etc. to default values
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 fa83 	bl	8009cf4 <_ZN3BTD10InitializeEv>

        if(pUsb) // Register in USB subsystem
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d006      	beq.n	8009804 <_ZN3BTDC1EP3USB+0xc0>
                pUsb->RegisterDeviceClass(this); // Set devConfig[] entry
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7ff fe1b 	bl	800943a <_ZN3USB19RegisterDeviceClassEP15USBDeviceConfig>
}
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	0800f8c0 	.word	0x0800f8c0
 8009814:	0800f8f4 	.word	0x0800f8f4

08009818 <_ZN3BTD15ConfigureDeviceEhhb>:

uint8_t BTD::ConfigureDevice(uint8_t parent, uint8_t port, bool lowspeed) {
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b08f      	sub	sp, #60	; 0x3c
 800981c:	af02      	add	r7, sp, #8
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	4608      	mov	r0, r1
 8009822:	4611      	mov	r1, r2
 8009824:	461a      	mov	r2, r3
 8009826:	4603      	mov	r3, r0
 8009828:	70fb      	strb	r3, [r7, #3]
 800982a:	460b      	mov	r3, r1
 800982c:	70bb      	strb	r3, [r7, #2]
 800982e:	4613      	mov	r3, r2
 8009830:	707b      	strb	r3, [r7, #1]
        const uint8_t constBufSize = sizeof (USB_DEVICE_DESCRIPTOR);
 8009832:	2312      	movs	r3, #18
 8009834:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        uint8_t buf[constBufSize];
        USB_DEVICE_DESCRIPTOR * udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR*>(buf);
 8009838:	f107 0308 	add.w	r3, r7, #8
 800983c:	62bb      	str	r3, [r7, #40]	; 0x28
        uint8_t rcode;
        UsbDevice *p = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	627b      	str	r3, [r7, #36]	; 0x24
        EpInfo *oldep_ptr = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	623b      	str	r3, [r7, #32]

        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa54 	bl	8009cf4 <_ZN3BTD10InitializeEv>

        AddressPool &addrPool = pUsb->GetAddressPool(); // Get memory address of USB device address pool
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009850:	4618      	mov	r0, r3
 8009852:	f7ff fde7 	bl	8009424 <_ZN3USB14GetAddressPoolEv>
 8009856:	61f8      	str	r0, [r7, #28]
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD ConfigureDevice"), 0x80);
#endif

        if(bAddress) { // Check if address has already been assigned to an instance
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <_ZN3BTD15ConfigureDeviceEhhb+0x4e>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress in use"), 0x80);
#endif
                return USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE;
 8009862:	23d9      	movs	r3, #217	; 0xd9
 8009864:	e087      	b.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        p = addrPool.GetUsbDevicePtr(0); // Get pointer to pseudo device with address 0 assigned
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2100      	movs	r1, #0
 800986e:	69f8      	ldr	r0, [r7, #28]
 8009870:	4798      	blx	r3
 8009872:	6278      	str	r0, [r7, #36]	; 0x24
        if(!p) {
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <_ZN3BTD15ConfigureDeviceEhhb+0x66>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800987a:	23d6      	movs	r3, #214	; 0xd6
 800987c:	e07b      	b.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if(!p->epinfo) {
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <_ZN3BTD15ConfigureDeviceEhhb+0x72>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nepinfo is null"), 0x80);
#endif
                return USB_ERROR_EPINFO_IS_NULL;
 8009886:	23d7      	movs	r3, #215	; 0xd7
 8009888:	e075      	b.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        oldep_ptr = p->epinfo; // Save old pointer to EP_RECORD of address 0
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	623b      	str	r3, [r7, #32]
        p->epinfo = epInfo; // Temporary assign new pointer to epInfo to p->epinfo in order to avoid toggle inconsistence
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f103 0251 	add.w	r2, r3, #81	; 0x51
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	601a      	str	r2, [r3, #0]
        p->lowspeed = lowspeed;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	787a      	ldrb	r2, [r7, #1]
 800989e:	719a      	strb	r2, [r3, #6]
        rcode = pUsb->getDevDescr(0, 0, constBufSize, (uint8_t*)buf); // Get device descriptor - addr, ep, nbytes, data
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80098a4:	f107 0308 	add.w	r3, r7, #8
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	2312      	movs	r3, #18
 80098ac:	2200      	movs	r2, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	f005 fa6b 	bl	800ed8a <_ZN3USB11getDevDescrEhhtPh>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        p->epinfo = oldep_ptr; // Restore p->epinfo
 80098ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098bc:	6a3a      	ldr	r2, [r7, #32]
 80098be:	601a      	str	r2, [r3, #0]

        if(rcode)
 80098c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d146      	bne.n	8009956 <_ZN3BTD15ConfigureDeviceEhhb+0x13e>
                goto FailGetDevDescr;

        bAddress = addrPool.AllocAddress(parent, false, port); // Allocate new address according to device class
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3304      	adds	r3, #4
 80098ce:	681c      	ldr	r4, [r3, #0]
 80098d0:	78bb      	ldrb	r3, [r7, #2]
 80098d2:	78f9      	ldrb	r1, [r7, #3]
 80098d4:	2200      	movs	r2, #0
 80098d6:	69f8      	ldr	r0, [r7, #28]
 80098d8:	47a0      	blx	r4
 80098da:	4603      	mov	r3, r0
 80098dc:	461a      	mov	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        if(!bAddress) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <_ZN3BTD15ConfigureDeviceEhhb+0xda>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nOut of address space"), 0x80);
#endif
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 80098ee:	23d4      	movs	r3, #212	; 0xd4
 80098f0:	e041      	b.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
        }

        if (udd->bDeviceClass == 0x09) // Some dongles have an USB hub inside
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	791b      	ldrb	r3, [r3, #4]
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d017      	beq.n	800992a <_ZN3BTD15ConfigureDeviceEhhb+0x112>
                goto FailHub;

        epInfo[0].maxPktSize = udd->bMaxPacketSize0; // Extract Max Packet Size from device descriptor
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	79da      	ldrb	r2, [r3, #7]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        epInfo[1].epAddr = udd->bNumConfigurations; // Steal and abuse from epInfo structure to save memory
 8009904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009906:	7c5a      	ldrb	r2, [r3, #17]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        VID = udd->idVendor;
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	891b      	ldrh	r3, [r3, #8]
 8009912:	b29a      	uxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
        PID = udd->idProduct;
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	895b      	ldrh	r3, [r3, #10]
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

        return USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET;
 8009926:	23e0      	movs	r3, #224	; 0xe0
 8009928:	e025      	b.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailHub;
 800992a:	bf00      	nop

FailHub:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nPlease create a hub instance in your code: \"USBHub Hub1(&Usb);\""), 0x80);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009936:	2300      	movs	r3, #0
 8009938:	2200      	movs	r2, #0
 800993a:	f005 fac3 	bl	800eec4 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 800993e:	23d1      	movs	r3, #209	; 0xd1
 8009940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3308      	adds	r3, #8
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
        return rcode;
 8009950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009954:	e00f      	b.n	8009976 <_ZN3BTD15ConfigureDeviceEhhb+0x15e>
                goto FailGetDevDescr;
 8009956:	bf00      	nop

FailGetDevDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailGetDevDescr(rcode);
#endif
        if(rcode != hrJERR)
 8009958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800995c:	2b0d      	cmp	r3, #13
 800995e:	d002      	beq.n	8009966 <_ZN3BTD15ConfigureDeviceEhhb+0x14e>
                rcode = USB_ERROR_FailGetDevDescr;
 8009960:	23e1      	movs	r3, #225	; 0xe1
 8009962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Release();
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	4798      	blx	r3
        return rcode;
 8009972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 8009976:	4618      	mov	r0, r3
 8009978:	3734      	adds	r7, #52	; 0x34
 800997a:	46bd      	mov	sp, r7
 800997c:	bd90      	pop	{r4, r7, pc}
	...

08009980 <_ZN3BTD4InitEhhb>:

uint8_t BTD::Init(uint8_t parent __attribute__((unused)), uint8_t port __attribute__((unused)), bool lowspeed) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b096      	sub	sp, #88	; 0x58
 8009984:	af02      	add	r7, sp, #8
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	4608      	mov	r0, r1
 800998a:	4611      	mov	r1, r2
 800998c:	461a      	mov	r2, r3
 800998e:	4603      	mov	r3, r0
 8009990:	70fb      	strb	r3, [r7, #3]
 8009992:	460b      	mov	r3, r1
 8009994:	70bb      	strb	r3, [r7, #2]
 8009996:	4613      	mov	r3, r2
 8009998:	707b      	strb	r3, [r7, #1]
        uint8_t rcode;
        uint8_t num_of_conf = epInfo[1].epAddr; // Number of configurations
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80099a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        epInfo[1].epAddr = 0;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        AddressPool &addrPool = pUsb->GetAddressPool();
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fd37 	bl	8009424 <_ZN3USB14GetAddressPoolEv>
 80099b6:	64b8      	str	r0, [r7, #72]	; 0x48
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nBTD Init"), 0x80);
#endif
        UsbDevice *p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 80099b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 80099c4:	4611      	mov	r1, r2
 80099c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80099c8:	4798      	blx	r3
 80099ca:	6478      	str	r0, [r7, #68]	; 0x44

        if(!p) {
 80099cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <_ZN3BTD4InitEhhb+0x56>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 80099d2:	23d6      	movs	r3, #214	; 0xd6
 80099d4:	e189      	b.n	8009cea <_ZN3BTD4InitEhhb+0x36a>
        }

        delay(300); // Assign new address to the device
 80099d6:	48b8      	ldr	r0, [pc, #736]	; (8009cb8 <_ZN3BTD4InitEhhb+0x338>)
 80099d8:	f7f8 f892 	bl	8001b00 <HAL_Delay>

        rcode = pUsb->setAddr(0, 0, bAddress); // Assign new address to the device
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099e6:	2200      	movs	r2, #0
 80099e8:	2100      	movs	r1, #0
 80099ea:	f005 fa6b 	bl	800eec4 <_ZN3USB7setAddrEhhh>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode) {
 80099f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <_ZN3BTD4InitEhhb+0x84>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nsetAddr: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
#endif
                p->lowspeed = false;
 80099fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fe:	2200      	movs	r2, #0
 8009a00:	719a      	strb	r2, [r3, #6]
                goto Fail;
 8009a02:	e16a      	b.n	8009cda <_ZN3BTD4InitEhhb+0x35a>
#ifdef EXTRADEBUG
        Notify(PSTR("\r\nAddr: "), 0x80);
        D_PrintHex<uint8_t > (bAddress, 0x80);
#endif

        p->lowspeed = false;
 8009a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a06:	2200      	movs	r2, #0
 8009a08:	719a      	strb	r2, [r3, #6]

        p = addrPool.GetUsbDevicePtr(bAddress); // Get pointer to assigned address record
 8009a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	f892 2050 	ldrb.w	r2, [r2, #80]	; 0x50
 8009a16:	4611      	mov	r1, r2
 8009a18:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009a1a:	4798      	blx	r3
 8009a1c:	6478      	str	r0, [r7, #68]	; 0x44
        if(!p) {
 8009a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <_ZN3BTD4InitEhhb+0xa8>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nAddress not found"), 0x80);
#endif
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 8009a24:	23d6      	movs	r3, #214	; 0xd6
 8009a26:	e160      	b.n	8009cea <_ZN3BTD4InitEhhb+0x36a>
        }

        p->lowspeed = lowspeed;
 8009a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2a:	787a      	ldrb	r2, [r7, #1]
 8009a2c:	719a      	strb	r2, [r3, #6]

        rcode = pUsb->setEpInfoEntry(bAddress, 1, epInfo); // Assign epInfo to epinfo pointer - only EP0 is known
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3351      	adds	r3, #81	; 0x51
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f004 f8fe 	bl	800dc3e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009a42:	4603      	mov	r3, r0
 8009a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if(rcode)
 8009a48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f040 8128 	bne.w	8009ca2 <_ZN3BTD4InitEhhb+0x322>
                goto FailSetDevTblEntry;

        if(VID == PS3_VID && (PID == PS3_PID || PID == PS3NAVIGATION_PID || PID == PS3MOVE_PID)) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009a58:	f240 524c 	movw	r2, #1356	; 0x54c
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d177      	bne.n	8009b50 <_ZN3BTD4InitEhhb+0x1d0>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009a66:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009a6a:	d00d      	beq.n	8009a88 <_ZN3BTD4InitEhhb+0x108>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009a72:	f240 422f 	movw	r2, #1071	; 0x42f
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d006      	beq.n	8009a88 <_ZN3BTD4InitEhhb+0x108>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009a80:	f240 32d5 	movw	r2, #981	; 0x3d5
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d163      	bne.n	8009b50 <_ZN3BTD4InitEhhb+0x1d0>
                delay(100);
 8009a88:	488c      	ldr	r0, [pc, #560]	; (8009cbc <_ZN3BTD4InitEhhb+0x33c>)
 8009a8a:	f7f8 f839 	bl	8001b00 <HAL_Delay>
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 1); // We only need the Control endpoint, so we don't have to initialize the other endpoints of device
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	f005 fa40 	bl	800ef24 <_ZN3USB7setConfEhhh>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009aaa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f040 80f9 	bne.w	8009ca6 <_ZN3BTD4InitEhhb+0x326>
                                Notify(PSTR("\r\nNavigation Controller Connected"), 0x80);
                } else // It must be a Motion controller
                        Notify(PSTR("\r\nMotion Controller Connected"), 0x80);
#endif

                if(my_bdaddr[0] == 0x00 && my_bdaddr[1] == 0x00 && my_bdaddr[2] == 0x00 && my_bdaddr[3] == 0x00 && my_bdaddr[4] == 0x00 && my_bdaddr[5] == 0x00) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d113      	bne.n	8009ae4 <_ZN3BTD4InitEhhb+0x164>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	7d5b      	ldrb	r3, [r3, #21]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10f      	bne.n	8009ae4 <_ZN3BTD4InitEhhb+0x164>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7d9b      	ldrb	r3, [r3, #22]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10b      	bne.n	8009ae4 <_ZN3BTD4InitEhhb+0x164>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7ddb      	ldrb	r3, [r3, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d107      	bne.n	8009ae4 <_ZN3BTD4InitEhhb+0x164>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	7e1b      	ldrb	r3, [r3, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <_ZN3BTD4InitEhhb+0x164>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7e5b      	ldrb	r3, [r3, #25]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d019      	beq.n	8009b18 <_ZN3BTD4InitEhhb+0x198>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPlease plug in the dongle before trying to pair with the PS3 Controller\r\nor set the Bluetooth address in the constructor of the PS3BT class"), 0x80);
#endif
                } else {
                        if(PID == PS3_PID || PID == PS3NAVIGATION_PID)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009aea:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8009aee:	d006      	beq.n	8009afe <_ZN3BTD4InitEhhb+0x17e>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009af6:	f240 422f 	movw	r2, #1071	; 0x42f
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d106      	bne.n	8009b0c <_ZN3BTD4InitEhhb+0x18c>
                                setBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3314      	adds	r3, #20
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 f8c3 	bl	800bc90 <_ZN3BTD9setBdaddrEPh>
 8009b0a:	e005      	b.n	8009b18 <_ZN3BTD4InitEhhb+0x198>
                        else
                                setMoveBdaddr(my_bdaddr); // Set internal Bluetooth address
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3314      	adds	r3, #20
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f002 f8fc 	bl	800bd10 <_ZN3BTD13setMoveBdaddrEPh>
                        }
                        D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                }

                pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, 0); // Reset configuration value
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f005 f9fb 	bl	800ef24 <_ZN3USB7setConfEhhh>
                pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009b38:	2300      	movs	r3, #0
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f005 f9c2 	bl	800eec4 <_ZN3USB7setAddrEhhh>
                Release(); // Release device
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	3308      	adds	r3, #8
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	4798      	blx	r3
                return USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED; // Return
 8009b4c:	23d1      	movs	r3, #209	; 0xd1
 8009b4e:	e0cc      	b.n	8009cea <_ZN3BTD4InitEhhb+0x36a>
        } else {
                // Check if attached device is a Bluetooth dongle and fill endpoint data structure
                // First interface in the configuration must have Bluetooth assigned Class/Subclass/Protocol
                // And 3 endpoints - interrupt-IN, bulk-IN, bulk-OUT, not necessarily in this order
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009b56:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009b5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d25e      	bcs.n	8009c20 <_ZN3BTD4InitEhhb+0x2a0>
                        if((VID == IOGEAR_GBU521_VID && PID == IOGEAR_GBU521_PID) || (VID == BELKIN_F8T065BF_VID && PID == BELKIN_F8T065BF_PID)) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009b68:	f640 225c 	movw	r2, #2652	; 0xa5c
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d106      	bne.n	8009b7e <_ZN3BTD4InitEhhb+0x1fe>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009b76:	f242 12e8 	movw	r2, #8680	; 0x21e8
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d00d      	beq.n	8009b9a <_ZN3BTD4InitEhhb+0x21a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8009b84:	f240 520d 	movw	r2, #1293	; 0x50d
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d120      	bne.n	8009bce <_ZN3BTD4InitEhhb+0x24e>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8009b92:	f240 625a 	movw	r2, #1626	; 0x65a
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d119      	bne.n	8009bce <_ZN3BTD4InitEhhb+0x24e>
                                ConfigDescParser<USB_CLASS_VENDOR_SPECIFIC, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Workaround issue with some dongles
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f002 f907 	bl	800bdb8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009bb4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009bb8:	f107 0308 	add.w	r3, r7, #8
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f005 f932 	bl	800ee2a <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009bcc:	e018      	b.n	8009c00 <_ZN3BTD4InitEhhb+0x280>
                        } else {
                                ConfigDescParser<USB_CLASS_WIRELESS_CTRL, WI_SUBCLASS_RF, WI_PROTOCOL_BT, CP_MASK_COMPARE_ALL> confDescrParser(this); // Set class id according to the specification
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	1d1a      	adds	r2, r3, #4
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f002 f93b 	bl	800be54 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>
                                rcode = pUsb->getConfDescr(bAddress, 0, i, &confDescrParser);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009be8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009bec:	f107 0308 	add.w	r3, r7, #8
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f005 f918 	bl	800ee2a <_ZN3USB12getConfDescrEhhhP13USBReadParser>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                        }
                        if(rcode) // Check error code
 8009c00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d150      	bne.n	8009caa <_ZN3BTD4InitEhhb+0x32a>
                                goto FailGetConfDescr;
                        if(bNumEP >= BTD_MAX_ENDPOINTS) // All endpoints extracted
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d805      	bhi.n	8009c1e <_ZN3BTD4InitEhhb+0x29e>
                for(uint8_t i = 0; i < num_of_conf; i++) {
 8009c12:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009c16:	3301      	adds	r3, #1
 8009c18:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009c1c:	e79b      	b.n	8009b56 <_ZN3BTD4InitEhhb+0x1d6>
                                break;
 8009c1e:	bf00      	nop
                }

                if(bNumEP < BTD_MAX_ENDPOINTS)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d94a      	bls.n	8009cc0 <_ZN3BTD4InitEhhb+0x340>
                        goto FailUnknownDevice;

                // Assign epInfo to epinfo pointer - this time all 3 endpoins
                rcode = pUsb->setEpInfoEntry(bAddress, bNumEP, epInfo);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3351      	adds	r3, #81	; 0x51
 8009c3e:	f003 fffe 	bl	800dc3e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>
 8009c42:	4603      	mov	r3, r0
 8009c44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009c48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d12e      	bne.n	8009cae <_ZN3BTD4InitEhhb+0x32e>
                        goto FailSetDevTblEntry;

                // Set Configuration Value
                rcode = pUsb->setConf(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bConfNum);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c66:	f005 f95d 	bl	800ef24 <_ZN3USB7setConfEhhh>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                if(rcode)
 8009c70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11c      	bne.n	8009cb2 <_ZN3BTD4InitEhhb+0x332>
                        goto FailSetConfDescr;

                hci_num_reset_loops = 100; // only loop 100 times before trying to send the hci reset command
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2264      	movs	r2, #100	; 0x64
 8009c7c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                hci_counter = 0;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                hci_state = HCI_INIT_STATE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                waitingForConnection = false;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	721a      	strb	r2, [r3, #8]
                bPollEnable = true;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nBluetooth Dongle Initialized"), 0x80);
#endif
        }
        return 0; // Successful configuration
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e023      	b.n	8009cea <_ZN3BTD4InitEhhb+0x36a>
                goto FailSetDevTblEntry;
 8009ca2:	bf00      	nop
 8009ca4:	e019      	b.n	8009cda <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009ca6:	bf00      	nop
 8009ca8:	e017      	b.n	8009cda <_ZN3BTD4InitEhhb+0x35a>
                                goto FailGetConfDescr;
 8009caa:	bf00      	nop
 8009cac:	e015      	b.n	8009cda <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetDevTblEntry;
 8009cae:	bf00      	nop
 8009cb0:	e013      	b.n	8009cda <_ZN3BTD4InitEhhb+0x35a>
                        goto FailSetConfDescr;
 8009cb2:	bf00      	nop

FailSetConfDescr:
#ifdef DEBUG_USB_HOST
        NotifyFailSetConfDescr();
#endif
        goto Fail;
 8009cb4:	e011      	b.n	8009cda <_ZN3BTD4InitEhhb+0x35a>
 8009cb6:	bf00      	nop
 8009cb8:	000493e0 	.word	0x000493e0
 8009cbc:	000186a0 	.word	0x000186a0
                        goto FailUnknownDevice;
 8009cc0:	bf00      	nop

FailUnknownDevice:
#ifdef DEBUG_USB_HOST
        NotifyFailUnknownDevice(VID, PID);
#endif
        pUsb->setAddr(bAddress, 0, 0); // Reset address
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009ccc:	2300      	movs	r3, #0
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f005 f8f8 	bl	800eec4 <_ZN3USB7setAddrEhhh>
        rcode = USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED;
 8009cd4:	23d1      	movs	r3, #209	; 0xd1
 8009cd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Fail:
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nBTD Init Failed, error code: "), 0x80);
        NotifyFail(rcode);
#endif
        Release();
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	4798      	blx	r3
        return rcode;
 8009ce6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3750      	adds	r7, #80	; 0x50
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop

08009cf4 <_ZN3BTD10InitializeEv>:

void BTD::Initialize() {
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d845      	bhi.n	8009d92 <_ZN3BTD10InitializeEv+0x9e>
                epInfo[i].epAddr = 0;
 8009d06:	7bfa      	ldrb	r2, [r7, #15]
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4413      	add	r3, r2
 8009d10:	440b      	add	r3, r1
 8009d12:	3351      	adds	r3, #81	; 0x51
 8009d14:	2200      	movs	r2, #0
 8009d16:	701a      	strb	r2, [r3, #0]
                epInfo[i].maxPktSize = (i) ? 0 : 8;
 8009d18:	7bfb      	ldrb	r3, [r7, #15]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <_ZN3BTD10InitializeEv+0x2e>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	e000      	b.n	8009d24 <_ZN3BTD10InitializeEv+0x30>
 8009d22:	2008      	movs	r0, #8
 8009d24:	7bfa      	ldrb	r2, [r7, #15]
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	4413      	add	r3, r2
 8009d2e:	440b      	add	r3, r1
 8009d30:	3352      	adds	r3, #82	; 0x52
 8009d32:	4602      	mov	r2, r0
 8009d34:	701a      	strb	r2, [r3, #0]
                epInfo[i].bmSndToggle = 0;
 8009d36:	7bfa      	ldrb	r2, [r7, #15]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	005b      	lsls	r3, r3, #1
 8009d3e:	4413      	add	r3, r2
 8009d40:	440b      	add	r3, r1
 8009d42:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009d46:	78d3      	ldrb	r3, [r2, #3]
 8009d48:	f36f 0300 	bfc	r3, #0, #1
 8009d4c:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmRcvToggle = 0;
 8009d4e:	7bfa      	ldrb	r2, [r7, #15]
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	4613      	mov	r3, r2
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	4413      	add	r3, r2
 8009d58:	440b      	add	r3, r1
 8009d5a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009d5e:	78d3      	ldrb	r3, [r2, #3]
 8009d60:	f36f 0341 	bfc	r3, #1, #1
 8009d64:	70d3      	strb	r3, [r2, #3]
                epInfo[i].bmNakPower = (i) ? USB_NAK_NOWAIT : USB_NAK_MAX_POWER;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <_ZN3BTD10InitializeEv+0x7c>
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	e000      	b.n	8009d72 <_ZN3BTD10InitializeEv+0x7e>
 8009d70:	210f      	movs	r1, #15
 8009d72:	7bfa      	ldrb	r2, [r7, #15]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	4613      	mov	r3, r2
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	4413      	add	r3, r2
 8009d7c:	4403      	add	r3, r0
 8009d7e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009d82:	78d3      	ldrb	r3, [r2, #3]
 8009d84:	f361 0387 	bfi	r3, r1, #2, #6
 8009d88:	70d3      	strb	r3, [r2, #3]
        for(i = 0; i < BTD_MAX_ENDPOINTS; i++) {
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
 8009d90:	e7b6      	b.n	8009d00 <_ZN3BTD10InitializeEv+0xc>
        }
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d81c      	bhi.n	8009dd6 <_ZN3BTD10InitializeEv+0xe2>
                if(btService[i])
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	3318      	adds	r3, #24
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d010      	beq.n	8009dce <_ZN3BTD10InitializeEv+0xda>
                        btService[i]->Reset(); // Reset all Bluetooth services
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	3318      	adds	r3, #24
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	6859      	ldr	r1, [r3, #4]
 8009db8:	7bfb      	ldrb	r3, [r7, #15]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	3318      	adds	r3, #24
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4608      	mov	r0, r1
 8009dcc:	4798      	blx	r3
        for(i = 0; i < BTD_NUM_SERVICES; i++) {
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
 8009dd4:	e7df      	b.n	8009d96 <_ZN3BTD10InitializeEv+0xa2>
        }

        connectToWii = false;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        incomingWii = false;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        connectToHIDDevice = false;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        incomingHIDDevice = false;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        incomingPSController = false;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
        bAddress = 0; // Clear device address
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        bNumEP = 1; // Must have to be reset to 1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        qNextPollTime = 0; // Reset next poll time
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	661a      	str	r2, [r3, #96]	; 0x60
        pollInterval = 0;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bPollEnable = false; // Don't start polling before dongle is connected
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
        simple_pairing_supported = false;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
}
 8009e2c:	bf00      	nop
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:

/* Extracts interrupt-IN, bulk-IN, bulk-OUT endpoint information from config descriptor */
void BTD::EndpointXtract(uint8_t conf, uint8_t iface __attribute__((unused)), uint8_t alt, uint8_t proto __attribute__((unused)), const USB_ENDPOINT_DESCRIPTOR *pep) {
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	4611      	mov	r1, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4603      	mov	r3, r0
 8009e44:	70fb      	strb	r3, [r7, #3]
 8009e46:	460b      	mov	r3, r1
 8009e48:	70bb      	strb	r3, [r7, #2]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	707b      	strb	r3, [r7, #1]
        //ErrorMessage<uint8_t>(PSTR("Conf.Val"),conf);
        //ErrorMessage<uint8_t>(PSTR("Iface Num"),iface);
        //ErrorMessage<uint8_t>(PSTR("Alt.Set"),alt);

        if(alt) // Wrong interface - by BT spec, no alt setting
 8009e4e:	787b      	ldrb	r3, [r7, #1]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d15d      	bne.n	8009f10 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xdc>
                return;

        bConfNum = conf;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	78fa      	ldrb	r2, [r7, #3]
 8009e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        uint8_t index;

        if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_INTERRUPT && (pep->bEndpointAddress & 0x80) == 0x80) { // Interrupt In endpoint found
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	78db      	ldrb	r3, [r3, #3]
 8009e60:	f003 0303 	and.w	r3, r3, #3
 8009e64:	2b03      	cmp	r3, #3
 8009e66:	d114      	bne.n	8009e92 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	789b      	ldrb	r3, [r3, #2]
 8009e6c:	b25b      	sxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da0f      	bge.n	8009e92 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x5e>
                index = BTD_EVENT_PIPE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	73fb      	strb	r3, [r7, #15]
                epInfo[index].bmNakPower = USB_NAK_NOWAIT;
 8009e76:	7bfa      	ldrb	r2, [r7, #15]
 8009e78:	6879      	ldr	r1, [r7, #4]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4413      	add	r3, r2
 8009e80:	440b      	add	r3, r1
 8009e82:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8009e86:	78d3      	ldrb	r3, [r2, #3]
 8009e88:	2101      	movs	r1, #1
 8009e8a:	f361 0387 	bfi	r3, r1, #2, #6
 8009e8e:	70d3      	strb	r3, [r2, #3]
 8009e90:	e00e      	b.n	8009eb0 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7c>
        } else if((pep->bmAttributes & bmUSB_TRANSFER_TYPE) == USB_TRANSFER_TYPE_BULK) // Bulk endpoint found
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	78db      	ldrb	r3, [r3, #3]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d13a      	bne.n	8009f14 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe0>
                index = ((pep->bEndpointAddress & 0x80) == 0x80) ? BTD_DATAIN_PIPE : BTD_DATAOUT_PIPE;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	789b      	ldrb	r3, [r3, #2]
 8009ea2:	b25b      	sxtb	r3, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	da01      	bge.n	8009eac <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x78>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e000      	b.n	8009eae <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0x7a>
 8009eac:	2303      	movs	r3, #3
 8009eae:	73fb      	strb	r3, [r7, #15]
        else
            return;

        // Fill the rest of endpoint data structure
        epInfo[index].epAddr = (pep->bEndpointAddress & 0x0F);
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	789b      	ldrb	r3, [r3, #2]
 8009eb4:	7bfa      	ldrb	r2, [r7, #15]
 8009eb6:	f003 030f 	and.w	r3, r3, #15
 8009eba:	b2d8      	uxtb	r0, r3
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	3351      	adds	r3, #81	; 0x51
 8009ec8:	4602      	mov	r2, r0
 8009eca:	701a      	strb	r2, [r3, #0]
        epInfo[index].maxPktSize = (uint8_t)pep->wMaxPacketSize;
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	889b      	ldrh	r3, [r3, #4]
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	7bfa      	ldrb	r2, [r7, #15]
 8009ed4:	b2d8      	uxtb	r0, r3
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	4413      	add	r3, r2
 8009ede:	440b      	add	r3, r1
 8009ee0:	3352      	adds	r3, #82	; 0x52
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	701a      	strb	r2, [r3, #0]
#ifdef EXTRADEBUG
        PrintEndpointDescriptor(pep);
#endif
        if(pollInterval < pep->bInterval) // Set the polling interval as the largest polling interval obtained from endpoints
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	799b      	ldrb	r3, [r3, #6]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d204      	bcs.n	8009efe <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xca>
                pollInterval = pep->bInterval;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	799a      	ldrb	r2, [r3, #6]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        bNumEP++;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8009f04:	3301      	adds	r3, #1
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009f0e:	e002      	b.n	8009f16 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
                return;
 8009f10:	bf00      	nop
 8009f12:	e000      	b.n	8009f16 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR+0xe2>
            return;
 8009f14:	bf00      	nop
}
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <_ZThn4_N3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>:
        void EndpointXtract(uint8_t conf, uint8_t iface, uint8_t alt, uint8_t proto, const USB_ENDPOINT_DESCRIPTOR *ep);
 8009f20:	f1a0 0004 	sub.w	r0, r0, #4
 8009f24:	f7ff bf86 	b.w	8009e34 <_ZN3BTD14EndpointXtractEhhhhPK23USB_ENDPOINT_DESCRIPTOR>

08009f28 <_ZN3BTD7ReleaseEv>:
        D_PrintHex<uint8_t > (ep_ptr->bInterval, 0x80);
#endif
}

/* Performs a cleanup after failed Init() attempt */
uint8_t BTD::Release() {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
        Initialize(); // Set all variables, endpoint structs etc. to default values
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fedf 	bl	8009cf4 <_ZN3BTD10InitializeEv>
        pUsb->GetAddressPool().FreeAddress(bAddress);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff fa72 	bl	8009424 <_ZN3USB14GetAddressPoolEv>
 8009f40:	4603      	mov	r3, r0
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	3208      	adds	r2, #8
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	6879      	ldr	r1, [r7, #4]
 8009f4a:	f891 1050 	ldrb.w	r1, [r1, #80]	; 0x50
 8009f4e:	4618      	mov	r0, r3
 8009f50:	4790      	blx	r2
        return 0;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <_ZN3BTD4PollEv>:

uint8_t BTD::Poll() {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
        if(!bPollEnable)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8009f6a:	f083 0301 	eor.w	r3, r3, #1
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <_ZN3BTD4PollEv+0x1c>
                return 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	e025      	b.n	8009fc4 <_ZN3BTD4PollEv+0x68>
        if((int32_t)((uint32_t)millis() - qNextPollTime) >= 0L) { // Don't poll if shorter than polling interval
 8009f78:	f7f7 fdb6 	bl	8001ae8 <HAL_GetTick>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	4a13      	ldr	r2, [pc, #76]	; (8009fcc <_ZN3BTD4PollEv+0x70>)
 8009f80:	fba2 2303 	umull	r2, r3, r2, r3
 8009f84:	099a      	lsrs	r2, r3, #6
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	0fdb      	lsrs	r3, r3, #31
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d015      	beq.n	8009fc2 <_ZN3BTD4PollEv+0x66>
                qNextPollTime = (uint32_t)millis() + pollInterval; // Set new poll time
 8009f96:	f7f7 fda7 	bl	8001ae8 <HAL_GetTick>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4a0b      	ldr	r2, [pc, #44]	; (8009fcc <_ZN3BTD4PollEv+0x70>)
 8009f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa2:	099b      	lsrs	r3, r3, #6
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8009faa:	441a      	add	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	661a      	str	r2, [r3, #96]	; 0x60
                HCI_event_task(); // Poll the HCI event pipe
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f80d 	bl	8009fd0 <_ZN3BTD14HCI_event_taskEv>
                HCI_task(); // HCI state machine
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fb24 	bl	800a604 <_ZN3BTD8HCI_taskEv>
                ACL_event_task(); // Poll the ACL input pipe too
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fe4d 	bl	800ac5c <_ZN3BTD14ACL_event_taskEv>
        }
        return 0;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	10624dd3 	.word	0x10624dd3

08009fd0 <_ZN3BTD14HCI_event_taskEv>:
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
                if(btService[i])
                        btService[i]->disconnect();
};

void BTD::HCI_event_task() {
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af02      	add	r7, sp, #8
 8009fd6:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE; // Request more than 16 bytes anyway, the inTransfer routine will take care of this
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	81bb      	strh	r3, [r7, #12]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_EVENT_PIPE ].epAddr, &length, hcibuf, pollInterval); // Input on endpoint 1
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3389      	adds	r3, #137	; 0x89
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8009ff6:	f107 050c 	add.w	r5, r7, #12
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	462b      	mov	r3, r5
 800a000:	4622      	mov	r2, r4
 800a002:	f003 ff84 	bl	800df0e <_ZN3USB10inTransferEhhPtPhh>
 800a006:	4603      	mov	r3, r0
 800a008:	73fb      	strb	r3, [r7, #15]

        if(!rcode || rcode == hrNAK) { // Check for errors
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d003      	beq.n	800a018 <_ZN3BTD14HCI_event_taskEv+0x48>
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	2b04      	cmp	r3, #4
 800a014:	f040 82f1 	bne.w	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                switch(hcibuf[0]) { // Switch on event type
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a01e:	3b01      	subs	r3, #1
 800a020:	2b35      	cmp	r3, #53	; 0x35
 800a022:	f200 82ea 	bhi.w	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <_ZN3BTD14HCI_event_taskEv+0x5c>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a20d 	.word	0x0800a20d
 800a030:	0800a26d 	.word	0x0800a26d
 800a034:	0800a3c5 	.word	0x0800a3c5
 800a038:	0800a4af 	.word	0x0800a4af
 800a03c:	0800a421 	.word	0x0800a421
 800a040:	0800a56d 	.word	0x0800a56d
 800a044:	0800a453 	.word	0x0800a453
 800a048:	0800a5e5 	.word	0x0800a5e5
 800a04c:	0800a5e5 	.word	0x0800a5e5
 800a050:	0800a5fb 	.word	0x0800a5fb
 800a054:	0800a5fb 	.word	0x0800a5fb
 800a058:	0800a5e5 	.word	0x0800a5e5
 800a05c:	0800a5e5 	.word	0x0800a5e5
 800a060:	0800a105 	.word	0x0800a105
 800a064:	0800a5e5 	.word	0x0800a5e5
 800a068:	0800a5fb 	.word	0x0800a5fb
 800a06c:	0800a5fb 	.word	0x0800a5fb
 800a070:	0800a5e5 	.word	0x0800a5e5
 800a074:	0800a5e5 	.word	0x0800a5e5
 800a078:	0800a5fb 	.word	0x0800a5fb
 800a07c:	0800a5fb 	.word	0x0800a5fb
 800a080:	0800a53b 	.word	0x0800a53b
 800a084:	0800a565 	.word	0x0800a565
 800a088:	0800a5e5 	.word	0x0800a5e5
 800a08c:	0800a5e5 	.word	0x0800a5e5
 800a090:	0800a5e5 	.word	0x0800a5e5
 800a094:	0800a5e5 	.word	0x0800a5e5
 800a098:	0800a5fb 	.word	0x0800a5fb
 800a09c:	0800a5fb 	.word	0x0800a5fb
 800a0a0:	0800a5fb 	.word	0x0800a5fb
 800a0a4:	0800a5fb 	.word	0x0800a5fb
 800a0a8:	0800a5e5 	.word	0x0800a5e5
 800a0ac:	0800a5fb 	.word	0x0800a5fb
 800a0b0:	0800a5fb 	.word	0x0800a5fb
 800a0b4:	0800a5fb 	.word	0x0800a5fb
 800a0b8:	0800a5fb 	.word	0x0800a5fb
 800a0bc:	0800a5fb 	.word	0x0800a5fb
 800a0c0:	0800a5fb 	.word	0x0800a5fb
 800a0c4:	0800a5fb 	.word	0x0800a5fb
 800a0c8:	0800a5fb 	.word	0x0800a5fb
 800a0cc:	0800a5fb 	.word	0x0800a5fb
 800a0d0:	0800a5fb 	.word	0x0800a5fb
 800a0d4:	0800a5fb 	.word	0x0800a5fb
 800a0d8:	0800a5fb 	.word	0x0800a5fb
 800a0dc:	0800a5fb 	.word	0x0800a5fb
 800a0e0:	0800a5fb 	.word	0x0800a5fb
 800a0e4:	0800a5fb 	.word	0x0800a5fb
 800a0e8:	0800a5fb 	.word	0x0800a5fb
 800a0ec:	0800a5d5 	.word	0x0800a5d5
 800a0f0:	0800a5e5 	.word	0x0800a5e5
 800a0f4:	0800a5dd 	.word	0x0800a5dd
 800a0f8:	0800a5fb 	.word	0x0800a5fb
 800a0fc:	0800a5fb 	.word	0x0800a5fb
 800a100:	0800a5e5 	.word	0x0800a5e5
                        case EV_COMMAND_COMPLETE:
                                if(!hcibuf[5]) { // Check if command succeeded
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f040 826c 	bne.w	800a5e8 <_ZN3BTD14HCI_event_taskEv+0x618>
                                        hci_set_flag(HCI_FLAG_CMD_COMPLETE); // Set command complete flag
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        if((hcibuf[3] == 0x01) && (hcibuf[4] == 0x10)) { // Parameters from read local version information
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d114      	bne.n	800a156 <_ZN3BTD14HCI_event_taskEv+0x186>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a132:	2b10      	cmp	r3, #16
 800a134:	d10f      	bne.n	800a156 <_ZN3BTD14HCI_event_taskEv+0x186>
                                                hci_version = hcibuf[6]; // Used to check if it supports 2.0+EDR - see http://www.bluetooth.org/Technical/AssignedNumbers/hci.htm
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 208f 	ldrb.w	r2, [r3, #143]	; 0x8f
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                                                if(!hci_check_flag(HCI_FLAG_READ_VERSION)) {
                                                        Notify(PSTR("\r\nHCI version: "), 0x80);
                                                        D_PrintHex<uint8_t > (hci_version, 0x80);
                                                }
#endif
                                                hci_set_flag(HCI_FLAG_READ_VERSION);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a154:	e059      	b.n	800a20a <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x04) && (hcibuf[4] == 0x10)) { // Parameters from read local extended features
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d12a      	bne.n	800a1b6 <_ZN3BTD14HCI_event_taskEv+0x1e6>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a166:	2b10      	cmp	r3, #16
 800a168:	d125      	bne.n	800a1b6 <_ZN3BTD14HCI_event_taskEv+0x1e6>
                                                if(!hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a174:	2b00      	cmp	r3, #0
 800a176:	d114      	bne.n	800a1a2 <_ZN3BTD14HCI_event_taskEv+0x1d2>
                                                        for(uint8_t i = 0; i < 8; i++) {
                                                                Notify(PSTR(" "), 0x80);
                                                                D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                                        }
#endif
                                                        if(hcibuf[6] == 0) { // Page 0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10f      	bne.n	800a1a2 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                Notify(PSTR("\r\nDongle "), 0x80);
#endif
                                                                if(hcibuf[8 + 6] & (1U << 3)) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d004      	beq.n	800a19a <_ZN3BTD14HCI_event_taskEv+0x1ca>
                                                                        simple_pairing_supported = true;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 800a198:	e003      	b.n	800a1a2 <_ZN3BTD14HCI_event_taskEv+0x1d2>
#ifdef DEBUG_USB_HOST
                                                                        Notify(PSTR("supports"), 0x80);
#endif
                                                                } else {
                                                                        simple_pairing_supported = false;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
                                                                Notify(PSTR(" secure simple pairing (host support)"), 0x80);
#endif
                                                        }
                                                }

                                                hci_set_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800a1b4:	e029      	b.n	800a20a <_ZN3BTD14HCI_event_taskEv+0x23a>
                                        } else if((hcibuf[3] == 0x09) && (hcibuf[4] == 0x10)) { // Parameters from read local bluetooth address
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a1bc:	2b09      	cmp	r3, #9
 800a1be:	f040 8213 	bne.w	800a5e8 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a1c8:	2b10      	cmp	r3, #16
 800a1ca:	f040 820d 	bne.w	800a5e8 <_ZN3BTD14HCI_event_taskEv+0x618>
                                                for(uint8_t i = 0; i < 6; i++)
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	2b05      	cmp	r3, #5
 800a1d6:	d80e      	bhi.n	800a1f6 <_ZN3BTD14HCI_event_taskEv+0x226>
                                                        my_bdaddr[i] = hcibuf[6 + i];
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
 800a1da:	1d9a      	adds	r2, r3, #6
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	6879      	ldr	r1, [r7, #4]
 800a1e0:	440a      	add	r2, r1
 800a1e2:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	460a      	mov	r2, r1
 800a1ec:	751a      	strb	r2, [r3, #20]
                                                for(uint8_t i = 0; i < 6; i++)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	75fb      	strb	r3, [r7, #23]
 800a1f4:	e7ed      	b.n	800a1d2 <_ZN3BTD14HCI_event_taskEv+0x202>
                                                hci_set_flag(HCI_FLAG_READ_BDADDR);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a1fc:	f043 0320 	orr.w	r3, r3, #32
 800a200:	b29a      	uxth	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        }
                                }
                                break;
 800a208:	e1ee      	b.n	800a5e8 <_ZN3BTD14HCI_event_taskEv+0x618>
 800a20a:	e1ed      	b.n	800a5e8 <_ZN3BTD14HCI_event_taskEv+0x618>
#endif
                                }
                                break;

                        case EV_INQUIRY_COMPLETE:
                                if(inquiry_counter >= 5 && (pairWithWii || pairWithHIDDevice)) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a212:	2b04      	cmp	r3, #4
 800a214:	d921      	bls.n	800a25a <_ZN3BTD14HCI_event_taskEv+0x28a>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <_ZN3BTD14HCI_event_taskEv+0x25a>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a226:	2b00      	cmp	r3, #0
 800a228:	d017      	beq.n	800a25a <_ZN3BTD14HCI_event_taskEv+0x28a>
                                        inquiry_counter = 0;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nCouldn't find Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nCouldn't find HID device"), 0x80);
#endif
                                        connectToWii = false;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        pairWithWii = false;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                                        connectToHIDDevice = false;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                        pairWithHIDDevice = false;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                        hci_state = HCI_SCANNING_STATE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	220a      	movs	r2, #10
 800a256:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                }
                                inquiry_counter++;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a260:	3301      	adds	r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                                break;
 800a26a:	e1c6      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_INQUIRY_RESULT:
                                if(hcibuf[2]) { // Check that there is more than zero responses
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a272:	2b00      	cmp	r3, #0
 800a274:	f000 81ba 	beq.w	800a5ec <_ZN3BTD14HCI_event_taskEv+0x61c>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nNumber of responses: "), 0x80);
                                        Notify(hcibuf[2], 0x80);
#endif
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a278:	2300      	movs	r3, #0
 800a27a:	75bb      	strb	r3, [r7, #22]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a282:	7dba      	ldrb	r2, [r7, #22]
 800a284:	429a      	cmp	r2, r3
 800a286:	f080 81b1 	bcs.w	800a5ec <_ZN3BTD14HCI_event_taskEv+0x61c>
                                                uint8_t offset = 8 * hcibuf[2] + 3 * i;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	b2da      	uxtb	r2, r3
 800a294:	7dbb      	ldrb	r3, [r7, #22]
 800a296:	4619      	mov	r1, r3
 800a298:	0049      	lsls	r1, r1, #1
 800a29a:	440b      	add	r3, r1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	4413      	add	r3, r2
 800a2a0:	73bb      	strb	r3, [r7, #14]

                                                for(uint8_t j = 0; j < 3; j++)
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	757b      	strb	r3, [r7, #21]
 800a2a6:	7d7b      	ldrb	r3, [r7, #21]
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d811      	bhi.n	800a2d0 <_ZN3BTD14HCI_event_taskEv+0x300>
                                                        classOfDevice[j] = hcibuf[j + 4 + offset];
 800a2ac:	7d7b      	ldrb	r3, [r7, #21]
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	441a      	add	r2, r3
 800a2b4:	7d7b      	ldrb	r3, [r7, #21]
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	460a      	mov	r2, r1
 800a2c4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                                for(uint8_t j = 0; j < 3; j++)
 800a2c8:	7d7b      	ldrb	r3, [r7, #21]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	757b      	strb	r3, [r7, #21]
 800a2ce:	e7ea      	b.n	800a2a6 <_ZN3BTD14HCI_event_taskEv+0x2d6>
                                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                                Notify(PSTR(" "), 0x80);
                                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif

                                                if(pairWithWii && classOfDevice[2] == 0x00 && (classOfDevice[1] == 0x05) && (classOfDevice[0] & 0x0C)) { // See http://wiibrew.org/wiki/Wiimote#SDP_information
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d038      	beq.n	800a34c <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d133      	bne.n	800a34c <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a2ea:	2b05      	cmp	r3, #5
 800a2ec:	d12e      	bne.n	800a34c <_ZN3BTD14HCI_event_taskEv+0x37c>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a2f4:	f003 030c 	and.w	r3, r3, #12
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d027      	beq.n	800a34c <_ZN3BTD14HCI_event_taskEv+0x37c>
                                                        checkRemoteName = true; // Check remote name to distinguish between the different controllers
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

                                                        for(uint8_t j = 0; j < 6; j++)
 800a304:	2300      	movs	r3, #0
 800a306:	753b      	strb	r3, [r7, #20]
 800a308:	7d3b      	ldrb	r3, [r7, #20]
 800a30a:	2b05      	cmp	r3, #5
 800a30c:	d814      	bhi.n	800a338 <_ZN3BTD14HCI_event_taskEv+0x368>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a30e:	7d3b      	ldrb	r3, [r7, #20]
 800a310:	1cd9      	adds	r1, r3, #3
 800a312:	7dba      	ldrb	r2, [r7, #22]
 800a314:	4613      	mov	r3, r2
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	4413      	add	r3, r2
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	18ca      	adds	r2, r1, r3
 800a31e:	7d3b      	ldrb	r3, [r7, #20]
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	440a      	add	r2, r1
 800a324:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	4413      	add	r3, r2
 800a32c:	460a      	mov	r2, r1
 800a32e:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a330:	7d3b      	ldrb	r3, [r7, #20]
 800a332:	3301      	adds	r3, #1
 800a334:	753b      	strb	r3, [r7, #20]
 800a336:	e7e7      	b.n	800a308 <_ZN3BTD14HCI_event_taskEv+0x338>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a342:	b29a      	uxth	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a34a:	e03a      	b.n	800a3c2 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                                } else if(pairWithHIDDevice && (classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad - see: http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a352:	2b00      	cmp	r3, #0
 800a354:	d031      	beq.n	800a3ba <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	2b05      	cmp	r3, #5
 800a362:	d12a      	bne.n	800a3ba <_ZN3BTD14HCI_event_taskEv+0x3ea>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a36a:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d023      	beq.n	800a3ba <_ZN3BTD14HCI_event_taskEv+0x3ea>
                                                        if(classOfDevice[0] & 0x40)
                                                                Notify(PSTR("\r\nKeyboard found"), 0x80);
                                                        if(classOfDevice[0] & 0x08)
                                                                Notify(PSTR("\r\nGamepad found"), 0x80);
#endif
                                                        for(uint8_t j = 0; j < 6; j++)
 800a372:	2300      	movs	r3, #0
 800a374:	74fb      	strb	r3, [r7, #19]
 800a376:	7cfb      	ldrb	r3, [r7, #19]
 800a378:	2b05      	cmp	r3, #5
 800a37a:	d814      	bhi.n	800a3a6 <_ZN3BTD14HCI_event_taskEv+0x3d6>
                                                                disc_bdaddr[j] = hcibuf[j + 3 + 6 * i];
 800a37c:	7cfb      	ldrb	r3, [r7, #19]
 800a37e:	1cd9      	adds	r1, r3, #3
 800a380:	7dba      	ldrb	r2, [r7, #22]
 800a382:	4613      	mov	r3, r2
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	4413      	add	r3, r2
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	18ca      	adds	r2, r1, r3
 800a38c:	7cfb      	ldrb	r3, [r7, #19]
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	440a      	add	r2, r1
 800a392:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4413      	add	r3, r2
 800a39a:	460a      	mov	r2, r1
 800a39c:	771a      	strb	r2, [r3, #28]
                                                        for(uint8_t j = 0; j < 6; j++)
 800a39e:	7cfb      	ldrb	r3, [r7, #19]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	74fb      	strb	r3, [r7, #19]
 800a3a4:	e7e7      	b.n	800a376 <_ZN3BTD14HCI_event_taskEv+0x3a6>

                                                        hci_set_flag(HCI_FLAG_DEVICE_FOUND);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                                        break;
 800a3b8:	e003      	b.n	800a3c2 <_ZN3BTD14HCI_event_taskEv+0x3f2>
                                        for(uint8_t i = 0; i < hcibuf[2]; i++) {
 800a3ba:	7dbb      	ldrb	r3, [r7, #22]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	75bb      	strb	r3, [r7, #22]
 800a3c0:	e75c      	b.n	800a27c <_ZN3BTD14HCI_event_taskEv+0x2ac>
                                                }
                                        }
                                }
                                break;
 800a3c2:	e113      	b.n	800a5ec <_ZN3BTD14HCI_event_taskEv+0x61c>

                        case EV_CONNECT_COMPLETE:
                                hci_set_flag(HCI_FLAG_CONNECT_EVENT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a3ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                if(!hcibuf[2]) { // Check if connected OK
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11a      	bne.n	800a416 <_ZN3BTD14HCI_event_taskEv+0x446>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nConnection established"), 0x80);
#endif
                                        hci_handle = hcibuf[3] | ((hcibuf[4] & 0x0F) << 8); // Store the handle for the ACL connection
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a3e6:	b21a      	sxth	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	b21b      	sxth	r3, r3
 800a3f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a3f6:	b21b      	sxth	r3, r3
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	b21b      	sxth	r3, r3
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	835a      	strh	r2, [r3, #26]
                                        hci_set_flag(HCI_FLAG_CONNECT_COMPLETE); // Set connection complete flag
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a408:	f043 0302 	orr.w	r3, r3, #2
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nConnection Failed: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                }
                                break;
 800a414:	e0f1      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2206      	movs	r2, #6
 800a41a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a41e:	e0ec      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_DISCONNECT_COMPLETE:
                                if(!hcibuf[2]) { // Check if disconnected OK
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a426:	2b00      	cmp	r3, #0
 800a428:	f040 80e2 	bne.w	800a5f0 <_ZN3BTD14HCI_event_taskEv+0x620>
                                        hci_set_flag(HCI_FLAG_DISCONNECT_COMPLETE); // Set disconnect command complete flag
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a432:	f043 0304 	orr.w	r3, r3, #4
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE); // Clear connection complete flag
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a444:	f023 0302 	bic.w	r3, r3, #2
 800a448:	b29a      	uxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a450:	e0ce      	b.n	800a5f0 <_ZN3BTD14HCI_event_taskEv+0x620>

                        case EV_REMOTE_NAME_COMPLETE:
                                if(!hcibuf[2]) { // Check if reading is OK
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f040 80cb 	bne.w	800a5f4 <_ZN3BTD14HCI_event_taskEv+0x624>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a45e:	2300      	movs	r3, #0
 800a460:	74bb      	strb	r3, [r7, #18]
 800a462:	7cbb      	ldrb	r3, [r7, #18]
 800a464:	2b1d      	cmp	r3, #29
 800a466:	d818      	bhi.n	800a49a <_ZN3BTD14HCI_event_taskEv+0x4ca>
                                                remote_name[i] = hcibuf[9 + i];
 800a468:	7cbb      	ldrb	r3, [r7, #18]
 800a46a:	f103 0209 	add.w	r2, r3, #9
 800a46e:	7cbb      	ldrb	r3, [r7, #18]
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	440a      	add	r2, r1
 800a474:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	4413      	add	r3, r2
 800a47c:	460a      	mov	r2, r1
 800a47e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
                                                if(remote_name[i] == '\0') // End of string
 800a482:	7cbb      	ldrb	r3, [r7, #18]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	4413      	add	r3, r2
 800a488:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <_ZN3BTD14HCI_event_taskEv+0x4c8>
                                        for(uint8_t i = 0; i < min(sizeof (remote_name), sizeof (hcibuf) - 9); i++) {
 800a490:	7cbb      	ldrb	r3, [r7, #18]
 800a492:	3301      	adds	r3, #1
 800a494:	74bb      	strb	r3, [r7, #18]
 800a496:	e7e4      	b.n	800a462 <_ZN3BTD14HCI_event_taskEv+0x492>
                                                        break;
 800a498:	bf00      	nop
                                        }
                                        // TODO: Always set '\0' in remote name!
                                        hci_set_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a4a0:	f043 0308 	orr.w	r3, r3, #8
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                }
                                break;
 800a4ac:	e0a2      	b.n	800a5f4 <_ZN3BTD14HCI_event_taskEv+0x624>

                        case EV_INCOMING_CONNECT:
                                for(uint8_t i = 0; i < 6; i++)
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	747b      	strb	r3, [r7, #17]
 800a4b2:	7c7b      	ldrb	r3, [r7, #17]
 800a4b4:	2b05      	cmp	r3, #5
 800a4b6:	d80e      	bhi.n	800a4d6 <_ZN3BTD14HCI_event_taskEv+0x506>
                                        disc_bdaddr[i] = hcibuf[i + 2];
 800a4b8:	7c7b      	ldrb	r3, [r7, #17]
 800a4ba:	1c9a      	adds	r2, r3, #2
 800a4bc:	7c7b      	ldrb	r3, [r7, #17]
 800a4be:	6879      	ldr	r1, [r7, #4]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	460a      	mov	r2, r1
 800a4cc:	771a      	strb	r2, [r3, #28]
                                for(uint8_t i = 0; i < 6; i++)
 800a4ce:	7c7b      	ldrb	r3, [r7, #17]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	747b      	strb	r3, [r7, #17]
 800a4d4:	e7ed      	b.n	800a4b2 <_ZN3BTD14HCI_event_taskEv+0x4e2>

                                for(uint8_t i = 0; i < 3; i++)
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	743b      	strb	r3, [r7, #16]
 800a4da:	7c3b      	ldrb	r3, [r7, #16]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d810      	bhi.n	800a502 <_ZN3BTD14HCI_event_taskEv+0x532>
                                        classOfDevice[i] = hcibuf[i + 8];
 800a4e0:	7c3b      	ldrb	r3, [r7, #16]
 800a4e2:	f103 0208 	add.w	r2, r3, #8
 800a4e6:	7c3b      	ldrb	r3, [r7, #16]
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f892 1089 	ldrb.w	r1, [r2, #137]	; 0x89
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	460a      	mov	r2, r1
 800a4f6:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
                                for(uint8_t i = 0; i < 3; i++)
 800a4fa:	7c3b      	ldrb	r3, [r7, #16]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	743b      	strb	r3, [r7, #16]
 800a500:	e7eb      	b.n	800a4da <_ZN3BTD14HCI_event_taskEv+0x50a>

                                if((classOfDevice[1] & 0x0F) == 0x05 && (classOfDevice[0] & 0xC8)) { // Check if it is a mouse, keyboard or a gamepad
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800a508:	f003 030f 	and.w	r3, r3, #15
 800a50c:	2b05      	cmp	r3, #5
 800a50e:	d10a      	bne.n	800a526 <_ZN3BTD14HCI_event_taskEv+0x556>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800a516:	f003 03c8 	and.w	r3, r3, #200	; 0xc8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <_ZN3BTD14HCI_event_taskEv+0x556>
                                        if(classOfDevice[0] & 0x40)
                                                Notify(PSTR("\r\nKeyboard is connecting"), 0x80);
                                        if(classOfDevice[0] & 0x08)
                                                Notify(PSTR("\r\nGamepad is connecting"), 0x80);
#endif
                                        incomingHIDDevice = true;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[1], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (classOfDevice[0], 0x80);
#endif
                                hci_set_flag(HCI_FLAG_INCOMING_REQUEST);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a52c:	f043 0310 	orr.w	r3, r3, #16
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                break;
 800a538:	e05f      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_PIN_CODE_REQUEST:
                                if(pairWithWii) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <_ZN3BTD14HCI_event_taskEv+0x57c>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPairing with Wiimote"), 0x80);
#endif
                                        hci_pin_code_request_reply();
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 feec 	bl	800b322 <_ZN3BTD26hci_pin_code_request_replyEv>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nNo pin was set"), 0x80);
#endif
                                        hci_pin_code_negative_request_reply();
                                }
                                break;
 800a54a:	e056      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                } else if(btdPin != NULL) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <_ZN3BTD14HCI_event_taskEv+0x58c>
                                        hci_pin_code_request_reply();
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fee4 	bl	800b322 <_ZN3BTD26hci_pin_code_request_replyEv>
                                break;
 800a55a:	e04e      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        hci_pin_code_negative_request_reply();
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 ff93 	bl	800b488 <_ZN3BTD35hci_pin_code_negative_request_replyEv>
                                break;
 800a562:	e04a      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_LINK_KEY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived Key Request"), 0x80);
#endif
                                hci_link_key_request_negative_reply();
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 ffca 	bl	800b4fe <_ZN3BTD35hci_link_key_request_negative_replyEv>
                                break;
 800a56a:	e046      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>

                        case EV_AUTHENTICATION_COMPLETE:
                                if(!hcibuf[2]) { // Check if pairing was successful
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800a572:	2b00      	cmp	r3, #0
 800a574:	d123      	bne.n	800a5be <_ZN3BTD14HCI_event_taskEv+0x5ee>
                                        if(pairWithWii && !connectToWii) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00c      	beq.n	800a59a <_ZN3BTD14HCI_event_taskEv+0x5ca>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a586:	f083 0301 	eor.w	r3, r3, #1
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d004      	beq.n	800a59a <_ZN3BTD14HCI_event_taskEv+0x5ca>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nPairing successful with Wiimote"), 0x80);
#endif
                                                connectToWii = true; // Used to indicate to the Wii service, that it should connect to this device
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                        D_PrintHex<uint8_t > (hcibuf[2], 0x80);
#endif
                                        hci_disconnect(hci_handle);
                                        hci_state = HCI_DISCONNECT_STATE;
                                }
                                break;
 800a598:	e02e      	b.n	800a5f8 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        } else if(pairWithHIDDevice && !connectToHIDDevice) {
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d029      	beq.n	800a5f8 <_ZN3BTD14HCI_event_taskEv+0x628>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5aa:	f083 0301 	eor.w	r3, r3, #1
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d021      	beq.n	800a5f8 <_ZN3BTD14HCI_event_taskEv+0x628>
                                                connectToHIDDevice = true; // Used to indicate to the BTHID service, that it should connect to this device
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                break;
 800a5bc:	e01c      	b.n	800a5f8 <_ZN3BTD14HCI_event_taskEv+0x628>
                                        hci_disconnect(hci_handle);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	8b5b      	ldrh	r3, [r3, #26]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 f882 	bl	800b6ce <_ZN3BTD14hci_disconnectEt>
                                        hci_state = HCI_DISCONNECT_STATE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2210      	movs	r2, #16
 800a5ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                break;
 800a5d2:	e011      	b.n	800a5f8 <_ZN3BTD14HCI_event_taskEv+0x628>

                        case EV_IO_CAPABILITY_REQUEST:
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nReceived IO Capability Request"), 0x80);
#endif
                                hci_io_capability_request_reply();
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 ffcd 	bl	800b574 <_ZN3BTD31hci_io_capability_request_replyEv>
                                break;
 800a5da:	e00e      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                        D_PrintHex<uint8_t > (hcibuf[8 + i], 0x80);
                                }
#endif
#endif
                                // Simply confirm the connection, as the host has no "NoInputNoOutput" capabilities
                                hci_user_confirmation_request_reply();
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 f810 	bl	800b602 <_ZN3BTD35hci_user_confirmation_request_replyEv>
                                break;
 800a5e2:	e00a      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                if(hcibuf[0] != 0x00) {
                                        Notify(PSTR("\r\nIgnore HCI Event: "), 0x80);
                                        D_PrintHex<uint8_t > (hcibuf[0], 0x80);
                                }
#endif
                                break;
 800a5e4:	bf00      	nop
 800a5e6:	e008      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a5e8:	bf00      	nop
 800a5ea:	e006      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a5ec:	bf00      	nop
 800a5ee:	e004      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a5f0:	bf00      	nop
 800a5f2:	e002      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a5f4:	bf00      	nop
 800a5f6:	e000      	b.n	800a5fa <_ZN3BTD14HCI_event_taskEv+0x62a>
                                break;
 800a5f8:	bf00      	nop
        else {
                Notify(PSTR("\r\nHCI event error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
}
 800a5fa:	bf00      	nop
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bdb0      	pop	{r4, r5, r7, pc}
 800a602:	bf00      	nop

0800a604 <_ZN3BTD8HCI_taskEv>:

/* Poll Bluetooth and print result */
void BTD::HCI_task() {
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
        switch(hci_state) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a612:	2b13      	cmp	r3, #19
 800a614:	f200 82ef 	bhi.w	800abf6 <_ZN3BTD8HCI_taskEv+0x5f2>
 800a618:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <_ZN3BTD8HCI_taskEv+0x1c>)
 800a61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61e:	bf00      	nop
 800a620:	0800a671 	.word	0x0800a671
 800a624:	0800a6ab 	.word	0x0800a6ab
 800a628:	0800a731 	.word	0x0800a731
 800a62c:	0800a751 	.word	0x0800a751
 800a630:	0800a771 	.word	0x0800a771
 800a634:	0800a7c5 	.word	0x0800a7c5
 800a638:	0800a86b 	.word	0x0800a86b
 800a63c:	0800a899 	.word	0x0800a899
 800a640:	0800a8d3 	.word	0x0800a8d3
 800a644:	0800a8fb 	.word	0x0800a8fb
 800a648:	0800a931 	.word	0x0800a931
 800a64c:	0800a98f 	.word	0x0800a98f
 800a650:	0800a9cd 	.word	0x0800a9cd
 800a654:	0800aaf3 	.word	0x0800aaf3
 800a658:	0800abf7 	.word	0x0800abf7
 800a65c:	0800ab39 	.word	0x0800ab39
 800a660:	0800ab67 	.word	0x0800ab67
 800a664:	0800a7fb 	.word	0x0800a7fb
 800a668:	0800a831 	.word	0x0800a831
 800a66c:	0800a851 	.word	0x0800a851
                case HCI_INIT_STATE:
                        hci_counter++;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a676:	3301      	adds	r3, #1
 800a678:	b29a      	uxth	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > hci_num_reset_loops) { // wait until we have looped x times to clear any old events
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a68c:	429a      	cmp	r2, r3
 800a68e:	f240 82b4 	bls.w	800abfa <_ZN3BTD8HCI_taskEv+0x5f6>
                                hci_reset();
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fb7d 	bl	800ad92 <_ZN3BTD9hci_resetEv>
                                hci_state = HCI_RESET_STATE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2201      	movs	r2, #1
 800a69c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        }
                        break;
 800a6a8:	e2a7      	b.n	800abfa <_ZN3BTD8HCI_taskEv+0x5f6>

                case HCI_RESET_STATE:
                        hci_counter++;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <_ZN3BTD8HCI_taskEv+0xdc>
                                hci_counter = 0;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Reset complete"), 0x80);
#endif
                                hci_state = HCI_CLASS_STATE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_write_class_of_device();
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 f830 	bl	800b73e <_ZN3BTD25hci_write_class_of_deviceEv>
                                Notify(PSTR("\r\nNo response to HCI Reset"), 0x80);
#endif
                                hci_state = HCI_INIT_STATE;
                                hci_counter = 0;
                        }
                        break;
 800a6de:	e28e      	b.n	800abfe <_ZN3BTD8HCI_taskEv+0x5fa>
                        } else if(hci_counter > hci_num_reset_loops) {
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	f240 8286 	bls.w	800abfe <_ZN3BTD8HCI_taskEv+0x5fa>
                                hci_num_reset_loops *= 10;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	0092      	lsls	r2, r2, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                if(hci_num_reset_loops > 2000)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 800a70e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a712:	d904      	bls.n	800a71e <_ZN3BTD8HCI_taskEv+0x11a>
                                        hci_num_reset_loops = 2000;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a71a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
                                hci_state = HCI_INIT_STATE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_counter = 0;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        break;
 800a72e:	e266      	b.n	800abfe <_ZN3BTD8HCI_taskEv+0x5fa>

                case HCI_CLASS_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8261 	beq.w	800ac02 <_ZN3BTD8HCI_taskEv+0x5fe>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWrite class of device"), 0x80);
#endif
                                hci_state = HCI_BDADDR_STATE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2203      	movs	r2, #3
 800a744:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                hci_read_bdaddr();
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fb72 	bl	800ae32 <_ZN3BTD15hci_read_bdaddrEv>
                        }
                        break;
 800a74e:	e258      	b.n	800ac02 <_ZN3BTD8HCI_taskEv+0x5fe>

                case HCI_BDADDR_STATE:
                        if(hci_check_flag(HCI_FLAG_READ_BDADDR)) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 8253 	beq.w	800ac06 <_ZN3BTD8HCI_taskEv+0x602>
                                        D_PrintHex<uint8_t > (my_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (my_bdaddr[0], 0x80);
#endif
                                hci_read_local_version_information();
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fb8a 	bl	800ae7a <_ZN3BTD34hci_read_local_version_informationEv>
                                hci_state = HCI_LOCAL_VERSION_STATE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2204      	movs	r2, #4
 800a76a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a76e:	e24a      	b.n	800ac06 <_ZN3BTD8HCI_taskEv+0x602>

                case HCI_LOCAL_VERSION_STATE: // The local version is used by the PS3BT class
                        if(hci_check_flag(HCI_FLAG_READ_VERSION)) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 8245 	beq.w	800ac0a <_ZN3BTD8HCI_taskEv+0x606>
                                if(btdName != NULL) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <_ZN3BTD8HCI_taskEv+0x19a>
                                        hci_write_local_name(btdName);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fc5d 	bl	800b04e <_ZN3BTD20hci_write_local_nameEPKc>
                                        hci_state = HCI_WRITE_NAME_STATE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2205      	movs	r2, #5
 800a798:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a79c:	e235      	b.n	800ac0a <_ZN3BTD8HCI_taskEv+0x606>
                                } else if(useSimplePairing) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <_ZN3BTD8HCI_taskEv+0x1b6>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fb89 	bl	800aec2 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2211      	movs	r2, #17
 800a7b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a7b8:	e227      	b.n	800ac0a <_ZN3BTD8HCI_taskEv+0x606>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2206      	movs	r2, #6
 800a7be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a7c2:	e222      	b.n	800ac0a <_ZN3BTD8HCI_taskEv+0x606>

                case HCI_WRITE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 821d 	beq.w	800ac0e <_ZN3BTD8HCI_taskEv+0x60a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nThe name was set to: "), 0x80);
                                NotifyStr(btdName, 0x80);
#endif
                                if(useSimplePairing) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d008      	beq.n	800a7f0 <_ZN3BTD8HCI_taskEv+0x1ec>
                                        hci_read_local_extended_features(0); // "Requests the normal LMP features as returned by Read_Local_Supported_Features"
 800a7de:	2100      	movs	r1, #0
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fb6e 	bl	800aec2 <_ZN3BTD32hci_read_local_extended_featuresEh>
                                        //hci_read_local_extended_features(1); // Read page 1
                                        hci_state = HCI_LOCAL_EXTENDED_FEATURES_STATE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2211      	movs	r2, #17
 800a7ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a7ee:	e20e      	b.n	800ac0e <_ZN3BTD8HCI_taskEv+0x60a>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2206      	movs	r2, #6
 800a7f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a7f8:	e209      	b.n	800ac0e <_ZN3BTD8HCI_taskEv+0x60a>

                case HCI_LOCAL_EXTENDED_FEATURES_STATE:
                        if(hci_check_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES)) {
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 8204 	beq.w	800ac12 <_ZN3BTD8HCI_taskEv+0x60e>
                                if(simple_pairing_supported) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800a810:	2b00      	cmp	r3, #0
 800a812:	d008      	beq.n	800a826 <_ZN3BTD8HCI_taskEv+0x222>
                                        hci_write_simple_pairing_mode(true);
 800a814:	2101      	movs	r1, #1
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fc9d 	bl	800b156 <_ZN3BTD29hci_write_simple_pairing_modeEb>
                                        hci_state = HCI_WRITE_SIMPLE_PAIRING_STATE;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2212      	movs	r2, #18
 800a820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
                        }
                        break;
 800a824:	e1f5      	b.n	800ac12 <_ZN3BTD8HCI_taskEv+0x60e>
                                        hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2206      	movs	r2, #6
 800a82a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a82e:	e1f0      	b.n	800ac12 <_ZN3BTD8HCI_taskEv+0x60e>

                case HCI_WRITE_SIMPLE_PAIRING_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 81eb 	beq.w	800ac16 <_ZN3BTD8HCI_taskEv+0x612>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSimple pairing was enabled"), 0x80);
#endif
                                hci_set_event_mask();
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fc4d 	bl	800b0e0 <_ZN3BTD18hci_set_event_maskEv>
                                hci_state = HCI_SET_EVENT_MASK_STATE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2213      	movs	r2, #19
 800a84a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a84e:	e1e2      	b.n	800ac16 <_ZN3BTD8HCI_taskEv+0x612>

                case HCI_SET_EVENT_MASK_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 81dd 	beq.w	800ac1a <_ZN3BTD8HCI_taskEv+0x616>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSet event mask completed"), 0x80);
#endif
                                hci_state = HCI_CHECK_DEVICE_SERVICE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2206      	movs	r2, #6
 800a864:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a868:	e1d7      	b.n	800ac1a <_ZN3BTD8HCI_taskEv+0x616>

                case HCI_CHECK_DEVICE_SERVICE:
                        if(pairWithHIDDevice || pairWithWii) { // Check if it should try to connect to a Wiimote
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a870:	2b00      	cmp	r3, #0
 800a872:	d104      	bne.n	800a87e <_ZN3BTD8HCI_taskEv+0x27a>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <_ZN3BTD8HCI_taskEv+0x28a>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nStarting inquiry\r\nPress 1 & 2 on the Wiimote\r\nOr press the SYNC button if you are using a Wii U Pro Controller or a Wii Balance Board"), 0x80);
                                else
                                        Notify(PSTR("\r\nPlease enable discovery of your device"), 0x80);
#endif
                                hci_inquiry();
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fc8f 	bl	800b1a2 <_ZN3BTD11hci_inquiryEv>
                                hci_state = HCI_INQUIRY_STATE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2207      	movs	r2, #7
 800a888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
                        break;
 800a88c:	e1d8      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                                hci_state = HCI_SCANNING_STATE; // Don't try to connect to a Wiimote
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	220a      	movs	r2, #10
 800a892:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a896:	e1d3      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>

                case HCI_INQUIRY_STATE:
                        if(hci_check_flag(HCI_FLAG_DEVICE_FOUND)) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 81bb 	beq.w	800ac1e <_ZN3BTD8HCI_taskEv+0x61a>
                                hci_inquiry_cancel(); // Stop inquiry
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fcb2 	bl	800b212 <_ZN3BTD18hci_inquiry_cancelEv>
                                if(pairWithWii)
                                        Notify(PSTR("Wiimote"), 0x80);
                                else
                                        Notify(PSTR("device"), 0x80);
#endif
                                if(checkRemoteName) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d007      	beq.n	800a8c8 <_ZN3BTD8HCI_taskEv+0x2c4>
                                        hci_remote_name(); // We need to know the name to distinguish between the Wiimote, the new Wiimote with Motion Plus inside, a Wii U Pro Controller and a Wii Balance Board
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fb74 	bl	800afa6 <_ZN3BTD15hci_remote_nameEv>
                                        hci_state = HCI_REMOTE_NAME_STATE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	220c      	movs	r2, #12
 800a8c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                } else
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
                        }
                        break;
 800a8c6:	e1aa      	b.n	800ac1e <_ZN3BTD8HCI_taskEv+0x61a>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2208      	movs	r2, #8
 800a8cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a8d0:	e1a5      	b.n	800ac1e <_ZN3BTD8HCI_taskEv+0x61a>

                case HCI_CONNECT_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CMD_COMPLETE)) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 81a0 	beq.w	800ac22 <_ZN3BTD8HCI_taskEv+0x61e>
                                if(pairWithWii)
                                        Notify(PSTR("\r\nConnecting to Wiimote"), 0x80);
                                else
                                        Notify(PSTR("\r\nConnecting to HID device"), 0x80);
#endif
                                checkRemoteName = false;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                                hci_connect();
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fcac 	bl	800b248 <_ZN3BTD11hci_connectEv>
                                hci_state = HCI_CONNECTED_DEVICE_STATE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2209      	movs	r2, #9
 800a8f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a8f8:	e193      	b.n	800ac22 <_ZN3BTD8HCI_taskEv+0x61e>

                case HCI_CONNECTED_DEVICE_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_EVENT)) {
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 818e 	beq.w	800ac26 <_ZN3BTD8HCI_taskEv+0x622>
                                if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <_ZN3BTD8HCI_taskEv+0x324>
                                        if(pairWithWii)
                                                Notify(PSTR("\r\nConnected to Wiimote"), 0x80);
                                        else
                                                Notify(PSTR("\r\nConnected to HID device"), 0x80);
#endif
                                        hci_authentication_request(); // This will start the pairing with the device
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fead 	bl	800b678 <_ZN3BTD26hci_authentication_requestEv>
                                        hci_state = HCI_SCANNING_STATE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220a      	movs	r2, #10
 800a922:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                        Notify(PSTR("\r\nTrying to connect one more time..."), 0x80);
#endif
                                        hci_connect(); // Try to connect one more time
                                }
                        }
                        break;
 800a926:	e17e      	b.n	800ac26 <_ZN3BTD8HCI_taskEv+0x622>
                                        hci_connect(); // Try to connect one more time
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fc8d 	bl	800b248 <_ZN3BTD11hci_connectEv>
                        break;
 800a92e:	e17a      	b.n	800ac26 <_ZN3BTD8HCI_taskEv+0x622>

                case HCI_SCANNING_STATE:
                        if(!connectToWii && !pairWithWii && !connectToHIDDevice && !pairWithHIDDevice) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a936:	f083 0301 	eor.w	r3, r3, #1
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 8174 	beq.w	800ac2a <_ZN3BTD8HCI_taskEv+0x626>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a948:	f083 0301 	eor.w	r3, r3, #1
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 816b 	beq.w	800ac2a <_ZN3BTD8HCI_taskEv+0x626>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a95a:	f083 0301 	eor.w	r3, r3, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 8162 	beq.w	800ac2a <_ZN3BTD8HCI_taskEv+0x626>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a96c:	f083 0301 	eor.w	r3, r3, #1
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 8159 	beq.w	800ac2a <_ZN3BTD8HCI_taskEv+0x626>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nWait For Incoming Connection Request"), 0x80);
#endif
                                hci_write_scan_enable();
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa29 	bl	800add0 <_ZN3BTD21hci_write_scan_enableEv>
                                waitingForConnection = true;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	721a      	strb	r2, [r3, #8]
                                hci_state = HCI_CONNECT_IN_STATE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	220b      	movs	r2, #11
 800a988:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800a98c:	e14d      	b.n	800ac2a <_ZN3BTD8HCI_taskEv+0x626>

                case HCI_CONNECT_IN_STATE:
                        if(hci_check_flag(HCI_FLAG_INCOMING_REQUEST)) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a994:	f003 0310 	and.w	r3, r3, #16
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00a      	beq.n	800a9b2 <_ZN3BTD8HCI_taskEv+0x3ae>
                                waitingForConnection = false;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	721a      	strb	r2, [r3, #8]
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nIncoming Connection Request"), 0x80);
#endif
                                hci_remote_name();
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 faff 	bl	800afa6 <_ZN3BTD15hci_remote_nameEv>
                                hci_state = HCI_REMOTE_NAME_STATE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	220c      	movs	r2, #12
 800a9ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
                                hci_state = HCI_DISCONNECT_STATE;
                        break;
 800a9b0:	e13d      	b.n	800ac2e <_ZN3BTD8HCI_taskEv+0x62a>
                        } else if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f000 8136 	beq.w	800ac2e <_ZN3BTD8HCI_taskEv+0x62a>
                                hci_state = HCI_DISCONNECT_STATE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2210      	movs	r2, #16
 800a9c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800a9ca:	e130      	b.n	800ac2e <_ZN3BTD8HCI_taskEv+0x62a>

                case HCI_REMOTE_NAME_STATE:
                        if(hci_check_flag(HCI_FLAG_REMOTE_NAME_COMPLETE)) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800a9d2:	f003 0308 	and.w	r3, r3, #8
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 812b 	beq.w	800ac32 <_ZN3BTD8HCI_taskEv+0x62e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nRemote Name: "), 0x80);
                                for(uint8_t i = 0; i < strlen(remote_name); i++)
                                        Notifyc(remote_name[i], 0x80);
#endif
                                if(strncmp((const char*)remote_name, "Nintendo", 8) == 0) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3322      	adds	r3, #34	; 0x22
 800a9e0:	2208      	movs	r2, #8
 800a9e2:	4999      	ldr	r1, [pc, #612]	; (800ac48 <_ZN3BTD8HCI_taskEv+0x644>)
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f004 fe71 	bl	800f6cc <strncmp>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d147      	bne.n	800aa80 <_ZN3BTD8HCI_taskEv+0x47c>
                                        incomingWii = true;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
                                        motionPlusInside = false;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                                        wiiUProController = false;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
                                        pairWiiUsingSync = false;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nWiimote is connecting"), 0x80);
#endif
                                        if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-TR", 22) == 0) {
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3322      	adds	r3, #34	; 0x22
 800aa14:	2216      	movs	r2, #22
 800aa16:	498d      	ldr	r1, [pc, #564]	; (800ac4c <_ZN3BTD8HCI_taskEv+0x648>)
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f004 fe57 	bl	800f6cc <strncmp>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d104      	bne.n	800aa2e <_ZN3BTD8HCI_taskEv+0x42a>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" with Motion Plus Inside"), 0x80);
#endif
                                                motionPlusInside = true;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa2c:	e028      	b.n	800aa80 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-CNT-01-UC", 22) == 0) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3322      	adds	r3, #34	; 0x22
 800aa32:	2216      	movs	r2, #22
 800aa34:	4986      	ldr	r1, [pc, #536]	; (800ac50 <_ZN3BTD8HCI_taskEv+0x64c>)
 800aa36:	4618      	mov	r0, r3
 800aa38:	f004 fe48 	bl	800f6cc <strncmp>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d110      	bne.n	800aa64 <_ZN3BTD8HCI_taskEv+0x460>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii U Pro Controller"), 0x80);
#endif
                                                wiiUProController = motionPlusInside = pairWiiUsingSync = true;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa62:	e00d      	b.n	800aa80 <_ZN3BTD8HCI_taskEv+0x47c>
                                        } else if(strncmp((const char*)remote_name, "Nintendo RVL-WBC-01", 19) == 0) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	3322      	adds	r3, #34	; 0x22
 800aa68:	2213      	movs	r2, #19
 800aa6a:	497a      	ldr	r1, [pc, #488]	; (800ac54 <_ZN3BTD8HCI_taskEv+0x650>)
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f004 fe2d 	bl	800f6cc <strncmp>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <_ZN3BTD8HCI_taskEv+0x47c>
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR(" - Wii Balance Board"), 0x80);
#endif
                                                pairWiiUsingSync = true;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
                                        }
                                }
                                if(classOfDevice[2] == 0 && classOfDevice[1] == 0x25 && classOfDevice[0] == 0x08 && strncmp((const char*)remote_name, "Wireless Controller", 19) == 0) {
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d117      	bne.n	800aaba <_ZN3BTD8HCI_taskEv+0x4b6>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800aa90:	2b25      	cmp	r3, #37	; 0x25
 800aa92:	d112      	bne.n	800aaba <_ZN3BTD8HCI_taskEv+0x4b6>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800aa9a:	2b08      	cmp	r3, #8
 800aa9c:	d10d      	bne.n	800aaba <_ZN3BTD8HCI_taskEv+0x4b6>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3322      	adds	r3, #34	; 0x22
 800aaa2:	2213      	movs	r2, #19
 800aaa4:	496c      	ldr	r1, [pc, #432]	; (800ac58 <_ZN3BTD8HCI_taskEv+0x654>)
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f004 fe10 	bl	800f6cc <strncmp>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <_ZN3BTD8HCI_taskEv+0x4b6>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nPS4/PS5 controller is connecting"), 0x80);
#endif
                                        incomingPSController = true;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                                }
                                if((pairWithWii || pairWithHIDDevice) && checkRemoteName)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d104      	bne.n	800aace <_ZN3BTD8HCI_taskEv+0x4ca>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d009      	beq.n	800aae2 <_ZN3BTD8HCI_taskEv+0x4de>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <_ZN3BTD8HCI_taskEv+0x4de>
                                        hci_state = HCI_CONNECT_DEVICE_STATE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2208      	movs	r2, #8
 800aadc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                                else {
                                        hci_accept_connection();
                                        hci_state = HCI_CONNECTED_STATE;
                                }
                        }
                        break;
 800aae0:	e0a7      	b.n	800ac32 <_ZN3BTD8HCI_taskEv+0x62e>
                                        hci_accept_connection();
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fa17 	bl	800af16 <_ZN3BTD21hci_accept_connectionEv>
                                        hci_state = HCI_CONNECTED_STATE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	220d      	movs	r2, #13
 800aaec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        break;
 800aaf0:	e09f      	b.n	800ac32 <_ZN3BTD8HCI_taskEv+0x62e>

                case HCI_CONNECTED_STATE:
                        if(hci_check_flag(HCI_FLAG_CONNECT_COMPLETE)) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 809a 	beq.w	800ac36 <_ZN3BTD8HCI_taskEv+0x632>
                                        D_PrintHex<uint8_t > (disc_bdaddr[i], 0x80);
                                        Notify(PSTR(":"), 0x80);
                                }
                                D_PrintHex<uint8_t > (disc_bdaddr[0], 0x80);
#endif
                                if(incomingPSController)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <_ZN3BTD8HCI_taskEv+0x510>
                                        connectToHIDDevice = true; // We should always connect to the PS4/PS5 controller
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

                                // Clear these flags for a new connection
                                l2capConnectionClaimed = false;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	725a      	strb	r2, [r3, #9]
                                sdpConnectionClaimed = false;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	729a      	strb	r2, [r3, #10]
                                rfcommConnectionClaimed = false;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	72da      	strb	r2, [r3, #11]

                                hci_event_flag = 0;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
                                hci_state = HCI_DONE_STATE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	220f      	movs	r2, #15
 800ab32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ab36:	e07e      	b.n	800ac36 <_ZN3BTD8HCI_taskEv+0x632>

                case HCI_DONE_STATE:
                        hci_counter++;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ab3e:	3301      	adds	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                        if(hci_counter > 1000) { // Wait until we have looped 1000 times to make sure that the L2CAP connection has been started
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800ab4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab52:	d972      	bls.n	800ac3a <_ZN3BTD8HCI_taskEv+0x636>
                                hci_counter = 0;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
                                hci_state = HCI_SCANNING_STATE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	220a      	movs	r2, #10
 800ab60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800ab64:	e069      	b.n	800ac3a <_ZN3BTD8HCI_taskEv+0x636>

                case HCI_DISCONNECT_STATE:
                        if(hci_check_flag(HCI_FLAG_DISCONNECT_COMPLETE)) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d064      	beq.n	800ac3e <_ZN3BTD8HCI_taskEv+0x63a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHCI Disconnected from Device"), 0x80);
#endif
                                hci_event_flag = 0; // Clear all flags
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

                                // Reset all buffers
                                memset(hcibuf, 0, BULK_MAXPKTSIZE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3389      	adds	r3, #137	; 0x89
 800ab80:	2240      	movs	r2, #64	; 0x40
 800ab82:	2100      	movs	r1, #0
 800ab84:	4618      	mov	r0, r3
 800ab86:	f004 fd55 	bl	800f634 <memset>
                                memset(l2capinbuf, 0, BULK_MAXPKTSIZE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	33c9      	adds	r3, #201	; 0xc9
 800ab8e:	2240      	movs	r2, #64	; 0x40
 800ab90:	2100      	movs	r1, #0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f004 fd4e 	bl	800f634 <memset>

                                connectToWii = incomingWii = pairWithWii = false;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                                connectToHIDDevice = incomingHIDDevice = pairWithHIDDevice = checkRemoteName = false;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                incomingPSController = false;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

                                hci_state = HCI_SCANNING_STATE;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	220a      	movs	r2, #10
 800abf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
                        }
                        break;
 800abf4:	e023      	b.n	800ac3e <_ZN3BTD8HCI_taskEv+0x63a>
                default:
                        break;
 800abf6:	bf00      	nop
 800abf8:	e022      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800abfa:	bf00      	nop
 800abfc:	e020      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800abfe:	bf00      	nop
 800ac00:	e01e      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac02:	bf00      	nop
 800ac04:	e01c      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac06:	bf00      	nop
 800ac08:	e01a      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac0a:	bf00      	nop
 800ac0c:	e018      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac0e:	bf00      	nop
 800ac10:	e016      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac12:	bf00      	nop
 800ac14:	e014      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac16:	bf00      	nop
 800ac18:	e012      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac1a:	bf00      	nop
 800ac1c:	e010      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac1e:	bf00      	nop
 800ac20:	e00e      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac22:	bf00      	nop
 800ac24:	e00c      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac26:	bf00      	nop
 800ac28:	e00a      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac2a:	bf00      	nop
 800ac2c:	e008      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac2e:	bf00      	nop
 800ac30:	e006      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac32:	bf00      	nop
 800ac34:	e004      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac36:	bf00      	nop
 800ac38:	e002      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac3a:	bf00      	nop
 800ac3c:	e000      	b.n	800ac40 <_ZN3BTD8HCI_taskEv+0x63c>
                        break;
 800ac3e:	bf00      	nop
        }
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	0800f78c 	.word	0x0800f78c
 800ac4c:	0800f798 	.word	0x0800f798
 800ac50:	0800f7b0 	.word	0x0800f7b0
 800ac54:	0800f7c8 	.word	0x0800f7c8
 800ac58:	0800f7dc 	.word	0x0800f7dc

0800ac5c <_ZN3BTD14ACL_event_taskEv>:

void BTD::ACL_event_task() {
 800ac5c:	b5b0      	push	{r4, r5, r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	6078      	str	r0, [r7, #4]
        uint16_t length = BULK_MAXPKTSIZE;
 800ac64:	2340      	movs	r3, #64	; 0x40
 800ac66:	817b      	strh	r3, [r7, #10]
        uint8_t rcode = pUsb->inTransfer(bAddress, epInfo[ BTD_DATAIN_PIPE ].epAddr, &length, l2capinbuf, pollInterval); // Input on endpoint 2
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 4057 	ldrb.w	r4, [r3, #87]	; 0x57
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	33c9      	adds	r3, #201	; 0xc9
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800ac82:	f107 050a 	add.w	r5, r7, #10
 800ac86:	9201      	str	r2, [sp, #4]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	462b      	mov	r3, r5
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	f003 f93e 	bl	800df0e <_ZN3USB10inTransferEhhPtPhh>
 800ac92:	4603      	mov	r3, r0
 800ac94:	737b      	strb	r3, [r7, #13]

        if(!rcode) { // Check for errors
 800ac96:	7b7b      	ldrb	r3, [r7, #13]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d125      	bne.n	800ace8 <_ZN3BTD14ACL_event_taskEv+0x8c>
                if(length > 0) { // Check if any data was read
 800ac9c:	897b      	ldrh	r3, [r7, #10]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d022      	beq.n	800ace8 <_ZN3BTD14ACL_event_taskEv+0x8c>
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d81d      	bhi.n	800ace8 <_ZN3BTD14ACL_event_taskEv+0x8c>
                                if(btService[i])
 800acac:	7bfb      	ldrb	r3, [r7, #15]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	3318      	adds	r3, #24
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d011      	beq.n	800ace0 <_ZN3BTD14ACL_event_taskEv+0x84>
                                        btService[i]->ACLData(l2capinbuf);
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	3318      	adds	r3, #24
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	6858      	ldr	r0, [r3, #4]
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	3318      	adds	r3, #24
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	32c9      	adds	r2, #201	; 0xc9
 800acdc:	4611      	mov	r1, r2
 800acde:	4798      	blx	r3
                        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	3301      	adds	r3, #1
 800ace4:	73fb      	strb	r3, [r7, #15]
 800ace6:	e7de      	b.n	800aca6 <_ZN3BTD14ACL_event_taskEv+0x4a>
        else if(rcode != hrNAK) {
                Notify(PSTR("\r\nACL data in error: "), 0x80);
                D_PrintHex<uint8_t > (rcode, 0x80);
        }
#endif
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ace8:	2300      	movs	r3, #0
 800acea:	73bb      	strb	r3, [r7, #14]
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d81c      	bhi.n	800ad2c <_ZN3BTD14ACL_event_taskEv+0xd0>
                if(btService[i])
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	3318      	adds	r3, #24
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	4413      	add	r3, r2
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d010      	beq.n	800ad24 <_ZN3BTD14ACL_event_taskEv+0xc8>
                        btService[i]->Run();
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	3318      	adds	r3, #24
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	6859      	ldr	r1, [r3, #4]
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	3318      	adds	r3, #24
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4608      	mov	r0, r1
 800ad22:	4798      	blx	r3
        for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++)
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	3301      	adds	r3, #1
 800ad28:	73bb      	strb	r3, [r7, #14]
 800ad2a:	e7df      	b.n	800acec <_ZN3BTD14ACL_event_taskEv+0x90>
}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bdb0      	pop	{r4, r5, r7, pc}

0800ad34 <_ZN3BTD11HCI_CommandEPht>:

/************************************************************/
/*                    HCI Commands                        */

/************************************************************/
void BTD::HCI_Command(uint8_t* data, uint16_t nbytes) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08c      	sub	sp, #48	; 0x30
 800ad38:	af08      	add	r7, sp, #32
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	80fb      	strh	r3, [r7, #6]
        hci_clear_flag(HCI_FLAG_CMD_COMPLETE);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ad48:	f023 0301 	bic.w	r3, r3, #1
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        pUsb->ctrlReq(bAddress, epInfo[ BTD_CONTROL_PIPE ].epAddr, bmREQ_HCI_OUT, 0x00, 0x00, 0x00, 0x00, nbytes, nbytes, data, NULL);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800ad64:	2300      	movs	r3, #0
 800ad66:	9307      	str	r3, [sp, #28]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	9306      	str	r3, [sp, #24]
 800ad6c:	88fb      	ldrh	r3, [r7, #6]
 800ad6e:	9305      	str	r3, [sp, #20]
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	2300      	movs	r3, #0
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	2300      	movs	r3, #0
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	2320      	movs	r3, #32
 800ad86:	f002 ffea 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <_ZN3BTD9hci_resetEv>:

void BTD::hci_reset() {
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b082      	sub	sp, #8
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
        hci_event_flag = 0; // Clear all the flags
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x03; // HCI OCF = 3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2203      	movs	r2, #3
 800ada6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	220c      	movs	r2, #12
 800adae:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3389      	adds	r3, #137	; 0x89
 800adbe:	2203      	movs	r2, #3
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff ffb6 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <_ZN3BTD21hci_write_scan_enableEv>:

void BTD::hci_write_scan_enable() {
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_INCOMING_REQUEST);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800adde:	f023 0310 	bic.w	r3, r3, #16
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x1A; // HCI OCF = 1A
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	221a      	movs	r2, #26
 800adee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	220c      	movs	r2, #12
 800adf6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        if(btdName != NULL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <_ZN3BTD21hci_write_scan_enableEv+0x44>
                hcibuf[3] = 0x03; // Inquiry Scan enabled. Page Scan enabled.
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2203      	movs	r2, #3
 800ae0e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ae12:	e003      	b.n	800ae1c <_ZN3BTD21hci_write_scan_enableEv+0x4c>
        else
                hcibuf[3] = 0x02; // Inquiry Scan disabled. Page Scan enabled.
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3389      	adds	r3, #137	; 0x89
 800ae20:	2204      	movs	r2, #4
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff ff85 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800ae2a:	bf00      	nop
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <_ZN3BTD15hci_read_bdaddrEv>:
        hcibuf[3] = 0x00; // Inquiry Scan disabled. Page Scan disabled.

        HCI_Command(hcibuf, 4);
}

void BTD::hci_read_bdaddr() {
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_BDADDR);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ae40:	f023 0320 	bic.w	r3, r3, #32
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2209      	movs	r2, #9
 800ae50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2210      	movs	r2, #16
 800ae58:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3389      	adds	r3, #137	; 0x89
 800ae68:	2203      	movs	r2, #3
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff ff61 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <_ZN3BTD34hci_read_local_version_informationEv>:

void BTD::hci_read_local_version_information() {
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b082      	sub	sp, #8
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_READ_VERSION);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ae88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01; // HCI OCF = 1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2210      	movs	r2, #16
 800aea0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3389      	adds	r3, #137	; 0x89
 800aeb0:	2203      	movs	r2, #3
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff ff3d 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <_ZN3BTD32hci_read_local_extended_featuresEh>:

void BTD::hci_read_local_extended_features(uint8_t page_number) {
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b082      	sub	sp, #8
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	460b      	mov	r3, r1
 800aecc:	70fb      	strb	r3, [r7, #3]
        hci_clear_flag(HCI_FLAG_LOCAL_EXTENDED_FEATURES);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800aed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x04; // HCI OCF = 4
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2204      	movs	r2, #4
 800aee4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x04 << 2; // HCI OGF = 4
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2210      	movs	r2, #16
 800aeec:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x01; // parameter length = 1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = page_number;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	78fa      	ldrb	r2, [r7, #3]
 800aefc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3389      	adds	r3, #137	; 0x89
 800af04:	2204      	movs	r2, #4
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff ff13 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <_ZN3BTD21hci_accept_connectionEv>:

void BTD::hci_accept_connection() {
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800af24:	f023 0302 	bic.w	r3, r3, #2
 800af28:	b29a      	uxth	r2, r3
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x09; // HCI OCF = 9
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2209      	movs	r2, #9
 800af34:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2204      	movs	r2, #4
 800af3c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x07; // parameter length 7
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2207      	movs	r2, #7
 800af44:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	7f1a      	ldrb	r2, [r3, #28]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	7f5a      	ldrb	r2, [r3, #29]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	7f9a      	ldrb	r2, [r3, #30]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	7fda      	ldrb	r2, [r3, #31]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 2020 	ldrb.w	r2, [r3, #32]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x00; // Switch role to master
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

        HCI_Command(hcibuf, 10);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3389      	adds	r3, #137	; 0x89
 800af94:	220a      	movs	r2, #10
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7ff fecb 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <_ZN3BTD15hci_remote_nameEv>:

void BTD::hci_remote_name() {
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b082      	sub	sp, #8
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_REMOTE_NAME_COMPLETE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800afb4:	f023 0308 	bic.w	r3, r3, #8
 800afb8:	b29a      	uxth	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x19; // HCI OCF = 19
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2219      	movs	r2, #25
 800afc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2204      	movs	r2, #4
 800afcc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0A; // parameter length = 10
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	220a      	movs	r2, #10
 800afd4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7f1a      	ldrb	r2, [r3, #28]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	7f5a      	ldrb	r2, [r3, #29]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	7f9a      	ldrb	r2, [r3, #30]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	7fda      	ldrb	r2, [r3, #31]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x01; // Page Scan Repetition Mode
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // Reserved
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // Clock offset - low byte
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Clock offset - high byte
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

        HCI_Command(hcibuf, 13);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3389      	adds	r3, #137	; 0x89
 800b03c:	220d      	movs	r2, #13
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff fe77 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <_ZN3BTD20hci_write_local_nameEPKc>:

void BTD::hci_write_local_name(const char* name) {
 800b04e:	b590      	push	{r4, r7, lr}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
        hcibuf[0] = 0x13; // HCI OCF = 13
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2213      	movs	r2, #19
 800b05c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	220c      	movs	r2, #12
 800b064:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = strlen(name) + 1; // parameter length = the length of the string + end byte
 800b068:	6838      	ldr	r0, [r7, #0]
 800b06a:	f7f5 f8cb 	bl	8000204 <strlen>
 800b06e:	4603      	mov	r3, r0
 800b070:	b2db      	uxtb	r3, r3
 800b072:	3301      	adds	r3, #1
 800b074:	b2da      	uxtb	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        uint8_t i;
        for(i = 0; i < strlen(name); i++)
 800b07c:	2300      	movs	r3, #0
 800b07e:	73fb      	strb	r3, [r7, #15]
 800b080:	7bfc      	ldrb	r4, [r7, #15]
 800b082:	6838      	ldr	r0, [r7, #0]
 800b084:	f7f5 f8be 	bl	8000204 <strlen>
 800b088:	4603      	mov	r3, r0
 800b08a:	429c      	cmp	r4, r3
 800b08c:	d20e      	bcs.n	800b0ac <_ZN3BTD20hci_write_local_nameEPKc+0x5e>
                hcibuf[i + 3] = name[i];
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	441a      	add	r2, r3
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	3303      	adds	r3, #3
 800b098:	7811      	ldrb	r1, [r2, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	4413      	add	r3, r2
 800b09e:	460a      	mov	r2, r1
 800b0a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        for(i = 0; i < strlen(name); i++)
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	73fb      	strb	r3, [r7, #15]
 800b0aa:	e7e9      	b.n	800b080 <_ZN3BTD20hci_write_local_nameEPKc+0x32>
        hcibuf[i + 3] = 0x00; // End of string
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	3303      	adds	r3, #3
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

        HCI_Command(hcibuf, 4 + strlen(name));
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f103 0489 	add.w	r4, r3, #137	; 0x89
 800b0c0:	6838      	ldr	r0, [r7, #0]
 800b0c2:	f7f5 f89f 	bl	8000204 <strlen>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fe2e 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b0d8:	bf00      	nop
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd90      	pop	{r4, r7, pc}

0800b0e0 <_ZN3BTD18hci_set_event_maskEv>:

void BTD::hci_set_event_mask() {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x01; // HCI OCF = 01
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	220c      	movs	r2, #12
 800b0f4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x08;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2208      	movs	r2, #8
 800b0fc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        // The first 6 bytes are the default of 1FFF FFFF FFFF
        // However we need to set bits 48-55 for simple pairing to work
        hcibuf[3] = 0xFF;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	22ff      	movs	r2, #255	; 0xff
 800b104:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0xFF;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	22ff      	movs	r2, #255	; 0xff
 800b10c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0xFF;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	22ff      	movs	r2, #255	; 0xff
 800b114:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0xFF;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	22ff      	movs	r2, #255	; 0xff
 800b11c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0xFF;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	22ff      	movs	r2, #255	; 0xff
 800b124:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = 0x1F;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	221f      	movs	r2, #31
 800b12c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0xFF; // Enable bits 48-55 used for simple pairing
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	22ff      	movs	r2, #255	; 0xff
 800b134:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

        HCI_Command(hcibuf, 11);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3389      	adds	r3, #137	; 0x89
 800b144:	220b      	movs	r2, #11
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fdf3 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b14e:	bf00      	nop
 800b150:	3708      	adds	r7, #8
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <_ZN3BTD29hci_write_simple_pairing_modeEb>:

void BTD::hci_write_simple_pairing_mode(bool enable) {
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	460b      	mov	r3, r1
 800b160:	70fb      	strb	r3, [r7, #3]
        hcibuf[0] = 0x56; // HCI OCF = 56
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2256      	movs	r2, #86	; 0x56
 800b166:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	220c      	movs	r2, #12
 800b16e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 1; // parameter length = 1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = enable ? 1 : 0;
 800b17a:	78fb      	ldrb	r3, [r7, #3]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x2e>
 800b180:	2201      	movs	r2, #1
 800b182:	e000      	b.n	800b186 <_ZN3BTD29hci_write_simple_pairing_modeEb+0x30>
 800b184:	2200      	movs	r2, #0
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

        HCI_Command(hcibuf, 4);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3389      	adds	r3, #137	; 0x89
 800b190:	2204      	movs	r2, #4
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fdcd 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <_ZN3BTD11hci_inquiryEv>:

void BTD::hci_inquiry() {
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
        hci_clear_flag(HCI_FLAG_DEVICE_FOUND);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b1b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x01;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2204      	movs	r2, #4
 800b1c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x05; // Parameter Total Length = 5
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2205      	movs	r2, #5
 800b1d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x33; // LAP: Genera/Unlimited Inquiry Access Code (GIAC = 0x9E8B33) - see https://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2233      	movs	r2, #51	; 0x33
 800b1d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x8B;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	228b      	movs	r2, #139	; 0x8b
 800b1e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x9E;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	229e      	movs	r2, #158	; 0x9e
 800b1e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = 0x30; // Inquiry time = 61.44 sec (maximum)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2230      	movs	r2, #48	; 0x30
 800b1f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = 0x0A; // 10 number of responses
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	220a      	movs	r2, #10
 800b1f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        HCI_Command(hcibuf, 8);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3389      	adds	r3, #137	; 0x89
 800b200:	2208      	movs	r2, #8
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff fd95 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <_ZN3BTD18hci_inquiry_cancelEv>:

void BTD::hci_inquiry_cancel() {
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x02;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2202      	movs	r2, #2
 800b21e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2204      	movs	r2, #4
 800b226:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x00; // Parameter Total Length = 0
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b

        HCI_Command(hcibuf, 3);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3389      	adds	r3, #137	; 0x89
 800b236:	2203      	movs	r2, #3
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7ff fd7a 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <_ZN3BTD11hci_connectEv>:

void BTD::hci_connect() {
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
        hci_connect(disc_bdaddr); // Use last discovered device
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	331c      	adds	r3, #28
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f804 	bl	800b264 <_ZN3BTD11hci_connectEPh>
}
 800b25c:	bf00      	nop
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <_ZN3BTD11hci_connectEPh>:

void BTD::hci_connect(uint8_t *bdaddr) {
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
        hci_clear_flag(HCI_FLAG_CONNECT_COMPLETE | HCI_FLAG_CONNECT_EVENT);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b274:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b278:	b29a      	uxth	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x05; // HCI OCF = 5
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2205      	movs	r2, #5
 800b284:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2204      	movs	r2, #4
 800b28c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x0D; // parameter Total Length = 13
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	220d      	movs	r2, #13
 800b294:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = bdaddr[0]; // 6 octet bdaddr (LSB)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = bdaddr[1];
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	785a      	ldrb	r2, [r3, #1]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = bdaddr[2];
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	789a      	ldrb	r2, [r3, #2]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = bdaddr[3];
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	78da      	ldrb	r2, [r3, #3]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = bdaddr[4];
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	791a      	ldrb	r2, [r3, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = bdaddr[5];
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	795a      	ldrb	r2, [r3, #5]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x18; // DM1 or DH1 may be used
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2218      	movs	r2, #24
 800b2d8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0xCC; // DM3, DH3, DM5, DH5 may be used
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	22cc      	movs	r2, #204	; 0xcc
 800b2e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x01; // Page repetition mode R1
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        hcibuf[12] = 0x00; // Reserved
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
        hcibuf[13] = 0x00; // Clock offset
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
        hcibuf[14] = 0x00; // Invalid clock offset
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
        hcibuf[15] = 0x00; // Do not allow role switch
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        HCI_Command(hcibuf, 16);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3389      	adds	r3, #137	; 0x89
 800b310:	2210      	movs	r2, #16
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff fd0d 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <_ZN3BTD26hci_pin_code_request_replyEv>:

void BTD::hci_pin_code_request_reply() {
 800b322:	b590      	push	{r4, r7, lr}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0D; // HCI OCF = 0D
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	220d      	movs	r2, #13
 800b32e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2204      	movs	r2, #4
 800b336:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x17; // parameter length 23
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2217      	movs	r2, #23
 800b33e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7f1a      	ldrb	r2, [r3, #28]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	7f5a      	ldrb	r2, [r3, #29]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	7f9a      	ldrb	r2, [r3, #30]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	7fda      	ldrb	r2, [r3, #31]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        if(pairWithWii) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d03f      	beq.n	800b40c <_ZN3BTD26hci_pin_code_request_replyEv+0xea>
                hcibuf[9] = 6; // Pin length is the length of the Bluetooth address
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2206      	movs	r2, #6
 800b390:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                if(pairWiiUsingSync) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d013      	beq.n	800b3c6 <_ZN3BTD26hci_pin_code_request_replyEv+0xa4>
#ifdef DEBUG_USB_HOST
                        Notify(PSTR("\r\nPairing with Wii controller via SYNC"), 0x80);
#endif
                        for(uint8_t i = 0; i < 6; i++)
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
 800b3a4:	2b05      	cmp	r3, #5
 800b3a6:	d822      	bhi.n	800b3ee <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = my_bdaddr[i]; // The pin is the Bluetooth dongles Bluetooth address backwards
 800b3a8:	7bfa      	ldrb	r2, [r7, #15]
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	330a      	adds	r3, #10
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	440a      	add	r2, r1
 800b3b2:	7d11      	ldrb	r1, [r2, #20]
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	460a      	mov	r2, r1
 800b3ba:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	73fb      	strb	r3, [r7, #15]
 800b3c4:	e7ed      	b.n	800b3a2 <_ZN3BTD26hci_pin_code_request_replyEv+0x80>
                } else {
                        for(uint8_t i = 0; i < 6; i++)
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	73bb      	strb	r3, [r7, #14]
 800b3ca:	7bbb      	ldrb	r3, [r7, #14]
 800b3cc:	2b05      	cmp	r3, #5
 800b3ce:	d80e      	bhi.n	800b3ee <_ZN3BTD26hci_pin_code_request_replyEv+0xcc>
                                hcibuf[10 + i] = disc_bdaddr[i]; // The pin is the Wiimote's Bluetooth address backwards
 800b3d0:	7bba      	ldrb	r2, [r7, #14]
 800b3d2:	7bbb      	ldrb	r3, [r7, #14]
 800b3d4:	330a      	adds	r3, #10
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	440a      	add	r2, r1
 800b3da:	7f11      	ldrb	r1, [r2, #28]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	4413      	add	r3, r2
 800b3e0:	460a      	mov	r2, r1
 800b3e2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                        for(uint8_t i = 0; i < 6; i++)
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	73bb      	strb	r3, [r7, #14]
 800b3ec:	e7ed      	b.n	800b3ca <_ZN3BTD26hci_pin_code_request_replyEv+0xa8>
                }
                for(uint8_t i = 16; i < 26; i++)
 800b3ee:	2310      	movs	r3, #16
 800b3f0:	737b      	strb	r3, [r7, #13]
 800b3f2:	7b7b      	ldrb	r3, [r7, #13]
 800b3f4:	2b19      	cmp	r3, #25
 800b3f6:	d83c      	bhi.n	800b472 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i] = 0x00; // The rest should be 0
 800b3f8:	7b7b      	ldrb	r3, [r7, #13]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(uint8_t i = 16; i < 26; i++)
 800b404:	7b7b      	ldrb	r3, [r7, #13]
 800b406:	3301      	adds	r3, #1
 800b408:	737b      	strb	r3, [r7, #13]
 800b40a:	e7f2      	b.n	800b3f2 <_ZN3BTD26hci_pin_code_request_replyEv+0xd0>
        } else {
                hcibuf[9] = strlen(btdPin); // Length of pin
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4618      	mov	r0, r3
 800b412:	f7f4 fef7 	bl	8000204 <strlen>
 800b416:	4603      	mov	r3, r0
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                uint8_t i;
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b420:	2300      	movs	r3, #0
 800b422:	733b      	strb	r3, [r7, #12]
 800b424:	7b3c      	ldrb	r4, [r7, #12]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7f4 feea 	bl	8000204 <strlen>
 800b430:	4603      	mov	r3, r0
 800b432:	429c      	cmp	r4, r3
 800b434:	d20f      	bcs.n	800b456 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
                        hcibuf[i + 10] = btdPin[i];
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	7b3b      	ldrb	r3, [r7, #12]
 800b43c:	441a      	add	r2, r3
 800b43e:	7b3b      	ldrb	r3, [r7, #12]
 800b440:	330a      	adds	r3, #10
 800b442:	7811      	ldrb	r1, [r2, #0]
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	4413      	add	r3, r2
 800b448:	460a      	mov	r2, r1
 800b44a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(i = 0; i < strlen(btdPin); i++) // The maximum size of the pin is 16
 800b44e:	7b3b      	ldrb	r3, [r7, #12]
 800b450:	3301      	adds	r3, #1
 800b452:	733b      	strb	r3, [r7, #12]
 800b454:	e7e6      	b.n	800b424 <_ZN3BTD26hci_pin_code_request_replyEv+0x102>
                for(; i < 16; i++)
 800b456:	7b3b      	ldrb	r3, [r7, #12]
 800b458:	2b0f      	cmp	r3, #15
 800b45a:	d80a      	bhi.n	800b472 <_ZN3BTD26hci_pin_code_request_replyEv+0x150>
                        hcibuf[i + 10] = 0x00; // The rest should be 0
 800b45c:	7b3b      	ldrb	r3, [r7, #12]
 800b45e:	330a      	adds	r3, #10
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	4413      	add	r3, r2
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                for(; i < 16; i++)
 800b46a:	7b3b      	ldrb	r3, [r7, #12]
 800b46c:	3301      	adds	r3, #1
 800b46e:	733b      	strb	r3, [r7, #12]
 800b470:	e7f1      	b.n	800b456 <_ZN3BTD26hci_pin_code_request_replyEv+0x134>
        }

        HCI_Command(hcibuf, 26);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3389      	adds	r3, #137	; 0x89
 800b476:	221a      	movs	r2, #26
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7ff fc5a 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b480:	bf00      	nop
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bd90      	pop	{r4, r7, pc}

0800b488 <_ZN3BTD35hci_pin_code_negative_request_replyEv>:

void BTD::hci_pin_code_negative_request_reply() {
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0E; // HCI OCF = 0E
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	220e      	movs	r2, #14
 800b494:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2204      	movs	r2, #4
 800b49c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2206      	movs	r2, #6
 800b4a4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	7f1a      	ldrb	r2, [r3, #28]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	7f5a      	ldrb	r2, [r3, #29]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7f9a      	ldrb	r2, [r3, #30]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7fda      	ldrb	r2, [r3, #31]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3389      	adds	r3, #137	; 0x89
 800b4ec:	2209      	movs	r2, #9
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff fc1f 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b4f6:	bf00      	nop
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <_ZN3BTD35hci_link_key_request_negative_replyEv>:

void BTD::hci_link_key_request_negative_reply() {
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x0C; // HCI OCF = 0C
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	220c      	movs	r2, #12
 800b50a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2204      	movs	r2, #4
 800b512:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2206      	movs	r2, #6
 800b51a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	7f1a      	ldrb	r2, [r3, #28]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	7f5a      	ldrb	r2, [r3, #29]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7f9a      	ldrb	r2, [r3, #30]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7fda      	ldrb	r2, [r3, #31]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	3389      	adds	r3, #137	; 0x89
 800b562:	2209      	movs	r2, #9
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff fbe4 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b56c:	bf00      	nop
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <_ZN3BTD31hci_io_capability_request_replyEv>:

void BTD::hci_io_capability_request_reply() {
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2B; // HCI OCF = 2B
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	222b      	movs	r2, #43	; 0x2b
 800b580:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2204      	movs	r2, #4
 800b588:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x09;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2209      	movs	r2, #9
 800b590:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	7f1a      	ldrb	r2, [r3, #28]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7f5a      	ldrb	r2, [r3, #29]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7f9a      	ldrb	r2, [r3, #30]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7fda      	ldrb	r2, [r3, #31]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        hcibuf[9] = 0x03; // NoInputNoOutput
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2203      	movs	r2, #3
 800b5d8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        hcibuf[10] = 0x00; // OOB authentication data not present
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
        hcibuf[11] = 0x00; // MITM Protection Not Required – No Bonding. Numeric comparison with automatic accept allowed
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

        HCI_Command(hcibuf, 12);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	3389      	adds	r3, #137	; 0x89
 800b5f0:	220c      	movs	r2, #12
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff fb9d 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <_ZN3BTD35hci_user_confirmation_request_replyEv>:

void BTD::hci_user_confirmation_request_reply() {
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x2C; // HCI OCF = 2C
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	222c      	movs	r2, #44	; 0x2c
 800b60e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2204      	movs	r2, #4
 800b616:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x06; // parameter length 6
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2206      	movs	r2, #6
 800b61e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = disc_bdaddr[0]; // 6 octet bdaddr
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	7f1a      	ldrb	r2, [r3, #28]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = disc_bdaddr[1];
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	7f5a      	ldrb	r2, [r3, #29]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = disc_bdaddr[2];
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	7f9a      	ldrb	r2, [r3, #30]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        hcibuf[6] = disc_bdaddr[3];
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7fda      	ldrb	r2, [r3, #31]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        hcibuf[7] = disc_bdaddr[4];
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        hcibuf[8] = disc_bdaddr[5];
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        HCI_Command(hcibuf, 9);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3389      	adds	r3, #137	; 0x89
 800b666:	2209      	movs	r2, #9
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff fb62 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b670:	bf00      	nop
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <_ZN3BTD26hci_authentication_requestEv>:

void BTD::hci_authentication_request() {
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x11; // HCI OCF = 11
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2211      	movs	r2, #17
 800b684:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2204      	movs	r2, #4
 800b68c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x02; // parameter length = 2
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2202      	movs	r2, #2
 800b694:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(hci_handle & 0xFF); //connection handle - low byte
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8b5b      	ldrh	r3, [r3, #26]
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((hci_handle >> 8) & 0x0F); //connection handle - high byte
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	8b5b      	ldrh	r3, [r3, #26]
 800b6a8:	121b      	asrs	r3, r3, #8
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	f003 030f 	and.w	r3, r3, #15
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

        HCI_Command(hcibuf, 5);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	3389      	adds	r3, #137	; 0x89
 800b6bc:	2205      	movs	r2, #5
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff fb37 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b6c6:	bf00      	nop
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <_ZN3BTD14hci_disconnectEt>:

void BTD::hci_disconnect(uint16_t handle) { // This is called by the different services
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	807b      	strh	r3, [r7, #2]
        hci_clear_flag(HCI_FLAG_DISCONNECT_COMPLETE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800b6e0:	f023 0304 	bic.w	r3, r3, #4
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
        hcibuf[0] = 0x06; // HCI OCF = 6
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2206      	movs	r2, #6
 800b6f0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x01 << 2; // HCI OGF = 1
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2204      	movs	r2, #4
 800b6f8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2203      	movs	r2, #3
 800b700:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = (uint8_t)(handle & 0xFF); //connection handle - low byte
 800b704:	887b      	ldrh	r3, [r7, #2]
 800b706:	b2da      	uxtb	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = (uint8_t)((handle >> 8) & 0x0F); //connection handle - high byte
 800b70e:	887b      	ldrh	r3, [r7, #2]
 800b710:	121b      	asrs	r3, r3, #8
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f003 030f 	and.w	r3, r3, #15
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x13; // reason
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2213      	movs	r2, #19
 800b724:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3389      	adds	r3, #137	; 0x89
 800b72c:	2206      	movs	r2, #6
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff faff 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <_ZN3BTD25hci_write_class_of_deviceEv>:

void BTD::hci_write_class_of_device() { // See http://bluetooth-pentest.narod.ru/software/bluetooth_class_of_device-service_generator.html
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
        hcibuf[0] = 0x24; // HCI OCF = 24
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2224      	movs	r2, #36	; 0x24
 800b74a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hcibuf[1] = 0x03 << 2; // HCI OGF = 3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	220c      	movs	r2, #12
 800b752:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
        hcibuf[2] = 0x03; // parameter length = 3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2203      	movs	r2, #3
 800b75a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
        hcibuf[3] = 0x04; // Robot
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2204      	movs	r2, #4
 800b762:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        hcibuf[4] = 0x08; // Toy
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2208      	movs	r2, #8
 800b76a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        hcibuf[5] = 0x00;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

        HCI_Command(hcibuf, 6);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3389      	adds	r3, #137	; 0x89
 800b77a:	2206      	movs	r2, #6
 800b77c:	4619      	mov	r1, r3
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7ff fad8 	bl	800ad34 <_ZN3BTD11HCI_CommandEPht>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>:
 */
/************************************************************/
/*                    L2CAP Commands                        */

/************************************************************/
void BTD::L2CAP_Command(uint16_t handle, uint8_t* data, uint8_t nbytes, uint8_t channelLow, uint8_t channelHigh) {
 800b78c:	b5b0      	push	{r4, r5, r7, lr}
 800b78e:	b08a      	sub	sp, #40	; 0x28
 800b790:	af02      	add	r7, sp, #8
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	461a      	mov	r2, r3
 800b798:	460b      	mov	r3, r1
 800b79a:	817b      	strh	r3, [r7, #10]
 800b79c:	4613      	mov	r3, r2
 800b79e:	727b      	strb	r3, [r7, #9]
                Notify(PSTR(" - Channel ID: "), 0x80);
                D_PrintHex<uint8_t > (channelHigh, 0x80);
                Notify(PSTR(" "), 0x80);
                D_PrintHex<uint8_t > (channelLow, 0x80);
#endif
        }
 800b7a0:	466b      	mov	r3, sp
 800b7a2:	461d      	mov	r5, r3
        uint8_t buf[8 + nbytes];
 800b7a4:	7a7b      	ldrb	r3, [r7, #9]
 800b7a6:	1ddc      	adds	r4, r3, #7
 800b7a8:	61bc      	str	r4, [r7, #24]
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f04f 0100 	mov.w	r1, #0
 800b7b4:	f04f 0200 	mov.w	r2, #0
 800b7b8:	f04f 0300 	mov.w	r3, #0
 800b7bc:	00cb      	lsls	r3, r1, #3
 800b7be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b7c2:	00c2      	lsls	r2, r0, #3
 800b7c4:	4623      	mov	r3, r4
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f04f 0100 	mov.w	r1, #0
 800b7ce:	f04f 0200 	mov.w	r2, #0
 800b7d2:	f04f 0300 	mov.w	r3, #0
 800b7d6:	00cb      	lsls	r3, r1, #3
 800b7d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800b7dc:	00c2      	lsls	r2, r0, #3
 800b7de:	4623      	mov	r3, r4
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	3307      	adds	r3, #7
 800b7e4:	08db      	lsrs	r3, r3, #3
 800b7e6:	00db      	lsls	r3, r3, #3
 800b7e8:	ebad 0d03 	sub.w	sp, sp, r3
 800b7ec:	ab02      	add	r3, sp, #8
 800b7ee:	3300      	adds	r3, #0
 800b7f0:	617b      	str	r3, [r7, #20]
        buf[0] = (uint8_t)(handle & 0xff); // HCI handle with PB,BC flag
 800b7f2:	897b      	ldrh	r3, [r7, #10]
 800b7f4:	b2da      	uxtb	r2, r3
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	701a      	strb	r2, [r3, #0]
        buf[1] = (uint8_t)(((handle >> 8) & 0x0f) | 0x20);
 800b7fa:	897b      	ldrh	r3, [r7, #10]
 800b7fc:	121b      	asrs	r3, r3, #8
 800b7fe:	b25b      	sxtb	r3, r3
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	b25b      	sxtb	r3, r3
 800b806:	f043 0320 	orr.w	r3, r3, #32
 800b80a:	b25b      	sxtb	r3, r3
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	705a      	strb	r2, [r3, #1]
        buf[2] = (uint8_t)((4 + nbytes) & 0xff); // HCI ACL total data length
 800b812:	7a7b      	ldrb	r3, [r7, #9]
 800b814:	3304      	adds	r3, #4
 800b816:	b2da      	uxtb	r2, r3
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	709a      	strb	r2, [r3, #2]
        buf[3] = (uint8_t)((4 + nbytes) >> 8);
 800b81c:	7a7b      	ldrb	r3, [r7, #9]
 800b81e:	3304      	adds	r3, #4
 800b820:	121b      	asrs	r3, r3, #8
 800b822:	b2da      	uxtb	r2, r3
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	70da      	strb	r2, [r3, #3]
        buf[4] = (uint8_t)(nbytes & 0xff); // L2CAP header: Length
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	7a7a      	ldrb	r2, [r7, #9]
 800b82c:	711a      	strb	r2, [r3, #4]
        buf[5] = (uint8_t)(nbytes >> 8);
 800b82e:	7a7b      	ldrb	r3, [r7, #9]
 800b830:	121b      	asrs	r3, r3, #8
 800b832:	b2da      	uxtb	r2, r3
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	715a      	strb	r2, [r3, #5]
        buf[6] = channelLow;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b83e:	719a      	strb	r2, [r3, #6]
        buf[7] = channelHigh;
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b846:	71da      	strb	r2, [r3, #7]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b848:	2300      	movs	r3, #0
 800b84a:	83fb      	strh	r3, [r7, #30]
 800b84c:	7a7b      	ldrb	r3, [r7, #9]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	8bfa      	ldrh	r2, [r7, #30]
 800b852:	429a      	cmp	r2, r3
 800b854:	d20b      	bcs.n	800b86e <_ZN3BTD13L2CAP_CommandEtPhhhh+0xe2>
                buf[8 + i] = data[i];
 800b856:	8bfb      	ldrh	r3, [r7, #30]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	441a      	add	r2, r3
 800b85c:	8bfb      	ldrh	r3, [r7, #30]
 800b85e:	3308      	adds	r3, #8
 800b860:	7811      	ldrb	r1, [r2, #0]
 800b862:	697a      	ldr	r2, [r7, #20]
 800b864:	54d1      	strb	r1, [r2, r3]
        for(uint16_t i = 0; i < nbytes; i++) // L2CAP C-frame
 800b866:	8bfb      	ldrh	r3, [r7, #30]
 800b868:	3301      	adds	r3, #1
 800b86a:	83fb      	strh	r3, [r7, #30]
 800b86c:	e7ee      	b.n	800b84c <_ZN3BTD13L2CAP_CommandEtPhhhh+0xc0>
        uint8_t rcode = pUsb->outTransfer(bAddress, epInfo[ BTD_DATAOUT_PIPE ].epAddr, (8 + nbytes), buf);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f893 205a 	ldrb.w	r2, [r3, #90]	; 0x5a
 800b87e:	7a7b      	ldrb	r3, [r7, #9]
 800b880:	b29b      	uxth	r3, r3
 800b882:	3308      	adds	r3, #8
 800b884:	b29c      	uxth	r4, r3
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	4623      	mov	r3, r4
 800b88c:	f002 fc4a 	bl	800e124 <_ZN3USB11outTransferEhhtPh>
 800b890:	4603      	mov	r3, r0
 800b892:	74fb      	strb	r3, [r7, #19]
        if(rcode) {
 800b894:	7cfb      	ldrb	r3, [r7, #19]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <_ZN3BTD13L2CAP_CommandEtPhhhh+0x114>
                delay(100); // This small delay prevents it from overflowing if it fails
 800b89a:	4804      	ldr	r0, [pc, #16]	; (800b8ac <_ZN3BTD13L2CAP_CommandEtPhhhh+0x120>)
 800b89c:	f7f6 f930 	bl	8001b00 <HAL_Delay>
 800b8a0:	46ad      	mov	sp, r5
}
 800b8a2:	bf00      	nop
 800b8a4:	3720      	adds	r7, #32
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	000186a0 	.word	0x000186a0

0800b8b0 <_ZN3BTD24l2cap_connection_requestEthPht>:

void BTD::l2cap_connection_request(uint16_t handle, uint8_t rxid, uint8_t* scid, uint16_t psm) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af02      	add	r7, sp, #8
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	607b      	str	r3, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	817b      	strh	r3, [r7, #10]
 800b8be:	4613      	mov	r3, r2
 800b8c0:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_REQUEST; // Code
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2202      	movs	r2, #2
 800b8c6:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	7a7a      	ldrb	r2, [r7, #9]
 800b8ce:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2204      	movs	r2, #4
 800b8d6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = (uint8_t)(psm & 0xff); // PSM
 800b8e2:	8b3b      	ldrh	r3, [r7, #24]
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = (uint8_t)(psm >> 8);
 800b8ec:	8b3b      	ldrh	r3, [r7, #24]
 800b8ee:	121b      	asrs	r3, r3, #8
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	781a      	ldrb	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	785a      	ldrb	r2, [r3, #1]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b912:	8979      	ldrh	r1, [r7, #10]
 800b914:	2300      	movs	r3, #0
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	2301      	movs	r3, #1
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	2308      	movs	r3, #8
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff ff34 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b924:	bf00      	nop
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>:

void BTD::l2cap_connection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid, uint8_t result) {
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af02      	add	r7, sp, #8
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	607b      	str	r3, [r7, #4]
 800b936:	460b      	mov	r3, r1
 800b938:	817b      	strh	r3, [r7, #10]
 800b93a:	4613      	mov	r3, r2
 800b93c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONNECTION_RESPONSE; // Code
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2203      	movs	r2, #3
 800b942:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	7a7a      	ldrb	r2, [r7, #9]
 800b94a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2208      	movs	r2, #8
 800b952:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	781a      	ldrb	r2, [r3, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	785a      	ldrb	r2, [r3, #1]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0]; // Source CID
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	781a      	ldrb	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	785a      	ldrb	r2, [r3, #1]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = result; // Result: Pending or Success
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	7f3a      	ldrb	r2, [r7, #28]
 800b98a:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00; // No further information
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f203 1209 	addw	r2, r3, #265	; 0x109
 800b9ac:	8979      	ldrh	r1, [r7, #10]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7ff fee7 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800b9be:	bf00      	nop
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>:

void BTD::l2cap_config_request(uint16_t handle, uint8_t rxid, uint8_t* dcid) {
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b086      	sub	sp, #24
 800b9ca:	af02      	add	r7, sp, #8
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	607b      	str	r3, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	817b      	strh	r3, [r7, #10]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_REQUEST; // Code
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2204      	movs	r2, #4
 800b9dc:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	7a7a      	ldrb	r2, [r7, #9]
 800b9e4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2208      	movs	r2, #8
 800b9ec:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0]; // Destination CID
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	781a      	ldrb	r2, [r3, #0]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	785a      	ldrb	r2, [r3, #1]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flags
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x01; // Config Opt: type = MTU (Maximum Transmission Unit) - Hint
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x02; // Config Opt: length
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2202      	movs	r2, #2
 800ba28:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0xFF; // MTU
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	22ff      	movs	r2, #255	; 0xff
 800ba30:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0xFF;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	22ff      	movs	r2, #255	; 0xff
 800ba38:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f203 1209 	addw	r2, r3, #265	; 0x109
 800ba42:	8979      	ldrh	r1, [r7, #10]
 800ba44:	2300      	movs	r3, #0
 800ba46:	9301      	str	r3, [sp, #4]
 800ba48:	2301      	movs	r3, #1
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	230c      	movs	r3, #12
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff fe9c 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800ba54:	bf00      	nop
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <_ZN3BTD21l2cap_config_responseEthPh>:

void BTD::l2cap_config_response(uint16_t handle, uint8_t rxid, uint8_t* scid) {
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b086      	sub	sp, #24
 800ba60:	af02      	add	r7, sp, #8
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	607b      	str	r3, [r7, #4]
 800ba66:	460b      	mov	r3, r1
 800ba68:	817b      	strh	r3, [r7, #10]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_CONFIG_RESPONSE; // Code
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2205      	movs	r2, #5
 800ba72:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	7a7a      	ldrb	r2, [r7, #9]
 800ba7a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x0A; // Length
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	220a      	movs	r2, #10
 800ba82:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = scid[0]; // Source CID
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	781a      	ldrb	r2, [r3, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = scid[1];
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	785a      	ldrb	r2, [r3, #1]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Flag
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00; // Result
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x01; // Config
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x02;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2202      	movs	r2, #2
 800bace:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
        l2capoutbuf[12] = 0xA0;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	22a0      	movs	r2, #160	; 0xa0
 800bad6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
        l2capoutbuf[13] = 0x02;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2202      	movs	r2, #2
 800bade:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116

        L2CAP_Command(handle, l2capoutbuf, 14);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bae8:	8979      	ldrh	r1, [r7, #10]
 800baea:	2300      	movs	r3, #0
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	2301      	movs	r3, #1
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	230e      	movs	r3, #14
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff fe49 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>:

void BTD::l2cap_disconnection_request(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b086      	sub	sp, #24
 800bb06:	af02      	add	r7, sp, #8
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	607b      	str	r3, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	817b      	strh	r3, [r7, #10]
 800bb10:	4613      	mov	r3, r2
 800bb12:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_REQUEST; // Code
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2206      	movs	r2, #6
 800bb18:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	7a7a      	ldrb	r2, [r7, #9]
 800bb20:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2204      	movs	r2, #4
 800bb28:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	781a      	ldrb	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	785a      	ldrb	r2, [r3, #1]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	781a      	ldrb	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	785a      	ldrb	r2, [r3, #1]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bb62:	8979      	ldrh	r1, [r7, #10]
 800bb64:	2300      	movs	r3, #0
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f7ff fe0c 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>:

void BTD::l2cap_disconnection_response(uint16_t handle, uint8_t rxid, uint8_t* dcid, uint8_t* scid) {
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af02      	add	r7, sp, #8
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	817b      	strh	r3, [r7, #10]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	727b      	strb	r3, [r7, #9]
        l2capoutbuf[0] = L2CAP_CMD_DISCONNECT_RESPONSE; // Code
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2207      	movs	r2, #7
 800bb92:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	7a7a      	ldrb	r2, [r7, #9]
 800bb9a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x04; // Length
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2204      	movs	r2, #4
 800bba2:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = dcid[0];
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	781a      	ldrb	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = dcid[1];
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	785a      	ldrb	r2, [r3, #1]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = scid[0];
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	781a      	ldrb	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = scid[1];
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	785a      	ldrb	r2, [r3, #1]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

        L2CAP_Command(handle, l2capoutbuf, 8);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bbdc:	8979      	ldrh	r1, [r7, #10]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	2308      	movs	r3, #8
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7ff fdcf 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <_ZN3BTD26l2cap_information_responseEthhh>:

void BTD::l2cap_information_response(uint16_t handle, uint8_t rxid, uint8_t infoTypeLow, uint8_t infoTypeHigh) {
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af02      	add	r7, sp, #8
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	461a      	mov	r2, r3
 800bc04:	4603      	mov	r3, r0
 800bc06:	807b      	strh	r3, [r7, #2]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	707b      	strb	r3, [r7, #1]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	703b      	strb	r3, [r7, #0]
        l2capoutbuf[0] = L2CAP_CMD_INFORMATION_RESPONSE; // Code
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	220b      	movs	r2, #11
 800bc14:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
        l2capoutbuf[1] = rxid; // Identifier
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	787a      	ldrb	r2, [r7, #1]
 800bc1c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
        l2capoutbuf[2] = 0x08; // Length
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2208      	movs	r2, #8
 800bc24:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
        l2capoutbuf[3] = 0x00;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
        l2capoutbuf[4] = infoTypeLow;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	783a      	ldrb	r2, [r7, #0]
 800bc34:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
        l2capoutbuf[5] = infoTypeHigh;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	7c3a      	ldrb	r2, [r7, #16]
 800bc3c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        l2capoutbuf[6] = 0x00; // Result = success
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
        l2capoutbuf[7] = 0x00; // Result = success
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
        l2capoutbuf[8] = 0x00;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
        l2capoutbuf[9] = 0x00;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
        l2capoutbuf[10] = 0x00;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
        l2capoutbuf[11] = 0x00;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

        L2CAP_Command(handle, l2capoutbuf, 12);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f203 1209 	addw	r2, r3, #265	; 0x109
 800bc76:	8879      	ldrh	r1, [r7, #2]
 800bc78:	2300      	movs	r3, #0
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	230c      	movs	r3, #12
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7ff fd82 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <_ZN3BTD9setBdaddrEPh>:

/* PS3 Commands - only set Bluetooth address is implemented in this library */
void BTD::setBdaddr(uint8_t* bdaddr) {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08e      	sub	sp, #56	; 0x38
 800bc94:	af08      	add	r7, sp, #32
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[8];
        buf[0] = 0x01;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x00;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	737b      	strb	r3, [r7, #13]

        for(uint8_t i = 0; i < 6; i++)
 800bca2:	2300      	movs	r3, #0
 800bca4:	75fb      	strb	r3, [r7, #23]
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	2b05      	cmp	r3, #5
 800bcaa:	d811      	bhi.n	800bcd0 <_ZN3BTD9setBdaddrEPh+0x40>
                buf[i + 2] = bdaddr[5 - i]; // Copy into buffer, has to be written reversed, so it is MSB first
 800bcac:	7dfb      	ldrb	r3, [r7, #23]
 800bcae:	f1c3 0305 	rsb	r3, r3, #5
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	441a      	add	r2, r3
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	3302      	adds	r3, #2
 800bcbc:	7812      	ldrb	r2, [r2, #0]
 800bcbe:	f107 0118 	add.w	r1, r7, #24
 800bcc2:	440b      	add	r3, r1
 800bcc4:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bcc8:	7dfb      	ldrb	r3, [r7, #23]
 800bcca:	3301      	adds	r3, #1
 800bccc:	75fb      	strb	r3, [r7, #23]
 800bcce:	e7ea      	b.n	800bca6 <_ZN3BTD9setBdaddrEPh+0x16>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0xF5), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0xF5, 0x03, 0x00, 8, 8, buf, NULL);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bce0:	2300      	movs	r3, #0
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	f107 030c 	add.w	r3, r7, #12
 800bce8:	9306      	str	r3, [sp, #24]
 800bcea:	2308      	movs	r3, #8
 800bcec:	9305      	str	r3, [sp, #20]
 800bcee:	2308      	movs	r3, #8
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	9302      	str	r3, [sp, #8]
 800bcfa:	23f5      	movs	r3, #245	; 0xf5
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	2309      	movs	r3, #9
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	2321      	movs	r3, #33	; 0x21
 800bd04:	f002 f82b 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bd08:	bf00      	nop
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <_ZN3BTD13setMoveBdaddrEPh>:

void BTD::setMoveBdaddr(uint8_t* bdaddr) {
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08e      	sub	sp, #56	; 0x38
 800bd14:	af08      	add	r7, sp, #32
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
        /* Set the internal Bluetooth address */
        uint8_t buf[11];
        buf[0] = 0x05;
 800bd1a:	2305      	movs	r3, #5
 800bd1c:	733b      	strb	r3, [r7, #12]
        buf[7] = 0x10;
 800bd1e:	2310      	movs	r3, #16
 800bd20:	74fb      	strb	r3, [r7, #19]
        buf[8] = 0x01;
 800bd22:	2301      	movs	r3, #1
 800bd24:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x02;
 800bd26:	2302      	movs	r3, #2
 800bd28:	757b      	strb	r3, [r7, #21]
        buf[10] = 0x12;
 800bd2a:	2312      	movs	r3, #18
 800bd2c:	75bb      	strb	r3, [r7, #22]

        for(uint8_t i = 0; i < 6; i++)
 800bd2e:	2300      	movs	r3, #0
 800bd30:	75fb      	strb	r3, [r7, #23]
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
 800bd34:	2b05      	cmp	r3, #5
 800bd36:	d80e      	bhi.n	800bd56 <_ZN3BTD13setMoveBdaddrEPh+0x46>
                buf[i + 1] = bdaddr[i];
 800bd38:	7dfb      	ldrb	r3, [r7, #23]
 800bd3a:	683a      	ldr	r2, [r7, #0]
 800bd3c:	441a      	add	r2, r3
 800bd3e:	7dfb      	ldrb	r3, [r7, #23]
 800bd40:	3301      	adds	r3, #1
 800bd42:	7812      	ldrb	r2, [r2, #0]
 800bd44:	f107 0118 	add.w	r1, r7, #24
 800bd48:	440b      	add	r3, r1
 800bd4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        for(uint8_t i = 0; i < 6; i++)
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
 800bd50:	3301      	adds	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
 800bd54:	e7ed      	b.n	800bd32 <_ZN3BTD13setMoveBdaddrEPh+0x22>

        // bmRequest = Host to device (0x00) | Class (0x20) | Interface (0x01) = 0x21, bRequest = Set Report (0x09), Report ID (0x05), Report Type (Feature 0x03), interface (0x00), datalength, datalength, data
        pUsb->ctrlReq(bAddress, epInfo[BTD_CONTROL_PIPE].epAddr, bmREQ_HID_OUT, HID_REQUEST_SET_REPORT, 0x05, 0x03, 0x00, 11, 11, buf, NULL);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800bd66:	2300      	movs	r3, #0
 800bd68:	9307      	str	r3, [sp, #28]
 800bd6a:	f107 030c 	add.w	r3, r7, #12
 800bd6e:	9306      	str	r3, [sp, #24]
 800bd70:	230b      	movs	r3, #11
 800bd72:	9305      	str	r3, [sp, #20]
 800bd74:	230b      	movs	r3, #11
 800bd76:	9304      	str	r3, [sp, #16]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	2305      	movs	r3, #5
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	2309      	movs	r3, #9
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	2321      	movs	r3, #33	; 0x21
 800bd8a:	f001 ffe8 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
}
 800bd8e:	bf00      	nop
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <_ZN13USBReadParserC1Ev>:
class USBReadParser {
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	4a04      	ldr	r2, [pc, #16]	; (800bdb4 <_ZN13USBReadParserC1Ev+0x1c>)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	601a      	str	r2, [r3, #0]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	0800f90c 	.word	0x0800f90c

0800bdb8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
        ConfigDescParser(UsbConfigXtracter *xtractor);
        void Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset);
};

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
theXtractor(xtractor),
stateParseDescr(0),
dscrLen(0),
dscrType(0),
UseOr(false) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff ffe7 	bl	800bd98 <_ZN13USBReadParserC1Ev>
 800bdca:	4a21      	ldr	r2, [pc, #132]	; (800be50 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	605a      	str	r2, [r3, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3308      	adds	r3, #8
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fd fb51 	bl	8009482 <_ZN16MultiValueBufferC1Ev>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3310      	adds	r3, #16
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fd fb63 	bl	80094b0 <_ZN20MultiByteValueParserC1Ev>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	3318      	adds	r3, #24
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fd fb8a 	bl	8009508 <_ZN11ByteSkipperC1Ev>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f103 0220 	add.w	r2, r3, #32
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f103 0210 	add.w	r2, r3, #16
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	3308      	adds	r3, #8
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7fd fb53 	bl	80094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f103 0218 	add.w	r2, r3, #24
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3308      	adds	r3, #8
 800be3c:	4619      	mov	r1, r3
 800be3e:	4610      	mov	r0, r2
 800be40:	f7fd fb76 	bl	8009530 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	0800f8b4 	.word	0x0800f8b4

0800be54 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter>:
ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ConfigDescParser(UsbConfigXtracter *xtractor) :
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
UseOr(false) {
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff ff99 	bl	800bd98 <_ZN13USBReadParserC1Ev>
 800be66:	4a21      	ldr	r2, [pc, #132]	; (800beec <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EEC1EP17UsbConfigXtracter+0x98>)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	605a      	str	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3308      	adds	r3, #8
 800be76:	4618      	mov	r0, r3
 800be78:	f7fd fb03 	bl	8009482 <_ZN16MultiValueBufferC1Ev>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	3310      	adds	r3, #16
 800be80:	4618      	mov	r0, r3
 800be82:	f7fd fb15 	bl	80094b0 <_ZN20MultiByteValueParserC1Ev>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	3318      	adds	r3, #24
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fd fb3c 	bl	8009508 <_ZN11ByteSkipperC1Ev>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        theBuffer.pValue = varBuffer;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f103 0220 	add.w	r2, r3, #32
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8c3 2009 	str.w	r2, [r3, #9]
        valParser.Initialize(&theBuffer);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f103 0210 	add.w	r2, r3, #16
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3308      	adds	r3, #8
 800bec6:	4619      	mov	r1, r3
 800bec8:	4610      	mov	r0, r2
 800beca:	f7fd fb05 	bl	80094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
        theSkipper.Initialize(&theBuffer);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f103 0218 	add.w	r2, r3, #24
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3308      	adds	r3, #8
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f7fd fb28 	bl	8009530 <_ZN11ByteSkipper10InitializeEP16MultiValueBuffer>
};
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	0800f8a8 	.word	0x0800f8a8

0800bef0 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt>:

template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	607a      	str	r2, [r7, #4]
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	460b      	mov	r3, r1
 800befe:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800bf00:	897b      	ldrh	r3, [r7, #10]
 800bf02:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	613b      	str	r3, [r7, #16]

        while(cntdn)
 800bf08:	8afb      	ldrh	r3, [r7, #22]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00f      	beq.n	800bf2e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800bf0e:	f107 0216 	add.w	r2, r7, #22
 800bf12:	f107 0310 	add.w	r3, r7, #16
 800bf16:	4619      	mov	r1, r3
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f82d 	bl	800bf78 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f083 0301 	eor.w	r3, r3, #1
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d100      	bne.n	800bf2c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800bf2a:	e7ed      	b.n	800bf08 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800bf2c:	bf00      	nop
}
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt>:
void ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::Parse(const uint16_t len, const uint8_t *pbuf, const uint16_t &offset __attribute__((unused))) {
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	607a      	str	r2, [r7, #4]
 800bf3e:	603b      	str	r3, [r7, #0]
 800bf40:	460b      	mov	r3, r1
 800bf42:	817b      	strh	r3, [r7, #10]
        uint16_t cntdn = (uint16_t)len;
 800bf44:	897b      	ldrh	r3, [r7, #10]
 800bf46:	82fb      	strh	r3, [r7, #22]
        uint8_t *p = (uint8_t*)pbuf;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	613b      	str	r3, [r7, #16]
        while(cntdn)
 800bf4c:	8afb      	ldrh	r3, [r7, #22]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00f      	beq.n	800bf72 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3e>
                if(!ParseDescriptor(&p, &cntdn))
 800bf52:	f107 0216 	add.w	r2, r7, #22
 800bf56:	f107 0310 	add.w	r3, r7, #16
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 f981 	bl	800c264 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f083 0301 	eor.w	r3, r3, #1
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d100      	bne.n	800bf70 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x3c>
        while(cntdn)
 800bf6e:	e7ed      	b.n	800bf4c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE5ParseEtPKhRKt+0x18>
                        return;
 800bf70:	bf00      	nop
}
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:

/* Parser for the configuration descriptor. Takes values for class, subclass, protocol fields in interface descriptor and
  compare masks for them. When the match is found, calls EndpointXtract passing buffer containing endpoint descriptor */
template <const uint8_t CLASS_ID, const uint8_t SUBCLASS_ID, const uint8_t PROTOCOL_ID, const uint8_t MASK>
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800bf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7a:	b089      	sub	sp, #36	; 0x24
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3320      	adds	r3, #32
 800bf88:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3320      	adds	r3, #32
 800bf8e:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	f200 815e 	bhi.w	800c258 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800bf9c:	a201      	add	r2, pc, #4	; (adr r2, 800bfa4 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800bf9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa2:	bf00      	nop
 800bfa4:	0800bfb9 	.word	0x0800bfb9
 800bfa8:	0800bfd9 	.word	0x0800bfd9
 800bfac:	0800c01b 	.word	0x0800c01b
 800bfb0:	0800c02f 	.word	0x0800c02f
 800bfb4:	0800c0f3 	.word	0x0800c0f3
                case 0:
                        theBuffer.valueSize = 2;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f103 0210 	add.w	r2, r3, #16
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f7fd fa84 	bl	80094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 1:
                        if(!valParser.Parse(pp, pcntdn))
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3310      	adds	r3, #16
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	68b9      	ldr	r1, [r7, #8]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f003 fa8f 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	f083 0301 	eor.w	r3, r3, #1
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800bff2:	2300      	movs	r3, #0
 800bff4:	e131      	b.n	800c25a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800bffc:	781a      	ldrb	r2, [r3, #0]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c00a:	785a      	ldrb	r2, [r3, #1]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2202      	movs	r2, #2
 800c016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // This is a sort of hack. Assuming that two bytes are all ready in the buffer
                        //      the pointer is positioned two bytes ahead in order for the rest of descriptor
                        //      to be read right after the size and the type fields.
                        // This should be used carefully. varBuffer should be used directly to handle data
                        //      in the buffer.
                        theBuffer.pValue = varBuffer + 2;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3320      	adds	r3, #32
 800c01e:	1c9a      	adds	r2, r3, #2
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2203      	movs	r2, #3
 800c02a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 3:
                        switch(dscrType) {
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c034:	3b02      	subs	r3, #2
 800c036:	2b1f      	cmp	r3, #31
 800c038:	d847      	bhi.n	800c0ca <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c0cb 	.word	0x0800c0cb
 800c044:	0800c0cb 	.word	0x0800c0cb
 800c048:	0800c0c1 	.word	0x0800c0c1
 800c04c:	0800c0cb 	.word	0x0800c0cb
 800c050:	0800c0cb 	.word	0x0800c0cb
 800c054:	0800c0cb 	.word	0x0800c0cb
 800c058:	0800c0cb 	.word	0x0800c0cb
 800c05c:	0800c0cb 	.word	0x0800c0cb
 800c060:	0800c0cb 	.word	0x0800c0cb
 800c064:	0800c0cb 	.word	0x0800c0cb
 800c068:	0800c0cb 	.word	0x0800c0cb
 800c06c:	0800c0cb 	.word	0x0800c0cb
 800c070:	0800c0cb 	.word	0x0800c0cb
 800c074:	0800c0cb 	.word	0x0800c0cb
 800c078:	0800c0cb 	.word	0x0800c0cb
 800c07c:	0800c0cb 	.word	0x0800c0cb
 800c080:	0800c0cb 	.word	0x0800c0cb
 800c084:	0800c0cb 	.word	0x0800c0cb
 800c088:	0800c0cb 	.word	0x0800c0cb
 800c08c:	0800c0cb 	.word	0x0800c0cb
 800c090:	0800c0cb 	.word	0x0800c0cb
 800c094:	0800c0cb 	.word	0x0800c0cb
 800c098:	0800c0cb 	.word	0x0800c0cb
 800c09c:	0800c0cb 	.word	0x0800c0cb
 800c0a0:	0800c0cb 	.word	0x0800c0cb
 800c0a4:	0800c0cb 	.word	0x0800c0cb
 800c0a8:	0800c0cb 	.word	0x0800c0cb
 800c0ac:	0800c0cb 	.word	0x0800c0cb
 800c0b0:	0800c0cb 	.word	0x0800c0cb
 800c0b4:	0800c0cb 	.word	0x0800c0cb
 800c0b8:	0800c0cb 	.word	0x0800c0cb
 800c0bc:	0800c0cb 	.word	0x0800c0cb
                                case USB_DESCRIPTOR_INTERFACE:
                                        isGoodInterface = false;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c0c8:	bf00      	nop
                                case USB_DESCRIPTOR_CONFIGURATION:
                                case USB_DESCRIPTOR_ENDPOINT:
                                case HID_DESCRIPTOR_HID:
                                        break;
                        }
                        theBuffer.valueSize = dscrLen - 2;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0d0:	3b02      	subs	r3, #2
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f103 0210 	add.w	r2, r3, #16
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3308      	adds	r3, #8
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	f7fd f9f7 	bl	80094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2204      	movs	r2, #4
 800c0ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        // fall through
                case 4:
                        switch(dscrType) {
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c0f8:	2b05      	cmp	r3, #5
 800c0fa:	d055      	beq.n	800c1a8 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c0fc:	2b05      	cmp	r3, #5
 800c0fe:	f300 8085 	bgt.w	800c20c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c102:	2b02      	cmp	r3, #2
 800c104:	d002      	beq.n	800c10c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c106:	2b04      	cmp	r3, #4
 800c108:	d015      	beq.n	800c136 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c10a:	e07f      	b.n	800c20c <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                case USB_DESCRIPTOR_CONFIGURATION:
                                        if(!valParser.Parse(pp, pcntdn))
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3310      	adds	r3, #16
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	68b9      	ldr	r1, [r7, #8]
 800c114:	4618      	mov	r0, r3
 800c116:	f003 f9f5 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c11a:	4603      	mov	r3, r0
 800c11c:	f083 0301 	eor.w	r3, r3, #1
 800c120:	b2db      	uxtb	r3, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c126:	2300      	movs	r3, #0
 800c128:	e097      	b.n	800c25a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	795a      	ldrb	r2, [r3, #5]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c134:	e086      	b.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_INTERFACE:
                                        if(!valParser.Parse(pp, pcntdn))
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3310      	adds	r3, #16
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	4618      	mov	r0, r3
 800c140:	f003 f9e0 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c144:	4603      	mov	r3, r0
 800c146:	f083 0301 	eor.w	r3, r3, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c150:	2300      	movs	r3, #0
 800c152:	e082      	b.n	800c25a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	795b      	ldrb	r3, [r3, #5]
 800c158:	2be0      	cmp	r3, #224	; 0xe0
 800c15a:	d16c      	bne.n	800c236 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                                break;
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	799b      	ldrb	r3, [r3, #6]
 800c160:	2b01      	cmp	r3, #1
 800c162:	d16a      	bne.n	800c23a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                                break;
                                        if(UseOr) {
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d004      	beq.n	800c178 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	79db      	ldrb	r3, [r3, #7]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d104      	bne.n	800c180 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c176:	e065      	b.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        } else {
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	79db      	ldrb	r3, [r3, #7]
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d15e      	bne.n	800c23e <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                                        break;
                                        }
                                        isGoodInterface = true;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	789a      	ldrb	r2, [r3, #2]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	78da      	ldrb	r2, [r3, #3]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	79da      	ldrb	r2, [r3, #7]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c1a6:	e04d      	b.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                case USB_DESCRIPTOR_ENDPOINT:
                                        if(!valParser.Parse(pp, pcntdn))
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3310      	adds	r3, #16
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	68b9      	ldr	r1, [r7, #8]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f003 f9a7 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	f083 0301 	eor.w	r3, r3, #1
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e049      	b.n	800c25a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d038      	beq.n	800c242 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d034      	beq.n	800c242 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6858      	ldr	r0, [r3, #4]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	681c      	ldr	r4, [r3, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	3220      	adds	r2, #32
 800c200:	9201      	str	r2, [sp, #4]
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	4633      	mov	r3, r6
 800c206:	462a      	mov	r2, r5
 800c208:	47a0      	blx	r4
                                        break;
 800c20a:	e01a      	b.n	800c242 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        //      if (!valParser.Parse(pp, pcntdn))
                                        //              return false;
                                        //      PrintHidDescriptor((const USB_HID_DESCRIPTOR*)varBuffer);
                                        //      break;
                                default:
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f103 0018 	add.w	r0, r3, #24
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c218:	b29b      	uxth	r3, r3
 800c21a:	3b02      	subs	r3, #2
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	68b9      	ldr	r1, [r7, #8]
 800c222:	f7fd f998 	bl	8009556 <_ZN11ByteSkipper4SkipEPPhPtt>
 800c226:	4603      	mov	r3, r0
 800c228:	f083 0301 	eor.w	r3, r3, #1
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d008      	beq.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c232:	2300      	movs	r3, #0
 800c234:	e011      	b.n	800c25a <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c236:	bf00      	nop
 800c238:	e004      	b.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c23a:	bf00      	nop
 800c23c:	e002      	b.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c23e:	bf00      	nop
 800c240:	e000      	b.n	800c244 <_ZN16ConfigDescParserILh224ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c242:	bf00      	nop
                        }
                        theBuffer.pValue = varBuffer;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f103 0220 	add.w	r2, r3, #32
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        return true;
 800c258:	2301      	movs	r3, #1
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c262:	bf00      	nop

0800c264 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt>:
bool ConfigDescParser<CLASS_ID, SUBCLASS_ID, PROTOCOL_ID, MASK>::ParseDescriptor(uint8_t **pp, uint16_t *pcntdn) {
 800c264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c266:	b089      	sub	sp, #36	; 0x24
 800c268:	af02      	add	r7, sp, #8
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
        USB_CONFIGURATION_DESCRIPTOR* ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR*>(varBuffer);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	3320      	adds	r3, #32
 800c274:	617b      	str	r3, [r7, #20]
        USB_INTERFACE_DESCRIPTOR* uid = reinterpret_cast<USB_INTERFACE_DESCRIPTOR*>(varBuffer);
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3320      	adds	r3, #32
 800c27a:	613b      	str	r3, [r7, #16]
        switch(stateParseDescr) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c282:	2b04      	cmp	r3, #4
 800c284:	f200 815e 	bhi.w	800c544 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e0>
 800c288:	a201      	add	r2, pc, #4	; (adr r2, 800c290 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c>)
 800c28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28e:	bf00      	nop
 800c290:	0800c2a5 	.word	0x0800c2a5
 800c294:	0800c2c5 	.word	0x0800c2c5
 800c298:	0800c307 	.word	0x0800c307
 800c29c:	0800c31b 	.word	0x0800c31b
 800c2a0:	0800c3df 	.word	0x0800c3df
                        theBuffer.valueSize = 2;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f103 0210 	add.w	r2, r3, #16
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	f7fd f90e 	bl	80094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 1;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        if(!valParser.Parse(pp, pcntdn))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	3310      	adds	r3, #16
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f003 f919 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	f083 0301 	eor.w	r3, r3, #1
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x7e>
                                return false;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e131      	b.n	800c546 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                        dscrLen = *((uint8_t*)theBuffer.pValue);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c2e8:	781a      	ldrb	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                        dscrType = *((uint8_t*)theBuffer.pValue + 1);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800c2f6:	785a      	ldrb	r2, [r3, #1]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                        stateParseDescr = 2;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2202      	movs	r2, #2
 800c302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        theBuffer.pValue = varBuffer + 2;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3320      	adds	r3, #32
 800c30a:	1c9a      	adds	r2, r3, #2
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 3;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2203      	movs	r2, #3
 800c316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c320:	3b02      	subs	r3, #2
 800c322:	2b1f      	cmp	r3, #31
 800c324:	d847      	bhi.n	800c3b6 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x152>
 800c326:	a201      	add	r2, pc, #4	; (adr r2, 800c32c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0xc8>)
 800c328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32c:	0800c3b7 	.word	0x0800c3b7
 800c330:	0800c3b7 	.word	0x0800c3b7
 800c334:	0800c3ad 	.word	0x0800c3ad
 800c338:	0800c3b7 	.word	0x0800c3b7
 800c33c:	0800c3b7 	.word	0x0800c3b7
 800c340:	0800c3b7 	.word	0x0800c3b7
 800c344:	0800c3b7 	.word	0x0800c3b7
 800c348:	0800c3b7 	.word	0x0800c3b7
 800c34c:	0800c3b7 	.word	0x0800c3b7
 800c350:	0800c3b7 	.word	0x0800c3b7
 800c354:	0800c3b7 	.word	0x0800c3b7
 800c358:	0800c3b7 	.word	0x0800c3b7
 800c35c:	0800c3b7 	.word	0x0800c3b7
 800c360:	0800c3b7 	.word	0x0800c3b7
 800c364:	0800c3b7 	.word	0x0800c3b7
 800c368:	0800c3b7 	.word	0x0800c3b7
 800c36c:	0800c3b7 	.word	0x0800c3b7
 800c370:	0800c3b7 	.word	0x0800c3b7
 800c374:	0800c3b7 	.word	0x0800c3b7
 800c378:	0800c3b7 	.word	0x0800c3b7
 800c37c:	0800c3b7 	.word	0x0800c3b7
 800c380:	0800c3b7 	.word	0x0800c3b7
 800c384:	0800c3b7 	.word	0x0800c3b7
 800c388:	0800c3b7 	.word	0x0800c3b7
 800c38c:	0800c3b7 	.word	0x0800c3b7
 800c390:	0800c3b7 	.word	0x0800c3b7
 800c394:	0800c3b7 	.word	0x0800c3b7
 800c398:	0800c3b7 	.word	0x0800c3b7
 800c39c:	0800c3b7 	.word	0x0800c3b7
 800c3a0:	0800c3b7 	.word	0x0800c3b7
 800c3a4:	0800c3b7 	.word	0x0800c3b7
 800c3a8:	0800c3b7 	.word	0x0800c3b7
                                        isGoodInterface = false;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        break;
 800c3b4:	bf00      	nop
                        theBuffer.valueSize = dscrLen - 2;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c3bc:	3b02      	subs	r3, #2
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	721a      	strb	r2, [r3, #8]
                        valParser.Initialize(&theBuffer);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f103 0210 	add.w	r2, r3, #16
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f7fd f881 	bl	80094d8 <_ZN20MultiByteValueParser10InitializeEP16MultiValueBuffer>
                        stateParseDescr = 4;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	2204      	movs	r2, #4
 800c3da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                        switch(dscrType) {
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c3e4:	2b05      	cmp	r3, #5
 800c3e6:	d055      	beq.n	800c494 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x230>
 800c3e8:	2b05      	cmp	r3, #5
 800c3ea:	f300 8085 	bgt.w	800c4f8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d002      	beq.n	800c3f8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x194>
 800c3f2:	2b04      	cmp	r3, #4
 800c3f4:	d015      	beq.n	800c422 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1be>
 800c3f6:	e07f      	b.n	800c4f8 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x294>
                                        if(!valParser.Parse(pp, pcntdn))
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3310      	adds	r3, #16
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	4618      	mov	r0, r3
 800c402:	f003 f87f 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c406:	4603      	mov	r3, r0
 800c408:	f083 0301 	eor.w	r3, r3, #1
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1b2>
                                                return false;
 800c412:	2300      	movs	r3, #0
 800c414:	e097      	b.n	800c546 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        confValue = ucd->bConfigurationValue;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	795a      	ldrb	r2, [r3, #5]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                                        break;
 800c420:	e086      	b.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3310      	adds	r3, #16
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	68b9      	ldr	r1, [r7, #8]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f003 f86a 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c430:	4603      	mov	r3, r0
 800c432:	f083 0301 	eor.w	r3, r3, #1
 800c436:	b2db      	uxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x1dc>
                                                return false;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e082      	b.n	800c546 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if((MASK & CP_MASK_COMPARE_CLASS) && uid->bInterfaceClass != CLASS_ID)
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	795b      	ldrb	r3, [r3, #5]
 800c444:	2bff      	cmp	r3, #255	; 0xff
 800c446:	d16c      	bne.n	800c522 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2be>
                                        if((MASK & CP_MASK_COMPARE_SUBCLASS) && uid->bInterfaceSubClass != SUBCLASS_ID)
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	799b      	ldrb	r3, [r3, #6]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d16a      	bne.n	800c526 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c2>
                                        if(UseOr) {
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c456:	2b00      	cmp	r3, #0
 800c458:	d004      	beq.n	800c464 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x200>
                                                if((!((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol)))
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	79db      	ldrb	r3, [r3, #7]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d104      	bne.n	800c46c <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x208>
                                                        break;
 800c462:	e065      	b.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                if((MASK & CP_MASK_COMPARE_PROTOCOL) && uid->bInterfaceProtocol != PROTOCOL_ID)
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	79db      	ldrb	r3, [r3, #7]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d15e      	bne.n	800c52a <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2c6>
                                        isGoodInterface = true;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
                                        ifaceNumber = uid->bInterfaceNumber;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	789a      	ldrb	r2, [r3, #2]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                                        ifaceAltSet = uid->bAlternateSetting;
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	78da      	ldrb	r2, [r3, #3]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
                                        protoValue = uid->bInterfaceProtocol;
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	79da      	ldrb	r2, [r3, #7]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                        break;
 800c492:	e04d      	b.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        if(!valParser.Parse(pp, pcntdn))
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3310      	adds	r3, #16
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f003 f831 	bl	800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	f083 0301 	eor.w	r3, r3, #1
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d001      	beq.n	800c4b2 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x24e>
                                                return false;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	e049      	b.n	800c546 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                        if(isGoodInterface)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d038      	beq.n	800c52e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                if(theXtractor)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d034      	beq.n	800c52e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                                        theXtractor->EndpointXtract(confValue, ifaceNumber, ifaceAltSet, protoValue, (USB_ENDPOINT_DESCRIPTOR*)varBuffer);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6858      	ldr	r0, [r3, #4]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681c      	ldr	r4, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f893 5036 	ldrb.w	r5, [r3, #54]	; 0x36
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 6037 	ldrb.w	r6, [r3, #55]	; 0x37
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	3220      	adds	r2, #32
 800c4ec:	9201      	str	r2, [sp, #4]
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	4633      	mov	r3, r6
 800c4f2:	462a      	mov	r2, r5
 800c4f4:	47a0      	blx	r4
                                        break;
 800c4f6:	e01a      	b.n	800c52e <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2ca>
                                        if(!theSkipper.Skip(pp, pcntdn, dscrLen - 2))
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f103 0018 	add.w	r0, r3, #24
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c504:	b29b      	uxth	r3, r3
 800c506:	3b02      	subs	r3, #2
 800c508:	b29b      	uxth	r3, r3
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	68b9      	ldr	r1, [r7, #8]
 800c50e:	f7fd f822 	bl	8009556 <_ZN11ByteSkipper4SkipEPPhPtt>
 800c512:	4603      	mov	r3, r0
 800c514:	f083 0301 	eor.w	r3, r3, #1
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d008      	beq.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                return false;
 800c51e:	2300      	movs	r3, #0
 800c520:	e011      	b.n	800c546 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2e2>
                                                break;
 800c522:	bf00      	nop
 800c524:	e004      	b.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                break;
 800c526:	bf00      	nop
 800c528:	e002      	b.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                                        break;
 800c52a:	bf00      	nop
 800c52c:	e000      	b.n	800c530 <_ZN16ConfigDescParserILh255ELh1ELh1ELh7EE15ParseDescriptorEPPhPt+0x2cc>
                                        break;
 800c52e:	bf00      	nop
                        theBuffer.pValue = varBuffer;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f103 0220 	add.w	r2, r3, #32
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f8c3 2009 	str.w	r2, [r3, #9]
                        stateParseDescr = 0;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return true;
 800c544:	2301      	movs	r3, #1
}
 800c546:	4618      	mov	r0, r3
 800c548:	371c      	adds	r7, #28
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c54e:	bf00      	nop

0800c550 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>:
        int8_t registerBluetoothService(BluetoothService *pService) {
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c55a:	2300      	movs	r3, #0
 800c55c:	73fb      	strb	r3, [r7, #15]
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	2b03      	cmp	r3, #3
 800c562:	d815      	bhi.n	800c590 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x40>
                        if(!btService[i]) {
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	3318      	adds	r3, #24
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	4413      	add	r3, r2
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d109      	bne.n	800c588 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x38>
                                btService[i] = pService;
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	3318      	adds	r3, #24
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	605a      	str	r2, [r3, #4]
                                return i; // Return ID
 800c582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c586:	e005      	b.n	800c594 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0x44>
                for(uint8_t i = 0; i < BTD_NUM_SERVICES; i++) {
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	3301      	adds	r3, #1
 800c58c:	73fb      	strb	r3, [r7, #15]
 800c58e:	e7e6      	b.n	800c55e <_ZN3BTD24registerBluetoothServiceEP16BluetoothService+0xe>
                return -1; // Error registering BluetoothService
 800c590:	f04f 33ff 	mov.w	r3, #4294967295
        };
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <_ZN16BluetoothServiceC1EP3BTD>:
};

/** All Bluetooth services should inherit this class. */
class BluetoothService {
public:
        BluetoothService(BTD *p) : pBtd(p) {
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	4a0a      	ldr	r2, [pc, #40]	; (800c5d4 <_ZN16BluetoothServiceC1EP3BTD+0x34>)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	609a      	str	r2, [r3, #8]
                if(pBtd)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d005      	beq.n	800c5ca <_ZN16BluetoothServiceC1EP3BTD+0x2a>
                        pBtd->registerBluetoothService(this); // Register it as a Bluetooth service
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	6879      	ldr	r1, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff ffc3 	bl	800c550 <_ZN3BTD24registerBluetoothServiceEP16BluetoothService>
        };
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	0800f970 	.word	0x0800f970

0800c5d8 <_ZN16BluetoothService14checkHciHandleEPht>:
         * This is useful for instance if you want to set the LEDs in a specific way.
         */
        virtual void onInit() = 0;

        /** Used to check if the incoming L2CAP data matches the HCI Handle */
        bool checkHciHandle(uint8_t *buf, uint16_t handle) {
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	60f8      	str	r0, [r7, #12]
 800c5e0:	60b9      	str	r1, [r7, #8]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	80fb      	strh	r3, [r7, #6]
                return (buf[0] == (handle & 0xFF)) && (buf[1] == ((handle >> 8) | 0x20));
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	88fb      	ldrh	r3, [r7, #6]
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d10b      	bne.n	800c60c <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	88fb      	ldrh	r3, [r7, #6]
 800c5fe:	121b      	asrs	r3, r3, #8
 800c600:	f043 0320 	orr.w	r3, r3, #32
 800c604:	429a      	cmp	r2, r3
 800c606:	d101      	bne.n	800c60c <_ZN16BluetoothService14checkHciHandleEPht+0x34>
 800c608:	2301      	movs	r3, #1
 800c60a:	e000      	b.n	800c60e <_ZN16BluetoothService14checkHciHandleEPht+0x36>
 800c60c:	2300      	movs	r3, #0
        }
 800c60e:	4618      	mov	r0, r3
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <_ZN5BTHID14ParseBTHIDDataEhPh>:
        virtual void ParseBTHIDData(uint8_t len __attribute__((unused)), uint8_t *buf __attribute__((unused))) {
 800c61a:	b480      	push	{r7}
 800c61c:	b085      	sub	sp, #20
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	460b      	mov	r3, r1
 800c624:	607a      	str	r2, [r7, #4]
 800c626:	72fb      	strb	r3, [r7, #11]
                return;
 800c628:	bf00      	nop
        };
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <_ZN5BTHID11OnInitBTHIDEv>:
        /** Called when a device is connected */
        virtual void OnInitBTHID() {
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
                return;
 800c63c:	bf00      	nop
        };
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <_ZN5BTHID10ResetBTHIDEv>:
        /** Used to reset any buffers in the class that inherits this */
        virtual void ResetBTHID() {
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
                return;
 800c650:	bf00      	nop
        }
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <_ZN5BTHIDC1EP3BTDbPKc>:
#include "BTHID.h"
// To enable serial debugging see "settings.h"
//#define EXTRADEBUG // Uncomment to get even more debugging data
//#define PRINTREPORT // Uncomment to print the report send by the HID device

BTHID::BTHID(BTD *p, bool pair, const char *pin) :
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	71fb      	strb	r3, [r7, #7]
BluetoothService(p), // Pointer to USB class instance - mandatory
protocolMode(USB_HID_BOOT_PROTOCOL) {
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	68b9      	ldr	r1, [r7, #8]
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff ff95 	bl	800c5a0 <_ZN16BluetoothServiceC1EP3BTD>
 800c676:	4a1f      	ldr	r2, [pc, #124]	; (800c6f4 <_ZN5BTHIDC1EP3BTDbPKc+0x98>)
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c684:	2300      	movs	r3, #0
 800c686:	75fb      	strb	r3, [r7, #23]
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d809      	bhi.n	800c6a2 <_ZN5BTHIDC1EP3BTDbPKc+0x46>
                pRptParser[i] = NULL;
 800c68e:	7dfa      	ldrb	r2, [r7, #23]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3208      	adds	r2, #8
 800c694:	2100      	movs	r1, #0
 800c696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(uint8_t i = 0; i < NUM_PARSERS; i++)
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	3301      	adds	r3, #1
 800c69e:	75fb      	strb	r3, [r7, #23]
 800c6a0:	e7f2      	b.n	800c688 <_ZN5BTHIDC1EP3BTDbPKc+0x2c>

        pBtd->pairWithHIDDevice = pair;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	79fa      	ldrb	r2, [r7, #7]
 800c6a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        pBtd->btdPin = pin;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	611a      	str	r2, [r3, #16]

        /* Set device cid for the control and intterrupt channelse - LSB */
        sdp_dcid[0] = 0x50; // 0x0050
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2250      	movs	r2, #80	; 0x50
 800c6b8:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
        sdp_dcid[1] = 0x00;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        control_dcid[0] = 0x70; // 0x0070
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2270      	movs	r2, #112	; 0x70
 800c6c8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
        control_dcid[1] = 0x00;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
        interrupt_dcid[0] = 0x71; // 0x0071
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2271      	movs	r2, #113	; 0x71
 800c6d8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
        interrupt_dcid[1] = 0x00;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

        Reset();
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 f807 	bl	800c6f8 <_ZN5BTHID5ResetEv>
}
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	0800f944 	.word	0x0800f944

0800c6f8 <_ZN5BTHID5ResetEv>:

void BTHID::Reset() {
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
        connected = false;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	755a      	strb	r2, [r3, #21]
        activeConnection = false;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        SDPConnected = false;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        l2cap_event_flag = 0; // Reset flags
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2200      	movs	r2, #0
 800c71a:	611a      	str	r2, [r3, #16]
        l2cap_sdp_state = L2CAP_SDP_WAIT;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	220a      	movs	r2, #10
 800c720:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_WAIT;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        ResetBTHID();
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3320      	adds	r3, #32
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	4798      	blx	r3
}
 800c736:	bf00      	nop
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <_ZN5BTHID10disconnectEv>:

void BTHID::disconnect() { // Use this void to disconnect the device
 800c73e:	b590      	push	{r4, r7, lr}
 800c740:	b085      	sub	sp, #20
 800c742:	af02      	add	r7, sp, #8
 800c744:	6078      	str	r0, [r7, #4]
        if(SDPConnected)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d014      	beq.n	800c77a <_ZN5BTHID10disconnectEv+0x3c>
                pBtd->l2cap_disconnection_request(hci_handle, ++identifier, sdp_scid, sdp_dcid);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6898      	ldr	r0, [r3, #8]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	8999      	ldrh	r1, [r3, #12]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7d1b      	ldrb	r3, [r3, #20]
 800c75c:	3301      	adds	r3, #1
 800c75e:	b2da      	uxtb	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	751a      	strb	r2, [r3, #20]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7d1a      	ldrb	r2, [r3, #20]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f103 041b 	add.w	r4, r3, #27
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	336f      	adds	r3, #111	; 0x6f
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	4623      	mov	r3, r4
 800c776:	f7ff f9c4 	bl	800bb02 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        // First the HID interrupt channel has to be disconnected, then the HID control channel and finally the HCI connection
        pBtd->l2cap_disconnection_request(hci_handle, ++identifier, interrupt_scid, interrupt_dcid);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6898      	ldr	r0, [r3, #8]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	8999      	ldrh	r1, [r3, #12]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7d1b      	ldrb	r3, [r3, #20]
 800c786:	3301      	adds	r3, #1
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	751a      	strb	r2, [r3, #20]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	7d1a      	ldrb	r2, [r3, #20]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f103 0418 	add.w	r4, r3, #24
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	336d      	adds	r3, #109	; 0x6d
 800c79c:	9300      	str	r3, [sp, #0]
 800c79e:	4623      	mov	r3, r4
 800c7a0:	f7ff f9af 	bl	800bb02 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
        Reset();
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	4798      	blx	r3
        l2cap_sdp_state = L2CAP_DISCONNECT_RESPONSE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	220e      	movs	r2, #14
 800c7b4:	769a      	strb	r2, [r3, #26]
        l2cap_state = L2CAP_INTERRUPT_DISCONNECT;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2209      	movs	r2, #9
 800c7ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800c7be:	bf00      	nop
 800c7c0:	370c      	adds	r7, #12
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd90      	pop	{r4, r7, pc}
	...

0800c7c8 <_ZN5BTHID7ACLDataEPh>:

void BTHID::ACLData(uint8_t* l2capinbuf) {
 800c7c8:	b590      	push	{r4, r7, lr}
 800c7ca:	b087      	sub	sp, #28
 800c7cc:	af02      	add	r7, sp, #8
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
        if(!connected) {
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	7d5b      	ldrb	r3, [r3, #21]
 800c7d6:	f083 0301 	eor.w	r3, r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d023      	beq.n	800c828 <_ZN5BTHID7ACLDataEPh+0x60>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d11e      	bne.n	800c828 <_ZN5BTHID7ACLDataEPh+0x60>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM && !pBtd->sdpConnectionClaimed) {
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	330c      	adds	r3, #12
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	330d      	adds	r3, #13
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	021b      	lsls	r3, r3, #8
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d113      	bne.n	800c828 <_ZN5BTHID7ACLDataEPh+0x60>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	7a9b      	ldrb	r3, [r3, #10]
 800c806:	f083 0301 	eor.w	r3, r3, #1
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <_ZN5BTHID7ACLDataEPh+0x60>
                                pBtd->sdpConnectionClaimed = true;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	2201      	movs	r2, #1
 800c816:	729a      	strb	r2, [r3, #10]
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	8b5a      	ldrh	r2, [r3, #26]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	819a      	strh	r2, [r3, #12]
                                l2cap_sdp_state = L2CAP_SDP_WAIT; // Reset state
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	220a      	movs	r2, #10
 800c826:	769a      	strb	r2, [r3, #26]
                        }
                }
        }

        if(!pBtd->l2capConnectionClaimed && pBtd->incomingHIDDevice && !connected && !activeConnection) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	7a5b      	ldrb	r3, [r3, #9]
 800c82e:	f083 0301 	eor.w	r3, r3, #1
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d03a      	beq.n	800c8ae <_ZN5BTHID7ACLDataEPh+0xe6>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c840:	2b00      	cmp	r3, #0
 800c842:	d034      	beq.n	800c8ae <_ZN5BTHID7ACLDataEPh+0xe6>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	7d5b      	ldrb	r3, [r3, #21]
 800c848:	f083 0301 	eor.w	r3, r3, #1
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d02d      	beq.n	800c8ae <_ZN5BTHID7ACLDataEPh+0xe6>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800c858:	f083 0301 	eor.w	r3, r3, #1
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d025      	beq.n	800c8ae <_ZN5BTHID7ACLDataEPh+0xe6>
                if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	3308      	adds	r3, #8
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d120      	bne.n	800c8ae <_ZN5BTHID7ACLDataEPh+0xe6>
                        if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	330c      	adds	r3, #12
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	461a      	mov	r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	330d      	adds	r3, #13
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	021b      	lsls	r3, r3, #8
 800c87c:	4313      	orrs	r3, r2
 800c87e:	2b11      	cmp	r3, #17
 800c880:	d115      	bne.n	800c8ae <_ZN5BTHID7ACLDataEPh+0xe6>
                                pBtd->incomingHIDDevice = false;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                                pBtd->l2capConnectionClaimed = true; // Claim that the incoming connection belongs to this service
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	2201      	movs	r2, #1
 800c892:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	8b5a      	ldrh	r2, [r3, #26]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	819a      	strh	r2, [r3, #12]
                                l2cap_state = L2CAP_WAIT;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                }
        }

        if(checkHciHandle(l2capinbuf, hci_handle)) { // acl_handle_ok
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	899b      	ldrh	r3, [r3, #12]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	f7ff fe8e 	bl	800c5d8 <_ZN16BluetoothService14checkHciHandleEPht>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 83dd 	beq.w	800d07e <_ZN5BTHID7ACLDataEPh+0x8b6>
                if((l2capinbuf[6] | (l2capinbuf[7] << 8)) == 0x0001U) { // l2cap_control - Channel ID for ACL-U
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	3306      	adds	r3, #6
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	3307      	adds	r3, #7
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	021b      	lsls	r3, r3, #8
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	f040 829b 	bne.w	800ce12 <_ZN5BTHID7ACLDataEPh+0x64a>
                        if(l2capinbuf[8] == L2CAP_CMD_COMMAND_REJECT) {
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	f000 83c5 	beq.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[15], 0x80);
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
#endif
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_RESPONSE) {
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	f040 808d 	bne.w	800ca0e <_ZN5BTHID7ACLDataEPh+0x246>
                                if(((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) && ((l2capinbuf[18] | (l2capinbuf[19] << 8)) == SUCCESSFUL)) { // Success
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	3310      	adds	r3, #16
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	3311      	adds	r3, #17
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	4313      	orrs	r3, r2
 800c906:	2b00      	cmp	r3, #0
 800c908:	f040 83b3 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	3312      	adds	r3, #18
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	3313      	adds	r3, #19
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	021b      	lsls	r3, r3, #8
 800c91c:	4313      	orrs	r3, r2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f040 83a7 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[14] == sdp_dcid[0] && l2capinbuf[15] == sdp_dcid[1]) {
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	330e      	adds	r3, #14
 800c928:	781a      	ldrb	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800c930:	429a      	cmp	r2, r3
 800c932:	d124      	bne.n	800c97e <_ZN5BTHID7ACLDataEPh+0x1b6>
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	330f      	adds	r3, #15
 800c938:	781a      	ldrb	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c940:	429a      	cmp	r2, r3
 800c942:	d11c      	bne.n	800c97e <_ZN5BTHID7ACLDataEPh+0x1b6>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	7a5a      	ldrb	r2, [r3, #9]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	751a      	strb	r2, [r3, #20]
                                                sdp_scid[0] = l2capinbuf[12];
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	7b1a      	ldrb	r2, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	76da      	strb	r2, [r3, #27]
                                                sdp_scid[1] = l2capinbuf[13];
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	7b5a      	ldrb	r2, [r3, #13]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	771a      	strb	r2, [r3, #28]
#ifdef DEBUG_USB_HOST
                                                Notify(PSTR("\r\nSend SDP Config Request"), 0x80);
#endif
                                                identifier++;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7d1b      	ldrb	r3, [r3, #20]
 800c960:	3301      	adds	r3, #1
 800c962:	b2da      	uxtb	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	751a      	strb	r2, [r3, #20]
                                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6898      	ldr	r0, [r3, #8]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	8999      	ldrh	r1, [r3, #12]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	7d1a      	ldrb	r2, [r3, #20]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	331b      	adds	r3, #27
 800c978:	f7ff f825 	bl	800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>
 800c97c:	e379      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == control_dcid[0] && l2capinbuf[15] == control_dcid[1]) {
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	330e      	adds	r3, #14
 800c982:	781a      	ldrb	r2, [r3, #0]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d11a      	bne.n	800c9c4 <_ZN5BTHID7ACLDataEPh+0x1fc>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	330f      	adds	r3, #15
 800c992:	781a      	ldrb	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d112      	bne.n	800c9c4 <_ZN5BTHID7ACLDataEPh+0x1fc>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	7a5a      	ldrb	r2, [r3, #9]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	751a      	strb	r2, [r3, #20]
                                                control_scid[0] = l2capinbuf[12];
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	7b1a      	ldrb	r2, [r3, #12]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	759a      	strb	r2, [r3, #22]
                                                control_scid[1] = l2capinbuf[13];
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	7b5a      	ldrb	r2, [r3, #13]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	75da      	strb	r2, [r3, #23]
                                                l2cap_set_flag(L2CAP_FLAG_CONTROL_CONNECTED);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	f043 0204 	orr.w	r2, r3, #4
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	611a      	str	r2, [r3, #16]
 800c9c2:	e356      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[14] == interrupt_dcid[0] && l2capinbuf[15] == interrupt_dcid[1]) {
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	330e      	adds	r3, #14
 800c9c8:	781a      	ldrb	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	f040 834e 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	330f      	adds	r3, #15
 800c9da:	781a      	ldrb	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	f040 8345 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Connection Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	7a5a      	ldrb	r2, [r3, #9]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	751a      	strb	r2, [r3, #20]
                                                interrupt_scid[0] = l2capinbuf[12];
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	7b1a      	ldrb	r2, [r3, #12]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	761a      	strb	r2, [r3, #24]
                                                interrupt_scid[1] = l2capinbuf[13];
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	7b5a      	ldrb	r2, [r3, #13]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	765a      	strb	r2, [r3, #25]
                                                l2cap_set_flag(L2CAP_FLAG_INTERRUPT_CONNECTED);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	611a      	str	r2, [r3, #16]
 800ca0c:	e331      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONNECTION_REQUEST) {
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	3308      	adds	r3, #8
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d15a      	bne.n	800cace <_ZN5BTHID7ACLDataEPh+0x306>
                                Notify(PSTR(" "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[14], 0x80);
                                Notify(PSTR(" Identifier: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[9], 0x80);
#endif
                                if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == SDP_PSM) {
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	330c      	adds	r3, #12
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	330d      	adds	r3, #13
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	021b      	lsls	r3, r3, #8
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d112      	bne.n	800ca54 <_ZN5BTHID7ACLDataEPh+0x28c>
                                        identifier = l2capinbuf[9];
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	7a5a      	ldrb	r2, [r3, #9]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	751a      	strb	r2, [r3, #20]
                                        sdp_scid[0] = l2capinbuf[14];
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	7b9a      	ldrb	r2, [r3, #14]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	76da      	strb	r2, [r3, #27]
                                        sdp_scid[1] = l2capinbuf[15];
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	7bda      	ldrb	r2, [r3, #15]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	771a      	strb	r2, [r3, #28]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	611a      	str	r2, [r3, #16]
 800ca52:	e30e      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_CTRL_PSM) {
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	330c      	adds	r3, #12
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	330d      	adds	r3, #13
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	021b      	lsls	r3, r3, #8
 800ca64:	4313      	orrs	r3, r2
 800ca66:	2b11      	cmp	r3, #17
 800ca68:	d112      	bne.n	800ca90 <_ZN5BTHID7ACLDataEPh+0x2c8>
                                        identifier = l2capinbuf[9];
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	7a5a      	ldrb	r2, [r3, #9]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	751a      	strb	r2, [r3, #20]
                                        control_scid[0] = l2capinbuf[14];
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	7b9a      	ldrb	r2, [r3, #14]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	759a      	strb	r2, [r3, #22]
                                        control_scid[1] = l2capinbuf[15];
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	7bda      	ldrb	r2, [r3, #15]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	75da      	strb	r2, [r3, #23]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	f043 0201 	orr.w	r2, r3, #1
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	611a      	str	r2, [r3, #16]
 800ca8e:	e2f0      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if((l2capinbuf[12] | (l2capinbuf[13] << 8)) == HID_INTR_PSM) {
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	330c      	adds	r3, #12
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	461a      	mov	r2, r3
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	330d      	adds	r3, #13
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	021b      	lsls	r3, r3, #8
 800caa0:	4313      	orrs	r3, r2
 800caa2:	2b13      	cmp	r3, #19
 800caa4:	f040 82e5 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        identifier = l2capinbuf[9];
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	7a5a      	ldrb	r2, [r3, #9]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	751a      	strb	r2, [r3, #20]
                                        interrupt_scid[0] = l2capinbuf[14];
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	7b9a      	ldrb	r2, [r3, #14]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	761a      	strb	r2, [r3, #24]
                                        interrupt_scid[1] = l2capinbuf[15];
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	7bda      	ldrb	r2, [r3, #15]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	765a      	strb	r2, [r3, #25]
                                        l2cap_set_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	f043 0210 	orr.w	r2, r3, #16
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	611a      	str	r2, [r3, #16]
 800cacc:	e2d1      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_RESPONSE) {
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	3308      	adds	r3, #8
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b05      	cmp	r3, #5
 800cad6:	d15e      	bne.n	800cb96 <_ZN5BTHID7ACLDataEPh+0x3ce>
                                if((l2capinbuf[16] | (l2capinbuf[17] << 8)) == 0x0000) { // Success
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	3310      	adds	r3, #16
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	461a      	mov	r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	3311      	adds	r3, #17
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	021b      	lsls	r3, r3, #8
 800cae8:	4313      	orrs	r3, r2
 800caea:	2b00      	cmp	r3, #0
 800caec:	f040 82c1 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	330c      	adds	r3, #12
 800caf4:	781a      	ldrb	r2, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d112      	bne.n	800cb26 <_ZN5BTHID7ACLDataEPh+0x35e>
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	330d      	adds	r3, #13
 800cb04:	781a      	ldrb	r2, [r3, #0]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d10a      	bne.n	800cb26 <_ZN5BTHID7ACLDataEPh+0x35e>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nSDP Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	7a5a      	ldrb	r2, [r3, #9]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	611a      	str	r2, [r3, #16]
 800cb24:	e2a5      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	330c      	adds	r3, #12
 800cb2a:	781a      	ldrb	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d112      	bne.n	800cb5c <_ZN5BTHID7ACLDataEPh+0x394>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	330d      	adds	r3, #13
 800cb3a:	781a      	ldrb	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d10a      	bne.n	800cb5c <_ZN5BTHID7ACLDataEPh+0x394>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Control Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	7a5a      	ldrb	r2, [r3, #9]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	f043 0202 	orr.w	r2, r3, #2
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	611a      	str	r2, [r3, #16]
 800cb5a:	e28a      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	330c      	adds	r3, #12
 800cb60:	781a      	ldrb	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	f040 8282 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	330d      	adds	r3, #13
 800cb72:	781a      	ldrb	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	f040 8279 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                                Notify(PSTR("\r\nHID Interrupt Configuration Complete"), 0x80);
#endif
                                                identifier = l2capinbuf[9];
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	7a5a      	ldrb	r2, [r3, #9]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	751a      	strb	r2, [r3, #20]
                                                l2cap_set_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	f043 0220 	orr.w	r2, r3, #32
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	611a      	str	r2, [r3, #16]
 800cb94:	e26d      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                        }
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_CONFIG_REQUEST) {
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d155      	bne.n	800cc4c <_ZN5BTHID7ACLDataEPh+0x484>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	330c      	adds	r3, #12
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d113      	bne.n	800cbd8 <_ZN5BTHID7ACLDataEPh+0x410>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	330d      	adds	r3, #13
 800cbb4:	781a      	ldrb	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d10b      	bne.n	800cbd8 <_ZN5BTHID7ACLDataEPh+0x410>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nSDP Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], sdp_scid);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6898      	ldr	r0, [r3, #8]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	8999      	ldrh	r1, [r3, #12]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	3309      	adds	r3, #9
 800cbcc:	781a      	ldrb	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	331b      	adds	r3, #27
 800cbd2:	f7fe ff43 	bl	800ba5c <_ZN3BTD21l2cap_config_responseEthPh>
 800cbd6:	e24c      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	330c      	adds	r3, #12
 800cbdc:	781a      	ldrb	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d113      	bne.n	800cc10 <_ZN5BTHID7ACLDataEPh+0x448>
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	330d      	adds	r3, #13
 800cbec:	781a      	ldrb	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d10b      	bne.n	800cc10 <_ZN5BTHID7ACLDataEPh+0x448>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Control Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], control_scid);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6898      	ldr	r0, [r3, #8]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	8999      	ldrh	r1, [r3, #12]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	3309      	adds	r3, #9
 800cc04:	781a      	ldrb	r2, [r3, #0]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3316      	adds	r3, #22
 800cc0a:	f7fe ff27 	bl	800ba5c <_ZN3BTD21l2cap_config_responseEthPh>
 800cc0e:	e230      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	330c      	adds	r3, #12
 800cc14:	781a      	ldrb	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	f040 8228 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	330d      	adds	r3, #13
 800cc26:	781a      	ldrb	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	f040 821f 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nHID Interrupt Configuration Request"), 0x80);
#endif
                                        pBtd->l2cap_config_response(hci_handle, l2capinbuf[9], interrupt_scid);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6898      	ldr	r0, [r3, #8]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	8999      	ldrh	r1, [r3, #12]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	3309      	adds	r3, #9
 800cc40:	781a      	ldrb	r2, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3318      	adds	r3, #24
 800cc46:	f7fe ff09 	bl	800ba5c <_ZN3BTD21l2cap_config_responseEthPh>
 800cc4a:	e212      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_REQUEST) {
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	3308      	adds	r3, #8
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b06      	cmp	r3, #6
 800cc54:	d170      	bne.n	800cd38 <_ZN5BTHID7ACLDataEPh+0x570>
                                if(l2capinbuf[12] == sdp_dcid[0] && l2capinbuf[13] == sdp_dcid[1]) {
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	330c      	adds	r3, #12
 800cc5a:	781a      	ldrb	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d112      	bne.n	800cc8c <_ZN5BTHID7ACLDataEPh+0x4c4>
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	330d      	adds	r3, #13
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d10a      	bne.n	800cc8c <_ZN5BTHID7ACLDataEPh+0x4c4>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	7a5a      	ldrb	r2, [r3, #9]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	611a      	str	r2, [r3, #16]
 800cc8a:	e1f2      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_dcid[0] && l2capinbuf[13] == control_dcid[1]) {
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	330c      	adds	r3, #12
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d121      	bne.n	800cce0 <_ZN5BTHID7ACLDataEPh+0x518>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	330d      	adds	r3, #13
 800cca0:	781a      	ldrb	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d119      	bne.n	800cce0 <_ZN5BTHID7ACLDataEPh+0x518>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	7a5a      	ldrb	r2, [r3, #9]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, control_dcid, control_scid);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6898      	ldr	r0, [r3, #8]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	8999      	ldrh	r1, [r3, #12]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	7d1a      	ldrb	r2, [r3, #20]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3316      	adds	r3, #22
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4623      	mov	r3, r4
 800ccce:	f7fe ff55 	bl	800bb7c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
 800ccde:	e1c8      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_dcid[0] && l2capinbuf[13] == interrupt_dcid[1]) {
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	330c      	adds	r3, #12
 800cce4:	781a      	ldrb	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ccec:	429a      	cmp	r2, r3
 800ccee:	f040 81c0 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	330d      	adds	r3, #13
 800ccf6:	781a      	ldrb	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	f040 81b7 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                        Notify(PSTR("\r\nDisconnect Request: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	7a5a      	ldrb	r2, [r3, #9]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	751a      	strb	r2, [r3, #20]
                                        pBtd->l2cap_disconnection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6898      	ldr	r0, [r3, #8]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8999      	ldrh	r1, [r3, #12]
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d1a      	ldrb	r2, [r3, #20]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3318      	adds	r3, #24
 800cd22:	9300      	str	r3, [sp, #0]
 800cd24:	4623      	mov	r3, r4
 800cd26:	f7fe ff29 	bl	800bb7c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                                        Reset();
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	4798      	blx	r3
 800cd36:	e19c      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_DISCONNECT_RESPONSE) {
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	3308      	adds	r3, #8
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b07      	cmp	r3, #7
 800cd40:	d14c      	bne.n	800cddc <_ZN5BTHID7ACLDataEPh+0x614>
                                if(l2capinbuf[12] == sdp_scid[0] && l2capinbuf[13] == sdp_scid[1]) {
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	330c      	adds	r3, #12
 800cd46:	781a      	ldrb	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	7edb      	ldrb	r3, [r3, #27]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d111      	bne.n	800cd74 <_ZN5BTHID7ACLDataEPh+0x5ac>
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	330d      	adds	r3, #13
 800cd54:	781a      	ldrb	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7f1b      	ldrb	r3, [r3, #28]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d10a      	bne.n	800cd74 <_ZN5BTHID7ACLDataEPh+0x5ac>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: SDP Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	7a5a      	ldrb	r2, [r3, #9]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_RESPONSE);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	611a      	str	r2, [r3, #16]
 800cd72:	e17e      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == control_scid[0] && l2capinbuf[13] == control_scid[1]) {
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	330c      	adds	r3, #12
 800cd78:	781a      	ldrb	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7d9b      	ldrb	r3, [r3, #22]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d111      	bne.n	800cda6 <_ZN5BTHID7ACLDataEPh+0x5de>
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	330d      	adds	r3, #13
 800cd86:	781a      	ldrb	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7ddb      	ldrb	r3, [r3, #23]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d10a      	bne.n	800cda6 <_ZN5BTHID7ACLDataEPh+0x5de>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Control Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	7a5a      	ldrb	r2, [r3, #9]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	f043 0208 	orr.w	r2, r3, #8
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	611a      	str	r2, [r3, #16]
 800cda4:	e165      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                } else if(l2capinbuf[12] == interrupt_scid[0] && l2capinbuf[13] == interrupt_scid[1]) {
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	330c      	adds	r3, #12
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	7e1b      	ldrb	r3, [r3, #24]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	f040 815e 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	330d      	adds	r3, #13
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	7e5b      	ldrb	r3, [r3, #25]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	f040 8156 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef EXTRADEBUG
                                        Notify(PSTR("\r\nDisconnect Response: Interrupt Channel"), 0x80);
#endif
                                        identifier = l2capinbuf[9];
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	7a5a      	ldrb	r2, [r3, #9]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	751a      	strb	r2, [r3, #20]
                                        l2cap_set_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	611a      	str	r2, [r3, #16]
 800cdda:	e14a      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                }
                        } else if(l2capinbuf[8] == L2CAP_CMD_INFORMATION_REQUEST) {
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	3308      	adds	r3, #8
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b0a      	cmp	r3, #10
 800cde4:	f040 8145 	bne.w	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nInformation request"), 0x80);
#endif
                                identifier = l2capinbuf[9];
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	7a5a      	ldrb	r2, [r3, #9]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_information_response(hci_handle, identifier, l2capinbuf[12], l2capinbuf[13]);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6898      	ldr	r0, [r3, #8]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	8999      	ldrh	r1, [r3, #12]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	7d1a      	ldrb	r2, [r3, #20]
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	330c      	adds	r3, #12
 800ce00:	781c      	ldrb	r4, [r3, #0]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	330d      	adds	r3, #13
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	f7fe fef3 	bl	800bbf6 <_ZN3BTD26l2cap_information_responseEthhh>
 800ce10:	e12f      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                identifier = l2capinbuf[9];
                                Notify(PSTR("\r\nL2CAP Unknown Signaling Command: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == sdp_dcid[0] && l2capinbuf[7] == sdp_dcid[1]) { // SDP
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	3306      	adds	r3, #6
 800ce16:	781a      	ldrb	r2, [r3, #0]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	f040 8087 	bne.w	800cf32 <_ZN5BTHID7ACLDataEPh+0x76a>
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	3307      	adds	r3, #7
 800ce28:	781a      	ldrb	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d17e      	bne.n	800cf32 <_ZN5BTHID7ACLDataEPh+0x76a>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	3308      	adds	r3, #8
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d131      	bne.n	800cea2 <_ZN5BTHID7ACLDataEPh+0x6da>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_SEARCH_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_SEARCH_RESPONSE;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2203      	movs	r2, #3
 800ce42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	7a5a      	ldrb	r2, [r3, #9]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	7a9a      	ldrb	r2, [r3, #10]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2205      	movs	r2, #5
 800ce66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB TotalServiceRecordCount
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x00; // LSB TotalServiceRecordCount = 0
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                l2capoutbuf[7] = 0x00; // MSB CurrentServiceRecordCount
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // LSB CurrentServiceRecordCount = 0
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3328      	adds	r3, #40	; 0x28
 800ce96:	220a      	movs	r2, #10
 800ce98:	4619      	mov	r1, r3
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fb7a 	bl	800d594 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cea0:	e0e4      	b.n	800d06c <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_ATTRIBUTE_REQUEST) {
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	3308      	adds	r3, #8
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b04      	cmp	r3, #4
 800ceaa:	d131      	bne.n	800cf10 <_ZN5BTHID7ACLDataEPh+0x748>
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nSDP_SERVICE_ATTRIBUTE_REQUEST"), 0x80);
#endif
                                // Send response
                                l2capoutbuf[0] = SDP_SERVICE_ATTRIBUTE_RESPONSE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2205      	movs	r2, #5
 800ceb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                l2capoutbuf[1] = l2capinbuf[9];//transactionIDHigh;
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	7a5a      	ldrb	r2, [r3, #9]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
                                l2capoutbuf[2] = l2capinbuf[10];//transactionIDLow;
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	7a9a      	ldrb	r2, [r3, #10]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

                                l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2205      	movs	r2, #5
 800ced4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

                                l2capoutbuf[5] = 0x00; // MSB AttributeListByteCount
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
                                l2capoutbuf[6] = 0x02; // LSB AttributeListByteCount = 2
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2202      	movs	r2, #2
 800cee4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

                                // TODO: What to send?
                                l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2235      	movs	r2, #53	; 0x35
 800ceec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                l2capoutbuf[8] = 0x00; // Length = 0
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

                                l2capoutbuf[9] = 0x00; // No continuation state
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

                                SDP_Command(l2capoutbuf, 10);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3328      	adds	r3, #40	; 0x28
 800cf04:	220a      	movs	r2, #10
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fb43 	bl	800d594 <_ZN5BTHID11SDP_CommandEPhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cf0e:	e0ad      	b.n	800d06c <_ZN5BTHID7ACLDataEPh+0x8a4>
                        } else if(l2capinbuf[8] == SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST) {
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	3308      	adds	r3, #8
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b06      	cmp	r3, #6
 800cf18:	f040 80a8 	bne.w	800d06c <_ZN5BTHID7ACLDataEPh+0x8a4>
                                for(uint8_t i = 0; i < length; i++) {
                                        D_PrintHex<uint8_t > (l2capinbuf[13 + i], 0x80);
                                        Notify(PSTR(" "), 0x80);
                                }
#endif
                                serviceNotSupported(l2capinbuf[9], l2capinbuf[10]); // The service is not supported
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	3309      	adds	r3, #9
 800cf20:	7819      	ldrb	r1, [r3, #0]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	330a      	adds	r3, #10
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fb4c 	bl	800d5c8 <_ZN5BTHID19serviceNotSupportedEhh>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800cf30:	e09c      	b.n	800d06c <_ZN5BTHID7ACLDataEPh+0x8a4>
                        else {
                                Notify(PSTR("\r\nUnknown PDU: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
                        }
#endif
                } else if(l2capinbuf[6] == interrupt_dcid[0] && l2capinbuf[7] == interrupt_dcid[1]) { // l2cap_interrupt
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	3306      	adds	r3, #6
 800cf36:	781a      	ldrb	r2, [r3, #0]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d166      	bne.n	800d010 <_ZN5BTHID7ACLDataEPh+0x848>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	3307      	adds	r3, #7
 800cf46:	781a      	ldrb	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d15e      	bne.n	800d010 <_ZN5BTHID7ACLDataEPh+0x848>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA1) { // HID BT DATA (0xA0) | Report Type (Input 0x01)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	3308      	adds	r3, #8
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2ba1      	cmp	r3, #161	; 0xa1
 800cf5a:	f040 8089 	bne.w	800d070 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                lastBtDataInputIntMillis = (uint32_t)millis(); // Store the timestamp of the report
 800cf5e:	f7f4 fdc3 	bl	8001ae8 <HAL_GetTick>
 800cf62:	4603      	mov	r3, r0
 800cf64:	4a48      	ldr	r2, [pc, #288]	; (800d088 <_ZN5BTHID7ACLDataEPh+0x8c0>)
 800cf66:	fba2 2303 	umull	r2, r3, r2, r3
 800cf6a:	099a      	lsrs	r2, r3, #6
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	675a      	str	r2, [r3, #116]	; 0x74

                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	3305      	adds	r3, #5
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	021b      	lsls	r3, r3, #8
 800cf78:	b21a      	sxth	r2, r3
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	b21b      	sxth	r3, r3
 800cf82:	4313      	orrs	r3, r2
 800cf84:	b21b      	sxth	r3, r3
 800cf86:	81fb      	strh	r3, [r7, #14]
                                ParseBTHIDData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3314      	adds	r3, #20
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	89fa      	ldrh	r2, [r7, #14]
 800cf92:	b2d2      	uxtb	r2, r2
 800cf94:	3a01      	subs	r2, #1
 800cf96:	b2d1      	uxtb	r1, r2
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	3209      	adds	r2, #9
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	4798      	blx	r3

                                switch(l2capinbuf[9]) { // Report ID
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	3309      	adds	r3, #9
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d002      	beq.n	800cfb0 <_ZN5BTHID7ACLDataEPh+0x7e8>
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d016      	beq.n	800cfdc <_ZN5BTHID7ACLDataEPh+0x814>
                        } else {
#ifdef EXTRADEBUG
                                Notify(PSTR("\r\nUnhandled L2CAP interrupt report: "), 0x80);
                                D_PrintHex<uint8_t > (l2capinbuf[8], 0x80);
#endif
                        }
 800cfae:	e05f      	b.n	800d070 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                if(pRptParser[KEYBOARD_PARSER_ID])
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d027      	beq.n	800d008 <_ZN5BTHID7ACLDataEPh+0x840>
                                                        pRptParser[KEYBOARD_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a18      	ldr	r0, [r3, #32]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a1b      	ldr	r3, [r3, #32]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	681c      	ldr	r4, [r3, #0]
 800cfc4:	89fb      	ldrh	r3, [r7, #14]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	3b02      	subs	r3, #2
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	330a      	adds	r3, #10
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	6879      	ldr	r1, [r7, #4]
 800cfd8:	47a0      	blx	r4
                                                break;
 800cfda:	e015      	b.n	800d008 <_ZN5BTHID7ACLDataEPh+0x840>
                                                if(pRptParser[MOUSE_PARSER_ID])
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d013      	beq.n	800d00c <_ZN5BTHID7ACLDataEPh+0x844>
                                                        pRptParser[MOUSE_PARSER_ID]->Parse(reinterpret_cast<USBHID *>(this), 0, (uint8_t)(length - 2), &l2capinbuf[10]); // Use reinterpret_cast again to extract the instance
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681c      	ldr	r4, [r3, #0]
 800cff0:	89fb      	ldrh	r3, [r7, #14]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	3b02      	subs	r3, #2
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	330a      	adds	r3, #10
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	4613      	mov	r3, r2
 800d000:	2200      	movs	r2, #0
 800d002:	6879      	ldr	r1, [r7, #4]
 800d004:	47a0      	blx	r4
                                                break;
 800d006:	e001      	b.n	800d00c <_ZN5BTHID7ACLDataEPh+0x844>
                                                break;
 800d008:	bf00      	nop
 800d00a:	e031      	b.n	800d070 <_ZN5BTHID7ACLDataEPh+0x8a8>
                                                break;
 800d00c:	bf00      	nop
                        }
 800d00e:	e02f      	b.n	800d070 <_ZN5BTHID7ACLDataEPh+0x8a8>
                } else if(l2capinbuf[6] == control_dcid[0] && l2capinbuf[7] == control_dcid[1]) { // l2cap_control
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	3306      	adds	r3, #6
 800d014:	781a      	ldrb	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d128      	bne.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	3307      	adds	r3, #7
 800d024:	781a      	ldrb	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d120      	bne.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        for(uint16_t i = 0; i < ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]); i++) {
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
#endif
                        if(l2capinbuf[8] == 0xA3) { // HID BT DATA (0xA0) | Report Type (Feature 0x03)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	3308      	adds	r3, #8
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	2ba3      	cmp	r3, #163	; 0xa3
 800d038:	d11b      	bne.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                                uint16_t length = ((uint16_t)l2capinbuf[5] << 8 | l2capinbuf[4]);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	3305      	adds	r3, #5
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	b21a      	sxth	r2, r3
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	3304      	adds	r3, #4
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	b21b      	sxth	r3, r3
 800d04c:	4313      	orrs	r3, r2
 800d04e:	b21b      	sxth	r3, r3
 800d050:	81bb      	strh	r3, [r7, #12]
                                ParseBTHIDControlData((uint8_t)(length - 1), &l2capinbuf[9]); // First byte will be the report ID
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3318      	adds	r3, #24
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	89ba      	ldrh	r2, [r7, #12]
 800d05c:	b2d2      	uxtb	r2, r2
 800d05e:	3a01      	subs	r2, #1
 800d060:	b2d1      	uxtb	r1, r2
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	3209      	adds	r2, #9
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	4798      	blx	r3
 800d06a:	e002      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        if(l2capinbuf[8] == SDP_SERVICE_SEARCH_REQUEST) {
 800d06c:	bf00      	nop
 800d06e:	e000      	b.n	800d072 <_ZN5BTHID7ACLDataEPh+0x8aa>
                        }
 800d070:	bf00      	nop
                                D_PrintHex<uint8_t > (l2capinbuf[i + 8], 0x80);
                                Notify(PSTR(" "), 0x80);
                        }
                }
#endif
                SDP_task();
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f80a 	bl	800d08c <_ZN5BTHID8SDP_taskEv>
                L2CAP_task();
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 f8b9 	bl	800d1f0 <_ZN5BTHID10L2CAP_taskEv>
        }
}
 800d07e:	bf00      	nop
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	bd90      	pop	{r4, r7, pc}
 800d086:	bf00      	nop
 800d088:	10624dd3 	.word	0x10624dd3

0800d08c <_ZN5BTHID8SDP_taskEv>:

void BTHID::SDP_task() {
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af02      	add	r7, sp, #8
 800d092:	6078      	str	r0, [r7, #4]
        switch(l2cap_sdp_state) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	7e9b      	ldrb	r3, [r3, #26]
 800d098:	2b0e      	cmp	r3, #14
 800d09a:	f000 8086 	beq.w	800d1aa <_ZN5BTHID8SDP_taskEv+0x11e>
 800d09e:	2b0e      	cmp	r3, #14
 800d0a0:	f300 80a1 	bgt.w	800d1e6 <_ZN5BTHID8SDP_taskEv+0x15a>
 800d0a4:	2b0a      	cmp	r3, #10
 800d0a6:	d002      	beq.n	800d0ae <_ZN5BTHID8SDP_taskEv+0x22>
 800d0a8:	2b0b      	cmp	r3, #11
 800d0aa:	d06a      	beq.n	800d182 <_ZN5BTHID8SDP_taskEv+0xf6>
                                hci_handle = -1; // Reset handle
                                Reset();
                        }
                        break;
        }
}
 800d0ac:	e09b      	b.n	800d1e6 <_ZN5BTHID8SDP_taskEv+0x15a>
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST)) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d043      	beq.n	800d142 <_ZN5BTHID8SDP_taskEv+0xb6>
                                l2cap_clear_flag(L2CAP_FLAG_CONNECTION_SDP_REQUEST); // Clear flag
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	691b      	ldr	r3, [r3, #16]
 800d0be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	611a      	str	r2, [r3, #16]
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, PENDING);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6898      	ldr	r0, [r3, #8]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	8999      	ldrh	r1, [r3, #12]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	7d1a      	ldrb	r2, [r3, #20]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	331b      	adds	r3, #27
 800d0dc:	2501      	movs	r5, #1
 800d0de:	9501      	str	r5, [sp, #4]
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	4623      	mov	r3, r4
 800d0e4:	f7fe fc22 	bl	800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d0e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d0ec:	f7f4 fd08 	bl	8001b00 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, sdp_dcid, sdp_scid, SUCCESSFUL);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6898      	ldr	r0, [r3, #8]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	8999      	ldrh	r1, [r3, #12]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	7d1a      	ldrb	r2, [r3, #20]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	331b      	adds	r3, #27
 800d106:	2500      	movs	r5, #0
 800d108:	9501      	str	r5, [sp, #4]
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	4623      	mov	r3, r4
 800d10e:	f7fe fc0d 	bl	800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	7d1b      	ldrb	r3, [r3, #20]
 800d116:	3301      	adds	r3, #1
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d11e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d122:	f7f4 fced 	bl	8001b00 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, sdp_scid);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6898      	ldr	r0, [r3, #8]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	8999      	ldrh	r1, [r3, #12]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	7d1a      	ldrb	r2, [r3, #20]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	331b      	adds	r3, #27
 800d136:	f7fe fc46 	bl	800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_sdp_state = L2CAP_SDP_SUCCESS;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	220b      	movs	r2, #11
 800d13e:	769a      	strb	r2, [r3, #26]
                        break;
 800d140:	e04c      	b.n	800d1dc <_ZN5BTHID8SDP_taskEv+0x150>
                        } else if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST)) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	691b      	ldr	r3, [r3, #16]
 800d146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d046      	beq.n	800d1dc <_ZN5BTHID8SDP_taskEv+0x150>
                                l2cap_clear_flag(L2CAP_FLAG_DISCONNECT_SDP_REQUEST); // Clear flag
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	611a      	str	r2, [r3, #16]
                                SDPConnected = false;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                pBtd->l2cap_disconnection_response(hci_handle, identifier, sdp_dcid, sdp_scid);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6898      	ldr	r0, [r3, #8]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	8999      	ldrh	r1, [r3, #12]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	7d1a      	ldrb	r2, [r3, #20]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	331b      	adds	r3, #27
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	4623      	mov	r3, r4
 800d17c:	f7fe fcfe 	bl	800bb7c <_ZN3BTD28l2cap_disconnection_responseEthPhS0_>
                        break;
 800d180:	e02c      	b.n	800d1dc <_ZN5BTHID8SDP_taskEv+0x150>
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS)) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d028      	beq.n	800d1e0 <_ZN5BTHID8SDP_taskEv+0x154>
                                l2cap_clear_flag(L2CAP_FLAG_CONFIG_SDP_SUCCESS); // Clear flag
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	611a      	str	r2, [r3, #16]
                                SDPConnected = true;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
                                l2cap_sdp_state = L2CAP_SDP_WAIT;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	220a      	movs	r2, #10
 800d1a6:	769a      	strb	r2, [r3, #26]
                        break;
 800d1a8:	e01a      	b.n	800d1e0 <_ZN5BTHID8SDP_taskEv+0x154>
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_RESPONSE)) {
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	691b      	ldr	r3, [r3, #16]
 800d1ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d016      	beq.n	800d1e4 <_ZN5BTHID8SDP_taskEv+0x158>
                                pBtd->hci_disconnect(hci_handle);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	689a      	ldr	r2, [r3, #8]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	899b      	ldrh	r3, [r3, #12]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4610      	mov	r0, r2
 800d1c2:	f7fe fa84 	bl	800b6ce <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1cc:	819a      	strh	r2, [r3, #12]
                                Reset();
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	3308      	adds	r3, #8
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	4798      	blx	r3
                        break;
 800d1da:	e003      	b.n	800d1e4 <_ZN5BTHID8SDP_taskEv+0x158>
                        break;
 800d1dc:	bf00      	nop
 800d1de:	e002      	b.n	800d1e6 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d1e0:	bf00      	nop
 800d1e2:	e000      	b.n	800d1e6 <_ZN5BTHID8SDP_taskEv+0x15a>
                        break;
 800d1e4:	bf00      	nop
}
 800d1e6:	bf00      	nop
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d1f0 <_ZN5BTHID10L2CAP_taskEv>:

void BTHID::L2CAP_task() {
 800d1f0:	b5b0      	push	{r4, r5, r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af02      	add	r7, sp, #8
 800d1f6:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d1fe:	3b01      	subs	r3, #1
 800d200:	2b08      	cmp	r3, #8
 800d202:	f200 812f 	bhi.w	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
 800d206:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <_ZN5BTHID10L2CAP_taskEv+0x1c>)
 800d208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20c:	0800d443 	.word	0x0800d443
 800d210:	0800d2db 	.word	0x0800d2db
 800d214:	0800d313 	.word	0x0800d313
 800d218:	0800d231 	.word	0x0800d231
 800d21c:	0800d40f 	.word	0x0800d40f
 800d220:	0800d24f 	.word	0x0800d24f
 800d224:	0800d35d 	.word	0x0800d35d
 800d228:	0800d393 	.word	0x0800d393
 800d22c:	0800d3cf 	.word	0x0800d3cf
                        /* These states are used if the HID device is the host */
                case L2CAP_CONTROL_SUCCESS:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	f003 0302 	and.w	r3, r3, #2
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f000 8104 	beq.w	800d446 <_ZN5BTHID10L2CAP_taskEv+0x256>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Control Successfully Configured"), 0x80);
#endif
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f9fd 	bl	800d63e <_ZN5BTHID11setProtocolEv>
                                l2cap_state = L2CAP_INTERRUPT_SETUP;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2206      	movs	r2, #6
 800d248:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d24c:	e0fb      	b.n	800d446 <_ZN5BTHID10L2CAP_taskEv+0x256>

                case L2CAP_INTERRUPT_SETUP:
                        if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_INTERRUPT_REQUEST)) {
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	f003 0310 	and.w	r3, r3, #16
 800d256:	2b00      	cmp	r3, #0
 800d258:	f000 80f7 	beq.w	800d44a <_ZN5BTHID10L2CAP_taskEv+0x25a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Interrupt Incoming Connection Request"), 0x80);
#endif
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, PENDING);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6898      	ldr	r0, [r3, #8]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	8999      	ldrh	r1, [r3, #12]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7d1a      	ldrb	r2, [r3, #20]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	3318      	adds	r3, #24
 800d272:	2501      	movs	r5, #1
 800d274:	9501      	str	r5, [sp, #4]
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	4623      	mov	r3, r4
 800d27a:	f7fe fb57 	bl	800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d27e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d282:	f7f4 fc3d 	bl	8001b00 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, interrupt_dcid, interrupt_scid, SUCCESSFUL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6898      	ldr	r0, [r3, #8]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	8999      	ldrh	r1, [r3, #12]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	7d1a      	ldrb	r2, [r3, #20]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f103 046d 	add.w	r4, r3, #109	; 0x6d
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3318      	adds	r3, #24
 800d29c:	2500      	movs	r5, #0
 800d29e:	9501      	str	r5, [sp, #4]
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	4623      	mov	r3, r4
 800d2a4:	f7fe fb42 	bl	800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	7d1b      	ldrb	r3, [r3, #20]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d2b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d2b8:	f7f4 fc22 	bl	8001b00 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6898      	ldr	r0, [r3, #8]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	8999      	ldrh	r1, [r3, #12]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7d1a      	ldrb	r2, [r3, #20]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	3318      	adds	r3, #24
 800d2cc:	f7fe fb7b 	bl	800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>

                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2208      	movs	r2, #8
 800d2d4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d2d8:	e0b7      	b.n	800d44a <_ZN5BTHID10L2CAP_taskEv+0x25a>

                        /* These states are used if the Arduino is the host */
                case L2CAP_CONTROL_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONTROL_CONNECTED)) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	f003 0304 	and.w	r3, r3, #4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80b3 	beq.w	800d44e <_ZN5BTHID10L2CAP_taskEv+0x25e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Config Request"), 0x80);
#endif
                                identifier++;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7d1b      	ldrb	r3, [r3, #20]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	b2da      	uxtb	r2, r3
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6898      	ldr	r0, [r3, #8]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	8999      	ldrh	r1, [r3, #12]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	7d1a      	ldrb	r2, [r3, #20]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3316      	adds	r3, #22
 800d304:	f7fe fb5f 	bl	800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_CONFIG_REQUEST;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2203      	movs	r2, #3
 800d30c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d310:	e09d      	b.n	800d44e <_ZN5BTHID10L2CAP_taskEv+0x25e>

                case L2CAP_CONTROL_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_CONTROL_SUCCESS)) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	f003 0302 	and.w	r3, r3, #2
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f000 8099 	beq.w	800d452 <_ZN5BTHID10L2CAP_taskEv+0x262>
                                setProtocol(); // Set protocol before establishing HID interrupt channel
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f98c 	bl	800d63e <_ZN5BTHID11setProtocolEv>
                                delay(1); // Short delay between commands - just to be sure
 800d326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d32a:	f7f4 fbe9 	bl	8001b00 <HAL_Delay>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Connection Request"), 0x80);
#endif
                                identifier++;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7d1b      	ldrb	r3, [r3, #20]
 800d332:	3301      	adds	r3, #1
 800d334:	b2da      	uxtb	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, interrupt_dcid, HID_INTR_PSM);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6898      	ldr	r0, [r3, #8]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	8999      	ldrh	r1, [r3, #12]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7d1a      	ldrb	r2, [r3, #20]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	336d      	adds	r3, #109	; 0x6d
 800d34a:	2413      	movs	r4, #19
 800d34c:	9400      	str	r4, [sp, #0]
 800d34e:	f7fe faaf 	bl	800b8b0 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_INTERRUPT_CONNECT_REQUEST;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2207      	movs	r2, #7
 800d356:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d35a:	e07a      	b.n	800d452 <_ZN5BTHID10L2CAP_taskEv+0x262>

                case L2CAP_INTERRUPT_CONNECT_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_INTERRUPT_CONNECTED)) {
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d364:	2b00      	cmp	r3, #0
 800d366:	d076      	beq.n	800d456 <_ZN5BTHID10L2CAP_taskEv+0x266>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Interrupt Config Request"), 0x80);
#endif
                                identifier++;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	3301      	adds	r3, #1
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_config_request(hci_handle, identifier, interrupt_scid);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6898      	ldr	r0, [r3, #8]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	8999      	ldrh	r1, [r3, #12]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	7d1a      	ldrb	r2, [r3, #20]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	3318      	adds	r3, #24
 800d384:	f7fe fb1f 	bl	800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_INTERRUPT_CONFIG_REQUEST;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2208      	movs	r2, #8
 800d38c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d390:	e061      	b.n	800d456 <_ZN5BTHID10L2CAP_taskEv+0x266>

                case L2CAP_INTERRUPT_CONFIG_REQUEST:
                        if(l2cap_check_flag(L2CAP_FLAG_CONFIG_INTERRUPT_SUCCESS)) { // Now the HID channels is established
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	f003 0320 	and.w	r3, r3, #32
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d05d      	beq.n	800d45a <_ZN5BTHID10L2CAP_taskEv+0x26a>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nHID Channels Established"), 0x80);
#endif
                                pBtd->connectToHIDDevice = false;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                                pBtd->pairWithHIDDevice = false;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                                connected = true;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	755a      	strb	r2, [r3, #21]
                                onInit();
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3310      	adds	r3, #16
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	4798      	blx	r3
                                l2cap_state = L2CAP_DONE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d3cc:	e045      	b.n	800d45a <_ZN5BTHID10L2CAP_taskEv+0x26a>

                case L2CAP_DONE:
                        break;

                case L2CAP_INTERRUPT_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_INTERRUPT_RESPONSE)) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	691b      	ldr	r3, [r3, #16]
 800d3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d041      	beq.n	800d45e <_ZN5BTHID10L2CAP_taskEv+0x26e>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Interrupt Channel"), 0x80);
#endif
                                identifier++;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	7d1b      	ldrb	r3, [r3, #20]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	b2da      	uxtb	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_disconnection_request(hci_handle, identifier, control_scid, control_dcid);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6898      	ldr	r0, [r3, #8]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8999      	ldrh	r1, [r3, #12]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	7d1a      	ldrb	r2, [r3, #20]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f103 0416 	add.w	r4, r3, #22
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	336b      	adds	r3, #107	; 0x6b
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	4623      	mov	r3, r4
 800d400:	f7fe fb7f 	bl	800bb02 <_ZN3BTD27l2cap_disconnection_requestEthPhS0_>
                                l2cap_state = L2CAP_CONTROL_DISCONNECT;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2205      	movs	r2, #5
 800d408:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d40c:	e027      	b.n	800d45e <_ZN5BTHID10L2CAP_taskEv+0x26e>

                case L2CAP_CONTROL_DISCONNECT:
                        if(l2cap_check_flag(L2CAP_FLAG_DISCONNECT_CONTROL_RESPONSE)) {
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	f003 0308 	and.w	r3, r3, #8
 800d416:	2b00      	cmp	r3, #0
 800d418:	d023      	beq.n	800d462 <_ZN5BTHID10L2CAP_taskEv+0x272>
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nDisconnected Control Channel"), 0x80);
#endif
                                pBtd->hci_disconnect(hci_handle);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	689a      	ldr	r2, [r3, #8]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	899b      	ldrh	r3, [r3, #12]
 800d422:	4619      	mov	r1, r3
 800d424:	4610      	mov	r0, r2
 800d426:	f7fe f952 	bl	800b6ce <_ZN3BTD14hci_disconnectEt>
                                hci_handle = -1; // Reset handle
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d430:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	611a      	str	r2, [r3, #16]
                                l2cap_state = L2CAP_WAIT;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        }
                        break;
 800d440:	e00f      	b.n	800d462 <_ZN5BTHID10L2CAP_taskEv+0x272>
                        break;
 800d442:	bf00      	nop
 800d444:	e00e      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d446:	bf00      	nop
 800d448:	e00c      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d44a:	bf00      	nop
 800d44c:	e00a      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d44e:	bf00      	nop
 800d450:	e008      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d452:	bf00      	nop
 800d454:	e006      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d456:	bf00      	nop
 800d458:	e004      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d45a:	bf00      	nop
 800d45c:	e002      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d45e:	bf00      	nop
 800d460:	e000      	b.n	800d464 <_ZN5BTHID10L2CAP_taskEv+0x274>
                        break;
 800d462:	bf00      	nop
        }
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bdb0      	pop	{r4, r5, r7, pc}

0800d46c <_ZN5BTHID3RunEv>:

void BTHID::Run() {
 800d46c:	b5b0      	push	{r4, r5, r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af02      	add	r7, sp, #8
 800d472:	6078      	str	r0, [r7, #4]
        switch(l2cap_state) {
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 8086 	bne.w	800d58c <_ZN5BTHID3RunEv+0x120>
                case L2CAP_WAIT:
                        if(pBtd->connectToHIDDevice && !pBtd->l2capConnectionClaimed && !connected && !activeConnection) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d03a      	beq.n	800d502 <_ZN5BTHID3RunEv+0x96>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	689b      	ldr	r3, [r3, #8]
 800d490:	7a5b      	ldrb	r3, [r3, #9]
 800d492:	f083 0301 	eor.w	r3, r3, #1
 800d496:	b2db      	uxtb	r3, r3
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d032      	beq.n	800d502 <_ZN5BTHID3RunEv+0x96>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	7d5b      	ldrb	r3, [r3, #21]
 800d4a0:	f083 0301 	eor.w	r3, r3, #1
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d02b      	beq.n	800d502 <_ZN5BTHID3RunEv+0x96>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800d4b0:	f083 0301 	eor.w	r3, r3, #1
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d023      	beq.n	800d502 <_ZN5BTHID3RunEv+0x96>
                                pBtd->l2capConnectionClaimed = true;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	689b      	ldr	r3, [r3, #8]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	725a      	strb	r2, [r3, #9]
                                activeConnection = true;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
#ifdef DEBUG_USB_HOST
                                Notify(PSTR("\r\nSend HID Control Connection Request"), 0x80);
#endif
                                hci_handle = pBtd->hci_handle; // Store the HCI Handle for the connection
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	8b5a      	ldrh	r2, [r3, #26]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	819a      	strh	r2, [r3, #12]
                                l2cap_event_flag = 0; // Reset flags
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	611a      	str	r2, [r3, #16]
                                identifier = 0;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	751a      	strb	r2, [r3, #20]
                                pBtd->l2cap_connection_request(hci_handle, identifier, control_dcid, HID_CTRL_PSM);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6898      	ldr	r0, [r3, #8]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	8999      	ldrh	r1, [r3, #12]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	7d1a      	ldrb	r2, [r3, #20]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	336b      	adds	r3, #107	; 0x6b
 800d4f0:	2411      	movs	r4, #17
 800d4f2:	9400      	str	r4, [sp, #0]
 800d4f4:	f7fe f9dc 	bl	800b8b0 <_ZN3BTD24l2cap_connection_requestEthPht>
                                l2cap_state = L2CAP_CONTROL_CONNECT_REQUEST;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                                identifier++;
                                delay(1);
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
                        }
                        break;
 800d500:	e043      	b.n	800d58a <_ZN5BTHID3RunEv+0x11e>
                        } else if(l2cap_check_flag(L2CAP_FLAG_CONNECTION_CONTROL_REQUEST)) {
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d03d      	beq.n	800d58a <_ZN5BTHID3RunEv+0x11e>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, PENDING);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6898      	ldr	r0, [r3, #8]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	8999      	ldrh	r1, [r3, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	7d1a      	ldrb	r2, [r3, #20]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3316      	adds	r3, #22
 800d524:	2501      	movs	r5, #1
 800d526:	9501      	str	r5, [sp, #4]
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	4623      	mov	r3, r4
 800d52c:	f7fe f9fe 	bl	800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                delay(1);
 800d530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d534:	f7f4 fae4 	bl	8001b00 <HAL_Delay>
                                pBtd->l2cap_connection_response(hci_handle, identifier, control_dcid, control_scid, SUCCESSFUL);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6898      	ldr	r0, [r3, #8]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	8999      	ldrh	r1, [r3, #12]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7d1a      	ldrb	r2, [r3, #20]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f103 046b 	add.w	r4, r3, #107	; 0x6b
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3316      	adds	r3, #22
 800d54e:	2500      	movs	r5, #0
 800d550:	9501      	str	r5, [sp, #4]
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	4623      	mov	r3, r4
 800d556:	f7fe f9e9 	bl	800b92c <_ZN3BTD25l2cap_connection_responseEthPhS0_h>
                                identifier++;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7d1b      	ldrb	r3, [r3, #20]
 800d55e:	3301      	adds	r3, #1
 800d560:	b2da      	uxtb	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	751a      	strb	r2, [r3, #20]
                                delay(1);
 800d566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d56a:	f7f4 fac9 	bl	8001b00 <HAL_Delay>
                                pBtd->l2cap_config_request(hci_handle, identifier, control_scid);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6898      	ldr	r0, [r3, #8]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	8999      	ldrh	r1, [r3, #12]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7d1a      	ldrb	r2, [r3, #20]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	3316      	adds	r3, #22
 800d57e:	f7fe fa22 	bl	800b9c6 <_ZN3BTD20l2cap_config_requestEthPh>
                                l2cap_state = L2CAP_CONTROL_SUCCESS;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2204      	movs	r2, #4
 800d586:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        break;
 800d58a:	bf00      	nop
        }
}
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bdb0      	pop	{r4, r5, r7, pc}

0800d594 <_ZN5BTHID11SDP_CommandEPhh>:

void BTHID::SDP_Command(uint8_t* data, uint8_t nbytes) { // See page 223 in the Bluetooth specs
 800d594:	b590      	push	{r4, r7, lr}
 800d596:	b087      	sub	sp, #28
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	71fb      	strb	r3, [r7, #7]
        pBtd->L2CAP_Command(hci_handle, data, nbytes, sdp_scid[0], sdp_scid[1]);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6898      	ldr	r0, [r3, #8]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	8999      	ldrh	r1, [r3, #12]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	7edb      	ldrb	r3, [r3, #27]
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	7f12      	ldrb	r2, [r2, #28]
 800d5b2:	79fc      	ldrb	r4, [r7, #7]
 800d5b4:	9201      	str	r2, [sp, #4]
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	4623      	mov	r3, r4
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	f7fe f8e6 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d5c0:	bf00      	nop
 800d5c2:	3714      	adds	r7, #20
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd90      	pop	{r4, r7, pc}

0800d5c8 <_ZN5BTHID19serviceNotSupportedEhh>:

void BTHID::serviceNotSupported(uint8_t transactionIDHigh, uint8_t transactionIDLow) { // See page 235 in the Bluetooth specs
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	70bb      	strb	r3, [r7, #2]
        l2capoutbuf[0] = SDP_SERVICE_SEARCH_ATTRIBUTE_RESPONSE;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2207      	movs	r2, #7
 800d5dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        l2capoutbuf[1] = transactionIDHigh;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	78fa      	ldrb	r2, [r7, #3]
 800d5e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        l2capoutbuf[2] = transactionIDLow;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	78ba      	ldrb	r2, [r7, #2]
 800d5ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
        l2capoutbuf[3] = 0x00; // MSB Parameter Length
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
        l2capoutbuf[4] = 0x05; // LSB Parameter Length = 5
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2205      	movs	r2, #5
 800d5fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        l2capoutbuf[5] = 0x00; // MSB AttributeListsByteCount
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        l2capoutbuf[6] = 0x02; // LSB AttributeListsByteCount = 2
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

        /* Attribute ID/Value Sequence: */
        l2capoutbuf[7] = 0x35; // Data element sequence - length in next byte
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2235      	movs	r2, #53	; 0x35
 800d614:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        l2capoutbuf[8] = 0x00; // Length = 0
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        l2capoutbuf[9] = 0x00; // No continuation state
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

        SDP_Command(l2capoutbuf, 10);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3328      	adds	r3, #40	; 0x28
 800d62c:	220a      	movs	r2, #10
 800d62e:	4619      	mov	r1, r3
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff ffaf 	bl	800d594 <_ZN5BTHID11SDP_CommandEPhh>
}
 800d636:	bf00      	nop
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <_ZN5BTHID11setProtocolEv>:

/************************************************************/
/*                    HID Commands                          */

/************************************************************/
void BTHID::setProtocol() {
 800d63e:	b590      	push	{r4, r7, lr}
 800d640:	b087      	sub	sp, #28
 800d642:	af02      	add	r7, sp, #8
 800d644:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_USB_HOST
        Notify(PSTR("\r\nSet protocol mode: "), 0x80);
        D_PrintHex<uint8_t > (protocolMode, 0x80);
#endif
        if (protocolMode != USB_HID_BOOT_PROTOCOL && protocolMode != HID_RPT_PROTOCOL) {
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d008      	beq.n	800d662 <_ZN5BTHID11setProtocolEv+0x24>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d656:	2b01      	cmp	r3, #1
 800d658:	d003      	beq.n	800d662 <_ZN5BTHID11setProtocolEv+0x24>
#ifdef DEBUG_USB_HOST
                Notify(PSTR("\r\nNot a valid protocol mode. Using Boot protocol instead."), 0x80);
#endif
                protocolMode = USB_HID_BOOT_PROTOCOL; // Use Boot Protocol by default
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        }
        uint8_t command = 0x70 | protocolMode; // Set Protocol, see Bluetooth HID specs page 33
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800d668:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	73fb      	strb	r3, [r7, #15]
        pBtd->L2CAP_Command(hci_handle, &command, 1, control_scid[0], control_scid[1]);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6898      	ldr	r0, [r3, #8]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	8999      	ldrh	r1, [r3, #12]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7d9b      	ldrb	r3, [r3, #22]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	7dd2      	ldrb	r2, [r2, #23]
 800d680:	f107 040f 	add.w	r4, r7, #15
 800d684:	9201      	str	r2, [sp, #4]
 800d686:	9300      	str	r3, [sp, #0]
 800d688:	2301      	movs	r3, #1
 800d68a:	4622      	mov	r2, r4
 800d68c:	f7fe f87e 	bl	800b78c <_ZN3BTD13L2CAP_CommandEtPhhhh>
}
 800d690:	bf00      	nop
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	bd90      	pop	{r4, r7, pc}

0800d698 <_ZN9PS4Parser9checkDpadE10ButtonEnum>:
};

// To enable serial debugging see "settings.h"
//#define PRINTREPORT // Uncomment to print the report send by the PS4 Controller

bool PS4Parser::checkDpad(ButtonEnum b) {
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	70fb      	strb	r3, [r7, #3]
        switch (b) {
 800d6a4:	78fb      	ldrb	r3, [r7, #3]
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d86e      	bhi.n	800d788 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf0>
 800d6aa:	a201      	add	r2, pc, #4	; (adr r2, 800d6b0 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x18>)
 800d6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b0:	0800d6c1 	.word	0x0800d6c1
 800d6b4:	0800d6f3 	.word	0x0800d6f3
 800d6b8:	0800d725 	.word	0x0800d725
 800d6bc:	0800d757 	.word	0x0800d757
                case UP:
                        return ps4Data.btn.dpad == DPAD_LEFT_UP || ps4Data.btn.dpad == DPAD_UP || ps4Data.btn.dpad == DPAD_UP_RIGHT;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7a1b      	ldrb	r3, [r3, #8]
 800d6c4:	f003 030f 	and.w	r3, r3, #15
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b07      	cmp	r3, #7
 800d6cc:	d00d      	beq.n	800d6ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7a1b      	ldrb	r3, [r3, #8]
 800d6d2:	f003 030f 	and.w	r3, r3, #15
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d006      	beq.n	800d6ea <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x52>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7a1b      	ldrb	r3, [r3, #8]
 800d6e0:	f003 030f 	and.w	r3, r3, #15
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d101      	bne.n	800d6ee <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x56>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e04d      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e04b      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case RIGHT:
                        return ps4Data.btn.dpad == DPAD_UP_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT || ps4Data.btn.dpad == DPAD_RIGHT_DOWN;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	7a1b      	ldrb	r3, [r3, #8]
 800d6f6:	f003 030f 	and.w	r3, r3, #15
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d00d      	beq.n	800d71c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	7a1b      	ldrb	r3, [r3, #8]
 800d704:	f003 030f 	and.w	r3, r3, #15
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d006      	beq.n	800d71c <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x84>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	7a1b      	ldrb	r3, [r3, #8]
 800d712:	f003 030f 	and.w	r3, r3, #15
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b03      	cmp	r3, #3
 800d71a:	d101      	bne.n	800d720 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0x88>
 800d71c:	2301      	movs	r3, #1
 800d71e:	e034      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d720:	2300      	movs	r3, #0
 800d722:	e032      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case DOWN:
                        return ps4Data.btn.dpad == DPAD_RIGHT_DOWN || ps4Data.btn.dpad == DPAD_DOWN || ps4Data.btn.dpad == DPAD_DOWN_LEFT;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7a1b      	ldrb	r3, [r3, #8]
 800d728:	f003 030f 	and.w	r3, r3, #15
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	2b03      	cmp	r3, #3
 800d730:	d00d      	beq.n	800d74e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	7a1b      	ldrb	r3, [r3, #8]
 800d736:	f003 030f 	and.w	r3, r3, #15
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d006      	beq.n	800d74e <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xb6>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	7a1b      	ldrb	r3, [r3, #8]
 800d744:	f003 030f 	and.w	r3, r3, #15
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b05      	cmp	r3, #5
 800d74c:	d101      	bne.n	800d752 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xba>
 800d74e:	2301      	movs	r3, #1
 800d750:	e01b      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d752:	2300      	movs	r3, #0
 800d754:	e019      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                case LEFT:
                        return ps4Data.btn.dpad == DPAD_DOWN_LEFT || ps4Data.btn.dpad == DPAD_LEFT || ps4Data.btn.dpad == DPAD_LEFT_UP;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	7a1b      	ldrb	r3, [r3, #8]
 800d75a:	f003 030f 	and.w	r3, r3, #15
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	2b05      	cmp	r3, #5
 800d762:	d00d      	beq.n	800d780 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	7a1b      	ldrb	r3, [r3, #8]
 800d768:	f003 030f 	and.w	r3, r3, #15
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2b06      	cmp	r3, #6
 800d770:	d006      	beq.n	800d780 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xe8>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	7a1b      	ldrb	r3, [r3, #8]
 800d776:	f003 030f 	and.w	r3, r3, #15
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b07      	cmp	r3, #7
 800d77e:	d101      	bne.n	800d784 <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xec>
 800d780:	2301      	movs	r3, #1
 800d782:	e002      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
 800d784:	2300      	movs	r3, #0
 800d786:	e000      	b.n	800d78a <_ZN9PS4Parser9checkDpadE10ButtonEnum+0xf2>
                default:
                        return false;
 800d788:	2300      	movs	r3, #0
        }
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	370c      	adds	r7, #12
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop

0800d798 <_ZN9PS4Parser14getButtonPressE10ButtonEnum>:

bool PS4Parser::getButtonPress(ButtonEnum b) {
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
        if (b <= LEFT) // Dpad
 800d7a4:	78fb      	ldrb	r3, [r7, #3]
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d806      	bhi.n	800d7b8 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x20>
                return checkDpad(b);
 800d7aa:	78fb      	ldrb	r3, [r7, #3]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7ff ff72 	bl	800d698 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	e011      	b.n	800d7dc <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x44>
        else
                return ps4Data.btn.val & (1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]));
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	4a07      	ldr	r2, [pc, #28]	; (800d7e4 <_ZN9PS4Parser14getButtonPressE10ButtonEnum+0x4c>)
 800d7c6:	4413      	add	r3, r2
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	fa21 f303 	lsr.w	r3, r1, r3
 800d7ce:	f003 0301 	and.w	r3, r3, #1
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bf14      	ite	ne
 800d7d6:	2301      	movne	r3, #1
 800d7d8:	2300      	moveq	r3, #0
 800d7da:	b2db      	uxtb	r3, r3
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	0800f984 	.word	0x0800f984

0800d7e8 <_ZN9PS4Parser14getButtonClickE10ButtonEnum>:

bool PS4Parser::getButtonClick(ButtonEnum b) {
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	70fb      	strb	r3, [r7, #3]
        uint32_t mask = 1UL << pgm_read_byte(&PS4_BUTTONS[(uint8_t)b]);
 800d7f4:	78fb      	ldrb	r3, [r7, #3]
 800d7f6:	4a1b      	ldr	r2, [pc, #108]	; (800d864 <_ZN9PS4Parser14getButtonClickE10ButtonEnum+0x7c>)
 800d7f8:	4413      	add	r3, r2
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	2301      	movs	r3, #1
 800d800:	4093      	lsls	r3, r2
 800d802:	60fb      	str	r3, [r7, #12]
        bool click = buttonClickState.val & mask;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d80a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	4313      	orrs	r3, r2
 800d812:	461a      	mov	r2, r3
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	4013      	ands	r3, r2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bf14      	ite	ne
 800d81c:	2301      	movne	r3, #1
 800d81e:	2300      	moveq	r3, #0
 800d820:	72fb      	strb	r3, [r7, #11]
        buttonClickState.val &= ~mask; // Clear "click" event
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800d828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d82c:	021b      	lsls	r3, r3, #8
 800d82e:	4313      	orrs	r3, r2
 800d830:	461a      	mov	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	43db      	mvns	r3, r3
 800d836:	4013      	ands	r3, r2
 800d838:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	b2d1      	uxtb	r1, r2
 800d840:	2000      	movs	r0, #0
 800d842:	4301      	orrs	r1, r0
 800d844:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d848:	0a12      	lsrs	r2, r2, #8
 800d84a:	b292      	uxth	r2, r2
 800d84c:	2100      	movs	r1, #0
 800d84e:	430a      	orrs	r2, r1
 800d850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        return click;
 800d854:	7afb      	ldrb	r3, [r7, #11]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	0800f984 	.word	0x0800f984

0800d868 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum>:

uint8_t PS4Parser::getAnalogButton(ButtonEnum b) {
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	460b      	mov	r3, r1
 800d872:	70fb      	strb	r3, [r7, #3]
        if (b == L2) // These are the only analog buttons on the controller
 800d874:	78fb      	ldrb	r3, [r7, #3]
 800d876:	2b08      	cmp	r3, #8
 800d878:	d102      	bne.n	800d880 <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x18>
                return ps4Data.trigger[0];
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	7adb      	ldrb	r3, [r3, #11]
 800d87e:	e006      	b.n	800d88e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        else if (b == R2)
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	2b09      	cmp	r3, #9
 800d884:	d102      	bne.n	800d88c <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x24>
                return ps4Data.trigger[1];
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7b1b      	ldrb	r3, [r3, #12]
 800d88a:	e000      	b.n	800d88e <_ZN9PS4Parser15getAnalogButtonE10ButtonEnum+0x26>
        return 0;
 800d88c:	2300      	movs	r3, #0
}
 800d88e:	4618      	mov	r0, r3
 800d890:	370c      	adds	r7, #12
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <_ZN9PS4Parser12getAnalogHatE13AnalogHatEnum>:

uint8_t PS4Parser::getAnalogHat(AnalogHatEnum a) {
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	70fb      	strb	r3, [r7, #3]
        return ps4Data.hatValue[(uint8_t)a];
 800d8a6:	78fb      	ldrb	r3, [r7, #3]
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	791b      	ldrb	r3, [r3, #4]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	370c      	adds	r7, #12
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b8:	4770      	bx	lr

0800d8ba <_ZN9PS4Parser5ParseEhPh>:

void PS4Parser::Parse(uint8_t len, uint8_t *buf) {
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b086      	sub	sp, #24
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	607a      	str	r2, [r7, #4]
 800d8c6:	72fb      	strb	r3, [r7, #11]
        if (len > 1 && buf)  {
 800d8c8:	7afb      	ldrb	r3, [r7, #11]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	f240 80a6 	bls.w	800da1c <_ZN9PS4Parser5ParseEhPh+0x162>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 80a2 	beq.w	800da1c <_ZN9PS4Parser5ParseEhPh+0x162>
                        D_PrintHex<uint8_t > (buf[i], 0x80);
                        Notify(PSTR(" "), 0x80);
                }
#endif

                if (buf[0] == 0x01) // Check report ID
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d10e      	bne.n	800d8fe <_ZN9PS4Parser5ParseEhPh+0x44>
                        memcpy(&ps4Data, buf + 1, min((uint8_t)(len - 1), MFK_CASTUINT8T sizeof(ps4Data)));
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	1d18      	adds	r0, r3, #4
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	1c59      	adds	r1, r3, #1
 800d8e8:	7afb      	ldrb	r3, [r7, #11]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b3c      	cmp	r3, #60	; 0x3c
 800d8f0:	bf28      	it	cs
 800d8f2:	233c      	movcs	r3, #60	; 0x3c
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f001 fe8e 	bl	800f618 <memcpy>
 800d8fc:	e016      	b.n	800d92c <_ZN9PS4Parser5ParseEhPh+0x72>
                else if (buf[0] == 0x11) { // This report is send via Bluetooth, it has an offset of 2 compared to the USB data
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	2b11      	cmp	r3, #17
 800d904:	f040 8098 	bne.w	800da38 <_ZN9PS4Parser5ParseEhPh+0x17e>
                        if (len < 4) {
 800d908:	7afb      	ldrb	r3, [r7, #11]
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	f240 8096 	bls.w	800da3c <_ZN9PS4Parser5ParseEhPh+0x182>
                                Notify(PSTR("\r\nReport is too short: "), 0x80);
                                D_PrintHex<uint8_t > (len, 0x80);
#endif
                                return;
                        }
                        memcpy(&ps4Data, buf + 3, min((uint8_t)(len - 3), MFK_CASTUINT8T sizeof(ps4Data)));
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	1d18      	adds	r0, r3, #4
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	1cd9      	adds	r1, r3, #3
 800d918:	7afb      	ldrb	r3, [r7, #11]
 800d91a:	3b03      	subs	r3, #3
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b3c      	cmp	r3, #60	; 0x3c
 800d920:	bf28      	it	cs
 800d922:	233c      	movcs	r3, #60	; 0x3c
 800d924:	b2db      	uxtb	r3, r3
 800d926:	461a      	mov	r2, r3
 800d928:	f001 fe76 	bl	800f618 <memcpy>
                        D_PrintHex<uint8_t > (buf[0], 0x80);
#endif
                        return;
                }

                if (ps4Data.btn.val != oldButtonState.val) { // Check if anything has changed
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	f3c3 0217 	ubfx	r2, r3, #0, #24
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d938:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d06d      	beq.n	800da1c <_ZN9PS4Parser5ParseEhPh+0x162>
                        buttonClickState.val = ps4Data.btn.val & ~oldButtonState.val; // Update click state variable
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d948:	461a      	mov	r2, r3
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94e:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800d952:	43db      	mvns	r3, r3
 800d954:	4013      	ands	r3, r2
 800d956:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	b2d1      	uxtb	r1, r2
 800d95e:	2000      	movs	r0, #0
 800d960:	4301      	orrs	r1, r0
 800d962:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 800d966:	0a12      	lsrs	r2, r2, #8
 800d968:	b292      	uxth	r2, r2
 800d96a:	2100      	movs	r1, #0
 800d96c:	430a      	orrs	r2, r1
 800d96e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                        oldButtonState.val = ps4Data.btn.val;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	f3c3 0117 	ubfx	r1, r3, #0, #24
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d97e:	f361 0317 	bfi	r3, r1, #0, #24
 800d982:	6413      	str	r3, [r2, #64]	; 0x40

                        // The DPAD buttons does not set the different bits, but set a value corresponding to the buttons pressed, we will simply set the bits ourself
                        uint8_t newDpad = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(UP))
 800d988:	2100      	movs	r1, #0
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f7ff fe84 	bl	800d698 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <_ZN9PS4Parser5ParseEhPh+0xe4>
                                newDpad |= 1 << UP;
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	f043 0301 	orr.w	r3, r3, #1
 800d99c:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(RIGHT))
 800d99e:	2101      	movs	r1, #1
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f7ff fe79 	bl	800d698 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d003      	beq.n	800d9b4 <_ZN9PS4Parser5ParseEhPh+0xfa>
                                newDpad |= 1 << RIGHT;
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
 800d9ae:	f043 0302 	orr.w	r3, r3, #2
 800d9b2:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(DOWN))
 800d9b4:	2102      	movs	r1, #2
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f7ff fe6e 	bl	800d698 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d003      	beq.n	800d9ca <_ZN9PS4Parser5ParseEhPh+0x110>
                                newDpad |= 1 << DOWN;
 800d9c2:	7dfb      	ldrb	r3, [r7, #23]
 800d9c4:	f043 0304 	orr.w	r3, r3, #4
 800d9c8:	75fb      	strb	r3, [r7, #23]
                        if (checkDpad(LEFT))
 800d9ca:	2103      	movs	r1, #3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7ff fe63 	bl	800d698 <_ZN9PS4Parser9checkDpadE10ButtonEnum>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d003      	beq.n	800d9e0 <_ZN9PS4Parser5ParseEhPh+0x126>
                                newDpad |= 1 << LEFT;
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	f043 0308 	orr.w	r3, r3, #8
 800d9de:	75fb      	strb	r3, [r7, #23]
                        if (newDpad != oldDpad) {
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d9e6:	7dfa      	ldrb	r2, [r7, #23]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d017      	beq.n	800da1c <_ZN9PS4Parser5ParseEhPh+0x162>
                                buttonClickState.dpad = newDpad & ~oldDpad; // Override values
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d9f2:	b25b      	sxtb	r3, r3
 800d9f4:	43db      	mvns	r3, r3
 800d9f6:	b25a      	sxtb	r2, r3
 800d9f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	b25b      	sxtb	r3, r3
 800da00:	f003 030f 	and.w	r3, r3, #15
 800da04:	b2d9      	uxtb	r1, r3
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800da0c:	f361 0303 	bfi	r3, r1, #0, #4
 800da10:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
                                oldDpad = newDpad;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	7dfa      	ldrb	r2, [r7, #23]
 800da18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
                        }
                }
        }

        if (ps4Output.reportChanged)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00b      	beq.n	800da3e <_ZN9PS4Parser5ParseEhPh+0x184>
                sendOutputReport(&ps4Output); // Send output report
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	3246      	adds	r2, #70	; 0x46
 800da30:	4611      	mov	r1, r2
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	4798      	blx	r3
 800da36:	e002      	b.n	800da3e <_ZN9PS4Parser5ParseEhPh+0x184>
                        return;
 800da38:	bf00      	nop
 800da3a:	e000      	b.n	800da3e <_ZN9PS4Parser5ParseEhPh+0x184>
                                return;
 800da3c:	bf00      	nop
}
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <_ZN9PS4Parser5ResetEv>:

void PS4Parser::Reset() {
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
        uint8_t i;
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800da4c:	2300      	movs	r3, #0
 800da4e:	73fb      	strb	r3, [r7, #15]
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	2b03      	cmp	r3, #3
 800da54:	d808      	bhi.n	800da68 <_ZN9PS4Parser5ResetEv+0x24>
                ps4Data.hatValue[i] = 127; // Center value
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	4413      	add	r3, r2
 800da5c:	227f      	movs	r2, #127	; 0x7f
 800da5e:	711a      	strb	r2, [r3, #4]
        for (i = 0; i < sizeof(ps4Data.hatValue); i++)
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	3301      	adds	r3, #1
 800da64:	73fb      	strb	r3, [r7, #15]
 800da66:	e7f3      	b.n	800da50 <_ZN9PS4Parser5ResetEv+0xc>
        ps4Data.btn.val = 0;
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	6893      	ldr	r3, [r2, #8]
 800da6c:	f36f 0317 	bfc	r3, #0, #24
 800da70:	6093      	str	r3, [r2, #8]
        oldButtonState.val = 0;
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800da76:	f36f 0317 	bfc	r3, #0, #24
 800da7a:	6413      	str	r3, [r2, #64]	; 0x40
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800da7c:	2300      	movs	r3, #0
 800da7e:	73fb      	strb	r3, [r7, #15]
 800da80:	7bfb      	ldrb	r3, [r7, #15]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d808      	bhi.n	800da98 <_ZN9PS4Parser5ResetEv+0x54>
                ps4Data.trigger[i] = 0;
 800da86:	7bfb      	ldrb	r3, [r7, #15]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	4413      	add	r3, r2
 800da8c:	2200      	movs	r2, #0
 800da8e:	72da      	strb	r2, [r3, #11]
        for (i = 0; i < sizeof(ps4Data.trigger); i++)
 800da90:	7bfb      	ldrb	r3, [r7, #15]
 800da92:	3301      	adds	r3, #1
 800da94:	73fb      	strb	r3, [r7, #15]
 800da96:	e7f3      	b.n	800da80 <_ZN9PS4Parser5ResetEv+0x3c>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800da98:	2300      	movs	r3, #0
 800da9a:	73fb      	strb	r3, [r7, #15]
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	d81b      	bhi.n	800dada <_ZN9PS4Parser5ResetEv+0x96>
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800daa2:	2300      	movs	r3, #0
 800daa4:	73bb      	strb	r3, [r7, #14]
 800daa6:	7bbb      	ldrb	r3, [r7, #14]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d812      	bhi.n	800dad2 <_ZN9PS4Parser5ResetEv+0x8e>
                        ps4Data.xy[i].finger[j].touching = 1; // The bit is cleared if the finger is touching the touchpad
 800daac:	7bfa      	ldrb	r2, [r7, #15]
 800daae:	7bbb      	ldrb	r3, [r7, #14]
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	0098      	lsls	r0, r3, #2
 800dab4:	4613      	mov	r3, r2
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	4413      	add	r3, r2
 800daba:	4403      	add	r3, r0
 800dabc:	440b      	add	r3, r1
 800dabe:	f103 0220 	add.w	r2, r3, #32
 800dac2:	7993      	ldrb	r3, [r2, #6]
 800dac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dac8:	7193      	strb	r3, [r2, #6]
                for (uint8_t j = 0; j < sizeof(ps4Data.xy[0].finger)/sizeof(ps4Data.xy[0].finger[0]); j++)
 800daca:	7bbb      	ldrb	r3, [r7, #14]
 800dacc:	3301      	adds	r3, #1
 800dace:	73bb      	strb	r3, [r7, #14]
 800dad0:	e7e9      	b.n	800daa6 <_ZN9PS4Parser5ResetEv+0x62>
        for (i = 0; i < sizeof(ps4Data.xy)/sizeof(ps4Data.xy[0]); i++) {
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	3301      	adds	r3, #1
 800dad6:	73fb      	strb	r3, [r7, #15]
 800dad8:	e7e0      	b.n	800da9c <_ZN9PS4Parser5ResetEv+0x58>
        }

        ps4Data.btn.dpad = DPAD_OFF;
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	7a13      	ldrb	r3, [r2, #8]
 800dade:	2108      	movs	r1, #8
 800dae0:	f361 0303 	bfi	r3, r1, #0, #4
 800dae4:	7213      	strb	r3, [r2, #8]
        oldButtonState.dpad = DPAD_OFF;
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 800daec:	2108      	movs	r1, #8
 800daee:	f361 0303 	bfi	r3, r1, #0, #4
 800daf2:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
        buttonClickState.dpad = 0;
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800dafc:	f36f 0303 	bfc	r3, #0, #4
 800db00:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
        oldDpad = 0;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

        ps4Output.bigRumble = ps4Output.smallRumble = 0;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        ps4Output.r = ps4Output.g = ps4Output.b = 0;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        ps4Output.flashOn = ps4Output.flashOff = 0;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
        ps4Output.reportChanged = false;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
};
 800db5c:	bf00      	nop
 800db5e:	3714      	adds	r7, #20
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <_ZN2P95IsSetEv>:
MAKE_PIN(P9, GPIOC, GPIO_PIN_7); // D9
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	2180      	movs	r1, #128	; 0x80
 800db6e:	4803      	ldr	r0, [pc, #12]	; (800db7c <_ZN2P95IsSetEv+0x14>)
 800db70:	f7f4 fd1e 	bl	80025b0 <HAL_GPIO_ReadPin>
 800db74:	4603      	mov	r3, r0
 800db76:	4618      	mov	r0, r3
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	40020800 	.word	0x40020800

0800db80 <_ZN3USBC1Ev>:

static uint8_t usb_error = 0;
static uint8_t usb_task_state;

/* constructor */
USB::USB() : bmHubPre(0) {
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f001 f9f3 	bl	800ef74 <_ZN8MAX3421eI3P102P9EC1Ev>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4618      	mov	r0, r3
 800db92:	f001 fa0b 	bl	800efac <_ZN15AddressPoolImplILh16EEC1Ev>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE; //set up state machine
 800db9e:	4b05      	ldr	r3, [pc, #20]	; (800dbb4 <_ZN3USBC1Ev+0x34>)
 800dba0:	2211      	movs	r2, #17
 800dba2:	701a      	strb	r2, [r3, #0]
        init();
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f807 	bl	800dbb8 <_ZN3USB4initEv>
}
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4618      	mov	r0, r3
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	2000066d 	.word	0x2000066d

0800dbb8 <_ZN3USB4initEv>:

/* Initialize data structures */
void USB::init() {
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
        //devConfigIndex = 0;
        bmHubPre = 0;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <_ZN3USB14getEpInfoEntryEhh>:

void USB::setUsbTaskState(uint8_t state) {
        usb_task_state = state;
}

EpInfo* USB::getEpInfoEntry(uint8_t addr, uint8_t ep) {
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	460b      	mov	r3, r1
 800dbde:	70fb      	strb	r3, [r7, #3]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	70bb      	strb	r3, [r7, #2]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	78fa      	ldrb	r2, [r7, #3]
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f001 fa18 	bl	800f020 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dbf0:	60f8      	str	r0, [r7, #12]

        if(!p || !p->epinfo)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <_ZN3USB14getEpInfoEntryEhh+0x2c>
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <_ZN3USB14getEpInfoEntryEhh+0x30>
                return NULL;
 800dc00:	2300      	movs	r3, #0
 800dc02:	e018      	b.n	800dc36 <_ZN3USB14getEpInfoEntryEhh+0x62>

        EpInfo *pep = p->epinfo;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	617b      	str	r3, [r7, #20]

        for(uint8_t i = 0; i < p->epcount; i++) {
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	74fb      	strb	r3, [r7, #19]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	795b      	ldrb	r3, [r3, #5]
 800dc12:	7cfa      	ldrb	r2, [r7, #19]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d20d      	bcs.n	800dc34 <_ZN3USB14getEpInfoEntryEhh+0x60>
                if((pep)->epAddr == ep)
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	78ba      	ldrb	r2, [r7, #2]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d101      	bne.n	800dc26 <_ZN3USB14getEpInfoEntryEhh+0x52>
                        return pep;
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	e007      	b.n	800dc36 <_ZN3USB14getEpInfoEntryEhh+0x62>

                pep++;
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	3303      	adds	r3, #3
 800dc2a:	617b      	str	r3, [r7, #20]
        for(uint8_t i = 0; i < p->epcount; i++) {
 800dc2c:	7cfb      	ldrb	r3, [r7, #19]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	74fb      	strb	r3, [r7, #19]
 800dc32:	e7ec      	b.n	800dc0e <_ZN3USB14getEpInfoEntryEhh+0x3a>
        }
        return NULL;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <_ZN3USB14setEpInfoEntryEhhP6EpInfo>:

/* set device table entry */

/* each device is different and has different number of endpoints. This function plugs endpoint record structure, defined in application, to devtable */
uint8_t USB::setEpInfoEntry(uint8_t addr, uint8_t epcount, EpInfo* eprecord_ptr) {
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b086      	sub	sp, #24
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	60f8      	str	r0, [r7, #12]
 800dc46:	607b      	str	r3, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	72fb      	strb	r3, [r7, #11]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	72bb      	strb	r3, [r7, #10]
        if(!eprecord_ptr)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x1c>
                return USB_ERROR_INVALID_ARGUMENT;
 800dc56:	23d8      	movs	r3, #216	; 0xd8
 800dc58:	e015      	b.n	800dc86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7afa      	ldrb	r2, [r7, #11]
 800dc5e:	4611      	mov	r1, r2
 800dc60:	4618      	mov	r0, r3
 800dc62:	f001 f9dd 	bl	800f020 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dc66:	6178      	str	r0, [r7, #20]

        if(!p)
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x34>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dc6e:	23d6      	movs	r3, #214	; 0xd6
 800dc70:	e009      	b.n	800dc86 <_ZN3USB14setEpInfoEntryEhhP6EpInfo+0x48>

        p->address.devAddress = addr;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	7afa      	ldrb	r2, [r7, #11]
 800dc76:	711a      	strb	r2, [r3, #4]
        p->epinfo = eprecord_ptr;
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	601a      	str	r2, [r3, #0]
        p->epcount = epcount;
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	7aba      	ldrb	r2, [r7, #10]
 800dc82:	715a      	strb	r2, [r3, #5]

        return 0;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3718      	adds	r7, #24
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>:

uint8_t USB::SetAddress(uint8_t addr, uint8_t ep, EpInfo **ppep, uint16_t *nak_limit) {
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b086      	sub	sp, #24
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	607b      	str	r3, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	72fb      	strb	r3, [r7, #11]
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	72bb      	strb	r3, [r7, #10]
        UsbDevice *p = addrPool.GetUsbDevicePtr(addr);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	7afa      	ldrb	r2, [r7, #11]
 800dca4:	4611      	mov	r1, r2
 800dca6:	4618      	mov	r0, r3
 800dca8:	f001 f9ba 	bl	800f020 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800dcac:	6178      	str	r0, [r7, #20]

        if(!p)
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d101      	bne.n	800dcb8 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x2a>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800dcb4:	23d6      	movs	r3, #214	; 0xd6
 800dcb6:	e04e      	b.n	800dd56 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        if(!p->epinfo)
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d101      	bne.n	800dcc4 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x36>
                return USB_ERROR_EPINFO_IS_NULL;
 800dcc0:	23d7      	movs	r3, #215	; 0xd7
 800dcc2:	e048      	b.n	800dd56 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *ppep = getEpInfoEntry(addr, ep);
 800dcc4:	7aba      	ldrb	r2, [r7, #10]
 800dcc6:	7afb      	ldrb	r3, [r7, #11]
 800dcc8:	4619      	mov	r1, r3
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7ff ff82 	bl	800dbd4 <_ZN3USB14getEpInfoEntryEhh>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	601a      	str	r2, [r3, #0]

        if(!*ppep)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0x54>
                return USB_ERROR_EP_NOT_FOUND_IN_TBL;
 800dcde:	23db      	movs	r3, #219	; 0xdb
 800dce0:	e039      	b.n	800dd56 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xc8>

        *nak_limit = (0x0001UL << (((*ppep)->bmNakPower > USB_NAK_MAX_POWER) ? USB_NAK_MAX_POWER : (*ppep)->bmNakPower));
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	789b      	ldrb	r3, [r3, #2]
 800dce8:	f3c3 0385 	ubfx	r3, r3, #2, #6
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b0f      	cmp	r3, #15
 800dcf0:	bf28      	it	cs
 800dcf2:	230f      	movcs	r3, #15
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	4093      	lsls	r3, r2
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	801a      	strh	r2, [r3, #0]
        (*nak_limit)--;
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	6a3b      	ldr	r3, [r7, #32]
 800dd0c:	801a      	strh	r2, [r3, #0]
          USBTRACE2(" EP: ", ep);
          USBTRACE2(" NAK Power: ",(*ppep)->bmNakPower);
          USBTRACE2(" NAK Limit: ", nak_limit);
          USBTRACE("\r\n");
         */
        regWr(rPERADDR, addr); //set peripheral address
 800dd0e:	7afb      	ldrb	r3, [r7, #11]
 800dd10:	461a      	mov	r2, r3
 800dd12:	21e0      	movs	r1, #224	; 0xe0
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f7f3 fbd5 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        uint8_t mode = regRd(rMODE);
 800dd1a:	21d8      	movs	r1, #216	; 0xd8
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	f7f3 fc23 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dd22:	4603      	mov	r3, r0
 800dd24:	74fb      	strb	r3, [r7, #19]
        //Serial.println(p->lowspeed, HEX);



        // Set bmLOWSPEED and bmHUBPRE in case of low-speed device, reset them otherwise
        regWr(rMODE, (p->lowspeed) ? mode | bmLOWSPEED | bmHubPre : mode & ~(bmHUBPRE | bmLOWSPEED));
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	799b      	ldrb	r3, [r3, #6]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d009      	beq.n	800dd42 <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xb4>
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 800dd34:	7cfb      	ldrb	r3, [r7, #19]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	f043 0302 	orr.w	r3, r3, #2
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	e003      	b.n	800dd4a <_ZN3USB10SetAddressEhhPP6EpInfoPt+0xbc>
 800dd42:	7cfb      	ldrb	r3, [r7, #19]
 800dd44:	f023 0306 	bic.w	r3, r3, #6
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	21d8      	movs	r1, #216	; 0xd8
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f7f3 fbb8 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        return 0;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3718      	adds	r7, #24
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>:
/* return codes:                */
/* 00       =   success         */

/* 01-0f    =   non-zero HRSLT  */
uint8_t USB::ctrlReq(uint8_t addr, uint8_t ep, uint8_t bmReqType, uint8_t bRequest, uint8_t wValLo, uint8_t wValHi,
        uint16_t wInd, uint16_t total, uint16_t nbytes, uint8_t* dataptr, USBReadParser *p) {
 800dd5e:	b590      	push	{r4, r7, lr}
 800dd60:	b08b      	sub	sp, #44	; 0x2c
 800dd62:	af02      	add	r7, sp, #8
 800dd64:	6078      	str	r0, [r7, #4]
 800dd66:	4608      	mov	r0, r1
 800dd68:	4611      	mov	r1, r2
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	70fb      	strb	r3, [r7, #3]
 800dd70:	460b      	mov	r3, r1
 800dd72:	70bb      	strb	r3, [r7, #2]
 800dd74:	4613      	mov	r3, r2
 800dd76:	707b      	strb	r3, [r7, #1]
        bool direction = false; //request direction, IN or OUT
 800dd78:	2300      	movs	r3, #0
 800dd7a:	76fb      	strb	r3, [r7, #27]
        uint8_t rcode;
        SETUP_PKT setup_pkt;

        EpInfo *pep = NULL;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]
        uint16_t nak_limit = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	817b      	strh	r3, [r7, #10]

        rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800dd84:	f107 000c 	add.w	r0, r7, #12
 800dd88:	78ba      	ldrb	r2, [r7, #2]
 800dd8a:	78f9      	ldrb	r1, [r7, #3]
 800dd8c:	f107 030a 	add.w	r3, r7, #10
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	4603      	mov	r3, r0
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f7ff ff7a 	bl	800dc8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	77fb      	strb	r3, [r7, #31]

        if(rcode)
 800dd9e:	7ffb      	ldrb	r3, [r7, #31]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x4a>
                return rcode;
 800dda4:	7ffb      	ldrb	r3, [r7, #31]
 800dda6:	e0ae      	b.n	800df06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        direction = ((bmReqType & 0x80) > 0);
 800dda8:	787b      	ldrb	r3, [r7, #1]
 800ddaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	bfcc      	ite	gt
 800ddb2:	2301      	movgt	r3, #1
 800ddb4:	2300      	movle	r3, #0
 800ddb6:	76fb      	strb	r3, [r7, #27]

        /* fill in setup packet */
        setup_pkt.ReqType_u.bmRequestType = bmReqType;
 800ddb8:	787b      	ldrb	r3, [r7, #1]
 800ddba:	743b      	strb	r3, [r7, #16]
        setup_pkt.bRequest = bRequest;
 800ddbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ddc0:	747b      	strb	r3, [r7, #17]
        setup_pkt.wVal_u.wValueLo = wValLo;
 800ddc2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ddc6:	74bb      	strb	r3, [r7, #18]
        setup_pkt.wVal_u.wValueHi = wValHi;
 800ddc8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ddcc:	74fb      	strb	r3, [r7, #19]
        setup_pkt.wIndex = wInd;
 800ddce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddd0:	82bb      	strh	r3, [r7, #20]
        setup_pkt.wLength = total;
 800ddd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ddd6:	82fb      	strh	r3, [r7, #22]

        bytesWr(rSUDFIFO, 8, (uint8_t*) & setup_pkt); //transfer to setup packet FIFO
 800ddd8:	f107 0310 	add.w	r3, r7, #16
 800dddc:	2208      	movs	r2, #8
 800ddde:	2120      	movs	r1, #32
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f001 f943 	bl	800f06c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>

        rcode = dispatchPkt(tokSETUP, ep, nak_limit); //dispatch packet
 800dde6:	897b      	ldrh	r3, [r7, #10]
 800dde8:	78ba      	ldrb	r2, [r7, #2]
 800ddea:	2110      	movs	r1, #16
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 fb01 	bl	800e3f4 <_ZN3USB11dispatchPktEhht>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	77fb      	strb	r3, [r7, #31]

        if(rcode) //return HRSLT if not zero
 800ddf6:	7ffb      	ldrb	r3, [r7, #31]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xa2>
                return ( rcode);
 800ddfc:	7ffb      	ldrb	r3, [r7, #31]
 800ddfe:	e082      	b.n	800df06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

        if(dataptr != NULL) //data stage, if present
 800de00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de02:	2b00      	cmp	r3, #0
 800de04:	d072      	beq.n	800deec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
        {
                if(direction) //IN transfer
 800de06:	7efb      	ldrb	r3, [r7, #27]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d057      	beq.n	800debc <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x15e>
                {
                        uint16_t left = total;
 800de0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800de10:	83bb      	strh	r3, [r7, #28]

                        pep->bmRcvToggle = 1; //bmRCVTOG1;
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	7893      	ldrb	r3, [r2, #2]
 800de16:	f043 0302 	orr.w	r3, r3, #2
 800de1a:	7093      	strb	r3, [r2, #2]

                        while(left) {
 800de1c:	8bbb      	ldrh	r3, [r7, #28]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d05f      	beq.n	800dee2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                // Bytes read into buffer
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                                uint16_t read = nbytes;
 800de22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de26:	813b      	strh	r3, [r7, #8]
                                //uint16_t read = (left<nbytes) ? left : nbytes;

                                rcode = InTransfer(pep, nak_limit, &read, dataptr);
 800de28:	68f9      	ldr	r1, [r7, #12]
 800de2a:	897a      	ldrh	r2, [r7, #10]
 800de2c:	f107 0008 	add.w	r0, r7, #8
 800de30:	2300      	movs	r3, #0
 800de32:	9301      	str	r3, [sp, #4]
 800de34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4603      	mov	r3, r0
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f8a6 	bl	800df8c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800de40:	4603      	mov	r3, r0
 800de42:	77fb      	strb	r3, [r7, #31]
                                if(rcode == hrTOGERR) {
 800de44:	7ffb      	ldrb	r3, [r7, #31]
 800de46:	2b06      	cmp	r3, #6
 800de48:	d114      	bne.n	800de74 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x116>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmRcvToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800de4a:	21f8      	movs	r1, #248	; 0xf8
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7f3 fb8b 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800de52:	4603      	mov	r3, r0
 800de54:	f003 0320 	and.w	r3, r3, #32
 800de58:	2b00      	cmp	r3, #0
 800de5a:	bf0c      	ite	eq
 800de5c:	2301      	moveq	r3, #1
 800de5e:	2300      	movne	r3, #0
 800de60:	b2db      	uxtb	r3, r3
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	f003 0301 	and.w	r3, r3, #1
 800de68:	b2d9      	uxtb	r1, r3
 800de6a:	7893      	ldrb	r3, [r2, #2]
 800de6c:	f361 0341 	bfi	r3, r1, #1, #1
 800de70:	7093      	strb	r3, [r2, #2]
 800de72:	e7d3      	b.n	800de1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        continue;
                                }

                                if(rcode)
 800de74:	7ffb      	ldrb	r3, [r7, #31]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x120>
                                        return rcode;
 800de7a:	7ffb      	ldrb	r3, [r7, #31]
 800de7c:	e043      	b.n	800df06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>

                                // Invoke callback function if inTransfer completed successfully and callback function pointer is specified
                                if(!rcode && p)
 800de7e:	7ffb      	ldrb	r3, [r7, #31]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d111      	bne.n	800dea8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
 800de84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00e      	beq.n	800dea8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x14a>
                                        ((USBReadParser*)p)->Parse(read, dataptr, total - left);
 800de8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	681c      	ldr	r4, [r3, #0]
 800de90:	8939      	ldrh	r1, [r7, #8]
 800de92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800de96:	8bbb      	ldrh	r3, [r7, #28]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	833b      	strh	r3, [r7, #24]
 800de9e:	f107 0318 	add.w	r3, r7, #24
 800dea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dea4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dea6:	47a0      	blx	r4

                                left -= read;
 800dea8:	893b      	ldrh	r3, [r7, #8]
 800deaa:	8bba      	ldrh	r2, [r7, #28]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	83bb      	strh	r3, [r7, #28]

                                if(read < nbytes)
 800deb0:	893b      	ldrh	r3, [r7, #8]
 800deb2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d812      	bhi.n	800dee0 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x182>
                        while(left) {
 800deba:	e7af      	b.n	800de1c <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0xbe>
                                        break;
                        }
                } else //OUT transfer
                {
                        pep->bmSndToggle = 1; //bmSNDTOG1;
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	7893      	ldrb	r3, [r2, #2]
 800dec0:	f043 0301 	orr.w	r3, r3, #1
 800dec4:	7093      	strb	r3, [r2, #2]
                        rcode = OutTransfer(pep, nak_limit, nbytes, dataptr);
 800dec6:	68f9      	ldr	r1, [r7, #12]
 800dec8:	897a      	ldrh	r2, [r7, #10]
 800deca:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
 800dece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ded0:	9300      	str	r3, [sp, #0]
 800ded2:	4603      	mov	r3, r0
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f957 	bl	800e188 <_ZN3USB11OutTransferEP6EpInfottPh>
 800deda:	4603      	mov	r3, r0
 800dedc:	77fb      	strb	r3, [r7, #31]
 800dede:	e000      	b.n	800dee2 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x184>
                                        break;
 800dee0:	bf00      	nop
                }
                if(rcode) //return error
 800dee2:	7ffb      	ldrb	r3, [r7, #31]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x18e>
                        return ( rcode);
 800dee8:	7ffb      	ldrb	r3, [r7, #31]
 800deea:	e00c      	b.n	800df06 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x1a8>
        }
        // Status stage
        return dispatchPkt((direction) ? tokOUTHS : tokINHS, ep, nak_limit); //GET if direction
 800deec:	7efb      	ldrb	r3, [r7, #27]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x198>
 800def2:	21a0      	movs	r1, #160	; 0xa0
 800def4:	e000      	b.n	800def8 <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser+0x19a>
 800def6:	2180      	movs	r1, #128	; 0x80
 800def8:	897b      	ldrh	r3, [r7, #10]
 800defa:	78ba      	ldrb	r2, [r7, #2]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fa79 	bl	800e3f4 <_ZN3USB11dispatchPktEhht>
 800df02:	4603      	mov	r3, r0
 800df04:	bf00      	nop
}
 800df06:	4618      	mov	r0, r3
 800df08:	3724      	adds	r7, #36	; 0x24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd90      	pop	{r4, r7, pc}

0800df0e <_ZN3USB10inTransferEhhPtPhh>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Keep sending INs and writes data to memory area pointed by 'data'                                                           */

/* rcode 0 if no errors. rcode 01-0f is relayed from dispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
uint8_t USB::inTransfer(uint8_t addr, uint8_t ep, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800df0e:	b580      	push	{r7, lr}
 800df10:	b08a      	sub	sp, #40	; 0x28
 800df12:	af02      	add	r7, sp, #8
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	607b      	str	r3, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	72fb      	strb	r3, [r7, #11]
 800df1c:	4613      	mov	r3, r2
 800df1e:	72bb      	strb	r3, [r7, #10]
        EpInfo *pep = NULL;
 800df20:	2300      	movs	r3, #0
 800df22:	61bb      	str	r3, [r7, #24]
        uint16_t nak_limit = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	82fb      	strh	r3, [r7, #22]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800df28:	f107 0018 	add.w	r0, r7, #24
 800df2c:	7aba      	ldrb	r2, [r7, #10]
 800df2e:	7af9      	ldrb	r1, [r7, #11]
 800df30:	f107 0316 	add.w	r3, r7, #22
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	4603      	mov	r3, r0
 800df38:	68f8      	ldr	r0, [r7, #12]
 800df3a:	f7ff fea8 	bl	800dc8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800df3e:	4603      	mov	r3, r0
 800df40:	77fb      	strb	r3, [r7, #31]

        if(rcode) {
 800df42:	7ffb      	ldrb	r3, [r7, #31]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d010      	beq.n	800df6a <_ZN3USB10inTransferEhhPtPhh+0x5c>
                USBTRACE3("(USB::InTransfer) SetAddress Failed ", rcode, 0x81);
 800df48:	7ffb      	ldrb	r3, [r7, #31]
 800df4a:	2181      	movs	r1, #129	; 0x81
 800df4c:	4618      	mov	r0, r3
 800df4e:	f001 f8bb 	bl	800f0c8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) addr requested ", addr, 0x81);
 800df52:	7afb      	ldrb	r3, [r7, #11]
 800df54:	2181      	movs	r1, #129	; 0x81
 800df56:	4618      	mov	r0, r3
 800df58:	f001 f8b6 	bl	800f0c8 <_Z10D_PrintHexIhEvT_i>
                USBTRACE3("(USB::InTransfer) ep requested ", ep, 0x81);
 800df5c:	7abb      	ldrb	r3, [r7, #10]
 800df5e:	2181      	movs	r1, #129	; 0x81
 800df60:	4618      	mov	r0, r3
 800df62:	f001 f8b1 	bl	800f0c8 <_Z10D_PrintHexIhEvT_i>
                return rcode;
 800df66:	7ffb      	ldrb	r3, [r7, #31]
 800df68:	e00c      	b.n	800df84 <_ZN3USB10inTransferEhhPtPhh+0x76>
        }
        return InTransfer(pep, nak_limit, nbytesptr, data, bInterval);
 800df6a:	69b9      	ldr	r1, [r7, #24]
 800df6c:	8afa      	ldrh	r2, [r7, #22]
 800df6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df72:	9301      	str	r3, [sp, #4]
 800df74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f000 f806 	bl	800df8c <_ZN3USB10InTransferEP6EpInfotPtPhh>
 800df80:	4603      	mov	r3, r0
 800df82:	bf00      	nop
}
 800df84:	4618      	mov	r0, r3
 800df86:	3720      	adds	r7, #32
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <_ZN3USB10InTransferEP6EpInfotPtPhh>:

uint8_t USB::InTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t *nbytesptr, uint8_t* data, uint8_t bInterval /*= 0*/) {
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	603b      	str	r3, [r7, #0]
 800df98:	4613      	mov	r3, r2
 800df9a:	80fb      	strh	r3, [r7, #6]
        uint8_t rcode = 0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	75fb      	strb	r3, [r7, #23]
        uint8_t pktsize;

        uint16_t nbytes = *nbytesptr;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	827b      	strh	r3, [r7, #18]
        //printf("Requesting %i bytes ", nbytes);
        uint8_t maxpktsize = pep->maxPktSize;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	785b      	ldrb	r3, [r3, #1]
 800dfaa:	747b      	strb	r3, [r7, #17]

        *nbytesptr = 0;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	801a      	strh	r2, [r3, #0]
        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	789b      	ldrb	r3, [r3, #2]
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x38>
 800dfc0:	2320      	movs	r3, #32
 800dfc2:	e000      	b.n	800dfc6 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x3a>
 800dfc4:	2310      	movs	r3, #16
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	21e8      	movs	r1, #232	; 0xe8
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7f3 fa7a 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        // use a 'break' to exit this loop
        while(1) {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                rcode = dispatchPkt(tokIN, pep->epAddr, nak_limit); //IN packet to EP-'endpoint'. Function takes care of NAKS.
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	781a      	ldrb	r2, [r3, #0]
 800dfd4:	88fb      	ldrh	r3, [r7, #6]
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	68f8      	ldr	r0, [r7, #12]
 800dfda:	f000 fa0b 	bl	800e3f4 <_ZN3USB11dispatchPktEhht>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	75fb      	strb	r3, [r7, #23]
                if(rcode == hrTOGERR) {
 800dfe2:	7dfb      	ldrb	r3, [r7, #23]
 800dfe4:	2b06      	cmp	r3, #6
 800dfe6:	d123      	bne.n	800e030 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xa4>
                        // yes, we flip it wrong here so that next time it is actually correct!
                        pep->bmRcvToggle = (regRd(rHRSL) & bmRCVTOGRD) ? 0 : 1;
 800dfe8:	21f8      	movs	r1, #248	; 0xf8
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7f3 fabc 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800dff0:	4603      	mov	r3, r0
 800dff2:	f003 0310 	and.w	r3, r3, #16
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	bf0c      	ite	eq
 800dffa:	2301      	moveq	r3, #1
 800dffc:	2300      	movne	r3, #0
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	b2d9      	uxtb	r1, r3
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	7893      	ldrb	r3, [r2, #2]
 800e00a:	f361 0341 	bfi	r3, r1, #1, #1
 800e00e:	7093      	strb	r3, [r2, #2]
                        regWr(rHCTL, (pep->bmRcvToggle) ? bmRCVTOG1 : bmRCVTOG0); //set toggle value
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	789b      	ldrb	r3, [r3, #2]
 800e014:	f003 0302 	and.w	r3, r3, #2
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x96>
 800e01e:	2320      	movs	r3, #32
 800e020:	e000      	b.n	800e024 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x98>
 800e022:	2310      	movs	r3, #16
 800e024:	461a      	mov	r2, r3
 800e026:	21e8      	movs	r1, #232	; 0xe8
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f7f3 fa4b 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        continue;
 800e02e:	e072      	b.n	800e116 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18a>
                }
                if(rcode) {
 800e030:	7dfb      	ldrb	r3, [r7, #23]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d170      	bne.n	800e118 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18c>
                 * the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred.
                 * Need to add handling for that
                 *
                 * NOTE: I've seen this happen with SPI corruption -- xxxajk
                 */
                if((regRd(rHIRQ) & bmRCVDAVIRQ) == 0) {
 800e036:	21c8      	movs	r1, #200	; 0xc8
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7f3 fa95 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e03e:	4603      	mov	r3, r0
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b00      	cmp	r3, #0
 800e046:	bf0c      	ite	eq
 800e048:	2301      	moveq	r3, #1
 800e04a:	2300      	movne	r3, #0
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d002      	beq.n	800e058 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xcc>
                        //printf(">>>>>>>> Problem! NO RCVDAVIRQ!\r\n");
                        rcode = 0xf0; //receive error
 800e052:	23f0      	movs	r3, #240	; 0xf0
 800e054:	75fb      	strb	r3, [r7, #23]
                        break;
 800e056:	e060      	b.n	800e11a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                }
                pktsize = regRd(rRCVBC); //number of received bytes
 800e058:	2130      	movs	r1, #48	; 0x30
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f7f3 fa84 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e060:	4603      	mov	r3, r0
 800e062:	75bb      	strb	r3, [r7, #22]
                //printf("Got %i bytes \r\n", pktsize);
                // This would be OK, but...
                //assert(pktsize <= nbytes);
                if(pktsize > nbytes) {
 800e064:	7dba      	ldrb	r2, [r7, #22]
 800e066:	8a7b      	ldrh	r3, [r7, #18]
 800e068:	429a      	cmp	r2, r3
 800e06a:	dd01      	ble.n	800e070 <_ZN3USB10InTransferEP6EpInfotPtPhh+0xe4>
                        // This can happen. Use of assert on Arduino locks up the Arduino.
                        // So I will trim the value, and hope for the best.
                        //printf(">>>>>>>> Problem! Wanted %i bytes but got %i.\r\n", nbytes, pktsize);
                        pktsize = nbytes;
 800e06c:	8a7b      	ldrh	r3, [r7, #18]
 800e06e:	75bb      	strb	r3, [r7, #22]
                }

                int16_t mem_left = (int16_t)nbytes - *((int16_t*)nbytesptr);
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e076:	b29b      	uxth	r3, r3
 800e078:	8a7a      	ldrh	r2, [r7, #18]
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	82bb      	strh	r3, [r7, #20]

                if(mem_left < 0)
 800e080:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	da01      	bge.n	800e08c <_ZN3USB10InTransferEP6EpInfotPtPhh+0x100>
                        mem_left = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	82bb      	strh	r3, [r7, #20]

                data = bytesRd(rRCVFIFO, ((pktsize > mem_left) ? mem_left : pktsize), data);
 800e08c:	7dba      	ldrb	r2, [r7, #22]
 800e08e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e092:	4293      	cmp	r3, r2
 800e094:	bfa8      	it	ge
 800e096:	4613      	movge	r3, r2
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	2108      	movs	r1, #8
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f001 f81e 	bl	800f0e0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>
 800e0a4:	6238      	str	r0, [r7, #32]

                regWr(rHIRQ, bmRCVDAVIRQ); // Clear the IRQ & free the buffer
 800e0a6:	2204      	movs	r2, #4
 800e0a8:	21c8      	movs	r1, #200	; 0xc8
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f7f3 fa0a 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                *nbytesptr += pktsize; // add this packet's byte count to total transfer length
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	881a      	ldrh	r2, [r3, #0]
 800e0b4:	7dbb      	ldrb	r3, [r7, #22]
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	4413      	add	r3, r2
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	801a      	strh	r2, [r3, #0]

                /* The transfer is complete under two conditions:           */
                /* 1. The device sent a short packet (L.T. maxPacketSize)   */
                /* 2. 'nbytes' have been transferred.                       */
                if((pktsize < maxpktsize) || (*nbytesptr >= nbytes)) // have we transferred 'nbytes' bytes?
 800e0c0:	7dba      	ldrb	r2, [r7, #22]
 800e0c2:	7c7b      	ldrb	r3, [r7, #17]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d304      	bcc.n	800e0d2 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x146>
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	881b      	ldrh	r3, [r3, #0]
 800e0cc:	8a7a      	ldrh	r2, [r7, #18]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d813      	bhi.n	800e0fa <_ZN3USB10InTransferEP6EpInfotPtPhh+0x16e>
                {
                        // Save toggle value
                        pep->bmRcvToggle = ((regRd(rHRSL) & bmRCVTOGRD)) ? 1 : 0;
 800e0d2:	21f8      	movs	r1, #248	; 0xf8
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f7f3 fa47 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f003 0310 	and.w	r3, r3, #16
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15c>
 800e0e4:	2101      	movs	r1, #1
 800e0e6:	e000      	b.n	800e0ea <_ZN3USB10InTransferEP6EpInfotPtPhh+0x15e>
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	68ba      	ldr	r2, [r7, #8]
 800e0ec:	7893      	ldrb	r3, [r2, #2]
 800e0ee:	f361 0341 	bfi	r3, r1, #1, #1
 800e0f2:	7093      	strb	r3, [r2, #2]
                        //printf("\r\n");
                        rcode = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	75fb      	strb	r3, [r7, #23]
                        break;
 800e0f8:	e00f      	b.n	800e11a <_ZN3USB10InTransferEP6EpInfotPtPhh+0x18e>
                } else if(bInterval > 0)
 800e0fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f43f af66 	beq.w	800dfd0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        delay(bInterval); // Delay according to polling interval
 800e104:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e10c:	fb02 f303 	mul.w	r3, r2, r3
 800e110:	4618      	mov	r0, r3
 800e112:	f7f3 fcf5 	bl	8001b00 <HAL_Delay>
        } //while( 1 )
 800e116:	e75b      	b.n	800dfd0 <_ZN3USB10InTransferEP6EpInfotPtPhh+0x44>
                        break; //should be 0, indicating ACK. Else return error code.
 800e118:	bf00      	nop
        return ( rcode);
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <_ZN3USB11outTransferEhhtPh>:

/* OUT transfer to arbitrary endpoint. Handles multiple packets if necessary. Transfers 'nbytes' bytes. */
/* Handles NAK bug per Maxim Application Note 4000 for single buffer transfer   */

/* rcode 0 if no errors. rcode 01-0f is relayed from HRSL                       */
uint8_t USB::outTransfer(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* data) {
 800e124:	b580      	push	{r7, lr}
 800e126:	b088      	sub	sp, #32
 800e128:	af02      	add	r7, sp, #8
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	4608      	mov	r0, r1
 800e12e:	4611      	mov	r1, r2
 800e130:	461a      	mov	r2, r3
 800e132:	4603      	mov	r3, r0
 800e134:	70fb      	strb	r3, [r7, #3]
 800e136:	460b      	mov	r3, r1
 800e138:	70bb      	strb	r3, [r7, #2]
 800e13a:	4613      	mov	r3, r2
 800e13c:	803b      	strh	r3, [r7, #0]
        EpInfo *pep = NULL;
 800e13e:	2300      	movs	r3, #0
 800e140:	613b      	str	r3, [r7, #16]
        uint16_t nak_limit = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	81fb      	strh	r3, [r7, #14]

        uint8_t rcode = SetAddress(addr, ep, &pep, &nak_limit);
 800e146:	f107 0010 	add.w	r0, r7, #16
 800e14a:	78ba      	ldrb	r2, [r7, #2]
 800e14c:	78f9      	ldrb	r1, [r7, #3]
 800e14e:	f107 030e 	add.w	r3, r7, #14
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	4603      	mov	r3, r0
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff fd99 	bl	800dc8e <_ZN3USB10SetAddressEhhPP6EpInfoPt>
 800e15c:	4603      	mov	r3, r0
 800e15e:	75fb      	strb	r3, [r7, #23]

        if(rcode)
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <_ZN3USB11outTransferEhhtPh+0x46>
                return rcode;
 800e166:	7dfb      	ldrb	r3, [r7, #23]
 800e168:	e00a      	b.n	800e180 <_ZN3USB11outTransferEhhtPh+0x5c>

        return OutTransfer(pep, nak_limit, nbytes, data);
 800e16a:	6939      	ldr	r1, [r7, #16]
 800e16c:	89fa      	ldrh	r2, [r7, #14]
 800e16e:	8838      	ldrh	r0, [r7, #0]
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	9300      	str	r3, [sp, #0]
 800e174:	4603      	mov	r3, r0
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f806 	bl	800e188 <_ZN3USB11OutTransferEP6EpInfottPh>
 800e17c:	4603      	mov	r3, r0
 800e17e:	bf00      	nop
}
 800e180:	4618      	mov	r0, r3
 800e182:	3718      	adds	r7, #24
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <_ZN3USB11OutTransferEP6EpInfottPh>:

uint8_t USB::OutTransfer(EpInfo *pep, uint16_t nak_limit, uint16_t nbytes, uint8_t *data) {
 800e188:	b580      	push	{r7, lr}
 800e18a:	b08a      	sub	sp, #40	; 0x28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	4611      	mov	r1, r2
 800e194:	461a      	mov	r2, r3
 800e196:	460b      	mov	r3, r1
 800e198:	80fb      	strh	r3, [r7, #6]
 800e19a:	4613      	mov	r3, r2
 800e19c:	80bb      	strh	r3, [r7, #4]
        uint8_t rcode = hrSUCCESS, retry_count;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        uint8_t *data_p = data; //local copy of the data pointer
 800e1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a6:	623b      	str	r3, [r7, #32]
        uint16_t bytes_tosend, nak_count;
        uint16_t bytes_left = nbytes;
 800e1a8:	88bb      	ldrh	r3, [r7, #4]
 800e1aa:	83bb      	strh	r3, [r7, #28]

        uint8_t maxpktsize = pep->maxPktSize;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	785b      	ldrb	r3, [r3, #1]
 800e1b0:	76fb      	strb	r3, [r7, #27]

        if(maxpktsize < 1 || maxpktsize > 64)
 800e1b2:	7efb      	ldrb	r3, [r7, #27]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <_ZN3USB11OutTransferEP6EpInfottPh+0x36>
 800e1b8:	7efb      	ldrb	r3, [r7, #27]
 800e1ba:	2b40      	cmp	r3, #64	; 0x40
 800e1bc:	d901      	bls.n	800e1c2 <_ZN3USB11OutTransferEP6EpInfottPh+0x3a>
                return USB_ERROR_INVALID_MAX_PKT_SIZE;
 800e1be:	23da      	movs	r3, #218	; 0xda
 800e1c0:	e111      	b.n	800e3e6 <_ZN3USB11OutTransferEP6EpInfottPh+0x25e>

        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e1c2:	f7f3 fc91 	bl	8001ae8 <HAL_GetTick>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	4a89      	ldr	r2, [pc, #548]	; (800e3f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e1ce:	099b      	lsrs	r3, r3, #6
 800e1d0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e1d4:	3308      	adds	r3, #8
 800e1d6:	617b      	str	r3, [r7, #20]

        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	789b      	ldrb	r3, [r3, #2]
 800e1dc:	f003 0301 	and.w	r3, r3, #1
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <_ZN3USB11OutTransferEP6EpInfottPh+0x62>
 800e1e6:	2380      	movs	r3, #128	; 0x80
 800e1e8:	e000      	b.n	800e1ec <_ZN3USB11OutTransferEP6EpInfottPh+0x64>
 800e1ea:	2340      	movs	r3, #64	; 0x40
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	21e8      	movs	r1, #232	; 0xe8
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7f3 f967 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>

        while(bytes_left) {
 800e1f6:	8bbb      	ldrh	r3, [r7, #28]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 80de 	beq.w	800e3ba <_ZN3USB11OutTransferEP6EpInfottPh+0x232>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                retry_count = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                nak_count = 0;
 800e204:	2300      	movs	r3, #0
 800e206:	83fb      	strh	r3, [r7, #30]
                bytes_tosend = (bytes_left >= maxpktsize) ? maxpktsize : bytes_left;
 800e208:	7efb      	ldrb	r3, [r7, #27]
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	8bba      	ldrh	r2, [r7, #28]
 800e20e:	4293      	cmp	r3, r2
 800e210:	bf28      	it	cs
 800e212:	4613      	movcs	r3, r2
 800e214:	827b      	strh	r3, [r7, #18]
                bytesWr(rSNDFIFO, bytes_tosend, data_p); //filling output FIFO
 800e216:	8a7b      	ldrh	r3, [r7, #18]
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	2110      	movs	r1, #16
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f000 ff24 	bl	800f06c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>
                regWr(rSNDBC, bytes_tosend); //set number of bytes
 800e224:	8a7b      	ldrh	r3, [r7, #18]
 800e226:	b2db      	uxtb	r3, r3
 800e228:	461a      	mov	r2, r3
 800e22a:	2138      	movs	r1, #56	; 0x38
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7f3 f949 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	f043 0320 	orr.w	r3, r3, #32
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	461a      	mov	r2, r3
 800e23e:	21f0      	movs	r1, #240	; 0xf0
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f7f3 f93f 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e246:	21c8      	movs	r1, #200	; 0xc8
 800e248:	68f8      	ldr	r0, [r7, #12]
 800e24a:	f7f3 f98d 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e24e:	4603      	mov	r3, r0
 800e250:	b25b      	sxtb	r3, r3
 800e252:	43db      	mvns	r3, r3
 800e254:	b2db      	uxtb	r3, r3
 800e256:	09db      	lsrs	r3, r3, #7
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d000      	beq.n	800e260 <_ZN3USB11OutTransferEP6EpInfottPh+0xd8>
 800e25e:	e7f2      	b.n	800e246 <_ZN3USB11OutTransferEP6EpInfottPh+0xbe>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                } //wait for the completion IRQ
                regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e260:	2280      	movs	r2, #128	; 0x80
 800e262:	21c8      	movs	r1, #200	; 0xc8
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7f3 f92d 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = (regRd(rHRSL) & 0x0f);
 800e26a:	21f8      	movs	r1, #248	; 0xf8
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7f3 f97b 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e272:	4603      	mov	r3, r0
 800e274:	f003 030f 	and.w	r3, r3, #15
 800e278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00c      	beq.n	800e29e <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e284:	f7f3 fc30 	bl	8001ae8 <HAL_GetTick>
 800e288:	4603      	mov	r3, r0
 800e28a:	4a59      	ldr	r2, [pc, #356]	; (800e3f0 <_ZN3USB11OutTransferEP6EpInfottPh+0x268>)
 800e28c:	fba2 2303 	umull	r2, r3, r2, r3
 800e290:	099a      	lsrs	r2, r3, #6
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	da01      	bge.n	800e29e <_ZN3USB11OutTransferEP6EpInfottPh+0x116>
 800e29a:	2301      	movs	r3, #1
 800e29c:	e000      	b.n	800e2a0 <_ZN3USB11OutTransferEP6EpInfottPh+0x118>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 8081 	beq.w	800e3a8 <_ZN3USB11OutTransferEP6EpInfottPh+0x220>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        switch(rcode) {
 800e2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2aa:	2b0e      	cmp	r3, #14
 800e2ac:	d012      	beq.n	800e2d4 <_ZN3USB11OutTransferEP6EpInfottPh+0x14c>
 800e2ae:	2b0e      	cmp	r3, #14
 800e2b0:	f300 8085 	bgt.w	800e3be <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
 800e2b4:	2b04      	cmp	r3, #4
 800e2b6:	d002      	beq.n	800e2be <_ZN3USB11OutTransferEP6EpInfottPh+0x136>
 800e2b8:	2b06      	cmp	r3, #6
 800e2ba:	d015      	beq.n	800e2e8 <_ZN3USB11OutTransferEP6EpInfottPh+0x160>
                                        // yes, we flip it wrong here so that next time it is actually correct!
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
                                        break;
                                default:
                                        goto breakout;
 800e2bc:	e07f      	b.n	800e3be <_ZN3USB11OutTransferEP6EpInfottPh+0x236>
                                        nak_count++;
 800e2be:	8bfb      	ldrh	r3, [r7, #30]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	83fb      	strh	r3, [r7, #30]
                                        if(nak_limit && (nak_count == nak_limit))
 800e2c4:	88fb      	ldrh	r3, [r7, #6]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d032      	beq.n	800e330 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
 800e2ca:	8bfa      	ldrh	r2, [r7, #30]
 800e2cc:	88fb      	ldrh	r3, [r7, #6]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d12e      	bne.n	800e330 <_ZN3USB11OutTransferEP6EpInfottPh+0x1a8>
                                                goto breakout;
 800e2d2:	e075      	b.n	800e3c0 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        retry_count++;
 800e2d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2d8:	3301      	adds	r3, #1
 800e2da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                        if(retry_count == USB_RETRY_LIMIT)
 800e2de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d126      	bne.n	800e334 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ac>
                                                goto breakout;
 800e2e6:	e06b      	b.n	800e3c0 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 0 : 1;
 800e2e8:	21f8      	movs	r1, #248	; 0xf8
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7f3 f93c 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	f003 0320 	and.w	r3, r3, #32
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	bf0c      	ite	eq
 800e2fa:	2301      	moveq	r3, #1
 800e2fc:	2300      	movne	r3, #0
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	b2d9      	uxtb	r1, r3
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	7893      	ldrb	r3, [r2, #2]
 800e30a:	f361 0300 	bfi	r3, r1, #0, #1
 800e30e:	7093      	strb	r3, [r2, #2]
                                        regWr(rHCTL, (pep->bmSndToggle) ? bmSNDTOG1 : bmSNDTOG0); //set toggle value
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	789b      	ldrb	r3, [r3, #2]
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <_ZN3USB11OutTransferEP6EpInfottPh+0x19a>
 800e31e:	2380      	movs	r3, #128	; 0x80
 800e320:	e000      	b.n	800e324 <_ZN3USB11OutTransferEP6EpInfottPh+0x19c>
 800e322:	2340      	movs	r3, #64	; 0x40
 800e324:	461a      	mov	r2, r3
 800e326:	21e8      	movs	r1, #232	; 0xe8
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f7f3 f8cb 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                        break;
 800e32e:	e002      	b.n	800e336 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e330:	bf00      	nop
 800e332:	e000      	b.n	800e336 <_ZN3USB11OutTransferEP6EpInfottPh+0x1ae>
                                        break;
 800e334:	bf00      	nop
                        }//switch( rcode

                        /* process NAK according to Host out NAK bug */
                        regWr(rSNDBC, 0);
 800e336:	2200      	movs	r2, #0
 800e338:	2138      	movs	r1, #56	; 0x38
 800e33a:	68f8      	ldr	r0, [r7, #12]
 800e33c:	f7f3 f8c2 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDFIFO, *data_p);
 800e340:	6a3b      	ldr	r3, [r7, #32]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	2110      	movs	r1, #16
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7f3 f8bb 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rSNDBC, bytes_tosend);
 800e34e:	8a7b      	ldrh	r3, [r7, #18]
 800e350:	b2db      	uxtb	r3, r3
 800e352:	461a      	mov	r2, r3
 800e354:	2138      	movs	r1, #56	; 0x38
 800e356:	68f8      	ldr	r0, [r7, #12]
 800e358:	f7f3 f8b4 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        regWr(rHXFR, (tokOUT | pep->epAddr)); //dispatch packet
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	f043 0320 	orr.w	r3, r3, #32
 800e364:	b2db      	uxtb	r3, r3
 800e366:	461a      	mov	r2, r3
 800e368:	21f0      	movs	r1, #240	; 0xf0
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f7f3 f8aa 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        while(!(regRd(rHIRQ) & bmHXFRDNIRQ)){
 800e370:	21c8      	movs	r1, #200	; 0xc8
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7f3 f8f8 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e378:	4603      	mov	r3, r0
 800e37a:	b25b      	sxtb	r3, r3
 800e37c:	43db      	mvns	r3, r3
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	09db      	lsrs	r3, r3, #7
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b00      	cmp	r3, #0
 800e386:	d000      	beq.n	800e38a <_ZN3USB11OutTransferEP6EpInfottPh+0x202>
 800e388:	e7f2      	b.n	800e370 <_ZN3USB11OutTransferEP6EpInfottPh+0x1e8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        } //wait for the completion IRQ
                        regWr(rHIRQ, bmHXFRDNIRQ); //clear IRQ
 800e38a:	2280      	movs	r2, #128	; 0x80
 800e38c:	21c8      	movs	r1, #200	; 0xc8
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f7f3 f898 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        rcode = (regRd(rHRSL) & 0x0f);
 800e394:	21f8      	movs	r1, #248	; 0xf8
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	f7f3 f8e6 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e39c:	4603      	mov	r3, r0
 800e39e:	f003 030f 	and.w	r3, r3, #15
 800e3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                while(rcode && ((int32_t)((uint32_t)millis() - timeout) < 0L)) {
 800e3a6:	e769      	b.n	800e27c <_ZN3USB11OutTransferEP6EpInfottPh+0xf4>
                }//while( rcode && ....
                bytes_left -= bytes_tosend;
 800e3a8:	8bba      	ldrh	r2, [r7, #28]
 800e3aa:	8a7b      	ldrh	r3, [r7, #18]
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	83bb      	strh	r3, [r7, #28]
                data_p += bytes_tosend;
 800e3b0:	8a7b      	ldrh	r3, [r7, #18]
 800e3b2:	6a3a      	ldr	r2, [r7, #32]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	623b      	str	r3, [r7, #32]
        while(bytes_left) {
 800e3b8:	e71d      	b.n	800e1f6 <_ZN3USB11OutTransferEP6EpInfottPh+0x6e>
        }//while( bytes_left...
breakout:
 800e3ba:	bf00      	nop
 800e3bc:	e000      	b.n	800e3c0 <_ZN3USB11OutTransferEP6EpInfottPh+0x238>
                                        goto breakout;
 800e3be:	bf00      	nop

        pep->bmSndToggle = (regRd(rHRSL) & bmSNDTOGRD) ? 1 : 0; //bmSNDTOG1 : bmSNDTOG0;  //update toggle
 800e3c0:	21f8      	movs	r1, #248	; 0xf8
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7f3 f8d0 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	f003 0320 	and.w	r3, r3, #32
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <_ZN3USB11OutTransferEP6EpInfottPh+0x24e>
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	e000      	b.n	800e3d8 <_ZN3USB11OutTransferEP6EpInfottPh+0x250>
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	7893      	ldrb	r3, [r2, #2]
 800e3dc:	f361 0300 	bfi	r3, r1, #0, #1
 800e3e0:	7093      	strb	r3, [r2, #2]
        return ( rcode); //should be 0 in all cases
 800e3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3728      	adds	r7, #40	; 0x28
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	10624dd3 	.word	0x10624dd3

0800e3f4 <_ZN3USB11dispatchPktEhht>:
/* If NAK, tries to re-send up to nak_limit times                                                   */
/* If nak_limit == 0, do not count NAKs, exit after timeout                                         */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */

/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
uint8_t USB::dispatchPkt(uint8_t token, uint8_t ep, uint16_t nak_limit) {
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	4608      	mov	r0, r1
 800e3fe:	4611      	mov	r1, r2
 800e400:	461a      	mov	r2, r3
 800e402:	4603      	mov	r3, r0
 800e404:	70fb      	strb	r3, [r7, #3]
 800e406:	460b      	mov	r3, r1
 800e408:	70bb      	strb	r3, [r7, #2]
 800e40a:	4613      	mov	r3, r2
 800e40c:	803b      	strh	r3, [r7, #0]
        uint32_t timeout = (uint32_t)millis() + USB_XFER_TIMEOUT;
 800e40e:	f7f3 fb6b 	bl	8001ae8 <HAL_GetTick>
 800e412:	4603      	mov	r3, r0
 800e414:	4a38      	ldr	r2, [pc, #224]	; (800e4f8 <_ZN3USB11dispatchPktEhht+0x104>)
 800e416:	fba2 2303 	umull	r2, r3, r2, r3
 800e41a:	099b      	lsrs	r3, r3, #6
 800e41c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800e420:	3308      	adds	r3, #8
 800e422:	613b      	str	r3, [r7, #16]
        uint8_t tmpdata;
        uint8_t rcode = hrSUCCESS;
 800e424:	2300      	movs	r3, #0
 800e426:	75fb      	strb	r3, [r7, #23]
        uint8_t retry_count = 0;
 800e428:	2300      	movs	r3, #0
 800e42a:	75bb      	strb	r3, [r7, #22]
        uint16_t nak_count = 0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	82bb      	strh	r3, [r7, #20]

        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e430:	f7f3 fb5a 	bl	8001ae8 <HAL_GetTick>
 800e434:	4603      	mov	r3, r0
 800e436:	4a30      	ldr	r2, [pc, #192]	; (800e4f8 <_ZN3USB11dispatchPktEhht+0x104>)
 800e438:	fba2 2303 	umull	r2, r3, r2, r3
 800e43c:	099a      	lsrs	r2, r3, #6
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	0fdb      	lsrs	r3, r3, #31
 800e444:	b2db      	uxtb	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	d050      	beq.n	800e4ec <_ZN3USB11dispatchPktEhht+0xf8>
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                regWr(rHXFR, (token | ep)); //launch the transfer
 800e44a:	78fa      	ldrb	r2, [r7, #3]
 800e44c:	78bb      	ldrb	r3, [r7, #2]
 800e44e:	4313      	orrs	r3, r2
 800e450:	b2db      	uxtb	r3, r3
 800e452:	461a      	mov	r2, r3
 800e454:	21f0      	movs	r1, #240	; 0xf0
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7f3 f834 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                rcode = USB_ERROR_TRANSFER_TIMEOUT;
 800e45c:	23ff      	movs	r3, #255	; 0xff
 800e45e:	75fb      	strb	r3, [r7, #23]

                while((int32_t)((uint32_t)millis() - timeout) < 0L) //wait for transfer completion
 800e460:	f7f3 fb42 	bl	8001ae8 <HAL_GetTick>
 800e464:	4603      	mov	r3, r0
 800e466:	4a24      	ldr	r2, [pc, #144]	; (800e4f8 <_ZN3USB11dispatchPktEhht+0x104>)
 800e468:	fba2 2303 	umull	r2, r3, r2, r3
 800e46c:	099a      	lsrs	r2, r3, #6
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	0fdb      	lsrs	r3, r3, #31
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b00      	cmp	r3, #0
 800e478:	d010      	beq.n	800e49c <_ZN3USB11dispatchPktEhht+0xa8>
                {
#if defined(ESP8266) || defined(ESP32)
                        yield(); // needed in order to reset the watchdog timer on the ESP8266
#endif
                        tmpdata = regRd(rHIRQ);
 800e47a:	21c8      	movs	r1, #200	; 0xc8
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7f3 f873 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e482:	4603      	mov	r3, r0
 800e484:	73fb      	strb	r3, [r7, #15]

                        if(tmpdata & bmHXFRDNIRQ) {
 800e486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	dae8      	bge.n	800e460 <_ZN3USB11dispatchPktEhht+0x6c>
                                regWr(rHIRQ, bmHXFRDNIRQ); //clear the interrupt
 800e48e:	2280      	movs	r2, #128	; 0x80
 800e490:	21c8      	movs	r1, #200	; 0xc8
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7f3 f816 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                rcode = 0x00;
 800e498:	2300      	movs	r3, #0
 800e49a:	75fb      	strb	r3, [r7, #23]
                }//while ( millis() < timeout

                //if (rcode != 0x00) //exit if timeout
                //        return ( rcode);

                rcode = (regRd(rHRSL) & 0x0f); //analyze transfer result
 800e49c:	21f8      	movs	r1, #248	; 0xf8
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7f3 f862 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f003 030f 	and.w	r3, r3, #15
 800e4aa:	75fb      	strb	r3, [r7, #23]

                switch(rcode) {
 800e4ac:	7dfb      	ldrb	r3, [r7, #23]
 800e4ae:	2b04      	cmp	r3, #4
 800e4b0:	d002      	beq.n	800e4b8 <_ZN3USB11dispatchPktEhht+0xc4>
 800e4b2:	2b0e      	cmp	r3, #14
 800e4b4:	d00c      	beq.n	800e4d0 <_ZN3USB11dispatchPktEhht+0xdc>
 800e4b6:	e013      	b.n	800e4e0 <_ZN3USB11dispatchPktEhht+0xec>
                        case hrNAK:
                                nak_count++;
 800e4b8:	8abb      	ldrh	r3, [r7, #20]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	82bb      	strh	r3, [r7, #20]
                                if(nak_limit && (nak_count == nak_limit))
 800e4be:	883b      	ldrh	r3, [r7, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00f      	beq.n	800e4e4 <_ZN3USB11dispatchPktEhht+0xf0>
 800e4c4:	8aba      	ldrh	r2, [r7, #20]
 800e4c6:	883b      	ldrh	r3, [r7, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d10b      	bne.n	800e4e4 <_ZN3USB11dispatchPktEhht+0xf0>
                                        return (rcode);
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	e00e      	b.n	800e4ee <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        case hrTIMEOUT:
                                retry_count++;
 800e4d0:	7dbb      	ldrb	r3, [r7, #22]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	75bb      	strb	r3, [r7, #22]
                                if(retry_count == USB_RETRY_LIMIT)
 800e4d6:	7dbb      	ldrb	r3, [r7, #22]
 800e4d8:	2b03      	cmp	r3, #3
 800e4da:	d105      	bne.n	800e4e8 <_ZN3USB11dispatchPktEhht+0xf4>
                                        return (rcode);
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	e006      	b.n	800e4ee <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
                        default:
                                return (rcode);
 800e4e0:	7dfb      	ldrb	r3, [r7, #23]
 800e4e2:	e004      	b.n	800e4ee <_ZN3USB11dispatchPktEhht+0xfa>
                                break;
 800e4e4:	bf00      	nop
 800e4e6:	e7a3      	b.n	800e430 <_ZN3USB11dispatchPktEhht+0x3c>
                                break;
 800e4e8:	bf00      	nop
        while((int32_t)((uint32_t)millis() - timeout) < 0L) {
 800e4ea:	e7a1      	b.n	800e430 <_ZN3USB11dispatchPktEhht+0x3c>
                }//switch( rcode

        }//while( timeout > millis()
        return ( rcode);
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	10624dd3 	.word	0x10624dd3

0800e4fc <_ZN3USB4TaskEv>:

/* USB main task. Performs enumeration/cleanup */
void USB::Task(void) //USB state machine
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
        uint8_t rcode;
        uint8_t tmpdata;
        static uint32_t delay = 0;
        //USB_DEVICE_DESCRIPTOR buf;
        bool lowspeed = false;
 800e504:	2300      	movs	r3, #0
 800e506:	73fb      	strb	r3, [r7, #15]

        MAX3421E::Task();
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 fe17 	bl	800f13c <_ZN8MAX3421eI3P102P9E4TaskEv>

        tmpdata = getVbusState();
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 fe2c 	bl	800f16c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>
 800e514:	4603      	mov	r3, r0
 800e516:	733b      	strb	r3, [r7, #12]

        /* modify USB task state if Vbus changed */
        switch(tmpdata) {
 800e518:	7b3b      	ldrb	r3, [r7, #12]
 800e51a:	2b03      	cmp	r3, #3
 800e51c:	d832      	bhi.n	800e584 <_ZN3USB4TaskEv+0x88>
 800e51e:	a201      	add	r2, pc, #4	; (adr r2, 800e524 <_ZN3USB4TaskEv+0x28>)
 800e520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e524:	0800e541 	.word	0x0800e541
 800e528:	0800e535 	.word	0x0800e535
 800e52c:	0800e55d 	.word	0x0800e55d
 800e530:	0800e559 	.word	0x0800e559
                case SE1: //illegal state
                        usb_task_state = USB_DETACHED_SUBSTATE_ILLEGAL;
 800e534:	4bc7      	ldr	r3, [pc, #796]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e536:	2213      	movs	r2, #19
 800e538:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e53a:	2300      	movs	r3, #0
 800e53c:	73fb      	strb	r3, [r7, #15]
                        break;
 800e53e:	e021      	b.n	800e584 <_ZN3USB4TaskEv+0x88>
                case SE0: //disconnected
                        if((usb_task_state & USB_STATE_MASK) != USB_STATE_DETACHED)
 800e540:	4bc4      	ldr	r3, [pc, #784]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e548:	2b10      	cmp	r3, #16
 800e54a:	d002      	beq.n	800e552 <_ZN3USB4TaskEv+0x56>
                                usb_task_state = USB_DETACHED_SUBSTATE_INITIALIZE;
 800e54c:	4bc1      	ldr	r3, [pc, #772]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e54e:	2211      	movs	r2, #17
 800e550:	701a      	strb	r2, [r3, #0]
                        lowspeed = false;
 800e552:	2300      	movs	r3, #0
 800e554:	73fb      	strb	r3, [r7, #15]
                        break;
 800e556:	e015      	b.n	800e584 <_ZN3USB4TaskEv+0x88>
                case LSHOST:

                        lowspeed = true;
 800e558:	2301      	movs	r3, #1
 800e55a:	73fb      	strb	r3, [r7, #15]
                        //intentional fallthrough
                case FSHOST: //attached
                        if((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED) {
 800e55c:	4bbd      	ldr	r3, [pc, #756]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e564:	2b10      	cmp	r3, #16
 800e566:	d10c      	bne.n	800e582 <_ZN3USB4TaskEv+0x86>
                                delay = (uint32_t)millis() + USB_SETTLE_DELAY;
 800e568:	f7f3 fabe 	bl	8001ae8 <HAL_GetTick>
 800e56c:	4603      	mov	r3, r0
 800e56e:	4aba      	ldr	r2, [pc, #744]	; (800e858 <_ZN3USB4TaskEv+0x35c>)
 800e570:	fba2 2303 	umull	r2, r3, r2, r3
 800e574:	099b      	lsrs	r3, r3, #6
 800e576:	33c8      	adds	r3, #200	; 0xc8
 800e578:	4ab8      	ldr	r2, [pc, #736]	; (800e85c <_ZN3USB4TaskEv+0x360>)
 800e57a:	6013      	str	r3, [r2, #0]
                                usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 800e57c:	4bb5      	ldr	r3, [pc, #724]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e57e:	2220      	movs	r2, #32
 800e580:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 800e582:	bf00      	nop
        }// switch( tmpdata

        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e584:	2300      	movs	r3, #0
 800e586:	73bb      	strb	r3, [r7, #14]
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	2b0f      	cmp	r3, #15
 800e58c:	d81b      	bhi.n	800e5c6 <_ZN3USB4TaskEv+0xca>
                if(devConfig[i])
 800e58e:	7bba      	ldrb	r2, [r7, #14]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	321e      	adds	r2, #30
 800e594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d010      	beq.n	800e5be <_ZN3USB4TaskEv+0xc2>
                        rcode = devConfig[i]->Poll();
 800e59c:	7bba      	ldrb	r2, [r7, #14]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	321e      	adds	r2, #30
 800e5a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5a6:	7bba      	ldrb	r2, [r7, #14]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	321e      	adds	r2, #30
 800e5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	330c      	adds	r3, #12
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4608      	mov	r0, r1
 800e5b8:	4798      	blx	r3
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	72fb      	strb	r3, [r7, #11]
        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e5be:	7bbb      	ldrb	r3, [r7, #14]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	73bb      	strb	r3, [r7, #14]
 800e5c4:	e7e0      	b.n	800e588 <_ZN3USB4TaskEv+0x8c>

        switch(usb_task_state) {
 800e5c6:	4ba3      	ldr	r3, [pc, #652]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2ba0      	cmp	r3, #160	; 0xa0
 800e5cc:	f000 812f 	beq.w	800e82e <_ZN3USB4TaskEv+0x332>
 800e5d0:	2ba0      	cmp	r3, #160	; 0xa0
 800e5d2:	f300 813b 	bgt.w	800e84c <_ZN3USB4TaskEv+0x350>
 800e5d6:	2b90      	cmp	r3, #144	; 0x90
 800e5d8:	f000 812b 	beq.w	800e832 <_ZN3USB4TaskEv+0x336>
 800e5dc:	2b90      	cmp	r3, #144	; 0x90
 800e5de:	f300 8135 	bgt.w	800e84c <_ZN3USB4TaskEv+0x350>
 800e5e2:	2b80      	cmp	r3, #128	; 0x80
 800e5e4:	f000 810a 	beq.w	800e7fc <_ZN3USB4TaskEv+0x300>
 800e5e8:	2b80      	cmp	r3, #128	; 0x80
 800e5ea:	f300 812f 	bgt.w	800e84c <_ZN3USB4TaskEv+0x350>
 800e5ee:	2b51      	cmp	r3, #81	; 0x51
 800e5f0:	f000 80f2 	beq.w	800e7d8 <_ZN3USB4TaskEv+0x2dc>
 800e5f4:	2b51      	cmp	r3, #81	; 0x51
 800e5f6:	f300 8129 	bgt.w	800e84c <_ZN3USB4TaskEv+0x350>
 800e5fa:	2b40      	cmp	r3, #64	; 0x40
 800e5fc:	dc6a      	bgt.n	800e6d4 <_ZN3USB4TaskEv+0x1d8>
 800e5fe:	2b11      	cmp	r3, #17
 800e600:	f2c0 8124 	blt.w	800e84c <_ZN3USB4TaskEv+0x350>
 800e604:	3b11      	subs	r3, #17
 800e606:	2b2f      	cmp	r3, #47	; 0x2f
 800e608:	f200 8120 	bhi.w	800e84c <_ZN3USB4TaskEv+0x350>
 800e60c:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <_ZN3USB4TaskEv+0x118>)
 800e60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e612:	bf00      	nop
 800e614:	0800e6db 	.word	0x0800e6db
 800e618:	0800e837 	.word	0x0800e837
 800e61c:	0800e837 	.word	0x0800e837
 800e620:	0800e84d 	.word	0x0800e84d
 800e624:	0800e84d 	.word	0x0800e84d
 800e628:	0800e84d 	.word	0x0800e84d
 800e62c:	0800e84d 	.word	0x0800e84d
 800e630:	0800e84d 	.word	0x0800e84d
 800e634:	0800e84d 	.word	0x0800e84d
 800e638:	0800e84d 	.word	0x0800e84d
 800e63c:	0800e84d 	.word	0x0800e84d
 800e640:	0800e84d 	.word	0x0800e84d
 800e644:	0800e84d 	.word	0x0800e84d
 800e648:	0800e84d 	.word	0x0800e84d
 800e64c:	0800e84d 	.word	0x0800e84d
 800e650:	0800e72b 	.word	0x0800e72b
 800e654:	0800e84d 	.word	0x0800e84d
 800e658:	0800e84d 	.word	0x0800e84d
 800e65c:	0800e84d 	.word	0x0800e84d
 800e660:	0800e84d 	.word	0x0800e84d
 800e664:	0800e84d 	.word	0x0800e84d
 800e668:	0800e84d 	.word	0x0800e84d
 800e66c:	0800e84d 	.word	0x0800e84d
 800e670:	0800e84d 	.word	0x0800e84d
 800e674:	0800e84d 	.word	0x0800e84d
 800e678:	0800e84d 	.word	0x0800e84d
 800e67c:	0800e84d 	.word	0x0800e84d
 800e680:	0800e84d 	.word	0x0800e84d
 800e684:	0800e84d 	.word	0x0800e84d
 800e688:	0800e84d 	.word	0x0800e84d
 800e68c:	0800e84d 	.word	0x0800e84d
 800e690:	0800e74f 	.word	0x0800e74f
 800e694:	0800e84d 	.word	0x0800e84d
 800e698:	0800e84d 	.word	0x0800e84d
 800e69c:	0800e84d 	.word	0x0800e84d
 800e6a0:	0800e84d 	.word	0x0800e84d
 800e6a4:	0800e84d 	.word	0x0800e84d
 800e6a8:	0800e84d 	.word	0x0800e84d
 800e6ac:	0800e84d 	.word	0x0800e84d
 800e6b0:	0800e84d 	.word	0x0800e84d
 800e6b4:	0800e84d 	.word	0x0800e84d
 800e6b8:	0800e84d 	.word	0x0800e84d
 800e6bc:	0800e84d 	.word	0x0800e84d
 800e6c0:	0800e84d 	.word	0x0800e84d
 800e6c4:	0800e84d 	.word	0x0800e84d
 800e6c8:	0800e84d 	.word	0x0800e84d
 800e6cc:	0800e84d 	.word	0x0800e84d
 800e6d0:	0800e761 	.word	0x0800e761
 800e6d4:	2b50      	cmp	r3, #80	; 0x50
 800e6d6:	d063      	beq.n	800e7a0 <_ZN3USB4TaskEv+0x2a4>
                        break;
                case USB_STATE_ERROR:
                        //MAX3421E::Init();
                        break;
        } // switch( usb_task_state )
}
 800e6d8:	e0b8      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        init();
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f7ff fa6c 	bl	800dbb8 <_ZN3USB4initEv>
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	737b      	strb	r3, [r7, #13]
 800e6e4:	7b7b      	ldrb	r3, [r7, #13]
 800e6e6:	2b0f      	cmp	r3, #15
 800e6e8:	d81b      	bhi.n	800e722 <_ZN3USB4TaskEv+0x226>
                                if(devConfig[i])
 800e6ea:	7b7a      	ldrb	r2, [r7, #13]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	321e      	adds	r2, #30
 800e6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d010      	beq.n	800e71a <_ZN3USB4TaskEv+0x21e>
                                        rcode = devConfig[i]->Release();
 800e6f8:	7b7a      	ldrb	r2, [r7, #13]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	321e      	adds	r2, #30
 800e6fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e702:	7b7a      	ldrb	r2, [r7, #13]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	321e      	adds	r2, #30
 800e708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	3308      	adds	r3, #8
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4608      	mov	r0, r1
 800e714:	4798      	blx	r3
 800e716:	4603      	mov	r3, r0
 800e718:	72fb      	strb	r3, [r7, #11]
                        for(uint8_t i = 0; i < USB_NUMDEVICES; i++)
 800e71a:	7b7b      	ldrb	r3, [r7, #13]
 800e71c:	3301      	adds	r3, #1
 800e71e:	737b      	strb	r3, [r7, #13]
 800e720:	e7e0      	b.n	800e6e4 <_ZN3USB4TaskEv+0x1e8>
                        usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800e722:	4b4c      	ldr	r3, [pc, #304]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e724:	2212      	movs	r2, #18
 800e726:	701a      	strb	r2, [r3, #0]
                        break;
 800e728:	e090      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L)
 800e72a:	f7f3 f9dd 	bl	8001ae8 <HAL_GetTick>
 800e72e:	4603      	mov	r3, r0
 800e730:	4a49      	ldr	r2, [pc, #292]	; (800e858 <_ZN3USB4TaskEv+0x35c>)
 800e732:	fba2 2303 	umull	r2, r3, r2, r3
 800e736:	099a      	lsrs	r2, r3, #6
 800e738:	4b48      	ldr	r3, [pc, #288]	; (800e85c <_ZN3USB4TaskEv+0x360>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	1ad3      	subs	r3, r2, r3
 800e73e:	43db      	mvns	r3, r3
 800e740:	0fdb      	lsrs	r3, r3, #31
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d078      	beq.n	800e83a <_ZN3USB4TaskEv+0x33e>
                                usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800e748:	4b42      	ldr	r3, [pc, #264]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e74a:	2230      	movs	r2, #48	; 0x30
 800e74c:	701a      	strb	r2, [r3, #0]
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e74e:	2201      	movs	r2, #1
 800e750:	21e8      	movs	r1, #232	; 0xe8
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7f2 feb6 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 800e758:	4b3e      	ldr	r3, [pc, #248]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e75a:	2240      	movs	r2, #64	; 0x40
 800e75c:	701a      	strb	r2, [r3, #0]
                        break;
 800e75e:	e075      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        if((regRd(rHCTL) & bmBUSRST) == 0) {
 800e760:	21e8      	movs	r1, #232	; 0xe8
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7f2 ff00 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e768:	4603      	mov	r3, r0
 800e76a:	f003 0301 	and.w	r3, r3, #1
 800e76e:	2b00      	cmp	r3, #0
 800e770:	bf0c      	ite	eq
 800e772:	2301      	moveq	r3, #1
 800e774:	2300      	movne	r3, #0
 800e776:	b2db      	uxtb	r3, r3
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d060      	beq.n	800e83e <_ZN3USB4TaskEv+0x342>
                                tmpdata = regRd(rMODE) | bmSOFKAENAB; //start SOF generation
 800e77c:	21d8      	movs	r1, #216	; 0xd8
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7f2 fef2 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e784:	4603      	mov	r3, r0
 800e786:	f043 0308 	orr.w	r3, r3, #8
 800e78a:	733b      	strb	r3, [r7, #12]
                                regWr(rMODE, tmpdata);
 800e78c:	7b3b      	ldrb	r3, [r7, #12]
 800e78e:	461a      	mov	r2, r3
 800e790:	21d8      	movs	r1, #216	; 0xd8
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7f2 fe96 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 800e798:	4b2e      	ldr	r3, [pc, #184]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e79a:	2250      	movs	r2, #80	; 0x50
 800e79c:	701a      	strb	r2, [r3, #0]
                        break;
 800e79e:	e04e      	b.n	800e83e <_ZN3USB4TaskEv+0x342>
                        if(regRd(rHIRQ) & bmFRAMEIRQ) {
 800e7a0:	21c8      	movs	r1, #200	; 0xc8
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f7f2 fee0 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	bf14      	ite	ne
 800e7b2:	2301      	movne	r3, #1
 800e7b4:	2300      	moveq	r3, #0
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d042      	beq.n	800e842 <_ZN3USB4TaskEv+0x346>
                                usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET;
 800e7bc:	4b25      	ldr	r3, [pc, #148]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e7be:	2251      	movs	r2, #81	; 0x51
 800e7c0:	701a      	strb	r2, [r3, #0]
                                delay = (uint32_t)millis() + 20;
 800e7c2:	f7f3 f991 	bl	8001ae8 <HAL_GetTick>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	4a23      	ldr	r2, [pc, #140]	; (800e858 <_ZN3USB4TaskEv+0x35c>)
 800e7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ce:	099b      	lsrs	r3, r3, #6
 800e7d0:	3314      	adds	r3, #20
 800e7d2:	4a22      	ldr	r2, [pc, #136]	; (800e85c <_ZN3USB4TaskEv+0x360>)
 800e7d4:	6013      	str	r3, [r2, #0]
                        break;
 800e7d6:	e034      	b.n	800e842 <_ZN3USB4TaskEv+0x346>
                        if((int32_t)((uint32_t)millis() - delay) >= 0L) usb_task_state = USB_STATE_CONFIGURING;
 800e7d8:	f7f3 f986 	bl	8001ae8 <HAL_GetTick>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	4a1e      	ldr	r2, [pc, #120]	; (800e858 <_ZN3USB4TaskEv+0x35c>)
 800e7e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e7e4:	099a      	lsrs	r2, r3, #6
 800e7e6:	4b1d      	ldr	r3, [pc, #116]	; (800e85c <_ZN3USB4TaskEv+0x360>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	1ad3      	subs	r3, r2, r3
 800e7ec:	43db      	mvns	r3, r3
 800e7ee:	0fdb      	lsrs	r3, r3, #31
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d027      	beq.n	800e846 <_ZN3USB4TaskEv+0x34a>
 800e7f6:	4b17      	ldr	r3, [pc, #92]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e7f8:	2280      	movs	r2, #128	; 0x80
 800e7fa:	701a      	strb	r2, [r3, #0]
                        rcode = Configuring(0, 0, lowspeed);
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	2200      	movs	r2, #0
 800e800:	2100      	movs	r1, #0
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f928 	bl	800ea58 <_ZN3USB11ConfiguringEhhb>
 800e808:	4603      	mov	r3, r0
 800e80a:	72fb      	strb	r3, [r7, #11]
                        if(rcode) {
 800e80c:	7afb      	ldrb	r3, [r7, #11]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d009      	beq.n	800e826 <_ZN3USB4TaskEv+0x32a>
                                if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE) {
 800e812:	7afb      	ldrb	r3, [r7, #11]
 800e814:	2bd2      	cmp	r3, #210	; 0xd2
 800e816:	d018      	beq.n	800e84a <_ZN3USB4TaskEv+0x34e>
                                        usb_error = rcode;
 800e818:	4a11      	ldr	r2, [pc, #68]	; (800e860 <_ZN3USB4TaskEv+0x364>)
 800e81a:	7afb      	ldrb	r3, [r7, #11]
 800e81c:	7013      	strb	r3, [r2, #0]
                                        usb_task_state = USB_STATE_ERROR;
 800e81e:	4b0d      	ldr	r3, [pc, #52]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e820:	22a0      	movs	r2, #160	; 0xa0
 800e822:	701a      	strb	r2, [r3, #0]
                        break;
 800e824:	e011      	b.n	800e84a <_ZN3USB4TaskEv+0x34e>
                                usb_task_state = USB_STATE_RUNNING;
 800e826:	4b0b      	ldr	r3, [pc, #44]	; (800e854 <_ZN3USB4TaskEv+0x358>)
 800e828:	2290      	movs	r2, #144	; 0x90
 800e82a:	701a      	strb	r2, [r3, #0]
                        break;
 800e82c:	e00d      	b.n	800e84a <_ZN3USB4TaskEv+0x34e>
                        break;
 800e82e:	bf00      	nop
 800e830:	e00c      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        break;
 800e832:	bf00      	nop
 800e834:	e00a      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        break;
 800e836:	bf00      	nop
 800e838:	e008      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e83a:	bf00      	nop
 800e83c:	e006      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        break;
 800e83e:	bf00      	nop
 800e840:	e004      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        break;
 800e842:	bf00      	nop
 800e844:	e002      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        else break; // don't fall through
 800e846:	bf00      	nop
 800e848:	e000      	b.n	800e84c <_ZN3USB4TaskEv+0x350>
                        break;
 800e84a:	bf00      	nop
}
 800e84c:	bf00      	nop
 800e84e:	3710      	adds	r7, #16
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	2000066d 	.word	0x2000066d
 800e858:	10624dd3 	.word	0x10624dd3
 800e85c:	20000670 	.word	0x20000670
 800e860:	2000066c 	.word	0x2000066c

0800e864 <_ZN3USB17DefaultAddressingEhhb>:

uint8_t USB::DefaultAddressing(uint8_t parent, uint8_t port, bool lowspeed) {
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	4608      	mov	r0, r1
 800e86e:	4611      	mov	r1, r2
 800e870:	461a      	mov	r2, r3
 800e872:	4603      	mov	r3, r0
 800e874:	70fb      	strb	r3, [r7, #3]
 800e876:	460b      	mov	r3, r1
 800e878:	70bb      	strb	r3, [r7, #2]
 800e87a:	4613      	mov	r3, r2
 800e87c:	707b      	strb	r3, [r7, #1]
        //uint8_t                buf[12];
        uint8_t rcode;
        UsbDevice *p0 = NULL, *p = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	617b      	str	r3, [r7, #20]
 800e882:	2300      	movs	r3, #0
 800e884:	613b      	str	r3, [r7, #16]

        // Get pointer to pseudo device with address 0 assigned
        p0 = addrPool.GetUsbDevicePtr(0);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2100      	movs	r1, #0
 800e88a:	4618      	mov	r0, r3
 800e88c:	f000 fbc8 	bl	800f020 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e890:	6178      	str	r0, [r7, #20]

        if(!p0)
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d101      	bne.n	800e89c <_ZN3USB17DefaultAddressingEhhb+0x38>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e898:	23d6      	movs	r3, #214	; 0xd6
 800e89a:	e03a      	b.n	800e912 <_ZN3USB17DefaultAddressingEhhb+0xae>

        if(!p0->epinfo)
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <_ZN3USB17DefaultAddressingEhhb+0x44>
                return USB_ERROR_EPINFO_IS_NULL;
 800e8a4:	23d7      	movs	r3, #215	; 0xd7
 800e8a6:	e034      	b.n	800e912 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p0->lowspeed = (lowspeed) ? true : false;
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	787a      	ldrb	r2, [r7, #1]
 800e8ac:	719a      	strb	r2, [r3, #6]

        // Allocate new address according to device class
        uint8_t bAddress = addrPool.AllocAddress(parent, false, port);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	78bb      	ldrb	r3, [r7, #2]
 800e8b2:	78f9      	ldrb	r1, [r7, #3]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f000 fc67 	bl	800f188 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	73fb      	strb	r3, [r7, #15]

        if(!bAddress)
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d101      	bne.n	800e8c8 <_ZN3USB17DefaultAddressingEhhb+0x64>
                return USB_ERROR_OUT_OF_ADDRESS_SPACE_IN_POOL;
 800e8c4:	23d4      	movs	r3, #212	; 0xd4
 800e8c6:	e024      	b.n	800e912 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p = addrPool.GetUsbDevicePtr(bAddress);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	7bfa      	ldrb	r2, [r7, #15]
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f000 fba6 	bl	800f020 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>
 800e8d4:	6138      	str	r0, [r7, #16]

        if(!p)
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <_ZN3USB17DefaultAddressingEhhb+0x7c>
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800e8dc:	23d6      	movs	r3, #214	; 0xd6
 800e8de:	e018      	b.n	800e912 <_ZN3USB17DefaultAddressingEhhb+0xae>

        p->lowspeed = lowspeed;
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	787a      	ldrb	r2, [r7, #1]
 800e8e4:	719a      	strb	r2, [r3, #6]

        // Assign new address to the device
        rcode = setAddr(0, 0, bAddress);
 800e8e6:	7bfb      	ldrb	r3, [r7, #15]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 fae9 	bl	800eec4 <_ZN3USB7setAddrEhhh>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	73bb      	strb	r3, [r7, #14]

        if(rcode) {
 800e8f6:	7bbb      	ldrb	r3, [r7, #14]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d009      	beq.n	800e910 <_ZN3USB17DefaultAddressingEhhb+0xac>
                addrPool.FreeAddress(bAddress);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	7bfa      	ldrb	r2, [r7, #15]
 800e900:	4611      	mov	r1, r2
 800e902:	4618      	mov	r0, r3
 800e904:	f000 fcd8 	bl	800f2b8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>
                bAddress = 0;
 800e908:	2300      	movs	r3, #0
 800e90a:	73fb      	strb	r3, [r7, #15]
                return rcode;
 800e90c:	7bbb      	ldrb	r3, [r7, #14]
 800e90e:	e000      	b.n	800e912 <_ZN3USB17DefaultAddressingEhhb+0xae>
        }
        return 0;
 800e910:	2300      	movs	r3, #0
};
 800e912:	4618      	mov	r0, r3
 800e914:	3718      	adds	r7, #24
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
	...

0800e91c <_ZN3USB13AttemptConfigEhhhb>:

uint8_t USB::AttemptConfig(uint8_t driver, uint8_t parent, uint8_t port, bool lowspeed) {
 800e91c:	b590      	push	{r4, r7, lr}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	4608      	mov	r0, r1
 800e926:	4611      	mov	r1, r2
 800e928:	461a      	mov	r2, r3
 800e92a:	4603      	mov	r3, r0
 800e92c:	70fb      	strb	r3, [r7, #3]
 800e92e:	460b      	mov	r3, r1
 800e930:	70bb      	strb	r3, [r7, #2]
 800e932:	4613      	mov	r3, r2
 800e934:	707b      	strb	r3, [r7, #1]
        //printf("AttemptConfig: parent = %i, port = %i\r\n", parent, port);
        uint8_t retries = 0;
 800e936:	2300      	movs	r3, #0
 800e938:	73fb      	strb	r3, [r7, #15]

again:
        uint8_t rcode = devConfig[driver]->ConfigureDevice(parent, port, lowspeed);
 800e93a:	78fa      	ldrb	r2, [r7, #3]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	321e      	adds	r2, #30
 800e940:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e944:	78fa      	ldrb	r2, [r7, #3]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	321e      	adds	r2, #30
 800e94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3304      	adds	r3, #4
 800e952:	681c      	ldr	r4, [r3, #0]
 800e954:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e958:	787a      	ldrb	r2, [r7, #1]
 800e95a:	78b9      	ldrb	r1, [r7, #2]
 800e95c:	47a0      	blx	r4
 800e95e:	4603      	mov	r3, r0
 800e960:	73bb      	strb	r3, [r7, #14]
        if(rcode == USB_ERROR_CONFIG_REQUIRES_ADDITIONAL_RESET) {
 800e962:	7bbb      	ldrb	r3, [r7, #14]
 800e964:	2be0      	cmp	r3, #224	; 0xe0
 800e966:	d11c      	bne.n	800e9a2 <_ZN3USB13AttemptConfigEhhhb+0x86>
                if(parent == 0) {
 800e968:	78bb      	ldrb	r3, [r7, #2]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d108      	bne.n	800e980 <_ZN3USB13AttemptConfigEhhhb+0x64>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800e96e:	2201      	movs	r2, #1
 800e970:	21e8      	movs	r1, #232	; 0xe8
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7f2 fda6 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800e978:	4835      	ldr	r0, [pc, #212]	; (800ea50 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800e97a:	f7f3 f8c1 	bl	8001b00 <HAL_Delay>
 800e97e:	e022      	b.n	800e9c6 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800e980:	78ba      	ldrb	r2, [r7, #2]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	321e      	adds	r2, #30
 800e986:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e98a:	78ba      	ldrb	r2, [r7, #2]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	321e      	adds	r2, #30
 800e990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	3314      	adds	r3, #20
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	787a      	ldrb	r2, [r7, #1]
 800e99c:	4611      	mov	r1, r2
 800e99e:	4798      	blx	r3
 800e9a0:	e011      	b.n	800e9c6 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                }
        } else if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e9a2:	7bbb      	ldrb	r3, [r7, #14]
 800e9a4:	2b0d      	cmp	r3, #13
 800e9a6:	d109      	bne.n	800e9bc <_ZN3USB13AttemptConfigEhhhb+0xa0>
 800e9a8:	7bfb      	ldrb	r3, [r7, #15]
 800e9aa:	2b02      	cmp	r3, #2
 800e9ac:	d806      	bhi.n	800e9bc <_ZN3USB13AttemptConfigEhhhb+0xa0>
                delay(100);
 800e9ae:	4829      	ldr	r0, [pc, #164]	; (800ea54 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e9b0:	f7f3 f8a6 	bl	8001b00 <HAL_Delay>
                retries++;
 800e9b4:	7bfb      	ldrb	r3, [r7, #15]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	73fb      	strb	r3, [r7, #15]
                goto again;
 800e9ba:	e7be      	b.n	800e93a <_ZN3USB13AttemptConfigEhhhb+0x1e>
        } else if(rcode)
 800e9bc:	7bbb      	ldrb	r3, [r7, #14]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <_ZN3USB13AttemptConfigEhhhb+0xaa>
                return rcode;
 800e9c2:	7bbb      	ldrb	r3, [r7, #14]
 800e9c4:	e03f      	b.n	800ea46 <_ZN3USB13AttemptConfigEhhhb+0x12a>

        rcode = devConfig[driver]->Init(parent, port, lowspeed);
 800e9c6:	78fa      	ldrb	r2, [r7, #3]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	321e      	adds	r2, #30
 800e9cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e9d0:	78fa      	ldrb	r2, [r7, #3]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	321e      	adds	r2, #30
 800e9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	681c      	ldr	r4, [r3, #0]
 800e9de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9e2:	787a      	ldrb	r2, [r7, #1]
 800e9e4:	78b9      	ldrb	r1, [r7, #2]
 800e9e6:	47a0      	blx	r4
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73bb      	strb	r3, [r7, #14]
        if(rcode == hrJERR && retries < 3) { // Some devices returns this when plugged in - trying to initialize the device again usually works
 800e9ec:	7bbb      	ldrb	r3, [r7, #14]
 800e9ee:	2b0d      	cmp	r3, #13
 800e9f0:	d109      	bne.n	800ea06 <_ZN3USB13AttemptConfigEhhhb+0xea>
 800e9f2:	7bfb      	ldrb	r3, [r7, #15]
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d806      	bhi.n	800ea06 <_ZN3USB13AttemptConfigEhhhb+0xea>
                delay(100);
 800e9f8:	4816      	ldr	r0, [pc, #88]	; (800ea54 <_ZN3USB13AttemptConfigEhhhb+0x138>)
 800e9fa:	f7f3 f881 	bl	8001b00 <HAL_Delay>
                retries++;
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ea00:	3301      	adds	r3, #1
 800ea02:	73fb      	strb	r3, [r7, #15]
                goto again;
 800ea04:	e799      	b.n	800e93a <_ZN3USB13AttemptConfigEhhhb+0x1e>
        }
        if(rcode) {
 800ea06:	7bbb      	ldrb	r3, [r7, #14]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d01b      	beq.n	800ea44 <_ZN3USB13AttemptConfigEhhhb+0x128>
                // Issue a bus reset, because the device may be in a limbo state
                if(parent == 0) {
 800ea0c:	78bb      	ldrb	r3, [r7, #2]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d108      	bne.n	800ea24 <_ZN3USB13AttemptConfigEhhhb+0x108>
                        // Send a bus reset on the root interface.
                        regWr(rHCTL, bmBUSRST); //issue bus reset
 800ea12:	2201      	movs	r2, #1
 800ea14:	21e8      	movs	r1, #232	; 0xe8
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7f2 fd54 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
                        delay(102); // delay 102ms, compensate for clock inaccuracy.
 800ea1c:	480c      	ldr	r0, [pc, #48]	; (800ea50 <_ZN3USB13AttemptConfigEhhhb+0x134>)
 800ea1e:	f7f3 f86f 	bl	8001b00 <HAL_Delay>
 800ea22:	e00f      	b.n	800ea44 <_ZN3USB13AttemptConfigEhhhb+0x128>
                } else {
                        // reset parent port
                        devConfig[parent]->ResetHubPort(port);
 800ea24:	78ba      	ldrb	r2, [r7, #2]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	321e      	adds	r2, #30
 800ea2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ea2e:	78ba      	ldrb	r2, [r7, #2]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	321e      	adds	r2, #30
 800ea34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	3314      	adds	r3, #20
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	787a      	ldrb	r2, [r7, #1]
 800ea40:	4611      	mov	r1, r2
 800ea42:	4798      	blx	r3
                }
        }
        return rcode;
 800ea44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd90      	pop	{r4, r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	00018e70 	.word	0x00018e70
 800ea54:	000186a0 	.word	0x000186a0

0800ea58 <_ZN3USB11ConfiguringEhhb>:
 * 7: for(each driver) {
 *      7a: Ask device if it knows this VID/PID. Acts exactly like 6a, but using VID/PID
 * 8: if we get here, no driver likes the device plugged in, so exit failure.
 *
 */
uint8_t USB::Configuring(uint8_t parent, uint8_t port, bool lowspeed) {
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b090      	sub	sp, #64	; 0x40
 800ea5c:	af02      	add	r7, sp, #8
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	4608      	mov	r0, r1
 800ea62:	4611      	mov	r1, r2
 800ea64:	461a      	mov	r2, r3
 800ea66:	4603      	mov	r3, r0
 800ea68:	70fb      	strb	r3, [r7, #3]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	70bb      	strb	r3, [r7, #2]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	707b      	strb	r3, [r7, #1]
        //uint8_t bAddress = 0;
        //printf("Configuring: parent = %i, port = %i\r\n", parent, port);
        uint8_t devConfigIndex;
        uint8_t rcode = 0;
 800ea72:	2300      	movs	r3, #0
 800ea74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        uint8_t buf[sizeof (USB_DEVICE_DESCRIPTOR)];
        USB_DEVICE_DESCRIPTOR *udd = reinterpret_cast<USB_DEVICE_DESCRIPTOR *>(buf);
 800ea78:	f107 030c 	add.w	r3, r7, #12
 800ea7c:	633b      	str	r3, [r7, #48]	; 0x30
        UsbDevice *p = NULL;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	62fb      	str	r3, [r7, #44]	; 0x2c
        EpInfo *oldep_ptr = NULL;
 800ea82:	2300      	movs	r3, #0
 800ea84:	62bb      	str	r3, [r7, #40]	; 0x28
        EpInfo epInfo;

        epInfo.epAddr = 0;
 800ea86:	2300      	movs	r3, #0
 800ea88:	723b      	strb	r3, [r7, #8]
        epInfo.maxPktSize = 8;
 800ea8a:	2308      	movs	r3, #8
 800ea8c:	727b      	strb	r3, [r7, #9]
        epInfo.bmSndToggle = 0;
 800ea8e:	7abb      	ldrb	r3, [r7, #10]
 800ea90:	f36f 0300 	bfc	r3, #0, #1
 800ea94:	72bb      	strb	r3, [r7, #10]
        epInfo.bmRcvToggle = 0;
 800ea96:	7abb      	ldrb	r3, [r7, #10]
 800ea98:	f36f 0341 	bfc	r3, #1, #1
 800ea9c:	72bb      	strb	r3, [r7, #10]
        epInfo.bmNakPower = USB_NAK_MAX_POWER;
 800ea9e:	7abb      	ldrb	r3, [r7, #10]
 800eaa0:	220f      	movs	r2, #15
 800eaa2:	f362 0387 	bfi	r3, r2, #2, #6
 800eaa6:	72bb      	strb	r3, [r7, #10]

        //delay(2000);
        AddressPool &addrPool = GetAddressPool();
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7fa fcbb 	bl	8009424 <_ZN3USB14GetAddressPoolEv>
 800eaae:	6278      	str	r0, [r7, #36]	; 0x24
        // Get pointer to pseudo device with address 0 assigned
        p = addrPool.GetUsbDevicePtr(0);
 800eab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2100      	movs	r1, #0
 800eab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaba:	4798      	blx	r3
 800eabc:	62f8      	str	r0, [r7, #44]	; 0x2c
        if(!p) {
 800eabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d101      	bne.n	800eac8 <_ZN3USB11ConfiguringEhhb+0x70>
                //printf("Configuring error: USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL\r\n");
                return USB_ERROR_ADDRESS_NOT_FOUND_IN_POOL;
 800eac4:	23d6      	movs	r3, #214	; 0xd6
 800eac6:	e15c      	b.n	800ed82 <_ZN3USB11ConfiguringEhhb+0x32a>
        }

        // Save old pointer to EP_RECORD of address 0
        oldep_ptr = p->epinfo;
 800eac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	62bb      	str	r3, [r7, #40]	; 0x28

        // Temporary assign new pointer to epInfo to p->epinfo in order to
        // avoid toggle inconsistence

        p->epinfo = &epInfo;
 800eace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead0:	f107 0208 	add.w	r2, r7, #8
 800ead4:	601a      	str	r2, [r3, #0]

        p->lowspeed = lowspeed;
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	787a      	ldrb	r2, [r7, #1]
 800eada:	719a      	strb	r2, [r3, #6]
        // Get device descriptor
        rcode = getDevDescr(0, 0, sizeof (USB_DEVICE_DESCRIPTOR), (uint8_t*)buf);
 800eadc:	f107 030c 	add.w	r3, r7, #12
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	2312      	movs	r3, #18
 800eae4:	2200      	movs	r2, #0
 800eae6:	2100      	movs	r1, #0
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 f94e 	bl	800ed8a <_ZN3USB11getDevDescrEhhtPh>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        // Restore p->epinfo
        p->epinfo = oldep_ptr;
 800eaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf8:	601a      	str	r2, [r3, #0]

        if(rcode) {
 800eafa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d002      	beq.n	800eb08 <_ZN3USB11ConfiguringEhhb+0xb0>
                //printf("Configuring error: Can't get USB_DEVICE_DESCRIPTOR\r\n");
                return rcode;
 800eb02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800eb06:	e13c      	b.n	800ed82 <_ZN3USB11ConfiguringEhhb+0x32a>

        // to-do?
        // Allocate new address according to device class
        //bAddress = addrPool.AllocAddress(parent, false, port);

        uint16_t vid = udd->idVendor;
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	7a1a      	ldrb	r2, [r3, #8]
 800eb0c:	7a5b      	ldrb	r3, [r3, #9]
 800eb0e:	021b      	lsls	r3, r3, #8
 800eb10:	4313      	orrs	r3, r2
 800eb12:	847b      	strh	r3, [r7, #34]	; 0x22
        uint16_t pid = udd->idProduct;
 800eb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb16:	7a9a      	ldrb	r2, [r3, #10]
 800eb18:	7adb      	ldrb	r3, [r3, #11]
 800eb1a:	021b      	lsls	r3, r3, #8
 800eb1c:	4313      	orrs	r3, r2
 800eb1e:	843b      	strh	r3, [r7, #32]
        uint8_t klass = udd->bDeviceClass;
 800eb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb22:	791b      	ldrb	r3, [r3, #4]
 800eb24:	77fb      	strb	r3, [r7, #31]
        uint8_t subklass = udd->bDeviceSubClass;
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	795b      	ldrb	r3, [r3, #5]
 800eb2a:	77bb      	strb	r3, [r7, #30]
        // Qualify with subclass too.
        //
        // VID/PID & class tests default to false for drivers not yet ported
        // subclass defaults to true, so you don't have to define it if you don't have to.
        //
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eb32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb36:	2b0f      	cmp	r3, #15
 800eb38:	f200 8081 	bhi.w	800ec3e <_ZN3USB11ConfiguringEhhb+0x1e6>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800eb3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	321e      	adds	r2, #30
 800eb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d06e      	beq.n	800ec2a <_ZN3USB11ConfiguringEhhb+0x1d2>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800eb4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	321e      	adds	r2, #30
 800eb54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	321e      	adds	r2, #30
 800eb60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	3310      	adds	r3, #16
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4608      	mov	r0, r1
 800eb6c:	4798      	blx	r3
 800eb6e:	4603      	mov	r3, r0
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	bf14      	ite	ne
 800eb74:	2301      	movne	r3, #1
 800eb76:	2300      	moveq	r3, #0
 800eb78:	b2db      	uxtb	r3, r3
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d157      	bne.n	800ec2e <_ZN3USB11ConfiguringEhhb+0x1d6>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) {
 800eb7e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	321e      	adds	r2, #30
 800eb86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eb8a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	321e      	adds	r2, #30
 800eb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	3320      	adds	r3, #32
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	7fba      	ldrb	r2, [r7, #30]
 800eb9e:	4611      	mov	r1, r2
 800eba0:	4798      	blx	r3
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d02b      	beq.n	800ec00 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800eba8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	321e      	adds	r2, #30
 800ebb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ebb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	321e      	adds	r2, #30
 800ebbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	3318      	adds	r3, #24
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	8c3a      	ldrh	r2, [r7, #32]
 800ebc8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ebca:	4798      	blx	r3
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d114      	bne.n	800ebfc <_ZN3USB11ConfiguringEhhb+0x1a4>
 800ebd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	321e      	adds	r2, #30
 800ebda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ebde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	321e      	adds	r2, #30
 800ebe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	331c      	adds	r3, #28
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	7ffa      	ldrb	r2, [r7, #31]
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	4798      	blx	r3
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <_ZN3USB11ConfiguringEhhb+0x1a8>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e000      	b.n	800ec02 <_ZN3USB11ConfiguringEhhb+0x1aa>
 800ec00:	2300      	movs	r3, #0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d014      	beq.n	800ec30 <_ZN3USB11ConfiguringEhhb+0x1d8>
                        rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ec06:	78b8      	ldrb	r0, [r7, #2]
 800ec08:	78fa      	ldrb	r2, [r7, #3]
 800ec0a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ec0e:	787b      	ldrb	r3, [r7, #1]
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	4603      	mov	r3, r0
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7ff fe81 	bl	800e91c <_ZN3USB13AttemptConfigEhhhb>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
                        if(rcode != USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED)
 800ec20:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec24:	2bd1      	cmp	r3, #209	; 0xd1
 800ec26:	d109      	bne.n	800ec3c <_ZN3USB11ConfiguringEhhb+0x1e4>
 800ec28:	e002      	b.n	800ec30 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(!devConfig[devConfigIndex]) continue; // no driver
 800ec2a:	bf00      	nop
 800ec2c:	e000      	b.n	800ec30 <_ZN3USB11ConfiguringEhhb+0x1d8>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ec2e:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ec30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec34:	3301      	adds	r3, #1
 800ec36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec3a:	e77a      	b.n	800eb32 <_ZN3USB11ConfiguringEhhb+0xda>
                                break;
 800ec3c:	bf00      	nop
                }
        }

        if(devConfigIndex < USB_NUMDEVICES) {
 800ec3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec42:	2b0f      	cmp	r3, #15
 800ec44:	d802      	bhi.n	800ec4c <_ZN3USB11ConfiguringEhhb+0x1f4>
                return rcode;
 800ec46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ec4a:	e09a      	b.n	800ed82 <_ZN3USB11ConfiguringEhhb+0x32a>
        }


        // blindly attempt to configure
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ec52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ec56:	2b0f      	cmp	r3, #15
 800ec58:	f200 8088 	bhi.w	800ed6c <_ZN3USB11ConfiguringEhhb+0x314>
                if(!devConfig[devConfigIndex]) continue;
 800ec5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	321e      	adds	r2, #30
 800ec64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d074      	beq.n	800ed56 <_ZN3USB11ConfiguringEhhb+0x2fe>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ec6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	321e      	adds	r2, #30
 800ec74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	321e      	adds	r2, #30
 800ec80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	3310      	adds	r3, #16
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	4798      	blx	r3
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	bf14      	ite	ne
 800ec94:	2301      	movne	r3, #1
 800ec96:	2300      	moveq	r3, #0
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d15d      	bne.n	800ed5a <_ZN3USB11ConfiguringEhhb+0x302>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ec9e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	321e      	adds	r2, #30
 800eca6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecaa:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	321e      	adds	r2, #30
 800ecb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3320      	adds	r3, #32
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	7fba      	ldrb	r2, [r7, #30]
 800ecbe:	4611      	mov	r1, r2
 800ecc0:	4798      	blx	r3
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d02b      	beq.n	800ed20 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ecc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	321e      	adds	r2, #30
 800ecd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecd4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	321e      	adds	r2, #30
 800ecdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	3318      	adds	r3, #24
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	8c3a      	ldrh	r2, [r7, #32]
 800ece8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800ecea:	4798      	blx	r3
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d114      	bne.n	800ed1c <_ZN3USB11ConfiguringEhhb+0x2c4>
 800ecf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	321e      	adds	r2, #30
 800ecfa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	321e      	adds	r2, #30
 800ed06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	331c      	adds	r3, #28
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	7ffa      	ldrb	r2, [r7, #31]
 800ed12:	4611      	mov	r1, r2
 800ed14:	4798      	blx	r3
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d001      	beq.n	800ed20 <_ZN3USB11ConfiguringEhhb+0x2c8>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e000      	b.n	800ed22 <_ZN3USB11ConfiguringEhhb+0x2ca>
 800ed20:	2300      	movs	r3, #0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d11b      	bne.n	800ed5e <_ZN3USB11ConfiguringEhhb+0x306>
                rcode = AttemptConfig(devConfigIndex, parent, port, lowspeed);
 800ed26:	78b8      	ldrb	r0, [r7, #2]
 800ed28:	78fa      	ldrb	r2, [r7, #3]
 800ed2a:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800ed2e:	787b      	ldrb	r3, [r7, #1]
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	4603      	mov	r3, r0
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f7ff fdf1 	bl	800e91c <_ZN3USB13AttemptConfigEhhhb>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                //printf("ERROR ENUMERATING %2.2x\r\n", rcode);
                if(!(rcode == USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED || rcode == USB_ERROR_CLASS_INSTANCE_ALREADY_IN_USE)) {
 800ed40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed44:	2bd1      	cmp	r3, #209	; 0xd1
 800ed46:	d00b      	beq.n	800ed60 <_ZN3USB11ConfiguringEhhb+0x308>
 800ed48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed4c:	2bd9      	cmp	r3, #217	; 0xd9
 800ed4e:	d007      	beq.n	800ed60 <_ZN3USB11ConfiguringEhhb+0x308>
                        // in case of an error dev_index should be reset to 0
                        //                in order to start from the very beginning the
                        //                next time the program gets here
                        //if (rcode != USB_DEV_CONFIG_ERROR_DEVICE_INIT_INCOMPLETE)
                        //        devConfigIndex = 0;
                        return rcode;
 800ed50:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ed54:	e015      	b.n	800ed82 <_ZN3USB11ConfiguringEhhb+0x32a>
                if(!devConfig[devConfigIndex]) continue;
 800ed56:	bf00      	nop
 800ed58:	e002      	b.n	800ed60 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->GetAddress()) continue; // consumed
 800ed5a:	bf00      	nop
 800ed5c:	e000      	b.n	800ed60 <_ZN3USB11ConfiguringEhhb+0x308>
                if(devConfig[devConfigIndex]->DEVSUBCLASSOK(subklass) && (devConfig[devConfigIndex]->VIDPIDOK(vid, pid) || devConfig[devConfigIndex]->DEVCLASSOK(klass))) continue; // If this is true it means it must have returned USB_DEV_CONFIG_ERROR_DEVICE_NOT_SUPPORTED above
 800ed5e:	bf00      	nop
        for(devConfigIndex = 0; devConfigIndex < USB_NUMDEVICES; devConfigIndex++) {
 800ed60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed64:	3301      	adds	r3, #1
 800ed66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed6a:	e772      	b.n	800ec52 <_ZN3USB11ConfiguringEhhb+0x1fa>
                }
        }
        // if we get here that means that the device class is not supported by any of registered classes
        rcode = DefaultAddressing(parent, port, lowspeed);
 800ed6c:	787b      	ldrb	r3, [r7, #1]
 800ed6e:	78ba      	ldrb	r2, [r7, #2]
 800ed70:	78f9      	ldrb	r1, [r7, #3]
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7ff fd76 	bl	800e864 <_ZN3USB17DefaultAddressingEhhb>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

        return rcode;
 800ed7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3738      	adds	r7, #56	; 0x38
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <_ZN3USB11getDevDescrEhhtPh>:
}

#if 1 //!defined(USB_METHODS_INLINE)
//get device descriptor

uint8_t USB::getDevDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t* dataptr) {
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b08a      	sub	sp, #40	; 0x28
 800ed8e:	af08      	add	r7, sp, #32
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	4608      	mov	r0, r1
 800ed94:	4611      	mov	r1, r2
 800ed96:	461a      	mov	r2, r3
 800ed98:	4603      	mov	r3, r0
 800ed9a:	70fb      	strb	r3, [r7, #3]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70bb      	strb	r3, [r7, #2]
 800eda0:	4613      	mov	r3, r2
 800eda2:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, 0x00, USB_DESCRIPTOR_DEVICE, 0x0000, nbytes, nbytes, dataptr, NULL));
 800eda4:	78ba      	ldrb	r2, [r7, #2]
 800eda6:	78f9      	ldrb	r1, [r7, #3]
 800eda8:	2300      	movs	r3, #0
 800edaa:	9307      	str	r3, [sp, #28]
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	9306      	str	r3, [sp, #24]
 800edb0:	883b      	ldrh	r3, [r7, #0]
 800edb2:	9305      	str	r3, [sp, #20]
 800edb4:	883b      	ldrh	r3, [r7, #0]
 800edb6:	9304      	str	r3, [sp, #16]
 800edb8:	2300      	movs	r3, #0
 800edba:	9303      	str	r3, [sp, #12]
 800edbc:	2301      	movs	r3, #1
 800edbe:	9302      	str	r3, [sp, #8]
 800edc0:	2300      	movs	r3, #0
 800edc2:	9301      	str	r3, [sp, #4]
 800edc4:	2306      	movs	r3, #6
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	2380      	movs	r3, #128	; 0x80
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7fe ffc7 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800edd0:	4603      	mov	r3, r0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <_ZN3USB12getConfDescrEhhthPh>:
//get configuration descriptor

uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint16_t nbytes, uint8_t conf, uint8_t* dataptr) {
 800edda:	b580      	push	{r7, lr}
 800eddc:	b08a      	sub	sp, #40	; 0x28
 800edde:	af08      	add	r7, sp, #32
 800ede0:	6078      	str	r0, [r7, #4]
 800ede2:	4608      	mov	r0, r1
 800ede4:	4611      	mov	r1, r2
 800ede6:	461a      	mov	r2, r3
 800ede8:	4603      	mov	r3, r0
 800edea:	70fb      	strb	r3, [r7, #3]
 800edec:	460b      	mov	r3, r1
 800edee:	70bb      	strb	r3, [r7, #2]
 800edf0:	4613      	mov	r3, r2
 800edf2:	803b      	strh	r3, [r7, #0]
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, nbytes, nbytes, dataptr, NULL));
 800edf4:	78ba      	ldrb	r2, [r7, #2]
 800edf6:	78f9      	ldrb	r1, [r7, #3]
 800edf8:	2300      	movs	r3, #0
 800edfa:	9307      	str	r3, [sp, #28]
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	9306      	str	r3, [sp, #24]
 800ee00:	883b      	ldrh	r3, [r7, #0]
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	883b      	ldrh	r3, [r7, #0]
 800ee06:	9304      	str	r3, [sp, #16]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	9303      	str	r3, [sp, #12]
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	9302      	str	r3, [sp, #8]
 800ee10:	7c3b      	ldrb	r3, [r7, #16]
 800ee12:	9301      	str	r3, [sp, #4]
 800ee14:	2306      	movs	r3, #6
 800ee16:	9300      	str	r3, [sp, #0]
 800ee18:	2380      	movs	r3, #128	; 0x80
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7fe ff9f 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ee20:	4603      	mov	r3, r0
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3708      	adds	r7, #8
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <_ZN3USB12getConfDescrEhhhP13USBReadParser>:

/* Requests Configuration Descriptor. Sends two Get Conf Descr requests. The first one gets the total length of all descriptors, then the second one requests this
 total length. The length of the first request can be shorter ( 4 bytes ), however, there are devices which won't work unless this length is set to 9 */
uint8_t USB::getConfDescr(uint8_t addr, uint8_t ep, uint8_t conf, USBReadParser *p) {
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b09e      	sub	sp, #120	; 0x78
 800ee2e:	af08      	add	r7, sp, #32
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	4608      	mov	r0, r1
 800ee34:	4611      	mov	r1, r2
 800ee36:	461a      	mov	r2, r3
 800ee38:	4603      	mov	r3, r0
 800ee3a:	70fb      	strb	r3, [r7, #3]
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	70bb      	strb	r3, [r7, #2]
 800ee40:	4613      	mov	r3, r2
 800ee42:	707b      	strb	r3, [r7, #1]
        const uint8_t bufSize = 64;
 800ee44:	2340      	movs	r3, #64	; 0x40
 800ee46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        uint8_t buf[bufSize];
        USB_CONFIGURATION_DESCRIPTOR *ucd = reinterpret_cast<USB_CONFIGURATION_DESCRIPTOR *>(buf);
 800ee4a:	f107 030c 	add.w	r3, r7, #12
 800ee4e:	653b      	str	r3, [r7, #80]	; 0x50

        uint8_t ret = getConfDescr(addr, ep, 9, conf, buf);
 800ee50:	78ba      	ldrb	r2, [r7, #2]
 800ee52:	78f9      	ldrb	r1, [r7, #3]
 800ee54:	f107 030c 	add.w	r3, r7, #12
 800ee58:	9301      	str	r3, [sp, #4]
 800ee5a:	787b      	ldrb	r3, [r7, #1]
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	2309      	movs	r3, #9
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff ffba 	bl	800edda <_ZN3USB12getConfDescrEhhthPh>
 800ee66:	4603      	mov	r3, r0
 800ee68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        if(ret)
 800ee6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d002      	beq.n	800ee7a <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x50>
                return ret;
 800ee74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ee78:	e020      	b.n	800eebc <_ZN3USB12getConfDescrEhhhP13USBReadParser+0x92>

        uint16_t total = ucd->wTotalLength;
 800ee7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee7c:	789a      	ldrb	r2, [r3, #2]
 800ee7e:	78db      	ldrb	r3, [r3, #3]
 800ee80:	021b      	lsls	r3, r3, #8
 800ee82:	4313      	orrs	r3, r2
 800ee84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        //USBTRACE2("\r\ntotal conf.size:", total);

        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, conf, USB_DESCRIPTOR_CONFIGURATION, 0x0000, total, bufSize, buf, p));
 800ee88:	78ba      	ldrb	r2, [r7, #2]
 800ee8a:	78f9      	ldrb	r1, [r7, #3]
 800ee8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee8e:	9307      	str	r3, [sp, #28]
 800ee90:	f107 030c 	add.w	r3, r7, #12
 800ee94:	9306      	str	r3, [sp, #24]
 800ee96:	2340      	movs	r3, #64	; 0x40
 800ee98:	9305      	str	r3, [sp, #20]
 800ee9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ee9e:	9304      	str	r3, [sp, #16]
 800eea0:	2300      	movs	r3, #0
 800eea2:	9303      	str	r3, [sp, #12]
 800eea4:	2302      	movs	r3, #2
 800eea6:	9302      	str	r3, [sp, #8]
 800eea8:	787b      	ldrb	r3, [r7, #1]
 800eeaa:	9301      	str	r3, [sp, #4]
 800eeac:	2306      	movs	r3, #6
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	2380      	movs	r3, #128	; 0x80
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7fe ff53 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	bf00      	nop
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3758      	adds	r7, #88	; 0x58
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <_ZN3USB7setAddrEhhh>:
uint8_t USB::getStrDescr(uint8_t addr, uint8_t ep, uint16_t ns, uint8_t index, uint16_t langid, uint8_t* dataptr) {
        return ( ctrlReq(addr, ep, bmREQ_GET_DESCR, USB_REQUEST_GET_DESCRIPTOR, index, USB_DESCRIPTOR_STRING, langid, ns, ns, dataptr, NULL));
}
//set address

uint8_t USB::setAddr(uint8_t oldaddr, uint8_t ep, uint8_t newaddr) {
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08c      	sub	sp, #48	; 0x30
 800eec8:	af08      	add	r7, sp, #32
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	4608      	mov	r0, r1
 800eece:	4611      	mov	r1, r2
 800eed0:	461a      	mov	r2, r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	70fb      	strb	r3, [r7, #3]
 800eed6:	460b      	mov	r3, r1
 800eed8:	70bb      	strb	r3, [r7, #2]
 800eeda:	4613      	mov	r3, r2
 800eedc:	707b      	strb	r3, [r7, #1]
        uint8_t rcode = ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL);
 800eede:	78ba      	ldrb	r2, [r7, #2]
 800eee0:	78f9      	ldrb	r1, [r7, #3]
 800eee2:	2300      	movs	r3, #0
 800eee4:	9307      	str	r3, [sp, #28]
 800eee6:	2300      	movs	r3, #0
 800eee8:	9306      	str	r3, [sp, #24]
 800eeea:	2300      	movs	r3, #0
 800eeec:	9305      	str	r3, [sp, #20]
 800eeee:	2300      	movs	r3, #0
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	2300      	movs	r3, #0
 800eef4:	9303      	str	r3, [sp, #12]
 800eef6:	2300      	movs	r3, #0
 800eef8:	9302      	str	r3, [sp, #8]
 800eefa:	787b      	ldrb	r3, [r7, #1]
 800eefc:	9301      	str	r3, [sp, #4]
 800eefe:	2305      	movs	r3, #5
 800ef00:	9300      	str	r3, [sp, #0]
 800ef02:	2300      	movs	r3, #0
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f7fe ff2a 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	73fb      	strb	r3, [r7, #15]
        //delay(2); //per USB 2.0 sect.9.2.6.3
        delay(300); // Older spec says you should wait at least 200ms
 800ef0e:	4804      	ldr	r0, [pc, #16]	; (800ef20 <_ZN3USB7setAddrEhhh+0x5c>)
 800ef10:	f7f2 fdf6 	bl	8001b00 <HAL_Delay>
        return rcode;
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
        //return ( ctrlReq(oldaddr, ep, bmREQ_SET, USB_REQUEST_SET_ADDRESS, newaddr, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	000493e0 	.word	0x000493e0

0800ef24 <_ZN3USB7setConfEhhh>:
//set configuration

uint8_t USB::setConf(uint8_t addr, uint8_t ep, uint8_t conf_value) {
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b08a      	sub	sp, #40	; 0x28
 800ef28:	af08      	add	r7, sp, #32
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	4608      	mov	r0, r1
 800ef2e:	4611      	mov	r1, r2
 800ef30:	461a      	mov	r2, r3
 800ef32:	4603      	mov	r3, r0
 800ef34:	70fb      	strb	r3, [r7, #3]
 800ef36:	460b      	mov	r3, r1
 800ef38:	70bb      	strb	r3, [r7, #2]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	707b      	strb	r3, [r7, #1]
        return ( ctrlReq(addr, ep, bmREQ_SET, USB_REQUEST_SET_CONFIGURATION, conf_value, 0x00, 0x0000, 0x0000, 0x0000, NULL, NULL));
 800ef3e:	78ba      	ldrb	r2, [r7, #2]
 800ef40:	78f9      	ldrb	r1, [r7, #3]
 800ef42:	2300      	movs	r3, #0
 800ef44:	9307      	str	r3, [sp, #28]
 800ef46:	2300      	movs	r3, #0
 800ef48:	9306      	str	r3, [sp, #24]
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	9305      	str	r3, [sp, #20]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	9304      	str	r3, [sp, #16]
 800ef52:	2300      	movs	r3, #0
 800ef54:	9303      	str	r3, [sp, #12]
 800ef56:	2300      	movs	r3, #0
 800ef58:	9302      	str	r3, [sp, #8]
 800ef5a:	787b      	ldrb	r3, [r7, #1]
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	2309      	movs	r3, #9
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	2300      	movs	r3, #0
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7fe fefa 	bl	800dd5e <_ZN3USB7ctrlReqEhhhhhhtttPhP13USBReadParser>
 800ef6a:	4603      	mov	r3, r0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <_ZN8MAX3421eI3P102P9EC1Ev>:
MAX3421e< SPI_SS, INTR >::MAX3421e() {
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
};
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	370c      	adds	r7, #12
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
	...

0800ef8c <_ZN11AddressPoolC1Ev>:
        uint8_t epcount; // number of endpoints
        bool lowspeed; // indicates if a device is the low speed one
        //      uint8_t devclass; // device class
} __attribute__((packed));

class AddressPool {
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	4a04      	ldr	r2, [pc, #16]	; (800efa8 <_ZN11AddressPoolC1Ev+0x1c>)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	0800f9b4 	.word	0x0800f9b4

0800efac <_ZN15AddressPoolImplILh16EEC1Ev>:
                hubCounter = 0;
        };

public:

        AddressPoolImpl() : hubCounter(0) {
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff ffe8 	bl	800ef8c <_ZN11AddressPoolC1Ev>
 800efbc:	4a17      	ldr	r2, [pc, #92]	; (800f01c <_ZN15AddressPoolImplILh16EEC1Ev+0x70>)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	601a      	str	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	71da      	strb	r2, [r3, #7]
                // Zero address is reserved
                InitEntry(0);
 800efc8:	2100      	movs	r1, #0
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 f990 	bl	800f2f0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>

                thePool[0].address.devAddress = 0;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	731a      	strb	r2, [r3, #12]
                thePool[0].epinfo = &dev0ep;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	1d1a      	adds	r2, r3, #4
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	609a      	str	r2, [r3, #8]
                dev0ep.epAddr = 0;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	711a      	strb	r2, [r3, #4]
                dev0ep.maxPktSize = 8;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2208      	movs	r2, #8
 800efe8:	715a      	strb	r2, [r3, #5]
                dev0ep.bmSndToggle = 0; // Set DATA0/1 toggles to 0
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	7993      	ldrb	r3, [r2, #6]
 800efee:	f36f 0300 	bfc	r3, #0, #1
 800eff2:	7193      	strb	r3, [r2, #6]
                dev0ep.bmRcvToggle = 0;
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	7993      	ldrb	r3, [r2, #6]
 800eff8:	f36f 0341 	bfc	r3, #1, #1
 800effc:	7193      	strb	r3, [r2, #6]
                dev0ep.bmNakPower = USB_NAK_MAX_POWER;
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	7993      	ldrb	r3, [r2, #6]
 800f002:	210f      	movs	r1, #15
 800f004:	f361 0387 	bfi	r3, r1, #2, #6
 800f008:	7193      	strb	r3, [r2, #6]

                InitAllAddresses();
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f9a1 	bl	800f352 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
        };
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4618      	mov	r0, r3
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	0800f9a0 	.word	0x0800f9a0

0800f020 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh>:

        // Returns a pointer to a specified address entry

        virtual UsbDevice* GetUsbDevicePtr(uint8_t addr) {
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	460b      	mov	r3, r1
 800f02a:	70fb      	strb	r3, [r7, #3]
                if(!addr)
 800f02c:	78fb      	ldrb	r3, [r7, #3]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d102      	bne.n	800f038 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x18>
                        return thePool;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3308      	adds	r3, #8
 800f036:	e014      	b.n	800f062 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x42>

                uint8_t index = FindAddressIndex(addr);
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	4619      	mov	r1, r3
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 f9a1 	bl	800f384 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f042:	4603      	mov	r3, r0
 800f044:	73fb      	strb	r3, [r7, #15]

                return (!index) ? NULL : thePool + index;
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x3e>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f103 0108 	add.w	r1, r3, #8
 800f052:	7bfa      	ldrb	r2, [r7, #15]
 800f054:	4613      	mov	r3, r2
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	1a9b      	subs	r3, r3, r2
 800f05a:	440b      	add	r3, r1
 800f05c:	e000      	b.n	800f060 <_ZN15AddressPoolImplILh16EE15GetUsbDevicePtrEh+0x40>
 800f05e:	2300      	movs	r3, #0
 800f060:	bf00      	nop
        };
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
	...

0800f06c <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesWr(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	607b      	str	r3, [r7, #4]
 800f076:	460b      	mov	r3, r1
 800f078:	72fb      	strb	r3, [r7, #11]
 800f07a:	4613      	mov	r3, r2
 800f07c:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f07e:	f7f1 fb63 	bl	8000748 <_ZN3P105ClearEv>
        uint8_t data = reg | 0x02;
 800f082:	7afb      	ldrb	r3, [r7, #11]
 800f084:	f043 0302 	orr.w	r3, r3, #2
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	75fb      	strb	r3, [r7, #23]
        HAL_SPI_Transmit(&SPI_Handle, &data, 1, HAL_MAX_DELAY);
 800f08c:	f107 0117 	add.w	r1, r7, #23
 800f090:	f04f 33ff 	mov.w	r3, #4294967295
 800f094:	2201      	movs	r2, #1
 800f096:	480b      	ldr	r0, [pc, #44]	; (800f0c4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f098:	f7f5 fd8f 	bl	8004bba <HAL_SPI_Transmit>
        HAL_SPI_Transmit(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f09c:	7abb      	ldrb	r3, [r7, #10]
 800f09e:	b29a      	uxth	r2, r3
 800f0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	4807      	ldr	r0, [pc, #28]	; (800f0c4 <_ZN8MAX3421eI3P102P9E7bytesWrEhhPh+0x58>)
 800f0a8:	f7f5 fd87 	bl	8004bba <HAL_SPI_Transmit>
        data_p += nbytes;
 800f0ac:	7abb      	ldrb	r3, [r7, #10]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f0b4:	f7f1 fb3c 	bl	8000730 <_ZN3P103SetEv>
        return ( data_p);
 800f0b8:	687b      	ldr	r3, [r7, #4]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20000304 	.word	0x20000304

0800f0c8 <_Z10D_PrintHexIhEvT_i>:
                mask >>= 4;
        }
        prn->print((T)val, HEX);
}

template <class T> void D_PrintHex(T val __attribute__((unused)), int lvl __attribute__((unused))) {
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	6039      	str	r1, [r7, #0]
 800f0d2:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG_USB_HOST
        PrintHex<T > (val, lvl);
#endif
}
 800f0d4:	bf00      	nop
 800f0d6:	370c      	adds	r7, #12
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr

0800f0e0 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh>:
uint8_t* MAX3421e< SPI_SS, INTR >::bytesRd(uint8_t reg, uint8_t nbytes, uint8_t* data_p) {
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	607b      	str	r3, [r7, #4]
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	72fb      	strb	r3, [r7, #11]
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	72bb      	strb	r3, [r7, #10]
        SPI_SS::Clear();
 800f0f2:	f7f1 fb29 	bl	8000748 <_ZN3P105ClearEv>
        HAL_SPI_Transmit(&SPI_Handle, &reg, 1, HAL_MAX_DELAY);
 800f0f6:	f107 010b 	add.w	r1, r7, #11
 800f0fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fe:	2201      	movs	r2, #1
 800f100:	480d      	ldr	r0, [pc, #52]	; (800f138 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f102:	f7f5 fd5a 	bl	8004bba <HAL_SPI_Transmit>
        memset(data_p, 0, nbytes); // Make sure we send out empty bytes
 800f106:	7abb      	ldrb	r3, [r7, #10]
 800f108:	461a      	mov	r2, r3
 800f10a:	2100      	movs	r1, #0
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 fa91 	bl	800f634 <memset>
        HAL_SPI_Receive(&SPI_Handle, data_p, nbytes, HAL_MAX_DELAY);
 800f112:	7abb      	ldrb	r3, [r7, #10]
 800f114:	b29a      	uxth	r2, r3
 800f116:	f04f 33ff 	mov.w	r3, #4294967295
 800f11a:	6879      	ldr	r1, [r7, #4]
 800f11c:	4806      	ldr	r0, [pc, #24]	; (800f138 <_ZN8MAX3421eI3P102P9E7bytesRdEhhPh+0x58>)
 800f11e:	f7f5 fe88 	bl	8004e32 <HAL_SPI_Receive>
        data_p += nbytes;
 800f122:	7abb      	ldrb	r3, [r7, #10]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	4413      	add	r3, r2
 800f128:	607b      	str	r3, [r7, #4]
        SPI_SS::Set();
 800f12a:	f7f1 fb01 	bl	8000730 <_ZN3P103SetEv>
        return ( data_p);
 800f12e:	687b      	ldr	r3, [r7, #4]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3710      	adds	r7, #16
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20000304 	.word	0x20000304

0800f13c <_ZN8MAX3421eI3P102P9E4TaskEv>:

/* MAX3421 state change task and interrupt handler */
template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::Task(void) {
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
        uint8_t rcode = 0;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]
        uint8_t pinvalue;
        //USB_HOST_SERIAL.print("Vbus state: ");
        //USB_HOST_SERIAL.println( vbusState, HEX );
        pinvalue = INTR::IsSet(); //Read();
 800f148:	f7fe fd0e 	bl	800db68 <_ZN2P95IsSetEv>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73bb      	strb	r3, [r7, #14]
        //pinvalue = digitalRead( MAX_INT );
        if(pinvalue == 0) {
 800f150:	7bbb      	ldrb	r3, [r7, #14]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d104      	bne.n	800f160 <_ZN8MAX3421eI3P102P9E4TaskEv+0x24>
                rcode = IntHandler();
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f937 	bl	800f3ca <_ZN8MAX3421eI3P102P9E10IntHandlerEv>
 800f15c:	4603      	mov	r3, r0
 800f15e:	73fb      	strb	r3, [r7, #15]
        //    pinvalue = digitalRead( MAX_GPX );
        //    if( pinvalue == LOW ) {
        //        GpxHandler();
        //    }
        //    usbSM();                                //USB state machine
        return ( rcode);
 800f160:	7bfb      	ldrb	r3, [r7, #15]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <_ZN8MAX3421eI3P102P9E12getVbusStateEv>:
        uint8_t getVbusState(void) {
 800f16c:	b480      	push	{r7}
 800f16e:	b083      	sub	sp, #12
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
                return vbusState;
 800f174:	4b03      	ldr	r3, [pc, #12]	; (800f184 <_ZN8MAX3421eI3P102P9E12getVbusStateEv+0x18>)
 800f176:	781b      	ldrb	r3, [r3, #0]
        };
 800f178:	4618      	mov	r0, r3
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr
 800f184:	20000655 	.word	0x20000655

0800f188 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh>:
                                pfunc(thePool + i);
        };

        // Allocates new address

        virtual uint8_t AllocAddress(uint8_t parent, bool is_hub = false, uint8_t port = 0) {
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	4608      	mov	r0, r1
 800f192:	4611      	mov	r1, r2
 800f194:	461a      	mov	r2, r3
 800f196:	4603      	mov	r3, r0
 800f198:	70fb      	strb	r3, [r7, #3]
 800f19a:	460b      	mov	r3, r1
 800f19c:	70bb      	strb	r3, [r7, #2]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	707b      	strb	r3, [r7, #1]
                /* if (parent != 0 && port == 0)
                        USB_HOST_SERIAL.println("PRT:0"); */
                UsbDeviceAddress _parent;
                _parent.devAddress = parent;
 800f1a2:	78fb      	ldrb	r3, [r7, #3]
 800f1a4:	733b      	strb	r3, [r7, #12]
                if(_parent.bmReserved || port > 7)
 800f1a6:	7b3b      	ldrb	r3, [r7, #12]
 800f1a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d102      	bne.n	800f1b8 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x30>
 800f1b2:	787b      	ldrb	r3, [r7, #1]
 800f1b4:	2b07      	cmp	r3, #7
 800f1b6:	d901      	bls.n	800f1bc <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x34>
                        //if(parent > 127 || port > 7)
                        return 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	e079      	b.n	800f2b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(is_hub && hubCounter == 7)
 800f1bc:	78bb      	ldrb	r3, [r7, #2]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d005      	beq.n	800f1ce <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	79db      	ldrb	r3, [r3, #7]
 800f1c6:	2b07      	cmp	r3, #7
 800f1c8:	d101      	bne.n	800f1ce <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x46>
                        return 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	e070      	b.n	800f2b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                // finds first empty address entry starting from one
                uint8_t index = FindAddressIndex(0);
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 f8d7 	bl	800f384 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	73fb      	strb	r3, [r7, #15]

                if(!index) // if empty entry is not found
 800f1da:	7bfb      	ldrb	r3, [r7, #15]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d101      	bne.n	800f1e4 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x5c>
                        return 0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e065      	b.n	800f2b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>

                if(_parent.devAddress == 0) {
 800f1e4:	7b3b      	ldrb	r3, [r7, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d124      	bne.n	800f234 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xac>
                        if(is_hub) {
 800f1ea:	78bb      	ldrb	r3, [r7, #2]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00f      	beq.n	800f210 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x88>
                                thePool[index].address.devAddress = 0x41;
 800f1f0:	7bfa      	ldrb	r2, [r7, #15]
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	00db      	lsls	r3, r3, #3
 800f1f8:	1a9b      	subs	r3, r3, r2
 800f1fa:	440b      	add	r3, r1
 800f1fc:	330c      	adds	r3, #12
 800f1fe:	2241      	movs	r2, #65	; 0x41
 800f200:	701a      	strb	r2, [r3, #0]
                                hubCounter++;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	79db      	ldrb	r3, [r3, #7]
 800f206:	3301      	adds	r3, #1
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	71da      	strb	r2, [r3, #7]
 800f20e:	e008      	b.n	800f222 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x9a>
                        } else
                                thePool[index].address.devAddress = 1;
 800f210:	7bfa      	ldrb	r2, [r7, #15]
 800f212:	6879      	ldr	r1, [r7, #4]
 800f214:	4613      	mov	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	1a9b      	subs	r3, r3, r2
 800f21a:	440b      	add	r3, r1
 800f21c:	330c      	adds	r3, #12
 800f21e:	2201      	movs	r2, #1
 800f220:	701a      	strb	r2, [r3, #0]

                        return thePool[index].address.devAddress;
 800f222:	7bfa      	ldrb	r2, [r7, #15]
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	4613      	mov	r3, r2
 800f228:	00db      	lsls	r3, r3, #3
 800f22a:	1a9b      	subs	r3, r3, r2
 800f22c:	440b      	add	r3, r1
 800f22e:	330c      	adds	r3, #12
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	e03d      	b.n	800f2b0 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x128>
                }

                UsbDeviceAddress addr;
                addr.devAddress = 0; // Ensure all bits are zero
 800f234:	2300      	movs	r3, #0
 800f236:	723b      	strb	r3, [r7, #8]
                addr.bmParent = _parent.bmAddress;
 800f238:	7b3b      	ldrb	r3, [r7, #12]
 800f23a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f23e:	b2da      	uxtb	r2, r3
 800f240:	7a3b      	ldrb	r3, [r7, #8]
 800f242:	f362 03c5 	bfi	r3, r2, #3, #3
 800f246:	723b      	strb	r3, [r7, #8]
                if(is_hub) {
 800f248:	78bb      	ldrb	r3, [r7, #2]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d013      	beq.n	800f276 <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0xee>
                        addr.bmHub = 1;
 800f24e:	7a3b      	ldrb	r3, [r7, #8]
 800f250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f254:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = ++hubCounter;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	79db      	ldrb	r3, [r3, #7]
 800f25a:	3301      	adds	r3, #1
 800f25c:	b2da      	uxtb	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	71da      	strb	r2, [r3, #7]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	79db      	ldrb	r3, [r3, #7]
 800f266:	f003 0307 	and.w	r3, r3, #7
 800f26a:	b2da      	uxtb	r2, r3
 800f26c:	7a3b      	ldrb	r3, [r7, #8]
 800f26e:	f362 0302 	bfi	r3, r2, #0, #3
 800f272:	723b      	strb	r3, [r7, #8]
 800f274:	e00b      	b.n	800f28e <_ZN15AddressPoolImplILh16EE12AllocAddressEhbh+0x106>
                } else {
                        addr.bmHub = 0;
 800f276:	7a3b      	ldrb	r3, [r7, #8]
 800f278:	f36f 1386 	bfc	r3, #6, #1
 800f27c:	723b      	strb	r3, [r7, #8]
                        addr.bmAddress = port;
 800f27e:	787b      	ldrb	r3, [r7, #1]
 800f280:	f003 0307 	and.w	r3, r3, #7
 800f284:	b2da      	uxtb	r2, r3
 800f286:	7a3b      	ldrb	r3, [r7, #8]
 800f288:	f362 0302 	bfi	r3, r2, #0, #3
 800f28c:	723b      	strb	r3, [r7, #8]
                }
                thePool[index].address = addr;
 800f28e:	7bfa      	ldrb	r2, [r7, #15]
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	4613      	mov	r3, r2
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	1a9b      	subs	r3, r3, r2
 800f298:	440b      	add	r3, r1
 800f29a:	330c      	adds	r3, #12
 800f29c:	7a3a      	ldrb	r2, [r7, #8]
 800f29e:	701a      	strb	r2, [r3, #0]
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.print(addr.bmParent, HEX);
                                USB_HOST_SERIAL.print(".");
                                USB_HOST_SERIAL.println(addr.bmAddress, HEX);
                 */
                return thePool[index].address.devAddress;
 800f2a0:	7bfa      	ldrb	r2, [r7, #15]
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	1a9b      	subs	r3, r3, r2
 800f2aa:	440b      	add	r3, r1
 800f2ac:	330c      	adds	r3, #12
 800f2ae:	781b      	ldrb	r3, [r3, #0]
        };
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <_ZN15AddressPoolImplILh16EE11FreeAddressEh>:

        // Empties pool entry

        virtual void FreeAddress(uint8_t addr) {
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	70fb      	strb	r3, [r7, #3]
                // if the root hub is disconnected all the addresses should be initialized
                if(addr == 0x41) {
 800f2c4:	78fb      	ldrb	r3, [r7, #3]
 800f2c6:	2b41      	cmp	r3, #65	; 0x41
 800f2c8:	d103      	bne.n	800f2d2 <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x1a>
                        InitAllAddresses();
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f841 	bl	800f352 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>
                        return;
 800f2d0:	e00b      	b.n	800f2ea <_ZN15AddressPoolImplILh16EE11FreeAddressEh+0x32>
                }
                uint8_t index = FindAddressIndex(addr);
 800f2d2:	78fb      	ldrb	r3, [r7, #3]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 f854 	bl	800f384 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	73fb      	strb	r3, [r7, #15]
                FreeAddressByIndex(index);
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f893 	bl	800f410 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
        };
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>:
        void InitEntry(uint8_t index) {
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	70fb      	strb	r3, [r7, #3]
                thePool[index].address.devAddress = 0;
 800f2fc:	78fa      	ldrb	r2, [r7, #3]
 800f2fe:	6879      	ldr	r1, [r7, #4]
 800f300:	4613      	mov	r3, r2
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	1a9b      	subs	r3, r3, r2
 800f306:	440b      	add	r3, r1
 800f308:	330c      	adds	r3, #12
 800f30a:	2200      	movs	r2, #0
 800f30c:	701a      	strb	r2, [r3, #0]
                thePool[index].epcount = 1;
 800f30e:	78fa      	ldrb	r2, [r7, #3]
 800f310:	6879      	ldr	r1, [r7, #4]
 800f312:	4613      	mov	r3, r2
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	1a9b      	subs	r3, r3, r2
 800f318:	440b      	add	r3, r1
 800f31a:	330d      	adds	r3, #13
 800f31c:	2201      	movs	r2, #1
 800f31e:	701a      	strb	r2, [r3, #0]
                thePool[index].lowspeed = 0;
 800f320:	78fa      	ldrb	r2, [r7, #3]
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	4613      	mov	r3, r2
 800f326:	00db      	lsls	r3, r3, #3
 800f328:	1a9b      	subs	r3, r3, r2
 800f32a:	440b      	add	r3, r1
 800f32c:	330e      	adds	r3, #14
 800f32e:	2200      	movs	r2, #0
 800f330:	701a      	strb	r2, [r3, #0]
                thePool[index].epinfo = &dev0ep;
 800f332:	78fa      	ldrb	r2, [r7, #3]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	1d19      	adds	r1, r3, #4
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	4613      	mov	r3, r2
 800f33c:	00db      	lsls	r3, r3, #3
 800f33e:	1a9b      	subs	r3, r3, r2
 800f340:	4403      	add	r3, r0
 800f342:	3308      	adds	r3, #8
 800f344:	6019      	str	r1, [r3, #0]
        };
 800f346:	bf00      	nop
 800f348:	370c      	adds	r7, #12
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr

0800f352 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv>:
        void InitAllAddresses() {
 800f352:	b580      	push	{r7, lr}
 800f354:	b084      	sub	sp, #16
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f35a:	2301      	movs	r3, #1
 800f35c:	73fb      	strb	r3, [r7, #15]
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b0f      	cmp	r3, #15
 800f362:	d808      	bhi.n	800f376 <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0x24>
                        InitEntry(i);
 800f364:	7bfb      	ldrb	r3, [r7, #15]
 800f366:	4619      	mov	r1, r3
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff ffc1 	bl	800f2f0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++)
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
 800f370:	3301      	adds	r3, #1
 800f372:	73fb      	strb	r3, [r7, #15]
 800f374:	e7f3      	b.n	800f35e <_ZN15AddressPoolImplILh16EE16InitAllAddressesEv+0xc>
                hubCounter = 0;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2200      	movs	r2, #0
 800f37a:	71da      	strb	r2, [r3, #7]
        };
 800f37c:	bf00      	nop
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh>:
        uint8_t FindAddressIndex(uint8_t address = 0) {
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	460b      	mov	r3, r1
 800f38e:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f390:	2301      	movs	r3, #1
 800f392:	73fb      	strb	r3, [r7, #15]
 800f394:	7bfb      	ldrb	r3, [r7, #15]
 800f396:	2b0f      	cmp	r3, #15
 800f398:	d810      	bhi.n	800f3bc <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x38>
                        if(thePool[i].address.devAddress == address)
 800f39a:	7bfa      	ldrb	r2, [r7, #15]
 800f39c:	6879      	ldr	r1, [r7, #4]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	00db      	lsls	r3, r3, #3
 800f3a2:	1a9b      	subs	r3, r3, r2
 800f3a4:	440b      	add	r3, r1
 800f3a6:	330c      	adds	r3, #12
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	78fa      	ldrb	r2, [r7, #3]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d101      	bne.n	800f3b4 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x30>
                                return i;
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
 800f3b2:	e004      	b.n	800f3be <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x3a>
                for(uint8_t i = 1; i < MAX_DEVICES_ALLOWED; i++) {
 800f3b4:	7bfb      	ldrb	r3, [r7, #15]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	73fb      	strb	r3, [r7, #15]
 800f3ba:	e7eb      	b.n	800f394 <_ZN15AddressPoolImplILh16EE16FindAddressIndexEh+0x10>
                return 0;
 800f3bc:	2300      	movs	r3, #0
        };
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <_ZN8MAX3421eI3P102P9E10IntHandlerEv>:

template< typename SPI_SS, typename INTR >
uint8_t MAX3421e< SPI_SS, INTR >::IntHandler() {
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b084      	sub	sp, #16
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
        uint8_t HIRQ;
        uint8_t HIRQ_sendback = 0x00;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	73fb      	strb	r3, [r7, #15]
        HIRQ = regRd(rHIRQ); //determine interrupt source
 800f3d6:	21c8      	movs	r1, #200	; 0xc8
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7f2 f8c5 	bl	8001568 <_ZN8MAX3421eI3P102P9E5regRdEh>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	73bb      	strb	r3, [r7, #14]
        //if( HIRQ & bmFRAMEIRQ ) {               //->1ms SOF interrupt handler
        //    HIRQ_sendback |= bmFRAMEIRQ;
        //}//end FRAMEIRQ handling
        if(HIRQ & bmCONDETIRQ) {
 800f3e2:	7bbb      	ldrb	r3, [r7, #14]
 800f3e4:	f003 0320 	and.w	r3, r3, #32
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d006      	beq.n	800f3fa <_ZN8MAX3421eI3P102P9E10IntHandlerEv+0x30>
                busprobe();
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f7f2 f8dd 	bl	80015ac <_ZN8MAX3421eI3P102P9E8busprobeEv>
                HIRQ_sendback |= bmCONDETIRQ;
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
 800f3f4:	f043 0320 	orr.w	r3, r3, #32
 800f3f8:	73fb      	strb	r3, [r7, #15]
        }
        /* End HIRQ interrupts handling, clear serviced IRQs    */
        regWr(rHIRQ, HIRQ_sendback);
 800f3fa:	7bfb      	ldrb	r3, [r7, #15]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	21c8      	movs	r1, #200	; 0xc8
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7f2 f85f 	bl	80014c4 <_ZN8MAX3421eI3P102P9E5regWrEhh>
        return ( HIRQ_sendback);
 800f406:	7bfb      	ldrb	r3, [r7, #15]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>:
        void FreeAddressByIndex(uint8_t index) {
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	70fb      	strb	r3, [r7, #3]
                if(index == 0)
 800f41c:	78fb      	ldrb	r3, [r7, #3]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d03a      	beq.n	800f498 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x88>
                UsbDeviceAddress uda = thePool[index].address;
 800f422:	78fa      	ldrb	r2, [r7, #3]
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	4613      	mov	r3, r2
 800f428:	00db      	lsls	r3, r3, #3
 800f42a:	1a9b      	subs	r3, r3, r2
 800f42c:	440b      	add	r3, r1
 800f42e:	330c      	adds	r3, #12
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	733b      	strb	r3, [r7, #12]
                if(uda.bmHub == 1) {
 800f434:	7b3b      	ldrb	r3, [r7, #12]
 800f436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d025      	beq.n	800f48c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f440:	2301      	movs	r3, #1
 800f442:	73fb      	strb	r3, [r7, #15]
 800f444:	7bfb      	ldrb	r3, [r7, #15]
 800f446:	461a      	mov	r2, r3
 800f448:	7b39      	ldrb	r1, [r7, #12]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f828 	bl	800f4a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>
 800f450:	4603      	mov	r3, r0
 800f452:	73fb      	strb	r3, [r7, #15]
 800f454:	7bfb      	ldrb	r3, [r7, #15]
 800f456:	2b00      	cmp	r3, #0
 800f458:	bf14      	ite	ne
 800f45a:	2301      	movne	r3, #1
 800f45c:	2300      	moveq	r3, #0
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	2b00      	cmp	r3, #0
 800f462:	d005      	beq.n	800f470 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x60>
                                FreeAddressByIndex(i);
 800f464:	7bfb      	ldrb	r3, [r7, #15]
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff ffd1 	bl	800f410 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh>
                        for(uint8_t i = 1; (i = FindChildIndex(uda, i));)
 800f46e:	e7e9      	b.n	800f444 <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x34>
                        if(hubCounter == uda.bmAddress)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	79db      	ldrb	r3, [r3, #7]
 800f474:	7b3a      	ldrb	r2, [r7, #12]
 800f476:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f47a:	b2d2      	uxtb	r2, r2
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d105      	bne.n	800f48c <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x7c>
                                hubCounter--;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	79db      	ldrb	r3, [r3, #7]
 800f484:	3b01      	subs	r3, #1
 800f486:	b2da      	uxtb	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	71da      	strb	r2, [r3, #7]
                InitEntry(index);
 800f48c:	78fb      	ldrb	r3, [r7, #3]
 800f48e:	4619      	mov	r1, r3
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7ff ff2d 	bl	800f2f0 <_ZN15AddressPoolImplILh16EE9InitEntryEh>
 800f496:	e000      	b.n	800f49a <_ZN15AddressPoolImplILh16EE18FreeAddressByIndexEh+0x8a>
                        return;
 800f498:	bf00      	nop
        }
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh>:
        uint8_t FindChildIndex(UsbDeviceAddress addr, uint8_t start = 1) {
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	7039      	strb	r1, [r7, #0]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	70fb      	strb	r3, [r7, #3]
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f4ae:	78fb      	ldrb	r3, [r7, #3]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d004      	beq.n	800f4be <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f4b4:	78fb      	ldrb	r3, [r7, #3]
 800f4b6:	2b0f      	cmp	r3, #15
 800f4b8:	d801      	bhi.n	800f4be <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x1e>
 800f4ba:	78fb      	ldrb	r3, [r7, #3]
 800f4bc:	e000      	b.n	800f4c0 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x20>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	73fb      	strb	r3, [r7, #15]
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
 800f4c4:	2b0f      	cmp	r3, #15
 800f4c6:	d816      	bhi.n	800f4f6 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x56>
                        if(thePool[i].address.bmParent == addr.bmAddress)
 800f4c8:	7bfa      	ldrb	r2, [r7, #15]
 800f4ca:	6879      	ldr	r1, [r7, #4]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	00db      	lsls	r3, r3, #3
 800f4d0:	1a9b      	subs	r3, r3, r2
 800f4d2:	440b      	add	r3, r1
 800f4d4:	3308      	adds	r3, #8
 800f4d6:	791b      	ldrb	r3, [r3, #4]
 800f4d8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800f4dc:	b2da      	uxtb	r2, r3
 800f4de:	783b      	ldrb	r3, [r7, #0]
 800f4e0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d101      	bne.n	800f4ee <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x4e>
                                return i;
 800f4ea:	7bfb      	ldrb	r3, [r7, #15]
 800f4ec:	e004      	b.n	800f4f8 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x58>
                for(uint8_t i = (start < 1 || start >= MAX_DEVICES_ALLOWED) ? 1 : start; i < MAX_DEVICES_ALLOWED; i++) {
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	73fb      	strb	r3, [r7, #15]
 800f4f4:	e7e5      	b.n	800f4c2 <_ZN15AddressPoolImplILh16EE14FindChildIndexE16UsbDeviceAddressh+0x22>
                return 0;
 800f4f6:	2300      	movs	r3, #0
        };
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3714      	adds	r7, #20
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <_ZN20MultiByteValueParser5ParseEPPhPt>:
Web      :  http://www.circuitsathome.com
e-mail   :  support@circuitsathome.com
 */
#include "Usb.h"

bool MultiByteValueParser::Parse(uint8_t **pp, uint16_t *pcntdn) {
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
        if(!pBuf) {
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>
                Notify(PSTR("Buffer pointer is NULL!\r\n"), 0x80);
                return false;
 800f518:	2300      	movs	r3, #0
 800f51a:	e031      	b.n	800f580 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>
        }
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	791b      	ldrb	r3, [r3, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d022      	beq.n	800f56a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d01e      	beq.n	800f56a <_ZN20MultiByteValueParser5ParseEPPhPt+0x66>
                pBuf[valueSize - countDown] = (**pp);
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	68f9      	ldr	r1, [r7, #12]
 800f536:	7949      	ldrb	r1, [r1, #5]
 800f538:	4608      	mov	r0, r1
 800f53a:	68f9      	ldr	r1, [r7, #12]
 800f53c:	7909      	ldrb	r1, [r1, #4]
 800f53e:	1a41      	subs	r1, r0, r1
 800f540:	440b      	add	r3, r1
 800f542:	7812      	ldrb	r2, [r2, #0]
 800f544:	701a      	strb	r2, [r3, #0]
        for(; countDown && (*pcntdn); countDown--, (*pcntdn)--, (*pp)++)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	791b      	ldrb	r3, [r3, #4]
 800f54a:	3b01      	subs	r3, #1
 800f54c:	b2da      	uxtb	r2, r3
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	711a      	strb	r2, [r3, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	3b01      	subs	r3, #1
 800f558:	b29a      	uxth	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	801a      	strh	r2, [r3, #0]
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	1c5a      	adds	r2, r3, #1
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	601a      	str	r2, [r3, #0]
 800f568:	e7d8      	b.n	800f51c <_ZN20MultiByteValueParser5ParseEPPhPt+0x18>

        if(countDown)
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	791b      	ldrb	r3, [r3, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <_ZN20MultiByteValueParser5ParseEPPhPt+0x72>
                return false;
 800f572:	2300      	movs	r3, #0
 800f574:	e004      	b.n	800f580 <_ZN20MultiByteValueParser5ParseEPPhPt+0x7c>

        countDown = valueSize;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	795a      	ldrb	r2, [r3, #5]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	711a      	strb	r2, [r3, #4]
        return true;
 800f57e:	2301      	movs	r3, #1
}
 800f580:	4618      	mov	r0, r3
 800f582:	3714      	adds	r7, #20
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <__cxa_pure_virtual>:
 800f58c:	b508      	push	{r3, lr}
 800f58e:	f000 f80d 	bl	800f5ac <_ZSt9terminatev>

0800f592 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f592:	b508      	push	{r3, lr}
 800f594:	4780      	blx	r0
 800f596:	f000 f80e 	bl	800f5b6 <abort>
	...

0800f59c <_ZSt13get_terminatev>:
 800f59c:	4b02      	ldr	r3, [pc, #8]	; (800f5a8 <_ZSt13get_terminatev+0xc>)
 800f59e:	6818      	ldr	r0, [r3, #0]
 800f5a0:	f3bf 8f5b 	dmb	ish
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	20000174 	.word	0x20000174

0800f5ac <_ZSt9terminatev>:
 800f5ac:	b508      	push	{r3, lr}
 800f5ae:	f7ff fff5 	bl	800f59c <_ZSt13get_terminatev>
 800f5b2:	f7ff ffee 	bl	800f592 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f5b6 <abort>:
 800f5b6:	b508      	push	{r3, lr}
 800f5b8:	2006      	movs	r0, #6
 800f5ba:	f000 f86b 	bl	800f694 <raise>
 800f5be:	2001      	movs	r0, #1
 800f5c0:	f7f2 f9e2 	bl	8001988 <_exit>

0800f5c4 <__errno>:
 800f5c4:	4b01      	ldr	r3, [pc, #4]	; (800f5cc <__errno+0x8>)
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	20000178 	.word	0x20000178

0800f5d0 <__libc_init_array>:
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	4d0d      	ldr	r5, [pc, #52]	; (800f608 <__libc_init_array+0x38>)
 800f5d4:	4c0d      	ldr	r4, [pc, #52]	; (800f60c <__libc_init_array+0x3c>)
 800f5d6:	1b64      	subs	r4, r4, r5
 800f5d8:	10a4      	asrs	r4, r4, #2
 800f5da:	2600      	movs	r6, #0
 800f5dc:	42a6      	cmp	r6, r4
 800f5de:	d109      	bne.n	800f5f4 <__libc_init_array+0x24>
 800f5e0:	4d0b      	ldr	r5, [pc, #44]	; (800f610 <__libc_init_array+0x40>)
 800f5e2:	4c0c      	ldr	r4, [pc, #48]	; (800f614 <__libc_init_array+0x44>)
 800f5e4:	f000 f884 	bl	800f6f0 <_init>
 800f5e8:	1b64      	subs	r4, r4, r5
 800f5ea:	10a4      	asrs	r4, r4, #2
 800f5ec:	2600      	movs	r6, #0
 800f5ee:	42a6      	cmp	r6, r4
 800f5f0:	d105      	bne.n	800f5fe <__libc_init_array+0x2e>
 800f5f2:	bd70      	pop	{r4, r5, r6, pc}
 800f5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5f8:	4798      	blx	r3
 800f5fa:	3601      	adds	r6, #1
 800f5fc:	e7ee      	b.n	800f5dc <__libc_init_array+0xc>
 800f5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f602:	4798      	blx	r3
 800f604:	3601      	adds	r6, #1
 800f606:	e7f2      	b.n	800f5ee <__libc_init_array+0x1e>
 800f608:	0800fa28 	.word	0x0800fa28
 800f60c:	0800fa28 	.word	0x0800fa28
 800f610:	0800fa28 	.word	0x0800fa28
 800f614:	0800fa30 	.word	0x0800fa30

0800f618 <memcpy>:
 800f618:	440a      	add	r2, r1
 800f61a:	4291      	cmp	r1, r2
 800f61c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f620:	d100      	bne.n	800f624 <memcpy+0xc>
 800f622:	4770      	bx	lr
 800f624:	b510      	push	{r4, lr}
 800f626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f62e:	4291      	cmp	r1, r2
 800f630:	d1f9      	bne.n	800f626 <memcpy+0xe>
 800f632:	bd10      	pop	{r4, pc}

0800f634 <memset>:
 800f634:	4402      	add	r2, r0
 800f636:	4603      	mov	r3, r0
 800f638:	4293      	cmp	r3, r2
 800f63a:	d100      	bne.n	800f63e <memset+0xa>
 800f63c:	4770      	bx	lr
 800f63e:	f803 1b01 	strb.w	r1, [r3], #1
 800f642:	e7f9      	b.n	800f638 <memset+0x4>

0800f644 <_raise_r>:
 800f644:	291f      	cmp	r1, #31
 800f646:	b538      	push	{r3, r4, r5, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	460d      	mov	r5, r1
 800f64c:	d904      	bls.n	800f658 <_raise_r+0x14>
 800f64e:	2316      	movs	r3, #22
 800f650:	6003      	str	r3, [r0, #0]
 800f652:	f04f 30ff 	mov.w	r0, #4294967295
 800f656:	bd38      	pop	{r3, r4, r5, pc}
 800f658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f65a:	b112      	cbz	r2, 800f662 <_raise_r+0x1e>
 800f65c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f660:	b94b      	cbnz	r3, 800f676 <_raise_r+0x32>
 800f662:	4620      	mov	r0, r4
 800f664:	f000 f830 	bl	800f6c8 <_getpid_r>
 800f668:	462a      	mov	r2, r5
 800f66a:	4601      	mov	r1, r0
 800f66c:	4620      	mov	r0, r4
 800f66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f672:	f000 b817 	b.w	800f6a4 <_kill_r>
 800f676:	2b01      	cmp	r3, #1
 800f678:	d00a      	beq.n	800f690 <_raise_r+0x4c>
 800f67a:	1c59      	adds	r1, r3, #1
 800f67c:	d103      	bne.n	800f686 <_raise_r+0x42>
 800f67e:	2316      	movs	r3, #22
 800f680:	6003      	str	r3, [r0, #0]
 800f682:	2001      	movs	r0, #1
 800f684:	e7e7      	b.n	800f656 <_raise_r+0x12>
 800f686:	2400      	movs	r4, #0
 800f688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f68c:	4628      	mov	r0, r5
 800f68e:	4798      	blx	r3
 800f690:	2000      	movs	r0, #0
 800f692:	e7e0      	b.n	800f656 <_raise_r+0x12>

0800f694 <raise>:
 800f694:	4b02      	ldr	r3, [pc, #8]	; (800f6a0 <raise+0xc>)
 800f696:	4601      	mov	r1, r0
 800f698:	6818      	ldr	r0, [r3, #0]
 800f69a:	f7ff bfd3 	b.w	800f644 <_raise_r>
 800f69e:	bf00      	nop
 800f6a0:	20000178 	.word	0x20000178

0800f6a4 <_kill_r>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4d07      	ldr	r5, [pc, #28]	; (800f6c4 <_kill_r+0x20>)
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	4608      	mov	r0, r1
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	602b      	str	r3, [r5, #0]
 800f6b2:	f7f2 f959 	bl	8001968 <_kill>
 800f6b6:	1c43      	adds	r3, r0, #1
 800f6b8:	d102      	bne.n	800f6c0 <_kill_r+0x1c>
 800f6ba:	682b      	ldr	r3, [r5, #0]
 800f6bc:	b103      	cbz	r3, 800f6c0 <_kill_r+0x1c>
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	bd38      	pop	{r3, r4, r5, pc}
 800f6c2:	bf00      	nop
 800f6c4:	20000f50 	.word	0x20000f50

0800f6c8 <_getpid_r>:
 800f6c8:	f7f2 b946 	b.w	8001958 <_getpid>

0800f6cc <strncmp>:
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	b16a      	cbz	r2, 800f6ec <strncmp+0x20>
 800f6d0:	3901      	subs	r1, #1
 800f6d2:	1884      	adds	r4, r0, r2
 800f6d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f6d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d103      	bne.n	800f6e8 <strncmp+0x1c>
 800f6e0:	42a0      	cmp	r0, r4
 800f6e2:	d001      	beq.n	800f6e8 <strncmp+0x1c>
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1f5      	bne.n	800f6d4 <strncmp+0x8>
 800f6e8:	1a98      	subs	r0, r3, r2
 800f6ea:	bd10      	pop	{r4, pc}
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	e7fc      	b.n	800f6ea <strncmp+0x1e>

0800f6f0 <_init>:
 800f6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f2:	bf00      	nop
 800f6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6f6:	bc08      	pop	{r3}
 800f6f8:	469e      	mov	lr, r3
 800f6fa:	4770      	bx	lr

0800f6fc <_fini>:
 800f6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fe:	bf00      	nop
 800f700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f702:	bc08      	pop	{r3}
 800f704:	469e      	mov	lr, r3
 800f706:	4770      	bx	lr
